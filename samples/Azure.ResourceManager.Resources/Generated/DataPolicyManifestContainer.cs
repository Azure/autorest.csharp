// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.Resources
{
    /// <summary> A class representing collection of DataPolicyManifest and their operations over a Tenant. </summary>
    public partial class DataPolicyManifestContainer : ResourceContainerBase<TenantResourceIdentifier, DataPolicyManifest, DataPolicyManifestData>
    {
        /// <summary> Initializes a new instance of the <see cref="DataPolicyManifestContainer"/> class for mocking. </summary>
        protected DataPolicyManifestContainer()
        {
        }

        /// <summary> Initializes a new instance of DataPolicyManifestContainer class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal DataPolicyManifestContainer(OperationsBase parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
        }

        private readonly ClientDiagnostics _clientDiagnostics;

        /// <summary> Represents the REST operations. </summary>
        private DataPolicyManifestsRestOperations _restClient => new DataPolicyManifestsRestOperations(_clientDiagnostics, Pipeline, BaseUri);

        /// <summary> Typed Resource Identifier for the container. </summary>
        public new TenantResourceIdentifier Id => base.Id as TenantResourceIdentifier;

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => ResourceIdentifier.RootResourceIdentifier.ResourceType;

        // Container level operations.

        /// <summary> Gets details for this resource from the service. </summary>
        /// <param name="policyMode"> The policy mode of the data policy manifest to get. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public virtual Response<DataPolicyManifest> Get(string policyMode, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataPolicyManifestContainer.Get");
            scope.Start();
            try
            {
                if (policyMode == null)
                {
                    throw new ArgumentNullException(nameof(policyMode));
                }

                var response = _restClient.GetByPolicyMode(policyMode, cancellationToken: cancellationToken);
                return Response.FromValue(new DataPolicyManifest(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets details for this resource from the service. </summary>
        /// <param name="policyMode"> The policy mode of the data policy manifest to get. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async virtual Task<Response<DataPolicyManifest>> GetAsync(string policyMode, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataPolicyManifestContainer.Get");
            scope.Start();
            try
            {
                if (policyMode == null)
                {
                    throw new ArgumentNullException(nameof(policyMode));
                }

                var response = await _restClient.GetByPolicyModeAsync(policyMode, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new DataPolicyManifest(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="policyMode"> The policy mode of the data policy manifest to get. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public virtual DataPolicyManifest TryGet(string policyMode, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataPolicyManifestContainer.TryGet");
            scope.Start();
            try
            {
                if (policyMode == null)
                {
                    throw new ArgumentNullException(nameof(policyMode));
                }

                return Get(policyMode, cancellationToken: cancellationToken).Value;
            }
            catch (RequestFailedException e) when (e.Status == 404)
            {
                return null;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="policyMode"> The policy mode of the data policy manifest to get. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async virtual Task<DataPolicyManifest> TryGetAsync(string policyMode, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataPolicyManifestContainer.TryGet");
            scope.Start();
            try
            {
                if (policyMode == null)
                {
                    throw new ArgumentNullException(nameof(policyMode));
                }

                return await GetAsync(policyMode, cancellationToken: cancellationToken).ConfigureAwait(false);
            }
            catch (RequestFailedException e) when (e.Status == 404)
            {
                return null;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="policyMode"> The policy mode of the data policy manifest to get. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public virtual bool DoesExist(string policyMode, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataPolicyManifestContainer.DoesExist");
            scope.Start();
            try
            {
                if (policyMode == null)
                {
                    throw new ArgumentNullException(nameof(policyMode));
                }

                return TryGet(policyMode, cancellationToken: cancellationToken) != null;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="policyMode"> The policy mode of the data policy manifest to get. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async virtual Task<bool> DoesExistAsync(string policyMode, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataPolicyManifestContainer.DoesExist");
            scope.Start();
            try
            {
                if (policyMode == null)
                {
                    throw new ArgumentNullException(nameof(policyMode));
                }

                return await TryGetAsync(policyMode, cancellationToken: cancellationToken).ConfigureAwait(false) != null;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Filters the list of <see cref="DataPolicyManifest" /> for this resource group represented as generic resources. </summary>
        /// <param name="nameFilter"> The filter used in this operation. </param>
        /// <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. </param>
        /// <param name="top"> The number of results to return. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of resource that may take multiple service requests to iterate over. </returns>
        public Pageable<Core.GenericResourceExpanded> ListAsGenericResource(string nameFilter, string expand = null, int? top = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataPolicyManifestContainer.ListAsGenericResource");
            scope.Start();
            try
            {
                var filters = new ResourceFilterCollection(DataPolicyManifestOperations.ResourceType);
                filters.SubstringFilter = nameFilter;
                return ResourceListOperations.ListAtContext(Parent as ResourceGroupOperations, filters, expand, top, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Filters the list of <see cref="DataPolicyManifest" /> for this resource group represented as generic resources. </summary>
        /// <param name="nameFilter"> The filter used in this operation. </param>
        /// <param name="expand"> Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`. </param>
        /// <param name="top"> The number of results to return. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> An async collection of resource that may take multiple service requests to iterate over. </returns>
        public AsyncPageable<Core.GenericResourceExpanded> ListAsGenericResourceAsync(string nameFilter, string expand = null, int? top = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataPolicyManifestContainer.ListAsGenericResource");
            scope.Start();
            try
            {
                var filters = new ResourceFilterCollection(DataPolicyManifestOperations.ResourceType);
                filters.SubstringFilter = nameFilter;
                return ResourceListOperations.ListAtContextAsync(Parent as ResourceGroupOperations, filters, expand, top, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // Builders.
        // public ArmBuilder<TenantResourceIdentifier, DataPolicyManifest, DataPolicyManifestData> Construct() { }
    }
}
