// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Analytics.Purview.Account;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Analytics.Purview.Account.Samples
{
    public partial class Samples_PurviewAccountsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAccountProperties_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewAccountsClient client = new PurviewAccountsClient(endpoint, credential);

            Response response = client.GetAccountProperties(null);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAccountProperties_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewAccountsClient client = new PurviewAccountsClient(endpoint, credential);

            Response response = await client.GetAccountPropertiesAsync(null);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAccountProperties_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewAccountsClient client = new PurviewAccountsClient(endpoint, credential);

            Response response = client.GetAccountProperties(null);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("id").ToString());
            Console.WriteLine(element.GetProperty("identity").GetProperty("principalId").ToString());
            Console.WriteLine(element.GetProperty("identity").GetProperty("tenantId").ToString());
            Console.WriteLine(element.GetProperty("identity").GetProperty("type").ToString());
            Console.WriteLine(element.GetProperty("location").ToString());
            Console.WriteLine(element.GetProperty("name").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("cloudConnectors").GetProperty("awsExternalId").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("createdAt").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("createdBy").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("createdByObjectId").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("endpoints").GetProperty("catalog").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("endpoints").GetProperty("guardian").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("endpoints").GetProperty("scan").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("friendlyName").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("managedResourceGroupName").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("managedResources").GetProperty("eventHubNamespace").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("managedResources").GetProperty("resourceGroup").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("managedResources").GetProperty("storageAccount").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("id").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("name").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("properties").GetProperty("privateEndpoint").GetProperty("id").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("actionsRequired").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("description").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("status").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("type").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("publicNetworkAccess").ToString());
            Console.WriteLine(element.GetProperty("sku").GetProperty("capacity").ToString());
            Console.WriteLine(element.GetProperty("sku").GetProperty("name").ToString());
            Console.WriteLine(element.GetProperty("systemData").GetProperty("createdAt").ToString());
            Console.WriteLine(element.GetProperty("systemData").GetProperty("createdBy").ToString());
            Console.WriteLine(element.GetProperty("systemData").GetProperty("createdByType").ToString());
            Console.WriteLine(element.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
            Console.WriteLine(element.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
            Console.WriteLine(element.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
            Console.WriteLine(element.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(element.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAccountProperties_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewAccountsClient client = new PurviewAccountsClient(endpoint, credential);

            Response response = await client.GetAccountPropertiesAsync(null);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("id").ToString());
            Console.WriteLine(element.GetProperty("identity").GetProperty("principalId").ToString());
            Console.WriteLine(element.GetProperty("identity").GetProperty("tenantId").ToString());
            Console.WriteLine(element.GetProperty("identity").GetProperty("type").ToString());
            Console.WriteLine(element.GetProperty("location").ToString());
            Console.WriteLine(element.GetProperty("name").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("cloudConnectors").GetProperty("awsExternalId").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("createdAt").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("createdBy").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("createdByObjectId").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("endpoints").GetProperty("catalog").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("endpoints").GetProperty("guardian").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("endpoints").GetProperty("scan").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("friendlyName").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("managedResourceGroupName").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("managedResources").GetProperty("eventHubNamespace").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("managedResources").GetProperty("resourceGroup").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("managedResources").GetProperty("storageAccount").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("id").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("name").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("properties").GetProperty("privateEndpoint").GetProperty("id").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("actionsRequired").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("description").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("status").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("type").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("publicNetworkAccess").ToString());
            Console.WriteLine(element.GetProperty("sku").GetProperty("capacity").ToString());
            Console.WriteLine(element.GetProperty("sku").GetProperty("name").ToString());
            Console.WriteLine(element.GetProperty("systemData").GetProperty("createdAt").ToString());
            Console.WriteLine(element.GetProperty("systemData").GetProperty("createdBy").ToString());
            Console.WriteLine(element.GetProperty("systemData").GetProperty("createdByType").ToString());
            Console.WriteLine(element.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
            Console.WriteLine(element.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
            Console.WriteLine(element.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
            Console.WriteLine(element.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(element.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateAccountProperties_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewAccountsClient client = new PurviewAccountsClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateAccountProperties(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateAccountProperties_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewAccountsClient client = new PurviewAccountsClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateAccountPropertiesAsync(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateAccountProperties_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewAccountsClient client = new PurviewAccountsClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                friendlyName = "<friendlyName>",
            });
            Response response = client.UpdateAccountProperties(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("id").ToString());
            Console.WriteLine(element.GetProperty("identity").GetProperty("principalId").ToString());
            Console.WriteLine(element.GetProperty("identity").GetProperty("tenantId").ToString());
            Console.WriteLine(element.GetProperty("identity").GetProperty("type").ToString());
            Console.WriteLine(element.GetProperty("location").ToString());
            Console.WriteLine(element.GetProperty("name").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("cloudConnectors").GetProperty("awsExternalId").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("createdAt").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("createdBy").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("createdByObjectId").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("endpoints").GetProperty("catalog").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("endpoints").GetProperty("guardian").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("endpoints").GetProperty("scan").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("friendlyName").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("managedResourceGroupName").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("managedResources").GetProperty("eventHubNamespace").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("managedResources").GetProperty("resourceGroup").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("managedResources").GetProperty("storageAccount").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("id").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("name").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("properties").GetProperty("privateEndpoint").GetProperty("id").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("actionsRequired").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("description").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("status").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("type").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("publicNetworkAccess").ToString());
            Console.WriteLine(element.GetProperty("sku").GetProperty("capacity").ToString());
            Console.WriteLine(element.GetProperty("sku").GetProperty("name").ToString());
            Console.WriteLine(element.GetProperty("systemData").GetProperty("createdAt").ToString());
            Console.WriteLine(element.GetProperty("systemData").GetProperty("createdBy").ToString());
            Console.WriteLine(element.GetProperty("systemData").GetProperty("createdByType").ToString());
            Console.WriteLine(element.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
            Console.WriteLine(element.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
            Console.WriteLine(element.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
            Console.WriteLine(element.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(element.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateAccountProperties_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewAccountsClient client = new PurviewAccountsClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                friendlyName = "<friendlyName>",
            });
            Response response = await client.UpdateAccountPropertiesAsync(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("id").ToString());
            Console.WriteLine(element.GetProperty("identity").GetProperty("principalId").ToString());
            Console.WriteLine(element.GetProperty("identity").GetProperty("tenantId").ToString());
            Console.WriteLine(element.GetProperty("identity").GetProperty("type").ToString());
            Console.WriteLine(element.GetProperty("location").ToString());
            Console.WriteLine(element.GetProperty("name").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("cloudConnectors").GetProperty("awsExternalId").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("createdAt").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("createdBy").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("createdByObjectId").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("endpoints").GetProperty("catalog").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("endpoints").GetProperty("guardian").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("endpoints").GetProperty("scan").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("friendlyName").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("managedResourceGroupName").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("managedResources").GetProperty("eventHubNamespace").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("managedResources").GetProperty("resourceGroup").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("managedResources").GetProperty("storageAccount").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("id").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("name").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("properties").GetProperty("privateEndpoint").GetProperty("id").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("actionsRequired").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("description").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("properties").GetProperty("privateLinkServiceConnectionState").GetProperty("status").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("privateEndpointConnections")[0].GetProperty("type").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("provisioningState").ToString());
            Console.WriteLine(element.GetProperty("properties").GetProperty("publicNetworkAccess").ToString());
            Console.WriteLine(element.GetProperty("sku").GetProperty("capacity").ToString());
            Console.WriteLine(element.GetProperty("sku").GetProperty("name").ToString());
            Console.WriteLine(element.GetProperty("systemData").GetProperty("createdAt").ToString());
            Console.WriteLine(element.GetProperty("systemData").GetProperty("createdBy").ToString());
            Console.WriteLine(element.GetProperty("systemData").GetProperty("createdByType").ToString());
            Console.WriteLine(element.GetProperty("systemData").GetProperty("lastModifiedAt").ToString());
            Console.WriteLine(element.GetProperty("systemData").GetProperty("lastModifiedBy").ToString());
            Console.WriteLine(element.GetProperty("systemData").GetProperty("lastModifiedByType").ToString());
            Console.WriteLine(element.GetProperty("tags").GetProperty("<key>").ToString());
            Console.WriteLine(element.GetProperty("type").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAccessKeys_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewAccountsClient client = new PurviewAccountsClient(endpoint, credential);

            Response response = client.GetAccessKeys(null);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAccessKeys_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewAccountsClient client = new PurviewAccountsClient(endpoint, credential);

            Response response = await client.GetAccessKeysAsync(null);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAccessKeys_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewAccountsClient client = new PurviewAccountsClient(endpoint, credential);

            Response response = client.GetAccessKeys(null);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("atlasKafkaPrimaryEndpoint").ToString());
            Console.WriteLine(element.GetProperty("atlasKafkaSecondaryEndpoint").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAccessKeys_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewAccountsClient client = new PurviewAccountsClient(endpoint, credential);

            Response response = await client.GetAccessKeysAsync(null);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("atlasKafkaPrimaryEndpoint").ToString());
            Console.WriteLine(element.GetProperty("atlasKafkaSecondaryEndpoint").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RegenerateAccessKey_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewAccountsClient client = new PurviewAccountsClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new object());
            Response response = client.RegenerateAccessKey(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RegenerateAccessKey_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewAccountsClient client = new PurviewAccountsClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.RegenerateAccessKeyAsync(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RegenerateAccessKey_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewAccountsClient client = new PurviewAccountsClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                keyType = "PrimaryAtlasKafkaKey",
            });
            Response response = client.RegenerateAccessKey(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("atlasKafkaPrimaryEndpoint").ToString());
            Console.WriteLine(element.GetProperty("atlasKafkaSecondaryEndpoint").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RegenerateAccessKey_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewAccountsClient client = new PurviewAccountsClient(endpoint, credential);

            RequestContent content = RequestContent.Create(new
            {
                keyType = "PrimaryAtlasKafkaKey",
            });
            Response response = await client.RegenerateAccessKeyAsync(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("atlasKafkaPrimaryEndpoint").ToString());
            Console.WriteLine(element.GetProperty("atlasKafkaSecondaryEndpoint").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetResourceSetRules_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewAccountsClient client = new PurviewAccountsClient(endpoint, credential);

            foreach (BinaryData item in client.GetResourceSetRules(null, null))
            {
                JsonElement element = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(element.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetResourceSetRules_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewAccountsClient client = new PurviewAccountsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetResourceSetRulesAsync(null, null))
            {
                JsonElement element = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(element.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetResourceSetRules_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewAccountsClient client = new PurviewAccountsClient(endpoint, credential);

            foreach (BinaryData item in client.GetResourceSetRules("<skipToken>", null))
            {
                JsonElement element = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(element.GetProperty("advancedResourceSet").GetProperty("modifiedAt").ToString());
                Console.WriteLine(element.GetProperty("advancedResourceSet").GetProperty("resourceSetProcessing").ToString());
                Console.WriteLine(element.GetProperty("name").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("createdBy").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("filterType").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("lastUpdatedTimestamp").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("modifiedBy").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("name").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("path").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("createdBy").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("description").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("disabled").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("disableRecursiveReplacerApplication").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("lastUpdatedTimestamp").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("modifiedBy").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("name").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("typeName").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("createdBy").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("enableDefaultPatterns").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("lastUpdatedTimestamp").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("modifiedBy").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("description").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("disabled").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("dynamicReplacement").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("entityTypes")[0].ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("lastUpdatedTimestamp").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("name").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("maxDigits").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("maxLetters").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minDashes").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minDigits").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minDigitsOrLetters").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minDots").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minHex").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minLetters").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minUnderscores").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("options").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("regexStr").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("replaceWith").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("version").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("condition").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("createdBy").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("description").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("disabled").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("disableRecursiveReplacerApplication").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("maxDigits").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("maxLetters").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minDashes").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minDigits").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minDigitsOrLetters").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minDots").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minHex").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minLetters").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minUnderscores").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("options").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("regexStr").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("lastUpdatedTimestamp").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("modifiedBy").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("name").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("maxDigits").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("maxLetters").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minDashes").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minDigits").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minDigitsOrLetters").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minDots").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minHex").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minLetters").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minUnderscores").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("options").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("regexStr").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("replaceWith").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("createdBy").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("filterType").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("lastUpdatedTimestamp").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("modifiedBy").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("name").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("path").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("bindingUrl").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("displayName").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("isResourceSet").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("lastUpdatedTimestamp").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("name").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("qualifiedName").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("storeType").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("version").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetResourceSetRules_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            PurviewAccountsClient client = new PurviewAccountsClient(endpoint, credential);

            await foreach (BinaryData item in client.GetResourceSetRulesAsync("<skipToken>", null))
            {
                JsonElement element = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(element.GetProperty("advancedResourceSet").GetProperty("modifiedAt").ToString());
                Console.WriteLine(element.GetProperty("advancedResourceSet").GetProperty("resourceSetProcessing").ToString());
                Console.WriteLine(element.GetProperty("name").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("createdBy").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("filterType").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("lastUpdatedTimestamp").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("modifiedBy").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("name").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("path").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("createdBy").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("description").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("disabled").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("disableRecursiveReplacerApplication").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("lastUpdatedTimestamp").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("modifiedBy").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("name").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("typeName").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("createdBy").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("enableDefaultPatterns").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("lastUpdatedTimestamp").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("modifiedBy").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("description").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("disabled").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("dynamicReplacement").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("entityTypes")[0].ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("lastUpdatedTimestamp").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("name").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("maxDigits").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("maxLetters").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minDashes").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minDigits").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minDigitsOrLetters").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minDots").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minHex").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minLetters").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minUnderscores").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("options").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("regexStr").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("replaceWith").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("version").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("condition").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("createdBy").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("description").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("disabled").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("disableRecursiveReplacerApplication").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("maxDigits").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("maxLetters").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minDashes").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minDigits").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minDigitsOrLetters").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minDots").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minHex").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minLetters").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minUnderscores").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("options").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("regexStr").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("lastUpdatedTimestamp").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("modifiedBy").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("name").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("maxDigits").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("maxLetters").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minDashes").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minDigits").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minDigitsOrLetters").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minDots").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minHex").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minLetters").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minUnderscores").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("options").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("regexStr").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("replaceWith").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("createdBy").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("filterType").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("lastUpdatedTimestamp").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("modifiedBy").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("name").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("path").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("bindingUrl").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("displayName").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("isResourceSet").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("lastUpdatedTimestamp").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("name").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("qualifiedName").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("storeType").ToString());
                Console.WriteLine(element.GetProperty("pathPatternConfig").GetProperty("version").ToString());
            }
        }
    }
}
