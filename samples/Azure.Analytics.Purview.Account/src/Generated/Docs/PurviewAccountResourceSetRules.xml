<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetResourceSetRuleAsync(RequestContext)">
      <example>
This sample shows how to call GetResourceSetRuleAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewAccountResourceSetRules client = new PurviewAccountsClient(endpoint, credential).GetResourceSetRulesClient();

Response response = await client.GetResourceSetRuleAsync(null);
]]></code>
This sample shows how to call GetResourceSetRuleAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewAccountResourceSetRules client = new PurviewAccountsClient(endpoint, credential).GetResourceSetRulesClient();

Response response = await client.GetResourceSetRuleAsync(null);
]]></code></example>
    </member>
    <member name="GetResourceSetRule(RequestContext)">
      <example>
This sample shows how to call GetResourceSetRule and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewAccountResourceSetRules client = new PurviewAccountsClient(endpoint, credential).GetResourceSetRulesClient();

Response response = client.GetResourceSetRule(null);
]]></code>
This sample shows how to call GetResourceSetRule with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewAccountResourceSetRules client = new PurviewAccountsClient(endpoint, credential).GetResourceSetRulesClient();

Response response = client.GetResourceSetRule(null);
]]></code></example>
    </member>
    <member name="CreateOrUpdateResourceSetRuleAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateResourceSetRuleAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewAccountResourceSetRules client = new PurviewAccountsClient(endpoint, credential).GetResourceSetRulesClient();

RequestContent content = RequestContent.Create(new object());
Response response = await client.CreateOrUpdateResourceSetRuleAsync(content);
]]></code>
This sample shows how to call CreateOrUpdateResourceSetRuleAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewAccountResourceSetRules client = new PurviewAccountsClient(endpoint, credential).GetResourceSetRulesClient();

RequestContent content = RequestContent.Create(new
{
    advancedResourceSet = new
    {
        modifiedAt = "2022-05-10T18:57:31.2311892Z",
        resourceSetProcessing = "Default",
    },
    pathPatternConfig = new
    {
        acceptedPatterns = new object[]
        {
            new
            {
                createdBy = "<createdBy>",
                filterType = "Pattern",
                lastUpdatedTimestamp = 1234L,
                modifiedBy = "<modifiedBy>",
                name = "<name>",
                path = "<path>",
            }
        },
        complexReplacers = new object[]
        {
            new
            {
                createdBy = "<createdBy>",
                description = "<description>",
                disabled = true,
                disableRecursiveReplacerApplication = true,
                lastUpdatedTimestamp = 1234L,
                modifiedBy = "<modifiedBy>",
                name = "<name>",
                typeName = "<typeName>",
            }
        },
        createdBy = "<createdBy>",
        enableDefaultPatterns = true,
        lastUpdatedTimestamp = 1234L,
        modifiedBy = "<modifiedBy>",
        normalizationRules = new object[]
        {
            new
            {
                description = "<description>",
                disabled = true,
                dynamicReplacement = true,
                entityTypes = new object[]
                {
                    "<entityTypes>"
                },
                lastUpdatedTimestamp = 1234L,
                name = "<name>",
                regex = new
                {
                    maxDigits = 1234,
                    maxLetters = 1234,
                    minDashes = 1234,
                    minDigits = 1234,
                    minDigitsOrLetters = 1234,
                    minDots = 1234,
                    minHex = 1234,
                    minLetters = 1234,
                    minUnderscores = 1234,
                    options = 1234,
                    regexStr = "<regexStr>",
                },
                replaceWith = "<replaceWith>",
                version = 123.45,
            }
        },
        regexReplacers = new object[]
        {
            new
            {
                condition = "<condition>",
                createdBy = "<createdBy>",
                description = "<description>",
                disabled = true,
                disableRecursiveReplacerApplication = true,
                lastUpdatedTimestamp = 1234L,
                modifiedBy = "<modifiedBy>",
                name = "<name>",
                replaceWith = "<replaceWith>",
            }
        },
        rejectedPatterns = new object[]
        {
            null
        },
        scopedRules = new object[]
        {
            new
            {
                bindingUrl = "<bindingUrl>",
                rules = new object[]
                {
                    new
                    {
                        displayName = "<displayName>",
                        isResourceSet = true,
                        lastUpdatedTimestamp = 1234L,
                        name = "<name>",
                        qualifiedName = "<qualifiedName>",
                    }
                },
                storeType = "<storeType>",
            }
        },
        version = 1234,
    },
});
Response response = await client.CreateOrUpdateResourceSetRuleAsync(content);
]]></code></example>
    </member>
    <member name="CreateOrUpdateResourceSetRule(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateResourceSetRule and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewAccountResourceSetRules client = new PurviewAccountsClient(endpoint, credential).GetResourceSetRulesClient();

RequestContent content = RequestContent.Create(new object());
Response response = client.CreateOrUpdateResourceSetRule(content);
]]></code>
This sample shows how to call CreateOrUpdateResourceSetRule with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewAccountResourceSetRules client = new PurviewAccountsClient(endpoint, credential).GetResourceSetRulesClient();

RequestContent content = RequestContent.Create(new
{
    advancedResourceSet = new
    {
        modifiedAt = "2022-05-10T18:57:31.2311892Z",
        resourceSetProcessing = "Default",
    },
    pathPatternConfig = new
    {
        acceptedPatterns = new object[]
        {
            new
            {
                createdBy = "<createdBy>",
                filterType = "Pattern",
                lastUpdatedTimestamp = 1234L,
                modifiedBy = "<modifiedBy>",
                name = "<name>",
                path = "<path>",
            }
        },
        complexReplacers = new object[]
        {
            new
            {
                createdBy = "<createdBy>",
                description = "<description>",
                disabled = true,
                disableRecursiveReplacerApplication = true,
                lastUpdatedTimestamp = 1234L,
                modifiedBy = "<modifiedBy>",
                name = "<name>",
                typeName = "<typeName>",
            }
        },
        createdBy = "<createdBy>",
        enableDefaultPatterns = true,
        lastUpdatedTimestamp = 1234L,
        modifiedBy = "<modifiedBy>",
        normalizationRules = new object[]
        {
            new
            {
                description = "<description>",
                disabled = true,
                dynamicReplacement = true,
                entityTypes = new object[]
                {
                    "<entityTypes>"
                },
                lastUpdatedTimestamp = 1234L,
                name = "<name>",
                regex = new
                {
                    maxDigits = 1234,
                    maxLetters = 1234,
                    minDashes = 1234,
                    minDigits = 1234,
                    minDigitsOrLetters = 1234,
                    minDots = 1234,
                    minHex = 1234,
                    minLetters = 1234,
                    minUnderscores = 1234,
                    options = 1234,
                    regexStr = "<regexStr>",
                },
                replaceWith = "<replaceWith>",
                version = 123.45,
            }
        },
        regexReplacers = new object[]
        {
            new
            {
                condition = "<condition>",
                createdBy = "<createdBy>",
                description = "<description>",
                disabled = true,
                disableRecursiveReplacerApplication = true,
                lastUpdatedTimestamp = 1234L,
                modifiedBy = "<modifiedBy>",
                name = "<name>",
                replaceWith = "<replaceWith>",
            }
        },
        rejectedPatterns = new object[]
        {
            null
        },
        scopedRules = new object[]
        {
            new
            {
                bindingUrl = "<bindingUrl>",
                rules = new object[]
                {
                    new
                    {
                        displayName = "<displayName>",
                        isResourceSet = true,
                        lastUpdatedTimestamp = 1234L,
                        name = "<name>",
                        qualifiedName = "<qualifiedName>",
                    }
                },
                storeType = "<storeType>",
            }
        },
        version = 1234,
    },
});
Response response = client.CreateOrUpdateResourceSetRule(content);
]]></code></example>
    </member>
    <member name="DeleteResourceSetRuleAsync(RequestContext)">
      <example>
This sample shows how to call DeleteResourceSetRuleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewAccountResourceSetRules client = new PurviewAccountsClient(endpoint, credential).GetResourceSetRulesClient();

Response response = await client.DeleteResourceSetRuleAsync();
]]></code>
This sample shows how to call DeleteResourceSetRuleAsync with all request content.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewAccountResourceSetRules client = new PurviewAccountsClient(endpoint, credential).GetResourceSetRulesClient();

Response response = await client.DeleteResourceSetRuleAsync();
]]></code></example>
    </member>
    <member name="DeleteResourceSetRule(RequestContext)">
      <example>
This sample shows how to call DeleteResourceSetRule.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewAccountResourceSetRules client = new PurviewAccountsClient(endpoint, credential).GetResourceSetRulesClient();

Response response = client.DeleteResourceSetRule();
]]></code>
This sample shows how to call DeleteResourceSetRule with all request content.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewAccountResourceSetRules client = new PurviewAccountsClient(endpoint, credential).GetResourceSetRulesClient();

Response response = client.DeleteResourceSetRule();
]]></code></example>
    </member>
  </members>
</doc>