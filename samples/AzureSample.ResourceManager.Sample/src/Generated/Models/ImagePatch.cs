// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Resources.Models;

namespace AzureSample.ResourceManager.Sample.Models
{
    /// <summary>
    /// The source user image virtual hard disk. Only tags may be updated.
    /// Serialized Name: ImageUpdate
    /// </summary>
    public partial class ImagePatch : UpdateResource
    {
        /// <summary> Initializes a new instance of <see cref="ImagePatch"/>. </summary>
        public ImagePatch()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ImagePatch"/>. </summary>
        /// <param name="tags">
        /// Resource tags
        /// Serialized Name: UpdateResource.tags
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="sourceVirtualMachine">
        /// The source virtual machine from which Image is created.
        /// Serialized Name: ImageUpdate.properties.sourceVirtualMachine
        /// </param>
        /// <param name="storageProfile">
        /// Specifies the storage settings for the virtual machine disks.
        /// Serialized Name: ImageUpdate.properties.storageProfile
        /// </param>
        /// <param name="provisioningState">
        /// The provisioning state.
        /// Serialized Name: ImageUpdate.properties.provisioningState
        /// </param>
        /// <param name="hyperVGeneration">
        /// Gets the HyperVGenerationType of the VirtualMachine created from the image
        /// Serialized Name: ImageUpdate.properties.hyperVGeneration
        /// </param>
        internal ImagePatch(IDictionary<string, string> tags, IDictionary<string, BinaryData> serializedAdditionalRawData, WritableSubResource sourceVirtualMachine, ImageStorageProfile storageProfile, string provisioningState, HyperVGeneration? hyperVGeneration) : base(tags, serializedAdditionalRawData)
        {
            SourceVirtualMachine = sourceVirtualMachine;
            StorageProfile = storageProfile;
            ProvisioningState = provisioningState;
            HyperVGeneration = hyperVGeneration;
        }

        /// <summary>
        /// The source virtual machine from which Image is created.
        /// Serialized Name: ImageUpdate.properties.sourceVirtualMachine
        /// </summary>
        internal WritableSubResource SourceVirtualMachine { get; set; }
        /// <summary> Gets or sets Id. </summary>
        [WirePath("properties.sourceVirtualMachine.id")]
        public ResourceIdentifier SourceVirtualMachineId
        {
            get => SourceVirtualMachine is null ? default : SourceVirtualMachine.Id;
            set
            {
                if (SourceVirtualMachine is null)
                    SourceVirtualMachine = new WritableSubResource();
                SourceVirtualMachine.Id = value;
            }
        }

        /// <summary>
        /// Specifies the storage settings for the virtual machine disks.
        /// Serialized Name: ImageUpdate.properties.storageProfile
        /// </summary>
        [WirePath("properties.storageProfile")]
        public ImageStorageProfile StorageProfile { get; set; }
        /// <summary>
        /// The provisioning state.
        /// Serialized Name: ImageUpdate.properties.provisioningState
        /// </summary>
        [WirePath("properties.provisioningState")]
        public string ProvisioningState { get; }
        /// <summary>
        /// Gets the HyperVGenerationType of the VirtualMachine created from the image
        /// Serialized Name: ImageUpdate.properties.hyperVGeneration
        /// </summary>
        [WirePath("properties.hyperVGeneration")]
        public HyperVGeneration? HyperVGeneration { get; set; }
    }
}
