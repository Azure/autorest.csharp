// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Storage.Blobs.Models
{
    /// <summary> Properties of a blob. </summary>
    public partial class BlobItemProperties
    {
        /// <summary> Initializes a new instance of BlobItemProperties. </summary>
        /// <param name="accessTierInferred"> . </param>
        internal BlobItemProperties(bool accessTierInferred)
        {
            AccessTierInferred = accessTierInferred;
        }

        /// <summary> Initializes a new instance of BlobItemProperties. </summary>
        /// <param name="lastModified"> . </param>
        /// <param name="contentLength"> Size in bytes. </param>
        /// <param name="contentType"> . </param>
        /// <param name="contentEncoding"> . </param>
        /// <param name="contentLanguage"> . </param>
        /// <param name="contentHash"> . </param>
        /// <param name="contentDisposition"> . </param>
        /// <param name="cacheControl"> . </param>
        /// <param name="blobSequenceNumber"> . </param>
        /// <param name="blobType"> . </param>
        /// <param name="leaseStatus"> . </param>
        /// <param name="leaseState"> . </param>
        /// <param name="leaseDuration"> . </param>
        /// <param name="copyId"> . </param>
        /// <param name="copyStatus"> . </param>
        /// <param name="copySource"> . </param>
        /// <param name="copyProgress"> . </param>
        /// <param name="copyStatusDescription"> . </param>
        /// <param name="serverEncrypted"> . </param>
        /// <param name="incrementalCopy"> . </param>
        /// <param name="destinationSnapshot"> . </param>
        /// <param name="remainingRetentionDays"> . </param>
        /// <param name="accessTier"> . </param>
        /// <param name="accessTierInferred"> . </param>
        /// <param name="archiveStatus"> . </param>
        /// <param name="customerProvidedKeySha256"> . </param>
        /// <param name="encryptionScope"> The name of the encryption scope under which the blob is encrypted. </param>
        /// <param name="tagCount"> . </param>
        /// <param name="expiresOn"> . </param>
        /// <param name="isSealed"> . </param>
        /// <param name="rehydratePriority"> If an object is in rehydrate pending state then this header is returned with priority of rehydrate. Valid values are High and Standard. </param>
        /// <param name="lastAccessedOn"> . </param>
        /// <param name="eTag"> . </param>
        /// <param name="createdOn"> . </param>
        /// <param name="copyCompletedOn"> . </param>
        /// <param name="deletedOn"> . </param>
        /// <param name="accessTierChangedOn"> . </param>
        internal BlobItemProperties(DateTimeOffset? lastModified, long? contentLength, string contentType, string contentEncoding, string contentLanguage, byte[] contentHash, string contentDisposition, string cacheControl, long? blobSequenceNumber, BlobType? blobType, LeaseStatus? leaseStatus, LeaseState? leaseState, LeaseDurationType? leaseDuration, string copyId, CopyStatus? copyStatus, Uri copySource, string copyProgress, string copyStatusDescription, bool? serverEncrypted, bool? incrementalCopy, string destinationSnapshot, int? remainingRetentionDays, AccessTier? accessTier, bool accessTierInferred, ArchiveStatus? archiveStatus, string customerProvidedKeySha256, string encryptionScope, long? tagCount, DateTimeOffset? expiresOn, bool? isSealed, RehydratePriority? rehydratePriority, DateTimeOffset? lastAccessedOn, string eTag, DateTimeOffset? createdOn, DateTimeOffset? copyCompletedOn, DateTimeOffset? deletedOn, DateTimeOffset? accessTierChangedOn)
        {
            LastModified = lastModified;
            ContentLength = contentLength;
            ContentType = contentType;
            ContentEncoding = contentEncoding;
            ContentLanguage = contentLanguage;
            ContentHash = contentHash;
            ContentDisposition = contentDisposition;
            CacheControl = cacheControl;
            BlobSequenceNumber = blobSequenceNumber;
            BlobType = blobType;
            LeaseStatus = leaseStatus;
            LeaseState = leaseState;
            LeaseDuration = leaseDuration;
            CopyId = copyId;
            CopyStatus = copyStatus;
            CopySource = copySource;
            CopyProgress = copyProgress;
            CopyStatusDescription = copyStatusDescription;
            ServerEncrypted = serverEncrypted;
            IncrementalCopy = incrementalCopy;
            DestinationSnapshot = destinationSnapshot;
            RemainingRetentionDays = remainingRetentionDays;
            AccessTier = accessTier;
            AccessTierInferred = accessTierInferred;
            ArchiveStatus = archiveStatus;
            CustomerProvidedKeySha256 = customerProvidedKeySha256;
            EncryptionScope = encryptionScope;
            TagCount = tagCount;
            ExpiresOn = expiresOn;
            IsSealed = isSealed;
            RehydratePriority = rehydratePriority;
            LastAccessedOn = lastAccessedOn;
            ETag = eTag;
            CreatedOn = createdOn;
            CopyCompletedOn = copyCompletedOn;
            DeletedOn = deletedOn;
            AccessTierChangedOn = accessTierChangedOn;
        }

        public DateTimeOffset? LastModified { get; }
        /// <summary> Size in bytes. </summary>
        public long? ContentLength { get; }
        public string ContentType { get; }
        public string ContentEncoding { get; }
        public string ContentLanguage { get; }
        public byte[] ContentHash { get; }
        public string ContentDisposition { get; }
        public string CacheControl { get; }
        public long? BlobSequenceNumber { get; }
        public BlobType? BlobType { get; }
        public LeaseStatus? LeaseStatus { get; }
        public LeaseState? LeaseState { get; }
        public LeaseDurationType? LeaseDuration { get; }
        public string CopyId { get; }
        public CopyStatus? CopyStatus { get; }
        public Uri CopySource { get; }
        public string CopyProgress { get; }
        public string CopyStatusDescription { get; }
        public bool? ServerEncrypted { get; }
        public bool? IncrementalCopy { get; }
        public string DestinationSnapshot { get; }
        public int? RemainingRetentionDays { get; }
        public AccessTier? AccessTier { get; }
        public bool AccessTierInferred { get; }
        public ArchiveStatus? ArchiveStatus { get; }
        public string CustomerProvidedKeySha256 { get; }
        /// <summary> The name of the encryption scope under which the blob is encrypted. </summary>
        public string EncryptionScope { get; }
        public long? TagCount { get; }
        public DateTimeOffset? ExpiresOn { get; }
        public bool? IsSealed { get; }
        /// <summary> If an object is in rehydrate pending state then this header is returned with priority of rehydrate. Valid values are High and Standard. </summary>
        public RehydratePriority? RehydratePriority { get; }
        public DateTimeOffset? LastAccessedOn { get; }
        public string ETag { get; }
        public DateTimeOffset? CreatedOn { get; }
        public DateTimeOffset? CopyCompletedOn { get; }
        public DateTimeOffset? DeletedOn { get; }
        public DateTimeOffset? AccessTierChangedOn { get; }
    }
}
