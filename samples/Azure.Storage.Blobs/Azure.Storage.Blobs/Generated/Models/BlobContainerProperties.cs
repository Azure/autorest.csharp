// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Storage.Blobs.Models
{
    /// <summary> Properties of a container. </summary>
    public partial class BlobContainerProperties
    {
        /// <summary> Initializes a new instance of BlobContainerProperties. </summary>
        /// <param name="lastModified"> . </param>
        /// <param name="eTag"> . </param>
        /// <exception cref="ArgumentNullException"> <paramref name="eTag"/> is null. </exception>
        internal BlobContainerProperties(DateTimeOffset lastModified, string eTag)
        {
            if (eTag == null)
            {
                throw new ArgumentNullException(nameof(eTag));
            }

            LastModified = lastModified;
            ETag = eTag;
            Metadata = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of BlobContainerProperties. </summary>
        /// <param name="lastModified"> . </param>
        /// <param name="leaseStatus"> . </param>
        /// <param name="leaseState"> . </param>
        /// <param name="leaseDuration"> . </param>
        /// <param name="publicAccess"> . </param>
        /// <param name="hasImmutabilityPolicy"> . </param>
        /// <param name="hasLegalHold"> . </param>
        /// <param name="defaultEncryptionScope"> . </param>
        /// <param name="preventEncryptionScopeOverride"> . </param>
        /// <param name="deletedOn"> . </param>
        /// <param name="remainingRetentionDays"> . </param>
        /// <param name="eTag"> . </param>
        /// <param name="metadata"> Dictionary of &lt;string&gt;. </param>
        internal BlobContainerProperties(DateTimeOffset lastModified, LeaseStatus? leaseStatus, LeaseState? leaseState, LeaseDurationType? leaseDuration, PublicAccessType? publicAccess, bool? hasImmutabilityPolicy, bool? hasLegalHold, string defaultEncryptionScope, bool? preventEncryptionScopeOverride, DateTimeOffset? deletedOn, int? remainingRetentionDays, string eTag, IReadOnlyDictionary<string, string> metadata)
        {
            LastModified = lastModified;
            LeaseStatus = leaseStatus;
            LeaseState = leaseState;
            LeaseDuration = leaseDuration;
            PublicAccess = publicAccess;
            HasImmutabilityPolicy = hasImmutabilityPolicy;
            HasLegalHold = hasLegalHold;
            DefaultEncryptionScope = defaultEncryptionScope;
            PreventEncryptionScopeOverride = preventEncryptionScopeOverride;
            DeletedOn = deletedOn;
            RemainingRetentionDays = remainingRetentionDays;
            ETag = eTag;
            Metadata = metadata;
        }

        public DateTimeOffset LastModified { get; }
        public LeaseStatus? LeaseStatus { get; }
        public LeaseState? LeaseState { get; }
        public LeaseDurationType? LeaseDuration { get; }
        public PublicAccessType? PublicAccess { get; }
        public bool? HasImmutabilityPolicy { get; }
        public bool? HasLegalHold { get; }
        public string DefaultEncryptionScope { get; }
        public bool? PreventEncryptionScopeOverride { get; }
        public DateTimeOffset? DeletedOn { get; }
        public int? RemainingRetentionDays { get; }
        public string ETag { get; }
        /// <summary> Dictionary of &lt;string&gt;. </summary>
        public IReadOnlyDictionary<string, string> Metadata { get; }
    }
}
