// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace CognitiveSearch.Models
{
    public partial class SearchRequest : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(IncludeTotalResultCount))
            {
                writer.WritePropertyName("count");
                writer.WriteBooleanValue(IncludeTotalResultCount.Value);
            }
            if (Optional.IsCollectionDefined(Facets))
            {
                writer.WritePropertyName("facets");
                writer.WriteStartArray();
                foreach (var item in Facets)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Filter))
            {
                writer.WritePropertyName("filter");
                writer.WriteStringValue(Filter);
            }
            if (Optional.IsDefined(HighlightFields))
            {
                writer.WritePropertyName("highlight");
                writer.WriteStringValue(HighlightFields);
            }
            if (Optional.IsDefined(HighlightPostTag))
            {
                writer.WritePropertyName("highlightPostTag");
                writer.WriteStringValue(HighlightPostTag);
            }
            if (Optional.IsDefined(HighlightPreTag))
            {
                writer.WritePropertyName("highlightPreTag");
                writer.WriteStringValue(HighlightPreTag);
            }
            if (Optional.IsDefined(MinimumCoverage))
            {
                writer.WritePropertyName("minimumCoverage");
                writer.WriteNumberValue(MinimumCoverage.Value);
            }
            if (Optional.IsDefined(OrderBy))
            {
                writer.WritePropertyName("orderby");
                writer.WriteStringValue(OrderBy);
            }
            if (Optional.IsDefined(QueryType))
            {
                writer.WritePropertyName("queryType");
                writer.WriteStringValue(QueryType.Value.ToSerialString());
            }
            if (Optional.IsCollectionDefined(ScoringParameters))
            {
                writer.WritePropertyName("scoringParameters");
                writer.WriteStartArray();
                foreach (var item in ScoringParameters)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ScoringProfile))
            {
                writer.WritePropertyName("scoringProfile");
                writer.WriteStringValue(ScoringProfile);
            }
            if (Optional.IsDefined(SearchText))
            {
                writer.WritePropertyName("search");
                writer.WriteStringValue(SearchText);
            }
            if (Optional.IsDefined(SearchFields))
            {
                writer.WritePropertyName("searchFields");
                writer.WriteStringValue(SearchFields);
            }
            if (Optional.IsDefined(SearchMode))
            {
                writer.WritePropertyName("searchMode");
                writer.WriteStringValue(SearchMode.Value.ToSerialString());
            }
            if (Optional.IsDefined(Select))
            {
                writer.WritePropertyName("select");
                writer.WriteStringValue(Select);
            }
            if (Optional.IsDefined(Skip))
            {
                writer.WritePropertyName("skip");
                writer.WriteNumberValue(Skip.Value);
            }
            if (Optional.IsDefined(Top))
            {
                writer.WritePropertyName("top");
                writer.WriteNumberValue(Top.Value);
            }
            writer.WriteEndObject();
        }

        internal static SearchRequest DeserializeSearchRequest(JsonElement element)
        {
            Optional<bool> count = default;
            Optional<IList<string>> facets = default;
            Optional<string> filter = default;
            Optional<string> highlight = default;
            Optional<string> highlightPostTag = default;
            Optional<string> highlightPreTag = default;
            Optional<double> minimumCoverage = default;
            Optional<string> orderby = default;
            Optional<QueryType> queryType = default;
            Optional<IList<string>> scoringParameters = default;
            Optional<string> scoringProfile = default;
            Optional<string> search = default;
            Optional<string> searchFields = default;
            Optional<SearchMode> searchMode = default;
            Optional<string> select = default;
            Optional<int> skip = default;
            Optional<int> top = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("count"))
                {
                    count = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("facets"))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    facets = array;
                    continue;
                }
                if (property.NameEquals("filter"))
                {
                    filter = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("highlight"))
                {
                    highlight = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("highlightPostTag"))
                {
                    highlightPostTag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("highlightPreTag"))
                {
                    highlightPreTag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("minimumCoverage"))
                {
                    minimumCoverage = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("orderby"))
                {
                    orderby = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("queryType"))
                {
                    queryType = property.Value.GetString().ToQueryType();
                    continue;
                }
                if (property.NameEquals("scoringParameters"))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    scoringParameters = array;
                    continue;
                }
                if (property.NameEquals("scoringProfile"))
                {
                    scoringProfile = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("search"))
                {
                    search = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("searchFields"))
                {
                    searchFields = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("searchMode"))
                {
                    searchMode = property.Value.GetString().ToSearchMode();
                    continue;
                }
                if (property.NameEquals("select"))
                {
                    select = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("skip"))
                {
                    skip = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("top"))
                {
                    top = property.Value.GetInt32();
                    continue;
                }
            }
            return new SearchRequest(Optional.ToNullable(count), Optional.ToList(facets), filter.Value, highlight.Value, highlightPostTag.Value, highlightPreTag.Value, Optional.ToNullable(minimumCoverage), orderby.Value, Optional.ToNullable(queryType), Optional.ToList(scoringParameters), scoringProfile.Value, search.Value, searchFields.Value, Optional.ToNullable(searchMode), select.Value, Optional.ToNullable(skip), Optional.ToNullable(top));
        }
    }
}
