// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;

namespace CognitiveSearch.Models
{
    /// <summary> Allows you to take control over the process of converting text into indexable/searchable tokens. It&apos;s a user-defined configuration consisting of a single predefined tokenizer and one or more filters. The tokenizer is responsible for breaking text into tokens, and the filters for modifying tokens emitted by the tokenizer. </summary>
    public partial class CustomAnalyzer : Analyzer
    {
        /// <summary> Initializes a new instance of CustomAnalyzer. </summary>
        public CustomAnalyzer()
        {
            OdataType = "#Microsoft.Azure.Search.CustomAnalyzer";
        }
        /// <summary> The name of the tokenizer to use to divide continuous text into a sequence of tokens, such as breaking a sentence into words. </summary>
        public TokenizerName Tokenizer { get; set; }
        /// <summary> A list of token filters used to filter out or modify the tokens generated by a tokenizer. For example, you can specify a lowercase filter that converts all characters to lowercase. The filters are run in the order in which they are listed. </summary>
        public ICollection<TokenFilterName> TokenFilters { get; set; }
        /// <summary> A list of character filters used to prepare input text before it is processed by the tokenizer. For instance, they can replace certain characters or symbols. The filters are run in the order in which they are listed. </summary>
        public ICollection<string> CharFilters { get; set; }
    }
}
