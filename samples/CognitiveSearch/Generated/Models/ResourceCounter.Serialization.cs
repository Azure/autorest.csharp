// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;

namespace CognitiveSearch.Models
{
    public partial class ResourceCounter : IUtf8JsonSerializable, IModelJsonSerializable<ResourceCounter>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<ResourceCounter>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<ResourceCounter>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("usage"u8);
            writer.WriteNumberValue(Usage);
            if (Optional.IsDefined(Quota))
            {
                if (Quota != null)
                {
                    writer.WritePropertyName("quota"u8);
                    writer.WriteNumberValue(Quota.Value);
                }
                else
                {
                    writer.WriteNull("quota");
                }
            }
            writer.WriteEndObject();
        }

        ResourceCounter IModelJsonSerializable<ResourceCounter>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using JsonDocument doc = JsonDocument.ParseValue(ref reader);
            return DeserializeResourceCounter(doc.RootElement, options);
        }

        BinaryData IModelSerializable<ResourceCounter>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);
            return ModelSerializer.SerializeCore(this, options);
        }

        ResourceCounter IModelSerializable<ResourceCounter>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeResourceCounter(document.RootElement, options);
        }

        internal static ResourceCounter DeserializeResourceCounter(JsonElement element, ModelSerializerOptions options = null)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            long usage = default;
            Optional<long?> quota = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("usage"u8))
                {
                    usage = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("quota"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        quota = null;
                        continue;
                    }
                    quota = property.Value.GetInt64();
                    continue;
                }
            }
            return new ResourceCounter(usage, Optional.ToNullable(quota));
        }
    }
}
