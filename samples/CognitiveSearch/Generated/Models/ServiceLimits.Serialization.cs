// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;

namespace CognitiveSearch.Models
{
    public partial class ServiceLimits : IUtf8JsonSerializable, IModelJsonSerializable<ServiceLimits>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<ServiceLimits>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<ServiceLimits>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(MaxFieldsPerIndex))
            {
                if (MaxFieldsPerIndex != null)
                {
                    writer.WritePropertyName("maxFieldsPerIndex"u8);
                    writer.WriteNumberValue(MaxFieldsPerIndex.Value);
                }
                else
                {
                    writer.WriteNull("maxFieldsPerIndex");
                }
            }
            if (Optional.IsDefined(MaxFieldNestingDepthPerIndex))
            {
                if (MaxFieldNestingDepthPerIndex != null)
                {
                    writer.WritePropertyName("maxFieldNestingDepthPerIndex"u8);
                    writer.WriteNumberValue(MaxFieldNestingDepthPerIndex.Value);
                }
                else
                {
                    writer.WriteNull("maxFieldNestingDepthPerIndex");
                }
            }
            if (Optional.IsDefined(MaxComplexCollectionFieldsPerIndex))
            {
                if (MaxComplexCollectionFieldsPerIndex != null)
                {
                    writer.WritePropertyName("maxComplexCollectionFieldsPerIndex"u8);
                    writer.WriteNumberValue(MaxComplexCollectionFieldsPerIndex.Value);
                }
                else
                {
                    writer.WriteNull("maxComplexCollectionFieldsPerIndex");
                }
            }
            if (Optional.IsDefined(MaxComplexObjectsInCollectionsPerDocument))
            {
                if (MaxComplexObjectsInCollectionsPerDocument != null)
                {
                    writer.WritePropertyName("maxComplexObjectsInCollectionsPerDocument"u8);
                    writer.WriteNumberValue(MaxComplexObjectsInCollectionsPerDocument.Value);
                }
                else
                {
                    writer.WriteNull("maxComplexObjectsInCollectionsPerDocument");
                }
            }
            writer.WriteEndObject();
        }

        ServiceLimits IModelJsonSerializable<ServiceLimits>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeServiceLimits(document.RootElement, options);
        }

        BinaryData IModelSerializable<ServiceLimits>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);
            return ModelSerializer.SerializeCore(this, options);
        }

        ServiceLimits IModelSerializable<ServiceLimits>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeServiceLimits(document.RootElement, options);
        }

        internal static ServiceLimits DeserializeServiceLimits(JsonElement element, ModelSerializerOptions options = null)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int?> maxFieldsPerIndex = default;
            Optional<int?> maxFieldNestingDepthPerIndex = default;
            Optional<int?> maxComplexCollectionFieldsPerIndex = default;
            Optional<int?> maxComplexObjectsInCollectionsPerDocument = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("maxFieldsPerIndex"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxFieldsPerIndex = null;
                        continue;
                    }
                    maxFieldsPerIndex = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxFieldNestingDepthPerIndex"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxFieldNestingDepthPerIndex = null;
                        continue;
                    }
                    maxFieldNestingDepthPerIndex = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxComplexCollectionFieldsPerIndex"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxComplexCollectionFieldsPerIndex = null;
                        continue;
                    }
                    maxComplexCollectionFieldsPerIndex = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxComplexObjectsInCollectionsPerDocument"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxComplexObjectsInCollectionsPerDocument = null;
                        continue;
                    }
                    maxComplexObjectsInCollectionsPerDocument = property.Value.GetInt32();
                    continue;
                }
            }
            return new ServiceLimits(Optional.ToNullable(maxFieldsPerIndex), Optional.ToNullable(maxFieldNestingDepthPerIndex), Optional.ToNullable(maxComplexCollectionFieldsPerIndex), Optional.ToNullable(maxComplexObjectsInCollectionsPerDocument));
        }
    }
}
