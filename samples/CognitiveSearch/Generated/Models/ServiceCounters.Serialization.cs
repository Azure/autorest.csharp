// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace CognitiveSearch.Models
{
    public partial class ServiceCounters : IUtf8JsonSerializable, IModelJsonSerializable<ServiceCounters>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<ServiceCounters>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<ServiceCounters>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("documentCount"u8);
            writer.WriteObjectValue(DocumentCounter);
            writer.WritePropertyName("indexesCount"u8);
            writer.WriteObjectValue(IndexCounter);
            writer.WritePropertyName("indexersCount"u8);
            writer.WriteObjectValue(IndexerCounter);
            writer.WritePropertyName("dataSourcesCount"u8);
            writer.WriteObjectValue(DataSourceCounter);
            writer.WritePropertyName("storageSize"u8);
            writer.WriteObjectValue(StorageSizeCounter);
            writer.WritePropertyName("synonymMaps"u8);
            writer.WriteObjectValue(SynonymMapCounter);
            writer.WritePropertyName("skillsetCount"u8);
            writer.WriteObjectValue(SkillsetCounter);
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static ServiceCounters DeserializeServiceCounters(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceCounter documentCount = default;
            ResourceCounter indexesCount = default;
            ResourceCounter indexersCount = default;
            ResourceCounter dataSourcesCount = default;
            ResourceCounter storageSize = default;
            ResourceCounter synonymMaps = default;
            ResourceCounter skillsetCount = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("documentCount"u8))
                {
                    documentCount = ResourceCounter.DeserializeResourceCounter(property.Value);
                    continue;
                }
                if (property.NameEquals("indexesCount"u8))
                {
                    indexesCount = ResourceCounter.DeserializeResourceCounter(property.Value);
                    continue;
                }
                if (property.NameEquals("indexersCount"u8))
                {
                    indexersCount = ResourceCounter.DeserializeResourceCounter(property.Value);
                    continue;
                }
                if (property.NameEquals("dataSourcesCount"u8))
                {
                    dataSourcesCount = ResourceCounter.DeserializeResourceCounter(property.Value);
                    continue;
                }
                if (property.NameEquals("storageSize"u8))
                {
                    storageSize = ResourceCounter.DeserializeResourceCounter(property.Value);
                    continue;
                }
                if (property.NameEquals("synonymMaps"u8))
                {
                    synonymMaps = ResourceCounter.DeserializeResourceCounter(property.Value);
                    continue;
                }
                if (property.NameEquals("skillsetCount"u8))
                {
                    skillsetCount = ResourceCounter.DeserializeResourceCounter(property.Value);
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new ServiceCounters(documentCount, indexesCount, indexersCount, dataSourcesCount, storageSize, synonymMaps, skillsetCount, rawData);
        }

        ServiceCounters IModelJsonSerializable<ServiceCounters>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeServiceCounters(doc.RootElement, options);
        }

        BinaryData IModelSerializable<ServiceCounters>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        ServiceCounters IModelSerializable<ServiceCounters>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeServiceCounters(doc.RootElement, options);
        }

        public static implicit operator RequestContent(ServiceCounters model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        public static explicit operator ServiceCounters(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeServiceCounters(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
