// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Storage.Models
{
    /// <summary> Management policy action for snapshot. </summary>
    public partial class ManagementPolicySnapShot
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ManagementPolicySnapShot"/>. </summary>
        public ManagementPolicySnapShot()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ManagementPolicySnapShot"/>. </summary>
        /// <param name="tierToCool"> The function to tier blob snapshot to cool storage. Support blob snapshot currently at Hot tier. </param>
        /// <param name="tierToArchive"> The function to tier blob snapshot to archive storage. Support blob snapshot currently at Hot or Cool tier. </param>
        /// <param name="delete"> The function to delete the blob snapshot. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ManagementPolicySnapShot(DateAfterCreation tierToCool, DateAfterCreation tierToArchive, DateAfterCreation delete, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            TierToCool = tierToCool;
            TierToArchive = tierToArchive;
            Delete = delete;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The function to tier blob snapshot to cool storage. Support blob snapshot currently at Hot tier. </summary>
        internal DateAfterCreation TierToCool { get; set; }
        /// <summary> Value indicating the age in days after creation. </summary>
        public float? TierToCoolDaysAfterCreationGreaterThan
        {
            get => TierToCool is null ? default(float?) : TierToCool.DaysAfterCreationGreaterThan;
            set
            {
                TierToCool = value.HasValue ? new DateAfterCreation(value.Value) : null;
            }
        }

        /// <summary> The function to tier blob snapshot to archive storage. Support blob snapshot currently at Hot or Cool tier. </summary>
        internal DateAfterCreation TierToArchive { get; set; }
        /// <summary> Value indicating the age in days after creation. </summary>
        public float? TierToArchiveDaysAfterCreationGreaterThan
        {
            get => TierToArchive is null ? default(float?) : TierToArchive.DaysAfterCreationGreaterThan;
            set
            {
                TierToArchive = value.HasValue ? new DateAfterCreation(value.Value) : null;
            }
        }

        /// <summary> The function to delete the blob snapshot. </summary>
        internal DateAfterCreation Delete { get; set; }
        /// <summary> Value indicating the age in days after creation. </summary>
        public float? DeleteDaysAfterCreationGreaterThan
        {
            get => Delete is null ? default(float?) : Delete.DaysAfterCreationGreaterThan;
            set
            {
                Delete = value.HasValue ? new DateAfterCreation(value.Value) : null;
            }
        }
    }
}
