// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace AnomalyDetector.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class AnomalyDetectorModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.MultivariateDetectionResult"/>. </summary>
        /// <param name="resultId"></param>
        /// <param name="summary"></param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.MultivariateDetectionResult"/> instance for mocking. </returns>
        public static MultivariateDetectionResult MultivariateDetectionResult(Guid resultId = default, MultivariateBatchDetectionResultSummary summary = null, IEnumerable<AnomalyState> results = null)
        {
            results ??= new List<AnomalyState>();

            return new MultivariateDetectionResult(resultId, summary, results?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MultivariateBatchDetectionResultSummary"/>. </summary>
        /// <param name="status"></param>
        /// <param name="errors"></param>
        /// <param name="variableStates"></param>
        /// <param name="setupInfo"></param>
        /// <returns> A new <see cref="Models.MultivariateBatchDetectionResultSummary"/> instance for mocking. </returns>
        public static MultivariateBatchDetectionResultSummary MultivariateBatchDetectionResultSummary(MultivariateBatchDetectionStatus status = default, IEnumerable<ErrorResponse> errors = null, IEnumerable<VariableState> variableStates = null, MultivariateBatchDetectionOptions setupInfo = null)
        {
            errors ??= new List<ErrorResponse>();
            variableStates ??= new List<VariableState>();

            return new MultivariateBatchDetectionResultSummary(status, errors?.ToList(), variableStates?.ToList(), setupInfo, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ErrorResponse"/>. </summary>
        /// <param name="code"></param>
        /// <param name="message"></param>
        /// <returns> A new <see cref="Models.ErrorResponse"/> instance for mocking. </returns>
        public static ErrorResponse ErrorResponse(string code = null, string message = null)
        {
            return new ErrorResponse(code, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AnomalyState"/>. </summary>
        /// <param name="timestamp"></param>
        /// <param name="value"></param>
        /// <param name="errors"></param>
        /// <returns> A new <see cref="Models.AnomalyState"/> instance for mocking. </returns>
        public static AnomalyState AnomalyState(DateTimeOffset timestamp = default, AnomalyValue value = null, IEnumerable<ErrorResponse> errors = null)
        {
            errors ??= new List<ErrorResponse>();

            return new AnomalyState(timestamp, value, errors?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AnomalyValue"/>. </summary>
        /// <param name="isAnomaly"></param>
        /// <param name="severity"></param>
        /// <param name="score"></param>
        /// <param name="interpretation"></param>
        /// <returns> A new <see cref="Models.AnomalyValue"/> instance for mocking. </returns>
        public static AnomalyValue AnomalyValue(bool isAnomaly = default, float severity = default, float score = default, IEnumerable<AnomalyInterpretation> interpretation = null)
        {
            interpretation ??= new List<AnomalyInterpretation>();

            return new AnomalyValue(isAnomaly, severity, score, interpretation?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AnomalyInterpretation"/>. </summary>
        /// <param name="variable"></param>
        /// <param name="contributionScore"></param>
        /// <param name="correlationChanges"></param>
        /// <returns> A new <see cref="Models.AnomalyInterpretation"/> instance for mocking. </returns>
        public static AnomalyInterpretation AnomalyInterpretation(string variable = null, float? contributionScore = null, CorrelationChanges correlationChanges = null)
        {
            return new AnomalyInterpretation(variable, contributionScore, correlationChanges, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CorrelationChanges"/>. </summary>
        /// <param name="changedVariables"></param>
        /// <returns> A new <see cref="Models.CorrelationChanges"/> instance for mocking. </returns>
        public static CorrelationChanges CorrelationChanges(IEnumerable<string> changedVariables = null)
        {
            changedVariables ??= new List<string>();

            return new CorrelationChanges(changedVariables?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ModelInfo"/>. </summary>
        /// <param name="dataSource"></param>
        /// <param name="dataSchema"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="displayName"></param>
        /// <param name="slidingWindow"></param>
        /// <param name="alignPolicy"></param>
        /// <param name="status"></param>
        /// <param name="errors"></param>
        /// <param name="diagnosticsInfo"></param>
        /// <returns> A new <see cref="Models.ModelInfo"/> instance for mocking. </returns>
        public static ModelInfo ModelInfo(string dataSource = null, DataSchema? dataSchema = null, DateTimeOffset startTime = default, DateTimeOffset endTime = default, string displayName = null, int? slidingWindow = null, AlignPolicy alignPolicy = null, ModelStatus? status = null, IEnumerable<ErrorResponse> errors = null, DiagnosticsInfo diagnosticsInfo = null)
        {
            errors ??= new List<ErrorResponse>();

            return new ModelInfo(
                dataSource,
                dataSchema,
                startTime,
                endTime,
                displayName,
                slidingWindow,
                alignPolicy,
                status,
                errors?.ToList(),
                diagnosticsInfo,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AnomalyDetectionModel"/>. </summary>
        /// <param name="modelId"></param>
        /// <param name="createdTime"></param>
        /// <param name="lastUpdatedTime"></param>
        /// <param name="modelInfo"></param>
        /// <returns> A new <see cref="Models.AnomalyDetectionModel"/> instance for mocking. </returns>
        public static AnomalyDetectionModel AnomalyDetectionModel(Guid modelId = default, DateTimeOffset createdTime = default, DateTimeOffset lastUpdatedTime = default, ModelInfo modelInfo = null)
        {
            return new AnomalyDetectionModel(modelId, createdTime, lastUpdatedTime, modelInfo, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MultivariateLastDetectionResult"/>. </summary>
        /// <param name="variableStates"></param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.MultivariateLastDetectionResult"/> instance for mocking. </returns>
        public static MultivariateLastDetectionResult MultivariateLastDetectionResult(IEnumerable<VariableState> variableStates = null, IEnumerable<AnomalyState> results = null)
        {
            variableStates ??= new List<VariableState>();
            results ??= new List<AnomalyState>();

            return new MultivariateLastDetectionResult(variableStates?.ToList(), results?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TimeSeriesPoint"/>. </summary>
        /// <param name="timestamp"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.TimeSeriesPoint"/> instance for mocking. </returns>
        public static TimeSeriesPoint TimeSeriesPoint(DateTimeOffset? timestamp = null, float value = default)
        {
            return new TimeSeriesPoint(timestamp, value, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.UnivariateEntireDetectionResult"/>. </summary>
        /// <param name="period"></param>
        /// <param name="expectedValues"></param>
        /// <param name="upperMargins"></param>
        /// <param name="lowerMargins"></param>
        /// <param name="isAnomaly"></param>
        /// <param name="isNegativeAnomaly"></param>
        /// <param name="isPositiveAnomaly"></param>
        /// <param name="severity"></param>
        /// <returns> A new <see cref="Models.UnivariateEntireDetectionResult"/> instance for mocking. </returns>
        public static UnivariateEntireDetectionResult UnivariateEntireDetectionResult(int period = default, IEnumerable<float> expectedValues = null, IEnumerable<float> upperMargins = null, IEnumerable<float> lowerMargins = null, IEnumerable<bool> isAnomaly = null, IEnumerable<bool> isNegativeAnomaly = null, IEnumerable<bool> isPositiveAnomaly = null, IEnumerable<float> severity = null)
        {
            expectedValues ??= new List<float>();
            upperMargins ??= new List<float>();
            lowerMargins ??= new List<float>();
            isAnomaly ??= new List<bool>();
            isNegativeAnomaly ??= new List<bool>();
            isPositiveAnomaly ??= new List<bool>();
            severity ??= new List<float>();

            return new UnivariateEntireDetectionResult(
                period,
                expectedValues?.ToList(),
                upperMargins?.ToList(),
                lowerMargins?.ToList(),
                isAnomaly?.ToList(),
                isNegativeAnomaly?.ToList(),
                isPositiveAnomaly?.ToList(),
                severity?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.UnivariateLastDetectionResult"/>. </summary>
        /// <param name="period"></param>
        /// <param name="suggestedWindow"></param>
        /// <param name="expectedValue"></param>
        /// <param name="upperMargin"></param>
        /// <param name="lowerMargin"></param>
        /// <param name="isAnomaly"></param>
        /// <param name="isNegativeAnomaly"></param>
        /// <param name="isPositiveAnomaly"></param>
        /// <param name="severity"></param>
        /// <returns> A new <see cref="Models.UnivariateLastDetectionResult"/> instance for mocking. </returns>
        public static UnivariateLastDetectionResult UnivariateLastDetectionResult(int period = default, int suggestedWindow = default, float expectedValue = default, float upperMargin = default, float lowerMargin = default, bool isAnomaly = default, bool isNegativeAnomaly = default, bool isPositiveAnomaly = default, float? severity = null)
        {
            return new UnivariateLastDetectionResult(
                period,
                suggestedWindow,
                expectedValue,
                upperMargin,
                lowerMargin,
                isAnomaly,
                isNegativeAnomaly,
                isPositiveAnomaly,
                severity,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.UnivariateChangePointDetectionOptions"/>. </summary>
        /// <param name="series"></param>
        /// <param name="granularity"></param>
        /// <param name="customInterval"></param>
        /// <param name="period"></param>
        /// <param name="stableTrendWindow"></param>
        /// <param name="threshold"></param>
        /// <returns> A new <see cref="Models.UnivariateChangePointDetectionOptions"/> instance for mocking. </returns>
        public static UnivariateChangePointDetectionOptions UnivariateChangePointDetectionOptions(IEnumerable<TimeSeriesPoint> series = null, TimeGranularity granularity = default, int? customInterval = null, int? period = null, int? stableTrendWindow = null, float? threshold = null)
        {
            series ??= new List<TimeSeriesPoint>();

            return new UnivariateChangePointDetectionOptions(
                series?.ToList(),
                granularity,
                customInterval,
                period,
                stableTrendWindow,
                threshold,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.UnivariateChangePointDetectionResult"/>. </summary>
        /// <param name="period"></param>
        /// <param name="isChangePoint"></param>
        /// <param name="confidenceScores"></param>
        /// <returns> A new <see cref="Models.UnivariateChangePointDetectionResult"/> instance for mocking. </returns>
        public static UnivariateChangePointDetectionResult UnivariateChangePointDetectionResult(int? period = null, IEnumerable<bool> isChangePoint = null, IEnumerable<float> confidenceScores = null)
        {
            isChangePoint ??= new List<bool>();
            confidenceScores ??= new List<float>();

            return new UnivariateChangePointDetectionResult(period, isChangePoint?.ToList(), confidenceScores?.ToList(), serializedAdditionalRawData: null);
        }
    }
}
