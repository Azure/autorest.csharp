<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="DetectUnivariateEntireSeriesAsync(string,UnivariateDetectionOptions,CancellationToken)">
      <example>
This sample shows how to call DetectUnivariateEntireSeriesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

UnivariateDetectionOptions options = new UnivariateDetectionOptions(new TimeSeriesPoint[]
{
    new TimeSeriesPoint(123.45F)
});
Response<UnivariateEntireDetectionResult> response = await client.DetectUnivariateEntireSeriesAsync("v1.1", options);
]]></code>
This sample shows how to call DetectUnivariateEntireSeriesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

UnivariateDetectionOptions options = new UnivariateDetectionOptions(new TimeSeriesPoint[]
{
    new TimeSeriesPoint(123.45F)
    {
        Timestamp = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
    }
})
{
    Granularity = TimeGranularity.Yearly,
    CustomInterval = 1234,
    Period = 1234,
    MaxAnomalyRatio = 123.45F,
    Sensitivity = 1234,
    ImputeMode = ImputeMode.Auto,
    ImputeFixedValue = 123.45F,
};
Response<UnivariateEntireDetectionResult> response = await client.DetectUnivariateEntireSeriesAsync("v1.1", options);
]]></code></example>
    </member>
    <member name="DetectUnivariateEntireSeries(string,UnivariateDetectionOptions,CancellationToken)">
      <example>
This sample shows how to call DetectUnivariateEntireSeries.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

UnivariateDetectionOptions options = new UnivariateDetectionOptions(new TimeSeriesPoint[]
{
    new TimeSeriesPoint(123.45F)
});
Response<UnivariateEntireDetectionResult> response = client.DetectUnivariateEntireSeries("v1.1", options);
]]></code>
This sample shows how to call DetectUnivariateEntireSeries with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

UnivariateDetectionOptions options = new UnivariateDetectionOptions(new TimeSeriesPoint[]
{
    new TimeSeriesPoint(123.45F)
    {
        Timestamp = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
    }
})
{
    Granularity = TimeGranularity.Yearly,
    CustomInterval = 1234,
    Period = 1234,
    MaxAnomalyRatio = 123.45F,
    Sensitivity = 1234,
    ImputeMode = ImputeMode.Auto,
    ImputeFixedValue = 123.45F,
};
Response<UnivariateEntireDetectionResult> response = client.DetectUnivariateEntireSeries("v1.1", options);
]]></code></example>
    </member>
    <member name="DetectUnivariateEntireSeriesAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call DetectUnivariateEntireSeriesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    series = new object[]
    {
        new
        {
            value = 123.45F,
        }
    },
});
Response response = await client.DetectUnivariateEntireSeriesAsync("v1.1", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("period").ToString());
Console.WriteLine(result.GetProperty("expectedValues")[0].ToString());
Console.WriteLine(result.GetProperty("upperMargins")[0].ToString());
Console.WriteLine(result.GetProperty("lowerMargins")[0].ToString());
Console.WriteLine(result.GetProperty("isAnomaly")[0].ToString());
Console.WriteLine(result.GetProperty("isNegativeAnomaly")[0].ToString());
Console.WriteLine(result.GetProperty("isPositiveAnomaly")[0].ToString());
]]></code>
This sample shows how to call DetectUnivariateEntireSeriesAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    series = new object[]
    {
        new
        {
            timestamp = "2022-05-10T14:57:31.2311892-04:00",
            value = 123.45F,
        }
    },
    granularity = "yearly",
    customInterval = 1234,
    period = 1234,
    maxAnomalyRatio = 123.45F,
    sensitivity = 1234,
    imputeMode = "auto",
    imputeFixedValue = 123.45F,
});
Response response = await client.DetectUnivariateEntireSeriesAsync("v1.1", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("period").ToString());
Console.WriteLine(result.GetProperty("expectedValues")[0].ToString());
Console.WriteLine(result.GetProperty("upperMargins")[0].ToString());
Console.WriteLine(result.GetProperty("lowerMargins")[0].ToString());
Console.WriteLine(result.GetProperty("isAnomaly")[0].ToString());
Console.WriteLine(result.GetProperty("isNegativeAnomaly")[0].ToString());
Console.WriteLine(result.GetProperty("isPositiveAnomaly")[0].ToString());
Console.WriteLine(result.GetProperty("severity")[0].ToString());
]]></code></example>
    </member>
    <member name="DetectUnivariateEntireSeries(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call DetectUnivariateEntireSeries and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    series = new object[]
    {
        new
        {
            value = 123.45F,
        }
    },
});
Response response = client.DetectUnivariateEntireSeries("v1.1", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("period").ToString());
Console.WriteLine(result.GetProperty("expectedValues")[0].ToString());
Console.WriteLine(result.GetProperty("upperMargins")[0].ToString());
Console.WriteLine(result.GetProperty("lowerMargins")[0].ToString());
Console.WriteLine(result.GetProperty("isAnomaly")[0].ToString());
Console.WriteLine(result.GetProperty("isNegativeAnomaly")[0].ToString());
Console.WriteLine(result.GetProperty("isPositiveAnomaly")[0].ToString());
]]></code>
This sample shows how to call DetectUnivariateEntireSeries with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    series = new object[]
    {
        new
        {
            timestamp = "2022-05-10T14:57:31.2311892-04:00",
            value = 123.45F,
        }
    },
    granularity = "yearly",
    customInterval = 1234,
    period = 1234,
    maxAnomalyRatio = 123.45F,
    sensitivity = 1234,
    imputeMode = "auto",
    imputeFixedValue = 123.45F,
});
Response response = client.DetectUnivariateEntireSeries("v1.1", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("period").ToString());
Console.WriteLine(result.GetProperty("expectedValues")[0].ToString());
Console.WriteLine(result.GetProperty("upperMargins")[0].ToString());
Console.WriteLine(result.GetProperty("lowerMargins")[0].ToString());
Console.WriteLine(result.GetProperty("isAnomaly")[0].ToString());
Console.WriteLine(result.GetProperty("isNegativeAnomaly")[0].ToString());
Console.WriteLine(result.GetProperty("isPositiveAnomaly")[0].ToString());
Console.WriteLine(result.GetProperty("severity")[0].ToString());
]]></code></example>
    </member>
    <member name="DetectUnivariateLastPointAsync(string,UnivariateDetectionOptions,CancellationToken)">
      <example>
This sample shows how to call DetectUnivariateLastPointAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

UnivariateDetectionOptions options = new UnivariateDetectionOptions(new TimeSeriesPoint[]
{
    new TimeSeriesPoint(123.45F)
});
Response<UnivariateLastDetectionResult> response = await client.DetectUnivariateLastPointAsync("v1.1", options);
]]></code>
This sample shows how to call DetectUnivariateLastPointAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

UnivariateDetectionOptions options = new UnivariateDetectionOptions(new TimeSeriesPoint[]
{
    new TimeSeriesPoint(123.45F)
    {
        Timestamp = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
    }
})
{
    Granularity = TimeGranularity.Yearly,
    CustomInterval = 1234,
    Period = 1234,
    MaxAnomalyRatio = 123.45F,
    Sensitivity = 1234,
    ImputeMode = ImputeMode.Auto,
    ImputeFixedValue = 123.45F,
};
Response<UnivariateLastDetectionResult> response = await client.DetectUnivariateLastPointAsync("v1.1", options);
]]></code></example>
    </member>
    <member name="DetectUnivariateLastPoint(string,UnivariateDetectionOptions,CancellationToken)">
      <example>
This sample shows how to call DetectUnivariateLastPoint.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

UnivariateDetectionOptions options = new UnivariateDetectionOptions(new TimeSeriesPoint[]
{
    new TimeSeriesPoint(123.45F)
});
Response<UnivariateLastDetectionResult> response = client.DetectUnivariateLastPoint("v1.1", options);
]]></code>
This sample shows how to call DetectUnivariateLastPoint with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

UnivariateDetectionOptions options = new UnivariateDetectionOptions(new TimeSeriesPoint[]
{
    new TimeSeriesPoint(123.45F)
    {
        Timestamp = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
    }
})
{
    Granularity = TimeGranularity.Yearly,
    CustomInterval = 1234,
    Period = 1234,
    MaxAnomalyRatio = 123.45F,
    Sensitivity = 1234,
    ImputeMode = ImputeMode.Auto,
    ImputeFixedValue = 123.45F,
};
Response<UnivariateLastDetectionResult> response = client.DetectUnivariateLastPoint("v1.1", options);
]]></code></example>
    </member>
    <member name="DetectUnivariateLastPointAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call DetectUnivariateLastPointAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    series = new object[]
    {
        new
        {
            value = 123.45F,
        }
    },
});
Response response = await client.DetectUnivariateLastPointAsync("v1.1", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("period").ToString());
Console.WriteLine(result.GetProperty("suggestedWindow").ToString());
Console.WriteLine(result.GetProperty("expectedValue").ToString());
Console.WriteLine(result.GetProperty("upperMargin").ToString());
Console.WriteLine(result.GetProperty("lowerMargin").ToString());
Console.WriteLine(result.GetProperty("isAnomaly").ToString());
Console.WriteLine(result.GetProperty("isNegativeAnomaly").ToString());
Console.WriteLine(result.GetProperty("isPositiveAnomaly").ToString());
]]></code>
This sample shows how to call DetectUnivariateLastPointAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    series = new object[]
    {
        new
        {
            timestamp = "2022-05-10T14:57:31.2311892-04:00",
            value = 123.45F,
        }
    },
    granularity = "yearly",
    customInterval = 1234,
    period = 1234,
    maxAnomalyRatio = 123.45F,
    sensitivity = 1234,
    imputeMode = "auto",
    imputeFixedValue = 123.45F,
});
Response response = await client.DetectUnivariateLastPointAsync("v1.1", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("period").ToString());
Console.WriteLine(result.GetProperty("suggestedWindow").ToString());
Console.WriteLine(result.GetProperty("expectedValue").ToString());
Console.WriteLine(result.GetProperty("upperMargin").ToString());
Console.WriteLine(result.GetProperty("lowerMargin").ToString());
Console.WriteLine(result.GetProperty("isAnomaly").ToString());
Console.WriteLine(result.GetProperty("isNegativeAnomaly").ToString());
Console.WriteLine(result.GetProperty("isPositiveAnomaly").ToString());
Console.WriteLine(result.GetProperty("severity").ToString());
]]></code></example>
    </member>
    <member name="DetectUnivariateLastPoint(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call DetectUnivariateLastPoint and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    series = new object[]
    {
        new
        {
            value = 123.45F,
        }
    },
});
Response response = client.DetectUnivariateLastPoint("v1.1", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("period").ToString());
Console.WriteLine(result.GetProperty("suggestedWindow").ToString());
Console.WriteLine(result.GetProperty("expectedValue").ToString());
Console.WriteLine(result.GetProperty("upperMargin").ToString());
Console.WriteLine(result.GetProperty("lowerMargin").ToString());
Console.WriteLine(result.GetProperty("isAnomaly").ToString());
Console.WriteLine(result.GetProperty("isNegativeAnomaly").ToString());
Console.WriteLine(result.GetProperty("isPositiveAnomaly").ToString());
]]></code>
This sample shows how to call DetectUnivariateLastPoint with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    series = new object[]
    {
        new
        {
            timestamp = "2022-05-10T14:57:31.2311892-04:00",
            value = 123.45F,
        }
    },
    granularity = "yearly",
    customInterval = 1234,
    period = 1234,
    maxAnomalyRatio = 123.45F,
    sensitivity = 1234,
    imputeMode = "auto",
    imputeFixedValue = 123.45F,
});
Response response = client.DetectUnivariateLastPoint("v1.1", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("period").ToString());
Console.WriteLine(result.GetProperty("suggestedWindow").ToString());
Console.WriteLine(result.GetProperty("expectedValue").ToString());
Console.WriteLine(result.GetProperty("upperMargin").ToString());
Console.WriteLine(result.GetProperty("lowerMargin").ToString());
Console.WriteLine(result.GetProperty("isAnomaly").ToString());
Console.WriteLine(result.GetProperty("isNegativeAnomaly").ToString());
Console.WriteLine(result.GetProperty("isPositiveAnomaly").ToString());
Console.WriteLine(result.GetProperty("severity").ToString());
]]></code></example>
    </member>
    <member name="DetectUnivariateChangePointAsync(string,UnivariateChangePointDetectionOptions,CancellationToken)">
      <example>
This sample shows how to call DetectUnivariateChangePointAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

UnivariateChangePointDetectionOptions options = new UnivariateChangePointDetectionOptions(new TimeSeriesPoint[]
{
    new TimeSeriesPoint(123.45F)
}, TimeGranularity.Yearly);
Response<UnivariateChangePointDetectionResult> response = await client.DetectUnivariateChangePointAsync("v1.1", options);
]]></code>
This sample shows how to call DetectUnivariateChangePointAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

UnivariateChangePointDetectionOptions options = new UnivariateChangePointDetectionOptions(new TimeSeriesPoint[]
{
    new TimeSeriesPoint(123.45F)
    {
        Timestamp = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
    }
}, TimeGranularity.Yearly)
{
    CustomInterval = 1234,
    Period = 1234,
    StableTrendWindow = 1234,
    Threshold = 123.45F,
};
Response<UnivariateChangePointDetectionResult> response = await client.DetectUnivariateChangePointAsync("v1.1", options);
]]></code></example>
    </member>
    <member name="DetectUnivariateChangePoint(string,UnivariateChangePointDetectionOptions,CancellationToken)">
      <example>
This sample shows how to call DetectUnivariateChangePoint.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

UnivariateChangePointDetectionOptions options = new UnivariateChangePointDetectionOptions(new TimeSeriesPoint[]
{
    new TimeSeriesPoint(123.45F)
}, TimeGranularity.Yearly);
Response<UnivariateChangePointDetectionResult> response = client.DetectUnivariateChangePoint("v1.1", options);
]]></code>
This sample shows how to call DetectUnivariateChangePoint with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

UnivariateChangePointDetectionOptions options = new UnivariateChangePointDetectionOptions(new TimeSeriesPoint[]
{
    new TimeSeriesPoint(123.45F)
    {
        Timestamp = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
    }
}, TimeGranularity.Yearly)
{
    CustomInterval = 1234,
    Period = 1234,
    StableTrendWindow = 1234,
    Threshold = 123.45F,
};
Response<UnivariateChangePointDetectionResult> response = client.DetectUnivariateChangePoint("v1.1", options);
]]></code></example>
    </member>
    <member name="DetectUnivariateChangePointAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call DetectUnivariateChangePointAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    series = new object[]
    {
        new
        {
            value = 123.45F,
        }
    },
    granularity = "yearly",
});
Response response = await client.DetectUnivariateChangePointAsync("v1.1", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call DetectUnivariateChangePointAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    series = new object[]
    {
        new
        {
            timestamp = "2022-05-10T14:57:31.2311892-04:00",
            value = 123.45F,
        }
    },
    granularity = "yearly",
    customInterval = 1234,
    period = 1234,
    stableTrendWindow = 1234,
    threshold = 123.45F,
});
Response response = await client.DetectUnivariateChangePointAsync("v1.1", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("period").ToString());
Console.WriteLine(result.GetProperty("isChangePoint")[0].ToString());
Console.WriteLine(result.GetProperty("confidenceScores")[0].ToString());
]]></code></example>
    </member>
    <member name="DetectUnivariateChangePoint(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call DetectUnivariateChangePoint and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    series = new object[]
    {
        new
        {
            value = 123.45F,
        }
    },
    granularity = "yearly",
});
Response response = client.DetectUnivariateChangePoint("v1.1", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call DetectUnivariateChangePoint with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    series = new object[]
    {
        new
        {
            timestamp = "2022-05-10T14:57:31.2311892-04:00",
            value = 123.45F,
        }
    },
    granularity = "yearly",
    customInterval = 1234,
    period = 1234,
    stableTrendWindow = 1234,
    threshold = 123.45F,
});
Response response = client.DetectUnivariateChangePoint("v1.1", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("period").ToString());
Console.WriteLine(result.GetProperty("isChangePoint")[0].ToString());
Console.WriteLine(result.GetProperty("confidenceScores")[0].ToString());
]]></code></example>
    </member>
    <member name="GetMultivariateBatchDetectionResultAsync(string,Guid,CancellationToken)">
      <example>
This sample shows how to call GetMultivariateBatchDetectionResultAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

Response<MultivariateDetectionResult> response = await client.GetMultivariateBatchDetectionResultAsync("v1.1", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call GetMultivariateBatchDetectionResultAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

Response<MultivariateDetectionResult> response = await client.GetMultivariateBatchDetectionResultAsync("v1.1", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
    <member name="GetMultivariateBatchDetectionResult(string,Guid,CancellationToken)">
      <example>
This sample shows how to call GetMultivariateBatchDetectionResult.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

Response<MultivariateDetectionResult> response = client.GetMultivariateBatchDetectionResult("v1.1", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code>
This sample shows how to call GetMultivariateBatchDetectionResult with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

Response<MultivariateDetectionResult> response = client.GetMultivariateBatchDetectionResult("v1.1", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
]]></code></example>
    </member>
    <member name="GetMultivariateBatchDetectionResultAsync(string,Guid,RequestContext)">
      <example>
This sample shows how to call GetMultivariateBatchDetectionResultAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

Response response = await client.GetMultivariateBatchDetectionResultAsync("v1.1", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("resultId").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("dataSource").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("topContributorCount").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("timestamp").ToString());
]]></code>
This sample shows how to call GetMultivariateBatchDetectionResultAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

Response response = await client.GetMultivariateBatchDetectionResultAsync("v1.1", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("resultId").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("variable").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("filledNARatio").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("effectiveCount").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("firstTimestamp").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("lastTimestamp").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("dataSource").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("topContributorCount").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("timestamp").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("isAnomaly").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("severity").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("score").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("interpretation")[0].GetProperty("variable").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("interpretation")[0].GetProperty("contributionScore").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("interpretation")[0].GetProperty("correlationChanges").GetProperty("changedVariables")[0].ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("errors")[0].GetProperty("message").ToString());
]]></code></example>
    </member>
    <member name="GetMultivariateBatchDetectionResult(string,Guid,RequestContext)">
      <example>
This sample shows how to call GetMultivariateBatchDetectionResult and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

Response response = client.GetMultivariateBatchDetectionResult("v1.1", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("resultId").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("dataSource").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("topContributorCount").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("timestamp").ToString());
]]></code>
This sample shows how to call GetMultivariateBatchDetectionResult with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

Response response = client.GetMultivariateBatchDetectionResult("v1.1", Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("resultId").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("variable").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("filledNARatio").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("effectiveCount").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("firstTimestamp").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("lastTimestamp").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("dataSource").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("topContributorCount").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("timestamp").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("isAnomaly").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("severity").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("score").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("interpretation")[0].GetProperty("variable").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("interpretation")[0].GetProperty("contributionScore").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("interpretation")[0].GetProperty("correlationChanges").GetProperty("changedVariables")[0].ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("errors")[0].GetProperty("message").ToString());
]]></code></example>
    </member>
    <member name="TrainMultivariateModelAsync(string,ModelInfo,CancellationToken)">
      <example>
This sample shows how to call TrainMultivariateModelAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

ModelInfo modelInfo = new ModelInfo("<dataSource>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
Response<AnomalyDetectionModel> response = await client.TrainMultivariateModelAsync("v1.1", modelInfo);
]]></code>
This sample shows how to call TrainMultivariateModelAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

ModelInfo modelInfo = new ModelInfo("<dataSource>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"))
{
    DataSchema = DataSchema.OneTable,
    DisplayName = "<displayName>",
    SlidingWindow = 1234,
    AlignPolicy = new AlignPolicy
    {
        AlignMode = AlignMode.Inner,
        FillNAMethod = FillNAMethod.Previous,
        PaddingValue = 123.45F,
    },
    Status = ModelStatus.Created,
    DiagnosticsInfo = new DiagnosticsInfo
    {
        ModelState = new ModelState
        {
            EpochIds = { 1234 },
            TrainLosses = { 123.45F },
            ValidationLosses = { 123.45F },
            LatenciesInSeconds = { 123.45F },
        },
        VariableStates = {new VariableState
        {
            Variable = "<variable>",
            FilledNARatio = 123.45F,
            EffectiveCount = 1234,
            FirstTimestamp = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
            LastTimestamp = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
        }},
    },
};
Response<AnomalyDetectionModel> response = await client.TrainMultivariateModelAsync("v1.1", modelInfo);
]]></code></example>
    </member>
    <member name="TrainMultivariateModel(string,ModelInfo,CancellationToken)">
      <example>
This sample shows how to call TrainMultivariateModel.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

ModelInfo modelInfo = new ModelInfo("<dataSource>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
Response<AnomalyDetectionModel> response = client.TrainMultivariateModel("v1.1", modelInfo);
]]></code>
This sample shows how to call TrainMultivariateModel with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

ModelInfo modelInfo = new ModelInfo("<dataSource>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"))
{
    DataSchema = DataSchema.OneTable,
    DisplayName = "<displayName>",
    SlidingWindow = 1234,
    AlignPolicy = new AlignPolicy
    {
        AlignMode = AlignMode.Inner,
        FillNAMethod = FillNAMethod.Previous,
        PaddingValue = 123.45F,
    },
    Status = ModelStatus.Created,
    DiagnosticsInfo = new DiagnosticsInfo
    {
        ModelState = new ModelState
        {
            EpochIds = { 1234 },
            TrainLosses = { 123.45F },
            ValidationLosses = { 123.45F },
            LatenciesInSeconds = { 123.45F },
        },
        VariableStates = {new VariableState
        {
            Variable = "<variable>",
            FilledNARatio = 123.45F,
            EffectiveCount = 1234,
            FirstTimestamp = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
            LastTimestamp = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
        }},
    },
};
Response<AnomalyDetectionModel> response = client.TrainMultivariateModel("v1.1", modelInfo);
]]></code></example>
    </member>
    <member name="TrainMultivariateModelAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call TrainMultivariateModelAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    dataSource = "<dataSource>",
    startTime = "2022-05-10T14:57:31.2311892-04:00",
    endTime = "2022-05-10T14:57:31.2311892-04:00",
});
Response response = await client.TrainMultivariateModelAsync("v1.1", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedTime").ToString());
]]></code>
This sample shows how to call TrainMultivariateModelAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    dataSource = "<dataSource>",
    dataSchema = "OneTable",
    startTime = "2022-05-10T14:57:31.2311892-04:00",
    endTime = "2022-05-10T14:57:31.2311892-04:00",
    displayName = "<displayName>",
    slidingWindow = 1234,
    alignPolicy = new
    {
        alignMode = "Inner",
        fillNAMethod = "Previous",
        paddingValue = 123.45F,
    },
    status = "CREATED",
    diagnosticsInfo = new
    {
        modelState = new
        {
            epochIds = new object[]
            {
                1234
            },
            trainLosses = new object[]
            {
                123.45F
            },
            validationLosses = new object[]
            {
                123.45F
            },
            latenciesInSeconds = new object[]
            {
                123.45F
            },
        },
        variableStates = new object[]
        {
            new
            {
                variable = "<variable>",
                filledNARatio = 123.45F,
                effectiveCount = 1234,
                firstTimestamp = "2022-05-10T14:57:31.2311892-04:00",
                lastTimestamp = "2022-05-10T14:57:31.2311892-04:00",
            }
        },
    },
});
Response response = await client.TrainMultivariateModelAsync("v1.1", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedTime").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("dataSource").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("dataSchema").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("slidingWindow").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("alignPolicy").GetProperty("alignMode").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("alignPolicy").GetProperty("fillNAMethod").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("alignPolicy").GetProperty("paddingValue").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("epochIds")[0].ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("trainLosses")[0].ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("validationLosses")[0].ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("latenciesInSeconds")[0].ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("variable").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("filledNARatio").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("effectiveCount").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("firstTimestamp").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("lastTimestamp").ToString());
]]></code></example>
    </member>
    <member name="TrainMultivariateModel(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call TrainMultivariateModel and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    dataSource = "<dataSource>",
    startTime = "2022-05-10T14:57:31.2311892-04:00",
    endTime = "2022-05-10T14:57:31.2311892-04:00",
});
Response response = client.TrainMultivariateModel("v1.1", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedTime").ToString());
]]></code>
This sample shows how to call TrainMultivariateModel with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    dataSource = "<dataSource>",
    dataSchema = "OneTable",
    startTime = "2022-05-10T14:57:31.2311892-04:00",
    endTime = "2022-05-10T14:57:31.2311892-04:00",
    displayName = "<displayName>",
    slidingWindow = 1234,
    alignPolicy = new
    {
        alignMode = "Inner",
        fillNAMethod = "Previous",
        paddingValue = 123.45F,
    },
    status = "CREATED",
    diagnosticsInfo = new
    {
        modelState = new
        {
            epochIds = new object[]
            {
                1234
            },
            trainLosses = new object[]
            {
                123.45F
            },
            validationLosses = new object[]
            {
                123.45F
            },
            latenciesInSeconds = new object[]
            {
                123.45F
            },
        },
        variableStates = new object[]
        {
            new
            {
                variable = "<variable>",
                filledNARatio = 123.45F,
                effectiveCount = 1234,
                firstTimestamp = "2022-05-10T14:57:31.2311892-04:00",
                lastTimestamp = "2022-05-10T14:57:31.2311892-04:00",
            }
        },
    },
});
Response response = client.TrainMultivariateModel("v1.1", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedTime").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("dataSource").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("dataSchema").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("slidingWindow").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("alignPolicy").GetProperty("alignMode").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("alignPolicy").GetProperty("fillNAMethod").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("alignPolicy").GetProperty("paddingValue").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("epochIds")[0].ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("trainLosses")[0].ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("validationLosses")[0].ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("latenciesInSeconds")[0].ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("variable").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("filledNARatio").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("effectiveCount").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("firstTimestamp").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("lastTimestamp").ToString());
]]></code></example>
    </member>
    <member name="DeleteMultivariateModelAsync(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteMultivariateModelAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

Response response = await client.DeleteMultivariateModelAsync("v1.1", "<modelId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteMultivariateModelAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

Response response = await client.DeleteMultivariateModelAsync("v1.1", "<modelId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteMultivariateModel(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteMultivariateModel.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

Response response = client.DeleteMultivariateModel("v1.1", "<modelId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteMultivariateModel with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

Response response = client.DeleteMultivariateModel("v1.1", "<modelId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetMultivariateModelAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetMultivariateModelAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

Response<AnomalyDetectionModel> response = await client.GetMultivariateModelAsync("v1.1", "<modelId>");
]]></code>
This sample shows how to call GetMultivariateModelAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

Response<AnomalyDetectionModel> response = await client.GetMultivariateModelAsync("v1.1", "<modelId>");
]]></code></example>
    </member>
    <member name="GetMultivariateModel(string,string,CancellationToken)">
      <example>
This sample shows how to call GetMultivariateModel.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

Response<AnomalyDetectionModel> response = client.GetMultivariateModel("v1.1", "<modelId>");
]]></code>
This sample shows how to call GetMultivariateModel with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

Response<AnomalyDetectionModel> response = client.GetMultivariateModel("v1.1", "<modelId>");
]]></code></example>
    </member>
    <member name="GetMultivariateModelAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetMultivariateModelAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

Response response = await client.GetMultivariateModelAsync("v1.1", "<modelId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedTime").ToString());
]]></code>
This sample shows how to call GetMultivariateModelAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

Response response = await client.GetMultivariateModelAsync("v1.1", "<modelId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedTime").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("dataSource").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("dataSchema").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("slidingWindow").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("alignPolicy").GetProperty("alignMode").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("alignPolicy").GetProperty("fillNAMethod").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("alignPolicy").GetProperty("paddingValue").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("epochIds")[0].ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("trainLosses")[0].ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("validationLosses")[0].ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("latenciesInSeconds")[0].ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("variable").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("filledNARatio").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("effectiveCount").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("firstTimestamp").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("lastTimestamp").ToString());
]]></code></example>
    </member>
    <member name="GetMultivariateModel(string,string,RequestContext)">
      <example>
This sample shows how to call GetMultivariateModel and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

Response response = client.GetMultivariateModel("v1.1", "<modelId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedTime").ToString());
]]></code>
This sample shows how to call GetMultivariateModel with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

Response response = client.GetMultivariateModel("v1.1", "<modelId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedTime").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("dataSource").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("dataSchema").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("slidingWindow").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("alignPolicy").GetProperty("alignMode").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("alignPolicy").GetProperty("fillNAMethod").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("alignPolicy").GetProperty("paddingValue").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("epochIds")[0].ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("trainLosses")[0].ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("validationLosses")[0].ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("latenciesInSeconds")[0].ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("variable").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("filledNARatio").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("effectiveCount").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("firstTimestamp").ToString());
Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("lastTimestamp").ToString());
]]></code></example>
    </member>
    <member name="DetectMultivariateBatchAnomalyAsync(string,string,MultivariateBatchDetectionOptions,CancellationToken)">
      <example>
This sample shows how to call DetectMultivariateBatchAnomalyAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

MultivariateBatchDetectionOptions options = new MultivariateBatchDetectionOptions(new Uri("http://localhost:3000"), 1234, DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
Response<MultivariateDetectionResult> response = await client.DetectMultivariateBatchAnomalyAsync("v1.1", "<modelId>", options);
]]></code>
This sample shows how to call DetectMultivariateBatchAnomalyAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

MultivariateBatchDetectionOptions options = new MultivariateBatchDetectionOptions(new Uri("http://localhost:3000"), 1234, DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
Response<MultivariateDetectionResult> response = await client.DetectMultivariateBatchAnomalyAsync("v1.1", "<modelId>", options);
]]></code></example>
    </member>
    <member name="DetectMultivariateBatchAnomaly(string,string,MultivariateBatchDetectionOptions,CancellationToken)">
      <example>
This sample shows how to call DetectMultivariateBatchAnomaly.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

MultivariateBatchDetectionOptions options = new MultivariateBatchDetectionOptions(new Uri("http://localhost:3000"), 1234, DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
Response<MultivariateDetectionResult> response = client.DetectMultivariateBatchAnomaly("v1.1", "<modelId>", options);
]]></code>
This sample shows how to call DetectMultivariateBatchAnomaly with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

MultivariateBatchDetectionOptions options = new MultivariateBatchDetectionOptions(new Uri("http://localhost:3000"), 1234, DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
Response<MultivariateDetectionResult> response = client.DetectMultivariateBatchAnomaly("v1.1", "<modelId>", options);
]]></code></example>
    </member>
    <member name="DetectMultivariateBatchAnomalyAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call DetectMultivariateBatchAnomalyAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    dataSource = "http://localhost:3000",
    topContributorCount = 1234,
    startTime = "2022-05-10T14:57:31.2311892-04:00",
    endTime = "2022-05-10T14:57:31.2311892-04:00",
});
Response response = await client.DetectMultivariateBatchAnomalyAsync("v1.1", "<modelId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("resultId").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("dataSource").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("topContributorCount").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("timestamp").ToString());
]]></code>
This sample shows how to call DetectMultivariateBatchAnomalyAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    dataSource = "http://localhost:3000",
    topContributorCount = 1234,
    startTime = "2022-05-10T14:57:31.2311892-04:00",
    endTime = "2022-05-10T14:57:31.2311892-04:00",
});
Response response = await client.DetectMultivariateBatchAnomalyAsync("v1.1", "<modelId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("resultId").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("variable").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("filledNARatio").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("effectiveCount").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("firstTimestamp").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("lastTimestamp").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("dataSource").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("topContributorCount").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("timestamp").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("isAnomaly").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("severity").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("score").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("interpretation")[0].GetProperty("variable").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("interpretation")[0].GetProperty("contributionScore").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("interpretation")[0].GetProperty("correlationChanges").GetProperty("changedVariables")[0].ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("errors")[0].GetProperty("message").ToString());
]]></code></example>
    </member>
    <member name="DetectMultivariateBatchAnomaly(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call DetectMultivariateBatchAnomaly and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    dataSource = "http://localhost:3000",
    topContributorCount = 1234,
    startTime = "2022-05-10T14:57:31.2311892-04:00",
    endTime = "2022-05-10T14:57:31.2311892-04:00",
});
Response response = client.DetectMultivariateBatchAnomaly("v1.1", "<modelId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("resultId").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("dataSource").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("topContributorCount").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("timestamp").ToString());
]]></code>
This sample shows how to call DetectMultivariateBatchAnomaly with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    dataSource = "http://localhost:3000",
    topContributorCount = 1234,
    startTime = "2022-05-10T14:57:31.2311892-04:00",
    endTime = "2022-05-10T14:57:31.2311892-04:00",
});
Response response = client.DetectMultivariateBatchAnomaly("v1.1", "<modelId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("resultId").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("errors")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("variable").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("filledNARatio").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("effectiveCount").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("firstTimestamp").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("lastTimestamp").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("dataSource").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("topContributorCount").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("timestamp").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("isAnomaly").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("severity").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("score").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("interpretation")[0].GetProperty("variable").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("interpretation")[0].GetProperty("contributionScore").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("interpretation")[0].GetProperty("correlationChanges").GetProperty("changedVariables")[0].ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("errors")[0].GetProperty("message").ToString());
]]></code></example>
    </member>
    <member name="DetectMultivariateLastAnomalyAsync(string,string,MultivariateLastDetectionOptions,CancellationToken)">
      <example>
This sample shows how to call DetectMultivariateLastAnomalyAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

MultivariateLastDetectionOptions options = new MultivariateLastDetectionOptions(new VariableValues[]
{
    new VariableValues("<variable>", new string[]{"<timestamps>"}, new float[]{123.45F})
}, 1234);
Response<MultivariateLastDetectionResult> response = await client.DetectMultivariateLastAnomalyAsync("v1.1", "<modelId>", options);
]]></code>
This sample shows how to call DetectMultivariateLastAnomalyAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

MultivariateLastDetectionOptions options = new MultivariateLastDetectionOptions(new VariableValues[]
{
    new VariableValues("<variable>", new string[]{"<timestamps>"}, new float[]{123.45F})
}, 1234);
Response<MultivariateLastDetectionResult> response = await client.DetectMultivariateLastAnomalyAsync("v1.1", "<modelId>", options);
]]></code></example>
    </member>
    <member name="DetectMultivariateLastAnomaly(string,string,MultivariateLastDetectionOptions,CancellationToken)">
      <example>
This sample shows how to call DetectMultivariateLastAnomaly.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

MultivariateLastDetectionOptions options = new MultivariateLastDetectionOptions(new VariableValues[]
{
    new VariableValues("<variable>", new string[]{"<timestamps>"}, new float[]{123.45F})
}, 1234);
Response<MultivariateLastDetectionResult> response = client.DetectMultivariateLastAnomaly("v1.1", "<modelId>", options);
]]></code>
This sample shows how to call DetectMultivariateLastAnomaly with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

MultivariateLastDetectionOptions options = new MultivariateLastDetectionOptions(new VariableValues[]
{
    new VariableValues("<variable>", new string[]{"<timestamps>"}, new float[]{123.45F})
}, 1234);
Response<MultivariateLastDetectionResult> response = client.DetectMultivariateLastAnomaly("v1.1", "<modelId>", options);
]]></code></example>
    </member>
    <member name="DetectMultivariateLastAnomalyAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call DetectMultivariateLastAnomalyAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    variables = new object[]
    {
        new
        {
            variable = "<variable>",
            timestamps = new object[]
            {
                "<timestamps>"
            },
            values = new object[]
            {
                123.45F
            },
        }
    },
    topContributorCount = 1234,
});
Response response = await client.DetectMultivariateLastAnomalyAsync("v1.1", "<modelId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call DetectMultivariateLastAnomalyAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    variables = new object[]
    {
        new
        {
            variable = "<variable>",
            timestamps = new object[]
            {
                "<timestamps>"
            },
            values = new object[]
            {
                123.45F
            },
        }
    },
    topContributorCount = 1234,
});
Response response = await client.DetectMultivariateLastAnomalyAsync("v1.1", "<modelId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("variableStates")[0].GetProperty("variable").ToString());
Console.WriteLine(result.GetProperty("variableStates")[0].GetProperty("filledNARatio").ToString());
Console.WriteLine(result.GetProperty("variableStates")[0].GetProperty("effectiveCount").ToString());
Console.WriteLine(result.GetProperty("variableStates")[0].GetProperty("firstTimestamp").ToString());
Console.WriteLine(result.GetProperty("variableStates")[0].GetProperty("lastTimestamp").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("timestamp").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("isAnomaly").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("severity").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("score").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("interpretation")[0].GetProperty("variable").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("interpretation")[0].GetProperty("contributionScore").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("interpretation")[0].GetProperty("correlationChanges").GetProperty("changedVariables")[0].ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("errors")[0].GetProperty("message").ToString());
]]></code></example>
    </member>
    <member name="DetectMultivariateLastAnomaly(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call DetectMultivariateLastAnomaly and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    variables = new object[]
    {
        new
        {
            variable = "<variable>",
            timestamps = new object[]
            {
                "<timestamps>"
            },
            values = new object[]
            {
                123.45F
            },
        }
    },
    topContributorCount = 1234,
});
Response response = client.DetectMultivariateLastAnomaly("v1.1", "<modelId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call DetectMultivariateLastAnomaly with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    variables = new object[]
    {
        new
        {
            variable = "<variable>",
            timestamps = new object[]
            {
                "<timestamps>"
            },
            values = new object[]
            {
                123.45F
            },
        }
    },
    topContributorCount = 1234,
});
Response response = client.DetectMultivariateLastAnomaly("v1.1", "<modelId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("variableStates")[0].GetProperty("variable").ToString());
Console.WriteLine(result.GetProperty("variableStates")[0].GetProperty("filledNARatio").ToString());
Console.WriteLine(result.GetProperty("variableStates")[0].GetProperty("effectiveCount").ToString());
Console.WriteLine(result.GetProperty("variableStates")[0].GetProperty("firstTimestamp").ToString());
Console.WriteLine(result.GetProperty("variableStates")[0].GetProperty("lastTimestamp").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("timestamp").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("isAnomaly").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("severity").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("score").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("interpretation")[0].GetProperty("variable").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("interpretation")[0].GetProperty("contributionScore").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("interpretation")[0].GetProperty("correlationChanges").GetProperty("changedVariables")[0].ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("errors")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("results")[0].GetProperty("errors")[0].GetProperty("message").ToString());
]]></code></example>
    </member>
    <member name="GetMultivariateModelsAsync(string,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetMultivariateModelsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

await foreach (AnomalyDetectionModel item in client.GetMultivariateModelsAsync("v1.1"))
{
}
]]></code>
This sample shows how to call GetMultivariateModelsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

await foreach (AnomalyDetectionModel item in client.GetMultivariateModelsAsync("v1.1", skip: 1234, maxCount: 1234))
{
}
]]></code></example>
    </member>
    <member name="GetMultivariateModels(string,int?,int?,CancellationToken)">
      <example>
This sample shows how to call GetMultivariateModels.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

foreach (AnomalyDetectionModel item in client.GetMultivariateModels("v1.1"))
{
}
]]></code>
This sample shows how to call GetMultivariateModels with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

foreach (AnomalyDetectionModel item in client.GetMultivariateModels("v1.1", skip: 1234, maxCount: 1234))
{
}
]]></code></example>
    </member>
    <member name="GetMultivariateModelsAsync(string,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetMultivariateModelsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

await foreach (BinaryData item in client.GetMultivariateModelsAsync("v1.1", null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("modelId").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("lastUpdatedTime").ToString());
}
]]></code>
This sample shows how to call GetMultivariateModelsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

await foreach (BinaryData item in client.GetMultivariateModelsAsync("v1.1", 1234, 1234, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("modelId").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("lastUpdatedTime").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("dataSource").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("dataSchema").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("startTime").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("endTime").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("slidingWindow").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("alignPolicy").GetProperty("alignMode").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("alignPolicy").GetProperty("fillNAMethod").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("alignPolicy").GetProperty("paddingValue").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("errors")[0].GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("errors")[0].GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("epochIds")[0].ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("trainLosses")[0].ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("validationLosses")[0].ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("latenciesInSeconds")[0].ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("variable").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("filledNARatio").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("effectiveCount").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("firstTimestamp").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("lastTimestamp").ToString());
}
]]></code></example>
    </member>
    <member name="GetMultivariateModels(string,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetMultivariateModels and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

foreach (BinaryData item in client.GetMultivariateModels("v1.1", null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("modelId").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("lastUpdatedTime").ToString());
}
]]></code>
This sample shows how to call GetMultivariateModels with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
AnomalyDetectorClient client = new AnomalyDetectorClient(endpoint, credential);

foreach (BinaryData item in client.GetMultivariateModels("v1.1", 1234, 1234, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("modelId").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("lastUpdatedTime").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("dataSource").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("dataSchema").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("startTime").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("endTime").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("slidingWindow").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("alignPolicy").GetProperty("alignMode").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("alignPolicy").GetProperty("fillNAMethod").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("alignPolicy").GetProperty("paddingValue").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("errors")[0].GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("errors")[0].GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("epochIds")[0].ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("trainLosses")[0].ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("validationLosses")[0].ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("latenciesInSeconds")[0].ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("variable").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("filledNARatio").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("effectiveCount").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("firstTimestamp").ToString());
    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("lastTimestamp").ToString());
}
]]></code></example>
    </member>
  </members>
</doc>