// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace AnomalyDetector.Models
{
    /// <summary> The ModelInfo. </summary>
    public partial class ModelInfo
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ModelInfo"/>. </summary>
        /// <param name="dataSource"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataSource"/> is null. </exception>
        public ModelInfo(string dataSource, DateTimeOffset startTime, DateTimeOffset endTime)
        {
            Argument.AssertNotNull(dataSource, nameof(dataSource));

            DataSource = dataSource;
            StartTime = startTime;
            EndTime = endTime;
            Errors = new ChangeTrackingList<ErrorResponse>();
        }

        /// <summary> Initializes a new instance of <see cref="ModelInfo"/>. </summary>
        /// <param name="dataSource"></param>
        /// <param name="dataSchema"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="displayName"></param>
        /// <param name="slidingWindow"></param>
        /// <param name="alignPolicy"></param>
        /// <param name="status"></param>
        /// <param name="errors"></param>
        /// <param name="diagnosticsInfo"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ModelInfo(string dataSource, DataSchema? dataSchema, DateTimeOffset startTime, DateTimeOffset endTime, string displayName, int? slidingWindow, AlignPolicy alignPolicy, ModelStatus? status, IReadOnlyList<ErrorResponse> errors, DiagnosticsInfo diagnosticsInfo, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            DataSource = dataSource;
            DataSchema = dataSchema;
            StartTime = startTime;
            EndTime = endTime;
            DisplayName = displayName;
            SlidingWindow = slidingWindow;
            AlignPolicy = alignPolicy;
            Status = status;
            Errors = errors;
            DiagnosticsInfo = diagnosticsInfo;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ModelInfo"/> for deserialization. </summary>
        internal ModelInfo()
        {
        }

        /// <summary> Gets or sets the data source. </summary>
        public string DataSource { get; set; }
        /// <summary> Gets or sets the data schema. </summary>
        public DataSchema? DataSchema { get; set; }
        /// <summary> Gets or sets the start time. </summary>
        public DateTimeOffset StartTime { get; set; }
        /// <summary> Gets or sets the end time. </summary>
        public DateTimeOffset EndTime { get; set; }
        /// <summary> Gets or sets the display name. </summary>
        public string DisplayName { get; set; }
        /// <summary> Gets or sets the sliding window. </summary>
        public int? SlidingWindow { get; set; }
        /// <summary> Gets or sets the align policy. </summary>
        public AlignPolicy AlignPolicy { get; set; }
        /// <summary> Gets or sets the status. </summary>
        public ModelStatus? Status { get; set; }
        /// <summary> Gets the errors. </summary>
        public IReadOnlyList<ErrorResponse> Errors { get; }
        /// <summary> Gets or sets the diagnostics info. </summary>
        public DiagnosticsInfo DiagnosticsInfo { get; set; }
    }
}
