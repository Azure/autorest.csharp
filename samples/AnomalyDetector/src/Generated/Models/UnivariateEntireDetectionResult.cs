// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace AnomalyDetector.Models
{
    /// <summary> The UnivariateEntireDetectionResult. </summary>
    public partial class UnivariateEntireDetectionResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="UnivariateEntireDetectionResult"/>. </summary>
        /// <param name="period"></param>
        /// <param name="expectedValues"></param>
        /// <param name="upperMargins"></param>
        /// <param name="lowerMargins"></param>
        /// <param name="isAnomaly"></param>
        /// <param name="isNegativeAnomaly"></param>
        /// <param name="isPositiveAnomaly"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="expectedValues"/>, <paramref name="upperMargins"/>, <paramref name="lowerMargins"/>, <paramref name="isAnomaly"/>, <paramref name="isNegativeAnomaly"/> or <paramref name="isPositiveAnomaly"/> is null. </exception>
        internal UnivariateEntireDetectionResult(int period, IEnumerable<float> expectedValues, IEnumerable<float> upperMargins, IEnumerable<float> lowerMargins, IEnumerable<bool> isAnomaly, IEnumerable<bool> isNegativeAnomaly, IEnumerable<bool> isPositiveAnomaly)
        {
            Argument.AssertNotNull(expectedValues, nameof(expectedValues));
            Argument.AssertNotNull(upperMargins, nameof(upperMargins));
            Argument.AssertNotNull(lowerMargins, nameof(lowerMargins));
            Argument.AssertNotNull(isAnomaly, nameof(isAnomaly));
            Argument.AssertNotNull(isNegativeAnomaly, nameof(isNegativeAnomaly));
            Argument.AssertNotNull(isPositiveAnomaly, nameof(isPositiveAnomaly));

            Period = period;
            ExpectedValues = expectedValues.ToList();
            UpperMargins = upperMargins.ToList();
            LowerMargins = lowerMargins.ToList();
            IsAnomaly = isAnomaly.ToList();
            IsNegativeAnomaly = isNegativeAnomaly.ToList();
            IsPositiveAnomaly = isPositiveAnomaly.ToList();
            Severity = new ChangeTrackingList<float>();
        }

        /// <summary> Initializes a new instance of <see cref="UnivariateEntireDetectionResult"/>. </summary>
        /// <param name="period"></param>
        /// <param name="expectedValues"></param>
        /// <param name="upperMargins"></param>
        /// <param name="lowerMargins"></param>
        /// <param name="isAnomaly"></param>
        /// <param name="isNegativeAnomaly"></param>
        /// <param name="isPositiveAnomaly"></param>
        /// <param name="severity"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal UnivariateEntireDetectionResult(int period, IReadOnlyList<float> expectedValues, IReadOnlyList<float> upperMargins, IReadOnlyList<float> lowerMargins, IReadOnlyList<bool> isAnomaly, IReadOnlyList<bool> isNegativeAnomaly, IReadOnlyList<bool> isPositiveAnomaly, IReadOnlyList<float> severity, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Period = period;
            ExpectedValues = expectedValues;
            UpperMargins = upperMargins;
            LowerMargins = lowerMargins;
            IsAnomaly = isAnomaly;
            IsNegativeAnomaly = isNegativeAnomaly;
            IsPositiveAnomaly = isPositiveAnomaly;
            Severity = severity;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="UnivariateEntireDetectionResult"/> for deserialization. </summary>
        internal UnivariateEntireDetectionResult()
        {
        }

        /// <summary> Gets the period. </summary>
        public int Period { get; }
        /// <summary> Gets the expected values. </summary>
        public IReadOnlyList<float> ExpectedValues { get; }
        /// <summary> Gets the upper margins. </summary>
        public IReadOnlyList<float> UpperMargins { get; }
        /// <summary> Gets the lower margins. </summary>
        public IReadOnlyList<float> LowerMargins { get; }
        /// <summary> Gets the is anomaly. </summary>
        public IReadOnlyList<bool> IsAnomaly { get; }
        /// <summary> Gets the is negative anomaly. </summary>
        public IReadOnlyList<bool> IsNegativeAnomaly { get; }
        /// <summary> Gets the is positive anomaly. </summary>
        public IReadOnlyList<bool> IsPositiveAnomaly { get; }
        /// <summary> Gets the severity. </summary>
        public IReadOnlyList<float> Severity { get; }
    }
}
