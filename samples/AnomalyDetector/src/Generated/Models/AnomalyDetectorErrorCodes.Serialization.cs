// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace AnomalyDetector.Models
{
    internal static partial class AnomalyDetectorErrorCodesExtensions
    {
        public static string ToSerialString(this AnomalyDetectorErrorCodes value) => value switch
        {
            AnomalyDetectorErrorCodes.InvalidCustomInterval => "InvalidCustomInterval",
            AnomalyDetectorErrorCodes.BadArgument => "BadArgument",
            AnomalyDetectorErrorCodes.InvalidGranularity => "InvalidGranularity",
            AnomalyDetectorErrorCodes.InvalidPeriod => "InvalidPeriod",
            AnomalyDetectorErrorCodes.InvalidModelArgument => "InvalidModelArgument",
            AnomalyDetectorErrorCodes.InvalidSeries => "InvalidSeries",
            AnomalyDetectorErrorCodes.InvalidJsonFormat => "InvalidJsonFormat",
            AnomalyDetectorErrorCodes.RequiredGranularity => "RequiredGranularity",
            AnomalyDetectorErrorCodes.RequiredSeries => "RequiredSeries",
            AnomalyDetectorErrorCodes.InvalidImputeMode => "InvalidImputeMode",
            AnomalyDetectorErrorCodes.InvalidImputeFixedValue => "InvalidImputeFixedValue",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown AnomalyDetectorErrorCodes value.")
        };

        public static AnomalyDetectorErrorCodes ToAnomalyDetectorErrorCodes(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "InvalidCustomInterval")) return AnomalyDetectorErrorCodes.InvalidCustomInterval;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "BadArgument")) return AnomalyDetectorErrorCodes.BadArgument;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "InvalidGranularity")) return AnomalyDetectorErrorCodes.InvalidGranularity;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "InvalidPeriod")) return AnomalyDetectorErrorCodes.InvalidPeriod;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "InvalidModelArgument")) return AnomalyDetectorErrorCodes.InvalidModelArgument;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "InvalidSeries")) return AnomalyDetectorErrorCodes.InvalidSeries;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "InvalidJsonFormat")) return AnomalyDetectorErrorCodes.InvalidJsonFormat;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "RequiredGranularity")) return AnomalyDetectorErrorCodes.RequiredGranularity;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "RequiredSeries")) return AnomalyDetectorErrorCodes.RequiredSeries;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "InvalidImputeMode")) return AnomalyDetectorErrorCodes.InvalidImputeMode;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "InvalidImputeFixedValue")) return AnomalyDetectorErrorCodes.InvalidImputeFixedValue;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown AnomalyDetectorErrorCodes value.");
        }
    }
}
