// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace AnomalyDetector.Models
{
    public partial class UnivariateEntireDetectionResult : IUtf8JsonSerializable, IJsonModelSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModelSerializable)this).Serialize(writer, ModelSerializerOptions.AzureServiceDefault);

        void IJsonModelSerializable.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("period"u8);
            writer.WriteNumberValue(Period);
            writer.WritePropertyName("expectedValues"u8);
            writer.WriteStartArray();
            foreach (var item in ExpectedValues)
            {
                writer.WriteNumberValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("upperMargins"u8);
            writer.WriteStartArray();
            foreach (var item in UpperMargins)
            {
                writer.WriteNumberValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("lowerMargins"u8);
            writer.WriteStartArray();
            foreach (var item in LowerMargins)
            {
                writer.WriteNumberValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("isAnomaly"u8);
            writer.WriteStartArray();
            foreach (var item in IsAnomaly)
            {
                writer.WriteBooleanValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("isNegativeAnomaly"u8);
            writer.WriteStartArray();
            foreach (var item in IsNegativeAnomaly)
            {
                writer.WriteBooleanValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("isPositiveAnomaly"u8);
            writer.WriteStartArray();
            foreach (var item in IsPositiveAnomaly)
            {
                writer.WriteBooleanValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsCollectionDefined(Severity))
            {
                writer.WritePropertyName("severity"u8);
                writer.WriteStartArray();
                foreach (var item in Severity)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        object IModelSerializable.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            using var doc = JsonDocument.Parse(data);
            return DeserializeUnivariateEntireDetectionResult(doc.RootElement, options);
        }

        internal static UnivariateEntireDetectionResult DeserializeUnivariateEntireDetectionResult(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.AzureServiceDefault;
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int period = default;
            IReadOnlyList<float> expectedValues = default;
            IReadOnlyList<float> upperMargins = default;
            IReadOnlyList<float> lowerMargins = default;
            IReadOnlyList<bool> isAnomaly = default;
            IReadOnlyList<bool> isNegativeAnomaly = default;
            IReadOnlyList<bool> isPositiveAnomaly = default;
            Optional<IReadOnlyList<float>> severity = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("period"u8))
                {
                    period = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("expectedValues"u8))
                {
                    List<float> array = new List<float>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetSingle());
                    }
                    expectedValues = array;
                    continue;
                }
                if (property.NameEquals("upperMargins"u8))
                {
                    List<float> array = new List<float>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetSingle());
                    }
                    upperMargins = array;
                    continue;
                }
                if (property.NameEquals("lowerMargins"u8))
                {
                    List<float> array = new List<float>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetSingle());
                    }
                    lowerMargins = array;
                    continue;
                }
                if (property.NameEquals("isAnomaly"u8))
                {
                    List<bool> array = new List<bool>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetBoolean());
                    }
                    isAnomaly = array;
                    continue;
                }
                if (property.NameEquals("isNegativeAnomaly"u8))
                {
                    List<bool> array = new List<bool>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetBoolean());
                    }
                    isNegativeAnomaly = array;
                    continue;
                }
                if (property.NameEquals("isPositiveAnomaly"u8))
                {
                    List<bool> array = new List<bool>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetBoolean());
                    }
                    isPositiveAnomaly = array;
                    continue;
                }
                if (property.NameEquals("severity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<float> array = new List<float>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetSingle());
                    }
                    severity = array;
                    continue;
                }
            }
            return new UnivariateEntireDetectionResult(period, expectedValues, upperMargins, lowerMargins, isAnomaly, isNegativeAnomaly, isPositiveAnomaly, Optional.ToList(severity));
        }

        object IJsonModelSerializable.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeUnivariateEntireDetectionResult(doc.RootElement, options);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static UnivariateEntireDetectionResult FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeUnivariateEntireDetectionResult(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
