// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace AnomalyDetector.Samples
{
    public class Samples_AnomalyDetectorClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DetectUnivariateEntireSeries()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new AnomalyDetectorClient(endpoint, credential);

            var data = new
            {
                series = new[] {
        new {
            value = 123.45f,
        }
    },
            };

            Response response = client.DetectUnivariateEntireSeries(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("period").ToString());
            Console.WriteLine(result.GetProperty("expectedValues")[0].ToString());
            Console.WriteLine(result.GetProperty("upperMargins")[0].ToString());
            Console.WriteLine(result.GetProperty("lowerMargins")[0].ToString());
            Console.WriteLine(result.GetProperty("isAnomaly")[0].ToString());
            Console.WriteLine(result.GetProperty("isNegativeAnomaly")[0].ToString());
            Console.WriteLine(result.GetProperty("isPositiveAnomaly")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DetectUnivariateLastPoint()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new AnomalyDetectorClient(endpoint, credential);

            var data = new
            {
                series = new[] {
        new {
            value = 123.45f,
        }
    },
            };

            Response response = client.DetectUnivariateLastPoint(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("period").ToString());
            Console.WriteLine(result.GetProperty("suggestedWindow").ToString());
            Console.WriteLine(result.GetProperty("expectedValue").ToString());
            Console.WriteLine(result.GetProperty("upperMargin").ToString());
            Console.WriteLine(result.GetProperty("lowerMargin").ToString());
            Console.WriteLine(result.GetProperty("isAnomaly").ToString());
            Console.WriteLine(result.GetProperty("isNegativeAnomaly").ToString());
            Console.WriteLine(result.GetProperty("isPositiveAnomaly").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DetectUnivariateChangePoint()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new AnomalyDetectorClient(endpoint, credential);

            var data = new
            {
                series = new[] {
        new {
            value = 123.45f,
        }
    },
                granularity = "yearly",
            };

            Response response = client.DetectUnivariateChangePoint(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetMultivariateBatchDetectionResult()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new AnomalyDetectorClient(endpoint, credential);

            Response response = client.GetMultivariateBatchDetectionResult("<resultId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("resultId").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("dataSource").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("topContributorCount").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("timestamp").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TrainMultivariateModel()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new AnomalyDetectorClient(endpoint, credential);

            var data = new
            {
                dataSource = "<dataSource>",
                startTime = "2022-05-10T14:57:31.2311892-04:00",
                endTime = "2022-05-10T14:57:31.2311892-04:00",
            };

            Response response = client.TrainMultivariateModel(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("modelId").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteMultivariateModel()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new AnomalyDetectorClient(endpoint, credential);

            Response response = client.DeleteMultivariateModel("<modelId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetMultivariateModel()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new AnomalyDetectorClient(endpoint, credential);

            Response response = client.GetMultivariateModel("<modelId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("modelId").ToString());
            Console.WriteLine(result.GetProperty("createdTime").ToString());
            Console.WriteLine(result.GetProperty("lastUpdatedTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DetectMultivariateBatchAnomaly()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new AnomalyDetectorClient(endpoint, credential);

            var data = new
            {
                dataSource = "<dataSource>",
                topContributorCount = 1234,
                startTime = "2022-05-10T14:57:31.2311892-04:00",
                endTime = "2022-05-10T14:57:31.2311892-04:00",
            };

            Response response = client.DetectMultivariateBatchAnomaly("<modelId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("resultId").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("dataSource").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("topContributorCount").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("timestamp").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DetectMultivariateLastAnomaly()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new AnomalyDetectorClient(endpoint, credential);

            var data = new
            {
                variables = new[] {
        new {
            variable = "<variable>",
            timestamps = new[] {
                "<String>"
            },
            values = new[] {
                123.45f
            },
        }
    },
                topContributorCount = 1234,
            };

            Response response = client.DetectMultivariateLastAnomaly("<modelId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetMultivariateModels()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new AnomalyDetectorClient(endpoint, credential);

            foreach (var data in client.GetMultivariateModels(1234, 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("modelId").ToString());
                Console.WriteLine(result.GetProperty("createdTime").ToString());
                Console.WriteLine(result.GetProperty("lastUpdatedTime").ToString());
            }
        }
    }
}
