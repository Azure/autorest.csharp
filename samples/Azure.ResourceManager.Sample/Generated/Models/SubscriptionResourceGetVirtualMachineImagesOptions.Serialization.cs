// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text;
using Azure.Core;

namespace Azure.ResourceManager.Sample.Models
{
    public partial class SubscriptionResourceGetVirtualMachineImagesOptions : IPersistableModel<SubscriptionResourceGetVirtualMachineImagesOptions>
    {
        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(Location))
            {
                builder.Append("  location:");
                builder.AppendLine($" '{Location.ToString()}'");
            }

            if (Optional.IsDefined(PublisherName))
            {
                builder.Append("  publisherName:");
                builder.AppendLine($" '{PublisherName}'");
            }

            if (Optional.IsDefined(Offer))
            {
                builder.Append("  offer:");
                builder.AppendLine($" '{Offer}'");
            }

            if (Optional.IsDefined(Skus))
            {
                builder.Append("  skus:");
                builder.AppendLine($" '{Skus}'");
            }

            if (Optional.IsDefined(Expand))
            {
                builder.Append("  expand:");
                builder.AppendLine($" '{Expand}'");
            }

            if (Optional.IsDefined(Top))
            {
                builder.Append("  top:");
                builder.AppendLine($" '{Top.ToString()}'");
            }

            if (Optional.IsDefined(Orderby))
            {
                builder.Append("  orderby:");
                builder.AppendLine($" '{Orderby}'");
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            foreach (var line in lines)
            {
                stringBuilder.AppendLine($"{indent}{line}");
            }
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
