// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Sample.Models
{
    public partial class VirtualMachineScaleSetUpdateVmProfile : IUtf8JsonSerializable, IPersistableModel<VirtualMachineScaleSetUpdateVmProfile>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(OSProfile))
            {
                writer.WritePropertyName("osProfile"u8);
                writer.WriteObjectValue(OSProfile);
            }
            if (Optional.IsDefined(StorageProfile))
            {
                writer.WritePropertyName("storageProfile"u8);
                writer.WriteObjectValue(StorageProfile);
            }
            if (Optional.IsDefined(NetworkProfile))
            {
                writer.WritePropertyName("networkProfile"u8);
                writer.WriteObjectValue(NetworkProfile);
            }
            if (Optional.IsDefined(SecurityProfile))
            {
                writer.WritePropertyName("securityProfile"u8);
                writer.WriteObjectValue(SecurityProfile);
            }
            if (Optional.IsDefined(DiagnosticsProfile))
            {
                writer.WritePropertyName("diagnosticsProfile"u8);
                writer.WriteObjectValue(DiagnosticsProfile);
            }
            if (Optional.IsDefined(ExtensionProfile))
            {
                writer.WritePropertyName("extensionProfile"u8);
                writer.WriteObjectValue(ExtensionProfile);
            }
            if (Optional.IsDefined(LicenseType))
            {
                writer.WritePropertyName("licenseType"u8);
                writer.WriteStringValue(LicenseType);
            }
            if (Optional.IsDefined(BillingProfile))
            {
                writer.WritePropertyName("billingProfile"u8);
                writer.WriteObjectValue(BillingProfile);
            }
            if (Optional.IsDefined(ScheduledEventsProfile))
            {
                writer.WritePropertyName("scheduledEventsProfile"u8);
                writer.WriteObjectValue(ScheduledEventsProfile);
            }
            writer.WriteEndObject();
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(OSProfile))
            {
                builder.Append("  osProfile:");
                AppendChildObject(builder, OSProfile, options, 2);
            }

            if (Optional.IsDefined(StorageProfile))
            {
                builder.Append("  storageProfile:");
                AppendChildObject(builder, StorageProfile, options, 2);
            }

            if (Optional.IsDefined(NetworkProfile))
            {
                builder.Append("  networkProfile:");
                AppendChildObject(builder, NetworkProfile, options, 2);
            }

            if (Optional.IsDefined(SecurityProfile))
            {
                builder.Append("  securityProfile:");
                AppendChildObject(builder, SecurityProfile, options, 2);
            }

            if (Optional.IsDefined(DiagnosticsProfile))
            {
                builder.Append("  diagnosticsProfile:");
                AppendChildObject(builder, DiagnosticsProfile, options, 2);
            }

            if (Optional.IsDefined(ExtensionProfile))
            {
                builder.Append("  extensionProfile:");
                AppendChildObject(builder, ExtensionProfile, options, 2);
            }

            if (Optional.IsDefined(LicenseType))
            {
                builder.Append("  licenseType:");
                builder.AppendLine($" '{LicenseType}'");
            }

            if (Optional.IsDefined(BillingProfile))
            {
                builder.Append("  billingProfile:");
                AppendChildObject(builder, BillingProfile, options, 2);
            }

            if (Optional.IsDefined(ScheduledEventsProfile))
            {
                builder.Append("  scheduledEventsProfile:");
                AppendChildObject(builder, ScheduledEventsProfile, options, 2);
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            foreach (var line in lines)
            {
                stringBuilder.AppendLine($"{indent}{line}");
            }
        }
    }
}
