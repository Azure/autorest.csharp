// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Sample.Models
{
    public partial class VirtualMachinePatch : IUtf8JsonSerializable, IPersistableModel<VirtualMachinePatch>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Plan))
            {
                writer.WritePropertyName("plan"u8);
                writer.WriteObjectValue(Plan);
            }
            if (Optional.IsDefined(Identity))
            {
                writer.WritePropertyName("identity"u8);
                JsonSerializer.Serialize(writer, Identity);
            }
            if (Optional.IsCollectionDefined(Zones))
            {
                writer.WritePropertyName("zones"u8);
                writer.WriteStartArray();
                foreach (var item in Zones)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(HardwareProfile))
            {
                writer.WritePropertyName("hardwareProfile"u8);
                writer.WriteObjectValue(HardwareProfile);
            }
            if (Optional.IsDefined(StorageProfile))
            {
                writer.WritePropertyName("storageProfile"u8);
                writer.WriteObjectValue(StorageProfile);
            }
            if (Optional.IsDefined(AdditionalCapabilities))
            {
                writer.WritePropertyName("additionalCapabilities"u8);
                writer.WriteObjectValue(AdditionalCapabilities);
            }
            if (Optional.IsDefined(OSProfile))
            {
                writer.WritePropertyName("osProfile"u8);
                writer.WriteObjectValue(OSProfile);
            }
            if (Optional.IsDefined(NetworkProfile))
            {
                writer.WritePropertyName("networkProfile"u8);
                writer.WriteObjectValue(NetworkProfile);
            }
            if (Optional.IsDefined(SecurityProfile))
            {
                writer.WritePropertyName("securityProfile"u8);
                writer.WriteObjectValue(SecurityProfile);
            }
            if (Optional.IsDefined(DiagnosticsProfile))
            {
                writer.WritePropertyName("diagnosticsProfile"u8);
                writer.WriteObjectValue(DiagnosticsProfile);
            }
            if (Optional.IsDefined(AvailabilitySet))
            {
                writer.WritePropertyName("availabilitySet"u8);
                JsonSerializer.Serialize(writer, AvailabilitySet);
            }
            if (Optional.IsDefined(VirtualMachineScaleSet))
            {
                writer.WritePropertyName("virtualMachineScaleSet"u8);
                JsonSerializer.Serialize(writer, VirtualMachineScaleSet);
            }
            if (Optional.IsDefined(ProximityPlacementGroup))
            {
                writer.WritePropertyName("proximityPlacementGroup"u8);
                JsonSerializer.Serialize(writer, ProximityPlacementGroup);
            }
            if (Optional.IsDefined(Priority))
            {
                writer.WritePropertyName("priority"u8);
                writer.WriteStringValue(Priority.Value.ToString());
            }
            if (Optional.IsDefined(EvictionPolicy))
            {
                writer.WritePropertyName("evictionPolicy"u8);
                writer.WriteStringValue(EvictionPolicy.Value.ToString());
            }
            if (Optional.IsDefined(BillingProfile))
            {
                writer.WritePropertyName("billingProfile"u8);
                writer.WriteObjectValue(BillingProfile);
            }
            if (Optional.IsDefined(Host))
            {
                writer.WritePropertyName("host"u8);
                JsonSerializer.Serialize(writer, Host);
            }
            if (Optional.IsDefined(HostGroup))
            {
                writer.WritePropertyName("hostGroup"u8);
                JsonSerializer.Serialize(writer, HostGroup);
            }
            if (Optional.IsDefined(LicenseType))
            {
                writer.WritePropertyName("licenseType"u8);
                writer.WriteStringValue(LicenseType);
            }
            if (Optional.IsDefined(ExtensionsTimeBudget))
            {
                writer.WritePropertyName("extensionsTimeBudget"u8);
                writer.WriteStringValue(ExtensionsTimeBudget);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(Plan))
            {
                builder.Append("  plan:");
                AppendChildObject(builder, Plan, options, 2);
            }

            if (Optional.IsDefined(Identity))
            {
                builder.Append("  identity:");
                AppendChildObject(builder, Identity, options, 2);
            }

            if (Optional.IsCollectionDefined(Zones))
            {
                builder.Append("  zones:");
                builder.AppendLine(" [");
                foreach (var item in Zones)
                {
                    if (item == null)
                    {
                        builder.Append("null");
                        continue;
                    }
                    builder.AppendLine($"    '{item}'");
                }
                builder.AppendLine("  ]");
            }

            if (Optional.IsDefined(HardwareProfile))
            {
                builder.Append("  hardwareProfile:");
                AppendChildObject(builder, HardwareProfile, options, 2);
            }

            if (Optional.IsDefined(StorageProfile))
            {
                builder.Append("  storageProfile:");
                AppendChildObject(builder, StorageProfile, options, 2);
            }

            if (Optional.IsDefined(AdditionalCapabilities))
            {
                builder.Append("  additionalCapabilities:");
                AppendChildObject(builder, AdditionalCapabilities, options, 2);
            }

            if (Optional.IsDefined(OSProfile))
            {
                builder.Append("  osProfile:");
                AppendChildObject(builder, OSProfile, options, 2);
            }

            if (Optional.IsDefined(NetworkProfile))
            {
                builder.Append("  networkProfile:");
                AppendChildObject(builder, NetworkProfile, options, 2);
            }

            if (Optional.IsDefined(SecurityProfile))
            {
                builder.Append("  securityProfile:");
                AppendChildObject(builder, SecurityProfile, options, 2);
            }

            if (Optional.IsDefined(DiagnosticsProfile))
            {
                builder.Append("  diagnosticsProfile:");
                AppendChildObject(builder, DiagnosticsProfile, options, 2);
            }

            if (Optional.IsDefined(AvailabilitySet))
            {
                builder.Append("  availabilitySet:");
                AppendChildObject(builder, AvailabilitySet, options, 2);
            }

            if (Optional.IsDefined(VirtualMachineScaleSet))
            {
                builder.Append("  virtualMachineScaleSet:");
                AppendChildObject(builder, VirtualMachineScaleSet, options, 2);
            }

            if (Optional.IsDefined(ProximityPlacementGroup))
            {
                builder.Append("  proximityPlacementGroup:");
                AppendChildObject(builder, ProximityPlacementGroup, options, 2);
            }

            if (Optional.IsDefined(Priority))
            {
                builder.Append("  priority:");
                builder.AppendLine($" '{Priority.ToString()}'");
            }

            if (Optional.IsDefined(EvictionPolicy))
            {
                builder.Append("  evictionPolicy:");
                builder.AppendLine($" '{EvictionPolicy.ToString()}'");
            }

            if (Optional.IsDefined(BillingProfile))
            {
                builder.Append("  billingProfile:");
                AppendChildObject(builder, BillingProfile, options, 2);
            }

            if (Optional.IsDefined(Host))
            {
                builder.Append("  host:");
                AppendChildObject(builder, Host, options, 2);
            }

            if (Optional.IsDefined(HostGroup))
            {
                builder.Append("  hostGroup:");
                AppendChildObject(builder, HostGroup, options, 2);
            }

            if (Optional.IsDefined(ProvisioningState))
            {
                builder.Append("  provisioningState:");
                builder.AppendLine($" '{ProvisioningState}'");
            }

            if (Optional.IsDefined(InstanceView))
            {
                builder.Append("  instanceView:");
                AppendChildObject(builder, InstanceView, options, 2);
            }

            if (Optional.IsDefined(LicenseType))
            {
                builder.Append("  licenseType:");
                builder.AppendLine($" '{LicenseType}'");
            }

            if (Optional.IsDefined(VmId))
            {
                builder.Append("  vmId:");
                builder.AppendLine($" '{VmId}'");
            }

            if (Optional.IsDefined(ExtensionsTimeBudget))
            {
                builder.Append("  extensionsTimeBudget:");
                builder.AppendLine($" '{ExtensionsTimeBudget}'");
            }

            if (Optional.IsCollectionDefined(Tags))
            {
                builder.Append("  tags:");
                builder.AppendLine(" {");
                foreach (var item in Tags)
                {
                    builder.Append($"    {item.Key}: ");
                    if (item.Value == null)
                    {
                        builder.Append("null");
                        continue;
                    }
                    builder.AppendLine($" '{item.Value}'");
                }
                builder.AppendLine("  }");
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            foreach (var line in lines)
            {
                stringBuilder.AppendLine($"{indent}{line}");
            }
        }
    }
}
