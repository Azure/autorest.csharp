// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.AI.FormRecognizer.Models;

namespace Azure.AI.FormRecognizer
{
    /// <summary> Model factory for AzureAIFormRecognizer read-only models. </summary>
    public static partial class AzureAIFormRecognizerModelFactory
    {
        /// <summary> Initializes new instance of ErrorInformation class. </summary>
        /// <param name="code"> . </param>
        /// <param name="message"> . </param>
        /// <returns> A new <see cref="Models.ErrorInformation"/> instance for mocking. </returns>
        public static ErrorInformation ErrorInformation(string code = default, string message = default)
        {
            return new ErrorInformation(code, message);
        }

        /// <summary> Initializes new instance of Model class. </summary>
        /// <param name="modelInfo"> Basic custom model information. </param>
        /// <param name="keys"> Keys extracted by the custom model. </param>
        /// <param name="trainResult"> Custom model training result. </param>
        /// <returns> A new <see cref="Models.Model"/> instance for mocking. </returns>
        public static Model Model(ModelInfo modelInfo = default, KeysResult keys = default, TrainResult trainResult = default)
        {
            return new Model(modelInfo, keys, trainResult);
        }

        /// <summary> Initializes new instance of ModelInfo class. </summary>
        /// <param name="modelId"> Model identifier. </param>
        /// <param name="status"> Status of the model. </param>
        /// <param name="createdDateTime"> Date and time (UTC) when the model was created. </param>
        /// <param name="lastUpdatedDateTime"> Date and time (UTC) when the status was last updated. </param>
        /// <returns> A new <see cref="Models.ModelInfo"/> instance for mocking. </returns>
        public static ModelInfo ModelInfo(Guid modelId = default, ModelStatus status = default, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default)
        {
            return new ModelInfo(modelId, status, createdDateTime, lastUpdatedDateTime);
        }

        /// <summary> Initializes new instance of KeysResult class. </summary>
        /// <param name="clusters"> Object mapping clusterIds to a list of keys. </param>
        /// <returns> A new <see cref="Models.KeysResult"/> instance for mocking. </returns>
        public static KeysResult KeysResult(IReadOnlyDictionary<string, IList<string>> clusters = default)
        {
            clusters ??= new Dictionary<string, IList<string>>();
            return new KeysResult(clusters);
        }

        /// <summary> Initializes new instance of TrainResult class. </summary>
        /// <param name="trainingDocuments"> List of the documents used to train the model and any errors reported in each document. </param>
        /// <param name="fields"> List of fields used to train the model and the train operation error reported by each. </param>
        /// <param name="averageModelAccuracy"> Average accuracy. </param>
        /// <param name="errors"> Errors returned during the training operation. </param>
        /// <returns> A new <see cref="Models.TrainResult"/> instance for mocking. </returns>
        public static TrainResult TrainResult(IReadOnlyList<TrainingDocumentInfo> trainingDocuments = default, IReadOnlyList<FormFieldsReport> fields = default, float? averageModelAccuracy = default, IReadOnlyList<ErrorInformation> errors = default)
        {
            trainingDocuments ??= new List<TrainingDocumentInfo>();
            fields ??= new List<FormFieldsReport>();
            errors ??= new List<ErrorInformation>();
            return new TrainResult(trainingDocuments, fields, averageModelAccuracy, errors);
        }

        /// <summary> Initializes new instance of TrainingDocumentInfo class. </summary>
        /// <param name="documentName"> Training document name. </param>
        /// <param name="pages"> Total number of pages trained. </param>
        /// <param name="errors"> List of errors. </param>
        /// <param name="status"> Status of the training operation. </param>
        /// <returns> A new <see cref="Models.TrainingDocumentInfo"/> instance for mocking. </returns>
        public static TrainingDocumentInfo TrainingDocumentInfo(string documentName = default, int pages = default, IReadOnlyList<ErrorInformation> errors = default, TrainStatus status = default)
        {
            errors ??= new List<ErrorInformation>();
            return new TrainingDocumentInfo(documentName, pages, errors, status);
        }

        /// <summary> Initializes new instance of FormFieldsReport class. </summary>
        /// <param name="fieldName"> Training field name. </param>
        /// <param name="accuracy"> Estimated extraction accuracy for this field. </param>
        /// <returns> A new <see cref="Models.FormFieldsReport"/> instance for mocking. </returns>
        public static FormFieldsReport FormFieldsReport(string fieldName = default, float accuracy = default)
        {
            return new FormFieldsReport(fieldName, accuracy);
        }

        /// <summary> Initializes new instance of AnalyzeOperationResult class. </summary>
        /// <param name="status"> Operation status. </param>
        /// <param name="createdDateTime"> Date and time (UTC) when the analyze operation was submitted. </param>
        /// <param name="lastUpdatedDateTime"> Date and time (UTC) when the status was last updated. </param>
        /// <param name="analyzeResult"> Results of the analyze operation. </param>
        /// <returns> A new <see cref="Models.AnalyzeOperationResult"/> instance for mocking. </returns>
        public static AnalyzeOperationResult AnalyzeOperationResult(OperationStatus status = default, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, AnalyzeResult analyzeResult = default)
        {
            return new AnalyzeOperationResult(status, createdDateTime, lastUpdatedDateTime, analyzeResult);
        }

        /// <summary> Initializes new instance of AnalyzeResult class. </summary>
        /// <param name="version"> Version of schema used for this result. </param>
        /// <param name="readResults"> Text extracted from the input. </param>
        /// <param name="pageResults"> Page-level information extracted from the input. </param>
        /// <param name="documentResults"> Document-level information extracted from the input. </param>
        /// <param name="errors"> List of errors reported during the analyze operation. </param>
        /// <returns> A new <see cref="Models.AnalyzeResult"/> instance for mocking. </returns>
        public static AnalyzeResult AnalyzeResult(string version = default, IReadOnlyList<ReadResult> readResults = default, IReadOnlyList<PageResult> pageResults = default, IReadOnlyList<DocumentResult> documentResults = default, IReadOnlyList<ErrorInformation> errors = default)
        {
            readResults ??= new List<ReadResult>();
            pageResults ??= new List<PageResult>();
            documentResults ??= new List<DocumentResult>();
            errors ??= new List<ErrorInformation>();
            return new AnalyzeResult(version, readResults, pageResults, documentResults, errors);
        }

        /// <summary> Initializes new instance of ReadResult class. </summary>
        /// <param name="page"> The 1-based page number in the input document. </param>
        /// <param name="angle"> The general orientation of the text in clockwise direction, measured in degrees between (-180, 180]. </param>
        /// <param name="width"> The width of the image/PDF in pixels/inches, respectively. </param>
        /// <param name="height"> The height of the image/PDF in pixels/inches, respectively. </param>
        /// <param name="unit"> The unit used by the width, height and boundingBox properties. For images, the unit is &quot;pixel&quot;. For PDF, the unit is &quot;inch&quot;. </param>
        /// <param name="language"> The detected language on the page overall. </param>
        /// <param name="lines"> When includeTextDetails is set to true, a list of recognized text lines. The maximum number of lines returned is 300 per page. The lines are sorted top to bottom, left to right, although in certain cases proximity is treated with higher priority. As the sorting order depends on the detected text, it may change across images and OCR version updates. Thus, business logic should be built upon the actual line location instead of order. </param>
        /// <returns> A new <see cref="Models.ReadResult"/> instance for mocking. </returns>
        public static ReadResult ReadResult(int page = default, float angle = default, float width = default, float height = default, LengthUnit unit = default, Language? language = default, IReadOnlyList<TextLine> lines = default)
        {
            lines ??= new List<TextLine>();
            return new ReadResult(page, angle, width, height, unit, language, lines);
        }

        /// <summary> Initializes new instance of TextLine class. </summary>
        /// <param name="text"> The text content of the line. </param>
        /// <param name="boundingBox"> Bounding box of an extracted line. </param>
        /// <param name="language"> The detected language of this line, if different from the overall page language. </param>
        /// <param name="words"> List of words in the text line. </param>
        /// <returns> A new <see cref="Models.TextLine"/> instance for mocking. </returns>
        public static TextLine TextLine(string text = default, IReadOnlyList<float> boundingBox = default, Language? language = default, IReadOnlyList<TextWord> words = default)
        {
            boundingBox ??= new List<float>();
            words ??= new List<TextWord>();
            return new TextLine(text, boundingBox, language, words);
        }

        /// <summary> Initializes new instance of TextWord class. </summary>
        /// <param name="text"> The text content of the word. </param>
        /// <param name="boundingBox"> Bounding box of an extracted word. </param>
        /// <param name="confidence"> Confidence value. </param>
        /// <returns> A new <see cref="Models.TextWord"/> instance for mocking. </returns>
        public static TextWord TextWord(string text = default, IReadOnlyList<float> boundingBox = default, float? confidence = default)
        {
            boundingBox ??= new List<float>();
            return new TextWord(text, boundingBox, confidence);
        }

        /// <summary> Initializes new instance of PageResult class. </summary>
        /// <param name="page"> Page number. </param>
        /// <param name="clusterId"> Cluster identifier. </param>
        /// <param name="keyValuePairs"> List of key-value pairs extracted from the page. </param>
        /// <param name="tables"> List of data tables extracted from the page. </param>
        /// <returns> A new <see cref="Models.PageResult"/> instance for mocking. </returns>
        public static PageResult PageResult(int page = default, int? clusterId = default, IReadOnlyList<Models.KeyValuePair> keyValuePairs = default, IReadOnlyList<DataTable> tables = default)
        {
            keyValuePairs ??= new List<Models.KeyValuePair>();
            tables ??= new List<DataTable>();
            return new PageResult(page, clusterId, keyValuePairs, tables);
        }

        /// <summary> Initializes new instance of KeyValuePair class. </summary>
        /// <param name="label"> A user defined label for the key/value pair entry. </param>
        /// <param name="key"> Information about the extracted key in a key-value pair. </param>
        /// <param name="value"> Information about the extracted value in a key-value pair. </param>
        /// <param name="confidence"> Confidence value. </param>
        /// <returns> A new <see cref="Models.KeyValuePair"/> instance for mocking. </returns>
        public static Models.KeyValuePair KeyValuePair(string label = default, KeyValueElement key = default, KeyValueElement value = default, float confidence = default)
        {
            return new Models.KeyValuePair(label, key, value, confidence);
        }

        /// <summary> Initializes new instance of KeyValueElement class. </summary>
        /// <param name="text"> The text content of the key or value. </param>
        /// <param name="boundingBox"> Bounding box of the key or value. </param>
        /// <param name="elements"> When includeTextDetails is set to true, a list of references to the text elements constituting this key or value. </param>
        /// <returns> A new <see cref="Models.KeyValueElement"/> instance for mocking. </returns>
        public static KeyValueElement KeyValueElement(string text = default, IReadOnlyList<float> boundingBox = default, IReadOnlyList<string> elements = default)
        {
            boundingBox ??= new List<float>();
            elements ??= new List<string>();
            return new KeyValueElement(text, boundingBox, elements);
        }

        /// <summary> Initializes new instance of DataTable class. </summary>
        /// <param name="rows"> Number of rows. </param>
        /// <param name="columns"> Number of columns. </param>
        /// <param name="cells"> List of cells contained in the table. </param>
        /// <returns> A new <see cref="Models.DataTable"/> instance for mocking. </returns>
        public static DataTable DataTable(int rows = default, int columns = default, IReadOnlyList<DataTableCell> cells = default)
        {
            cells ??= new List<DataTableCell>();
            return new DataTable(rows, columns, cells);
        }

        /// <summary> Initializes new instance of DataTableCell class. </summary>
        /// <param name="rowIndex"> Row index of the cell. </param>
        /// <param name="columnIndex"> Column index of the cell. </param>
        /// <param name="rowSpan"> Number of rows spanned by this cell. </param>
        /// <param name="columnSpan"> Number of columns spanned by this cell. </param>
        /// <param name="text"> Text content of the cell. </param>
        /// <param name="boundingBox"> Bounding box of the cell. </param>
        /// <param name="confidence"> Confidence value. </param>
        /// <param name="elements"> When includeTextDetails is set to true, a list of references to the text elements constituting this table cell. </param>
        /// <param name="isHeader"> Is the current cell a header cell?. </param>
        /// <param name="isFooter"> Is the current cell a footer cell?. </param>
        /// <returns> A new <see cref="Models.DataTableCell"/> instance for mocking. </returns>
        public static DataTableCell DataTableCell(int rowIndex = default, int columnIndex = default, int? rowSpan = default, int? columnSpan = default, string text = default, IReadOnlyList<float> boundingBox = default, float confidence = default, IReadOnlyList<string> elements = default, bool? isHeader = default, bool? isFooter = default)
        {
            boundingBox ??= new List<float>();
            elements ??= new List<string>();
            return new DataTableCell(rowIndex, columnIndex, rowSpan, columnSpan, text, boundingBox, confidence, elements, isHeader, isFooter);
        }

        /// <summary> Initializes new instance of DocumentResult class. </summary>
        /// <param name="docType"> Document type. </param>
        /// <param name="pageRange"> First and last page number where the document is found. </param>
        /// <param name="fields"> Dictionary of named field values. </param>
        /// <returns> A new <see cref="Models.DocumentResult"/> instance for mocking. </returns>
        public static DocumentResult DocumentResult(string docType = default, IReadOnlyList<int> pageRange = default, IReadOnlyDictionary<string, FieldValue> fields = default)
        {
            pageRange ??= new List<int>();
            fields ??= new Dictionary<string, FieldValue>();
            return new DocumentResult(docType, pageRange, fields);
        }

        /// <summary> Initializes new instance of FieldValue class. </summary>
        /// <param name="type"> Type of field value. </param>
        /// <param name="valueString"> String value. </param>
        /// <param name="valueDate"> Date value. </param>
        /// <param name="valueTime"> Time value. </param>
        /// <param name="valuePhoneNumber"> Phone number value. </param>
        /// <param name="valueNumber"> Floating point value. </param>
        /// <param name="valueInteger"> Integer value. </param>
        /// <param name="valueArray"> Array of field values. </param>
        /// <param name="valueObject"> Dictionary of named field values. </param>
        /// <param name="text"> Text content of the extracted field. </param>
        /// <param name="boundingBox"> Bounding box of the field value, if appropriate. </param>
        /// <param name="confidence"> Confidence score. </param>
        /// <param name="elements"> When includeTextDetails is set to true, a list of references to the text elements constituting this field. </param>
        /// <param name="page"> The 1-based page number in the input document. </param>
        /// <returns> A new <see cref="Models.FieldValue"/> instance for mocking. </returns>
        public static FieldValue FieldValue(FieldValueType type = default, string valueString = default, DateTimeOffset? valueDate = default, TimeSpan? valueTime = default, string valuePhoneNumber = default, float? valueNumber = default, int? valueInteger = default, IReadOnlyList<FieldValue> valueArray = default, IReadOnlyDictionary<string, FieldValue> valueObject = default, string text = default, IReadOnlyList<float> boundingBox = default, float? confidence = default, IReadOnlyList<string> elements = default, int? page = default)
        {
            valueArray ??= new List<FieldValue>();
            valueObject ??= new Dictionary<string, FieldValue>();
            boundingBox ??= new List<float>();
            elements ??= new List<string>();
            return new FieldValue(type, valueString, valueDate, valueTime, valuePhoneNumber, valueNumber, valueInteger, valueArray, valueObject, text, boundingBox, confidence, elements, page);
        }

        /// <summary> Initializes new instance of CopyOperationResult class. </summary>
        /// <param name="status"> Operation status. </param>
        /// <param name="createdDateTime"> Date and time (UTC) when the copy operation was submitted. </param>
        /// <param name="lastUpdatedDateTime"> Date and time (UTC) when the status was last updated. </param>
        /// <param name="copyResult"> Results of the copy operation. </param>
        /// <returns> A new <see cref="Models.CopyOperationResult"/> instance for mocking. </returns>
        public static CopyOperationResult CopyOperationResult(OperationStatus status = default, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, CopyResult copyResult = default)
        {
            return new CopyOperationResult(status, createdDateTime, lastUpdatedDateTime, copyResult);
        }

        /// <summary> Initializes new instance of CopyResult class. </summary>
        /// <param name="modelId"> Identifier of the target model. </param>
        /// <param name="errors"> Errors returned during the copy operation. </param>
        /// <returns> A new <see cref="Models.CopyResult"/> instance for mocking. </returns>
        public static CopyResult CopyResult(Guid modelId = default, IReadOnlyList<ErrorInformation> errors = default)
        {
            errors ??= new List<ErrorInformation>();
            return new CopyResult(modelId, errors);
        }

        /// <summary> Initializes new instance of Models class. </summary>
        /// <param name="summary"> Summary of all trained custom models. </param>
        /// <param name="modelList"> Collection of trained custom models. </param>
        /// <param name="nextLink"> Link to the next page of custom models. </param>
        /// <returns> A new <see cref="Models.Models"/> instance for mocking. </returns>
        public static Models.Models Models(ModelsSummary summary = default, IReadOnlyList<ModelInfo> modelList = default, string nextLink = default)
        {
            modelList ??= new List<ModelInfo>();
            return new Models.Models(summary, modelList, nextLink);
        }

        /// <summary> Initializes new instance of ModelsSummary class. </summary>
        /// <param name="count"> Current count of trained custom models. </param>
        /// <param name="limit"> Max number of models that can be trained for this account. </param>
        /// <param name="lastUpdatedDateTime"> Date and time (UTC) when the summary was last updated. </param>
        /// <returns> A new <see cref="Models.ModelsSummary"/> instance for mocking. </returns>
        public static ModelsSummary ModelsSummary(int count = default, int limit = default, DateTimeOffset lastUpdatedDateTime = default)
        {
            return new ModelsSummary(count, limit, lastUpdatedDateTime);
        }
    }
}
