// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;

namespace Azure.Resources.Sample
{
    /// <summary> A class representing collection of PolicyAssignment and their operations over a Tenant. </summary>
    public partial class PolicyAssignmentContainer : ResourceContainerBase<TenantResourceIdentifier, PolicyAssignment, PolicyAssignmentData>
    {
        /// <summary> Initializes a new instance of the <see cref="PolicyAssignmentContainer"/> class for mocking. </summary>
        protected PolicyAssignmentContainer()
        {
        }

        /// <summary> Initializes a new instance of PolicyAssignmentContainer class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal PolicyAssignmentContainer(OperationsBase parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
        }

        /// <summary> Verify that the input resource Id is a valid container for this type. </summary>
        /// <param name="identifier"> The input resource Id to check. </param>
        protected override void Validate(ResourceIdentifier identifier)
        {
        }

        private readonly ClientDiagnostics _clientDiagnostics;

        /// <summary> Represents the REST operations. </summary>
        private PolicyAssignmentsRestOperations _restClient => new PolicyAssignmentsRestOperations(_clientDiagnostics, Pipeline, BaseUri);

        /// <summary> Typed Resource Identifier for the container. </summary>
        public new TenantResourceIdentifier Id => base.Id as TenantResourceIdentifier;

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => ResourceIdentifier.RootResourceIdentifier.ResourceType;

        // Container level operations.

        /// <summary>  This operation creates or updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group. </summary>
        /// <param name="policyAssignmentName"> The name of the policy assignment. </param>
        /// <param name="parameters"> Parameters for the policy assignment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="policyAssignmentName"/> or <paramref name="parameters"/> is null. </exception>
        public virtual Response<PolicyAssignment> CreateOrUpdate(string policyAssignmentName, PolicyAssignmentData parameters, CancellationToken cancellationToken = default)
        {
            if (policyAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(policyAssignmentName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.CreateOrUpdate");
            scope.Start();
            try
            {
                var operation = StartCreateOrUpdate(policyAssignmentName, parameters, cancellationToken);
                return operation.WaitForCompletion(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>  This operation creates or updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group. </summary>
        /// <param name="policyAssignmentName"> The name of the policy assignment. </param>
        /// <param name="parameters"> Parameters for the policy assignment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="policyAssignmentName"/> or <paramref name="parameters"/> is null. </exception>
        public async virtual Task<Response<PolicyAssignment>> CreateOrUpdateAsync(string policyAssignmentName, PolicyAssignmentData parameters, CancellationToken cancellationToken = default)
        {
            if (policyAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(policyAssignmentName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.CreateOrUpdate");
            scope.Start();
            try
            {
                var operation = await StartCreateOrUpdateAsync(policyAssignmentName, parameters, cancellationToken).ConfigureAwait(false);
                return await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>  This operation creates or updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group. </summary>
        /// <param name="policyAssignmentName"> The name of the policy assignment. </param>
        /// <param name="parameters"> Parameters for the policy assignment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="policyAssignmentName"/> or <paramref name="parameters"/> is null. </exception>
        public virtual PolicyAssignmentsCreateOperation StartCreateOrUpdate(string policyAssignmentName, PolicyAssignmentData parameters, CancellationToken cancellationToken = default)
        {
            if (policyAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(policyAssignmentName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.StartCreateOrUpdate");
            scope.Start();
            try
            {
                var response = _restClient.Create(Id, policyAssignmentName, parameters, cancellationToken);
                return new PolicyAssignmentsCreateOperation(this, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>  This operation creates or updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group. </summary>
        /// <param name="policyAssignmentName"> The name of the policy assignment. </param>
        /// <param name="parameters"> Parameters for the policy assignment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="policyAssignmentName"/> or <paramref name="parameters"/> is null. </exception>
        public async virtual Task<PolicyAssignmentsCreateOperation> StartCreateOrUpdateAsync(string policyAssignmentName, PolicyAssignmentData parameters, CancellationToken cancellationToken = default)
        {
            if (policyAssignmentName == null)
            {
                throw new ArgumentNullException(nameof(policyAssignmentName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.StartCreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _restClient.CreateAsync(Id, policyAssignmentName, parameters, cancellationToken).ConfigureAwait(false);
                return new PolicyAssignmentsCreateOperation(this, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets details for this resource from the service. </summary>
        /// <param name="policyAssignmentName"> The name of the policy assignment to get. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public virtual Response<PolicyAssignment> Get(string policyAssignmentName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.Get");
            scope.Start();
            try
            {
                if (policyAssignmentName == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentName));
                }

                var response = _restClient.Get(Id, policyAssignmentName, cancellationToken: cancellationToken);
                return Response.FromValue(new PolicyAssignment(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets details for this resource from the service. </summary>
        /// <param name="policyAssignmentName"> The name of the policy assignment to get. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async virtual Task<Response<PolicyAssignment>> GetAsync(string policyAssignmentName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.Get");
            scope.Start();
            try
            {
                if (policyAssignmentName == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentName));
                }

                var response = await _restClient.GetAsync(Id, policyAssignmentName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new PolicyAssignment(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="policyAssignmentName"> The name of the policy assignment to get. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public virtual PolicyAssignment TryGet(string policyAssignmentName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.TryGet");
            scope.Start();
            try
            {
                if (policyAssignmentName == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentName));
                }

                return Get(policyAssignmentName, cancellationToken: cancellationToken).Value;
            }
            catch (RequestFailedException e) when (e.Status == 404)
            {
                return null;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="policyAssignmentName"> The name of the policy assignment to get. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async virtual Task<PolicyAssignment> TryGetAsync(string policyAssignmentName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.TryGet");
            scope.Start();
            try
            {
                if (policyAssignmentName == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentName));
                }

                return await GetAsync(policyAssignmentName, cancellationToken: cancellationToken).ConfigureAwait(false);
            }
            catch (RequestFailedException e) when (e.Status == 404)
            {
                return null;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="policyAssignmentName"> The name of the policy assignment to get. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public virtual bool DoesExist(string policyAssignmentName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.DoesExist");
            scope.Start();
            try
            {
                if (policyAssignmentName == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentName));
                }

                return TryGet(policyAssignmentName, cancellationToken: cancellationToken) != null;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="policyAssignmentName"> The name of the policy assignment to get. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async virtual Task<bool> DoesExistAsync(string policyAssignmentName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.DoesExist");
            scope.Start();
            try
            {
                if (policyAssignmentName == null)
                {
                    throw new ArgumentNullException(nameof(policyAssignmentName));
                }

                return await TryGetAsync(policyAssignmentName, cancellationToken: cancellationToken).ConfigureAwait(false) != null;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List resources at the specified scope. </summary>
        /// <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos;, &apos;atExactScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </param>
        /// <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PolicyAssignment" /> that may take multiple service requests to iterate over. </returns>
        public Pageable<PolicyAssignment> List(string filter = null, int? top = null, CancellationToken cancellationToken = default)
        {
            Page<PolicyAssignment> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.List");
                scope.Start();
                try
                {
                    Response<PolicyAssignmentListResult> response;
                    if (Id.GetType() == typeof(TenantResourceIdentifier))
                    {
                        if (Id.ResourceType.Equals("Microsoft.Management/managementGroups"))
                        {
                            response = _restClient.ListForManagementGroup(Id.Name, filter, top, cancellationToken: cancellationToken);
                        }
                        else
                        {
                            throw new ArgumentException($"Invalid container Id: {Id}.");
                        }
                    }
                    else if (Id.GetType() == typeof(SubscriptionResourceIdentifier))
                    {
                        var subscription = Id as SubscriptionResourceIdentifier;
                        response = _restClient.List(subscription.SubscriptionId, filter, top, cancellationToken: cancellationToken);
                    }
                    else if (Id.GetType() == typeof(ResourceGroupResourceIdentifier))
                    {
                        var resourceGroupId = Id as ResourceGroupResourceIdentifier;
                        if (Id.ResourceType.Equals(ResourceGroupOperations.ResourceType))
                        {
                            response = _restClient.ListForResourceGroup(resourceGroupId.SubscriptionId, resourceGroupId.ResourceGroupName, filter, top, cancellationToken: cancellationToken);
                        }
                        else
                        {
                            var resourceProviderNamespace = resourceGroupId.ResourceType.Namespace;
                            var resourceType = resourceGroupId.ResourceType.Types[resourceGroupId.ResourceType.Types.Count - 1];
                            var resourceName = resourceGroupId.Name;
                            var parent = resourceGroupId.Parent;
                            var parentParts = new List<string>();
                            while (!parent.ResourceType.Equals(ResourceGroupOperations.ResourceType))
                            {
                                parentParts.Insert(0, $"{parent.ResourceType.Types[parent.ResourceType.Types.Count - 1]}/{parent.Name}");
                                parent = parent.Parent;
                            }
                            var parentResourcePath = parentParts.Count > 0 ? string.Join("/", parentParts) : "";
                            response = _restClient.ListForResource(resourceGroupId.SubscriptionId, resourceGroupId.ResourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter, top, cancellationToken: cancellationToken);
                        }
                    }
                    else
                    {
                        throw new ArgumentException($"Invalid container Id: {Id}.");
                    }
                    return Page.FromValues(response.Value.Value.Select(value => new PolicyAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PolicyAssignment> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.List");
                scope.Start();
                try
                {
                    Response<PolicyAssignmentListResult> response;
                    if (Id.GetType() == typeof(TenantResourceIdentifier))
                    {
                        if (Id.ResourceType.Equals("Microsoft.Management/managementGroups"))
                        {
                            response = _restClient.ListForManagementGroupNextPage(nextLink, Id.Name, filter, top, cancellationToken: cancellationToken);
                        }
                        else
                        {
                            throw new ArgumentException($"Invalid container Id: {Id}.");
                        }
                    }
                    else if (Id.GetType() == typeof(SubscriptionResourceIdentifier))
                    {
                        var subscription = Id as SubscriptionResourceIdentifier;
                        response = _restClient.ListNextPage(nextLink, subscription.SubscriptionId, filter, top, cancellationToken: cancellationToken);
                    }
                    else if (Id.GetType() == typeof(ResourceGroupResourceIdentifier))
                    {
                        var resourceGroupId = Id as ResourceGroupResourceIdentifier;
                        if (Id.ResourceType.Equals(ResourceGroupOperations.ResourceType))
                        {
                            response = _restClient.ListForResourceGroupNextPage(nextLink, resourceGroupId.SubscriptionId, resourceGroupId.ResourceGroupName, filter, top, cancellationToken: cancellationToken);
                        }
                        else
                        {
                            var resourceProviderNamespace = resourceGroupId.ResourceType.Namespace;
                            var resourceType = resourceGroupId.ResourceType.Types[resourceGroupId.ResourceType.Types.Count - 1];
                            var resourceName = resourceGroupId.Name;
                            var parent = resourceGroupId.Parent;
                            var parentParts = new List<string>();
                            while (!parent.ResourceType.Equals(ResourceGroupOperations.ResourceType))
                            {
                                parentParts.Insert(0, $"{parent.ResourceType.Types[parent.ResourceType.Types.Count - 1]}/{parent.Name}");
                                parent = parent.Parent;
                            }
                            var parentResourcePath = parentParts.Count > 0 ? string.Join("/", parentParts) : "";
                            response = _restClient.ListForResourceNextPage(nextLink, resourceGroupId.SubscriptionId, resourceGroupId.ResourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter, top, cancellationToken: cancellationToken);
                        }
                    }
                    else
                    {
                        throw new ArgumentException($"Invalid container Id: {Id}.");
                    }
                    return Page.FromValues(response.Value.Value.Select(value => new PolicyAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List resources at the specified scope. </summary>
        /// <param name="filter"> The filter to apply on the operation. Valid values for $filter are: &apos;atScope()&apos;, &apos;atExactScope()&apos; or &apos;policyDefinitionId eq &apos;{value}&apos;&apos;. If $filter is not provided, no filtering is performed. If $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is everything in the unfiltered list except those applied to sub scopes contained within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the given scope. If $filter=policyDefinitionId eq &apos;{value}&apos; is provided, the returned list includes all policy assignments of the policy definition whose id is {value}. </param>
        /// <param name="top"> Maximum number of records to return. When the $top filter is not provided, it will return 500 records. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PolicyAssignment" /> that may take multiple service requests to iterate over. </returns>
        public AsyncPageable<PolicyAssignment> ListAsync(string filter = null, int? top = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<PolicyAssignment>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.ListAsync");
                scope.Start();
                try
                {
                    Response<PolicyAssignmentListResult> response;
                    if (Id.GetType() == typeof(TenantResourceIdentifier))
                    {
                        if (Id.ResourceType.Equals("Microsoft.Management/managementGroups"))
                        {
                            response = await _restClient.ListForManagementGroupAsync(Id.Name, filter, top, cancellationToken: cancellationToken).ConfigureAwait(false);
                        }
                        else
                        {
                            throw new ArgumentException($"Invalid container Id: {Id}.");
                        }
                    }
                    else if (Id.GetType() == typeof(SubscriptionResourceIdentifier))
                    {
                        var subscription = Id as SubscriptionResourceIdentifier;
                        response = await _restClient.ListAsync(subscription.SubscriptionId, filter, top, cancellationToken: cancellationToken).ConfigureAwait(false);
                    }
                    else if (Id.GetType() == typeof(ResourceGroupResourceIdentifier))
                    {
                        var resourceGroupId = Id as ResourceGroupResourceIdentifier;
                        if (Id.ResourceType.Equals(ResourceGroupOperations.ResourceType))
                        {
                            response = await _restClient.ListForResourceGroupAsync(resourceGroupId.SubscriptionId, resourceGroupId.ResourceGroupName, filter, top, cancellationToken: cancellationToken).ConfigureAwait(false);
                        }
                        else
                        {
                            var resourceProviderNamespace = resourceGroupId.ResourceType.Namespace;
                            var resourceType = resourceGroupId.ResourceType.Types[resourceGroupId.ResourceType.Types.Count - 1];
                            var resourceName = resourceGroupId.Name;
                            var parent = resourceGroupId.Parent;
                            var parentParts = new List<string>();
                            while (!parent.ResourceType.Equals(ResourceGroupOperations.ResourceType))
                            {
                                parentParts.Insert(0, $"{parent.ResourceType.Types[parent.ResourceType.Types.Count - 1]}/{parent.Name}");
                                parent = parent.Parent;
                            }
                            var parentResourcePath = parentParts.Count > 0 ? string.Join("/", parentParts) : "";
                            response = await _restClient.ListForResourceAsync(resourceGroupId.SubscriptionId, resourceGroupId.ResourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter, top, cancellationToken: cancellationToken).ConfigureAwait(false);
                        }
                    }
                    else
                    {
                        throw new ArgumentException($"Invalid container Id: {Id}.");
                    }
                    return Page.FromValues(response.Value.Value.Select(value => new PolicyAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PolicyAssignment>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PolicyAssignmentContainer.ListAsync");
                scope.Start();
                try
                {
                    Response<PolicyAssignmentListResult> response;
                    if (Id.GetType() == typeof(TenantResourceIdentifier))
                    {
                        if (Id.ResourceType.Equals("Microsoft.Management/managementGroups"))
                        {
                            response = await _restClient.ListForManagementGroupNextPageAsync(nextLink, Id.Name, filter, top, cancellationToken: cancellationToken).ConfigureAwait(false);
                        }
                        else
                        {
                            throw new ArgumentException($"Invalid container Id: {Id}.");
                        }
                    }
                    else if (Id.GetType() == typeof(SubscriptionResourceIdentifier))
                    {
                        var subscription = Id as SubscriptionResourceIdentifier;
                        response = await _restClient.ListNextPageAsync(nextLink, subscription.SubscriptionId, filter, top, cancellationToken: cancellationToken).ConfigureAwait(false);
                    }
                    else if (Id.GetType() == typeof(ResourceGroupResourceIdentifier))
                    {
                        var resourceGroupId = Id as ResourceGroupResourceIdentifier;
                        if (Id.ResourceType.Equals(ResourceGroupOperations.ResourceType))
                        {
                            response = await _restClient.ListForResourceGroupNextPageAsync(nextLink, resourceGroupId.SubscriptionId, resourceGroupId.ResourceGroupName, filter, top, cancellationToken: cancellationToken).ConfigureAwait(false);
                        }
                        else
                        {
                            var resourceProviderNamespace = resourceGroupId.ResourceType.Namespace;
                            var resourceType = resourceGroupId.ResourceType.Types[resourceGroupId.ResourceType.Types.Count - 1];
                            var resourceName = resourceGroupId.Name;
                            var parent = resourceGroupId.Parent;
                            var parentParts = new List<string>();
                            while (!parent.ResourceType.Equals(ResourceGroupOperations.ResourceType))
                            {
                                parentParts.Insert(0, $"{parent.ResourceType.Types[parent.ResourceType.Types.Count - 1]}/{parent.Name}");
                                parent = parent.Parent;
                            }
                            var parentResourcePath = parentParts.Count > 0 ? string.Join("/", parentParts) : "";
                            response = await _restClient.ListForResourceNextPageAsync(nextLink, resourceGroupId.SubscriptionId, resourceGroupId.ResourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter, top, cancellationToken: cancellationToken).ConfigureAwait(false);
                        }
                    }
                    else
                    {
                        throw new ArgumentException($"Invalid container Id: {Id}.");
                    }
                    return Page.FromValues(response.Value.Value.Select(value => new PolicyAssignment(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        // Builders.
        // public ArmBuilder<TenantResourceIdentifier, PolicyAssignment, PolicyAssignmentData> Construct() { }
    }
}
