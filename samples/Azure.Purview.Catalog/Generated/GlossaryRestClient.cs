// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

#pragma warning disable AZC0007

namespace Azure.Purview.Catalog
{
    /// <summary> The GlossaryRest service client. </summary>
    public partial class GlossaryRestClient
    {
        protected readonly HttpPipeline Pipeline;
        private const string AuthorizationHeader = "api-key";
        private Uri endpoint;
        private string apiVersion;

        /// <summary> Initializes a new instance of GlossaryRestClient for mocking. </summary>
        protected GlossaryRestClient()
        {
        }

        /// <summary> Initializes a new instance of GlossaryRestClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        public GlossaryRestClient(AzureKeyCredential credential, Uri endpoint = null, string apiVersion = "2020-12-01-preview") : this(credential, new ProtocolClientOptions(), endpoint, apiVersion)
        {
        }

        /// <summary> Initializes a new instance of GlossaryRestClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> Options to control the underlying operations. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal GlossaryRestClient(AzureKeyCredential credential, ProtocolClientOptions options = null, Uri endpoint = null, string apiVersion = "2020-12-01-preview")
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            options ??= new ProtocolClientOptions();
            endpoint ??= new Uri("https://catalog.purview.azure.com/api");

            Pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, AuthorizationHeader));
            this.endpoint = endpoint;
            this.apiVersion = apiVersion;
        }

        /// <summary> Get all glossaries registered with Atlas. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetGlossariesAsync(RequestContent requestBody, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetGlossariesRequest(requestBody, limit, offset, sort);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get all glossaries registered with Atlas. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetGlossaries(RequestContent requestBody, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetGlossariesRequest(requestBody, limit, offset, sort);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetGlossaries"/> and <see cref="GetGlossariesAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        protected Request CreateGetGlossariesRequest(RequestContent requestBody, int? limit = null, int? offset = null, string sort = null)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Create a glossary. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CreateGlossaryAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateGlossaryRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Create a glossary. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CreateGlossary(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateGlossaryRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="CreateGlossary"/> and <see cref="CreateGlossaryAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        protected Request CreateCreateGlossaryRequest(RequestContent requestBody)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Create glossary category in bulk. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CreateGlossaryCategoriesAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateGlossaryCategoriesRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Create glossary category in bulk. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CreateGlossaryCategories(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateGlossaryCategoriesRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="CreateGlossaryCategories"/> and <see cref="CreateGlossaryCategoriesAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        protected Request CreateCreateGlossaryCategoriesRequest(RequestContent requestBody)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/categories", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Create a glossary category. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CreateGlossaryCategoryAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateGlossaryCategoryRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Create a glossary category. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CreateGlossaryCategory(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateGlossaryCategoryRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="CreateGlossaryCategory"/> and <see cref="CreateGlossaryCategoryAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        protected Request CreateCreateGlossaryCategoryRequest(RequestContent requestBody)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/category", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Get specific glossary category by its GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetGlossaryCategoryAsync(RequestContent requestBody, string categoryGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetGlossaryCategoryRequest(requestBody, categoryGuid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get specific glossary category by its GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetGlossaryCategory(RequestContent requestBody, string categoryGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetGlossaryCategoryRequest(requestBody, categoryGuid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetGlossaryCategory"/> and <see cref="GetGlossaryCategoryAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        protected Request CreateGetGlossaryCategoryRequest(RequestContent requestBody, string categoryGuid)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Update the given glossary category by its GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateGlossaryCategoryAsync(RequestContent requestBody, string categoryGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateUpdateGlossaryCategoryRequest(requestBody, categoryGuid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Update the given glossary category by its GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdateGlossaryCategory(RequestContent requestBody, string categoryGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateUpdateGlossaryCategoryRequest(requestBody, categoryGuid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="UpdateGlossaryCategory"/> and <see cref="UpdateGlossaryCategoryAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        protected Request CreateUpdateGlossaryCategoryRequest(RequestContent requestBody, string categoryGuid)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Delete a glossary category. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteGlossaryCategoryAsync(RequestContent requestBody, string categoryGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteGlossaryCategoryRequest(requestBody, categoryGuid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Delete a glossary category. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteGlossaryCategory(RequestContent requestBody, string categoryGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteGlossaryCategoryRequest(requestBody, categoryGuid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="DeleteGlossaryCategory"/> and <see cref="DeleteGlossaryCategoryAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        protected Request CreateDeleteGlossaryCategoryRequest(RequestContent requestBody, string categoryGuid)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            request.Uri = uri;
            request.Content = requestBody;
            return request;
        }
        /// <summary> Update the glossary category partially. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PartialUpdateGlossaryCategoryAsync(RequestContent requestBody, string categoryGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreatePartialUpdateGlossaryCategoryRequest(requestBody, categoryGuid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Update the glossary category partially. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PartialUpdateGlossaryCategory(RequestContent requestBody, string categoryGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreatePartialUpdateGlossaryCategoryRequest(requestBody, categoryGuid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="PartialUpdateGlossaryCategory"/> and <see cref="PartialUpdateGlossaryCategoryAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        protected Request CreatePartialUpdateGlossaryCategoryRequest(RequestContent requestBody, string categoryGuid)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            uri.AppendPath("/partial", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Get all related categories (parent and children). Limit, offset, and sort parameters are currently not being enabled and won&apos;t work even they are passed. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetRelatedCategoriesAsync(RequestContent requestBody, string categoryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetRelatedCategoriesRequest(requestBody, categoryGuid, limit, offset, sort);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get all related categories (parent and children). Limit, offset, and sort parameters are currently not being enabled and won&apos;t work even they are passed. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetRelatedCategories(RequestContent requestBody, string categoryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetRelatedCategoriesRequest(requestBody, categoryGuid, limit, offset, sort);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetRelatedCategories"/> and <see cref="GetRelatedCategoriesAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        protected Request CreateGetRelatedCategoriesRequest(RequestContent requestBody, string categoryGuid, int? limit = null, int? offset = null, string sort = null)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            uri.AppendPath("/related", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Get all terms associated with the specific category. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetCategoryTermsAsync(RequestContent requestBody, string categoryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetCategoryTermsRequest(requestBody, categoryGuid, limit, offset, sort);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get all terms associated with the specific category. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetCategoryTerms(RequestContent requestBody, string categoryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetCategoryTermsRequest(requestBody, categoryGuid, limit, offset, sort);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetCategoryTerms"/> and <see cref="GetCategoryTermsAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="categoryGuid"> The globally unique identifier of the category. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        protected Request CreateGetCategoryTermsRequest(RequestContent requestBody, string categoryGuid, int? limit = null, int? offset = null, string sort = null)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/category/", false);
            uri.AppendPath(categoryGuid, true);
            uri.AppendPath("/terms", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Create a glossary term. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CreateGlossaryTermAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateGlossaryTermRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Create a glossary term. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CreateGlossaryTerm(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateGlossaryTermRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="CreateGlossaryTerm"/> and <see cref="CreateGlossaryTermAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        protected Request CreateCreateGlossaryTermRequest(RequestContent requestBody)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/term", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Get a specific glossary term by its GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetGlossaryTermAsync(RequestContent requestBody, string termGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetGlossaryTermRequest(requestBody, termGuid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a specific glossary term by its GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetGlossaryTerm(RequestContent requestBody, string termGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetGlossaryTermRequest(requestBody, termGuid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetGlossaryTerm"/> and <see cref="GetGlossaryTermAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        protected Request CreateGetGlossaryTermRequest(RequestContent requestBody, string termGuid)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/term/", false);
            uri.AppendPath(termGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Update the given glossary term by its GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateGlossaryTermAsync(RequestContent requestBody, string termGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateUpdateGlossaryTermRequest(requestBody, termGuid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Update the given glossary term by its GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdateGlossaryTerm(RequestContent requestBody, string termGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateUpdateGlossaryTermRequest(requestBody, termGuid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="UpdateGlossaryTerm"/> and <see cref="UpdateGlossaryTermAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        protected Request CreateUpdateGlossaryTermRequest(RequestContent requestBody, string termGuid)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/term/", false);
            uri.AppendPath(termGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Delete a glossary term. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteGlossaryTermAsync(RequestContent requestBody, string termGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteGlossaryTermRequest(requestBody, termGuid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Delete a glossary term. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteGlossaryTerm(RequestContent requestBody, string termGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteGlossaryTermRequest(requestBody, termGuid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="DeleteGlossaryTerm"/> and <see cref="DeleteGlossaryTermAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        protected Request CreateDeleteGlossaryTermRequest(RequestContent requestBody, string termGuid)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/term/", false);
            uri.AppendPath(termGuid, true);
            request.Uri = uri;
            request.Content = requestBody;
            return request;
        }
        /// <summary> Update the glossary term partially. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PartialUpdateGlossaryTermAsync(RequestContent requestBody, string termGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreatePartialUpdateGlossaryTermRequest(requestBody, termGuid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Update the glossary term partially. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PartialUpdateGlossaryTerm(RequestContent requestBody, string termGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreatePartialUpdateGlossaryTermRequest(requestBody, termGuid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="PartialUpdateGlossaryTerm"/> and <see cref="PartialUpdateGlossaryTermAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        protected Request CreatePartialUpdateGlossaryTermRequest(RequestContent requestBody, string termGuid)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/term/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/partial", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Create glossary terms in bulk. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CreateGlossaryTermsAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateGlossaryTermsRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Create glossary terms in bulk. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CreateGlossaryTerms(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateGlossaryTermsRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="CreateGlossaryTerms"/> and <see cref="CreateGlossaryTermsAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        protected Request CreateCreateGlossaryTermsRequest(RequestContent requestBody)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/terms", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Get all related objects assigned with the specified term. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetEntitiesAssignedWithTermAsync(RequestContent requestBody, string termGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetEntitiesAssignedWithTermRequest(requestBody, termGuid, limit, offset, sort);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get all related objects assigned with the specified term. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetEntitiesAssignedWithTerm(RequestContent requestBody, string termGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetEntitiesAssignedWithTermRequest(requestBody, termGuid, limit, offset, sort);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetEntitiesAssignedWithTerm"/> and <see cref="GetEntitiesAssignedWithTermAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        protected Request CreateGetEntitiesAssignedWithTermRequest(RequestContent requestBody, string termGuid, int? limit = null, int? offset = null, string sort = null)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/terms/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/assignedEntities", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Assign the given term to the provided list of related objects. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AssignTermToEntitiesAsync(RequestContent requestBody, string termGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateAssignTermToEntitiesRequest(requestBody, termGuid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Assign the given term to the provided list of related objects. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response AssignTermToEntities(RequestContent requestBody, string termGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateAssignTermToEntitiesRequest(requestBody, termGuid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="AssignTermToEntities"/> and <see cref="AssignTermToEntitiesAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        protected Request CreateAssignTermToEntitiesRequest(RequestContent requestBody, string termGuid)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/terms/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/assignedEntities", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Delete the term assignment for the given list of related objects. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> RemoveTermAssignmentFromEntitiesAsync(RequestContent requestBody, string termGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateRemoveTermAssignmentFromEntitiesRequest(requestBody, termGuid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Delete the term assignment for the given list of related objects. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response RemoveTermAssignmentFromEntities(RequestContent requestBody, string termGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateRemoveTermAssignmentFromEntitiesRequest(requestBody, termGuid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="RemoveTermAssignmentFromEntities"/> and <see cref="RemoveTermAssignmentFromEntitiesAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        protected Request CreateRemoveTermAssignmentFromEntitiesRequest(RequestContent requestBody, string termGuid)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/terms/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/assignedEntities", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Delete the term assignment for the given list of related objects. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteTermAssignmentFromEntitiesAsync(RequestContent requestBody, string termGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteTermAssignmentFromEntitiesRequest(requestBody, termGuid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Delete the term assignment for the given list of related objects. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteTermAssignmentFromEntities(RequestContent requestBody, string termGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteTermAssignmentFromEntitiesRequest(requestBody, termGuid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="DeleteTermAssignmentFromEntities"/> and <see cref="DeleteTermAssignmentFromEntitiesAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        protected Request CreateDeleteTermAssignmentFromEntitiesRequest(RequestContent requestBody, string termGuid)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/terms/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/assignedEntities", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Get all related terms for a specific term by its GUID. Limit, offset, and sort parameters are currently not being enabled and won&apos;t work even they are passed. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetRelatedTermsAsync(RequestContent requestBody, string termGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetRelatedTermsRequest(requestBody, termGuid, limit, offset, sort);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get all related terms for a specific term by its GUID. Limit, offset, and sort parameters are currently not being enabled and won&apos;t work even they are passed. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetRelatedTerms(RequestContent requestBody, string termGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetRelatedTermsRequest(requestBody, termGuid, limit, offset, sort);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetRelatedTerms"/> and <see cref="GetRelatedTermsAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="termGuid"> The globally unique identifier for glossary term. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        protected Request CreateGetRelatedTermsRequest(RequestContent requestBody, string termGuid, int? limit = null, int? offset = null, string sort = null)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/terms/", false);
            uri.AppendPath(termGuid, true);
            uri.AppendPath("/related", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Get a specific Glossary by its GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetGlossaryAsync(RequestContent requestBody, string glossaryGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetGlossaryRequest(requestBody, glossaryGuid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a specific Glossary by its GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetGlossary(RequestContent requestBody, string glossaryGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetGlossaryRequest(requestBody, glossaryGuid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetGlossary"/> and <see cref="GetGlossaryAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        protected Request CreateGetGlossaryRequest(RequestContent requestBody, string glossaryGuid)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Update the given glossary. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateGlossaryAsync(RequestContent requestBody, string glossaryGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateUpdateGlossaryRequest(requestBody, glossaryGuid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Update the given glossary. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdateGlossary(RequestContent requestBody, string glossaryGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateUpdateGlossaryRequest(requestBody, glossaryGuid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="UpdateGlossary"/> and <see cref="UpdateGlossaryAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        protected Request CreateUpdateGlossaryRequest(RequestContent requestBody, string glossaryGuid)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Delete a glossary. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteGlossaryAsync(RequestContent requestBody, string glossaryGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteGlossaryRequest(requestBody, glossaryGuid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Delete a glossary. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteGlossary(RequestContent requestBody, string glossaryGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteGlossaryRequest(requestBody, glossaryGuid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="DeleteGlossary"/> and <see cref="DeleteGlossaryAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        protected Request CreateDeleteGlossaryRequest(RequestContent requestBody, string glossaryGuid)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            request.Uri = uri;
            request.Content = requestBody;
            return request;
        }
        /// <summary> Get the categories belonging to a specific glossary. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetGlossaryCategoriesAsync(RequestContent requestBody, string glossaryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetGlossaryCategoriesRequest(requestBody, glossaryGuid, limit, offset, sort);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get the categories belonging to a specific glossary. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetGlossaryCategories(RequestContent requestBody, string glossaryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetGlossaryCategoriesRequest(requestBody, glossaryGuid, limit, offset, sort);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetGlossaryCategories"/> and <see cref="GetGlossaryCategoriesAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        protected Request CreateGetGlossaryCategoriesRequest(RequestContent requestBody, string glossaryGuid, int? limit = null, int? offset = null, string sort = null)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/categories", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Get the category headers belonging to a specific glossary. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetGlossaryCategoriesHeadersAsync(RequestContent requestBody, string glossaryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetGlossaryCategoriesHeadersRequest(requestBody, glossaryGuid, limit, offset, sort);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get the category headers belonging to a specific glossary. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetGlossaryCategoriesHeaders(RequestContent requestBody, string glossaryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetGlossaryCategoriesHeadersRequest(requestBody, glossaryGuid, limit, offset, sort);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetGlossaryCategoriesHeaders"/> and <see cref="GetGlossaryCategoriesHeadersAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        protected Request CreateGetGlossaryCategoriesHeadersRequest(RequestContent requestBody, string glossaryGuid, int? limit = null, int? offset = null, string sort = null)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/categories/headers", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Get a specific glossary with detailed information. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetDetailedGlossaryAsync(RequestContent requestBody, string glossaryGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetDetailedGlossaryRequest(requestBody, glossaryGuid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a specific glossary with detailed information. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetDetailedGlossary(RequestContent requestBody, string glossaryGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetDetailedGlossaryRequest(requestBody, glossaryGuid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetDetailedGlossary"/> and <see cref="GetDetailedGlossaryAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        protected Request CreateGetDetailedGlossaryRequest(RequestContent requestBody, string glossaryGuid)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/detailed", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Update the glossary partially. Some properties such as qualifiedName are not allowed to be updated. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PartialUpdateGlossaryAsync(RequestContent requestBody, string glossaryGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreatePartialUpdateGlossaryRequest(requestBody, glossaryGuid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Update the glossary partially. Some properties such as qualifiedName are not allowed to be updated. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PartialUpdateGlossary(RequestContent requestBody, string glossaryGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreatePartialUpdateGlossaryRequest(requestBody, glossaryGuid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="PartialUpdateGlossary"/> and <see cref="PartialUpdateGlossaryAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        protected Request CreatePartialUpdateGlossaryRequest(RequestContent requestBody, string glossaryGuid)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/partial", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Get terms belonging to a specific glossary. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetGlossaryTermsAsync(RequestContent requestBody, string glossaryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetGlossaryTermsRequest(requestBody, glossaryGuid, limit, offset, sort);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get terms belonging to a specific glossary. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetGlossaryTerms(RequestContent requestBody, string glossaryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetGlossaryTermsRequest(requestBody, glossaryGuid, limit, offset, sort);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetGlossaryTerms"/> and <see cref="GetGlossaryTermsAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        protected Request CreateGetGlossaryTermsRequest(RequestContent requestBody, string glossaryGuid, int? limit = null, int? offset = null, string sort = null)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/terms", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Get term headers belonging to a specific glossary. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetGlossaryTermHeadersAsync(RequestContent requestBody, string glossaryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetGlossaryTermHeadersRequest(requestBody, glossaryGuid, limit, offset, sort);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get term headers belonging to a specific glossary. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetGlossaryTermHeaders(RequestContent requestBody, string glossaryGuid, int? limit = null, int? offset = null, string sort = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetGlossaryTermHeadersRequest(requestBody, glossaryGuid, limit, offset, sort);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetGlossaryTermHeaders"/> and <see cref="GetGlossaryTermHeadersAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="sort"> The sort order, ASC (default) or DESC. </param>
        protected Request CreateGetGlossaryTermHeadersRequest(RequestContent requestBody, string glossaryGuid, int? limit = null, int? offset = null, string sort = null)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/terms/headers", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Import Glossary Terms from local csv file. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> ImportGlossaryTermsViaCSVAsync(RequestContent requestBody, string glossaryGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateImportGlossaryTermsViaCSVRequest(requestBody, glossaryGuid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Import Glossary Terms from local csv file. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response ImportGlossaryTermsViaCSV(RequestContent requestBody, string glossaryGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateImportGlossaryTermsViaCSVRequest(requestBody, glossaryGuid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="ImportGlossaryTermsViaCSV"/> and <see cref="ImportGlossaryTermsViaCSVAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        protected Request CreateImportGlossaryTermsViaCSVRequest(RequestContent requestBody, string glossaryGuid)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/terms/import", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Import Glossary Terms from local csv file by glossaryName. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryName"> The name of the glossary. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> ImportGlossaryTermsViaCSVByGlossaryNameAsync(RequestContent requestBody, string glossaryName, bool includeTermHierarchy, CancellationToken cancellationToken = default)
        {
            Request req = CreateImportGlossaryTermsViaCSVByGlossaryNameRequest(requestBody, glossaryName, includeTermHierarchy);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Import Glossary Terms from local csv file by glossaryName. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryName"> The name of the glossary. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response ImportGlossaryTermsViaCSVByGlossaryName(RequestContent requestBody, string glossaryName, bool includeTermHierarchy, CancellationToken cancellationToken = default)
        {
            Request req = CreateImportGlossaryTermsViaCSVByGlossaryNameRequest(requestBody, glossaryName, includeTermHierarchy);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="ImportGlossaryTermsViaCSVByGlossaryName"/> and <see cref="ImportGlossaryTermsViaCSVByGlossaryNameAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryName"> The name of the glossary. </param>
        /// <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        protected Request CreateImportGlossaryTermsViaCSVByGlossaryNameRequest(RequestContent requestBody, string glossaryName, bool includeTermHierarchy)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/glossary/name/", false);
            uri.AppendPath(glossaryName, true);
            uri.AppendPath("/terms/import", false);
            uri.AppendQuery("includeTermHierarchy", includeTermHierarchy, true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Get the status of import csv operation. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="operationGuid"> The globally unique identifier for async operation/job`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetImportCSVOperationStatusAsync(RequestContent requestBody, string operationGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetImportCSVOperationStatusRequest(requestBody, operationGuid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get the status of import csv operation. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="operationGuid"> The globally unique identifier for async operation/job`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetImportCSVOperationStatus(RequestContent requestBody, string operationGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetImportCSVOperationStatusRequest(requestBody, operationGuid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetImportCSVOperationStatus"/> and <see cref="GetImportCSVOperationStatusAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="operationGuid"> The globally unique identifier for async operation/job`. </param>
        protected Request CreateGetImportCSVOperationStatusRequest(RequestContent requestBody, string operationGuid)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/glossary/terms/import/", false);
            uri.AppendPath(operationGuid, true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Export Glossary Terms as csv file. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> ExportGlossaryTermsAsCSVAsync(RequestContent requestBody, string glossaryGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateExportGlossaryTermsAsCSVRequest(requestBody, glossaryGuid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Export Glossary Terms as csv file. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response ExportGlossaryTermsAsCSV(RequestContent requestBody, string glossaryGuid, CancellationToken cancellationToken = default)
        {
            Request req = CreateExportGlossaryTermsAsCSVRequest(requestBody, glossaryGuid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="ExportGlossaryTermsAsCSV"/> and <see cref="ExportGlossaryTermsAsCSVAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        protected Request CreateExportGlossaryTermsAsCSVRequest(RequestContent requestBody, string glossaryGuid)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/glossary/", false);
            uri.AppendPath(glossaryGuid, true);
            uri.AppendPath("/terms/export", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/octet-stream");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Get terms by glossary name. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryName"> The name of the glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetTermsByGlossaryNameAsync(RequestContent requestBody, string glossaryName, int? limit = null, int? offset = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetTermsByGlossaryNameRequest(requestBody, glossaryName, limit, offset);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get terms by glossary name. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryName"> The name of the glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetTermsByGlossaryName(RequestContent requestBody, string glossaryName, int? limit = null, int? offset = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetTermsByGlossaryNameRequest(requestBody, glossaryName, limit, offset);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetTermsByGlossaryName"/> and <see cref="GetTermsByGlossaryNameAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="glossaryName"> The name of the glossary. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        protected Request CreateGetTermsByGlossaryNameRequest(RequestContent requestBody, string glossaryName, int? limit = null, int? offset = null)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/glossary/name/", false);
            uri.AppendPath(glossaryName, true);
            uri.AppendPath("/terms", false);
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
    }
}
