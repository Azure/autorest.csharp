// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

#pragma warning disable AZC0007

namespace Azure.Purview.Catalog
{
    /// <summary> The EntityRest service client. </summary>
    public partial class EntityRestClient
    {
        protected readonly HttpPipeline Pipeline;
        private const string AuthorizationHeader = "api-key";
        private Uri endpoint;

        /// <summary> Initializes a new instance of EntityRestClient for mocking. </summary>
        protected EntityRestClient()
        {
        }

        /// <summary> Initializes a new instance of EntityRestClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        public EntityRestClient(AzureKeyCredential credential, Uri endpoint = null) : this(credential, new ProtocolClientOptions(), endpoint)
        {
        }

        /// <summary> Initializes a new instance of EntityRestClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> Options to control the underlying operations. </param>
        /// <param name="endpoint"> server parameter. </param>
        internal EntityRestClient(AzureKeyCredential credential, ProtocolClientOptions options = null, Uri endpoint = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            options ??= new ProtocolClientOptions();
            endpoint ??= new Uri("https://catalog.purview.azure.com/api");

            Pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, AuthorizationHeader));
            this.endpoint = endpoint;
        }

        /// <summary>
        /// Create or update an entity in Atlas.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CreateOrUpdateAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateOrUpdateRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create or update an entity in Atlas.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CreateOrUpdate(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateOrUpdateRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="CreateOrUpdate"/> and <see cref="CreateOrUpdateAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        protected Request CreateCreateOrUpdateRequest(RequestContent requestBody)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/entity", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> List entities in bulk identified by its GUIDs. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> An array of GUIDs of entities to create. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="excludeRelationshipTypes"> An array of the relationship types need to be excluded from the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetByGuidsAsync(RequestContent requestBody, IEnumerable<string> guid, bool? minExtInfo = null, bool? ignoreRelationships = null, IEnumerable<string> excludeRelationshipTypes = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetByGuidsRequest(requestBody, guid, minExtInfo, ignoreRelationships, excludeRelationshipTypes);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> List entities in bulk identified by its GUIDs. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> An array of GUIDs of entities to create. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="excludeRelationshipTypes"> An array of the relationship types need to be excluded from the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetByGuids(RequestContent requestBody, IEnumerable<string> guid, bool? minExtInfo = null, bool? ignoreRelationships = null, IEnumerable<string> excludeRelationshipTypes = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetByGuidsRequest(requestBody, guid, minExtInfo, ignoreRelationships, excludeRelationshipTypes);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetByGuids"/> and <see cref="GetByGuidsAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> An array of GUIDs of entities to create. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="excludeRelationshipTypes"> An array of the relationship types need to be excluded from the response. </param>
        protected Request CreateGetByGuidsRequest(RequestContent requestBody, IEnumerable<string> guid, bool? minExtInfo = null, bool? ignoreRelationships = null, IEnumerable<string> excludeRelationshipTypes = null)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/entity/bulk", false);
            uri.AppendQueryDelimited("guid", guid, ",", true);
            if (minExtInfo != null)
            {
                uri.AppendQuery("minExtInfo", minExtInfo.Value, true);
            }
            if (ignoreRelationships != null)
            {
                uri.AppendQuery("ignoreRelationships", ignoreRelationships.Value, true);
            }
            if (excludeRelationshipTypes != null)
            {
                uri.AppendQueryDelimited("excludeRelationshipTypes", excludeRelationshipTypes, ",", true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary>
        /// Create or update entities in Atlas in bulk.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CreateOrUpdateBulkAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateOrUpdateBulkRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create or update entities in Atlas in bulk.
        /// Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
        /// Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
        /// </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CreateOrUpdateBulk(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateOrUpdateBulkRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="CreateOrUpdateBulk"/> and <see cref="CreateOrUpdateBulkAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        protected Request CreateCreateOrUpdateBulkRequest(RequestContent requestBody)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/entity/bulk", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Delete a list of entities in bulk identified by their GUIDs or unique attributes. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> An array of GUIDs of entities to delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> BulkDeleteAsync(RequestContent requestBody, IEnumerable<string> guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateBulkDeleteRequest(requestBody, guid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Delete a list of entities in bulk identified by their GUIDs or unique attributes. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> An array of GUIDs of entities to delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response BulkDelete(RequestContent requestBody, IEnumerable<string> guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateBulkDeleteRequest(requestBody, guid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="BulkDelete"/> and <see cref="BulkDeleteAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> An array of GUIDs of entities to delete. </param>
        protected Request CreateBulkDeleteRequest(RequestContent requestBody, IEnumerable<string> guid)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/entity/bulk", false);
            uri.AppendQueryDelimited("guid", guid, ",", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Associate a classification to multiple entities in bulk. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AddClassificationAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateAddClassificationRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Associate a classification to multiple entities in bulk. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response AddClassification(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateAddClassificationRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="AddClassification"/> and <see cref="AddClassificationAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        protected Request CreateAddClassificationRequest(RequestContent requestBody)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/entity/bulk/classification", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Get complete definition of an entity given its GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetByIdAsync(RequestContent requestBody, string guid, bool? minExtInfo = null, bool? ignoreRelationships = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetByIdRequest(requestBody, guid, minExtInfo, ignoreRelationships);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get complete definition of an entity given its GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetById(RequestContent requestBody, string guid, bool? minExtInfo = null, bool? ignoreRelationships = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetByIdRequest(requestBody, guid, minExtInfo, ignoreRelationships);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetById"/> and <see cref="GetByIdAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        protected Request CreateGetByIdRequest(RequestContent requestBody, string guid, bool? minExtInfo = null, bool? ignoreRelationships = null)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            if (minExtInfo != null)
            {
                uri.AppendQuery("minExtInfo", minExtInfo.Value, true);
            }
            if (ignoreRelationships != null)
            {
                uri.AppendQuery("ignoreRelationships", ignoreRelationships.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary>
        /// Update entity partially - create or update entity attribute identified by its GUID.
        /// Supports only primitive attribute type and entity references.
        /// It does not support updating complex types like arrays, and maps.
        /// Null updates are not possible.
        /// </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="name"> The name of the attribute. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PartialUpdateEntityAttrByGuidAsync(RequestContent requestBody, string guid, string name, CancellationToken cancellationToken = default)
        {
            Request req = CreatePartialUpdateEntityAttrByGuidRequest(requestBody, guid, name);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update entity partially - create or update entity attribute identified by its GUID.
        /// Supports only primitive attribute type and entity references.
        /// It does not support updating complex types like arrays, and maps.
        /// Null updates are not possible.
        /// </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="name"> The name of the attribute. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PartialUpdateEntityAttrByGuid(RequestContent requestBody, string guid, string name, CancellationToken cancellationToken = default)
        {
            Request req = CreatePartialUpdateEntityAttrByGuidRequest(requestBody, guid, name);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="PartialUpdateEntityAttrByGuid"/> and <see cref="PartialUpdateEntityAttrByGuidAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="name"> The name of the attribute. </param>
        protected Request CreatePartialUpdateEntityAttrByGuidRequest(RequestContent requestBody, string guid, string name)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendQuery("name", name, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Delete an entity identified by its GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteByGuidAsync(RequestContent requestBody, string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteByGuidRequest(requestBody, guid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Delete an entity identified by its GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteByGuid(RequestContent requestBody, string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteByGuidRequest(requestBody, guid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="DeleteByGuid"/> and <see cref="DeleteByGuidAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        protected Request CreateDeleteByGuidRequest(RequestContent requestBody, string guid)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> List classifications for a given entity represented by a GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetClassificationAsync(RequestContent requestBody, string guid, string classificationName, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetClassificationRequest(requestBody, guid, classificationName);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> List classifications for a given entity represented by a GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetClassification(RequestContent requestBody, string guid, string classificationName, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetClassificationRequest(requestBody, guid, classificationName);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetClassification"/> and <see cref="GetClassificationAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        protected Request CreateGetClassificationRequest(RequestContent requestBody, string guid, string classificationName)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/classification/", false);
            uri.AppendPath(classificationName, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Delete a given classification from an existing entity represented by a GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteClassificationAsync(RequestContent requestBody, string guid, string classificationName, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteClassificationRequest(requestBody, guid, classificationName);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Delete a given classification from an existing entity represented by a GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteClassification(RequestContent requestBody, string guid, string classificationName, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteClassificationRequest(requestBody, guid, classificationName);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="DeleteClassification"/> and <see cref="DeleteClassificationAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        protected Request CreateDeleteClassificationRequest(RequestContent requestBody, string guid, string classificationName)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/classification/", false);
            uri.AppendPath(classificationName, true);
            request.Uri = uri;
            request.Content = requestBody;
            return request;
        }
        /// <summary> List classifications for a given entity represented by a GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetClassificationsAsync(RequestContent requestBody, string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetClassificationsRequest(requestBody, guid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> List classifications for a given entity represented by a GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetClassifications(RequestContent requestBody, string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetClassificationsRequest(requestBody, guid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetClassifications"/> and <see cref="GetClassificationsAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        protected Request CreateGetClassificationsRequest(RequestContent requestBody, string guid)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/classifications", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Add classifications to an existing entity represented by a GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AddClassificationsAsync(RequestContent requestBody, string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateAddClassificationsRequest(requestBody, guid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Add classifications to an existing entity represented by a GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response AddClassifications(RequestContent requestBody, string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateAddClassificationsRequest(requestBody, guid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="AddClassifications"/> and <see cref="AddClassificationsAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        protected Request CreateAddClassificationsRequest(RequestContent requestBody, string guid)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/classifications", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Update classifications to an existing entity represented by a guid. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateClassificationsAsync(RequestContent requestBody, string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateUpdateClassificationsRequest(requestBody, guid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Update classifications to an existing entity represented by a guid. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdateClassifications(RequestContent requestBody, string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateUpdateClassificationsRequest(requestBody, guid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="UpdateClassifications"/> and <see cref="UpdateClassificationsAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        protected Request CreateUpdateClassificationsRequest(RequestContent requestBody, string guid)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/classifications", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary>
        /// Get complete definition of an entity given its type and unique attribute.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:\&lt;attrName&gt;=&lt;attrValue&gt;.
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// GET /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetByUniqueAttributesAsync(RequestContent requestBody, string typeName, bool? minExtInfo = null, bool? ignoreRelationships = null, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetByUniqueAttributesRequest(requestBody, typeName, minExtInfo, ignoreRelationships, attrQualifiedName);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get complete definition of an entity given its type and unique attribute.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:\&lt;attrName&gt;=&lt;attrValue&gt;.
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// GET /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetByUniqueAttributes(RequestContent requestBody, string typeName, bool? minExtInfo = null, bool? ignoreRelationships = null, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetByUniqueAttributesRequest(requestBody, typeName, minExtInfo, ignoreRelationships, attrQualifiedName);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetByUniqueAttributes"/> and <see cref="GetByUniqueAttributesAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        protected Request CreateGetByUniqueAttributesRequest(RequestContent requestBody, string typeName, bool? minExtInfo = null, bool? ignoreRelationships = null, string attrQualifiedName = null)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            if (minExtInfo != null)
            {
                uri.AppendQuery("minExtInfo", minExtInfo.Value, true);
            }
            if (ignoreRelationships != null)
            {
                uri.AppendQuery("ignoreRelationships", ignoreRelationships.Value, true);
            }
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary>
        /// Update entity partially - Allow a subset of attributes to be updated on
        /// an entity which is identified by its type and unique attribute  eg: Referenceable.qualifiedName.
        /// Null updates are not possible.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:&lt;attrName&gt;=&lt;attrValue&gt;.
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PartialUpdateEntityByUniqueAttrsAsync(RequestContent requestBody, string typeName, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreatePartialUpdateEntityByUniqueAttrsRequest(requestBody, typeName, attrQualifiedName);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update entity partially - Allow a subset of attributes to be updated on
        /// an entity which is identified by its type and unique attribute  eg: Referenceable.qualifiedName.
        /// Null updates are not possible.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:&lt;attrName&gt;=&lt;attrValue&gt;.
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PartialUpdateEntityByUniqueAttrs(RequestContent requestBody, string typeName, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreatePartialUpdateEntityByUniqueAttrsRequest(requestBody, typeName, attrQualifiedName);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="PartialUpdateEntityByUniqueAttrs"/> and <see cref="PartialUpdateEntityByUniqueAttrsAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        protected Request CreatePartialUpdateEntityByUniqueAttrsRequest(RequestContent requestBody, string typeName, string attrQualifiedName = null)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary>
        /// Delete an entity identified by its type and unique attributes.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:\&lt;attrName&gt;=\&lt;attrValue&gt;.
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteByUniqueAttributeAsync(RequestContent requestBody, string typeName, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteByUniqueAttributeRequest(requestBody, typeName, attrQualifiedName);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an entity identified by its type and unique attributes.
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
        /// attr:\&lt;attrName&gt;=\&lt;attrValue&gt;.
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteByUniqueAttribute(RequestContent requestBody, string typeName, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteByUniqueAttributeRequest(requestBody, typeName, attrQualifiedName);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="DeleteByUniqueAttribute"/> and <see cref="DeleteByUniqueAttributeAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        protected Request CreateDeleteByUniqueAttributeRequest(RequestContent requestBody, string typeName, string attrQualifiedName = null)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Delete a given classification from an entity identified by its type and unique attributes. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteClassificationByUniqueAttributeAsync(RequestContent requestBody, string typeName, string classificationName, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteClassificationByUniqueAttributeRequest(requestBody, typeName, classificationName, attrQualifiedName);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Delete a given classification from an entity identified by its type and unique attributes. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteClassificationByUniqueAttribute(RequestContent requestBody, string typeName, string classificationName, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteClassificationByUniqueAttributeRequest(requestBody, typeName, classificationName, attrQualifiedName);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="DeleteClassificationByUniqueAttribute"/> and <see cref="DeleteClassificationByUniqueAttributeAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="classificationName"> The name of the classification. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        protected Request CreateDeleteClassificationByUniqueAttributeRequest(RequestContent requestBody, string typeName, string classificationName, string attrQualifiedName = null)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            uri.AppendPath("/classification/", false);
            uri.AppendPath(classificationName, true);
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Content = requestBody;
            return request;
        }
        /// <summary> Add classification to the entity identified by its type and unique attributes. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AddClassificationsByUniqueAttributeAsync(RequestContent requestBody, string typeName, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateAddClassificationsByUniqueAttributeRequest(requestBody, typeName, attrQualifiedName);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Add classification to the entity identified by its type and unique attributes. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response AddClassificationsByUniqueAttribute(RequestContent requestBody, string typeName, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateAddClassificationsByUniqueAttributeRequest(requestBody, typeName, attrQualifiedName);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="AddClassificationsByUniqueAttribute"/> and <see cref="AddClassificationsByUniqueAttributeAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        protected Request CreateAddClassificationsByUniqueAttributeRequest(RequestContent requestBody, string typeName, string attrQualifiedName = null)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            uri.AppendPath("/classifications", false);
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Update classification on an entity identified by its type and unique attributes. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateClassificationsByUniqueAttributeAsync(RequestContent requestBody, string typeName, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateUpdateClassificationsByUniqueAttributeRequest(requestBody, typeName, attrQualifiedName);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Update classification on an entity identified by its type and unique attributes. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdateClassificationsByUniqueAttribute(RequestContent requestBody, string typeName, string attrQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateUpdateClassificationsByUniqueAttributeRequest(requestBody, typeName, attrQualifiedName);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="UpdateClassificationsByUniqueAttribute"/> and <see cref="UpdateClassificationsByUniqueAttributeAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity. </param>
        protected Request CreateUpdateClassificationsByUniqueAttributeRequest(RequestContent requestBody, string typeName, string attrQualifiedName = null)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/entity/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            uri.AppendPath("/classifications", false);
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Set classifications on entities in bulk. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> SetClassificationsAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateSetClassificationsRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Set classifications on entities in bulk. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response SetClassifications(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateSetClassificationsRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="SetClassifications"/> and <see cref="SetClassificationsAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        protected Request CreateSetClassificationsRequest(RequestContent requestBody)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/entity/bulk/setClassifications", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary>
        /// Bulk API to retrieve list of entities identified by its unique attributes.
        /// 
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format
        /// 
        /// typeName=\&lt;typeName&gt;&amp;attr_1:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_2:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_3:\&lt;attrName&gt;=\&lt;attrValue&gt;
        /// 
        /// NOTE: The attrName should be an unique attribute for the given entity-type
        /// 
        /// The REST request would look something like this
        /// 
        /// GET /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_0:qualifiedName=db1@cl1&amp;attr_2:qualifiedName=db2@cl1.
        /// </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="attrNQualifiedName"> Qualified name of an entity. E.g. to find 2 entities you can set attrs_0:qualifiedName=db1@cl1&amp;attrs_2:qualifiedName=db2@cl1. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetEntitiesByUniqueAttributesAsync(RequestContent requestBody, string typeName, bool? minExtInfo = null, bool? ignoreRelationships = null, string attrNQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetEntitiesByUniqueAttributesRequest(requestBody, typeName, minExtInfo, ignoreRelationships, attrNQualifiedName);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Bulk API to retrieve list of entities identified by its unique attributes.
        /// 
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format
        /// 
        /// typeName=\&lt;typeName&gt;&amp;attr_1:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_2:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_3:\&lt;attrName&gt;=\&lt;attrValue&gt;
        /// 
        /// NOTE: The attrName should be an unique attribute for the given entity-type
        /// 
        /// The REST request would look something like this
        /// 
        /// GET /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_0:qualifiedName=db1@cl1&amp;attr_2:qualifiedName=db2@cl1.
        /// </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="attrNQualifiedName"> Qualified name of an entity. E.g. to find 2 entities you can set attrs_0:qualifiedName=db1@cl1&amp;attrs_2:qualifiedName=db2@cl1. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetEntitiesByUniqueAttributes(RequestContent requestBody, string typeName, bool? minExtInfo = null, bool? ignoreRelationships = null, string attrNQualifiedName = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetEntitiesByUniqueAttributesRequest(requestBody, typeName, minExtInfo, ignoreRelationships, attrNQualifiedName);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetEntitiesByUniqueAttributes"/> and <see cref="GetEntitiesByUniqueAttributesAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        /// <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        /// <param name="attrNQualifiedName"> Qualified name of an entity. E.g. to find 2 entities you can set attrs_0:qualifiedName=db1@cl1&amp;attrs_2:qualifiedName=db2@cl1. </param>
        protected Request CreateGetEntitiesByUniqueAttributesRequest(RequestContent requestBody, string typeName, bool? minExtInfo = null, bool? ignoreRelationships = null, string attrNQualifiedName = null)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/entity/bulk/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            if (minExtInfo != null)
            {
                uri.AppendQuery("minExtInfo", minExtInfo.Value, true);
            }
            if (ignoreRelationships != null)
            {
                uri.AppendQuery("ignoreRelationships", ignoreRelationships.Value, true);
            }
            if (attrNQualifiedName != null)
            {
                uri.AppendQuery("attr_N:qualifiedName", attrNQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Get entity header given its GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetHeaderByIdAsync(RequestContent requestBody, string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetHeaderByIdRequest(requestBody, guid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get entity header given its GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetHeaderById(RequestContent requestBody, string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetHeaderByIdRequest(requestBody, guid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetHeaderById"/> and <see cref="GetHeaderByIdAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        protected Request CreateGetHeaderByIdRequest(RequestContent requestBody, string guid)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/entity/guid/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/header", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
    }
}
