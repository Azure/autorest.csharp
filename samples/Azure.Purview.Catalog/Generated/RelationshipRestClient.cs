// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

#pragma warning disable AZC0007

namespace Azure.Purview.Catalog
{
    /// <summary> The RelationshipRest service client. </summary>
    public partial class RelationshipRestClient
    {
        protected readonly HttpPipeline Pipeline;
        private const string AuthorizationHeader = "api-key";
        private Uri endpoint;

        /// <summary> Initializes a new instance of RelationshipRestClient for mocking. </summary>
        protected RelationshipRestClient()
        {
        }

        /// <summary> Initializes a new instance of RelationshipRestClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        public RelationshipRestClient(AzureKeyCredential credential, Uri endpoint = null) : this(credential, new ProtocolClientOptions(), endpoint)
        {
        }

        /// <summary> Initializes a new instance of RelationshipRestClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> Options to control the underlying operations. </param>
        /// <param name="endpoint"> server parameter. </param>
        internal RelationshipRestClient(AzureKeyCredential credential, ProtocolClientOptions options = null, Uri endpoint = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            options ??= new ProtocolClientOptions();
            endpoint ??= new Uri("https://catalog.purview.azure.com/api");

            Pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, AuthorizationHeader));
            this.endpoint = endpoint;
        }

        /// <summary> Create a new relationship between entities. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CreateAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Create a new relationship between entities. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Create(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateCreateRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="Create"/> and <see cref="CreateAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        protected Request CreateCreateRequest(RequestContent requestBody)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/relationship", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Update an existing relationship between entities. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateUpdateRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Update an existing relationship between entities. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Update(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateUpdateRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="Update"/> and <see cref="UpdateAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        protected Request CreateUpdateRequest(RequestContent requestBody)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/relationship", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Get relationship information between entities by its GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the relationship. </param>
        /// <param name="extendedInfo"> Limits whether includes extended information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetById2Async(RequestContent requestBody, string guid, bool? extendedInfo = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetById2Request(requestBody, guid, extendedInfo);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get relationship information between entities by its GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the relationship. </param>
        /// <param name="extendedInfo"> Limits whether includes extended information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetById2(RequestContent requestBody, string guid, bool? extendedInfo = null, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetById2Request(requestBody, guid, extendedInfo);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetById2"/> and <see cref="GetById2Async"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the relationship. </param>
        /// <param name="extendedInfo"> Limits whether includes extended information. </param>
        protected Request CreateGetById2Request(RequestContent requestBody, string guid, bool? extendedInfo = null)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/relationship/guid/", false);
            uri.AppendPath(guid, true);
            if (extendedInfo != null)
            {
                uri.AppendQuery("extendedInfo", extendedInfo.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Delete a relationship between entities by its GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the relationship. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteByIdAsync(RequestContent requestBody, string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteByIdRequest(requestBody, guid);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Delete a relationship between entities by its GUID. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the relationship. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteById(RequestContent requestBody, string guid, CancellationToken cancellationToken = default)
        {
            Request req = CreateDeleteByIdRequest(requestBody, guid);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="DeleteById"/> and <see cref="DeleteByIdAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="guid"> The globally unique identifier of the relationship. </param>
        protected Request CreateDeleteByIdRequest(RequestContent requestBody, string guid)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/atlas/v2/relationship/guid/", false);
            uri.AppendPath(guid, true);
            request.Uri = uri;
            request.Content = requestBody;
            return request;
        }
    }
}
