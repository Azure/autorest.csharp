// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace AppConfiguration.Models
{
    /// <summary> Azure App Configuration error object. </summary>
    internal partial class Error
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="Error"/>. </summary>
        internal Error()
        {
        }

        /// <summary> Initializes a new instance of <see cref="Error"/>. </summary>
        /// <param name="type"> The type of the error. </param>
        /// <param name="title"> A brief summary of the error. </param>
        /// <param name="name"> The name of the parameter that resulted in the error. </param>
        /// <param name="detail"> A detailed description of the error. </param>
        /// <param name="status"> The HTTP status code that the error maps to. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal Error(string type, string title, string name, string detail, int? status, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Type = type;
            Title = title;
            Name = name;
            Detail = detail;
            Status = status;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The type of the error. </summary>
        public string Type { get; }
        /// <summary> A brief summary of the error. </summary>
        public string Title { get; }
        /// <summary> The name of the parameter that resulted in the error. </summary>
        public string Name { get; }
        /// <summary> A detailed description of the error. </summary>
        public string Detail { get; }
        /// <summary> The HTTP status code that the error maps to. </summary>
        public int? Status { get; }
    }
}
