// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Network.Management.Interface.Models
{
    public partial class EffectiveRoute : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Name != null)
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (DisableBgpRoutePropagation != null)
            {
                writer.WritePropertyName("disableBgpRoutePropagation");
                writer.WriteBooleanValue(DisableBgpRoutePropagation.Value);
            }
            if (Source != null)
            {
                writer.WritePropertyName("source");
                writer.WriteStringValue(Source.Value.ToString());
            }
            if (State != null)
            {
                writer.WritePropertyName("state");
                writer.WriteStringValue(State.Value.ToString());
            }
            if (AddressPrefix != null)
            {
                writer.WritePropertyName("addressPrefix");
                writer.WriteStartArray();
                foreach (var item in AddressPrefix)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (NextHopIpAddress != null)
            {
                writer.WritePropertyName("nextHopIpAddress");
                writer.WriteStartArray();
                foreach (var item in NextHopIpAddress)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (NextHopType != null)
            {
                writer.WritePropertyName("nextHopType");
                writer.WriteStringValue(NextHopType.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static EffectiveRoute DeserializeEffectiveRoute(JsonElement element)
        {
            EffectiveRoute result = new EffectiveRoute();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.Name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("disableBgpRoutePropagation"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.DisableBgpRoutePropagation = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("source"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.Source = new EffectiveRouteSource(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("state"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.State = new EffectiveRouteState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("addressPrefix"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.AddressPrefix = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        result.AddressPrefix.Add(item.GetString());
                    }
                    continue;
                }
                if (property.NameEquals("nextHopIpAddress"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.NextHopIpAddress = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        result.NextHopIpAddress.Add(item.GetString());
                    }
                    continue;
                }
                if (property.NameEquals("nextHopType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result.NextHopType = new RouteNextHopType(property.Value.GetString());
                    continue;
                }
            }
            return result;
        }
    }
}
