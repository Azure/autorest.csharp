// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;

namespace SignalR
{
    public partial class ServiceClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal ServiceRestClient RestClient { get; }
        /// <summary> Initializes a new instance of ServiceClient for mocking. </summary>
        protected ServiceClient()
        {
        }
        /// <summary> Initializes a new instance of ServiceClient. </summary>
        internal ServiceClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string apiVersion, string host = "")
        {
            RestClient = new ServiceRestClient(clientDiagnostics, pipeline, apiVersion, host);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Check the health of the service. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetServiceHealthAsync(CancellationToken cancellationToken = default)
        {
            return await RestClient.GetServiceHealthAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Check the health of the service. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetServiceHealth(CancellationToken cancellationToken = default)
        {
            return RestClient.GetServiceHealth(cancellationToken);
        }

        /// <summary> Broadcast content inside request body to all the connected connection in the same hub. </summary>
        /// <param name="hub"> The hub is the logic isolation for connections. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> SendToHubAsync(string hub, Stream data, CancellationToken cancellationToken = default)
        {
            return await RestClient.SendToHubAsync(hub, data, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Broadcast content inside request body to all the connected connection in the same hub. </summary>
        /// <param name="hub"> The hub is the logic isolation for connections. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response SendToHub(string hub, Stream data, CancellationToken cancellationToken = default)
        {
            return RestClient.SendToHub(hub, data, cancellationToken);
        }

        /// <summary> Broadcast content inside request body to all the connected connection in the same hub. </summary>
        /// <param name="hub"> The hub is the logic isolation for connections. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> SendToHubAsync(string hub, string data, CancellationToken cancellationToken = default)
        {
            return await RestClient.SendToHubAsync(hub, data, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Broadcast content inside request body to all the connected connection in the same hub. </summary>
        /// <param name="hub"> The hub is the logic isolation for connections. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response SendToHub(string hub, string data, CancellationToken cancellationToken = default)
        {
            return RestClient.SendToHub(hub, data, cancellationToken);
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="id"> The user identity. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> SendToUserAsync(string hub, string id, Stream data, CancellationToken cancellationToken = default)
        {
            return await RestClient.SendToUserAsync(hub, id, data, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="id"> The user identity. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response SendToUser(string hub, string id, Stream data, CancellationToken cancellationToken = default)
        {
            return RestClient.SendToUser(hub, id, data, cancellationToken);
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="id"> The user identity. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> SendToUserAsync(string hub, string id, string data, CancellationToken cancellationToken = default)
        {
            return await RestClient.SendToUserAsync(hub, id, data, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="id"> The user identity. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response SendToUser(string hub, string id, string data, CancellationToken cancellationToken = default)
        {
            return RestClient.SendToUser(hub, id, data, cancellationToken);
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> SendToConnectionAsync(string hub, string connectionId, Stream data, CancellationToken cancellationToken = default)
        {
            return await RestClient.SendToConnectionAsync(hub, connectionId, data, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response SendToConnection(string hub, string connectionId, Stream data, CancellationToken cancellationToken = default)
        {
            return RestClient.SendToConnection(hub, connectionId, data, cancellationToken);
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> SendToConnectionAsync(string hub, string connectionId, string data, CancellationToken cancellationToken = default)
        {
            return await RestClient.SendToConnectionAsync(hub, connectionId, data, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response SendToConnection(string hub, string connectionId, string data, CancellationToken cancellationToken = default)
        {
            return RestClient.SendToConnection(hub, connectionId, data, cancellationToken);
        }

        /// <summary> Close the client connection. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="reason"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> CloseConnectionAsync(string hub, string connectionId, string reason = null, CancellationToken cancellationToken = default)
        {
            return await RestClient.CloseConnectionAsync(hub, connectionId, reason, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Close the client connection. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="reason"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response CloseConnection(string hub, string connectionId, string reason = null, CancellationToken cancellationToken = default)
        {
            return RestClient.CloseConnection(hub, connectionId, reason, cancellationToken);
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> SendToGroupAsync(string hub, string group, Stream data, CancellationToken cancellationToken = default)
        {
            return await RestClient.SendToGroupAsync(hub, group, data, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response SendToGroup(string hub, string group, Stream data, CancellationToken cancellationToken = default)
        {
            return RestClient.SendToGroup(hub, group, data, cancellationToken);
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> SendToGroupAsync(string hub, string group, string data, CancellationToken cancellationToken = default)
        {
            return await RestClient.SendToGroupAsync(hub, group, data, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response SendToGroup(string hub, string group, string data, CancellationToken cancellationToken = default)
        {
            return RestClient.SendToGroup(hub, group, data, cancellationToken);
        }

        /// <summary> Check if the user is in the specified group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetUserInGroupAsync(string hub, string group, string user, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetUserInGroupAsync(hub, group, user, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Check if the user is in the specified group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetUserInGroup(string hub, string group, string user, CancellationToken cancellationToken = default)
        {
            return RestClient.GetUserInGroup(hub, group, user, cancellationToken);
        }

        /// <summary> Add the user to the specified group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="user"> The String to use. </param>
        /// <param name="ttl"> Specifies the seconds that the user exists in the group. If not set, the user lives in the group forever. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AddUserToGroupAsync(string hub, string group, string user, int? ttl = null, CancellationToken cancellationToken = default)
        {
            return await RestClient.AddUserToGroupAsync(hub, group, user, ttl, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Add the user to the specified group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="user"> The String to use. </param>
        /// <param name="ttl"> Specifies the seconds that the user exists in the group. If not set, the user lives in the group forever. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response AddUserToGroup(string hub, string group, string user, int? ttl = null, CancellationToken cancellationToken = default)
        {
            return RestClient.AddUserToGroup(hub, group, user, ttl, cancellationToken);
        }

        /// <summary> Remove all the connections belong to the specified user from the group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> RemoveUserFromGroupAsync(string hub, string group, string user, CancellationToken cancellationToken = default)
        {
            return await RestClient.RemoveUserFromGroupAsync(hub, group, user, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Remove all the connections belong to the specified user from the group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response RemoveUserFromGroup(string hub, string group, string user, CancellationToken cancellationToken = default)
        {
            return RestClient.RemoveUserFromGroup(hub, group, user, cancellationToken);
        }

        /// <summary> Add the connection to the group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AddConnectionToGroupAsync(string hub, string group, string connectionId, CancellationToken cancellationToken = default)
        {
            return await RestClient.AddConnectionToGroupAsync(hub, group, connectionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Add the connection to the group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response AddConnectionToGroup(string hub, string group, string connectionId, CancellationToken cancellationToken = default)
        {
            return RestClient.AddConnectionToGroup(hub, group, connectionId, cancellationToken);
        }

        /// <summary> Remove the connection from the group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> RemoveConnectionToGroupAsync(string hub, string group, string connectionId, CancellationToken cancellationToken = default)
        {
            return await RestClient.RemoveConnectionToGroupAsync(hub, group, connectionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Remove the connection from the group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response RemoveConnectionToGroup(string hub, string group, string connectionId, CancellationToken cancellationToken = default)
        {
            return RestClient.RemoveConnectionToGroup(hub, group, connectionId, cancellationToken);
        }

        /// <summary> Remove the user from all groups. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> RemoveAllUserGroupsAsync(string hub, string user, CancellationToken cancellationToken = default)
        {
            return await RestClient.RemoveAllUserGroupsAsync(hub, user, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Remove the user from all groups. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response RemoveAllUserGroups(string hub, string user, CancellationToken cancellationToken = default)
        {
            return RestClient.RemoveAllUserGroups(hub, user, cancellationToken);
        }
    }
}
