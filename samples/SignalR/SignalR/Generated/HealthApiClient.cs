// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;

namespace SignalR
{
    /// <summary> The HealthApi service client. </summary>
    public partial class HealthApiClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal HealthApiRestClient RestClient { get; }
        /// <summary> Initializes a new instance of HealthApiClient for mocking. </summary>
        protected HealthApiClient()
        {
        }
        /// <summary> Initializes a new instance of HealthApiClient. </summary>
        internal HealthApiClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string host = "")
        {
            RestClient = new HealthApiRestClient(clientDiagnostics, pipeline, host);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Get service health status. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> HeadIndexAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("HealthApiClient.HeadIndex");
            scope.Start();
            try
            {
                return await RestClient.HeadIndexAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get service health status. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response HeadIndex(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("HealthApiClient.HeadIndex");
            scope.Start();
            try
            {
                return RestClient.HeadIndex(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
