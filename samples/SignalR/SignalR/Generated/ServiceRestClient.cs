// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace SignalR
{
    internal partial class ServiceRestClient
    {
        private string apiVersion;
        private string host;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of ServiceRestClient. </summary>
        public ServiceRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string apiVersion, string host = "")
        {
            if (apiVersion == null)
            {
                throw new ArgumentNullException(nameof(apiVersion));
            }
            if (host == null)
            {
                throw new ArgumentNullException(nameof(host));
            }

            this.apiVersion = apiVersion;
            this.host = host;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateGetServiceHealthRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(host, false);
            uri.AppendPath("/api/v1/health", false);
            request.Uri = uri;
            request.Headers.Add("api-version", apiVersion);
            return message;
        }

        /// <summary> Check the health of the service. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> GetServiceHealthAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetServiceHealthRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check the health of the service. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response GetServiceHealth(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetServiceHealthRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSendToHubRequest(string hub, Stream data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(host, false);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/octet-stream");
            request.Content = RequestContent.Create(data);
            return message;
        }

        /// <summary> Broadcast content inside request body to all the connected connection in the same hub. </summary>
        /// <param name="hub"> The hub is the logic isolation for connections. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> SendToHubAsync(string hub, Stream data, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateSendToHubRequest(hub, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Broadcast content inside request body to all the connected connection in the same hub. </summary>
        /// <param name="hub"> The hub is the logic isolation for connections. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response SendToHub(string hub, Stream data, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateSendToHubRequest(hub, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSendToHubRequest(string hub, string data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(host, false);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "text/plain");
            request.Content = new StringRequestContent(data);
            return message;
        }

        /// <summary> Broadcast content inside request body to all the connected connection in the same hub. </summary>
        /// <param name="hub"> The hub is the logic isolation for connections. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> SendToHubAsync(string hub, string data, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateSendToHubRequest(hub, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Broadcast content inside request body to all the connected connection in the same hub. </summary>
        /// <param name="hub"> The hub is the logic isolation for connections. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response SendToHub(string hub, string data, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateSendToHubRequest(hub, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSendToUserRequest(string hub, string id, Stream data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(host, false);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/octet-stream");
            request.Content = RequestContent.Create(data);
            return message;
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="id"> The user identity. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> SendToUserAsync(string hub, string id, Stream data, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateSendToUserRequest(hub, id, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="id"> The user identity. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response SendToUser(string hub, string id, Stream data, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateSendToUserRequest(hub, id, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSendToUserRequest(string hub, string id, string data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(host, false);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "text/plain");
            request.Content = new StringRequestContent(data);
            return message;
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="id"> The user identity. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> SendToUserAsync(string hub, string id, string data, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateSendToUserRequest(hub, id, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="id"> The user identity. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response SendToUser(string hub, string id, string data, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateSendToUserRequest(hub, id, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSendToConnectionRequest(string hub, string connectionId, Stream data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(host, false);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/octet-stream");
            request.Content = RequestContent.Create(data);
            return message;
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> SendToConnectionAsync(string hub, string connectionId, Stream data, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateSendToConnectionRequest(hub, connectionId, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response SendToConnection(string hub, string connectionId, Stream data, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateSendToConnectionRequest(hub, connectionId, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSendToConnectionRequest(string hub, string connectionId, string data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(host, false);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "text/plain");
            request.Content = new StringRequestContent(data);
            return message;
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> SendToConnectionAsync(string hub, string connectionId, string data, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateSendToConnectionRequest(hub, connectionId, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response SendToConnection(string hub, string connectionId, string data, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateSendToConnectionRequest(hub, connectionId, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCloseConnectionRequest(string hub, string connectionId, string reason)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(host, false);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            if (reason != null)
            {
                uri.AppendQuery("reason", reason, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> Close the client connection. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="reason"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> CloseConnectionAsync(string hub, string connectionId, string reason = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateCloseConnectionRequest(hub, connectionId, reason);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Close the client connection. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="reason"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response CloseConnection(string hub, string connectionId, string reason = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateCloseConnectionRequest(hub, connectionId, reason);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSendToGroupRequest(string hub, string group, Stream data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(host, false);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/octet-stream");
            request.Content = RequestContent.Create(data);
            return message;
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> SendToGroupAsync(string hub, string group, Stream data, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateSendToGroupRequest(hub, group, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response SendToGroup(string hub, string group, Stream data, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateSendToGroupRequest(hub, group, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSendToGroupRequest(string hub, string group, string data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(host, false);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "text/plain");
            request.Content = new StringRequestContent(data);
            return message;
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> SendToGroupAsync(string hub, string group, string data, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateSendToGroupRequest(hub, group, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response SendToGroup(string hub, string group, string data, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreateSendToGroupRequest(hub, group, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetUserInGroupRequest(string hub, string group, string user)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(host, false);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(user, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Check if the user is in the specified group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> GetUserInGroupAsync(string hub, string group, string user, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateGetUserInGroupRequest(hub, group, user);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check if the user is in the specified group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response GetUserInGroup(string hub, string group, string user, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateGetUserInGroupRequest(hub, group, user);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAddUserToGroupRequest(string hub, string group, string user, int? ttl)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(host, false);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(user, true);
            if (ttl != null)
            {
                uri.AppendQuery("ttl", ttl.Value, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> Add the user to the specified group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="user"> The String to use. </param>
        /// <param name="ttl"> Specifies the seconds that the user exists in the group. If not set, the user lives in the group forever. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> AddUserToGroupAsync(string hub, string group, string user, int? ttl = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateAddUserToGroupRequest(hub, group, user, ttl);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Add the user to the specified group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="user"> The String to use. </param>
        /// <param name="ttl"> Specifies the seconds that the user exists in the group. If not set, the user lives in the group forever. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response AddUserToGroup(string hub, string group, string user, int? ttl = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateAddUserToGroupRequest(hub, group, user, ttl);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRemoveUserFromGroupRequest(string hub, string group, string user)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(host, false);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(user, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Remove all the connections belong to the specified user from the group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> RemoveUserFromGroupAsync(string hub, string group, string user, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateRemoveUserFromGroupRequest(hub, group, user);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Remove all the connections belong to the specified user from the group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response RemoveUserFromGroup(string hub, string group, string user, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateRemoveUserFromGroupRequest(hub, group, user);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAddConnectionToGroupRequest(string hub, string group, string connectionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(host, false);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Add the connection to the group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> AddConnectionToGroupAsync(string hub, string group, string connectionId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateAddConnectionToGroupRequest(hub, group, connectionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Add the connection to the group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response AddConnectionToGroup(string hub, string group, string connectionId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateAddConnectionToGroupRequest(hub, group, connectionId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRemoveConnectionToGroupRequest(string hub, string group, string connectionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(host, false);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Remove the connection from the group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> RemoveConnectionToGroupAsync(string hub, string group, string connectionId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateRemoveConnectionToGroupRequest(hub, group, connectionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Remove the connection from the group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response RemoveConnectionToGroup(string hub, string group, string connectionId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateRemoveConnectionToGroupRequest(hub, group, connectionId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRemoveAllUserGroupsRequest(string hub, string user)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(host, false);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(user, true);
            uri.AppendPath("/groups", false);
            request.Uri = uri;
            return message;
        }

        /// <summary> Remove the user from all groups. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> RemoveAllUserGroupsAsync(string hub, string user, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateRemoveAllUserGroupsRequest(hub, user);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Remove the user from all groups. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response RemoveAllUserGroups(string hub, string user, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateRemoveAllUserGroupsRequest(hub, user);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
