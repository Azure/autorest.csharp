// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace SignalR
{
    internal partial class WebSocketConnectionApiRestClient
    {
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of WebSocketConnectionApiRestClient. </summary>
        public WebSocketConnectionApiRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            endpoint ??= new Uri("");

            this.endpoint = endpoint;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreatePostDefaultHubBroadcastRequest(Stream data, IEnumerable<string> excluded)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1", false);
            if (excluded != null)
            {
                uri.AppendQueryDelimited("excluded", excluded, ",", true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/octet-stream");
            request.Content = RequestContent.Create(data);
            return message;
        }

        /// <summary> Broadcast content inside request body to all the connected to endpoint &quot;/ws/client&quot;. </summary>
        /// <param name="data"> The binary to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> PostDefaultHubBroadcastAsync(Stream data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostDefaultHubBroadcastRequest(data, excluded);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Broadcast content inside request body to all the connected to endpoint &quot;/ws/client&quot;. </summary>
        /// <param name="data"> The binary to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PostDefaultHubBroadcast(Stream data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostDefaultHubBroadcastRequest(data, excluded);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePostDefaultHubBroadcastRequest(string data, IEnumerable<string> excluded)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1", false);
            if (excluded != null)
            {
                uri.AppendQueryDelimited("excluded", excluded, ",", true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "text/plain");
            request.Content = new StringRequestContent(data);
            return message;
        }

        /// <summary> Broadcast content inside request body to all the connected to endpoint &quot;/ws/client&quot;. </summary>
        /// <param name="data"> The String to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> PostDefaultHubBroadcastAsync(string data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostDefaultHubBroadcastRequest(data, excluded);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Broadcast content inside request body to all the connected to endpoint &quot;/ws/client&quot;. </summary>
        /// <param name="data"> The String to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PostDefaultHubBroadcast(string data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostDefaultHubBroadcastRequest(data, excluded);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePostBroadcastRequest(string hub, Stream data, IEnumerable<string> excluded)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            if (excluded != null)
            {
                uri.AppendQueryDelimited("excluded", excluded, ",", true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/octet-stream");
            request.Content = RequestContent.Create(data);
            return message;
        }

        /// <summary> Broadcast content inside request body to all the connected connections in the same hub. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> PostBroadcastAsync(string hub, Stream data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostBroadcastRequest(hub, data, excluded);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Broadcast content inside request body to all the connected connections in the same hub. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PostBroadcast(string hub, Stream data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostBroadcastRequest(hub, data, excluded);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePostBroadcastRequest(string hub, string data, IEnumerable<string> excluded)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            if (excluded != null)
            {
                uri.AppendQueryDelimited("excluded", excluded, ",", true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "text/plain");
            request.Content = new StringRequestContent(data);
            return message;
        }

        /// <summary> Broadcast content inside request body to all the connected connections in the same hub. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> PostBroadcastAsync(string hub, string data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostBroadcastRequest(hub, data, excluded);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Broadcast content inside request body to all the connected connections in the same hub. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PostBroadcast(string hub, string data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostBroadcastRequest(hub, data, excluded);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePostSendToDefaultHubUserRequest(string id, Stream data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/users/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/octet-stream");
            request.Content = RequestContent.Create(data);
            return message;
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="id"> The user Id. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> PostSendToDefaultHubUserAsync(string id, Stream data, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostSendToDefaultHubUserRequest(id, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="id"> The user Id. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PostSendToDefaultHubUser(string id, Stream data, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostSendToDefaultHubUserRequest(id, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePostSendToDefaultHubUserRequest(string id, string data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/users/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "text/plain");
            request.Content = new StringRequestContent(data);
            return message;
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="id"> The user Id. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> PostSendToDefaultHubUserAsync(string id, string data, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostSendToDefaultHubUserRequest(id, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="id"> The user Id. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PostSendToDefaultHubUser(string id, string data, CancellationToken cancellationToken = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostSendToDefaultHubUserRequest(id, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePostSendToUserRequest(string hub, string id, Stream data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/octet-stream");
            request.Content = RequestContent.Create(data);
            return message;
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="id"> The user Id. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> PostSendToUserAsync(string hub, string id, Stream data, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostSendToUserRequest(hub, id, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="id"> The user Id. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PostSendToUser(string hub, string id, Stream data, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostSendToUserRequest(hub, id, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePostSendToUserRequest(string hub, string id, string data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "text/plain");
            request.Content = new StringRequestContent(data);
            return message;
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="id"> The user Id. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> PostSendToUserAsync(string hub, string id, string data, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostSendToUserRequest(hub, id, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to the specific user. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="id"> The user Id. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PostSendToUser(string hub, string id, string data, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostSendToUserRequest(hub, id, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePostSendToDefaultHubConnectionRequest(string connectionId, Stream data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/connections/", false);
            uri.AppendPath(connectionId, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/octet-stream");
            request.Content = RequestContent.Create(data);
            return message;
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> PostSendToDefaultHubConnectionAsync(string connectionId, Stream data, CancellationToken cancellationToken = default)
        {
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostSendToDefaultHubConnectionRequest(connectionId, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PostSendToDefaultHubConnection(string connectionId, Stream data, CancellationToken cancellationToken = default)
        {
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostSendToDefaultHubConnectionRequest(connectionId, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePostSendToDefaultHubConnectionRequest(string connectionId, string data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/connections/", false);
            uri.AppendPath(connectionId, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "text/plain");
            request.Content = new StringRequestContent(data);
            return message;
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> PostSendToDefaultHubConnectionAsync(string connectionId, string data, CancellationToken cancellationToken = default)
        {
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostSendToDefaultHubConnectionRequest(connectionId, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PostSendToDefaultHubConnection(string connectionId, string data, CancellationToken cancellationToken = default)
        {
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostSendToDefaultHubConnectionRequest(connectionId, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetCheckDefaultHubConnectionExistenceRequest(string connectionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/connections/", false);
            uri.AppendPath(connectionId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Check if the connection with the given connectionId exists. </summary>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> GetCheckDefaultHubConnectionExistenceAsync(string connectionId, CancellationToken cancellationToken = default)
        {
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateGetCheckDefaultHubConnectionExistenceRequest(connectionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check if the connection with the given connectionId exists. </summary>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response GetCheckDefaultHubConnectionExistence(string connectionId, CancellationToken cancellationToken = default)
        {
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateGetCheckDefaultHubConnectionExistenceRequest(connectionId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateHeadCheckDefaultHubConnectionExistenceRequest(string connectionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/connections/", false);
            uri.AppendPath(connectionId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Check if the connection with the given connectionId exists. </summary>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> HeadCheckDefaultHubConnectionExistenceAsync(string connectionId, CancellationToken cancellationToken = default)
        {
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateHeadCheckDefaultHubConnectionExistenceRequest(connectionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check if the connection with the given connectionId exists. </summary>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response HeadCheckDefaultHubConnectionExistence(string connectionId, CancellationToken cancellationToken = default)
        {
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateHeadCheckDefaultHubConnectionExistenceRequest(connectionId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteCloseDefaultHubClientConnectionRequest(string connectionId, string reason)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/connections/", false);
            uri.AppendPath(connectionId, true);
            if (reason != null)
            {
                uri.AppendQuery("reason", reason, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> Close the client connection. </summary>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="reason"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> DeleteCloseDefaultHubClientConnectionAsync(string connectionId, string reason = null, CancellationToken cancellationToken = default)
        {
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateDeleteCloseDefaultHubClientConnectionRequest(connectionId, reason);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Close the client connection. </summary>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="reason"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response DeleteCloseDefaultHubClientConnection(string connectionId, string reason = null, CancellationToken cancellationToken = default)
        {
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateDeleteCloseDefaultHubClientConnectionRequest(connectionId, reason);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePostSendToConnectionRequest(string hub, string connectionId, Stream data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/octet-stream");
            request.Content = RequestContent.Create(data);
            return message;
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> PostSendToConnectionAsync(string hub, string connectionId, Stream data, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostSendToConnectionRequest(hub, connectionId, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PostSendToConnection(string hub, string connectionId, Stream data, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostSendToConnectionRequest(hub, connectionId, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePostSendToConnectionRequest(string hub, string connectionId, string data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "text/plain");
            request.Content = new StringRequestContent(data);
            return message;
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> PostSendToConnectionAsync(string hub, string connectionId, string data, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostSendToConnectionRequest(hub, connectionId, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to the specific connection. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="connectionId"> The connection Id. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PostSendToConnection(string hub, string connectionId, string data, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostSendToConnectionRequest(hub, connectionId, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetCheckConnectionExistenceRequest(string hub, string connectionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Check if the connection with the given connectionId exists. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> GetCheckConnectionExistenceAsync(string hub, string connectionId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateGetCheckConnectionExistenceRequest(hub, connectionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check if the connection with the given connectionId exists. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response GetCheckConnectionExistence(string hub, string connectionId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateGetCheckConnectionExistenceRequest(hub, connectionId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateHeadCheckConnectionExistenceRequest(string hub, string connectionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Check if the connection with the given connectionId exists. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> HeadCheckConnectionExistenceAsync(string hub, string connectionId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateHeadCheckConnectionExistenceRequest(hub, connectionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check if the connection with the given connectionId exists. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response HeadCheckConnectionExistence(string hub, string connectionId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateHeadCheckConnectionExistenceRequest(hub, connectionId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteCloseClientConnectionRequest(string hub, string connectionId, string reason)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            if (reason != null)
            {
                uri.AppendQuery("reason", reason, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> Close the client connection. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="reason"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> DeleteCloseClientConnectionAsync(string hub, string connectionId, string reason = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateDeleteCloseClientConnectionRequest(hub, connectionId, reason);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Close the client connection. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="connectionId"> The String to use. </param>
        /// <param name="reason"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response DeleteCloseClientConnection(string hub, string connectionId, string reason = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateDeleteCloseClientConnectionRequest(hub, connectionId, reason);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePostDefaultHubGroupBroadcastRequest(string group, Stream data, IEnumerable<string> excluded)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/groups/", false);
            uri.AppendPath(group, true);
            if (excluded != null)
            {
                uri.AppendQueryDelimited("excluded", excluded, ",", true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/octet-stream");
            request.Content = RequestContent.Create(data);
            return message;
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> PostDefaultHubGroupBroadcastAsync(string group, Stream data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostDefaultHubGroupBroadcastRequest(group, data, excluded);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PostDefaultHubGroupBroadcast(string group, Stream data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostDefaultHubGroupBroadcastRequest(group, data, excluded);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePostDefaultHubGroupBroadcastRequest(string group, string data, IEnumerable<string> excluded)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/groups/", false);
            uri.AppendPath(group, true);
            if (excluded != null)
            {
                uri.AppendQueryDelimited("excluded", excluded, ",", true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "text/plain");
            request.Content = new StringRequestContent(data);
            return message;
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> PostDefaultHubGroupBroadcastAsync(string group, string data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostDefaultHubGroupBroadcastRequest(group, data, excluded);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PostDefaultHubGroupBroadcast(string group, string data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostDefaultHubGroupBroadcastRequest(group, data, excluded);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetCheckDefaultHubGroupExistenceRequest(string group)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/groups/", false);
            uri.AppendPath(group, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Check if there are any client connections inside the given group. </summary>
        /// <param name="group"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> GetCheckDefaultHubGroupExistenceAsync(string group, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }

            using var message = CreateGetCheckDefaultHubGroupExistenceRequest(group);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check if there are any client connections inside the given group. </summary>
        /// <param name="group"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response GetCheckDefaultHubGroupExistence(string group, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }

            using var message = CreateGetCheckDefaultHubGroupExistenceRequest(group);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateHeadCheckDefaultHubGroupExistenceRequest(string group)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/groups/", false);
            uri.AppendPath(group, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Check if there are any client connections inside the given group. </summary>
        /// <param name="group"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> HeadCheckDefaultHubGroupExistenceAsync(string group, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }

            using var message = CreateHeadCheckDefaultHubGroupExistenceRequest(group);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check if there are any client connections inside the given group. </summary>
        /// <param name="group"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response HeadCheckDefaultHubGroupExistence(string group, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }

            using var message = CreateHeadCheckDefaultHubGroupExistenceRequest(group);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePostGroupBroadcastRequest(string hub, string group, Stream data, IEnumerable<string> excluded)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            if (excluded != null)
            {
                uri.AppendQueryDelimited("excluded", excluded, ",", true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/octet-stream");
            request.Content = RequestContent.Create(data);
            return message;
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> PostGroupBroadcastAsync(string hub, string group, Stream data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostGroupBroadcastRequest(hub, group, data, excluded);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="data"> The binary to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PostGroupBroadcast(string hub, string group, Stream data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostGroupBroadcastRequest(hub, group, data, excluded);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePostGroupBroadcastRequest(string hub, string group, string data, IEnumerable<string> excluded)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            if (excluded != null)
            {
                uri.AppendQueryDelimited("excluded", excluded, ",", true);
            }
            request.Uri = uri;
            request.Headers.Add("Content-Type", "text/plain");
            request.Content = new StringRequestContent(data);
            return message;
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> PostGroupBroadcastAsync(string hub, string group, string data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostGroupBroadcastRequest(hub, group, data, excluded);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send content inside request body to a group of connections. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="data"> The String to use. </param>
        /// <param name="excluded"> Excluded connection Ids. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PostGroupBroadcast(string hub, string group, string data, IEnumerable<string> excluded = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (data == null)
            {
                throw new ArgumentNullException(nameof(data));
            }

            using var message = CreatePostGroupBroadcastRequest(hub, group, data, excluded);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetCheckGroupExistenceRequest(string hub, string group)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Check if there are any client connections inside the given group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> GetCheckGroupExistenceAsync(string hub, string group, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }

            using var message = CreateGetCheckGroupExistenceRequest(hub, group);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check if there are any client connections inside the given group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response GetCheckGroupExistence(string hub, string group, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }

            using var message = CreateGetCheckGroupExistenceRequest(hub, group);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateHeadCheckGroupExistenceRequest(string hub, string group)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Check if there are any client connections inside the given group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> HeadCheckGroupExistenceAsync(string hub, string group, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }

            using var message = CreateHeadCheckGroupExistenceRequest(hub, group);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check if there are any client connections inside the given group. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="group"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response HeadCheckGroupExistence(string hub, string group, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }

            using var message = CreateHeadCheckGroupExistenceRequest(hub, group);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetCheckDefaultHubUserExistenceRequest(string user)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/users/", false);
            uri.AppendPath(user, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Check if there are any client connections connected for the given user. </summary>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> GetCheckDefaultHubUserExistenceAsync(string user, CancellationToken cancellationToken = default)
        {
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateGetCheckDefaultHubUserExistenceRequest(user);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check if there are any client connections connected for the given user. </summary>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response GetCheckDefaultHubUserExistence(string user, CancellationToken cancellationToken = default)
        {
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateGetCheckDefaultHubUserExistenceRequest(user);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateHeadCheckDefaultHubUserExistenceRequest(string user)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/users/", false);
            uri.AppendPath(user, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Check if there are any client connections connected for the given user. </summary>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> HeadCheckDefaultHubUserExistenceAsync(string user, CancellationToken cancellationToken = default)
        {
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateHeadCheckDefaultHubUserExistenceRequest(user);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check if there are any client connections connected for the given user. </summary>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response HeadCheckDefaultHubUserExistence(string user, CancellationToken cancellationToken = default)
        {
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateHeadCheckDefaultHubUserExistenceRequest(user);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePutAddConnectionToDefaultHubGroupRequest(string group, string connectionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Add a connection to the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> PutAddConnectionToDefaultHubGroupAsync(string group, string connectionId, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreatePutAddConnectionToDefaultHubGroupRequest(group, connectionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Add a connection to the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PutAddConnectionToDefaultHubGroup(string group, string connectionId, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreatePutAddConnectionToDefaultHubGroupRequest(group, connectionId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRemoveConnectionFromDefaultHubGroupRequest(string group, string connectionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Remove a connection from the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> DeleteRemoveConnectionFromDefaultHubGroupAsync(string group, string connectionId, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateDeleteRemoveConnectionFromDefaultHubGroupRequest(group, connectionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Remove a connection from the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response DeleteRemoveConnectionFromDefaultHubGroup(string group, string connectionId, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateDeleteRemoveConnectionFromDefaultHubGroupRequest(group, connectionId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetCheckUserExistenceInDefaultHubGroupRequest(string group, string user)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(user, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Check whether a user exists in the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> GetCheckUserExistenceInDefaultHubGroupAsync(string group, string user, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateGetCheckUserExistenceInDefaultHubGroupRequest(group, user);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check whether a user exists in the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response GetCheckUserExistenceInDefaultHubGroup(string group, string user, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateGetCheckUserExistenceInDefaultHubGroupRequest(group, user);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateHeadCheckUserExistenceInDefaultHubGroupRequest(string group, string user)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(user, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Check whether a user exists in the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> HeadCheckUserExistenceInDefaultHubGroupAsync(string group, string user, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateHeadCheckUserExistenceInDefaultHubGroupRequest(group, user);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check whether a user exists in the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response HeadCheckUserExistenceInDefaultHubGroup(string group, string user, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateHeadCheckUserExistenceInDefaultHubGroupRequest(group, user);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePutAddUserToDefaultHubGroupRequest(string group, string user, int? ttl)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(user, true);
            if (ttl != null)
            {
                uri.AppendQuery("ttl", ttl.Value, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> Add a user to the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="ttl"> Specifies the seconds that the user exists in the group. If not set, the user lives in the group forever. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> PutAddUserToDefaultHubGroupAsync(string group, string user, int? ttl = null, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreatePutAddUserToDefaultHubGroupRequest(group, user, ttl);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Add a user to the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="ttl"> Specifies the seconds that the user exists in the group. If not set, the user lives in the group forever. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PutAddUserToDefaultHubGroup(string group, string user, int? ttl = null, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreatePutAddUserToDefaultHubGroupRequest(group, user, ttl);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRemoveUserFromDefaultHubGroupRequest(string group, string user)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(user, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Remove a user from the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> DeleteRemoveUserFromDefaultHubGroupAsync(string group, string user, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateDeleteRemoveUserFromDefaultHubGroupRequest(group, user);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Remove a user from the target group. </summary>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response DeleteRemoveUserFromDefaultHubGroup(string group, string user, CancellationToken cancellationToken = default)
        {
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateDeleteRemoveUserFromDefaultHubGroupRequest(group, user);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRemoveUserFromAllDefaultHubGroupsRequest(string user)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/users/", false);
            uri.AppendPath(user, true);
            uri.AppendPath("/groups", false);
            request.Uri = uri;
            return message;
        }

        /// <summary> Remove a user from all groups. </summary>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> DeleteRemoveUserFromAllDefaultHubGroupsAsync(string user, CancellationToken cancellationToken = default)
        {
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateDeleteRemoveUserFromAllDefaultHubGroupsRequest(user);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Remove a user from all groups. </summary>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response DeleteRemoveUserFromAllDefaultHubGroups(string user, CancellationToken cancellationToken = default)
        {
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateDeleteRemoveUserFromAllDefaultHubGroupsRequest(user);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetCheckUserExistenceRequest(string hub, string user)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(user, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Check if there are any client connections connected for the given user. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> GetCheckUserExistenceAsync(string hub, string user, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateGetCheckUserExistenceRequest(hub, user);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check if there are any client connections connected for the given user. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response GetCheckUserExistence(string hub, string user, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateGetCheckUserExistenceRequest(hub, user);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateHeadCheckUserExistenceRequest(string hub, string user)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(user, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Check if there are any client connections connected for the given user. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> HeadCheckUserExistenceAsync(string hub, string user, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateHeadCheckUserExistenceRequest(hub, user);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check if there are any client connections connected for the given user. </summary>
        /// <param name="hub"> The String to use. </param>
        /// <param name="user"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response HeadCheckUserExistence(string hub, string user, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateHeadCheckUserExistenceRequest(hub, user);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePutAddConnectionToGroupRequest(string hub, string group, string connectionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Add a connection to the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> PutAddConnectionToGroupAsync(string hub, string group, string connectionId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreatePutAddConnectionToGroupRequest(hub, group, connectionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Add a connection to the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PutAddConnectionToGroup(string hub, string group, string connectionId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreatePutAddConnectionToGroupRequest(hub, group, connectionId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRemoveConnectionFromGroupRequest(string hub, string group, string connectionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendPath("/connections/", false);
            uri.AppendPath(connectionId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Remove a connection from the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> DeleteRemoveConnectionFromGroupAsync(string hub, string group, string connectionId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateDeleteRemoveConnectionFromGroupRequest(hub, group, connectionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Remove a connection from the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="connectionId"> Target connection Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response DeleteRemoveConnectionFromGroup(string hub, string group, string connectionId, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (connectionId == null)
            {
                throw new ArgumentNullException(nameof(connectionId));
            }

            using var message = CreateDeleteRemoveConnectionFromGroupRequest(hub, group, connectionId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetCheckUserExistenceInGroupRequest(string hub, string group, string user)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(user, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Check whether a user exists in the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> GetCheckUserExistenceInGroupAsync(string hub, string group, string user, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateGetCheckUserExistenceInGroupRequest(hub, group, user);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check whether a user exists in the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response GetCheckUserExistenceInGroup(string hub, string group, string user, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateGetCheckUserExistenceInGroupRequest(hub, group, user);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateHeadCheckUserExistenceInGroupRequest(string hub, string group, string user)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(user, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Check whether a user exists in the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> HeadCheckUserExistenceInGroupAsync(string hub, string group, string user, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateHeadCheckUserExistenceInGroupRequest(hub, group, user);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Check whether a user exists in the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response HeadCheckUserExistenceInGroup(string hub, string group, string user, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateHeadCheckUserExistenceInGroupRequest(hub, group, user);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 400:
                case 404:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePutAddUserToGroupRequest(string hub, string group, string user, int? ttl)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(user, true);
            if (ttl != null)
            {
                uri.AppendQuery("ttl", ttl.Value, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> Add a user to the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="ttl"> Specifies the seconds that the user exists in the group. If not set, the user lives in the group forever. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> PutAddUserToGroupAsync(string hub, string group, string user, int? ttl = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreatePutAddUserToGroupRequest(hub, group, user, ttl);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Add a user to the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="ttl"> Specifies the seconds that the user exists in the group. If not set, the user lives in the group forever. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PutAddUserToGroup(string hub, string group, string user, int? ttl = null, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreatePutAddUserToGroupRequest(hub, group, user, ttl);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRemoveUserFromGroupRequest(string hub, string group, string user)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/groups/", false);
            uri.AppendPath(group, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(user, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Remove a user from the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> DeleteRemoveUserFromGroupAsync(string hub, string group, string user, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateDeleteRemoveUserFromGroupRequest(hub, group, user);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Remove a user from the target group. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response DeleteRemoveUserFromGroup(string hub, string group, string user, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (group == null)
            {
                throw new ArgumentNullException(nameof(group));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateDeleteRemoveUserFromGroupRequest(hub, group, user);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRemoveUserFromAllGroupsRequest(string hub, string user)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/ws/api/v1/hubs/", false);
            uri.AppendPath(hub, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(user, true);
            uri.AppendPath("/groups", false);
            request.Uri = uri;
            return message;
        }

        /// <summary> Remove a user from all groups. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> DeleteRemoveUserFromAllGroupsAsync(string hub, string user, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateDeleteRemoveUserFromAllGroupsRequest(hub, user);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Remove a user from all groups. </summary>
        /// <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
        /// <param name="user"> Target user Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response DeleteRemoveUserFromAllGroups(string hub, string user, CancellationToken cancellationToken = default)
        {
            if (hub == null)
            {
                throw new ArgumentNullException(nameof(hub));
            }
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            using var message = CreateDeleteRemoveUserFromAllGroupsRequest(hub, user);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                case 400:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
