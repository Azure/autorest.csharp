!<!CodeModel> 
info: !<!Info> 
  title: Azure WebSocket Service REST API
schemas: !<!Schemas> 
  numbers:
  - !<!NumberSchema> &ref_77
    type: integer
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    precision: 32
    language: !<!Languages> 
      default:
        name: Integer
        description: ''
    protocol: !<!Protocols> {}
  strings:
  - !<!StringSchema> &ref_0
    type: string
    language: !<!Languages> 
      default:
        name: String
        description: simple string
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_1
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    language: !<!Languages> 
      default:
        name: Post0ItemsItem
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_3
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    language: !<!Languages> 
      default:
        name: String
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_2
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    language: !<!Languages> 
      default:
        name: Post1ItemsItem
        description: ''
    protocol: !<!Protocols> {}
  - !<!StringSchema> &ref_4
    type: string
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    language: !<!Languages> 
      default:
        name: Post2ItemsItem
        description: ''
    protocol: !<!Protocols> {}
  constants:
  - !<!ConstantSchema> &ref_7
    type: constant
    value: !<!ConstantValue> 
      value: application/octet-stream
    valueType: *ref_0
    language: !<!Languages> 
      default:
        name: ApplicationOctetStream
        description: Content Type 'application/octet-stream'
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_10
    type: constant
    value: !<!ConstantValue> 
      value: text/plain
    valueType: *ref_0
    language: !<!Languages> 
      default:
        name: TextPlain
        description: Content Type 'text/plain'
    protocol: !<!Protocols> {}
  binaries:
  - !<!BinarySchema> &ref_8
    type: binary
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    language: !<!Languages> 
      default:
        name: binary
        description: ''
    protocol: !<!Protocols> {}
  - !<!BinarySchema> &ref_14
    type: binary
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    language: !<!Languages> 
      default:
        name: binary
        description: ''
    protocol: !<!Protocols> {}
  - !<!BinarySchema> &ref_19
    type: binary
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    language: !<!Languages> 
      default:
        name: binary
        description: ''
    protocol: !<!Protocols> {}
  - !<!BinarySchema> &ref_23
    type: binary
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    language: !<!Languages> 
      default:
        name: binary
        description: ''
    protocol: !<!Protocols> {}
  - !<!BinarySchema> &ref_28
    type: binary
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    language: !<!Languages> 
      default:
        name: binary
        description: ''
    protocol: !<!Protocols> {}
  - !<!BinarySchema> &ref_36
    type: binary
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    language: !<!Languages> 
      default:
        name: binary
        description: ''
    protocol: !<!Protocols> {}
  - !<!BinarySchema> &ref_49
    type: binary
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    language: !<!Languages> 
      default:
        name: binary
        description: ''
    protocol: !<!Protocols> {}
  - !<!BinarySchema> &ref_57
    type: binary
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    language: !<!Languages> 
      default:
        name: binary
        description: ''
    protocol: !<!Protocols> {}
  arrays:
  - !<!ArraySchema> &ref_6
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    elementType: *ref_1
    language: !<!Languages> 
      default:
        name: ArrayOfPost0ItemsItem
        description: Array of Post0ItemsItem
    protocol: !<!Protocols> {}
  - !<!ArraySchema> &ref_13
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    elementType: *ref_2
    language: !<!Languages> 
      default:
        name: ArrayOfPost1ItemsItem
        description: Array of Post1ItemsItem
    protocol: !<!Protocols> {}
  - !<!ArraySchema> &ref_48
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    elementType: *ref_3
    language: !<!Languages> 
      default:
        name: ArrayOfString
        description: Array of String
    protocol: !<!Protocols> {}
  - !<!ArraySchema> &ref_56
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    elementType: *ref_4
    language: !<!Languages> 
      default:
        name: ArrayOfPost2ItemsItem
        description: Array of Post2ItemsItem
    protocol: !<!Protocols> {}
globalParameters:
- !<!Parameter> &ref_5
  schema: *ref_0
  clientDefaultValue: ''
  implementation: Client
  origin: 'modelerfour:synthesized/host'
  required: true
  extensions:
    x-ms-skip-url-encoding: true
  language: !<!Languages> 
    default:
      name: $host
      description: server parameter
      serializedName: $host
  protocol: !<!Protocols> 
    http: !<!HttpParameter> 
      in: uri
operationGroups:
- !<!OperationGroup> 
  $key: HealthApi
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /api/v1/health
          method: head
          uri: '{$host}'
    signatureParameters: []
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '503'
    language: !<!Languages> 
      default:
        name: HeadIndex
        description: Get service health status.
        summary: Get service health status.
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: HealthApi
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: WebSocketConnectionApi
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_12
      schema: *ref_6
      implementation: Method
      language: !<!Languages> 
        default:
          name: excluded
          description: Excluded connection Ids
          serializedName: excluded
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> 
        schema: *ref_7
        implementation: Method
        origin: 'modelerfour:synthesized/content-type'
        required: true
        language: !<!Languages> 
          default:
            name: contentType
            description: Upload file type
            serializedName: Content-Type
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: header
      - !<!Parameter> &ref_9
        schema: *ref_8
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: data
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: binary
      signatureParameters:
      - *ref_9
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpBinaryRequest> 
          path: /ws/api/v1
          method: post
          binary: true
          knownMediaType: binary
          mediaTypes:
          - application/octet-stream
          uri: '{$host}'
    - !<!Request> 
      parameters:
      - !<!Parameter> 
        schema: *ref_10
        implementation: Method
        origin: 'modelerfour:synthesized/content-type'
        required: true
        language: !<!Languages> 
          default:
            name: contentType
            description: Upload file type
            serializedName: Content-Type
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: header
      - !<!Parameter> &ref_11
        schema: *ref_0
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: data
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: binary
      signatureParameters:
      - *ref_11
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpBinaryRequest> 
          path: /ws/api/v1
          method: post
          binary: true
          knownMediaType: text
          mediaTypes:
          - text/plain
          uri: '{$host}'
    signatureParameters:
    - *ref_12
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    language: !<!Languages> 
      default:
        name: PostDefaultHubBroadcast
        description: Broadcast content inside request body to all the connected to endpoint "/ws/client"
        summary: Broadcast content inside request body to all the connected to endpoint "/ws/client"
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_17
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: hub
          description: 'Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.'
          serializedName: hub
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_18
      schema: *ref_13
      implementation: Method
      language: !<!Languages> 
        default:
          name: excluded
          description: Excluded connection Ids
          serializedName: excluded
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> 
        schema: *ref_7
        implementation: Method
        origin: 'modelerfour:synthesized/content-type'
        required: true
        language: !<!Languages> 
          default:
            name: contentType
            description: Upload file type
            serializedName: Content-Type
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: header
      - !<!Parameter> &ref_15
        schema: *ref_14
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: data
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: binary
      signatureParameters:
      - *ref_15
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpBinaryRequest> 
          path: '/ws/api/v1/hubs/{hub}'
          method: post
          binary: true
          knownMediaType: binary
          mediaTypes:
          - application/octet-stream
          uri: '{$host}'
    - !<!Request> 
      parameters:
      - !<!Parameter> 
        schema: *ref_10
        implementation: Method
        origin: 'modelerfour:synthesized/content-type'
        required: true
        language: !<!Languages> 
          default:
            name: contentType
            description: Upload file type
            serializedName: Content-Type
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: header
      - !<!Parameter> &ref_16
        schema: *ref_0
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: data
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: binary
      signatureParameters:
      - *ref_16
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpBinaryRequest> 
          path: '/ws/api/v1/hubs/{hub}'
          method: post
          binary: true
          knownMediaType: text
          mediaTypes:
          - text/plain
          uri: '{$host}'
    signatureParameters:
    - *ref_17
    - *ref_18
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    language: !<!Languages> 
      default:
        name: PostBroadcast
        description: Broadcast content inside request body to all the connected connections in the same hub.
        summary: Broadcast content inside request body to all the connected connections in the same hub.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_22
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: id
          description: The user Id.
          serializedName: id
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> 
        schema: *ref_7
        implementation: Method
        origin: 'modelerfour:synthesized/content-type'
        required: true
        language: !<!Languages> 
          default:
            name: contentType
            description: Upload file type
            serializedName: Content-Type
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: header
      - !<!Parameter> &ref_20
        schema: *ref_19
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: data
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: binary
      signatureParameters:
      - *ref_20
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpBinaryRequest> 
          path: '/ws/api/v1/users/{id}'
          method: post
          binary: true
          knownMediaType: binary
          mediaTypes:
          - application/octet-stream
          uri: '{$host}'
    - !<!Request> 
      parameters:
      - !<!Parameter> 
        schema: *ref_10
        implementation: Method
        origin: 'modelerfour:synthesized/content-type'
        required: true
        language: !<!Languages> 
          default:
            name: contentType
            description: Upload file type
            serializedName: Content-Type
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: header
      - !<!Parameter> &ref_21
        schema: *ref_0
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: data
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: binary
      signatureParameters:
      - *ref_21
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpBinaryRequest> 
          path: '/ws/api/v1/users/{id}'
          method: post
          binary: true
          knownMediaType: text
          mediaTypes:
          - text/plain
          uri: '{$host}'
    signatureParameters:
    - *ref_22
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    language: !<!Languages> 
      default:
        name: PostSendToDefaultHubUser
        description: Send content inside request body to the specific user.
        summary: Send content inside request body to the specific user.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_26
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: hub
          description: 'Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.'
          serializedName: hub
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_27
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: id
          description: The user Id.
          serializedName: id
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> 
        schema: *ref_7
        implementation: Method
        origin: 'modelerfour:synthesized/content-type'
        required: true
        language: !<!Languages> 
          default:
            name: contentType
            description: Upload file type
            serializedName: Content-Type
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: header
      - !<!Parameter> &ref_24
        schema: *ref_23
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: data
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: binary
      signatureParameters:
      - *ref_24
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpBinaryRequest> 
          path: '/ws/api/v1/hubs/{hub}/users/{id}'
          method: post
          binary: true
          knownMediaType: binary
          mediaTypes:
          - application/octet-stream
          uri: '{$host}'
    - !<!Request> 
      parameters:
      - !<!Parameter> 
        schema: *ref_10
        implementation: Method
        origin: 'modelerfour:synthesized/content-type'
        required: true
        language: !<!Languages> 
          default:
            name: contentType
            description: Upload file type
            serializedName: Content-Type
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: header
      - !<!Parameter> &ref_25
        schema: *ref_0
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: data
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: binary
      signatureParameters:
      - *ref_25
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpBinaryRequest> 
          path: '/ws/api/v1/hubs/{hub}/users/{id}'
          method: post
          binary: true
          knownMediaType: text
          mediaTypes:
          - text/plain
          uri: '{$host}'
    signatureParameters:
    - *ref_26
    - *ref_27
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    language: !<!Languages> 
      default:
        name: PostSendToUser
        description: Send content inside request body to the specific user.
        summary: Send content inside request body to the specific user.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_31
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: connectionId
          description: The connection Id.
          serializedName: connectionId
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> 
        schema: *ref_7
        implementation: Method
        origin: 'modelerfour:synthesized/content-type'
        required: true
        language: !<!Languages> 
          default:
            name: contentType
            description: Upload file type
            serializedName: Content-Type
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: header
      - !<!Parameter> &ref_29
        schema: *ref_28
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: data
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: binary
      signatureParameters:
      - *ref_29
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpBinaryRequest> 
          path: '/ws/api/v1/connections/{connectionId}'
          method: post
          binary: true
          knownMediaType: binary
          mediaTypes:
          - application/octet-stream
          uri: '{$host}'
    - !<!Request> 
      parameters:
      - !<!Parameter> 
        schema: *ref_10
        implementation: Method
        origin: 'modelerfour:synthesized/content-type'
        required: true
        language: !<!Languages> 
          default:
            name: contentType
            description: Upload file type
            serializedName: Content-Type
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: header
      - !<!Parameter> &ref_30
        schema: *ref_0
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: data
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: binary
      signatureParameters:
      - *ref_30
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpBinaryRequest> 
          path: '/ws/api/v1/connections/{connectionId}'
          method: post
          binary: true
          knownMediaType: text
          mediaTypes:
          - text/plain
          uri: '{$host}'
    signatureParameters:
    - *ref_31
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    language: !<!Languages> 
      default:
        name: PostSendToDefaultHubConnection
        description: Send content inside request body to the specific connection.
        summary: Send content inside request body to the specific connection.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_32
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: connectionId
          description: ''
          serializedName: connectionId
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/connections/{connectionId}'
          method: get
          uri: '{$host}'
    signatureParameters:
    - *ref_32
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '404'
    language: !<!Languages> 
      default:
        name: GetCheckDefaultHubConnectionExistence
        description: Check if the connection with the given connectionId exists
        summary: Check if the connection with the given connectionId exists
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_33
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: connectionId
          description: ''
          serializedName: connectionId
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/connections/{connectionId}'
          method: head
          uri: '{$host}'
    signatureParameters:
    - *ref_33
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '404'
    language: !<!Languages> 
      default:
        name: HeadCheckDefaultHubConnectionExistence
        description: Check if the connection with the given connectionId exists
        summary: Check if the connection with the given connectionId exists
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_34
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: connectionId
          description: ''
          serializedName: connectionId
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_35
      schema: *ref_3
      implementation: Method
      language: !<!Languages> 
        default:
          name: reason
          description: ''
          serializedName: reason
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/connections/{connectionId}'
          method: delete
          uri: '{$host}'
    signatureParameters:
    - *ref_34
    - *ref_35
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    language: !<!Languages> 
      default:
        name: DeleteCloseDefaultHubClientConnection
        description: Close the client connection
        summary: Close the client connection
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_39
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: hub
          description: 'Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.'
          serializedName: hub
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_40
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: connectionId
          description: The connection Id.
          serializedName: connectionId
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> 
        schema: *ref_7
        implementation: Method
        origin: 'modelerfour:synthesized/content-type'
        required: true
        language: !<!Languages> 
          default:
            name: contentType
            description: Upload file type
            serializedName: Content-Type
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: header
      - !<!Parameter> &ref_37
        schema: *ref_36
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: data
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: binary
      signatureParameters:
      - *ref_37
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpBinaryRequest> 
          path: '/ws/api/v1/hubs/{hub}/connections/{connectionId}'
          method: post
          binary: true
          knownMediaType: binary
          mediaTypes:
          - application/octet-stream
          uri: '{$host}'
    - !<!Request> 
      parameters:
      - !<!Parameter> 
        schema: *ref_10
        implementation: Method
        origin: 'modelerfour:synthesized/content-type'
        required: true
        language: !<!Languages> 
          default:
            name: contentType
            description: Upload file type
            serializedName: Content-Type
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: header
      - !<!Parameter> &ref_38
        schema: *ref_0
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: data
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: binary
      signatureParameters:
      - *ref_38
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpBinaryRequest> 
          path: '/ws/api/v1/hubs/{hub}/connections/{connectionId}'
          method: post
          binary: true
          knownMediaType: text
          mediaTypes:
          - text/plain
          uri: '{$host}'
    signatureParameters:
    - *ref_39
    - *ref_40
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    language: !<!Languages> 
      default:
        name: PostSendToConnection
        description: Send content inside request body to the specific connection.
        summary: Send content inside request body to the specific connection.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_41
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: hub
          description: ''
          serializedName: hub
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_42
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: connectionId
          description: ''
          serializedName: connectionId
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/hubs/{hub}/connections/{connectionId}'
          method: get
          uri: '{$host}'
    signatureParameters:
    - *ref_41
    - *ref_42
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '404'
    language: !<!Languages> 
      default:
        name: GetCheckConnectionExistence
        description: Check if the connection with the given connectionId exists
        summary: Check if the connection with the given connectionId exists
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_43
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: hub
          description: ''
          serializedName: hub
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_44
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: connectionId
          description: ''
          serializedName: connectionId
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/hubs/{hub}/connections/{connectionId}'
          method: head
          uri: '{$host}'
    signatureParameters:
    - *ref_43
    - *ref_44
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '404'
    language: !<!Languages> 
      default:
        name: HeadCheckConnectionExistence
        description: Check if the connection with the given connectionId exists
        summary: Check if the connection with the given connectionId exists
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_45
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: hub
          description: ''
          serializedName: hub
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_46
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: connectionId
          description: ''
          serializedName: connectionId
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_47
      schema: *ref_3
      implementation: Method
      language: !<!Languages> 
        default:
          name: reason
          description: ''
          serializedName: reason
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/hubs/{hub}/connections/{connectionId}'
          method: delete
          uri: '{$host}'
    signatureParameters:
    - *ref_45
    - *ref_46
    - *ref_47
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    language: !<!Languages> 
      default:
        name: DeleteCloseClientConnection
        description: Close the client connection
        summary: Close the client connection
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_52
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: group
          description: 'Target group name, which length should be greater than 0 and less than 1025.'
          serializedName: group
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_53
      schema: *ref_48
      implementation: Method
      language: !<!Languages> 
        default:
          name: excluded
          description: Excluded connection Ids
          serializedName: excluded
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> 
        schema: *ref_7
        implementation: Method
        origin: 'modelerfour:synthesized/content-type'
        required: true
        language: !<!Languages> 
          default:
            name: contentType
            description: Upload file type
            serializedName: Content-Type
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: header
      - !<!Parameter> &ref_50
        schema: *ref_49
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: data
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: binary
      signatureParameters:
      - *ref_50
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpBinaryRequest> 
          path: '/ws/api/v1/groups/{group}'
          method: post
          binary: true
          knownMediaType: binary
          mediaTypes:
          - application/octet-stream
          uri: '{$host}'
    - !<!Request> 
      parameters:
      - !<!Parameter> 
        schema: *ref_10
        implementation: Method
        origin: 'modelerfour:synthesized/content-type'
        required: true
        language: !<!Languages> 
          default:
            name: contentType
            description: Upload file type
            serializedName: Content-Type
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: header
      - !<!Parameter> &ref_51
        schema: *ref_0
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: data
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: binary
      signatureParameters:
      - *ref_51
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpBinaryRequest> 
          path: '/ws/api/v1/groups/{group}'
          method: post
          binary: true
          knownMediaType: text
          mediaTypes:
          - text/plain
          uri: '{$host}'
    signatureParameters:
    - *ref_52
    - *ref_53
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    language: !<!Languages> 
      default:
        name: PostDefaultHubGroupBroadcast
        description: Send content inside request body to a group of connections.
        summary: Send content inside request body to a group of connections.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_54
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: group
          description: ''
          serializedName: group
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/groups/{group}'
          method: get
          uri: '{$host}'
    signatureParameters:
    - *ref_54
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '404'
    language: !<!Languages> 
      default:
        name: GetCheckDefaultHubGroupExistence
        description: Check if there are any client connections inside the given group
        summary: Check if there are any client connections inside the given group
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_55
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: group
          description: ''
          serializedName: group
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/groups/{group}'
          method: head
          uri: '{$host}'
    signatureParameters:
    - *ref_55
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '404'
    language: !<!Languages> 
      default:
        name: HeadCheckDefaultHubGroupExistence
        description: Check if there are any client connections inside the given group
        summary: Check if there are any client connections inside the given group
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_60
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: hub
          description: 'Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.'
          serializedName: hub
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_61
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: group
          description: 'Target group name, which length should be greater than 0 and less than 1025.'
          serializedName: group
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_62
      schema: *ref_56
      implementation: Method
      language: !<!Languages> 
        default:
          name: excluded
          description: Excluded connection Ids
          serializedName: excluded
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    requests:
    - !<!Request> 
      parameters:
      - !<!Parameter> 
        schema: *ref_7
        implementation: Method
        origin: 'modelerfour:synthesized/content-type'
        required: true
        language: !<!Languages> 
          default:
            name: contentType
            description: Upload file type
            serializedName: Content-Type
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: header
      - !<!Parameter> &ref_58
        schema: *ref_57
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: data
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: binary
      signatureParameters:
      - *ref_58
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpBinaryRequest> 
          path: '/ws/api/v1/hubs/{hub}/groups/{group}'
          method: post
          binary: true
          knownMediaType: binary
          mediaTypes:
          - application/octet-stream
          uri: '{$host}'
    - !<!Request> 
      parameters:
      - !<!Parameter> 
        schema: *ref_10
        implementation: Method
        origin: 'modelerfour:synthesized/content-type'
        required: true
        language: !<!Languages> 
          default:
            name: contentType
            description: Upload file type
            serializedName: Content-Type
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: header
      - !<!Parameter> &ref_59
        schema: *ref_0
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: data
            description: ''
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: body
            style: binary
      signatureParameters:
      - *ref_59
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpBinaryRequest> 
          path: '/ws/api/v1/hubs/{hub}/groups/{group}'
          method: post
          binary: true
          knownMediaType: text
          mediaTypes:
          - text/plain
          uri: '{$host}'
    signatureParameters:
    - *ref_60
    - *ref_61
    - *ref_62
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    language: !<!Languages> 
      default:
        name: PostGroupBroadcast
        description: Send content inside request body to a group of connections.
        summary: Send content inside request body to a group of connections.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_63
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: hub
          description: ''
          serializedName: hub
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_64
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: group
          description: ''
          serializedName: group
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/hubs/{hub}/groups/{group}'
          method: get
          uri: '{$host}'
    signatureParameters:
    - *ref_63
    - *ref_64
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '404'
    language: !<!Languages> 
      default:
        name: GetCheckGroupExistence
        description: Check if there are any client connections inside the given group
        summary: Check if there are any client connections inside the given group
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_65
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: hub
          description: ''
          serializedName: hub
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_66
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: group
          description: ''
          serializedName: group
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/hubs/{hub}/groups/{group}'
          method: head
          uri: '{$host}'
    signatureParameters:
    - *ref_65
    - *ref_66
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '404'
    language: !<!Languages> 
      default:
        name: HeadCheckGroupExistence
        description: Check if there are any client connections inside the given group
        summary: Check if there are any client connections inside the given group
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_67
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: user
          description: ''
          serializedName: user
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/users/{user}'
          method: get
          uri: '{$host}'
    signatureParameters:
    - *ref_67
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '404'
    language: !<!Languages> 
      default:
        name: GetCheckDefaultHubUserExistence
        description: Check if there are any client connections connected for the given user
        summary: Check if there are any client connections connected for the given user
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_68
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: user
          description: ''
          serializedName: user
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/users/{user}'
          method: head
          uri: '{$host}'
    signatureParameters:
    - *ref_68
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '404'
    language: !<!Languages> 
      default:
        name: HeadCheckDefaultHubUserExistence
        description: Check if there are any client connections connected for the given user
        summary: Check if there are any client connections connected for the given user
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_69
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: group
          description: 'Target group name, which length should be greater than 0 and less than 1025.'
          serializedName: group
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_70
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: connectionId
          description: Target connection Id
          serializedName: connectionId
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/groups/{group}/connections/{connectionId}'
          method: put
          uri: '{$host}'
    signatureParameters:
    - *ref_69
    - *ref_70
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '404'
    language: !<!Languages> 
      default:
        name: PutAddConnectionToDefaultHubGroup
        description: Add a connection to the target group.
        summary: Add a connection to the target group.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_71
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: group
          description: 'Target group name, which length should be greater than 0 and less than 1025.'
          serializedName: group
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_72
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: connectionId
          description: Target connection Id
          serializedName: connectionId
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/groups/{group}/connections/{connectionId}'
          method: delete
          uri: '{$host}'
    signatureParameters:
    - *ref_71
    - *ref_72
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '404'
    language: !<!Languages> 
      default:
        name: DeleteRemoveConnectionFromDefaultHubGroup
        description: Remove a connection from the target group.
        summary: Remove a connection from the target group.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_73
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: group
          description: 'Target group name, which length should be greater than 0 and less than 1025.'
          serializedName: group
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_74
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: user
          description: Target user Id
          serializedName: user
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/groups/{group}/users/{user}'
          method: get
          uri: '{$host}'
    signatureParameters:
    - *ref_73
    - *ref_74
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '404'
    language: !<!Languages> 
      default:
        name: GetCheckUserExistenceInDefaultHubGroup
        description: Check whether a user exists in the target group.
        summary: Check whether a user exists in the target group.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_75
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: group
          description: 'Target group name, which length should be greater than 0 and less than 1025.'
          serializedName: group
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_76
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: user
          description: Target user Id
          serializedName: user
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/groups/{group}/users/{user}'
          method: head
          uri: '{$host}'
    signatureParameters:
    - *ref_75
    - *ref_76
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '404'
    language: !<!Languages> 
      default:
        name: HeadCheckUserExistenceInDefaultHubGroup
        description: Check whether a user exists in the target group.
        summary: Check whether a user exists in the target group.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_78
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: group
          description: 'Target group name, which length should be greater than 0 and less than 1025.'
          serializedName: group
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_79
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: user
          description: Target user Id
          serializedName: user
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_80
      schema: *ref_77
      implementation: Method
      language: !<!Languages> 
        default:
          name: ttl
          description: 'Specifies the seconds that the user exists in the group. If not set, the user lives in the group forever.'
          serializedName: ttl
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/groups/{group}/users/{user}'
          method: put
          uri: '{$host}'
    signatureParameters:
    - *ref_78
    - *ref_79
    - *ref_80
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    language: !<!Languages> 
      default:
        name: PutAddUserToDefaultHubGroup
        description: Add a user to the target group.
        summary: Add a user to the target group.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_81
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: group
          description: 'Target group name, which length should be greater than 0 and less than 1025.'
          serializedName: group
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_82
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: user
          description: Target user Id
          serializedName: user
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/groups/{group}/users/{user}'
          method: delete
          uri: '{$host}'
    signatureParameters:
    - *ref_81
    - *ref_82
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    language: !<!Languages> 
      default:
        name: DeleteRemoveUserFromDefaultHubGroup
        description: Remove a user from the target group.
        summary: Remove a user from the target group.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_83
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: user
          description: Target user Id
          serializedName: user
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/users/{user}/groups'
          method: delete
          uri: '{$host}'
    signatureParameters:
    - *ref_83
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    language: !<!Languages> 
      default:
        name: DeleteRemoveUserFromAllDefaultHubGroups
        description: Remove a user from all groups.
        summary: Remove a user from all groups.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_84
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: hub
          description: ''
          serializedName: hub
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_85
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: user
          description: ''
          serializedName: user
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/hubs/{hub}/users/{user}'
          method: get
          uri: '{$host}'
    signatureParameters:
    - *ref_84
    - *ref_85
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '404'
    language: !<!Languages> 
      default:
        name: GetCheckUserExistence
        description: Check if there are any client connections connected for the given user
        summary: Check if there are any client connections connected for the given user
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_86
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: hub
          description: ''
          serializedName: hub
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_87
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: user
          description: ''
          serializedName: user
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/hubs/{hub}/users/{user}'
          method: head
          uri: '{$host}'
    signatureParameters:
    - *ref_86
    - *ref_87
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '404'
    language: !<!Languages> 
      default:
        name: HeadCheckUserExistence
        description: Check if there are any client connections connected for the given user
        summary: Check if there are any client connections connected for the given user
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_88
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: hub
          description: 'Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.'
          serializedName: hub
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_89
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: group
          description: 'Target group name, which length should be greater than 0 and less than 1025.'
          serializedName: group
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_90
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: connectionId
          description: Target connection Id
          serializedName: connectionId
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/hubs/{hub}/groups/{group}/connections/{connectionId}'
          method: put
          uri: '{$host}'
    signatureParameters:
    - *ref_88
    - *ref_89
    - *ref_90
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '404'
    language: !<!Languages> 
      default:
        name: PutAddConnectionToGroup
        description: Add a connection to the target group.
        summary: Add a connection to the target group.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_91
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: hub
          description: 'Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.'
          serializedName: hub
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_92
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: group
          description: 'Target group name, which length should be greater than 0 and less than 1025.'
          serializedName: group
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_93
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: connectionId
          description: Target connection Id
          serializedName: connectionId
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/hubs/{hub}/groups/{group}/connections/{connectionId}'
          method: delete
          uri: '{$host}'
    signatureParameters:
    - *ref_91
    - *ref_92
    - *ref_93
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '404'
    language: !<!Languages> 
      default:
        name: DeleteRemoveConnectionFromGroup
        description: Remove a connection from the target group.
        summary: Remove a connection from the target group.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_94
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: hub
          description: 'Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.'
          serializedName: hub
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_95
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: group
          description: 'Target group name, which length should be greater than 0 and less than 1025.'
          serializedName: group
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_96
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: user
          description: Target user Id
          serializedName: user
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/hubs/{hub}/groups/{group}/users/{user}'
          method: get
          uri: '{$host}'
    signatureParameters:
    - *ref_94
    - *ref_95
    - *ref_96
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '404'
    language: !<!Languages> 
      default:
        name: GetCheckUserExistenceInGroup
        description: Check whether a user exists in the target group.
        summary: Check whether a user exists in the target group.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_97
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: hub
          description: 'Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.'
          serializedName: hub
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_98
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: group
          description: 'Target group name, which length should be greater than 0 and less than 1025.'
          serializedName: group
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_99
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: user
          description: Target user Id
          serializedName: user
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/hubs/{hub}/groups/{group}/users/{user}'
          method: head
          uri: '{$host}'
    signatureParameters:
    - *ref_97
    - *ref_98
    - *ref_99
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '404'
    language: !<!Languages> 
      default:
        name: HeadCheckUserExistenceInGroup
        description: Check whether a user exists in the target group.
        summary: Check whether a user exists in the target group.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_100
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: hub
          description: 'Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.'
          serializedName: hub
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_101
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: group
          description: 'Target group name, which length should be greater than 0 and less than 1025.'
          serializedName: group
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_102
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: user
          description: Target user Id
          serializedName: user
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_103
      schema: *ref_77
      implementation: Method
      language: !<!Languages> 
        default:
          name: ttl
          description: 'Specifies the seconds that the user exists in the group. If not set, the user lives in the group forever.'
          serializedName: ttl
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: query
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/hubs/{hub}/groups/{group}/users/{user}'
          method: put
          uri: '{$host}'
    signatureParameters:
    - *ref_100
    - *ref_101
    - *ref_102
    - *ref_103
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    language: !<!Languages> 
      default:
        name: PutAddUserToGroup
        description: Add a user to the target group.
        summary: Add a user to the target group.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_104
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: hub
          description: 'Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.'
          serializedName: hub
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_105
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: group
          description: 'Target group name, which length should be greater than 0 and less than 1025.'
          serializedName: group
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_106
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: user
          description: Target user Id
          serializedName: user
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/hubs/{hub}/groups/{group}/users/{user}'
          method: delete
          uri: '{$host}'
    signatureParameters:
    - *ref_104
    - *ref_105
    - *ref_106
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    language: !<!Languages> 
      default:
        name: DeleteRemoveUserFromGroup
        description: Remove a user from the target group.
        summary: Remove a user from the target group.
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: v1
    parameters:
    - *ref_5
    - !<!Parameter> &ref_107
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: hub
          description: 'Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.'
          serializedName: hub
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    - !<!Parameter> &ref_108
      schema: *ref_3
      implementation: Method
      required: true
      language: !<!Languages> 
        default:
          name: user
          description: Target user Id
          serializedName: user
      protocol: !<!Protocols> 
        http: !<!HttpParameter> 
          in: path
    requests:
    - !<!Request> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/ws/api/v1/hubs/{hub}/users/{user}/groups'
          method: delete
          uri: '{$host}'
    signatureParameters:
    - *ref_107
    - *ref_108
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '202'
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    language: !<!Languages> 
      default:
        name: DeleteRemoveUserFromAllGroups
        description: Remove a user from all groups.
        summary: Remove a user from all groups.
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: WebSocketConnectionApi
      description: ''
  protocol: !<!Protocols> {}
security: !<!Security> 
  authenticationRequired: true
language: !<!Languages> 
  default:
    name: AzureWebSocketServiceRestAPI
    description: ''
protocol: !<!Protocols> 
  http: !<!HttpModel> {}
