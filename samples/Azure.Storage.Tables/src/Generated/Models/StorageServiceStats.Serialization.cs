// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.Storage.Tables.Models
{
    public partial class StorageServiceStats : IXmlSerializable, IPersistableModel<StorageServiceStats>
    {
        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "StorageServiceStats");
            if (Optional.IsDefined(GeoReplication))
            {
                writer.WriteObjectValue(GeoReplication, "GeoReplication");
            }
            writer.WriteEndElement();
        }

        internal static StorageServiceStats DeserializeStorageServiceStats(XElement element, ModelReaderWriterOptions options = null)
        {
            GeoReplication geoReplication = default;
            if (element.Element("GeoReplication") is XElement geoReplicationElement)
            {
                geoReplication = GeoReplication.DeserializeGeoReplication(geoReplicationElement);
            }
            return new StorageServiceStats(geoReplication, default);
        }

        BinaryData IPersistableModel<StorageServiceStats>.Write(ModelReaderWriterOptions options)
        {
            bool implementsJson = this is IJsonModel<StorageServiceStats>;
            bool isValid = options.Format == "J" && implementsJson || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {GetType().Name} does not support '{options.Format}' format.");
            }

            using MemoryStream stream = new MemoryStream();
            using XmlWriter writer = XmlWriter.Create(stream);
            ((IXmlSerializable)this).Write(writer, null);
            writer.Flush();
            if (stream.Position > int.MaxValue)
            {
                return BinaryData.FromStream(stream);
            }
            else
            {
                return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
            }
        }

        StorageServiceStats IPersistableModel<StorageServiceStats>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(StorageServiceStats)} does not support '{options.Format}' format.");
            }

            return DeserializeStorageServiceStats(XElement.Load(data.ToStream()), options);
        }

        string IPersistableModel<StorageServiceStats>.GetFormatFromOptions(ModelReaderWriterOptions options) => "X";
    }
}
