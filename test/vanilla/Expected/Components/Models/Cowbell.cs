// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Fixtures.Components.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// New description.
    /// </summary>
    public partial class Cowbell
    {
        /// <summary>
        /// Initializes a new instance of the Cowbell class.
        /// </summary>
        public Cowbell()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Cowbell class.
        /// </summary>
        /// <param name="patentNumber">deprecated property, do not use
        /// anymore</param>
        /// <param name="nname">old typo, please do not use anymore</param>
        public Cowbell(string name, int? patentNumber = default(int?), string nname = default(string), string awesomeness = default(string), int? coolness = default(int?), long? id = default(long?))
        {
            PatentNumber = patentNumber;
            Nname = nname;
            Awesomeness = awesomeness;
            Coolness = coolness;
            Id = id;
            Name = name;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets deprecated property, do not use anymore
        /// </summary>
        [Newtonsoft.Json.JsonIgnore]
        public int? PatentNumber { get; set; }

        /// <summary>
        /// Gets or sets old typo, please do not use anymore
        /// </summary>
        [Newtonsoft.Json.JsonIgnore]
        public string Nname
        {
            get { return Name; }
            set { Name = value; }
        }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonIgnore]
        public string Awesomeness
        {
        get { return "language agnostic"; } set { /*nop*/ }
        }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonIgnore]
        public int? Coolness
        {
        get { return 42; /* "language specific"*/ } set { /*nop*/ }
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public long? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
