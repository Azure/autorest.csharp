// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Fixtures.ExtensibleEnums.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for IntEnum.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(IntEnumConverter))]
    public struct IntEnum : System.IEquatable<IntEnum>
    {
        private IntEnum(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// one
        /// </summary>
        public static readonly IntEnum One = "1";

        /// <summary>
        /// two
        /// </summary>
        public static readonly IntEnum Two = "2";

        /// <summary>
        /// three
        /// </summary>
        public static readonly IntEnum Three = "3";


        /// <summary>
        /// Determine base value for a given allowed value if exists, else
        /// return the value itself
        /// </summary>
        private static string GetBaseValueForAllowedValue(string value)
        {
            switch(value)
            {
                case "1.1":
                case "1.2":
                case "1.3":
                    return "1";
                case "2.1":
                case "2.2":
                    return "2";
                case "3.1":
                case "3.3":
                    return "3";
                default:
                    return value;
            }
        }

        /// <summary>
        /// Underlying value of enum IntEnum
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for IntEnum
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type IntEnum
        /// </summary>
        public bool Equals(IntEnum e)
        {
            return GetBaseValueForAllowedValue(e.UnderlyingValue).Equals(GetBaseValueForAllowedValue(UnderlyingValue));
        }

        /// <summary>
        /// Implicit operator to convert string to IntEnum
        /// </summary>
        public static implicit operator IntEnum(string value)
        {
            return new IntEnum(value);
        }

        /// <summary>
        /// Implicit operator to convert IntEnum to string
        /// </summary>
        public static implicit operator string(IntEnum e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum IntEnum
        /// </summary>
        public static bool operator == (IntEnum e1, IntEnum e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum IntEnum
        /// </summary>
        public static bool operator != (IntEnum e1, IntEnum e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for IntEnum
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is IntEnum && Equals((IntEnum)obj);
        }

        /// <summary>
        /// Returns for hashCode IntEnum
        /// </summary>
        public override int GetHashCode()
        {
            return GetBaseValueForAllowedValue(UnderlyingValue).GetHashCode();
        }

    }
}
