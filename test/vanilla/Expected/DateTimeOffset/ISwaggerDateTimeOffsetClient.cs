// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.DateTimeOffset
{
    using Models;
    using Newtonsoft.Json;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// A sample API that tests datetimeoffset usage for date-time
    /// </summary>
    public partial interface ISwaggerDateTimeOffsetClient : System.IDisposable
    {
        /// <summary>
        /// Gets or sets the base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets JSON serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets JSON deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


        /// <summary>
        /// Product Types
        /// </summary>
        /// <param name='responseCode'>
        /// The desired returned status code
        /// </param>
        /// <param name='product'>
        /// The only parameter
        /// </param>
        Product GetProduct(string responseCode = default(string), Product product = default(Product));

        /// <summary>
        /// Product Types
        /// </summary>
        /// <param name='responseCode'>
        /// The desired returned status code
        /// </param>
        /// <param name='product'>
        /// The only parameter
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> GetProductAsync(string responseCode = default(string), Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Product Types
        /// </summary>
        /// <param name='responseCode'>
        /// The desired returned status code
        /// </param>
        /// <param name='product'>
        /// The only parameter
        /// </param>
        Product PutProduct(string responseCode = default(string), Product product = default(Product));

        /// <summary>
        /// Product Types
        /// </summary>
        /// <param name='responseCode'>
        /// The desired returned status code
        /// </param>
        /// <param name='product'>
        /// The only parameter
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> PutProductAsync(string responseCode = default(string), Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Product Types
        /// </summary>
        /// <param name='responseCode'>
        /// The desired returned status code
        /// </param>
        /// <param name='product'>
        /// The only parameter
        /// </param>
        Product PostProduct(string responseCode = default(string), Product product = default(Product));

        /// <summary>
        /// Product Types
        /// </summary>
        /// <param name='responseCode'>
        /// The desired returned status code
        /// </param>
        /// <param name='product'>
        /// The only parameter
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> PostProductAsync(string responseCode = default(string), Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Product Types
        /// </summary>
        /// <param name='responseCode'>
        /// The desired returned status code
        /// </param>
        /// <param name='product'>
        /// The only parameter
        /// </param>
        Product PatchProduct(string responseCode = default(string), Product product = default(Product));

        /// <summary>
        /// Product Types
        /// </summary>
        /// <param name='responseCode'>
        /// The desired returned status code
        /// </param>
        /// <param name='product'>
        /// The only parameter
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> PatchProductAsync(string responseCode = default(string), Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
    }
}
