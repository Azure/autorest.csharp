// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Fixtures.BodyDictionary
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Dictionary.
    /// </summary>
    public static partial class DictionaryExtensions
    {
            /// <summary>
            /// Get null dictionary value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, int?> GetNull(this IDictionary operations)
            {
                return operations.GetNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get null dictionary value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, int?>> GetNullAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get empty dictionary value {}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, int?> GetEmpty(this IDictionary operations)
            {
                return operations.GetEmptyAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get empty dictionary value {}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, int?>> GetEmptyAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEmptyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set dictionary value empty {}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutEmpty(this IDictionary operations, IDictionary<string, string> arrayBody)
            {
                operations.PutEmptyAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set dictionary value empty {}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutEmptyAsync(this IDictionary operations, IDictionary<string, string> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutEmptyWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get Dictionary with null value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, string> GetNullValue(this IDictionary operations)
            {
                return operations.GetNullValueAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Dictionary with null value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, string>> GetNullValueAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNullValueWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Dictionary with null key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, string> GetNullKey(this IDictionary operations)
            {
                return operations.GetNullKeyAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Dictionary with null key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, string>> GetNullKeyAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNullKeyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Dictionary with key as empty string
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, string> GetEmptyStringKey(this IDictionary operations)
            {
                return operations.GetEmptyStringKeyAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Dictionary with key as empty string
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, string>> GetEmptyStringKeyAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEmptyStringKeyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get invalid Dictionary value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, string> GetInvalid(this IDictionary operations)
            {
                return operations.GetInvalidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get invalid Dictionary value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, string>> GetInvalidAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInvalidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get boolean dictionary value {"0": true, "1": false, "2": false, "3": true
            /// }
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, bool?> GetBooleanTfft(this IDictionary operations)
            {
                return operations.GetBooleanTfftAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get boolean dictionary value {"0": true, "1": false, "2": false, "3": true
            /// }
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, bool?>> GetBooleanTfftAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBooleanTfftWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set dictionary value empty {"0": true, "1": false, "2": false, "3": true }
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutBooleanTfft(this IDictionary operations, IDictionary<string, bool?> arrayBody)
            {
                operations.PutBooleanTfftAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set dictionary value empty {"0": true, "1": false, "2": false, "3": true }
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutBooleanTfftAsync(this IDictionary operations, IDictionary<string, bool?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutBooleanTfftWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get boolean dictionary value {"0": true, "1": null, "2": false }
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, bool?> GetBooleanInvalidNull(this IDictionary operations)
            {
                return operations.GetBooleanInvalidNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get boolean dictionary value {"0": true, "1": null, "2": false }
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, bool?>> GetBooleanInvalidNullAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBooleanInvalidNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get boolean dictionary value '{"0": true, "1": "boolean", "2": false}'
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, bool?> GetBooleanInvalidString(this IDictionary operations)
            {
                return operations.GetBooleanInvalidStringAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get boolean dictionary value '{"0": true, "1": "boolean", "2": false}'
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, bool?>> GetBooleanInvalidStringAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBooleanInvalidStringWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, int?> GetIntegerValid(this IDictionary operations)
            {
                return operations.GetIntegerValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, int?>> GetIntegerValidAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIntegerValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutIntegerValid(this IDictionary operations, IDictionary<string, int?> arrayBody)
            {
                operations.PutIntegerValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutIntegerValidAsync(this IDictionary operations, IDictionary<string, int?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutIntegerValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get integer dictionary value {"0": 1, "1": null, "2": 0}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, int?> GetIntInvalidNull(this IDictionary operations)
            {
                return operations.GetIntInvalidNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get integer dictionary value {"0": 1, "1": null, "2": 0}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, int?>> GetIntInvalidNullAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIntInvalidNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get integer dictionary value {"0": 1, "1": "integer", "2": 0}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, int?> GetIntInvalidString(this IDictionary operations)
            {
                return operations.GetIntInvalidStringAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get integer dictionary value {"0": 1, "1": "integer", "2": 0}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, int?>> GetIntInvalidStringAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIntInvalidStringWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, long?> GetLongValid(this IDictionary operations)
            {
                return operations.GetLongValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, long?>> GetLongValidAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLongValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutLongValid(this IDictionary operations, IDictionary<string, long?> arrayBody)
            {
                operations.PutLongValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutLongValidAsync(this IDictionary operations, IDictionary<string, long?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutLongValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get long dictionary value {"0": 1, "1": null, "2": 0}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, long?> GetLongInvalidNull(this IDictionary operations)
            {
                return operations.GetLongInvalidNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get long dictionary value {"0": 1, "1": null, "2": 0}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, long?>> GetLongInvalidNullAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLongInvalidNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get long dictionary value {"0": 1, "1": "integer", "2": 0}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, long?> GetLongInvalidString(this IDictionary operations)
            {
                return operations.GetLongInvalidStringAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get long dictionary value {"0": 1, "1": "integer", "2": 0}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, long?>> GetLongInvalidStringAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLongInvalidStringWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, double?> GetFloatValid(this IDictionary operations)
            {
                return operations.GetFloatValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, double?>> GetFloatValidAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFloatValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutFloatValid(this IDictionary operations, IDictionary<string, double?> arrayBody)
            {
                operations.PutFloatValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutFloatValidAsync(this IDictionary operations, IDictionary<string, double?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutFloatValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, double?> GetFloatInvalidNull(this IDictionary operations)
            {
                return operations.GetFloatInvalidNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, double?>> GetFloatInvalidNullAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFloatInvalidNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, double?> GetFloatInvalidString(this IDictionary operations)
            {
                return operations.GetFloatInvalidStringAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, double?>> GetFloatInvalidStringAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFloatInvalidStringWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, double?> GetDoubleValid(this IDictionary operations)
            {
                return operations.GetDoubleValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, double?>> GetDoubleValidAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDoubleValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutDoubleValid(this IDictionary operations, IDictionary<string, double?> arrayBody)
            {
                operations.PutDoubleValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutDoubleValidAsync(this IDictionary operations, IDictionary<string, double?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutDoubleValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, double?> GetDoubleInvalidNull(this IDictionary operations)
            {
                return operations.GetDoubleInvalidNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, double?>> GetDoubleInvalidNullAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDoubleInvalidNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, double?> GetDoubleInvalidString(this IDictionary operations)
            {
                return operations.GetDoubleInvalidStringAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, double?>> GetDoubleInvalidStringAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDoubleInvalidStringWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get string dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, string> GetStringValid(this IDictionary operations)
            {
                return operations.GetStringValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get string dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, string>> GetStringValidAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStringValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutStringValid(this IDictionary operations, IDictionary<string, string> arrayBody)
            {
                operations.PutStringValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutStringValidAsync(this IDictionary operations, IDictionary<string, string> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutStringValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get string dictionary value {"0": "foo", "1": null, "2": "foo2"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, string> GetStringWithNull(this IDictionary operations)
            {
                return operations.GetStringWithNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get string dictionary value {"0": "foo", "1": null, "2": "foo2"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, string>> GetStringWithNullAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStringWithNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get string dictionary value {"0": "foo", "1": 123, "2": "foo2"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, string> GetStringWithInvalid(this IDictionary operations)
            {
                return operations.GetStringWithInvalidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get string dictionary value {"0": "foo", "1": 123, "2": "foo2"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, string>> GetStringWithInvalidAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStringWithInvalidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get integer dictionary value {"0": "2000-12-01", "1": "1980-01-02", "2":
            /// "1492-10-12"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, System.DateTime?> GetDateValid(this IDictionary operations)
            {
                return operations.GetDateValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get integer dictionary value {"0": "2000-12-01", "1": "1980-01-02", "2":
            /// "1492-10-12"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, System.DateTime?>> GetDateValidAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDateValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set dictionary value  {"0": "2000-12-01", "1": "1980-01-02", "2":
            /// "1492-10-12"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutDateValid(this IDictionary operations, IDictionary<string, System.DateTime?> arrayBody)
            {
                operations.PutDateValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set dictionary value  {"0": "2000-12-01", "1": "1980-01-02", "2":
            /// "1492-10-12"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutDateValidAsync(this IDictionary operations, IDictionary<string, System.DateTime?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutDateValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get date dictionary value {"0": "2012-01-01", "1": null, "2": "1776-07-04"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, System.DateTime?> GetDateInvalidNull(this IDictionary operations)
            {
                return operations.GetDateInvalidNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get date dictionary value {"0": "2012-01-01", "1": null, "2": "1776-07-04"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, System.DateTime?>> GetDateInvalidNullAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDateInvalidNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get date dictionary value {"0": "2011-03-22", "1": "date"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, System.DateTime?> GetDateInvalidChars(this IDictionary operations)
            {
                return operations.GetDateInvalidCharsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get date dictionary value {"0": "2011-03-22", "1": "date"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, System.DateTime?>> GetDateInvalidCharsAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDateInvalidCharsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get date-time dictionary value {"0": "2000-12-01t00:00:01z", "1":
            /// "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, System.DateTime?> GetDateTimeValid(this IDictionary operations)
            {
                return operations.GetDateTimeValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get date-time dictionary value {"0": "2000-12-01t00:00:01z", "1":
            /// "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, System.DateTime?>> GetDateTimeValidAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDateTimeValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set dictionary value  {"0": "2000-12-01t00:00:01z", "1":
            /// "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutDateTimeValid(this IDictionary operations, IDictionary<string, System.DateTime?> arrayBody)
            {
                operations.PutDateTimeValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set dictionary value  {"0": "2000-12-01t00:00:01z", "1":
            /// "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutDateTimeValidAsync(this IDictionary operations, IDictionary<string, System.DateTime?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutDateTimeValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": null}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, System.DateTime?> GetDateTimeInvalidNull(this IDictionary operations)
            {
                return operations.GetDateTimeInvalidNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": null}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, System.DateTime?>> GetDateTimeInvalidNullAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDateTimeInvalidNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": "date-time"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, System.DateTime?> GetDateTimeInvalidChars(this IDictionary operations)
            {
                return operations.GetDateTimeInvalidCharsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": "date-time"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, System.DateTime?>> GetDateTimeInvalidCharsAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDateTimeInvalidCharsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get date-time-rfc1123 dictionary value {"0": "Fri, 01 Dec 2000 00:00:01
            /// GMT", "1": "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01
            /// GMT"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, System.DateTime?> GetDateTimeRfc1123Valid(this IDictionary operations)
            {
                return operations.GetDateTimeRfc1123ValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get date-time-rfc1123 dictionary value {"0": "Fri, 01 Dec 2000 00:00:01
            /// GMT", "1": "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01
            /// GMT"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, System.DateTime?>> GetDateTimeRfc1123ValidAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDateTimeRfc1123ValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set dictionary value empty {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1":
            /// "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutDateTimeRfc1123Valid(this IDictionary operations, IDictionary<string, System.DateTime?> arrayBody)
            {
                operations.PutDateTimeRfc1123ValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set dictionary value empty {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1":
            /// "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutDateTimeRfc1123ValidAsync(this IDictionary operations, IDictionary<string, System.DateTime?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutDateTimeRfc1123ValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get duration dictionary value {"0": "P123DT22H14M12.011S", "1":
            /// "P5DT1H0M0S"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, System.TimeSpan?> GetDurationValid(this IDictionary operations)
            {
                return operations.GetDurationValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get duration dictionary value {"0": "P123DT22H14M12.011S", "1":
            /// "P5DT1H0M0S"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, System.TimeSpan?>> GetDurationValidAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDurationValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set dictionary value  {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutDurationValid(this IDictionary operations, IDictionary<string, System.TimeSpan?> arrayBody)
            {
                operations.PutDurationValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set dictionary value  {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutDurationValidAsync(this IDictionary operations, IDictionary<string, System.TimeSpan?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutDurationValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get byte dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2":
            /// hex (25, 29, 43)} with each item encoded in base64
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, byte[]> GetByteValid(this IDictionary operations)
            {
                return operations.GetByteValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get byte dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2":
            /// hex (25, 29, 43)} with each item encoded in base64
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, byte[]>> GetByteValidAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByteValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Put the dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2":
            /// hex (25, 29, 43)} with each elementencoded in base 64
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutByteValid(this IDictionary operations, IDictionary<string, byte[]> arrayBody)
            {
                operations.PutByteValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Put the dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2":
            /// hex (25, 29, 43)} with each elementencoded in base 64
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutByteValidAsync(this IDictionary operations, IDictionary<string, byte[]> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutByteValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get byte dictionary value {"0": hex(FF FF FF FA), "1": null} with the first
            /// item base64 encoded
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, byte[]> GetByteInvalidNull(this IDictionary operations)
            {
                return operations.GetByteInvalidNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get byte dictionary value {"0": hex(FF FF FF FA), "1": null} with the first
            /// item base64 encoded
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, byte[]>> GetByteInvalidNullAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByteInvalidNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get base64url dictionary value {"0": "a string that gets encoded with
            /// base64url", "1": "test string", "2": "Lorem ipsum"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, byte[]> GetBase64Url(this IDictionary operations)
            {
                return operations.GetBase64UrlAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get base64url dictionary value {"0": "a string that gets encoded with
            /// base64url", "1": "test string", "2": "Lorem ipsum"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, byte[]>> GetBase64UrlAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBase64UrlWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get dictionary of complex type null value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, Widget> GetComplexNull(this IDictionary operations)
            {
                return operations.GetComplexNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get dictionary of complex type null value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, Widget>> GetComplexNullAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetComplexNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get empty dictionary of complex type {}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, Widget> GetComplexEmpty(this IDictionary operations)
            {
                return operations.GetComplexEmptyAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get empty dictionary of complex type {}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, Widget>> GetComplexEmptyAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetComplexEmptyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get dictionary of complex type with null item {"0": {"integer": 1,
            /// "string": "2"}, "1": null, "2": {"integer": 5, "string": "6"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, Widget> GetComplexItemNull(this IDictionary operations)
            {
                return operations.GetComplexItemNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get dictionary of complex type with null item {"0": {"integer": 1,
            /// "string": "2"}, "1": null, "2": {"integer": 5, "string": "6"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, Widget>> GetComplexItemNullAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetComplexItemNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get dictionary of complex type with empty item {"0": {"integer": 1,
            /// "string": "2"}, "1:" {}, "2": {"integer": 5, "string": "6"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, Widget> GetComplexItemEmpty(this IDictionary operations)
            {
                return operations.GetComplexItemEmptyAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get dictionary of complex type with empty item {"0": {"integer": 1,
            /// "string": "2"}, "1:" {}, "2": {"integer": 5, "string": "6"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, Widget>> GetComplexItemEmptyAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetComplexItemEmptyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get dictionary of complex type with {"0": {"integer": 1, "string": "2"},
            /// "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, Widget> GetComplexValid(this IDictionary operations)
            {
                return operations.GetComplexValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get dictionary of complex type with {"0": {"integer": 1, "string": "2"},
            /// "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, Widget>> GetComplexValidAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetComplexValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Put an dictionary of complex type with values {"0": {"integer": 1,
            /// "string": "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5,
            /// "string": "6"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutComplexValid(this IDictionary operations, IDictionary<string, Widget> arrayBody)
            {
                operations.PutComplexValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Put an dictionary of complex type with values {"0": {"integer": 1,
            /// "string": "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5,
            /// "string": "6"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutComplexValidAsync(this IDictionary operations, IDictionary<string, Widget> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutComplexValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a null array
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, IList<string>> GetArrayNull(this IDictionary operations)
            {
                return operations.GetArrayNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a null array
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, IList<string>>> GetArrayNullAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetArrayNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an empty dictionary {}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, IList<string>> GetArrayEmpty(this IDictionary operations)
            {
                return operations.GetArrayEmptyAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an empty dictionary {}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, IList<string>>> GetArrayEmptyAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetArrayEmptyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an dictionary of array of strings {"0": ["1", "2", "3"], "1": null,
            /// "2": ["7", "8", "9"]}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, IList<string>> GetArrayItemNull(this IDictionary operations)
            {
                return operations.GetArrayItemNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an dictionary of array of strings {"0": ["1", "2", "3"], "1": null,
            /// "2": ["7", "8", "9"]}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, IList<string>>> GetArrayItemNullAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetArrayItemNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an array of array of strings [{"0": ["1", "2", "3"], "1": [], "2":
            /// ["7", "8", "9"]}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, IList<string>> GetArrayItemEmpty(this IDictionary operations)
            {
                return operations.GetArrayItemEmptyAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an array of array of strings [{"0": ["1", "2", "3"], "1": [], "2":
            /// ["7", "8", "9"]}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, IList<string>>> GetArrayItemEmptyAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetArrayItemEmptyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5",
            /// "6"], "2": ["7", "8", "9"]}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, IList<string>> GetArrayValid(this IDictionary operations)
            {
                return operations.GetArrayValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5",
            /// "6"], "2": ["7", "8", "9"]}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, IList<string>>> GetArrayValidAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetArrayValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Put An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5",
            /// "6"], "2": ["7", "8", "9"]}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutArrayValid(this IDictionary operations, IDictionary<string, IList<string>> arrayBody)
            {
                operations.PutArrayValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Put An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5",
            /// "6"], "2": ["7", "8", "9"]}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutArrayValidAsync(this IDictionary operations, IDictionary<string, IList<string>> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutArrayValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get an dictionaries of dictionaries with value null
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, IDictionary<string, string>> GetDictionaryNull(this IDictionary operations)
            {
                return operations.GetDictionaryNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an dictionaries of dictionaries with value null
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, IDictionary<string, string>>> GetDictionaryNullAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDictionaryNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with
            /// value {}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, IDictionary<string, string>> GetDictionaryEmpty(this IDictionary operations)
            {
                return operations.GetDictionaryEmptyAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with
            /// value {}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, IDictionary<string, string>>> GetDictionaryEmptyAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDictionaryEmptyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with
            /// value {"0": {"1": "one", "2": "two", "3": "three"}, "1": null, "2": {"7":
            /// "seven", "8": "eight", "9": "nine"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, IDictionary<string, string>> GetDictionaryItemNull(this IDictionary operations)
            {
                return operations.GetDictionaryItemNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with
            /// value {"0": {"1": "one", "2": "two", "3": "three"}, "1": null, "2": {"7":
            /// "seven", "8": "eight", "9": "nine"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, IDictionary<string, string>>> GetDictionaryItemNullAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDictionaryItemNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with
            /// value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {}, "2": {"7":
            /// "seven", "8": "eight", "9": "nine"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, IDictionary<string, string>> GetDictionaryItemEmpty(this IDictionary operations)
            {
                return operations.GetDictionaryItemEmptyAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with
            /// value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {}, "2": {"7":
            /// "seven", "8": "eight", "9": "nine"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, IDictionary<string, string>>> GetDictionaryItemEmptyAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDictionaryItemEmptyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with
            /// value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5":
            /// "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, IDictionary<string, string>> GetDictionaryValid(this IDictionary operations)
            {
                return operations.GetDictionaryValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with
            /// value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5":
            /// "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, IDictionary<string, string>>> GetDictionaryValidAsync(this IDictionary operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDictionaryValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with
            /// value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5":
            /// "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutDictionaryValid(this IDictionary operations, IDictionary<string, IDictionary<string, string>> arrayBody)
            {
                operations.PutDictionaryValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with
            /// value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5":
            /// "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutDictionaryValidAsync(this IDictionary operations, IDictionary<string, IDictionary<string, string>> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutDictionaryValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
