// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsCompositeBoolIntClient
{
    using Microsoft.Rest;
    using Models;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// IntModel operations.
    /// </summary>
    public partial class IntModel : IIntModel
    {
        /// <summary>
        /// Initializes a new instance of the IntModel class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public IntModel(IIntModelWithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private IIntModelWithHttpMessages OperationsWithHttpMessages { get; set; }

        public IIntModelWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Get null Int value
        /// </summary>
        public int? GetNull()
        {
            return GetNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get null Int value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<int?> GetNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get invalid Int value
        /// </summary>
        public int? GetInvalid()
        {
            return GetInvalidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get invalid Int value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<int?> GetInvalidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetInvalidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get overflow Int32 value
        /// </summary>
        public int? GetOverflowInt32()
        {
            return GetOverflowInt32Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get overflow Int32 value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<int?> GetOverflowInt32Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetOverflowInt32Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get underflow Int32 value
        /// </summary>
        public int? GetUnderflowInt32()
        {
            return GetUnderflowInt32Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get underflow Int32 value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<int?> GetUnderflowInt32Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetUnderflowInt32Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get overflow Int64 value
        /// </summary>
        public long? GetOverflowInt64()
        {
            return GetOverflowInt64Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get overflow Int64 value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<long?> GetOverflowInt64Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetOverflowInt64Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get underflow Int64 value
        /// </summary>
        public long? GetUnderflowInt64()
        {
            return GetUnderflowInt64Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get underflow Int64 value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<long?> GetUnderflowInt64Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetUnderflowInt64Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put max int32 value
        /// </summary>
        /// <param name='intBody'>
        /// </param>
        public void PutMax32(int intBody)
        {
            PutMax32Async(intBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put max int32 value
        /// </summary>
        /// <param name='intBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutMax32Async(int intBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutMax32Async(intBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Put max int64 value
        /// </summary>
        /// <param name='intBody'>
        /// </param>
        public void PutMax64(long intBody)
        {
            PutMax64Async(intBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put max int64 value
        /// </summary>
        /// <param name='intBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutMax64Async(long intBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutMax64Async(intBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Put min int32 value
        /// </summary>
        /// <param name='intBody'>
        /// </param>
        public void PutMin32(int intBody)
        {
            PutMin32Async(intBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put min int32 value
        /// </summary>
        /// <param name='intBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutMin32Async(int intBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutMin32Async(intBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Put min int64 value
        /// </summary>
        /// <param name='intBody'>
        /// </param>
        public void PutMin64(long intBody)
        {
            PutMin64Async(intBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put min int64 value
        /// </summary>
        /// <param name='intBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutMin64Async(long intBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutMin64Async(intBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get datetime encoded as Unix time value
        /// </summary>
        public System.DateTime? GetUnixTime()
        {
            return GetUnixTimeAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get datetime encoded as Unix time value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<System.DateTime?> GetUnixTimeAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetUnixTimeAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put datetime encoded as Unix time
        /// </summary>
        /// <param name='intBody'>
        /// </param>
        public void PutUnixTimeDate(System.DateTime intBody)
        {
            PutUnixTimeDateAsync(intBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put datetime encoded as Unix time
        /// </summary>
        /// <param name='intBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutUnixTimeDateAsync(System.DateTime intBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutUnixTimeDateAsync(intBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get invalid Unix time value
        /// </summary>
        public System.DateTime? GetInvalidUnixTime()
        {
            return GetInvalidUnixTimeAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get invalid Unix time value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<System.DateTime?> GetInvalidUnixTimeAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetInvalidUnixTimeAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get null Unix time value
        /// </summary>
        public System.DateTime? GetNullUnixTime()
        {
            return GetNullUnixTimeAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get null Unix time value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<System.DateTime?> GetNullUnixTimeAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetNullUnixTimeAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

    }
}
