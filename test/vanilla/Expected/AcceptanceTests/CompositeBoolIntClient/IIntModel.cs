// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsCompositeBoolIntClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// IntModel operations.
    /// </summary>
    public partial interface IIntModel
    {
        IIntModelWithHttpMessages WithHttpMessages();

        /// <summary>
        /// Get null Int value
        /// </summary>
        int? GetNull();

        /// <summary>
        /// Get null Int value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<int?> GetNullAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get invalid Int value
        /// </summary>
        int? GetInvalid();

        /// <summary>
        /// Get invalid Int value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<int?> GetInvalidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get overflow Int32 value
        /// </summary>
        int? GetOverflowInt32();

        /// <summary>
        /// Get overflow Int32 value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<int?> GetOverflowInt32Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get underflow Int32 value
        /// </summary>
        int? GetUnderflowInt32();

        /// <summary>
        /// Get underflow Int32 value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<int?> GetUnderflowInt32Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get overflow Int64 value
        /// </summary>
        long? GetOverflowInt64();

        /// <summary>
        /// Get overflow Int64 value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<long?> GetOverflowInt64Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get underflow Int64 value
        /// </summary>
        long? GetUnderflowInt64();

        /// <summary>
        /// Get underflow Int64 value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<long?> GetUnderflowInt64Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put max int32 value
        /// </summary>
        /// <param name='intBody'>
        /// </param>
        void PutMax32(int intBody);

        /// <summary>
        /// Put max int32 value
        /// </summary>
        /// <param name='intBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutMax32Async(int intBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put max int64 value
        /// </summary>
        /// <param name='intBody'>
        /// </param>
        void PutMax64(long intBody);

        /// <summary>
        /// Put max int64 value
        /// </summary>
        /// <param name='intBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutMax64Async(long intBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put min int32 value
        /// </summary>
        /// <param name='intBody'>
        /// </param>
        void PutMin32(int intBody);

        /// <summary>
        /// Put min int32 value
        /// </summary>
        /// <param name='intBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutMin32Async(int intBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put min int64 value
        /// </summary>
        /// <param name='intBody'>
        /// </param>
        void PutMin64(long intBody);

        /// <summary>
        /// Put min int64 value
        /// </summary>
        /// <param name='intBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutMin64Async(long intBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get datetime encoded as Unix time value
        /// </summary>
        System.DateTime? GetUnixTime();

        /// <summary>
        /// Get datetime encoded as Unix time value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<System.DateTime?> GetUnixTimeAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put datetime encoded as Unix time
        /// </summary>
        /// <param name='intBody'>
        /// </param>
        void PutUnixTimeDate(System.DateTime intBody);

        /// <summary>
        /// Put datetime encoded as Unix time
        /// </summary>
        /// <param name='intBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutUnixTimeDateAsync(System.DateTime intBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get invalid Unix time value
        /// </summary>
        System.DateTime? GetInvalidUnixTime();

        /// <summary>
        /// Get invalid Unix time value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<System.DateTime?> GetInvalidUnixTimeAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get null Unix time value
        /// </summary>
        System.DateTime? GetNullUnixTime();

        /// <summary>
        /// Get null Unix time value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<System.DateTime?> GetNullUnixTimeAsync(CancellationToken cancellationToken = default(CancellationToken));
    }
}
