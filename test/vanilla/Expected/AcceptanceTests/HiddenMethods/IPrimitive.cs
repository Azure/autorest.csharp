// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsHiddenMethods
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Primitive operations.
    /// </summary>
    public partial interface IPrimitive
    {
        IPrimitiveWithHttpMessages WithHttpMessages();

        /// <summary>
        /// Get complex types with integer properties
        /// </summary>
        IntWrapper GetInt();

        /// <summary>
        /// Get complex types with integer properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<IntWrapper> GetIntAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put complex types with integer properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put -1 and 2
        /// </param>
        void PutInt(IntWrapper complexBody);

        /// <summary>
        /// Put complex types with integer properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put -1 and 2
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutIntAsync(IntWrapper complexBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get complex types with long properties
        /// </summary>
        LongWrapper GetLong();

        /// <summary>
        /// Get complex types with long properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LongWrapper> GetLongAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put complex types with long properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 1099511627775 and -999511627788
        /// </param>
        void PutLong(LongWrapper complexBody);

        /// <summary>
        /// Put complex types with long properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 1099511627775 and -999511627788
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutLongAsync(LongWrapper complexBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get complex types with float properties
        /// </summary>
        FloatWrapper GetFloat();

        /// <summary>
        /// Get complex types with float properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<FloatWrapper> GetFloatAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put complex types with float properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 1.05 and -0.003
        /// </param>
        void PutFloat(FloatWrapper complexBody);

        /// <summary>
        /// Put complex types with float properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 1.05 and -0.003
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutFloatAsync(FloatWrapper complexBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get complex types with double properties
        /// </summary>
        DoubleWrapper GetDouble();

        /// <summary>
        /// Get complex types with double properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<DoubleWrapper> GetDoubleAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put complex types with double properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005
        /// </param>
        void PutDouble(DoubleWrapper complexBody);

        /// <summary>
        /// Put complex types with double properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutDoubleAsync(DoubleWrapper complexBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get complex types with bool properties
        /// </summary>
        BooleanWrapper GetBool();

        /// <summary>
        /// Get complex types with bool properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<BooleanWrapper> GetBoolAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put complex types with bool properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put true and false
        /// </param>
        void PutBool(BooleanWrapper complexBody);

        /// <summary>
        /// Put complex types with bool properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put true and false
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutBoolAsync(BooleanWrapper complexBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get complex types with string properties
        /// </summary>
        StringWrapper GetString();

        /// <summary>
        /// Get complex types with string properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<StringWrapper> GetStringAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put complex types with string properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 'goodrequest', '', and null
        /// </param>
        void PutString(StringWrapper complexBody);

        /// <summary>
        /// Put complex types with string properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 'goodrequest', '', and null
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutStringAsync(StringWrapper complexBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get complex types with date properties
        /// </summary>
        DateWrapper GetDate();

        /// <summary>
        /// Get complex types with date properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<DateWrapper> GetDateAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put complex types with date properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put '0001-01-01' and '2016-02-29'
        /// </param>
        void PutDate(DateWrapper complexBody);

        /// <summary>
        /// Put complex types with date properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put '0001-01-01' and '2016-02-29'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutDateAsync(DateWrapper complexBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get complex types with datetime properties
        /// </summary>
        DatetimeWrapper GetDateTime();

        /// <summary>
        /// Get complex types with datetime properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<DatetimeWrapper> GetDateTimeAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put complex types with datetime properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put '0001-01-01T12:00:00-04:00' and '2015-05-18T11:38:00-08:00'
        /// </param>
        void PutDateTime(DatetimeWrapper complexBody);

        /// <summary>
        /// Put complex types with datetime properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put '0001-01-01T12:00:00-04:00' and '2015-05-18T11:38:00-08:00'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutDateTimeAsync(DatetimeWrapper complexBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get complex types with datetimeRfc1123 properties
        /// </summary>
        Datetimerfc1123Wrapper GetDateTimeRfc1123();

        /// <summary>
        /// Get complex types with datetimeRfc1123 properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Datetimerfc1123Wrapper> GetDateTimeRfc1123Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put complex types with datetimeRfc1123 properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 'Mon, 01 Jan 0001 12:00:00 GMT' and 'Mon, 18 May 2015 11:38:00 GMT'
        /// </param>
        void PutDateTimeRfc1123(Datetimerfc1123Wrapper complexBody);

        /// <summary>
        /// Put complex types with datetimeRfc1123 properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 'Mon, 01 Jan 0001 12:00:00 GMT' and 'Mon, 18 May 2015 11:38:00 GMT'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutDateTimeRfc1123Async(Datetimerfc1123Wrapper complexBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get complex types with duration properties
        /// </summary>
        DurationWrapper GetDuration();

        /// <summary>
        /// Get complex types with duration properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<DurationWrapper> GetDurationAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put complex types with duration properties
        /// </summary>
        /// <param name='field'>
        /// </param>
        void PutDuration(System.TimeSpan? field = default(System.TimeSpan?));

        /// <summary>
        /// Put complex types with duration properties
        /// </summary>
        /// <param name='field'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutDurationAsync(System.TimeSpan? field = default(System.TimeSpan?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get complex types with byte properties
        /// </summary>
        ByteWrapper GetByte();

        /// <summary>
        /// Get complex types with byte properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ByteWrapper> GetByteAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put complex types with byte properties
        /// </summary>
        /// <param name='field'>
        /// </param>
        void PutByte(byte[] field = default(byte[]));

        /// <summary>
        /// Put complex types with byte properties
        /// </summary>
        /// <param name='field'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutByteAsync(byte[] field = default(byte[]), CancellationToken cancellationToken = default(CancellationToken));
    }
}
