// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsHiddenMethods
{
    using Microsoft.Rest;
    using Models;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Primitive operations.
    /// </summary>
    public partial class Primitive : IPrimitive
    {
        /// <summary>
        /// Initializes a new instance of the Primitive class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public Primitive(IPrimitiveWithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private IPrimitiveWithHttpMessages OperationsWithHttpMessages { get; set; }

        public IPrimitiveWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Get complex types with integer properties
        /// </summary>
        public IntWrapper GetInt()
        {
            return GetIntAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get complex types with integer properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IntWrapper> GetIntAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetIntAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put complex types with integer properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put -1 and 2
        /// </param>
        public void PutInt(IntWrapper complexBody)
        {
            PutIntAsync(complexBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put complex types with integer properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put -1 and 2
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutIntAsync(IntWrapper complexBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutIntAsync(complexBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get complex types with long properties
        /// </summary>
        public LongWrapper GetLong()
        {
            return GetLongAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get complex types with long properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LongWrapper> GetLongAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetLongAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put complex types with long properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 1099511627775 and -999511627788
        /// </param>
        public void PutLong(LongWrapper complexBody)
        {
            PutLongAsync(complexBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put complex types with long properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 1099511627775 and -999511627788
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutLongAsync(LongWrapper complexBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutLongAsync(complexBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get complex types with float properties
        /// </summary>
        public FloatWrapper GetFloat()
        {
            return GetFloatAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get complex types with float properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<FloatWrapper> GetFloatAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetFloatAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put complex types with float properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 1.05 and -0.003
        /// </param>
        public void PutFloat(FloatWrapper complexBody)
        {
            PutFloatAsync(complexBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put complex types with float properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 1.05 and -0.003
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutFloatAsync(FloatWrapper complexBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutFloatAsync(complexBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get complex types with double properties
        /// </summary>
        public DoubleWrapper GetDouble()
        {
            return GetDoubleAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get complex types with double properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<DoubleWrapper> GetDoubleAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDoubleAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put complex types with double properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005
        /// </param>
        public void PutDouble(DoubleWrapper complexBody)
        {
            PutDoubleAsync(complexBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put complex types with double properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutDoubleAsync(DoubleWrapper complexBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutDoubleAsync(complexBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get complex types with bool properties
        /// </summary>
        public BooleanWrapper GetBool()
        {
            return GetBoolAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get complex types with bool properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<BooleanWrapper> GetBoolAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetBoolAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put complex types with bool properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put true and false
        /// </param>
        public void PutBool(BooleanWrapper complexBody)
        {
            PutBoolAsync(complexBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put complex types with bool properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put true and false
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutBoolAsync(BooleanWrapper complexBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutBoolAsync(complexBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get complex types with string properties
        /// </summary>
        public StringWrapper GetString()
        {
            return GetStringAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get complex types with string properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<StringWrapper> GetStringAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetStringAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put complex types with string properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 'goodrequest', '', and null
        /// </param>
        public void PutString(StringWrapper complexBody)
        {
            PutStringAsync(complexBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put complex types with string properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 'goodrequest', '', and null
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutStringAsync(StringWrapper complexBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutStringAsync(complexBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get complex types with date properties
        /// </summary>
        public DateWrapper GetDate()
        {
            return GetDateAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get complex types with date properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<DateWrapper> GetDateAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDateAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put complex types with date properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put '0001-01-01' and '2016-02-29'
        /// </param>
        public void PutDate(DateWrapper complexBody)
        {
            PutDateAsync(complexBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put complex types with date properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put '0001-01-01' and '2016-02-29'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutDateAsync(DateWrapper complexBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutDateAsync(complexBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get complex types with datetime properties
        /// </summary>
        public DatetimeWrapper GetDateTime()
        {
            return GetDateTimeAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get complex types with datetime properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<DatetimeWrapper> GetDateTimeAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDateTimeAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put complex types with datetime properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put '0001-01-01T12:00:00-04:00' and '2015-05-18T11:38:00-08:00'
        /// </param>
        public void PutDateTime(DatetimeWrapper complexBody)
        {
            PutDateTimeAsync(complexBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put complex types with datetime properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put '0001-01-01T12:00:00-04:00' and '2015-05-18T11:38:00-08:00'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutDateTimeAsync(DatetimeWrapper complexBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutDateTimeAsync(complexBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get complex types with datetimeRfc1123 properties
        /// </summary>
        public Datetimerfc1123Wrapper GetDateTimeRfc1123()
        {
            return GetDateTimeRfc1123Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get complex types with datetimeRfc1123 properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Datetimerfc1123Wrapper> GetDateTimeRfc1123Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDateTimeRfc1123Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put complex types with datetimeRfc1123 properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 'Mon, 01 Jan 0001 12:00:00 GMT' and 'Mon, 18 May 2015 11:38:00 GMT'
        /// </param>
        public void PutDateTimeRfc1123(Datetimerfc1123Wrapper complexBody)
        {
            PutDateTimeRfc1123Async(complexBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put complex types with datetimeRfc1123 properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 'Mon, 01 Jan 0001 12:00:00 GMT' and 'Mon, 18 May 2015 11:38:00 GMT'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutDateTimeRfc1123Async(Datetimerfc1123Wrapper complexBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutDateTimeRfc1123Async(complexBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get complex types with duration properties
        /// </summary>
        public DurationWrapper GetDuration()
        {
            return GetDurationAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get complex types with duration properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<DurationWrapper> GetDurationAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDurationAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put complex types with duration properties
        /// </summary>
        /// <param name='field'>
        /// </param>
        public void PutDuration(System.TimeSpan? field = default(System.TimeSpan?))
        {
            PutDurationAsync(field).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put complex types with duration properties
        /// </summary>
        /// <param name='field'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutDurationAsync(System.TimeSpan? field = default(System.TimeSpan?), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutDurationAsync(field, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get complex types with byte properties
        /// </summary>
        public ByteWrapper GetByte()
        {
            return GetByteAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get complex types with byte properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ByteWrapper> GetByteAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetByteAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put complex types with byte properties
        /// </summary>
        /// <param name='field'>
        /// </param>
        public void PutByte(byte[] field = default(byte[]))
        {
            PutByteAsync(field).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put complex types with byte properties
        /// </summary>
        /// <param name='field'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutByteAsync(byte[] field = default(byte[]), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutByteAsync(field, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

    }
}
