// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsHiddenMethods
{
    using Microsoft.Rest;
    using Models;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Readonlyproperty operations.
    /// </summary>
    public partial class Readonlyproperty : IReadonlyproperty
    {
        /// <summary>
        /// Initializes a new instance of the Readonlyproperty class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public Readonlyproperty(IReadonlypropertyWithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private IReadonlypropertyWithHttpMessages OperationsWithHttpMessages { get; set; }

        public IReadonlypropertyWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Get complex types that have readonly properties
        /// </summary>
        public ReadonlyObj GetValid()
        {
            return GetValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get complex types that have readonly properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ReadonlyObj> GetValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put complex types that have readonly properties
        /// </summary>
        /// <param name='size'>
        /// </param>
        public void PutValid(int? size = default(int?))
        {
            PutValidAsync(size).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put complex types that have readonly properties
        /// </summary>
        /// <param name='size'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutValidAsync(int? size = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutValidAsync(size, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

    }
}
