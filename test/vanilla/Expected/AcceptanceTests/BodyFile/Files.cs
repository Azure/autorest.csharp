// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsBodyFile
{
    using Microsoft.Rest;
    using Models;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Files operations.
    /// </summary>
    public partial class Files : IFiles
    {
        /// <summary>
        /// Initializes a new instance of the Files class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public Files(IFilesWithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private IFilesWithHttpMessages OperationsWithHttpMessages { get; set; }

        public IFilesWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Get file
        /// </summary>
        public Stream GetFile()
        {
            return GetFileAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get file
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Stream> GetFileAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var _result = await OperationsWithHttpMessages.GetFileAsync(null, cancellationToken).ConfigureAwait(false);
            _result.Request.Dispose();
            return _result.Body;
        }

        /// <summary>
        /// Get a large file
        /// </summary>
        public Stream GetFileLarge()
        {
            return GetFileLargeAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a large file
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Stream> GetFileLargeAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var _result = await OperationsWithHttpMessages.GetFileLargeAsync(null, cancellationToken).ConfigureAwait(false);
            _result.Request.Dispose();
            return _result.Body;
        }

        /// <summary>
        /// Get empty file
        /// </summary>
        public Stream GetEmptyFile()
        {
            return GetEmptyFileAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get empty file
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Stream> GetEmptyFileAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var _result = await OperationsWithHttpMessages.GetEmptyFileAsync(null, cancellationToken).ConfigureAwait(false);
            _result.Request.Dispose();
            return _result.Body;
        }

    }
}
