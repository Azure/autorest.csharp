// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsBodyDictionary
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Dictionary operations.
    /// </summary>
    public partial class Dictionary : IDictionary
    {
        /// <summary>
        /// Initializes a new instance of the Dictionary class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public Dictionary(IDictionaryWithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private IDictionaryWithHttpMessages OperationsWithHttpMessages { get; set; }

        public IDictionaryWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Get null dictionary value
        /// </summary>
        public IDictionary<string, int?> GetNull()
        {
            return GetNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get null dictionary value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, int?>> GetNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get empty dictionary value {}
        /// </summary>
        public IDictionary<string, int?> GetEmpty()
        {
            return GetEmptyAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get empty dictionary value {}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, int?>> GetEmptyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetEmptyAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set dictionary value empty {}
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutEmpty(IDictionary<string, string> arrayBody)
        {
            PutEmptyAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set dictionary value empty {}
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutEmptyAsync(IDictionary<string, string> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutEmptyAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get Dictionary with null value
        /// </summary>
        public IDictionary<string, string> GetNullValue()
        {
            return GetNullValueAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get Dictionary with null value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, string>> GetNullValueAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetNullValueAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get Dictionary with null key
        /// </summary>
        public IDictionary<string, string> GetNullKey()
        {
            return GetNullKeyAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get Dictionary with null key
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, string>> GetNullKeyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetNullKeyAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get Dictionary with key as empty string
        /// </summary>
        public IDictionary<string, string> GetEmptyStringKey()
        {
            return GetEmptyStringKeyAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get Dictionary with key as empty string
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, string>> GetEmptyStringKeyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetEmptyStringKeyAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get invalid Dictionary value
        /// </summary>
        public IDictionary<string, string> GetInvalid()
        {
            return GetInvalidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get invalid Dictionary value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, string>> GetInvalidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetInvalidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get boolean dictionary value {"0": true, "1": false, "2": false, "3": true }
        /// </summary>
        public IDictionary<string, bool?> GetBooleanTfft()
        {
            return GetBooleanTfftAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get boolean dictionary value {"0": true, "1": false, "2": false, "3": true }
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, bool?>> GetBooleanTfftAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetBooleanTfftAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set dictionary value empty {"0": true, "1": false, "2": false, "3": true }
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutBooleanTfft(IDictionary<string, bool?> arrayBody)
        {
            PutBooleanTfftAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set dictionary value empty {"0": true, "1": false, "2": false, "3": true }
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutBooleanTfftAsync(IDictionary<string, bool?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutBooleanTfftAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get boolean dictionary value {"0": true, "1": null, "2": false }
        /// </summary>
        public IDictionary<string, bool?> GetBooleanInvalidNull()
        {
            return GetBooleanInvalidNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get boolean dictionary value {"0": true, "1": null, "2": false }
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, bool?>> GetBooleanInvalidNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetBooleanInvalidNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get boolean dictionary value '{"0": true, "1": "boolean", "2": false}'
        /// </summary>
        public IDictionary<string, bool?> GetBooleanInvalidString()
        {
            return GetBooleanInvalidStringAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get boolean dictionary value '{"0": true, "1": "boolean", "2": false}'
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, bool?>> GetBooleanInvalidStringAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetBooleanInvalidStringAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
        /// </summary>
        public IDictionary<string, int?> GetIntegerValid()
        {
            return GetIntegerValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, int?>> GetIntegerValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetIntegerValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutIntegerValid(IDictionary<string, int?> arrayBody)
        {
            PutIntegerValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutIntegerValidAsync(IDictionary<string, int?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutIntegerValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get integer dictionary value {"0": 1, "1": null, "2": 0}
        /// </summary>
        public IDictionary<string, int?> GetIntInvalidNull()
        {
            return GetIntInvalidNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get integer dictionary value {"0": 1, "1": null, "2": 0}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, int?>> GetIntInvalidNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetIntInvalidNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get integer dictionary value {"0": 1, "1": "integer", "2": 0}
        /// </summary>
        public IDictionary<string, int?> GetIntInvalidString()
        {
            return GetIntInvalidStringAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get integer dictionary value {"0": 1, "1": "integer", "2": 0}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, int?>> GetIntInvalidStringAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetIntInvalidStringAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
        /// </summary>
        public IDictionary<string, long?> GetLongValid()
        {
            return GetLongValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, long?>> GetLongValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetLongValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutLongValid(IDictionary<string, long?> arrayBody)
        {
            PutLongValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutLongValidAsync(IDictionary<string, long?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutLongValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get long dictionary value {"0": 1, "1": null, "2": 0}
        /// </summary>
        public IDictionary<string, long?> GetLongInvalidNull()
        {
            return GetLongInvalidNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get long dictionary value {"0": 1, "1": null, "2": 0}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, long?>> GetLongInvalidNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetLongInvalidNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get long dictionary value {"0": 1, "1": "integer", "2": 0}
        /// </summary>
        public IDictionary<string, long?> GetLongInvalidString()
        {
            return GetLongInvalidStringAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get long dictionary value {"0": 1, "1": "integer", "2": 0}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, long?>> GetLongInvalidStringAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetLongInvalidStringAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
        /// </summary>
        public IDictionary<string, double?> GetFloatValid()
        {
            return GetFloatValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, double?>> GetFloatValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetFloatValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutFloatValid(IDictionary<string, double?> arrayBody)
        {
            PutFloatValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutFloatValidAsync(IDictionary<string, double?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutFloatValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
        /// </summary>
        public IDictionary<string, double?> GetFloatInvalidNull()
        {
            return GetFloatInvalidNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, double?>> GetFloatInvalidNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetFloatInvalidNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
        /// </summary>
        public IDictionary<string, double?> GetFloatInvalidString()
        {
            return GetFloatInvalidStringAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, double?>> GetFloatInvalidStringAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetFloatInvalidStringAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
        /// </summary>
        public IDictionary<string, double?> GetDoubleValid()
        {
            return GetDoubleValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, double?>> GetDoubleValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDoubleValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutDoubleValid(IDictionary<string, double?> arrayBody)
        {
            PutDoubleValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutDoubleValidAsync(IDictionary<string, double?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutDoubleValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
        /// </summary>
        public IDictionary<string, double?> GetDoubleInvalidNull()
        {
            return GetDoubleInvalidNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, double?>> GetDoubleInvalidNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDoubleInvalidNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
        /// </summary>
        public IDictionary<string, double?> GetDoubleInvalidString()
        {
            return GetDoubleInvalidStringAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, double?>> GetDoubleInvalidStringAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDoubleInvalidStringAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get string dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
        /// </summary>
        public IDictionary<string, string> GetStringValid()
        {
            return GetStringValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get string dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, string>> GetStringValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetStringValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutStringValid(IDictionary<string, string> arrayBody)
        {
            PutStringValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutStringValidAsync(IDictionary<string, string> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutStringValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get string dictionary value {"0": "foo", "1": null, "2": "foo2"}
        /// </summary>
        public IDictionary<string, string> GetStringWithNull()
        {
            return GetStringWithNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get string dictionary value {"0": "foo", "1": null, "2": "foo2"}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, string>> GetStringWithNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetStringWithNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get string dictionary value {"0": "foo", "1": 123, "2": "foo2"}
        /// </summary>
        public IDictionary<string, string> GetStringWithInvalid()
        {
            return GetStringWithInvalidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get string dictionary value {"0": "foo", "1": 123, "2": "foo2"}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, string>> GetStringWithInvalidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetStringWithInvalidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get integer dictionary value {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}
        /// </summary>
        public IDictionary<string, System.DateTime?> GetDateValid()
        {
            return GetDateValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get integer dictionary value {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, System.DateTime?>> GetDateValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDateValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set dictionary value  {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutDateValid(IDictionary<string, System.DateTime?> arrayBody)
        {
            PutDateValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set dictionary value  {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutDateValidAsync(IDictionary<string, System.DateTime?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutDateValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get date dictionary value {"0": "2012-01-01", "1": null, "2": "1776-07-04"}
        /// </summary>
        public IDictionary<string, System.DateTime?> GetDateInvalidNull()
        {
            return GetDateInvalidNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get date dictionary value {"0": "2012-01-01", "1": null, "2": "1776-07-04"}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, System.DateTime?>> GetDateInvalidNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDateInvalidNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get date dictionary value {"0": "2011-03-22", "1": "date"}
        /// </summary>
        public IDictionary<string, System.DateTime?> GetDateInvalidChars()
        {
            return GetDateInvalidCharsAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get date dictionary value {"0": "2011-03-22", "1": "date"}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, System.DateTime?>> GetDateInvalidCharsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDateInvalidCharsAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get date-time dictionary value {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2":
        /// "1492-10-12T10:15:01-08:00"}
        /// </summary>
        public IDictionary<string, System.DateTime?> GetDateTimeValid()
        {
            return GetDateTimeValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get date-time dictionary value {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2":
        /// "1492-10-12T10:15:01-08:00"}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, System.DateTime?>> GetDateTimeValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDateTimeValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set dictionary value  {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2":
        /// "1492-10-12T10:15:01-08:00"}
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutDateTimeValid(IDictionary<string, System.DateTime?> arrayBody)
        {
            PutDateTimeValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set dictionary value  {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2":
        /// "1492-10-12T10:15:01-08:00"}
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutDateTimeValidAsync(IDictionary<string, System.DateTime?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutDateTimeValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": null}
        /// </summary>
        public IDictionary<string, System.DateTime?> GetDateTimeInvalidNull()
        {
            return GetDateTimeInvalidNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": null}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, System.DateTime?>> GetDateTimeInvalidNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDateTimeInvalidNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": "date-time"}
        /// </summary>
        public IDictionary<string, System.DateTime?> GetDateTimeInvalidChars()
        {
            return GetDateTimeInvalidCharsAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": "date-time"}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, System.DateTime?>> GetDateTimeInvalidCharsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDateTimeInvalidCharsAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get date-time-rfc1123 dictionary value {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980 00:11:35 GMT",
        /// "2": "Wed, 12 Oct 1492 10:15:01 GMT"}
        /// </summary>
        public IDictionary<string, System.DateTime?> GetDateTimeRfc1123Valid()
        {
            return GetDateTimeRfc1123ValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get date-time-rfc1123 dictionary value {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980 00:11:35 GMT",
        /// "2": "Wed, 12 Oct 1492 10:15:01 GMT"}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, System.DateTime?>> GetDateTimeRfc1123ValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDateTimeRfc1123ValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set dictionary value empty {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed,
        /// 12 Oct 1492 10:15:01 GMT"}
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutDateTimeRfc1123Valid(IDictionary<string, System.DateTime?> arrayBody)
        {
            PutDateTimeRfc1123ValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set dictionary value empty {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed,
        /// 12 Oct 1492 10:15:01 GMT"}
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutDateTimeRfc1123ValidAsync(IDictionary<string, System.DateTime?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutDateTimeRfc1123ValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get duration dictionary value {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
        /// </summary>
        public IDictionary<string, System.TimeSpan?> GetDurationValid()
        {
            return GetDurationValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get duration dictionary value {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, System.TimeSpan?>> GetDurationValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDurationValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set dictionary value  {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutDurationValid(IDictionary<string, System.TimeSpan?> arrayBody)
        {
            PutDurationValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set dictionary value  {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutDurationValidAsync(IDictionary<string, System.TimeSpan?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutDurationValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get byte dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with each item encoded
        /// in base64
        /// </summary>
        public IDictionary<string, byte[]> GetByteValid()
        {
            return GetByteValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get byte dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with each item encoded
        /// in base64
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, byte[]>> GetByteValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetByteValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put the dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with each
        /// elementencoded in base 64
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutByteValid(IDictionary<string, byte[]> arrayBody)
        {
            PutByteValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put the dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with each
        /// elementencoded in base 64
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutByteValidAsync(IDictionary<string, byte[]> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutByteValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get byte dictionary value {"0": hex(FF FF FF FA), "1": null} with the first item base64 encoded
        /// </summary>
        public IDictionary<string, byte[]> GetByteInvalidNull()
        {
            return GetByteInvalidNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get byte dictionary value {"0": hex(FF FF FF FA), "1": null} with the first item base64 encoded
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, byte[]>> GetByteInvalidNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetByteInvalidNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get base64url dictionary value {"0": "a string that gets encoded with base64url", "1": "test string", "2": "Lorem
        /// ipsum"}
        /// </summary>
        public IDictionary<string, byte[]> GetBase64Url()
        {
            return GetBase64UrlAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get base64url dictionary value {"0": "a string that gets encoded with base64url", "1": "test string", "2": "Lorem
        /// ipsum"}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, byte[]>> GetBase64UrlAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetBase64UrlAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get dictionary of complex type null value
        /// </summary>
        public IDictionary<string, Widget> GetComplexNull()
        {
            return GetComplexNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get dictionary of complex type null value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, Widget>> GetComplexNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetComplexNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get empty dictionary of complex type {}
        /// </summary>
        public IDictionary<string, Widget> GetComplexEmpty()
        {
            return GetComplexEmptyAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get empty dictionary of complex type {}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, Widget>> GetComplexEmptyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetComplexEmptyAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get dictionary of complex type with null item {"0": {"integer": 1, "string": "2"}, "1": null, "2": {"integer": 5,
        /// "string": "6"}}
        /// </summary>
        public IDictionary<string, Widget> GetComplexItemNull()
        {
            return GetComplexItemNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get dictionary of complex type with null item {"0": {"integer": 1, "string": "2"}, "1": null, "2": {"integer": 5,
        /// "string": "6"}}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, Widget>> GetComplexItemNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetComplexItemNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get dictionary of complex type with empty item {"0": {"integer": 1, "string": "2"}, "1:" {}, "2": {"integer": 5,
        /// "string": "6"}}
        /// </summary>
        public IDictionary<string, Widget> GetComplexItemEmpty()
        {
            return GetComplexItemEmptyAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get dictionary of complex type with empty item {"0": {"integer": 1, "string": "2"}, "1:" {}, "2": {"integer": 5,
        /// "string": "6"}}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, Widget>> GetComplexItemEmptyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetComplexItemEmptyAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get dictionary of complex type with {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3, "string": "4"}, "2":
        /// {"integer": 5, "string": "6"}}
        /// </summary>
        public IDictionary<string, Widget> GetComplexValid()
        {
            return GetComplexValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get dictionary of complex type with {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3, "string": "4"}, "2":
        /// {"integer": 5, "string": "6"}}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, Widget>> GetComplexValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetComplexValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put an dictionary of complex type with values {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3, "string":
        /// "4"}, "2": {"integer": 5, "string": "6"}}
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutComplexValid(IDictionary<string, Widget> arrayBody)
        {
            PutComplexValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put an dictionary of complex type with values {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3, "string":
        /// "4"}, "2": {"integer": 5, "string": "6"}}
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutComplexValidAsync(IDictionary<string, Widget> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutComplexValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get a null array
        /// </summary>
        public IDictionary<string, IList<string>> GetArrayNull()
        {
            return GetArrayNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a null array
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, IList<string>>> GetArrayNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetArrayNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get an empty dictionary {}
        /// </summary>
        public IDictionary<string, IList<string>> GetArrayEmpty()
        {
            return GetArrayEmptyAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an empty dictionary {}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, IList<string>>> GetArrayEmptyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetArrayEmptyAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get an dictionary of array of strings {"0": ["1", "2", "3"], "1": null, "2": ["7", "8", "9"]}
        /// </summary>
        public IDictionary<string, IList<string>> GetArrayItemNull()
        {
            return GetArrayItemNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an dictionary of array of strings {"0": ["1", "2", "3"], "1": null, "2": ["7", "8", "9"]}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, IList<string>>> GetArrayItemNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetArrayItemNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get an array of array of strings [{"0": ["1", "2", "3"], "1": [], "2": ["7", "8", "9"]}
        /// </summary>
        public IDictionary<string, IList<string>> GetArrayItemEmpty()
        {
            return GetArrayItemEmptyAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an array of array of strings [{"0": ["1", "2", "3"], "1": [], "2": ["7", "8", "9"]}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, IList<string>>> GetArrayItemEmptyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetArrayItemEmptyAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get an array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8", "9"]}
        /// </summary>
        public IDictionary<string, IList<string>> GetArrayValid()
        {
            return GetArrayValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8", "9"]}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, IList<string>>> GetArrayValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetArrayValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8", "9"]}
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutArrayValid(IDictionary<string, IList<string>> arrayBody)
        {
            PutArrayValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8", "9"]}
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutArrayValidAsync(IDictionary<string, IList<string>> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutArrayValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get an dictionaries of dictionaries with value null
        /// </summary>
        public IDictionary<string, IDictionary<string, string>> GetDictionaryNull()
        {
            return GetDictionaryNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an dictionaries of dictionaries with value null
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, IDictionary<string, string>>> GetDictionaryNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDictionaryNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {}
        /// </summary>
        public IDictionary<string, IDictionary<string, string>> GetDictionaryEmpty()
        {
            return GetDictionaryEmptyAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, IDictionary<string, string>>> GetDictionaryEmptyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDictionaryEmptyAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3":
        /// "three"}, "1": null, "2": {"7": "seven", "8": "eight", "9": "nine"}}
        /// </summary>
        public IDictionary<string, IDictionary<string, string>> GetDictionaryItemNull()
        {
            return GetDictionaryItemNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3":
        /// "three"}, "1": null, "2": {"7": "seven", "8": "eight", "9": "nine"}}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, IDictionary<string, string>>> GetDictionaryItemNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDictionaryItemNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3":
        /// "three"}, "1": {}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
        /// </summary>
        public IDictionary<string, IDictionary<string, string>> GetDictionaryItemEmpty()
        {
            return GetDictionaryItemEmptyAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3":
        /// "three"}, "1": {}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, IDictionary<string, string>>> GetDictionaryItemEmptyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDictionaryItemEmptyAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3":
        /// "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
        /// </summary>
        public IDictionary<string, IDictionary<string, string>> GetDictionaryValid()
        {
            return GetDictionaryValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3":
        /// "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, IDictionary<string, string>>> GetDictionaryValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDictionaryValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3":
        /// "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutDictionaryValid(IDictionary<string, IDictionary<string, string>> arrayBody)
        {
            PutDictionaryValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3":
        /// "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutDictionaryValidAsync(IDictionary<string, IDictionary<string, string>> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutDictionaryValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

    }
}
