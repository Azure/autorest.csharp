// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsExtensibleEnums.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.ClientRuntime;
    using Microsoft.Rest.ClientRuntime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for IntEnum.
    /// </summary>
    [JsonConverter(typeof(Microsoft.Rest.ClientRuntime.Serialization.ExtensibleEnumConverter<IntEnum, string>))]
    public sealed class IntEnum : Microsoft.Rest.ExtensibleEnum<IntEnum, string>
    {
        private IntEnum(string value):base(value)
        {
        }

        /// <summary>
        /// one
        /// </summary>
                public static readonly IntEnum One = "1";

        /// <summary>
        /// two
        /// </summary>
                public static readonly IntEnum Two = "2";

        /// <summary>
        /// three
        /// </summary>
                public static readonly IntEnum Three = "3";

        ///<summary>
/// Static map to store allowed values for enums        ///</summary>

        static IntEnum()
        {
            AllowedValuesMap.Add("1.1", One);
            AllowedValuesMap.Add("1.2", One);
            AllowedValuesMap.Add("1.3", One);
            AllowedValuesMap.Add("2.1", Two);
            AllowedValuesMap.Add("2.2", Two);
            AllowedValuesMap.Add("3.1", Three);
            AllowedValuesMap.Add("3.3", Three);
        }

        /// <summary>
        /// Defines ctor/explicit conversion from value type to IntEnum.
        /// </summary>
        /// <param name="value">string to convert.</param>
        public static implicit operator IntEnum(string value) => Create(value);

        /// <summary>
        /// Create method used by deserializer to create instances of IntEnum type
        /// </summary>
        /// <returns>The value as a IntEnum.</returns>
        public static IntEnum Create(string value)
        {
            if(value == null)
            {
                return null;
            }

            if(AllowedValuesMap.ContainsKey(value))
            {
                return AllowedValuesMap[value];
            }

            return _valueMap.GetOrAdd(value, (v) => new IntEnum(v));
        }

    }
}
