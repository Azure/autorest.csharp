// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsHeader
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Header operations.
    /// </summary>
    public partial interface IHeader
    {
        IHeaderWithHttpMessages WithHttpMessages();

        /// <summary>
        /// Send a post request with header value "User-Agent": "overwrite"
        /// </summary>
        /// <param name='userAgent'>
        /// Send a post request with header value "User-Agent": "overwrite"
        /// </param>
        void ParamExistingKey(string userAgent);

        /// <summary>
        /// Send a post request with header value "User-Agent": "overwrite"
        /// </summary>
        /// <param name='userAgent'>
        /// Send a post request with header value "User-Agent": "overwrite"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task ParamExistingKeyAsync(string userAgent, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a response with header value "User-Agent": "overwrite"
        /// </summary>
        HeaderResponseExistingKeyHeaders ResponseExistingKey();

        /// <summary>
        /// Get a response with header value "User-Agent": "overwrite"
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HeaderResponseExistingKeyHeaders> ResponseExistingKeyAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a post request with header value "Content-Type": "text/html"
        /// </summary>
        /// <param name='contentType'>
        /// Send a post request with header value "Content-Type": "text/html"
        /// </param>
        void ParamProtectedKey(string contentType);

        /// <summary>
        /// Send a post request with header value "Content-Type": "text/html"
        /// </summary>
        /// <param name='contentType'>
        /// Send a post request with header value "Content-Type": "text/html"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task ParamProtectedKeyAsync(string contentType, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a response with header value "Content-Type": "text/html"
        /// </summary>
        HeaderResponseProtectedKeyHeaders ResponseProtectedKey();

        /// <summary>
        /// Get a response with header value "Content-Type": "text/html"
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HeaderResponseProtectedKeyHeaders> ResponseProtectedKeyAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a post request with header values "scenario": "positive", "value": 1 or "scenario": "negative", "value": -2
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values 1 or -2
        /// </param>
        void ParamInteger(string scenario, int value);

        /// <summary>
        /// Send a post request with header values "scenario": "positive", "value": 1 or "scenario": "negative", "value": -2
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values 1 or -2
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task ParamIntegerAsync(string scenario, int value, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a response with header value "value": 1 or -2
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        HeaderResponseIntegerHeaders ResponseInteger(string scenario);

        /// <summary>
        /// Get a response with header value "value": 1 or -2
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HeaderResponseIntegerHeaders> ResponseIntegerAsync(string scenario, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a post request with header values "scenario": "positive", "value": 105 or "scenario": "negative", "value": -2
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values 105 or -2
        /// </param>
        void ParamLong(string scenario, long value);

        /// <summary>
        /// Send a post request with header values "scenario": "positive", "value": 105 or "scenario": "negative", "value": -2
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values 105 or -2
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task ParamLongAsync(string scenario, long value, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a response with header value "value": 105 or -2
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        HeaderResponseLongHeaders ResponseLong(string scenario);

        /// <summary>
        /// Get a response with header value "value": 105 or -2
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HeaderResponseLongHeaders> ResponseLongAsync(string scenario, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a post request with header values "scenario": "positive", "value": 0.07 or "scenario": "negative", "value":
        /// -3.0
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values 0.07 or -3.0
        /// </param>
        void ParamFloat(string scenario, double value);

        /// <summary>
        /// Send a post request with header values "scenario": "positive", "value": 0.07 or "scenario": "negative", "value":
        /// -3.0
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values 0.07 or -3.0
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task ParamFloatAsync(string scenario, double value, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a response with header value "value": 0.07 or -3.0
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        HeaderResponseFloatHeaders ResponseFloat(string scenario);

        /// <summary>
        /// Get a response with header value "value": 0.07 or -3.0
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HeaderResponseFloatHeaders> ResponseFloatAsync(string scenario, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a post request with header values "scenario": "positive", "value": 7e120 or "scenario": "negative", "value":
        /// -3.0
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values 7e120 or -3.0
        /// </param>
        void ParamDouble(string scenario, double value);

        /// <summary>
        /// Send a post request with header values "scenario": "positive", "value": 7e120 or "scenario": "negative", "value":
        /// -3.0
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values 7e120 or -3.0
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task ParamDoubleAsync(string scenario, double value, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a response with header value "value": 7e120 or -3.0
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        HeaderResponseDoubleHeaders ResponseDouble(string scenario);

        /// <summary>
        /// Get a response with header value "value": 7e120 or -3.0
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HeaderResponseDoubleHeaders> ResponseDoubleAsync(string scenario, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a post request with header values "scenario": "true", "value": true or "scenario": "false", "value": false
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "true" or "false"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values true or false
        /// </param>
        void ParamBool(string scenario, bool value);

        /// <summary>
        /// Send a post request with header values "scenario": "true", "value": true or "scenario": "false", "value": false
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "true" or "false"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values true or false
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task ParamBoolAsync(string scenario, bool value, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a response with header value "value": true or false
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "true" or "false"
        /// </param>
        HeaderResponseBoolHeaders ResponseBool(string scenario);

        /// <summary>
        /// Get a response with header value "value": true or false
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "true" or "false"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HeaderResponseBoolHeaders> ResponseBoolAsync(string scenario, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "The quick brown fox jumps over the lazy dog"
        /// or "scenario": "null", "value": null or "scenario": "empty", "value": ""
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "null" or "empty"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values "The quick brown fox jumps over the lazy dog" or null or ""
        /// </param>
        void ParamString(string scenario, string value = default(string));

        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "The quick brown fox jumps over the lazy dog"
        /// or "scenario": "null", "value": null or "scenario": "empty", "value": ""
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "null" or "empty"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values "The quick brown fox jumps over the lazy dog" or null or ""
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task ParamStringAsync(string scenario, string value = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a response with header values "The quick brown fox jumps over the lazy dog" or null or ""
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "null" or "empty"
        /// </param>
        HeaderResponseStringHeaders ResponseString(string scenario);

        /// <summary>
        /// Get a response with header values "The quick brown fox jumps over the lazy dog" or null or ""
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "null" or "empty"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HeaderResponseStringHeaders> ResponseStringAsync(string scenario, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "2010-01-01" or "scenario": "min", "value":
        /// "0001-01-01"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "min"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values "2010-01-01" or "0001-01-01"
        /// </param>
        void ParamDate(string scenario, System.DateTime value);

        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "2010-01-01" or "scenario": "min", "value":
        /// "0001-01-01"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "min"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values "2010-01-01" or "0001-01-01"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task ParamDateAsync(string scenario, System.DateTime value, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a response with header values "2010-01-01" or "0001-01-01"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "min"
        /// </param>
        HeaderResponseDateHeaders ResponseDate(string scenario);

        /// <summary>
        /// Get a response with header values "2010-01-01" or "0001-01-01"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "min"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HeaderResponseDateHeaders> ResponseDateAsync(string scenario, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "2010-01-01T12:34:56Z" or "scenario": "min",
        /// "value": "0001-01-01T00:00:00Z"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "min"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z"
        /// </param>
        void ParamDatetime(string scenario, System.DateTime value);

        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "2010-01-01T12:34:56Z" or "scenario": "min",
        /// "value": "0001-01-01T00:00:00Z"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "min"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task ParamDatetimeAsync(string scenario, System.DateTime value, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a response with header values "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "min"
        /// </param>
        HeaderResponseDatetimeHeaders ResponseDatetime(string scenario);

        /// <summary>
        /// Get a response with header values "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "min"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HeaderResponseDatetimeHeaders> ResponseDatetimeAsync(string scenario, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "Wed, 01 Jan 2010 12:34:56 GMT" or "scenario":
        /// "min", "value": "Mon, 01 Jan 0001 00:00:00 GMT"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "min"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon, 01 Jan 0001 00:00:00 GMT"
        /// </param>
        void ParamDatetimeRfc1123(string scenario, System.DateTime? value = default(System.DateTime?));

        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "Wed, 01 Jan 2010 12:34:56 GMT" or "scenario":
        /// "min", "value": "Mon, 01 Jan 0001 00:00:00 GMT"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "min"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon, 01 Jan 0001 00:00:00 GMT"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task ParamDatetimeRfc1123Async(string scenario, System.DateTime? value = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a response with header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon, 01 Jan 0001 00:00:00 GMT"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "min"
        /// </param>
        HeaderResponseDatetimeRfc1123Headers ResponseDatetimeRfc1123(string scenario);

        /// <summary>
        /// Get a response with header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon, 01 Jan 0001 00:00:00 GMT"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "min"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HeaderResponseDatetimeRfc1123Headers> ResponseDatetimeRfc1123Async(string scenario, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "P123DT22H14M12.011S"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values "P123DT22H14M12.011S"
        /// </param>
        void ParamDuration(string scenario, System.TimeSpan value);

        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "P123DT22H14M12.011S"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values "P123DT22H14M12.011S"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task ParamDurationAsync(string scenario, System.TimeSpan value, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a response with header values "P123DT22H14M12.011S"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid"
        /// </param>
        HeaderResponseDurationHeaders ResponseDuration(string scenario);

        /// <summary>
        /// Get a response with header values "P123DT22H14M12.011S"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HeaderResponseDurationHeaders> ResponseDurationAsync(string scenario, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "啊齄丂狛狜隣郎隣兀﨩"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values "啊齄丂狛狜隣郎隣兀﨩"
        /// </param>
        void ParamByte(string scenario, byte[] value);

        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "啊齄丂狛狜隣郎隣兀﨩"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values "啊齄丂狛狜隣郎隣兀﨩"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task ParamByteAsync(string scenario, byte[] value, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a response with header values "啊齄丂狛狜隣郎隣兀﨩"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid"
        /// </param>
        HeaderResponseByteHeaders ResponseByte(string scenario);

        /// <summary>
        /// Get a response with header values "啊齄丂狛狜隣郎隣兀﨩"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HeaderResponseByteHeaders> ResponseByteAsync(string scenario, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "GREY" or "scenario": "null", "value": null
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "null" or "empty"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values 'GREY'. Possible values include: 'White', 'black', 'GREY'
        /// </param>
        void ParamEnum(string scenario, GreyscaleColors? value = default(GreyscaleColors?));

        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "GREY" or "scenario": "null", "value": null
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "null" or "empty"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values 'GREY'. Possible values include: 'White', 'black', 'GREY'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task ParamEnumAsync(string scenario, GreyscaleColors? value = default(GreyscaleColors?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a response with header values "GREY" or null
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "null" or "empty"
        /// </param>
        HeaderResponseEnumHeaders ResponseEnum(string scenario);

        /// <summary>
        /// Get a response with header values "GREY" or null
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "null" or "empty"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HeaderResponseEnumHeaders> ResponseEnumAsync(string scenario, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the header of the request
        /// </summary>
        void CustomRequestId();

        /// <summary>
        /// Send x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the header of the request
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task CustomRequestIdAsync(CancellationToken cancellationToken = default(CancellationToken));
    }
}
