// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsHeader
{
    using Microsoft.Rest;
    using Models;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Header operations.
    /// </summary>
    public partial class Header : IHeader
    {
        /// <summary>
        /// Initializes a new instance of the Header class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public Header(IHeaderWithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private IHeaderWithHttpMessages OperationsWithHttpMessages { get; set; }

        public IHeaderWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Send a post request with header value "User-Agent": "overwrite"
        /// </summary>
        /// <param name='userAgent'>
        /// Send a post request with header value "User-Agent": "overwrite"
        /// </param>
        public void ParamExistingKey(string userAgent)
        {
            ParamExistingKeyAsync(userAgent).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a post request with header value "User-Agent": "overwrite"
        /// </summary>
        /// <param name='userAgent'>
        /// Send a post request with header value "User-Agent": "overwrite"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ParamExistingKeyAsync(string userAgent, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ParamExistingKeyAsync(userAgent, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get a response with header value "User-Agent": "overwrite"
        /// </summary>
        public HeaderResponseExistingKeyHeaders ResponseExistingKey()
        {
            return ResponseExistingKeyAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a response with header value "User-Agent": "overwrite"
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HeaderResponseExistingKeyHeaders> ResponseExistingKeyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.ResponseExistingKeyAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Send a post request with header value "Content-Type": "text/html"
        /// </summary>
        /// <param name='contentType'>
        /// Send a post request with header value "Content-Type": "text/html"
        /// </param>
        public void ParamProtectedKey(string contentType)
        {
            ParamProtectedKeyAsync(contentType).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a post request with header value "Content-Type": "text/html"
        /// </summary>
        /// <param name='contentType'>
        /// Send a post request with header value "Content-Type": "text/html"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ParamProtectedKeyAsync(string contentType, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ParamProtectedKeyAsync(contentType, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get a response with header value "Content-Type": "text/html"
        /// </summary>
        public HeaderResponseProtectedKeyHeaders ResponseProtectedKey()
        {
            return ResponseProtectedKeyAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a response with header value "Content-Type": "text/html"
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HeaderResponseProtectedKeyHeaders> ResponseProtectedKeyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.ResponseProtectedKeyAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Send a post request with header values "scenario": "positive", "value": 1 or "scenario": "negative", "value": -2
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values 1 or -2
        /// </param>
        public void ParamInteger(string scenario, int value)
        {
            ParamIntegerAsync(scenario, value).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a post request with header values "scenario": "positive", "value": 1 or "scenario": "negative", "value": -2
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values 1 or -2
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ParamIntegerAsync(string scenario, int value, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ParamIntegerAsync(scenario, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get a response with header value "value": 1 or -2
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        public HeaderResponseIntegerHeaders ResponseInteger(string scenario)
        {
            return ResponseIntegerAsync(scenario).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a response with header value "value": 1 or -2
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HeaderResponseIntegerHeaders> ResponseIntegerAsync(string scenario, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.ResponseIntegerAsync(scenario, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Send a post request with header values "scenario": "positive", "value": 105 or "scenario": "negative", "value": -2
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values 105 or -2
        /// </param>
        public void ParamLong(string scenario, long value)
        {
            ParamLongAsync(scenario, value).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a post request with header values "scenario": "positive", "value": 105 or "scenario": "negative", "value": -2
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values 105 or -2
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ParamLongAsync(string scenario, long value, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ParamLongAsync(scenario, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get a response with header value "value": 105 or -2
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        public HeaderResponseLongHeaders ResponseLong(string scenario)
        {
            return ResponseLongAsync(scenario).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a response with header value "value": 105 or -2
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HeaderResponseLongHeaders> ResponseLongAsync(string scenario, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.ResponseLongAsync(scenario, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Send a post request with header values "scenario": "positive", "value": 0.07 or "scenario": "negative", "value":
        /// -3.0
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values 0.07 or -3.0
        /// </param>
        public void ParamFloat(string scenario, double value)
        {
            ParamFloatAsync(scenario, value).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a post request with header values "scenario": "positive", "value": 0.07 or "scenario": "negative", "value":
        /// -3.0
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values 0.07 or -3.0
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ParamFloatAsync(string scenario, double value, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ParamFloatAsync(scenario, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get a response with header value "value": 0.07 or -3.0
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        public HeaderResponseFloatHeaders ResponseFloat(string scenario)
        {
            return ResponseFloatAsync(scenario).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a response with header value "value": 0.07 or -3.0
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HeaderResponseFloatHeaders> ResponseFloatAsync(string scenario, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.ResponseFloatAsync(scenario, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Send a post request with header values "scenario": "positive", "value": 7e120 or "scenario": "negative", "value":
        /// -3.0
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values 7e120 or -3.0
        /// </param>
        public void ParamDouble(string scenario, double value)
        {
            ParamDoubleAsync(scenario, value).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a post request with header values "scenario": "positive", "value": 7e120 or "scenario": "negative", "value":
        /// -3.0
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values 7e120 or -3.0
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ParamDoubleAsync(string scenario, double value, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ParamDoubleAsync(scenario, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get a response with header value "value": 7e120 or -3.0
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        public HeaderResponseDoubleHeaders ResponseDouble(string scenario)
        {
            return ResponseDoubleAsync(scenario).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a response with header value "value": 7e120 or -3.0
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "positive" or "negative"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HeaderResponseDoubleHeaders> ResponseDoubleAsync(string scenario, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.ResponseDoubleAsync(scenario, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Send a post request with header values "scenario": "true", "value": true or "scenario": "false", "value": false
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "true" or "false"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values true or false
        /// </param>
        public void ParamBool(string scenario, bool value)
        {
            ParamBoolAsync(scenario, value).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a post request with header values "scenario": "true", "value": true or "scenario": "false", "value": false
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "true" or "false"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values true or false
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ParamBoolAsync(string scenario, bool value, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ParamBoolAsync(scenario, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get a response with header value "value": true or false
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "true" or "false"
        /// </param>
        public HeaderResponseBoolHeaders ResponseBool(string scenario)
        {
            return ResponseBoolAsync(scenario).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a response with header value "value": true or false
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "true" or "false"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HeaderResponseBoolHeaders> ResponseBoolAsync(string scenario, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.ResponseBoolAsync(scenario, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "The quick brown fox jumps over the lazy dog"
        /// or "scenario": "null", "value": null or "scenario": "empty", "value": ""
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "null" or "empty"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values "The quick brown fox jumps over the lazy dog" or null or ""
        /// </param>
        public void ParamString(string scenario, string value = default(string))
        {
            ParamStringAsync(scenario, value).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "The quick brown fox jumps over the lazy dog"
        /// or "scenario": "null", "value": null or "scenario": "empty", "value": ""
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "null" or "empty"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values "The quick brown fox jumps over the lazy dog" or null or ""
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ParamStringAsync(string scenario, string value = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ParamStringAsync(scenario, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get a response with header values "The quick brown fox jumps over the lazy dog" or null or ""
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "null" or "empty"
        /// </param>
        public HeaderResponseStringHeaders ResponseString(string scenario)
        {
            return ResponseStringAsync(scenario).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a response with header values "The quick brown fox jumps over the lazy dog" or null or ""
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "null" or "empty"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HeaderResponseStringHeaders> ResponseStringAsync(string scenario, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.ResponseStringAsync(scenario, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "2010-01-01" or "scenario": "min", "value":
        /// "0001-01-01"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "min"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values "2010-01-01" or "0001-01-01"
        /// </param>
        public void ParamDate(string scenario, System.DateTime value)
        {
            ParamDateAsync(scenario, value).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "2010-01-01" or "scenario": "min", "value":
        /// "0001-01-01"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "min"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values "2010-01-01" or "0001-01-01"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ParamDateAsync(string scenario, System.DateTime value, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ParamDateAsync(scenario, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get a response with header values "2010-01-01" or "0001-01-01"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "min"
        /// </param>
        public HeaderResponseDateHeaders ResponseDate(string scenario)
        {
            return ResponseDateAsync(scenario).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a response with header values "2010-01-01" or "0001-01-01"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "min"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HeaderResponseDateHeaders> ResponseDateAsync(string scenario, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.ResponseDateAsync(scenario, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "2010-01-01T12:34:56Z" or "scenario": "min",
        /// "value": "0001-01-01T00:00:00Z"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "min"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z"
        /// </param>
        public void ParamDatetime(string scenario, System.DateTime value)
        {
            ParamDatetimeAsync(scenario, value).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "2010-01-01T12:34:56Z" or "scenario": "min",
        /// "value": "0001-01-01T00:00:00Z"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "min"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ParamDatetimeAsync(string scenario, System.DateTime value, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ParamDatetimeAsync(scenario, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get a response with header values "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "min"
        /// </param>
        public HeaderResponseDatetimeHeaders ResponseDatetime(string scenario)
        {
            return ResponseDatetimeAsync(scenario).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a response with header values "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "min"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HeaderResponseDatetimeHeaders> ResponseDatetimeAsync(string scenario, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.ResponseDatetimeAsync(scenario, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "Wed, 01 Jan 2010 12:34:56 GMT" or "scenario":
        /// "min", "value": "Mon, 01 Jan 0001 00:00:00 GMT"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "min"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon, 01 Jan 0001 00:00:00 GMT"
        /// </param>
        public void ParamDatetimeRfc1123(string scenario, System.DateTime? value = default(System.DateTime?))
        {
            ParamDatetimeRfc1123Async(scenario, value).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "Wed, 01 Jan 2010 12:34:56 GMT" or "scenario":
        /// "min", "value": "Mon, 01 Jan 0001 00:00:00 GMT"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "min"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon, 01 Jan 0001 00:00:00 GMT"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ParamDatetimeRfc1123Async(string scenario, System.DateTime? value = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ParamDatetimeRfc1123Async(scenario, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get a response with header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon, 01 Jan 0001 00:00:00 GMT"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "min"
        /// </param>
        public HeaderResponseDatetimeRfc1123Headers ResponseDatetimeRfc1123(string scenario)
        {
            return ResponseDatetimeRfc1123Async(scenario).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a response with header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon, 01 Jan 0001 00:00:00 GMT"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "min"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HeaderResponseDatetimeRfc1123Headers> ResponseDatetimeRfc1123Async(string scenario, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.ResponseDatetimeRfc1123Async(scenario, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "P123DT22H14M12.011S"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values "P123DT22H14M12.011S"
        /// </param>
        public void ParamDuration(string scenario, System.TimeSpan value)
        {
            ParamDurationAsync(scenario, value).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "P123DT22H14M12.011S"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values "P123DT22H14M12.011S"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ParamDurationAsync(string scenario, System.TimeSpan value, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ParamDurationAsync(scenario, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get a response with header values "P123DT22H14M12.011S"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid"
        /// </param>
        public HeaderResponseDurationHeaders ResponseDuration(string scenario)
        {
            return ResponseDurationAsync(scenario).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a response with header values "P123DT22H14M12.011S"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HeaderResponseDurationHeaders> ResponseDurationAsync(string scenario, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.ResponseDurationAsync(scenario, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "啊齄丂狛狜隣郎隣兀﨩"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values "啊齄丂狛狜隣郎隣兀﨩"
        /// </param>
        public void ParamByte(string scenario, byte[] value)
        {
            ParamByteAsync(scenario, value).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "啊齄丂狛狜隣郎隣兀﨩"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values "啊齄丂狛狜隣郎隣兀﨩"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ParamByteAsync(string scenario, byte[] value, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ParamByteAsync(scenario, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get a response with header values "啊齄丂狛狜隣郎隣兀﨩"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid"
        /// </param>
        public HeaderResponseByteHeaders ResponseByte(string scenario)
        {
            return ResponseByteAsync(scenario).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a response with header values "啊齄丂狛狜隣郎隣兀﨩"
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HeaderResponseByteHeaders> ResponseByteAsync(string scenario, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.ResponseByteAsync(scenario, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "GREY" or "scenario": "null", "value": null
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "null" or "empty"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values 'GREY'. Possible values include: 'White', 'black', 'GREY'
        /// </param>
        public void ParamEnum(string scenario, GreyscaleColors? value = default(GreyscaleColors?))
        {
            ParamEnumAsync(scenario, value).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a post request with header values "scenario": "valid", "value": "GREY" or "scenario": "null", "value": null
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "null" or "empty"
        /// </param>
        /// <param name='value'>
        /// Send a post request with header values 'GREY'. Possible values include: 'White', 'black', 'GREY'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ParamEnumAsync(string scenario, GreyscaleColors? value = default(GreyscaleColors?), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ParamEnumAsync(scenario, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get a response with header values "GREY" or null
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "null" or "empty"
        /// </param>
        public HeaderResponseEnumHeaders ResponseEnum(string scenario)
        {
            return ResponseEnumAsync(scenario).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a response with header values "GREY" or null
        /// </summary>
        /// <param name='scenario'>
        /// Send a post request with header values "scenario": "valid" or "null" or "empty"
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HeaderResponseEnumHeaders> ResponseEnumAsync(string scenario, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.ResponseEnumAsync(scenario, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Send x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the header of the request
        /// </summary>
        public void CustomRequestId()
        {
            CustomRequestIdAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the header of the request
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task CustomRequestIdAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.CustomRequestIdAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

    }
}
