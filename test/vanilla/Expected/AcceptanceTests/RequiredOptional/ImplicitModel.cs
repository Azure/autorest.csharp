// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsRequiredOptional
{
    using Microsoft.Rest;
    using Models;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// ImplicitModel operations.
    /// </summary>
    public partial class ImplicitModel : IImplicitModel
    {
        /// <summary>
        /// Initializes a new instance of the ImplicitModel class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public ImplicitModel(IImplicitModelWithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private IImplicitModelWithHttpMessages OperationsWithHttpMessages { get; set; }

        public IImplicitModelWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Test implicitly required path parameter
        /// </summary>
        /// <param name='pathParameter'>
        /// </param>
        public Error GetRequiredPath(string pathParameter)
        {
            return GetRequiredPathAsync(pathParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Test implicitly required path parameter
        /// </summary>
        /// <param name='pathParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> GetRequiredPathAsync(string pathParameter, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetRequiredPathAsync(pathParameter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Test implicitly optional query parameter
        /// </summary>
        /// <param name='queryParameter'>
        /// </param>
        public void PutOptionalQuery(string queryParameter = default(string))
        {
            PutOptionalQueryAsync(queryParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Test implicitly optional query parameter
        /// </summary>
        /// <param name='queryParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutOptionalQueryAsync(string queryParameter = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutOptionalQueryAsync(queryParameter, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Test implicitly optional header parameter
        /// </summary>
        /// <param name='queryParameter'>
        /// </param>
        public void PutOptionalHeader(string queryParameter = default(string))
        {
            PutOptionalHeaderAsync(queryParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Test implicitly optional header parameter
        /// </summary>
        /// <param name='queryParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutOptionalHeaderAsync(string queryParameter = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutOptionalHeaderAsync(queryParameter, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Test implicitly optional body parameter
        /// </summary>
        /// <param name='bodyParameter'>
        /// </param>
        public void PutOptionalBody(string bodyParameter = default(string))
        {
            PutOptionalBodyAsync(bodyParameter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Test implicitly optional body parameter
        /// </summary>
        /// <param name='bodyParameter'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutOptionalBodyAsync(string bodyParameter = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutOptionalBodyAsync(bodyParameter, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Test implicitly required path parameter
        /// </summary>
        public Error GetRequiredGlobalPath()
        {
            return GetRequiredGlobalPathAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Test implicitly required path parameter
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> GetRequiredGlobalPathAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetRequiredGlobalPathAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Test implicitly required query parameter
        /// </summary>
        public Error GetRequiredGlobalQuery()
        {
            return GetRequiredGlobalQueryAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Test implicitly required query parameter
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> GetRequiredGlobalQueryAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetRequiredGlobalQueryAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Test implicitly optional query parameter
        /// </summary>
        public Error GetOptionalGlobalQuery()
        {
            return GetOptionalGlobalQueryAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Test implicitly optional query parameter
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> GetOptionalGlobalQueryAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetOptionalGlobalQueryAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

    }
}
