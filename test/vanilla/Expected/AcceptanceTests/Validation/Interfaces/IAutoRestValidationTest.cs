// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsValidation
{
    using Models;
    using Newtonsoft.Json;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Test Infrastructure for AutoRest. No server backend exists for these tests.
    /// </summary>
    public partial interface IAutoRestValidationTest : System.IDisposable
    {
        /// <summary>
        /// Gets or sets the base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets JSON serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets JSON deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription ID.
        /// </summary>
        string SubscriptionId { get; set; }

        /// <summary>
        /// Required string following pattern \d{2}-\d{2}-\d{4}
        /// </summary>
        string ApiVersion { get; set; }


        /// <summary>
        /// Validates input parameters on the method. See swagger for details.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required string between 3 and 10 chars with pattern [a-zA-Z0-9]+.
        /// </param>
        /// <param name='id'>
        /// Required int multiple of 10 from 100 to 1000.
        /// </param>
        Product ValidationOfMethodParameters(string resourceGroupName, int id);

        /// <summary>
        /// Validates input parameters on the method. See swagger for details.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required string between 3 and 10 chars with pattern [a-zA-Z0-9]+.
        /// </param>
        /// <param name='id'>
        /// Required int multiple of 10 from 100 to 1000.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> ValidationOfMethodParametersAsync(string resourceGroupName, int id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Validates body parameters on the method. See swagger for details.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required string between 3 and 10 chars with pattern [a-zA-Z0-9]+.
        /// </param>
        /// <param name='id'>
        /// Required int multiple of 10 from 100 to 1000.
        /// </param>
        /// <param name='body'>
        /// </param>
        Product ValidationOfBody(string resourceGroupName, int id, Product body = default(Product));

        /// <summary>
        /// Validates body parameters on the method. See swagger for details.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required string between 3 and 10 chars with pattern [a-zA-Z0-9]+.
        /// </param>
        /// <param name='id'>
        /// Required int multiple of 10 from 100 to 1000.
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> ValidationOfBodyAsync(string resourceGroupName, int id, Product body = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        void GetWithConstantInPath();

        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task GetWithConstantInPathAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='body'>
        /// </param>
        Product PostWithConstantInBody(Product body = default(Product));

        /// <param name='body'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> PostWithConstantInBodyAsync(Product body = default(Product), CancellationToken cancellationToken = default(CancellationToken));
    }
}
