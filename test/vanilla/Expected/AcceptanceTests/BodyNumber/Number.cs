// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsBodyNumber
{
    using Microsoft.Rest;
    using Models;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Number operations.
    /// </summary>
    public partial class Number : INumber
    {
        /// <summary>
        /// Initializes a new instance of the Number class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public Number(INumberWithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private INumberWithHttpMessages OperationsWithHttpMessages { get; set; }

        public INumberWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Get null Number value
        /// </summary>
        public double? GetNull()
        {
            return GetNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get null Number value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<double?> GetNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get invalid float Number value
        /// </summary>
        public double? GetInvalidFloat()
        {
            return GetInvalidFloatAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get invalid float Number value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<double?> GetInvalidFloatAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetInvalidFloatAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get invalid double Number value
        /// </summary>
        public double? GetInvalidDouble()
        {
            return GetInvalidDoubleAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get invalid double Number value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<double?> GetInvalidDoubleAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetInvalidDoubleAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get invalid decimal Number value
        /// </summary>
        public decimal? GetInvalidDecimal()
        {
            return GetInvalidDecimalAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get invalid decimal Number value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<decimal?> GetInvalidDecimalAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetInvalidDecimalAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put big float value 3.402823e+20
        /// </summary>
        /// <param name='numberBody'>
        /// </param>
        public void PutBigFloat(double numberBody)
        {
            PutBigFloatAsync(numberBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put big float value 3.402823e+20
        /// </summary>
        /// <param name='numberBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutBigFloatAsync(double numberBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutBigFloatAsync(numberBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get big float value 3.402823e+20
        /// </summary>
        public double? GetBigFloat()
        {
            return GetBigFloatAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get big float value 3.402823e+20
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<double?> GetBigFloatAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetBigFloatAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put big double value 2.5976931e+101
        /// </summary>
        /// <param name='numberBody'>
        /// </param>
        public void PutBigDouble(double numberBody)
        {
            PutBigDoubleAsync(numberBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put big double value 2.5976931e+101
        /// </summary>
        /// <param name='numberBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutBigDoubleAsync(double numberBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutBigDoubleAsync(numberBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get big double value 2.5976931e+101
        /// </summary>
        public double? GetBigDouble()
        {
            return GetBigDoubleAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get big double value 2.5976931e+101
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<double?> GetBigDoubleAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetBigDoubleAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put big double value 99999999.99
        /// </summary>
        /// <param name='numberBody'>
        /// </param>
        public void PutBigDoublePositiveDecimal(double numberBody)
        {
            PutBigDoublePositiveDecimalAsync(numberBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put big double value 99999999.99
        /// </summary>
        /// <param name='numberBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutBigDoublePositiveDecimalAsync(double numberBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutBigDoublePositiveDecimalAsync(numberBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get big double value 99999999.99
        /// </summary>
        public double? GetBigDoublePositiveDecimal()
        {
            return GetBigDoublePositiveDecimalAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get big double value 99999999.99
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<double?> GetBigDoublePositiveDecimalAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetBigDoublePositiveDecimalAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put big double value -99999999.99
        /// </summary>
        /// <param name='numberBody'>
        /// </param>
        public void PutBigDoubleNegativeDecimal(double numberBody)
        {
            PutBigDoubleNegativeDecimalAsync(numberBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put big double value -99999999.99
        /// </summary>
        /// <param name='numberBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutBigDoubleNegativeDecimalAsync(double numberBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutBigDoubleNegativeDecimalAsync(numberBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get big double value -99999999.99
        /// </summary>
        public double? GetBigDoubleNegativeDecimal()
        {
            return GetBigDoubleNegativeDecimalAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get big double value -99999999.99
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<double?> GetBigDoubleNegativeDecimalAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetBigDoubleNegativeDecimalAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put big decimal value 2.5976931e+101
        /// </summary>
        /// <param name='numberBody'>
        /// </param>
        public void PutBigDecimal(decimal numberBody)
        {
            PutBigDecimalAsync(numberBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put big decimal value 2.5976931e+101
        /// </summary>
        /// <param name='numberBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutBigDecimalAsync(decimal numberBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutBigDecimalAsync(numberBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get big decimal value 2.5976931e+101
        /// </summary>
        public decimal? GetBigDecimal()
        {
            return GetBigDecimalAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get big decimal value 2.5976931e+101
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<decimal?> GetBigDecimalAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetBigDecimalAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put big decimal value 99999999.99
        /// </summary>
        /// <param name='numberBody'>
        /// </param>
        public void PutBigDecimalPositiveDecimal(decimal numberBody)
        {
            PutBigDecimalPositiveDecimalAsync(numberBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put big decimal value 99999999.99
        /// </summary>
        /// <param name='numberBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutBigDecimalPositiveDecimalAsync(decimal numberBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutBigDecimalPositiveDecimalAsync(numberBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get big decimal value 99999999.99
        /// </summary>
        public decimal? GetBigDecimalPositiveDecimal()
        {
            return GetBigDecimalPositiveDecimalAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get big decimal value 99999999.99
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<decimal?> GetBigDecimalPositiveDecimalAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetBigDecimalPositiveDecimalAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put big decimal value -99999999.99
        /// </summary>
        /// <param name='numberBody'>
        /// </param>
        public void PutBigDecimalNegativeDecimal(decimal numberBody)
        {
            PutBigDecimalNegativeDecimalAsync(numberBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put big decimal value -99999999.99
        /// </summary>
        /// <param name='numberBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutBigDecimalNegativeDecimalAsync(decimal numberBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutBigDecimalNegativeDecimalAsync(numberBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get big decimal value -99999999.99
        /// </summary>
        public decimal? GetBigDecimalNegativeDecimal()
        {
            return GetBigDecimalNegativeDecimalAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get big decimal value -99999999.99
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<decimal?> GetBigDecimalNegativeDecimalAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetBigDecimalNegativeDecimalAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put small float value 3.402823e-20
        /// </summary>
        /// <param name='numberBody'>
        /// </param>
        public void PutSmallFloat(double numberBody)
        {
            PutSmallFloatAsync(numberBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put small float value 3.402823e-20
        /// </summary>
        /// <param name='numberBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutSmallFloatAsync(double numberBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutSmallFloatAsync(numberBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get big double value 3.402823e-20
        /// </summary>
        public double? GetSmallFloat()
        {
            return GetSmallFloatAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get big double value 3.402823e-20
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<double?> GetSmallFloatAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetSmallFloatAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put small double value 2.5976931e-101
        /// </summary>
        /// <param name='numberBody'>
        /// </param>
        public void PutSmallDouble(double numberBody)
        {
            PutSmallDoubleAsync(numberBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put small double value 2.5976931e-101
        /// </summary>
        /// <param name='numberBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutSmallDoubleAsync(double numberBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutSmallDoubleAsync(numberBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get big double value 2.5976931e-101
        /// </summary>
        public double? GetSmallDouble()
        {
            return GetSmallDoubleAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get big double value 2.5976931e-101
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<double?> GetSmallDoubleAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetSmallDoubleAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put small decimal value 2.5976931e-101
        /// </summary>
        /// <param name='numberBody'>
        /// </param>
        public void PutSmallDecimal(decimal numberBody)
        {
            PutSmallDecimalAsync(numberBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put small decimal value 2.5976931e-101
        /// </summary>
        /// <param name='numberBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutSmallDecimalAsync(decimal numberBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutSmallDecimalAsync(numberBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get small decimal value 2.5976931e-101
        /// </summary>
        public decimal? GetSmallDecimal()
        {
            return GetSmallDecimalAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get small decimal value 2.5976931e-101
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<decimal?> GetSmallDecimalAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetSmallDecimalAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

    }
}
