// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsHttp
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// MultipleResponses operations.
    /// </summary>
    public partial interface IMultipleResponses
    {
        IMultipleResponsesWithHttpMessages WithHttpMessages();

        /// <summary>
        /// Send a 200 response with valid payload: {'statusCode': '200'}
        /// </summary>
        A Get200Model204NoModelDefaultError200Valid();

        /// <summary>
        /// Send a 200 response with valid payload: {'statusCode': '200'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<A> Get200Model204NoModelDefaultError200ValidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 204 response with no payload
        /// </summary>
        A Get200Model204NoModelDefaultError204Valid();

        /// <summary>
        /// Send a 204 response with no payload
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<A> Get200Model204NoModelDefaultError204ValidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 201 response with valid payload: {'statusCode': '201'}
        /// </summary>
        A Get200Model204NoModelDefaultError201Invalid();

        /// <summary>
        /// Send a 201 response with valid payload: {'statusCode': '201'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<A> Get200Model204NoModelDefaultError201InvalidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 202 response with no payload:
        /// </summary>
        A Get200Model204NoModelDefaultError202None();

        /// <summary>
        /// Send a 202 response with no payload:
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<A> Get200Model204NoModelDefaultError202NoneAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}
        /// </summary>
        A Get200Model204NoModelDefaultError400Valid();

        /// <summary>
        /// Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<A> Get200Model204NoModelDefaultError400ValidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 200 response with valid payload: {'statusCode': '200'}
        /// </summary>
        A Get200Model201ModelDefaultError200Valid();

        /// <summary>
        /// Send a 200 response with valid payload: {'statusCode': '200'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<A> Get200Model201ModelDefaultError200ValidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}
        /// </summary>
        A Get200Model201ModelDefaultError201Valid();

        /// <summary>
        /// Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<A> Get200Model201ModelDefaultError201ValidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
        /// </summary>
        A Get200Model201ModelDefaultError400Valid();

        /// <summary>
        /// Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<A> Get200Model201ModelDefaultError400ValidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 200 response with valid payload: {'statusCode': '200'}
        /// </summary>
        object Get200ModelA201ModelC404ModelDDefaultError200Valid();

        /// <summary>
        /// Send a 200 response with valid payload: {'statusCode': '200'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<object> Get200ModelA201ModelC404ModelDDefaultError200ValidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 200 response with valid payload: {'httpCode': '201'}
        /// </summary>
        object Get200ModelA201ModelC404ModelDDefaultError201Valid();

        /// <summary>
        /// Send a 200 response with valid payload: {'httpCode': '201'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<object> Get200ModelA201ModelC404ModelDDefaultError201ValidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 200 response with valid payload: {'httpStatusCode': '404'}
        /// </summary>
        object Get200ModelA201ModelC404ModelDDefaultError404Valid();

        /// <summary>
        /// Send a 200 response with valid payload: {'httpStatusCode': '404'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<object> Get200ModelA201ModelC404ModelDDefaultError404ValidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
        /// </summary>
        object Get200ModelA201ModelC404ModelDDefaultError400Valid();

        /// <summary>
        /// Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<object> Get200ModelA201ModelC404ModelDDefaultError400ValidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 202 response with no payload
        /// </summary>
        void Get202None204NoneDefaultError202None();

        /// <summary>
        /// Send a 202 response with no payload
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task Get202None204NoneDefaultError202NoneAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 204 response with no payload
        /// </summary>
        void Get202None204NoneDefaultError204None();

        /// <summary>
        /// Send a 204 response with no payload
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task Get202None204NoneDefaultError204NoneAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
        /// </summary>
        void Get202None204NoneDefaultError400Valid();

        /// <summary>
        /// Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task Get202None204NoneDefaultError400ValidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 202 response with an unexpected payload {'property': 'value'}
        /// </summary>
        void Get202None204NoneDefaultNone202Invalid();

        /// <summary>
        /// Send a 202 response with an unexpected payload {'property': 'value'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task Get202None204NoneDefaultNone202InvalidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 204 response with no payload
        /// </summary>
        void Get202None204NoneDefaultNone204None();

        /// <summary>
        /// Send a 204 response with no payload
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task Get202None204NoneDefaultNone204NoneAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 400 response with no payload
        /// </summary>
        void Get202None204NoneDefaultNone400None();

        /// <summary>
        /// Send a 400 response with no payload
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task Get202None204NoneDefaultNone400NoneAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 400 response with an unexpected payload {'property': 'value'}
        /// </summary>
        void Get202None204NoneDefaultNone400Invalid();

        /// <summary>
        /// Send a 400 response with an unexpected payload {'property': 'value'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task Get202None204NoneDefaultNone400InvalidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 200 response with valid payload: {'statusCode': '200'}
        /// </summary>
        A GetDefaultModelA200Valid();

        /// <summary>
        /// Send a 200 response with valid payload: {'statusCode': '200'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<A> GetDefaultModelA200ValidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 200 response with no payload
        /// </summary>
        A GetDefaultModelA200None();

        /// <summary>
        /// Send a 200 response with no payload
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<A> GetDefaultModelA200NoneAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 400 response with valid payload: {'statusCode': '400'}
        /// </summary>
        A GetDefaultModelA400Valid();

        /// <summary>
        /// Send a 400 response with valid payload: {'statusCode': '400'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<A> GetDefaultModelA400ValidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 400 response with no payload
        /// </summary>
        A GetDefaultModelA400None();

        /// <summary>
        /// Send a 400 response with no payload
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<A> GetDefaultModelA400NoneAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 200 response with invalid payload: {'statusCode': '200'}
        /// </summary>
        void GetDefaultNone200Invalid();

        /// <summary>
        /// Send a 200 response with invalid payload: {'statusCode': '200'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task GetDefaultNone200InvalidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 200 response with no payload
        /// </summary>
        void GetDefaultNone200None();

        /// <summary>
        /// Send a 200 response with no payload
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task GetDefaultNone200NoneAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 400 response with valid payload: {'statusCode': '400'}
        /// </summary>
        void GetDefaultNone400Invalid();

        /// <summary>
        /// Send a 400 response with valid payload: {'statusCode': '400'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task GetDefaultNone400InvalidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 400 response with no payload
        /// </summary>
        void GetDefaultNone400None();

        /// <summary>
        /// Send a 400 response with no payload
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task GetDefaultNone400NoneAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type
        /// for model A
        /// </summary>
        A Get200ModelA200None();

        /// <summary>
        /// Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type
        /// for model A
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<A> Get200ModelA200NoneAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 200 response with payload {'statusCode': '200'}
        /// </summary>
        A Get200ModelA200Valid();

        /// <summary>
        /// Send a 200 response with payload {'statusCode': '200'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<A> Get200ModelA200ValidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 200 response with invalid payload {'statusCodeInvalid': '200'}
        /// </summary>
        A Get200ModelA200Invalid();

        /// <summary>
        /// Send a 200 response with invalid payload {'statusCodeInvalid': '200'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<A> Get200ModelA200InvalidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 400 response with no payload client should treat as an http error with no error model
        /// </summary>
        A Get200ModelA400None();

        /// <summary>
        /// Send a 400 response with no payload client should treat as an http error with no error model
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<A> Get200ModelA400NoneAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 200 response with payload {'statusCode': '400'}
        /// </summary>
        A Get200ModelA400Valid();

        /// <summary>
        /// Send a 200 response with payload {'statusCode': '400'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<A> Get200ModelA400ValidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 200 response with invalid payload {'statusCodeInvalid': '400'}
        /// </summary>
        A Get200ModelA400Invalid();

        /// <summary>
        /// Send a 200 response with invalid payload {'statusCodeInvalid': '400'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<A> Get200ModelA400InvalidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a 202 response with payload {'statusCode': '202'}
        /// </summary>
        A Get200ModelA202Valid();

        /// <summary>
        /// Send a 202 response with payload {'statusCode': '202'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<A> Get200ModelA202ValidAsync(CancellationToken cancellationToken = default(CancellationToken));
    }
}
