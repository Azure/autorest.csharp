// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsHttp
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// HttpRedirects operations.
    /// </summary>
    public partial class HttpRedirects : IHttpRedirects
    {
        /// <summary>
        /// Initializes a new instance of the HttpRedirects class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public HttpRedirects(IHttpRedirectsWithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private IHttpRedirectsWithHttpMessages OperationsWithHttpMessages { get; set; }

        public IHttpRedirectsWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Return 300 status code and redirect to /http/success/200
        /// </summary>
        public HttpRedirectsHead300Headers Head300()
        {
            return Head300Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 300 status code and redirect to /http/success/200
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HttpRedirectsHead300Headers> Head300Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Head300Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Return 300 status code and redirect to /http/success/200
        /// </summary>
        public IList<string> Get300()
        {
            return Get300Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 300 status code and redirect to /http/success/200
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<string>> Get300Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get300Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Return 301 status code and redirect to /http/success/200
        /// </summary>
        public HttpRedirectsHead301Headers Head301()
        {
            return Head301Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 301 status code and redirect to /http/success/200
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HttpRedirectsHead301Headers> Head301Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Head301Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Return 301 status code and redirect to /http/success/200
        /// </summary>
        public HttpRedirectsGet301Headers Get301()
        {
            return Get301Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 301 status code and redirect to /http/success/200
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HttpRedirectsGet301Headers> Get301Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get301Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Put true Boolean value in request returns 301.  This request should not be automatically redirected, but should
        /// return the received 301 to the caller for evaluation
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        public HttpRedirectsPut301Headers Put301(bool? booleanValue = default(bool?))
        {
            return Put301Async(booleanValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put true Boolean value in request returns 301.  This request should not be automatically redirected, but should
        /// return the received 301 to the caller for evaluation
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HttpRedirectsPut301Headers> Put301Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Put301Async(booleanValue, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Return 302 status code and redirect to /http/success/200
        /// </summary>
        public HttpRedirectsHead302Headers Head302()
        {
            return Head302Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 302 status code and redirect to /http/success/200
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HttpRedirectsHead302Headers> Head302Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Head302Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Return 302 status code and redirect to /http/success/200
        /// </summary>
        public HttpRedirectsGet302Headers Get302()
        {
            return Get302Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 302 status code and redirect to /http/success/200
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HttpRedirectsGet302Headers> Get302Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get302Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Patch true Boolean value in request returns 302.  This request should not be automatically redirected, but should
        /// return the received 302 to the caller for evaluation
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        public HttpRedirectsPatch302Headers Patch302(bool? booleanValue = default(bool?))
        {
            return Patch302Async(booleanValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Patch true Boolean value in request returns 302.  This request should not be automatically redirected, but should
        /// return the received 302 to the caller for evaluation
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HttpRedirectsPatch302Headers> Patch302Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Patch302Async(booleanValue, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Post true Boolean value in request returns 303.  This request should be automatically redirected usign a get,
        /// ultimately returning a 200 status code
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        public HttpRedirectsPost303Headers Post303(bool? booleanValue = default(bool?))
        {
            return Post303Async(booleanValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Post true Boolean value in request returns 303.  This request should be automatically redirected usign a get,
        /// ultimately returning a 200 status code
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HttpRedirectsPost303Headers> Post303Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Post303Async(booleanValue, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Redirect with 307, resulting in a 200 success
        /// </summary>
        public HttpRedirectsHead307Headers Head307()
        {
            return Head307Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Redirect with 307, resulting in a 200 success
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HttpRedirectsHead307Headers> Head307Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Head307Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Redirect get with 307, resulting in a 200 success
        /// </summary>
        public HttpRedirectsGet307Headers Get307()
        {
            return Get307Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Redirect get with 307, resulting in a 200 success
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HttpRedirectsGet307Headers> Get307Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get307Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Put redirected with 307, resulting in a 200 after redirect
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        public HttpRedirectsPut307Headers Put307(bool? booleanValue = default(bool?))
        {
            return Put307Async(booleanValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put redirected with 307, resulting in a 200 after redirect
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HttpRedirectsPut307Headers> Put307Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Put307Async(booleanValue, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Patch redirected with 307, resulting in a 200 after redirect
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        public HttpRedirectsPatch307Headers Patch307(bool? booleanValue = default(bool?))
        {
            return Patch307Async(booleanValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Patch redirected with 307, resulting in a 200 after redirect
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HttpRedirectsPatch307Headers> Patch307Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Patch307Async(booleanValue, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Post redirected with 307, resulting in a 200 after redirect
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        public HttpRedirectsPost307Headers Post307(bool? booleanValue = default(bool?))
        {
            return Post307Async(booleanValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Post redirected with 307, resulting in a 200 after redirect
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HttpRedirectsPost307Headers> Post307Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Post307Async(booleanValue, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Delete redirected with 307, resulting in a 200 after redirect
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        public HttpRedirectsDelete307Headers Delete307(bool? booleanValue = default(bool?))
        {
            return Delete307Async(booleanValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete redirected with 307, resulting in a 200 after redirect
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HttpRedirectsDelete307Headers> Delete307Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Delete307Async(booleanValue, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

    }
}
