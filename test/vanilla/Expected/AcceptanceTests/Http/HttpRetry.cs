// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsHttp
{
    using Microsoft.Rest;
    using Models;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// HttpRetry operations.
    /// </summary>
    public partial class HttpRetry : IHttpRetry
    {
        /// <summary>
        /// Initializes a new instance of the HttpRetry class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public HttpRetry(IHttpRetryWithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private IHttpRetryWithHttpMessages OperationsWithHttpMessages { get; set; }

        public IHttpRetryWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Return 408 status code, then 200 after retry
        /// </summary>
        public void Head408()
        {
            Head408Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 408 status code, then 200 after retry
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task Head408Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.Head408Async(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Return 500 status code, then 200 after retry
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        public void Put500(bool? booleanValue = default(bool?))
        {
            Put500Async(booleanValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 500 status code, then 200 after retry
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task Put500Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.Put500Async(booleanValue, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Return 500 status code, then 200 after retry
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        public void Patch500(bool? booleanValue = default(bool?))
        {
            Patch500Async(booleanValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 500 status code, then 200 after retry
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task Patch500Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.Patch500Async(booleanValue, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Return 502 status code, then 200 after retry
        /// </summary>
        public void Get502()
        {
            Get502Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 502 status code, then 200 after retry
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task Get502Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.Get502Async(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Return 503 status code, then 200 after retry
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        public void Post503(bool? booleanValue = default(bool?))
        {
            Post503Async(booleanValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 503 status code, then 200 after retry
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task Post503Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.Post503Async(booleanValue, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Return 503 status code, then 200 after retry
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        public void Delete503(bool? booleanValue = default(bool?))
        {
            Delete503Async(booleanValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 503 status code, then 200 after retry
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task Delete503Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.Delete503Async(booleanValue, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Return 504 status code, then 200 after retry
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        public void Put504(bool? booleanValue = default(bool?))
        {
            Put504Async(booleanValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 504 status code, then 200 after retry
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task Put504Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.Put504Async(booleanValue, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Return 504 status code, then 200 after retry
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        public void Patch504(bool? booleanValue = default(bool?))
        {
            Patch504Async(booleanValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 504 status code, then 200 after retry
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task Patch504Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.Patch504Async(booleanValue, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

    }
}
