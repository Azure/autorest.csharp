// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsHttp
{
    using Microsoft.Rest;
    using Models;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// HttpClientFailure operations.
    /// </summary>
    public partial class HttpClientFailure : IHttpClientFailure
    {
        /// <summary>
        /// Initializes a new instance of the HttpClientFailure class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public HttpClientFailure(IHttpClientFailureWithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private IHttpClientFailureWithHttpMessages OperationsWithHttpMessages { get; set; }

        public IHttpClientFailureWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Return 400 status code - should be represented in the client as an error
        /// </summary>
        public Error Head400()
        {
            return Head400Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 400 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> Head400Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Head400Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Return 400 status code - should be represented in the client as an error
        /// </summary>
        public Error Get400()
        {
            return Get400Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 400 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> Get400Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get400Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Return 400 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        public Error Put400(bool? booleanValue = default(bool?))
        {
            return Put400Async(booleanValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 400 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> Put400Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Put400Async(booleanValue, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Return 400 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        public Error Patch400(bool? booleanValue = default(bool?))
        {
            return Patch400Async(booleanValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 400 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> Patch400Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Patch400Async(booleanValue, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Return 400 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        public Error Post400(bool? booleanValue = default(bool?))
        {
            return Post400Async(booleanValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 400 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> Post400Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Post400Async(booleanValue, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Return 400 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        public Error Delete400(bool? booleanValue = default(bool?))
        {
            return Delete400Async(booleanValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 400 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> Delete400Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Delete400Async(booleanValue, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Return 401 status code - should be represented in the client as an error
        /// </summary>
        public Error Head401()
        {
            return Head401Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 401 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> Head401Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Head401Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Return 402 status code - should be represented in the client as an error
        /// </summary>
        public Error Get402()
        {
            return Get402Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 402 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> Get402Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get402Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Return 403 status code - should be represented in the client as an error
        /// </summary>
        public Error Get403()
        {
            return Get403Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 403 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> Get403Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get403Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Return 404 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        public Error Put404(bool? booleanValue = default(bool?))
        {
            return Put404Async(booleanValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 404 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> Put404Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Put404Async(booleanValue, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Return 405 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        public Error Patch405(bool? booleanValue = default(bool?))
        {
            return Patch405Async(booleanValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 405 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> Patch405Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Patch405Async(booleanValue, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Return 406 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        public Error Post406(bool? booleanValue = default(bool?))
        {
            return Post406Async(booleanValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 406 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> Post406Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Post406Async(booleanValue, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Return 407 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        public Error Delete407(bool? booleanValue = default(bool?))
        {
            return Delete407Async(booleanValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 407 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> Delete407Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Delete407Async(booleanValue, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Return 409 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        public Error Put409(bool? booleanValue = default(bool?))
        {
            return Put409Async(booleanValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 409 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> Put409Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Put409Async(booleanValue, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Return 410 status code - should be represented in the client as an error
        /// </summary>
        public Error Head410()
        {
            return Head410Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 410 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> Head410Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Head410Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Return 411 status code - should be represented in the client as an error
        /// </summary>
        public Error Get411()
        {
            return Get411Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 411 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> Get411Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get411Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Return 412 status code - should be represented in the client as an error
        /// </summary>
        public Error Get412()
        {
            return Get412Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 412 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> Get412Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get412Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Return 413 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        public Error Put413(bool? booleanValue = default(bool?))
        {
            return Put413Async(booleanValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 413 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> Put413Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Put413Async(booleanValue, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Return 414 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        public Error Patch414(bool? booleanValue = default(bool?))
        {
            return Patch414Async(booleanValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 414 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> Patch414Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Patch414Async(booleanValue, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Return 415 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        public Error Post415(bool? booleanValue = default(bool?))
        {
            return Post415Async(booleanValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 415 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> Post415Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Post415Async(booleanValue, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Return 416 status code - should be represented in the client as an error
        /// </summary>
        public Error Get416()
        {
            return Get416Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 416 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> Get416Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get416Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Return 417 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        public Error Delete417(bool? booleanValue = default(bool?))
        {
            return Delete417Async(booleanValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 417 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> Delete417Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Delete417Async(booleanValue, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Return 429 status code - should be represented in the client as an error
        /// </summary>
        public Error Head429()
        {
            return Head429Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return 429 status code - should be represented in the client as an error
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Error> Head429Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Head429Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

    }
}
