// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsHttp
{
    using Microsoft.Rest;
    using Models;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// MultipleResponses operations.
    /// </summary>
    public partial class MultipleResponses : IMultipleResponses
    {
        /// <summary>
        /// Initializes a new instance of the MultipleResponses class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public MultipleResponses(IMultipleResponsesWithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private IMultipleResponsesWithHttpMessages OperationsWithHttpMessages { get; set; }

        public IMultipleResponsesWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Send a 200 response with valid payload: {'statusCode': '200'}
        /// </summary>
        public A Get200Model204NoModelDefaultError200Valid()
        {
            return Get200Model204NoModelDefaultError200ValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 200 response with valid payload: {'statusCode': '200'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<A> Get200Model204NoModelDefaultError200ValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get200Model204NoModelDefaultError200ValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Send a 204 response with no payload
        /// </summary>
        public A Get200Model204NoModelDefaultError204Valid()
        {
            return Get200Model204NoModelDefaultError204ValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 204 response with no payload
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<A> Get200Model204NoModelDefaultError204ValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get200Model204NoModelDefaultError204ValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Send a 201 response with valid payload: {'statusCode': '201'}
        /// </summary>
        public A Get200Model204NoModelDefaultError201Invalid()
        {
            return Get200Model204NoModelDefaultError201InvalidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 201 response with valid payload: {'statusCode': '201'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<A> Get200Model204NoModelDefaultError201InvalidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get200Model204NoModelDefaultError201InvalidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Send a 202 response with no payload:
        /// </summary>
        public A Get200Model204NoModelDefaultError202None()
        {
            return Get200Model204NoModelDefaultError202NoneAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 202 response with no payload:
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<A> Get200Model204NoModelDefaultError202NoneAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get200Model204NoModelDefaultError202NoneAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}
        /// </summary>
        public A Get200Model204NoModelDefaultError400Valid()
        {
            return Get200Model204NoModelDefaultError400ValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<A> Get200Model204NoModelDefaultError400ValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get200Model204NoModelDefaultError400ValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Send a 200 response with valid payload: {'statusCode': '200'}
        /// </summary>
        public A Get200Model201ModelDefaultError200Valid()
        {
            return Get200Model201ModelDefaultError200ValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 200 response with valid payload: {'statusCode': '200'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<A> Get200Model201ModelDefaultError200ValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get200Model201ModelDefaultError200ValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}
        /// </summary>
        public A Get200Model201ModelDefaultError201Valid()
        {
            return Get200Model201ModelDefaultError201ValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<A> Get200Model201ModelDefaultError201ValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get200Model201ModelDefaultError201ValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
        /// </summary>
        public A Get200Model201ModelDefaultError400Valid()
        {
            return Get200Model201ModelDefaultError400ValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<A> Get200Model201ModelDefaultError400ValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get200Model201ModelDefaultError400ValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Send a 200 response with valid payload: {'statusCode': '200'}
        /// </summary>
        public object Get200ModelA201ModelC404ModelDDefaultError200Valid()
        {
            return Get200ModelA201ModelC404ModelDDefaultError200ValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 200 response with valid payload: {'statusCode': '200'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<object> Get200ModelA201ModelC404ModelDDefaultError200ValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get200ModelA201ModelC404ModelDDefaultError200ValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Send a 200 response with valid payload: {'httpCode': '201'}
        /// </summary>
        public object Get200ModelA201ModelC404ModelDDefaultError201Valid()
        {
            return Get200ModelA201ModelC404ModelDDefaultError201ValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 200 response with valid payload: {'httpCode': '201'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<object> Get200ModelA201ModelC404ModelDDefaultError201ValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get200ModelA201ModelC404ModelDDefaultError201ValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Send a 200 response with valid payload: {'httpStatusCode': '404'}
        /// </summary>
        public object Get200ModelA201ModelC404ModelDDefaultError404Valid()
        {
            return Get200ModelA201ModelC404ModelDDefaultError404ValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 200 response with valid payload: {'httpStatusCode': '404'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<object> Get200ModelA201ModelC404ModelDDefaultError404ValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get200ModelA201ModelC404ModelDDefaultError404ValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
        /// </summary>
        public object Get200ModelA201ModelC404ModelDDefaultError400Valid()
        {
            return Get200ModelA201ModelC404ModelDDefaultError400ValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<object> Get200ModelA201ModelC404ModelDDefaultError400ValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get200ModelA201ModelC404ModelDDefaultError400ValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Send a 202 response with no payload
        /// </summary>
        public void Get202None204NoneDefaultError202None()
        {
            Get202None204NoneDefaultError202NoneAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 202 response with no payload
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task Get202None204NoneDefaultError202NoneAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.Get202None204NoneDefaultError202NoneAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Send a 204 response with no payload
        /// </summary>
        public void Get202None204NoneDefaultError204None()
        {
            Get202None204NoneDefaultError204NoneAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 204 response with no payload
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task Get202None204NoneDefaultError204NoneAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.Get202None204NoneDefaultError204NoneAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
        /// </summary>
        public void Get202None204NoneDefaultError400Valid()
        {
            Get202None204NoneDefaultError400ValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task Get202None204NoneDefaultError400ValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.Get202None204NoneDefaultError400ValidAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Send a 202 response with an unexpected payload {'property': 'value'}
        /// </summary>
        public void Get202None204NoneDefaultNone202Invalid()
        {
            Get202None204NoneDefaultNone202InvalidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 202 response with an unexpected payload {'property': 'value'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task Get202None204NoneDefaultNone202InvalidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.Get202None204NoneDefaultNone202InvalidAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Send a 204 response with no payload
        /// </summary>
        public void Get202None204NoneDefaultNone204None()
        {
            Get202None204NoneDefaultNone204NoneAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 204 response with no payload
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task Get202None204NoneDefaultNone204NoneAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.Get202None204NoneDefaultNone204NoneAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Send a 400 response with no payload
        /// </summary>
        public void Get202None204NoneDefaultNone400None()
        {
            Get202None204NoneDefaultNone400NoneAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 400 response with no payload
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task Get202None204NoneDefaultNone400NoneAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.Get202None204NoneDefaultNone400NoneAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Send a 400 response with an unexpected payload {'property': 'value'}
        /// </summary>
        public void Get202None204NoneDefaultNone400Invalid()
        {
            Get202None204NoneDefaultNone400InvalidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 400 response with an unexpected payload {'property': 'value'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task Get202None204NoneDefaultNone400InvalidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.Get202None204NoneDefaultNone400InvalidAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Send a 200 response with valid payload: {'statusCode': '200'}
        /// </summary>
        public A GetDefaultModelA200Valid()
        {
            return GetDefaultModelA200ValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 200 response with valid payload: {'statusCode': '200'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<A> GetDefaultModelA200ValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDefaultModelA200ValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Send a 200 response with no payload
        /// </summary>
        public A GetDefaultModelA200None()
        {
            return GetDefaultModelA200NoneAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 200 response with no payload
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<A> GetDefaultModelA200NoneAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDefaultModelA200NoneAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Send a 400 response with valid payload: {'statusCode': '400'}
        /// </summary>
        public A GetDefaultModelA400Valid()
        {
            return GetDefaultModelA400ValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 400 response with valid payload: {'statusCode': '400'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<A> GetDefaultModelA400ValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDefaultModelA400ValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Send a 400 response with no payload
        /// </summary>
        public A GetDefaultModelA400None()
        {
            return GetDefaultModelA400NoneAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 400 response with no payload
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<A> GetDefaultModelA400NoneAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDefaultModelA400NoneAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Send a 200 response with invalid payload: {'statusCode': '200'}
        /// </summary>
        public void GetDefaultNone200Invalid()
        {
            GetDefaultNone200InvalidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 200 response with invalid payload: {'statusCode': '200'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task GetDefaultNone200InvalidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.GetDefaultNone200InvalidAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Send a 200 response with no payload
        /// </summary>
        public void GetDefaultNone200None()
        {
            GetDefaultNone200NoneAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 200 response with no payload
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task GetDefaultNone200NoneAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.GetDefaultNone200NoneAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Send a 400 response with valid payload: {'statusCode': '400'}
        /// </summary>
        public void GetDefaultNone400Invalid()
        {
            GetDefaultNone400InvalidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 400 response with valid payload: {'statusCode': '400'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task GetDefaultNone400InvalidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.GetDefaultNone400InvalidAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Send a 400 response with no payload
        /// </summary>
        public void GetDefaultNone400None()
        {
            GetDefaultNone400NoneAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 400 response with no payload
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task GetDefaultNone400NoneAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.GetDefaultNone400NoneAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type
        /// for model A
        /// </summary>
        public A Get200ModelA200None()
        {
            return Get200ModelA200NoneAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type
        /// for model A
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<A> Get200ModelA200NoneAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get200ModelA200NoneAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Send a 200 response with payload {'statusCode': '200'}
        /// </summary>
        public A Get200ModelA200Valid()
        {
            return Get200ModelA200ValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 200 response with payload {'statusCode': '200'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<A> Get200ModelA200ValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get200ModelA200ValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Send a 200 response with invalid payload {'statusCodeInvalid': '200'}
        /// </summary>
        public A Get200ModelA200Invalid()
        {
            return Get200ModelA200InvalidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 200 response with invalid payload {'statusCodeInvalid': '200'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<A> Get200ModelA200InvalidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get200ModelA200InvalidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Send a 400 response with no payload client should treat as an http error with no error model
        /// </summary>
        public A Get200ModelA400None()
        {
            return Get200ModelA400NoneAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 400 response with no payload client should treat as an http error with no error model
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<A> Get200ModelA400NoneAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get200ModelA400NoneAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Send a 200 response with payload {'statusCode': '400'}
        /// </summary>
        public A Get200ModelA400Valid()
        {
            return Get200ModelA400ValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 200 response with payload {'statusCode': '400'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<A> Get200ModelA400ValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get200ModelA400ValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Send a 200 response with invalid payload {'statusCodeInvalid': '400'}
        /// </summary>
        public A Get200ModelA400Invalid()
        {
            return Get200ModelA400InvalidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 200 response with invalid payload {'statusCodeInvalid': '400'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<A> Get200ModelA400InvalidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get200ModelA400InvalidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Send a 202 response with payload {'statusCode': '202'}
        /// </summary>
        public A Get200ModelA202Valid()
        {
            return Get200ModelA202ValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Send a 202 response with payload {'statusCode': '202'}
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<A> Get200ModelA202ValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Get200ModelA202ValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

    }
}
