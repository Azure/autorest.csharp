// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsHttp
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// HttpRedirects operations.
    /// </summary>
    public partial interface IHttpRedirects
    {
        IHttpRedirectsWithHttpMessages WithHttpMessages();

        /// <summary>
        /// Return 300 status code and redirect to /http/success/200
        /// </summary>
        HttpRedirectsHead300Headers Head300();

        /// <summary>
        /// Return 300 status code and redirect to /http/success/200
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpRedirectsHead300Headers> Head300Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Return 300 status code and redirect to /http/success/200
        /// </summary>
        IList<string> Get300();

        /// <summary>
        /// Return 300 status code and redirect to /http/success/200
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<IList<string>> Get300Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Return 301 status code and redirect to /http/success/200
        /// </summary>
        HttpRedirectsHead301Headers Head301();

        /// <summary>
        /// Return 301 status code and redirect to /http/success/200
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpRedirectsHead301Headers> Head301Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Return 301 status code and redirect to /http/success/200
        /// </summary>
        HttpRedirectsGet301Headers Get301();

        /// <summary>
        /// Return 301 status code and redirect to /http/success/200
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpRedirectsGet301Headers> Get301Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put true Boolean value in request returns 301.  This request should not be automatically redirected, but should
        /// return the received 301 to the caller for evaluation
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        HttpRedirectsPut301Headers Put301(bool? booleanValue = default(bool?));

        /// <summary>
        /// Put true Boolean value in request returns 301.  This request should not be automatically redirected, but should
        /// return the received 301 to the caller for evaluation
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpRedirectsPut301Headers> Put301Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Return 302 status code and redirect to /http/success/200
        /// </summary>
        HttpRedirectsHead302Headers Head302();

        /// <summary>
        /// Return 302 status code and redirect to /http/success/200
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpRedirectsHead302Headers> Head302Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Return 302 status code and redirect to /http/success/200
        /// </summary>
        HttpRedirectsGet302Headers Get302();

        /// <summary>
        /// Return 302 status code and redirect to /http/success/200
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpRedirectsGet302Headers> Get302Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Patch true Boolean value in request returns 302.  This request should not be automatically redirected, but should
        /// return the received 302 to the caller for evaluation
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        HttpRedirectsPatch302Headers Patch302(bool? booleanValue = default(bool?));

        /// <summary>
        /// Patch true Boolean value in request returns 302.  This request should not be automatically redirected, but should
        /// return the received 302 to the caller for evaluation
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpRedirectsPatch302Headers> Patch302Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Post true Boolean value in request returns 303.  This request should be automatically redirected usign a get,
        /// ultimately returning a 200 status code
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        HttpRedirectsPost303Headers Post303(bool? booleanValue = default(bool?));

        /// <summary>
        /// Post true Boolean value in request returns 303.  This request should be automatically redirected usign a get,
        /// ultimately returning a 200 status code
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpRedirectsPost303Headers> Post303Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Redirect with 307, resulting in a 200 success
        /// </summary>
        HttpRedirectsHead307Headers Head307();

        /// <summary>
        /// Redirect with 307, resulting in a 200 success
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpRedirectsHead307Headers> Head307Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Redirect get with 307, resulting in a 200 success
        /// </summary>
        HttpRedirectsGet307Headers Get307();

        /// <summary>
        /// Redirect get with 307, resulting in a 200 success
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpRedirectsGet307Headers> Get307Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put redirected with 307, resulting in a 200 after redirect
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        HttpRedirectsPut307Headers Put307(bool? booleanValue = default(bool?));

        /// <summary>
        /// Put redirected with 307, resulting in a 200 after redirect
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpRedirectsPut307Headers> Put307Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Patch redirected with 307, resulting in a 200 after redirect
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        HttpRedirectsPatch307Headers Patch307(bool? booleanValue = default(bool?));

        /// <summary>
        /// Patch redirected with 307, resulting in a 200 after redirect
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpRedirectsPatch307Headers> Patch307Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Post redirected with 307, resulting in a 200 after redirect
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        HttpRedirectsPost307Headers Post307(bool? booleanValue = default(bool?));

        /// <summary>
        /// Post redirected with 307, resulting in a 200 after redirect
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpRedirectsPost307Headers> Post307Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete redirected with 307, resulting in a 200 after redirect
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        HttpRedirectsDelete307Headers Delete307(bool? booleanValue = default(bool?));

        /// <summary>
        /// Delete redirected with 307, resulting in a 200 after redirect
        /// </summary>
        /// <param name='booleanValue'>
        /// Simple boolean value true
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpRedirectsDelete307Headers> Delete307Async(bool? booleanValue = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
    }
}
