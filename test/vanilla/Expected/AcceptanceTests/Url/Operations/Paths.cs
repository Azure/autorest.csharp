// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsUrl
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Paths operations.
    /// </summary>
    public partial class Paths : IPaths
    {
        /// <summary>
        /// Initializes a new instance of the Paths class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public Paths(IPathsWithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private IPathsWithHttpMessages OperationsWithHttpMessages { get; set; }

        public IPathsWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Get true Boolean value on path
        /// </summary>
        public void GetBooleanTrue()
        {
            GetBooleanTrueAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get true Boolean value on path
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task GetBooleanTrueAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.GetBooleanTrueAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get false Boolean value on path
        /// </summary>
        public void GetBooleanFalse()
        {
            GetBooleanFalseAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get false Boolean value on path
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task GetBooleanFalseAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.GetBooleanFalseAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get '1000000' integer value
        /// </summary>
        public void GetIntOneMillion()
        {
            GetIntOneMillionAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get '1000000' integer value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task GetIntOneMillionAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.GetIntOneMillionAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get '-1000000' integer value
        /// </summary>
        public void GetIntNegativeOneMillion()
        {
            GetIntNegativeOneMillionAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get '-1000000' integer value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task GetIntNegativeOneMillionAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.GetIntNegativeOneMillionAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get '10000000000' 64 bit integer value
        /// </summary>
        public void GetTenBillion()
        {
            GetTenBillionAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get '10000000000' 64 bit integer value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task GetTenBillionAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.GetTenBillionAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get '-10000000000' 64 bit integer value
        /// </summary>
        public void GetNegativeTenBillion()
        {
            GetNegativeTenBillionAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get '-10000000000' 64 bit integer value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task GetNegativeTenBillionAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.GetNegativeTenBillionAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get '1.034E+20' numeric value
        /// </summary>
        public void FloatScientificPositive()
        {
            FloatScientificPositiveAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get '1.034E+20' numeric value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task FloatScientificPositiveAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.FloatScientificPositiveAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get '-1.034E-20' numeric value
        /// </summary>
        public void FloatScientificNegative()
        {
            FloatScientificNegativeAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get '-1.034E-20' numeric value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task FloatScientificNegativeAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.FloatScientificNegativeAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get '9999999.999' numeric value
        /// </summary>
        public void DoubleDecimalPositive()
        {
            DoubleDecimalPositiveAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get '9999999.999' numeric value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task DoubleDecimalPositiveAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.DoubleDecimalPositiveAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get '-9999999.999' numeric value
        /// </summary>
        public void DoubleDecimalNegative()
        {
            DoubleDecimalNegativeAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get '-9999999.999' numeric value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task DoubleDecimalNegativeAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.DoubleDecimalNegativeAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value
        /// </summary>
        public void StringUnicode()
        {
            StringUnicodeAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task StringUnicodeAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.StringUnicodeAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get 'begin!*'();:@ &amp;=+$,/?#[]end
        /// </summary>
        public void StringUrlEncoded()
        {
            StringUrlEncodedAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get 'begin!*'();:@ &amp;=+$,/?#[]end
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task StringUrlEncodedAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.StringUrlEncodedAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get ''
        /// </summary>
        public void StringEmpty()
        {
            StringEmptyAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get ''
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task StringEmptyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.StringEmptyAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get null (should throw)
        /// </summary>
        /// <param name='stringPath'>
        /// null string value
        /// </param>
        public void StringNull(string stringPath)
        {
            StringNullAsync(stringPath).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get null (should throw)
        /// </summary>
        /// <param name='stringPath'>
        /// null string value
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task StringNullAsync(string stringPath, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.StringNullAsync(stringPath, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get using uri with 'green color' in path parameter
        /// </summary>
        /// <param name='enumPath'>
        /// send the value green. Possible values include: 'red color', 'green color', 'blue color'
        /// </param>
        public void EnumValid(UriColor enumPath)
        {
            EnumValidAsync(enumPath).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get using uri with 'green color' in path parameter
        /// </summary>
        /// <param name='enumPath'>
        /// send the value green. Possible values include: 'red color', 'green color', 'blue color'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task EnumValidAsync(UriColor enumPath, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.EnumValidAsync(enumPath, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get null (should throw on the client before the request is sent on wire)
        /// </summary>
        /// <param name='enumPath'>
        /// send null should throw. Possible values include: 'red color', 'green color', 'blue color'
        /// </param>
        public void EnumNull(UriColor enumPath)
        {
            EnumNullAsync(enumPath).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get null (should throw on the client before the request is sent on wire)
        /// </summary>
        /// <param name='enumPath'>
        /// send null should throw. Possible values include: 'red color', 'green color', 'blue color'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task EnumNullAsync(UriColor enumPath, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.EnumNullAsync(enumPath, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
        /// </summary>
        /// <param name='bytePath'>
        /// '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
        /// </param>
        public void ByteMultiByte(byte[] bytePath)
        {
            ByteMultiByteAsync(bytePath).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
        /// </summary>
        /// <param name='bytePath'>
        /// '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ByteMultiByteAsync(byte[] bytePath, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ByteMultiByteAsync(bytePath, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get '' as byte array
        /// </summary>
        public void ByteEmpty()
        {
            ByteEmptyAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get '' as byte array
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ByteEmptyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ByteEmptyAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get null as byte array (should throw)
        /// </summary>
        /// <param name='bytePath'>
        /// null as byte array (should throw)
        /// </param>
        public void ByteNull(byte[] bytePath)
        {
            ByteNullAsync(bytePath).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get null as byte array (should throw)
        /// </summary>
        /// <param name='bytePath'>
        /// null as byte array (should throw)
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ByteNullAsync(byte[] bytePath, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ByteNullAsync(bytePath, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get '2012-01-01' as date
        /// </summary>
        public void DateValid()
        {
            DateValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get '2012-01-01' as date
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task DateValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.DateValidAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get null as date - this should throw or be unusable on the client side, depending on date representation
        /// </summary>
        /// <param name='datePath'>
        /// null as date (should throw)
        /// </param>
        public void DateNull(System.DateTime datePath)
        {
            DateNullAsync(datePath).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get null as date - this should throw or be unusable on the client side, depending on date representation
        /// </summary>
        /// <param name='datePath'>
        /// null as date (should throw)
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task DateNullAsync(System.DateTime datePath, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.DateNullAsync(datePath, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get '2012-01-01T01:01:01Z' as date-time
        /// </summary>
        public void DateTimeValid()
        {
            DateTimeValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get '2012-01-01T01:01:01Z' as date-time
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task DateTimeValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.DateTimeValidAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get null as date-time, should be disallowed or throw depending on representation of date-time
        /// </summary>
        /// <param name='dateTimePath'>
        /// null as date-time
        /// </param>
        public void DateTimeNull(System.DateTime dateTimePath)
        {
            DateTimeNullAsync(dateTimePath).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get null as date-time, should be disallowed or throw depending on representation of date-time
        /// </summary>
        /// <param name='dateTimePath'>
        /// null as date-time
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task DateTimeNullAsync(System.DateTime dateTimePath, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.DateTimeNullAsync(dateTimePath, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get 'lorem' encoded value as 'bG9yZW0' (base64url)
        /// </summary>
        /// <param name='base64UrlPath'>
        /// base64url encoded value
        /// </param>
        public void Base64Url(byte[] base64UrlPath)
        {
            Base64UrlAsync(base64UrlPath).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get 'lorem' encoded value as 'bG9yZW0' (base64url)
        /// </summary>
        /// <param name='base64UrlPath'>
        /// base64url encoded value
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task Base64UrlAsync(byte[] base64UrlPath, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.Base64UrlAsync(base64UrlPath, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get an array of string ['ArrayPath1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format
        /// </summary>
        /// <param name='arrayPath'>
        /// an array of string ['ArrayPath1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format
        /// </param>
        public void ArrayCsvInPath(IList<string> arrayPath)
        {
            ArrayCsvInPathAsync(arrayPath).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an array of string ['ArrayPath1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format
        /// </summary>
        /// <param name='arrayPath'>
        /// an array of string ['ArrayPath1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ArrayCsvInPathAsync(IList<string> arrayPath, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ArrayCsvInPathAsync(arrayPath, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get the date 2016-04-13 encoded value as '1460505600' (Unix time)
        /// </summary>
        /// <param name='unixTimeUrlPath'>
        /// Unix time encoded value
        /// </param>
        public void UnixTimeUrl(System.DateTime unixTimeUrlPath)
        {
            UnixTimeUrlAsync(unixTimeUrlPath).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the date 2016-04-13 encoded value as '1460505600' (Unix time)
        /// </summary>
        /// <param name='unixTimeUrlPath'>
        /// Unix time encoded value
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task UnixTimeUrlAsync(System.DateTime unixTimeUrlPath, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.UnixTimeUrlAsync(unixTimeUrlPath, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

    }
}
