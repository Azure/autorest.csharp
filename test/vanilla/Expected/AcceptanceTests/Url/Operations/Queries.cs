// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsUrl
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Queries operations.
    /// </summary>
    public partial class Queries : IQueries
    {
        /// <summary>
        /// Initializes a new instance of the Queries class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public Queries(IQueriesWithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private IQueriesWithHttpMessages OperationsWithHttpMessages { get; set; }

        public IQueriesWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Get true Boolean value on path
        /// </summary>
        public void GetBooleanTrue()
        {
            GetBooleanTrueAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get true Boolean value on path
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task GetBooleanTrueAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.GetBooleanTrueAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get false Boolean value on path
        /// </summary>
        public void GetBooleanFalse()
        {
            GetBooleanFalseAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get false Boolean value on path
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task GetBooleanFalseAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.GetBooleanFalseAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get null Boolean value on query (query string should be absent)
        /// </summary>
        /// <param name='boolQuery'>
        /// null boolean value
        /// </param>
        public void GetBooleanNull(bool? boolQuery = default(bool?))
        {
            GetBooleanNullAsync(boolQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get null Boolean value on query (query string should be absent)
        /// </summary>
        /// <param name='boolQuery'>
        /// null boolean value
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task GetBooleanNullAsync(bool? boolQuery = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.GetBooleanNullAsync(boolQuery, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get '1000000' integer value
        /// </summary>
        public void GetIntOneMillion()
        {
            GetIntOneMillionAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get '1000000' integer value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task GetIntOneMillionAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.GetIntOneMillionAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get '-1000000' integer value
        /// </summary>
        public void GetIntNegativeOneMillion()
        {
            GetIntNegativeOneMillionAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get '-1000000' integer value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task GetIntNegativeOneMillionAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.GetIntNegativeOneMillionAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get null integer value (no query parameter)
        /// </summary>
        /// <param name='intQuery'>
        /// null integer value
        /// </param>
        public void GetIntNull(int? intQuery = default(int?))
        {
            GetIntNullAsync(intQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get null integer value (no query parameter)
        /// </summary>
        /// <param name='intQuery'>
        /// null integer value
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task GetIntNullAsync(int? intQuery = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.GetIntNullAsync(intQuery, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get '10000000000' 64 bit integer value
        /// </summary>
        public void GetTenBillion()
        {
            GetTenBillionAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get '10000000000' 64 bit integer value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task GetTenBillionAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.GetTenBillionAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get '-10000000000' 64 bit integer value
        /// </summary>
        public void GetNegativeTenBillion()
        {
            GetNegativeTenBillionAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get '-10000000000' 64 bit integer value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task GetNegativeTenBillionAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.GetNegativeTenBillionAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get 'null 64 bit integer value (no query param in uri)
        /// </summary>
        /// <param name='longQuery'>
        /// null 64 bit integer value
        /// </param>
        public void GetLongNull(long? longQuery = default(long?))
        {
            GetLongNullAsync(longQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get 'null 64 bit integer value (no query param in uri)
        /// </summary>
        /// <param name='longQuery'>
        /// null 64 bit integer value
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task GetLongNullAsync(long? longQuery = default(long?), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.GetLongNullAsync(longQuery, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get '1.034E+20' numeric value
        /// </summary>
        public void FloatScientificPositive()
        {
            FloatScientificPositiveAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get '1.034E+20' numeric value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task FloatScientificPositiveAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.FloatScientificPositiveAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get '-1.034E-20' numeric value
        /// </summary>
        public void FloatScientificNegative()
        {
            FloatScientificNegativeAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get '-1.034E-20' numeric value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task FloatScientificNegativeAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.FloatScientificNegativeAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get null numeric value (no query parameter)
        /// </summary>
        /// <param name='floatQuery'>
        /// null numeric value
        /// </param>
        public void FloatNull(double? floatQuery = default(double?))
        {
            FloatNullAsync(floatQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get null numeric value (no query parameter)
        /// </summary>
        /// <param name='floatQuery'>
        /// null numeric value
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task FloatNullAsync(double? floatQuery = default(double?), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.FloatNullAsync(floatQuery, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get '9999999.999' numeric value
        /// </summary>
        public void DoubleDecimalPositive()
        {
            DoubleDecimalPositiveAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get '9999999.999' numeric value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task DoubleDecimalPositiveAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.DoubleDecimalPositiveAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get '-9999999.999' numeric value
        /// </summary>
        public void DoubleDecimalNegative()
        {
            DoubleDecimalNegativeAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get '-9999999.999' numeric value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task DoubleDecimalNegativeAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.DoubleDecimalNegativeAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get null numeric value (no query parameter)
        /// </summary>
        /// <param name='doubleQuery'>
        /// null numeric value
        /// </param>
        public void DoubleNull(double? doubleQuery = default(double?))
        {
            DoubleNullAsync(doubleQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get null numeric value (no query parameter)
        /// </summary>
        /// <param name='doubleQuery'>
        /// null numeric value
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task DoubleNullAsync(double? doubleQuery = default(double?), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.DoubleNullAsync(doubleQuery, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value
        /// </summary>
        public void StringUnicode()
        {
            StringUnicodeAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task StringUnicodeAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.StringUnicodeAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get 'begin!*'();:@ &amp;=+$,/?#[]end
        /// </summary>
        public void StringUrlEncoded()
        {
            StringUrlEncodedAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get 'begin!*'();:@ &amp;=+$,/?#[]end
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task StringUrlEncodedAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.StringUrlEncodedAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get ''
        /// </summary>
        public void StringEmpty()
        {
            StringEmptyAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get ''
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task StringEmptyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.StringEmptyAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get null (no query parameter in url)
        /// </summary>
        /// <param name='stringQuery'>
        /// null string value
        /// </param>
        public void StringNull(string stringQuery = default(string))
        {
            StringNullAsync(stringQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get null (no query parameter in url)
        /// </summary>
        /// <param name='stringQuery'>
        /// null string value
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task StringNullAsync(string stringQuery = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.StringNullAsync(stringQuery, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get using uri with query parameter 'green color'
        /// </summary>
        /// <param name='enumQuery'>
        /// 'green color' enum value. Possible values include: 'red color', 'green color', 'blue color'
        /// </param>
        public void EnumValid(UriColor? enumQuery = default(UriColor?))
        {
            EnumValidAsync(enumQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get using uri with query parameter 'green color'
        /// </summary>
        /// <param name='enumQuery'>
        /// 'green color' enum value. Possible values include: 'red color', 'green color', 'blue color'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task EnumValidAsync(UriColor? enumQuery = default(UriColor?), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.EnumValidAsync(enumQuery, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get null (no query parameter in url)
        /// </summary>
        /// <param name='enumQuery'>
        /// null string value. Possible values include: 'red color', 'green color', 'blue color'
        /// </param>
        public void EnumNull(UriColor? enumQuery = default(UriColor?))
        {
            EnumNullAsync(enumQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get null (no query parameter in url)
        /// </summary>
        /// <param name='enumQuery'>
        /// null string value. Possible values include: 'red color', 'green color', 'blue color'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task EnumNullAsync(UriColor? enumQuery = default(UriColor?), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.EnumNullAsync(enumQuery, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
        /// </summary>
        /// <param name='byteQuery'>
        /// '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
        /// </param>
        public void ByteMultiByte(byte[] byteQuery = default(byte[]))
        {
            ByteMultiByteAsync(byteQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
        /// </summary>
        /// <param name='byteQuery'>
        /// '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ByteMultiByteAsync(byte[] byteQuery = default(byte[]), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ByteMultiByteAsync(byteQuery, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get '' as byte array
        /// </summary>
        public void ByteEmpty()
        {
            ByteEmptyAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get '' as byte array
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ByteEmptyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ByteEmptyAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get null as byte array (no query parameters in uri)
        /// </summary>
        /// <param name='byteQuery'>
        /// null as byte array (no query parameters in uri)
        /// </param>
        public void ByteNull(byte[] byteQuery = default(byte[]))
        {
            ByteNullAsync(byteQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get null as byte array (no query parameters in uri)
        /// </summary>
        /// <param name='byteQuery'>
        /// null as byte array (no query parameters in uri)
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ByteNullAsync(byte[] byteQuery = default(byte[]), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ByteNullAsync(byteQuery, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get '2012-01-01' as date
        /// </summary>
        public void DateValid()
        {
            DateValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get '2012-01-01' as date
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task DateValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.DateValidAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get null as date - this should result in no query parameters in uri
        /// </summary>
        /// <param name='dateQuery'>
        /// null as date (no query parameters in uri)
        /// </param>
        public void DateNull(System.DateTime? dateQuery = default(System.DateTime?))
        {
            DateNullAsync(dateQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get null as date - this should result in no query parameters in uri
        /// </summary>
        /// <param name='dateQuery'>
        /// null as date (no query parameters in uri)
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task DateNullAsync(System.DateTime? dateQuery = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.DateNullAsync(dateQuery, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get '2012-01-01T01:01:01Z' as date-time
        /// </summary>
        public void DateTimeValid()
        {
            DateTimeValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get '2012-01-01T01:01:01Z' as date-time
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task DateTimeValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.DateTimeValidAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get null as date-time, should result in no query parameters in uri
        /// </summary>
        /// <param name='dateTimeQuery'>
        /// null as date-time (no query parameters)
        /// </param>
        public void DateTimeNull(System.DateTime? dateTimeQuery = default(System.DateTime?))
        {
            DateTimeNullAsync(dateTimeQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get null as date-time, should result in no query parameters in uri
        /// </summary>
        /// <param name='dateTimeQuery'>
        /// null as date-time (no query parameters)
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task DateTimeNullAsync(System.DateTime? dateTimeQuery = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.DateTimeNullAsync(dateTimeQuery, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format
        /// </summary>
        /// <param name='arrayQuery'>
        /// an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format
        /// </param>
        public void ArrayStringCsvValid(IList<string> arrayQuery = default(IList<string>))
        {
            ArrayStringCsvValidAsync(arrayQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format
        /// </summary>
        /// <param name='arrayQuery'>
        /// an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ArrayStringCsvValidAsync(IList<string> arrayQuery = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ArrayStringCsvValidAsync(arrayQuery, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get a null array of string using the csv-array format
        /// </summary>
        /// <param name='arrayQuery'>
        /// a null array of string using the csv-array format
        /// </param>
        public void ArrayStringCsvNull(IList<string> arrayQuery = default(IList<string>))
        {
            ArrayStringCsvNullAsync(arrayQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a null array of string using the csv-array format
        /// </summary>
        /// <param name='arrayQuery'>
        /// a null array of string using the csv-array format
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ArrayStringCsvNullAsync(IList<string> arrayQuery = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ArrayStringCsvNullAsync(arrayQuery, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get an empty array [] of string using the csv-array format
        /// </summary>
        /// <param name='arrayQuery'>
        /// an empty array [] of string using the csv-array format
        /// </param>
        public void ArrayStringCsvEmpty(IList<string> arrayQuery = default(IList<string>))
        {
            ArrayStringCsvEmptyAsync(arrayQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an empty array [] of string using the csv-array format
        /// </summary>
        /// <param name='arrayQuery'>
        /// an empty array [] of string using the csv-array format
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ArrayStringCsvEmptyAsync(IList<string> arrayQuery = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ArrayStringCsvEmptyAsync(arrayQuery, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the ssv-array format
        /// </summary>
        /// <param name='arrayQuery'>
        /// an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the ssv-array format
        /// </param>
        public void ArrayStringSsvValid(IList<string> arrayQuery = default(IList<string>))
        {
            ArrayStringSsvValidAsync(arrayQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the ssv-array format
        /// </summary>
        /// <param name='arrayQuery'>
        /// an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the ssv-array format
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ArrayStringSsvValidAsync(IList<string> arrayQuery = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ArrayStringSsvValidAsync(arrayQuery, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the tsv-array format
        /// </summary>
        /// <param name='arrayQuery'>
        /// an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the tsv-array format
        /// </param>
        public void ArrayStringTsvValid(IList<string> arrayQuery = default(IList<string>))
        {
            ArrayStringTsvValidAsync(arrayQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the tsv-array format
        /// </summary>
        /// <param name='arrayQuery'>
        /// an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the tsv-array format
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ArrayStringTsvValidAsync(IList<string> arrayQuery = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ArrayStringTsvValidAsync(arrayQuery, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the pipes-array format
        /// </summary>
        /// <param name='arrayQuery'>
        /// an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the pipes-array format
        /// </param>
        public void ArrayStringPipesValid(IList<string> arrayQuery = default(IList<string>))
        {
            ArrayStringPipesValidAsync(arrayQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the pipes-array format
        /// </summary>
        /// <param name='arrayQuery'>
        /// an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the pipes-array format
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task ArrayStringPipesValidAsync(IList<string> arrayQuery = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.ArrayStringPipesValidAsync(arrayQuery, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

    }
}
