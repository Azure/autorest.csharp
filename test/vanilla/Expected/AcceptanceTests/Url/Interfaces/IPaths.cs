// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsUrl
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Paths operations.
    /// </summary>
    public partial interface IPaths
    {
        IPathsWithHttpMessages WithHttpMessages();

        /// <summary>
        /// Get true Boolean value on path
        /// </summary>
        void GetBooleanTrue();

        /// <summary>
        /// Get true Boolean value on path
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task GetBooleanTrueAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get false Boolean value on path
        /// </summary>
        void GetBooleanFalse();

        /// <summary>
        /// Get false Boolean value on path
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task GetBooleanFalseAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get '1000000' integer value
        /// </summary>
        void GetIntOneMillion();

        /// <summary>
        /// Get '1000000' integer value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task GetIntOneMillionAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get '-1000000' integer value
        /// </summary>
        void GetIntNegativeOneMillion();

        /// <summary>
        /// Get '-1000000' integer value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task GetIntNegativeOneMillionAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get '10000000000' 64 bit integer value
        /// </summary>
        void GetTenBillion();

        /// <summary>
        /// Get '10000000000' 64 bit integer value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task GetTenBillionAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get '-10000000000' 64 bit integer value
        /// </summary>
        void GetNegativeTenBillion();

        /// <summary>
        /// Get '-10000000000' 64 bit integer value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task GetNegativeTenBillionAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get '1.034E+20' numeric value
        /// </summary>
        void FloatScientificPositive();

        /// <summary>
        /// Get '1.034E+20' numeric value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task FloatScientificPositiveAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get '-1.034E-20' numeric value
        /// </summary>
        void FloatScientificNegative();

        /// <summary>
        /// Get '-1.034E-20' numeric value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task FloatScientificNegativeAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get '9999999.999' numeric value
        /// </summary>
        void DoubleDecimalPositive();

        /// <summary>
        /// Get '9999999.999' numeric value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task DoubleDecimalPositiveAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get '-9999999.999' numeric value
        /// </summary>
        void DoubleDecimalNegative();

        /// <summary>
        /// Get '-9999999.999' numeric value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task DoubleDecimalNegativeAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value
        /// </summary>
        void StringUnicode();

        /// <summary>
        /// Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task StringUnicodeAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get 'begin!*'();:@ &amp;=+$,/?#[]end
        /// </summary>
        void StringUrlEncoded();

        /// <summary>
        /// Get 'begin!*'();:@ &amp;=+$,/?#[]end
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task StringUrlEncodedAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get ''
        /// </summary>
        void StringEmpty();

        /// <summary>
        /// Get ''
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task StringEmptyAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get null (should throw)
        /// </summary>
        /// <param name='stringPath'>
        /// null string value
        /// </param>
        void StringNull(string stringPath);

        /// <summary>
        /// Get null (should throw)
        /// </summary>
        /// <param name='stringPath'>
        /// null string value
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task StringNullAsync(string stringPath, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get using uri with 'green color' in path parameter
        /// </summary>
        /// <param name='enumPath'>
        /// send the value green. Possible values include: 'red color', 'green color', 'blue color'
        /// </param>
        void EnumValid(UriColor enumPath);

        /// <summary>
        /// Get using uri with 'green color' in path parameter
        /// </summary>
        /// <param name='enumPath'>
        /// send the value green. Possible values include: 'red color', 'green color', 'blue color'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task EnumValidAsync(UriColor enumPath, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get null (should throw on the client before the request is sent on wire)
        /// </summary>
        /// <param name='enumPath'>
        /// send null should throw. Possible values include: 'red color', 'green color', 'blue color'
        /// </param>
        void EnumNull(UriColor enumPath);

        /// <summary>
        /// Get null (should throw on the client before the request is sent on wire)
        /// </summary>
        /// <param name='enumPath'>
        /// send null should throw. Possible values include: 'red color', 'green color', 'blue color'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task EnumNullAsync(UriColor enumPath, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
        /// </summary>
        /// <param name='bytePath'>
        /// '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
        /// </param>
        void ByteMultiByte(byte[] bytePath);

        /// <summary>
        /// Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
        /// </summary>
        /// <param name='bytePath'>
        /// '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task ByteMultiByteAsync(byte[] bytePath, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get '' as byte array
        /// </summary>
        void ByteEmpty();

        /// <summary>
        /// Get '' as byte array
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task ByteEmptyAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get null as byte array (should throw)
        /// </summary>
        /// <param name='bytePath'>
        /// null as byte array (should throw)
        /// </param>
        void ByteNull(byte[] bytePath);

        /// <summary>
        /// Get null as byte array (should throw)
        /// </summary>
        /// <param name='bytePath'>
        /// null as byte array (should throw)
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task ByteNullAsync(byte[] bytePath, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get '2012-01-01' as date
        /// </summary>
        void DateValid();

        /// <summary>
        /// Get '2012-01-01' as date
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task DateValidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get null as date - this should throw or be unusable on the client side, depending on date representation
        /// </summary>
        /// <param name='datePath'>
        /// null as date (should throw)
        /// </param>
        void DateNull(System.DateTime datePath);

        /// <summary>
        /// Get null as date - this should throw or be unusable on the client side, depending on date representation
        /// </summary>
        /// <param name='datePath'>
        /// null as date (should throw)
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task DateNullAsync(System.DateTime datePath, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get '2012-01-01T01:01:01Z' as date-time
        /// </summary>
        void DateTimeValid();

        /// <summary>
        /// Get '2012-01-01T01:01:01Z' as date-time
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task DateTimeValidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get null as date-time, should be disallowed or throw depending on representation of date-time
        /// </summary>
        /// <param name='dateTimePath'>
        /// null as date-time
        /// </param>
        void DateTimeNull(System.DateTime dateTimePath);

        /// <summary>
        /// Get null as date-time, should be disallowed or throw depending on representation of date-time
        /// </summary>
        /// <param name='dateTimePath'>
        /// null as date-time
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task DateTimeNullAsync(System.DateTime dateTimePath, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get 'lorem' encoded value as 'bG9yZW0' (base64url)
        /// </summary>
        /// <param name='base64UrlPath'>
        /// base64url encoded value
        /// </param>
        void Base64Url(byte[] base64UrlPath);

        /// <summary>
        /// Get 'lorem' encoded value as 'bG9yZW0' (base64url)
        /// </summary>
        /// <param name='base64UrlPath'>
        /// base64url encoded value
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task Base64UrlAsync(byte[] base64UrlPath, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get an array of string ['ArrayPath1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format
        /// </summary>
        /// <param name='arrayPath'>
        /// an array of string ['ArrayPath1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format
        /// </param>
        void ArrayCsvInPath(IList<string> arrayPath);

        /// <summary>
        /// Get an array of string ['ArrayPath1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format
        /// </summary>
        /// <param name='arrayPath'>
        /// an array of string ['ArrayPath1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task ArrayCsvInPathAsync(IList<string> arrayPath, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get the date 2016-04-13 encoded value as '1460505600' (Unix time)
        /// </summary>
        /// <param name='unixTimeUrlPath'>
        /// Unix time encoded value
        /// </param>
        void UnixTimeUrl(System.DateTime unixTimeUrlPath);

        /// <summary>
        /// Get the date 2016-04-13 encoded value as '1460505600' (Unix time)
        /// </summary>
        /// <param name='unixTimeUrlPath'>
        /// Unix time encoded value
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task UnixTimeUrlAsync(System.DateTime unixTimeUrlPath, CancellationToken cancellationToken = default(CancellationToken));
    }
}
