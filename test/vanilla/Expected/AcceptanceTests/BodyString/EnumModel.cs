// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsBodyString
{
    using Microsoft.Rest;
    using Models;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// EnumModel operations.
    /// </summary>
    public partial class EnumModel : IEnumModel
    {
        /// <summary>
        /// Initializes a new instance of the EnumModel class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public EnumModel(IEnumModelWithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private IEnumModelWithHttpMessages OperationsWithHttpMessages { get; set; }

        public IEnumModelWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Get enum value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'.
        /// </summary>
        public Colors? GetNotExpandable()
        {
            return GetNotExpandableAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get enum value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'.
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Colors?> GetNotExpandableAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetNotExpandableAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Sends value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'
        /// </summary>
        /// <param name='stringBody'>
        /// Possible values include: 'red color', 'green-color', 'blue_color'
        /// </param>
        public void PutNotExpandable(Colors stringBody)
        {
            PutNotExpandableAsync(stringBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Sends value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'
        /// </summary>
        /// <param name='stringBody'>
        /// Possible values include: 'red color', 'green-color', 'blue_color'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutNotExpandableAsync(Colors stringBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutNotExpandableAsync(stringBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get enum value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'.
        /// </summary>
        public Colors? GetReferenced()
        {
            return GetReferencedAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get enum value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'.
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Colors?> GetReferencedAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetReferencedAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Sends value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'
        /// </summary>
        /// <param name='enumStringBody'>
        /// Possible values include: 'red color', 'green-color', 'blue_color'
        /// </param>
        public void PutReferenced(Colors enumStringBody)
        {
            PutReferencedAsync(enumStringBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Sends value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'
        /// </summary>
        /// <param name='enumStringBody'>
        /// Possible values include: 'red color', 'green-color', 'blue_color'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutReferencedAsync(Colors enumStringBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutReferencedAsync(enumStringBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get value 'green-color' from the constant.
        /// </summary>
        public RefColorConstant GetReferencedConstant()
        {
            return GetReferencedConstantAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get value 'green-color' from the constant.
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<RefColorConstant> GetReferencedConstantAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetReferencedConstantAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Sends value 'green-color' from a constant
        /// </summary>
        /// <param name='field1'>
        /// Sample string.
        /// </param>
        public void PutReferencedConstant(string field1 = default(string))
        {
            PutReferencedConstantAsync(field1).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Sends value 'green-color' from a constant
        /// </summary>
        /// <param name='field1'>
        /// Sample string.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutReferencedConstantAsync(string field1 = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutReferencedConstantAsync(field1, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

    }
}
