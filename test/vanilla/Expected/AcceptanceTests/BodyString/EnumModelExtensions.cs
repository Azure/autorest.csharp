// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsBodyString
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for EnumModel.
    /// </summary>
    public static partial class EnumModelExtensions
    {
            /// <summary>
            /// Get enum value 'red color' from enumeration of 'red color', 'green-color',
            /// 'blue_color'.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Colors? GetNotExpandable(this IEnumModel operations)
            {
                return operations.GetNotExpandableAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get enum value 'red color' from enumeration of 'red color', 'green-color',
            /// 'blue_color'.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Colors?> GetNotExpandableAsync(this IEnumModel operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNotExpandableWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends value 'red color' from enumeration of 'red color', 'green-color',
            /// 'blue_color'
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='stringBody'>
            /// Possible values include: 'red color', 'green-color', 'blue_color'
            /// </param>
            public static void PutNotExpandable(this IEnumModel operations, Colors stringBody)
            {
                operations.PutNotExpandableAsync(stringBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends value 'red color' from enumeration of 'red color', 'green-color',
            /// 'blue_color'
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='stringBody'>
            /// Possible values include: 'red color', 'green-color', 'blue_color'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutNotExpandableAsync(this IEnumModel operations, Colors stringBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutNotExpandableWithHttpMessagesAsync(stringBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get enum value 'red color' from enumeration of 'red color', 'green-color',
            /// 'blue_color'.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Colors? GetReferenced(this IEnumModel operations)
            {
                return operations.GetReferencedAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get enum value 'red color' from enumeration of 'red color', 'green-color',
            /// 'blue_color'.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Colors?> GetReferencedAsync(this IEnumModel operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReferencedWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends value 'red color' from enumeration of 'red color', 'green-color',
            /// 'blue_color'
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enumStringBody'>
            /// Possible values include: 'red color', 'green-color', 'blue_color'
            /// </param>
            public static void PutReferenced(this IEnumModel operations, Colors enumStringBody)
            {
                operations.PutReferencedAsync(enumStringBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends value 'red color' from enumeration of 'red color', 'green-color',
            /// 'blue_color'
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='enumStringBody'>
            /// Possible values include: 'red color', 'green-color', 'blue_color'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutReferencedAsync(this IEnumModel operations, Colors enumStringBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutReferencedWithHttpMessagesAsync(enumStringBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get value 'green-color' from the constant.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static RefColorConstant GetReferencedConstant(this IEnumModel operations)
            {
                return operations.GetReferencedConstantAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get value 'green-color' from the constant.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RefColorConstant> GetReferencedConstantAsync(this IEnumModel operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReferencedConstantWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends value 'green-color' from a constant
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='field1'>
            /// Sample string.
            /// </param>
            public static void PutReferencedConstant(this IEnumModel operations, string field1 = default(string))
            {
                operations.PutReferencedConstantAsync(field1).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends value 'green-color' from a constant
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='field1'>
            /// Sample string.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutReferencedConstantAsync(this IEnumModel operations, string field1 = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutReferencedConstantWithHttpMessagesAsync(field1, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
