// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsBodyString
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// EnumModel operations.
    /// </summary>
    public partial interface IEnumModel
    {
        IEnumModelWithHttpMessages WithHttpMessages();

        /// <summary>
        /// Get enum value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'.
        /// </summary>
        Colors? GetNotExpandable();

        /// <summary>
        /// Get enum value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'.
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Colors?> GetNotExpandableAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Sends value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'
        /// </summary>
        /// <param name='stringBody'>
        /// Possible values include: 'red color', 'green-color', 'blue_color'
        /// </param>
        void PutNotExpandable(Colors stringBody);

        /// <summary>
        /// Sends value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'
        /// </summary>
        /// <param name='stringBody'>
        /// Possible values include: 'red color', 'green-color', 'blue_color'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutNotExpandableAsync(Colors stringBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get enum value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'.
        /// </summary>
        Colors? GetReferenced();

        /// <summary>
        /// Get enum value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'.
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Colors?> GetReferencedAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Sends value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'
        /// </summary>
        /// <param name='enumStringBody'>
        /// Possible values include: 'red color', 'green-color', 'blue_color'
        /// </param>
        void PutReferenced(Colors enumStringBody);

        /// <summary>
        /// Sends value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'
        /// </summary>
        /// <param name='enumStringBody'>
        /// Possible values include: 'red color', 'green-color', 'blue_color'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutReferencedAsync(Colors enumStringBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get value 'green-color' from the constant.
        /// </summary>
        RefColorConstant GetReferencedConstant();

        /// <summary>
        /// Get value 'green-color' from the constant.
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<RefColorConstant> GetReferencedConstantAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Sends value 'green-color' from a constant
        /// </summary>
        /// <param name='field1'>
        /// Sample string.
        /// </param>
        void PutReferencedConstant(string field1 = default(string));

        /// <summary>
        /// Sends value 'green-color' from a constant
        /// </summary>
        /// <param name='field1'>
        /// Sample string.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutReferencedConstantAsync(string field1 = default(string), CancellationToken cancellationToken = default(CancellationToken));
    }
}
