// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsBodyDateTimeRfc1123
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Datetimerfc1123 operations.
    /// </summary>
    public partial interface IDatetimerfc1123
    {
        IDatetimerfc1123WithHttpMessages WithHttpMessages();

        /// <summary>
        /// Get null datetime value
        /// </summary>
        System.DateTime? GetNull();

        /// <summary>
        /// Get null datetime value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<System.DateTime?> GetNullAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get invalid datetime value
        /// </summary>
        System.DateTime? GetInvalid();

        /// <summary>
        /// Get invalid datetime value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<System.DateTime?> GetInvalidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get overflow datetime value
        /// </summary>
        System.DateTime? GetOverflow();

        /// <summary>
        /// Get overflow datetime value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<System.DateTime?> GetOverflowAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get underflow datetime value
        /// </summary>
        System.DateTime? GetUnderflow();

        /// <summary>
        /// Get underflow datetime value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<System.DateTime?> GetUnderflowAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put max datetime value Fri, 31 Dec 9999 23:59:59 GMT
        /// </summary>
        /// <param name='datetimeBody'>
        /// </param>
        void PutUtcMaxDateTime(System.DateTime datetimeBody);

        /// <summary>
        /// Put max datetime value Fri, 31 Dec 9999 23:59:59 GMT
        /// </summary>
        /// <param name='datetimeBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutUtcMaxDateTimeAsync(System.DateTime datetimeBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get max datetime value fri, 31 dec 9999 23:59:59 gmt
        /// </summary>
        System.DateTime? GetUtcLowercaseMaxDateTime();

        /// <summary>
        /// Get max datetime value fri, 31 dec 9999 23:59:59 gmt
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<System.DateTime?> GetUtcLowercaseMaxDateTimeAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get max datetime value FRI, 31 DEC 9999 23:59:59 GMT
        /// </summary>
        System.DateTime? GetUtcUppercaseMaxDateTime();

        /// <summary>
        /// Get max datetime value FRI, 31 DEC 9999 23:59:59 GMT
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<System.DateTime?> GetUtcUppercaseMaxDateTimeAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put min datetime value Mon, 1 Jan 0001 00:00:00 GMT
        /// </summary>
        /// <param name='datetimeBody'>
        /// </param>
        void PutUtcMinDateTime(System.DateTime datetimeBody);

        /// <summary>
        /// Put min datetime value Mon, 1 Jan 0001 00:00:00 GMT
        /// </summary>
        /// <param name='datetimeBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutUtcMinDateTimeAsync(System.DateTime datetimeBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get min datetime value Mon, 1 Jan 0001 00:00:00 GMT
        /// </summary>
        System.DateTime? GetUtcMinDateTime();

        /// <summary>
        /// Get min datetime value Mon, 1 Jan 0001 00:00:00 GMT
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<System.DateTime?> GetUtcMinDateTimeAsync(CancellationToken cancellationToken = default(CancellationToken));
    }
}
