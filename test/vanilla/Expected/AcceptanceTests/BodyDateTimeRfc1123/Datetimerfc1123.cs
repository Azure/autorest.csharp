// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsBodyDateTimeRfc1123
{
    using Microsoft.Rest;
    using Models;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Datetimerfc1123 operations.
    /// </summary>
    public partial class Datetimerfc1123 : IDatetimerfc1123
    {
        /// <summary>
        /// Initializes a new instance of the Datetimerfc1123 class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public Datetimerfc1123(IDatetimerfc1123WithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private IDatetimerfc1123WithHttpMessages OperationsWithHttpMessages { get; set; }

        public IDatetimerfc1123WithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Get null datetime value
        /// </summary>
        public System.DateTime? GetNull()
        {
            return GetNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get null datetime value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<System.DateTime?> GetNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get invalid datetime value
        /// </summary>
        public System.DateTime? GetInvalid()
        {
            return GetInvalidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get invalid datetime value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<System.DateTime?> GetInvalidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetInvalidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get overflow datetime value
        /// </summary>
        public System.DateTime? GetOverflow()
        {
            return GetOverflowAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get overflow datetime value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<System.DateTime?> GetOverflowAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetOverflowAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get underflow datetime value
        /// </summary>
        public System.DateTime? GetUnderflow()
        {
            return GetUnderflowAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get underflow datetime value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<System.DateTime?> GetUnderflowAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetUnderflowAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put max datetime value Fri, 31 Dec 9999 23:59:59 GMT
        /// </summary>
        /// <param name='datetimeBody'>
        /// </param>
        public void PutUtcMaxDateTime(System.DateTime datetimeBody)
        {
            PutUtcMaxDateTimeAsync(datetimeBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put max datetime value Fri, 31 Dec 9999 23:59:59 GMT
        /// </summary>
        /// <param name='datetimeBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutUtcMaxDateTimeAsync(System.DateTime datetimeBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutUtcMaxDateTimeAsync(datetimeBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get max datetime value fri, 31 dec 9999 23:59:59 gmt
        /// </summary>
        public System.DateTime? GetUtcLowercaseMaxDateTime()
        {
            return GetUtcLowercaseMaxDateTimeAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get max datetime value fri, 31 dec 9999 23:59:59 gmt
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<System.DateTime?> GetUtcLowercaseMaxDateTimeAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetUtcLowercaseMaxDateTimeAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get max datetime value FRI, 31 DEC 9999 23:59:59 GMT
        /// </summary>
        public System.DateTime? GetUtcUppercaseMaxDateTime()
        {
            return GetUtcUppercaseMaxDateTimeAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get max datetime value FRI, 31 DEC 9999 23:59:59 GMT
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<System.DateTime?> GetUtcUppercaseMaxDateTimeAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetUtcUppercaseMaxDateTimeAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put min datetime value Mon, 1 Jan 0001 00:00:00 GMT
        /// </summary>
        /// <param name='datetimeBody'>
        /// </param>
        public void PutUtcMinDateTime(System.DateTime datetimeBody)
        {
            PutUtcMinDateTimeAsync(datetimeBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put min datetime value Mon, 1 Jan 0001 00:00:00 GMT
        /// </summary>
        /// <param name='datetimeBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutUtcMinDateTimeAsync(System.DateTime datetimeBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutUtcMinDateTimeAsync(datetimeBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get min datetime value Mon, 1 Jan 0001 00:00:00 GMT
        /// </summary>
        public System.DateTime? GetUtcMinDateTime()
        {
            return GetUtcMinDateTimeAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get min datetime value Mon, 1 Jan 0001 00:00:00 GMT
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<System.DateTime?> GetUtcMinDateTimeAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetUtcMinDateTimeAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

    }
}
