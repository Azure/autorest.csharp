// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsModelFlattening
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Resource Flattening for AutoRest
    /// </summary>
    public partial class AutoRestResourceFlatteningTestService : ServiceClient<AutoRestResourceFlatteningTestService>, IAutoRestResourceFlatteningTestService
    {
        /// <summary>
        /// Gets or sets the base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets JSON serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets JSON deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }


        private IAutoRestResourceFlatteningTestServiceWithHttpMessages OperationsWithHttpMessages { get; set; }

        public IAutoRestResourceFlatteningTestServiceWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Initializes a new instance of the AutoRestResourceFlatteningTestService class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public AutoRestResourceFlatteningTestService(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the AutoRestResourceFlatteningTestService class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public AutoRestResourceFlatteningTestService(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the AutoRestResourceFlatteningTestService class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public AutoRestResourceFlatteningTestService(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException(nameof(baseUri));
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the AutoRestResourceFlatteningTestService class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public AutoRestResourceFlatteningTestService(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException(nameof(baseUri));
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        /// </summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            OperationsWithHttpMessages = new AutoRestResourceFlatteningTestServiceWithHttpMessages(this);
            BaseUri = new System.Uri("http://localhost");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new TransformationJsonConverter());
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
            DeserializationSettings.Converters.Add(new TransformationJsonConverter());
        }
        /// <summary>
        /// Put External Resource as an Array
        /// <see href='http://tempuri.org' />
        /// </summary>
        /// <param name='resourceArray'>
        /// External Resource as an Array to put
        /// </param>
        public void PutArray(IList<Resource> resourceArray = default(IList<Resource>))
        {
            PutArrayAsync(resourceArray).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put External Resource as an Array
        /// <see href='http://tempuri.org' />
        /// </summary>
        /// <param name='resourceArray'>
        /// External Resource as an Array to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutArrayAsync(IList<Resource> resourceArray = default(IList<Resource>), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutArrayAsync(resourceArray, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get External Resource as an Array
        /// <see href='http://tempuri.org' />
        /// </summary>
        public IList<FlattenedProduct> GetArray()
        {
            return GetArrayAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get External Resource as an Array
        /// <see href='http://tempuri.org' />
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<FlattenedProduct>> GetArrayAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetArrayAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// No need to have a route in Express server for this operation. Used to verify the type flattened is not removed if
        /// it's referenced in an array
        /// <see href='http://tempuri.org' />
        /// </summary>
        /// <param name='resourceArray'>
        /// External Resource as an Array to put
        /// </param>
        public void PutWrappedArray(IList<WrappedProduct> resourceArray = default(IList<WrappedProduct>))
        {
            PutWrappedArrayAsync(resourceArray).GetAwaiter().GetResult();
        }

        /// <summary>
        /// No need to have a route in Express server for this operation. Used to verify the type flattened is not removed if
        /// it's referenced in an array
        /// <see href='http://tempuri.org' />
        /// </summary>
        /// <param name='resourceArray'>
        /// External Resource as an Array to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutWrappedArrayAsync(IList<WrappedProduct> resourceArray = default(IList<WrappedProduct>), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutWrappedArrayAsync(resourceArray, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// No need to have a route in Express server for this operation. Used to verify the type flattened is not removed if
        /// it's referenced in an array
        /// <see href='http://tempuri.org' />
        /// </summary>
        public IList<ProductWrapper> GetWrappedArray()
        {
            return GetWrappedArrayAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// No need to have a route in Express server for this operation. Used to verify the type flattened is not removed if
        /// it's referenced in an array
        /// <see href='http://tempuri.org' />
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<ProductWrapper>> GetWrappedArrayAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetWrappedArrayAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put External Resource as a Dictionary
        /// <see href='http://tempuri.org' />
        /// </summary>
        /// <param name='resourceDictionary'>
        /// External Resource as a Dictionary to put
        /// </param>
        public void PutDictionary(IDictionary<string, FlattenedProduct> resourceDictionary = default(IDictionary<string, FlattenedProduct>))
        {
            PutDictionaryAsync(resourceDictionary).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put External Resource as a Dictionary
        /// <see href='http://tempuri.org' />
        /// </summary>
        /// <param name='resourceDictionary'>
        /// External Resource as a Dictionary to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutDictionaryAsync(IDictionary<string, FlattenedProduct> resourceDictionary = default(IDictionary<string, FlattenedProduct>), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutDictionaryAsync(resourceDictionary, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get External Resource as a Dictionary
        /// <see href='http://tempuri.org' />
        /// </summary>
        public IDictionary<string, FlattenedProduct> GetDictionary()
        {
            return GetDictionaryAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get External Resource as a Dictionary
        /// <see href='http://tempuri.org' />
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IDictionary<string, FlattenedProduct>> GetDictionaryAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDictionaryAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put External Resource as a ResourceCollection
        /// <see href='http://tempuri.org' />
        /// </summary>
        /// <param name='resourceComplexObject'>
        /// External Resource as a ResourceCollection to put
        /// </param>
        public void PutResourceCollection(ResourceCollection resourceComplexObject = default(ResourceCollection))
        {
            PutResourceCollectionAsync(resourceComplexObject).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put External Resource as a ResourceCollection
        /// <see href='http://tempuri.org' />
        /// </summary>
        /// <param name='resourceComplexObject'>
        /// External Resource as a ResourceCollection to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutResourceCollectionAsync(ResourceCollection resourceComplexObject = default(ResourceCollection), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutResourceCollectionAsync(resourceComplexObject, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get External Resource as a ResourceCollection
        /// <see href='http://tempuri.org' />
        /// </summary>
        public ResourceCollection GetResourceCollection()
        {
            return GetResourceCollectionAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get External Resource as a ResourceCollection
        /// <see href='http://tempuri.org' />
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ResourceCollection> GetResourceCollectionAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetResourceCollectionAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put Simple Product with client flattening true on the model
        /// <see href='http://tempuri.org' />
        /// </summary>
        /// <param name='simpleBodyProduct'>
        /// Simple body product to put
        /// </param>
        public SimpleProduct PutSimpleProduct(SimpleProduct simpleBodyProduct = default(SimpleProduct))
        {
            return PutSimpleProductAsync(simpleBodyProduct).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put Simple Product with client flattening true on the model
        /// <see href='http://tempuri.org' />
        /// </summary>
        /// <param name='simpleBodyProduct'>
        /// Simple body product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<SimpleProduct> PutSimpleProductAsync(SimpleProduct simpleBodyProduct = default(SimpleProduct), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutSimpleProductAsync(simpleBodyProduct, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put Flattened Simple Product with client flattening true on the parameter
        /// <see href='http://tempuri.org' />
        /// </summary>
        /// <param name='productId'>
        /// Unique identifier representing a specific product for a given latitude &amp; longitude. For example, uberX in San
        /// Francisco will have a different product_id than uberX in Los Angeles.
        /// </param>
        /// <param name='maxProductDisplayName'>
        /// Display name of product.
        /// </param>
        /// <param name='description'>
        /// Description of product.
        /// </param>
        /// <param name='genericValue'>
        /// Generic URL value.
        /// </param>
        /// <param name='odatavalue'>
        /// URL value.
        /// </param>
        public SimpleProduct PostFlattenedSimpleProduct(string productId, string maxProductDisplayName, string description = default(string), string genericValue = default(string), string odatavalue = default(string))
        {
            return PostFlattenedSimpleProductAsync(productId, maxProductDisplayName, description, genericValue, odatavalue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put Flattened Simple Product with client flattening true on the parameter
        /// <see href='http://tempuri.org' />
        /// </summary>
        /// <param name='productId'>
        /// Unique identifier representing a specific product for a given latitude &amp; longitude. For example, uberX in San
        /// Francisco will have a different product_id than uberX in Los Angeles.
        /// </param>
        /// <param name='maxProductDisplayName'>
        /// Display name of product.
        /// </param>
        /// <param name='description'>
        /// Description of product.
        /// </param>
        /// <param name='genericValue'>
        /// Generic URL value.
        /// </param>
        /// <param name='odatavalue'>
        /// URL value.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<SimpleProduct> PostFlattenedSimpleProductAsync(string productId, string maxProductDisplayName, string description = default(string), string genericValue = default(string), string odatavalue = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PostFlattenedSimpleProductAsync(productId, maxProductDisplayName, description, genericValue, odatavalue, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put Simple Product with client flattening true on the model
        /// <see href='http://tempuri.org' />
        /// </summary>
        /// <param name='flattenParameterGroup'>
        /// Additional parameters for the operation
        /// </param>
        public SimpleProduct PutSimpleProductWithGrouping(FlattenParameterGroup flattenParameterGroup)
        {
            return PutSimpleProductWithGroupingAsync(flattenParameterGroup).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put Simple Product with client flattening true on the model
        /// <see href='http://tempuri.org' />
        /// </summary>
        /// <param name='flattenParameterGroup'>
        /// Additional parameters for the operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<SimpleProduct> PutSimpleProductWithGroupingAsync(FlattenParameterGroup flattenParameterGroup, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutSimpleProductWithGroupingAsync(flattenParameterGroup, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

    }
}
