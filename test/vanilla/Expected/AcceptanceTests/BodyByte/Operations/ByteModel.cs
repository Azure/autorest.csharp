// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsBodyByte
{
    using Microsoft.Rest;
    using Models;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// ByteModel operations.
    /// </summary>
    public partial class ByteModel : IByteModel
    {
        /// <summary>
        /// Initializes a new instance of the ByteModel class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public ByteModel(IByteModelWithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private IByteModelWithHttpMessages OperationsWithHttpMessages { get; set; }

        public IByteModelWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Get null byte value
        /// </summary>
        public byte[] GetNull()
        {
            return GetNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get null byte value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<byte[]> GetNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get empty byte value ''
        /// </summary>
        public byte[] GetEmpty()
        {
            return GetEmptyAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get empty byte value ''
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<byte[]> GetEmptyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetEmptyAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6)
        /// </summary>
        public byte[] GetNonAscii()
        {
            return GetNonAsciiAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6)
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<byte[]> GetNonAsciiAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetNonAsciiAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6)
        /// </summary>
        /// <param name='byteBody'>
        /// Base64-encoded non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6)
        /// </param>
        public void PutNonAscii(byte[] byteBody)
        {
            PutNonAsciiAsync(byteBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6)
        /// </summary>
        /// <param name='byteBody'>
        /// Base64-encoded non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6)
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutNonAsciiAsync(byte[] byteBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutNonAsciiAsync(byteBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get invalid byte value ':::SWAGGER::::'
        /// </summary>
        public byte[] GetInvalid()
        {
            return GetInvalidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get invalid byte value ':::SWAGGER::::'
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<byte[]> GetInvalidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetInvalidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

    }
}
