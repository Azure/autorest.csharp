// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsBodyDate
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Date operations.
    /// </summary>
    public partial interface IDate
    {
        IDateWithHttpMessages WithHttpMessages();

        /// <summary>
        /// Get null date value
        /// </summary>
        System.DateTime? GetNull();

        /// <summary>
        /// Get null date value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<System.DateTime?> GetNullAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get invalid date value
        /// </summary>
        System.DateTime? GetInvalidDate();

        /// <summary>
        /// Get invalid date value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<System.DateTime?> GetInvalidDateAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get overflow date value
        /// </summary>
        System.DateTime? GetOverflowDate();

        /// <summary>
        /// Get overflow date value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<System.DateTime?> GetOverflowDateAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get underflow date value
        /// </summary>
        System.DateTime? GetUnderflowDate();

        /// <summary>
        /// Get underflow date value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<System.DateTime?> GetUnderflowDateAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put max date value 9999-12-31
        /// </summary>
        /// <param name='dateBody'>
        /// </param>
        void PutMaxDate(System.DateTime dateBody);

        /// <summary>
        /// Put max date value 9999-12-31
        /// </summary>
        /// <param name='dateBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutMaxDateAsync(System.DateTime dateBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get max date value 9999-12-31
        /// </summary>
        System.DateTime? GetMaxDate();

        /// <summary>
        /// Get max date value 9999-12-31
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<System.DateTime?> GetMaxDateAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put min date value 0000-01-01
        /// </summary>
        /// <param name='dateBody'>
        /// </param>
        void PutMinDate(System.DateTime dateBody);

        /// <summary>
        /// Put min date value 0000-01-01
        /// </summary>
        /// <param name='dateBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutMinDateAsync(System.DateTime dateBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get min date value 0000-01-01
        /// </summary>
        System.DateTime? GetMinDate();

        /// <summary>
        /// Get min date value 0000-01-01
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<System.DateTime?> GetMinDateAsync(CancellationToken cancellationToken = default(CancellationToken));
    }
}
