// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsBodyDate
{
    using Microsoft.Rest;
    using Models;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Date operations.
    /// </summary>
    public partial class Date : IDate
    {
        /// <summary>
        /// Initializes a new instance of the Date class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public Date(IDateWithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private IDateWithHttpMessages OperationsWithHttpMessages { get; set; }

        public IDateWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Get null date value
        /// </summary>
        public System.DateTime? GetNull()
        {
            return GetNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get null date value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<System.DateTime?> GetNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get invalid date value
        /// </summary>
        public System.DateTime? GetInvalidDate()
        {
            return GetInvalidDateAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get invalid date value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<System.DateTime?> GetInvalidDateAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetInvalidDateAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get overflow date value
        /// </summary>
        public System.DateTime? GetOverflowDate()
        {
            return GetOverflowDateAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get overflow date value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<System.DateTime?> GetOverflowDateAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetOverflowDateAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get underflow date value
        /// </summary>
        public System.DateTime? GetUnderflowDate()
        {
            return GetUnderflowDateAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get underflow date value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<System.DateTime?> GetUnderflowDateAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetUnderflowDateAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put max date value 9999-12-31
        /// </summary>
        /// <param name='dateBody'>
        /// </param>
        public void PutMaxDate(System.DateTime dateBody)
        {
            PutMaxDateAsync(dateBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put max date value 9999-12-31
        /// </summary>
        /// <param name='dateBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutMaxDateAsync(System.DateTime dateBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutMaxDateAsync(dateBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get max date value 9999-12-31
        /// </summary>
        public System.DateTime? GetMaxDate()
        {
            return GetMaxDateAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get max date value 9999-12-31
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<System.DateTime?> GetMaxDateAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetMaxDateAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put min date value 0000-01-01
        /// </summary>
        /// <param name='dateBody'>
        /// </param>
        public void PutMinDate(System.DateTime dateBody)
        {
            PutMinDateAsync(dateBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put min date value 0000-01-01
        /// </summary>
        /// <param name='dateBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutMinDateAsync(System.DateTime dateBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutMinDateAsync(dateBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get min date value 0000-01-01
        /// </summary>
        public System.DateTime? GetMinDate()
        {
            return GetMinDateAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get min date value 0000-01-01
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<System.DateTime?> GetMinDateAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetMinDateAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

    }
}
