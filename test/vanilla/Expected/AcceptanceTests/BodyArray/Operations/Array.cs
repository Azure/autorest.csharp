// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.AcceptanceTestsBodyArray
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Array operations.
    /// </summary>
    public partial class Array : IArray
    {
        /// <summary>
        /// Initializes a new instance of the Array class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public Array(IArrayWithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private IArrayWithHttpMessages OperationsWithHttpMessages { get; set; }

        public IArrayWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Get null array value
        /// </summary>
        public IList<int?> GetNull()
        {
            return GetNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get null array value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<int?>> GetNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get invalid array [1, 2, 3
        /// </summary>
        public IList<int?> GetInvalid()
        {
            return GetInvalidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get invalid array [1, 2, 3
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<int?>> GetInvalidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetInvalidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get empty array value []
        /// </summary>
        public IList<int?> GetEmpty()
        {
            return GetEmptyAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get empty array value []
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<int?>> GetEmptyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetEmptyAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set array value empty []
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutEmpty(IList<string> arrayBody)
        {
            PutEmptyAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set array value empty []
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutEmptyAsync(IList<string> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutEmptyAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get boolean array value [true, false, false, true]
        /// </summary>
        public IList<bool?> GetBooleanTfft()
        {
            return GetBooleanTfftAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get boolean array value [true, false, false, true]
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<bool?>> GetBooleanTfftAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetBooleanTfftAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set array value empty [true, false, false, true]
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutBooleanTfft(IList<bool?> arrayBody)
        {
            PutBooleanTfftAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set array value empty [true, false, false, true]
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutBooleanTfftAsync(IList<bool?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutBooleanTfftAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get boolean array value [true, null, false]
        /// </summary>
        public IList<bool?> GetBooleanInvalidNull()
        {
            return GetBooleanInvalidNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get boolean array value [true, null, false]
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<bool?>> GetBooleanInvalidNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetBooleanInvalidNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get boolean array value [true, 'boolean', false]
        /// </summary>
        public IList<bool?> GetBooleanInvalidString()
        {
            return GetBooleanInvalidStringAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get boolean array value [true, 'boolean', false]
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<bool?>> GetBooleanInvalidStringAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetBooleanInvalidStringAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get integer array value [1, -1, 3, 300]
        /// </summary>
        public IList<int?> GetIntegerValid()
        {
            return GetIntegerValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get integer array value [1, -1, 3, 300]
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<int?>> GetIntegerValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetIntegerValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set array value empty [1, -1, 3, 300]
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutIntegerValid(IList<int?> arrayBody)
        {
            PutIntegerValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set array value empty [1, -1, 3, 300]
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutIntegerValidAsync(IList<int?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutIntegerValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get integer array value [1, null, 0]
        /// </summary>
        public IList<int?> GetIntInvalidNull()
        {
            return GetIntInvalidNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get integer array value [1, null, 0]
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<int?>> GetIntInvalidNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetIntInvalidNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get integer array value [1, 'integer', 0]
        /// </summary>
        public IList<int?> GetIntInvalidString()
        {
            return GetIntInvalidStringAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get integer array value [1, 'integer', 0]
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<int?>> GetIntInvalidStringAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetIntInvalidStringAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get integer array value [1, -1, 3, 300]
        /// </summary>
        public IList<long?> GetLongValid()
        {
            return GetLongValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get integer array value [1, -1, 3, 300]
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<long?>> GetLongValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetLongValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set array value empty [1, -1, 3, 300]
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutLongValid(IList<long?> arrayBody)
        {
            PutLongValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set array value empty [1, -1, 3, 300]
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutLongValidAsync(IList<long?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutLongValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get long array value [1, null, 0]
        /// </summary>
        public IList<long?> GetLongInvalidNull()
        {
            return GetLongInvalidNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get long array value [1, null, 0]
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<long?>> GetLongInvalidNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetLongInvalidNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get long array value [1, 'integer', 0]
        /// </summary>
        public IList<long?> GetLongInvalidString()
        {
            return GetLongInvalidStringAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get long array value [1, 'integer', 0]
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<long?>> GetLongInvalidStringAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetLongInvalidStringAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get float array value [0, -0.01, 1.2e20]
        /// </summary>
        public IList<double?> GetFloatValid()
        {
            return GetFloatValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get float array value [0, -0.01, 1.2e20]
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<double?>> GetFloatValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetFloatValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set array value [0, -0.01, 1.2e20]
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutFloatValid(IList<double?> arrayBody)
        {
            PutFloatValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set array value [0, -0.01, 1.2e20]
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutFloatValidAsync(IList<double?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutFloatValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get float array value [0.0, null, -1.2e20]
        /// </summary>
        public IList<double?> GetFloatInvalidNull()
        {
            return GetFloatInvalidNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get float array value [0.0, null, -1.2e20]
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<double?>> GetFloatInvalidNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetFloatInvalidNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get boolean array value [1.0, 'number', 0.0]
        /// </summary>
        public IList<double?> GetFloatInvalidString()
        {
            return GetFloatInvalidStringAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get boolean array value [1.0, 'number', 0.0]
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<double?>> GetFloatInvalidStringAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetFloatInvalidStringAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get float array value [0, -0.01, 1.2e20]
        /// </summary>
        public IList<double?> GetDoubleValid()
        {
            return GetDoubleValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get float array value [0, -0.01, 1.2e20]
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<double?>> GetDoubleValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDoubleValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set array value [0, -0.01, 1.2e20]
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutDoubleValid(IList<double?> arrayBody)
        {
            PutDoubleValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set array value [0, -0.01, 1.2e20]
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutDoubleValidAsync(IList<double?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutDoubleValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get float array value [0.0, null, -1.2e20]
        /// </summary>
        public IList<double?> GetDoubleInvalidNull()
        {
            return GetDoubleInvalidNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get float array value [0.0, null, -1.2e20]
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<double?>> GetDoubleInvalidNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDoubleInvalidNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get boolean array value [1.0, 'number', 0.0]
        /// </summary>
        public IList<double?> GetDoubleInvalidString()
        {
            return GetDoubleInvalidStringAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get boolean array value [1.0, 'number', 0.0]
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<double?>> GetDoubleInvalidStringAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDoubleInvalidStringAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get string array value ['foo1', 'foo2', 'foo3']
        /// </summary>
        public IList<string> GetStringValid()
        {
            return GetStringValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get string array value ['foo1', 'foo2', 'foo3']
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<string>> GetStringValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetStringValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set array value ['foo1', 'foo2', 'foo3']
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutStringValid(IList<string> arrayBody)
        {
            PutStringValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set array value ['foo1', 'foo2', 'foo3']
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutStringValidAsync(IList<string> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutStringValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get string array value ['foo', null, 'foo2']
        /// </summary>
        public IList<string> GetStringWithNull()
        {
            return GetStringWithNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get string array value ['foo', null, 'foo2']
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<string>> GetStringWithNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetStringWithNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get string array value ['foo', 123, 'foo2']
        /// </summary>
        public IList<string> GetStringWithInvalid()
        {
            return GetStringWithInvalidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get string array value ['foo', 123, 'foo2']
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<string>> GetStringWithInvalidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetStringWithInvalidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db',
        /// 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
        /// </summary>
        public IList<System.Guid?> GetUuidValid()
        {
            return GetUuidValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db',
        /// 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<System.Guid?>> GetUuidValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetUuidValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set array value  ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db',
        /// 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutUuidValid(IList<System.Guid?> arrayBody)
        {
            PutUuidValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set array value  ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db',
        /// 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutUuidValidAsync(IList<System.Guid?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutUuidValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'foo']
        /// </summary>
        public IList<System.Guid?> GetUuidInvalidChars()
        {
            return GetUuidInvalidCharsAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'foo']
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<System.Guid?>> GetUuidInvalidCharsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetUuidInvalidCharsAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get integer array value ['2000-12-01', '1980-01-02', '1492-10-12']
        /// </summary>
        public IList<System.DateTime?> GetDateValid()
        {
            return GetDateValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get integer array value ['2000-12-01', '1980-01-02', '1492-10-12']
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<System.DateTime?>> GetDateValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDateValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set array value  ['2000-12-01', '1980-01-02', '1492-10-12']
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutDateValid(IList<System.DateTime?> arrayBody)
        {
            PutDateValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set array value  ['2000-12-01', '1980-01-02', '1492-10-12']
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutDateValidAsync(IList<System.DateTime?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutDateValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get date array value ['2012-01-01', null, '1776-07-04']
        /// </summary>
        public IList<System.DateTime?> GetDateInvalidNull()
        {
            return GetDateInvalidNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get date array value ['2012-01-01', null, '1776-07-04']
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<System.DateTime?>> GetDateInvalidNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDateInvalidNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get date array value ['2011-03-22', 'date']
        /// </summary>
        public IList<System.DateTime?> GetDateInvalidChars()
        {
            return GetDateInvalidCharsAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get date array value ['2011-03-22', 'date']
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<System.DateTime?>> GetDateInvalidCharsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDateInvalidCharsAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get date-time array value ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00']
        /// </summary>
        public IList<System.DateTime?> GetDateTimeValid()
        {
            return GetDateTimeValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get date-time array value ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00']
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<System.DateTime?>> GetDateTimeValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDateTimeValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set array value  ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00']
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutDateTimeValid(IList<System.DateTime?> arrayBody)
        {
            PutDateTimeValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set array value  ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00']
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutDateTimeValidAsync(IList<System.DateTime?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutDateTimeValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get date array value ['2000-12-01t00:00:01z', null]
        /// </summary>
        public IList<System.DateTime?> GetDateTimeInvalidNull()
        {
            return GetDateTimeInvalidNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get date array value ['2000-12-01t00:00:01z', null]
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<System.DateTime?>> GetDateTimeInvalidNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDateTimeInvalidNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get date array value ['2000-12-01t00:00:01z', 'date-time']
        /// </summary>
        public IList<System.DateTime?> GetDateTimeInvalidChars()
        {
            return GetDateTimeInvalidCharsAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get date array value ['2000-12-01t00:00:01z', 'date-time']
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<System.DateTime?>> GetDateTimeInvalidCharsAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDateTimeInvalidCharsAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get date-time array value ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct 1492
        /// 10:15:01 GMT']
        /// </summary>
        public IList<System.DateTime?> GetDateTimeRfc1123Valid()
        {
            return GetDateTimeRfc1123ValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get date-time array value ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct 1492
        /// 10:15:01 GMT']
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<System.DateTime?>> GetDateTimeRfc1123ValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDateTimeRfc1123ValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set array value  ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01
        /// GMT']
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutDateTimeRfc1123Valid(IList<System.DateTime?> arrayBody)
        {
            PutDateTimeRfc1123ValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set array value  ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01
        /// GMT']
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutDateTimeRfc1123ValidAsync(IList<System.DateTime?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutDateTimeRfc1123ValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get duration array value ['P123DT22H14M12.011S', 'P5DT1H0M0S']
        /// </summary>
        public IList<System.TimeSpan?> GetDurationValid()
        {
            return GetDurationValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get duration array value ['P123DT22H14M12.011S', 'P5DT1H0M0S']
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<System.TimeSpan?>> GetDurationValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDurationValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Set array value  ['P123DT22H14M12.011S', 'P5DT1H0M0S']
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutDurationValid(IList<System.TimeSpan?> arrayBody)
        {
            PutDurationValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Set array value  ['P123DT22H14M12.011S', 'P5DT1H0M0S']
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutDurationValidAsync(IList<System.TimeSpan?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutDurationValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get byte array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each item encoded in base64
        /// </summary>
        public IList<byte[]> GetByteValid()
        {
            return GetByteValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get byte array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each item encoded in base64
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<byte[]>> GetByteValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetByteValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put the array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each elementencoded in base 64
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutByteValid(IList<byte[]> arrayBody)
        {
            PutByteValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put the array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each elementencoded in base 64
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutByteValidAsync(IList<byte[]> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutByteValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get byte array value [hex(AB, AC, AD), null] with the first item base64 encoded
        /// </summary>
        public IList<byte[]> GetByteInvalidNull()
        {
            return GetByteInvalidNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get byte array value [hex(AB, AC, AD), null] with the first item base64 encoded
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<byte[]>> GetByteInvalidNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetByteInvalidNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get array value ['a string that gets encoded with base64url', 'test string' 'Lorem ipsum'] with the items base64url
        /// encoded
        /// </summary>
        public IList<byte[]> GetBase64Url()
        {
            return GetBase64UrlAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get array value ['a string that gets encoded with base64url', 'test string' 'Lorem ipsum'] with the items base64url
        /// encoded
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<byte[]>> GetBase64UrlAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetBase64UrlAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get array of complex type null value
        /// </summary>
        public IList<Product> GetComplexNull()
        {
            return GetComplexNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get array of complex type null value
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<Product>> GetComplexNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetComplexNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get empty array of complex type []
        /// </summary>
        public IList<Product> GetComplexEmpty()
        {
            return GetComplexEmptyAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get empty array of complex type []
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<Product>> GetComplexEmptyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetComplexEmptyAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get array of complex type with null item [{'integer': 1 'string': '2'}, null, {'integer': 5, 'string': '6'}]
        /// </summary>
        public IList<Product> GetComplexItemNull()
        {
            return GetComplexItemNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get array of complex type with null item [{'integer': 1 'string': '2'}, null, {'integer': 5, 'string': '6'}]
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<Product>> GetComplexItemNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetComplexItemNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get array of complex type with empty item [{'integer': 1 'string': '2'}, {}, {'integer': 5, 'string': '6'}]
        /// </summary>
        public IList<Product> GetComplexItemEmpty()
        {
            return GetComplexItemEmptyAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get array of complex type with empty item [{'integer': 1 'string': '2'}, {}, {'integer': 5, 'string': '6'}]
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<Product>> GetComplexItemEmptyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetComplexItemEmptyAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get array of complex type with [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer': 5,
        /// 'string': '6'}]
        /// </summary>
        public IList<Product> GetComplexValid()
        {
            return GetComplexValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get array of complex type with [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer': 5,
        /// 'string': '6'}]
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<Product>> GetComplexValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetComplexValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put an array of complex type with values [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer':
        /// 5, 'string': '6'}]
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutComplexValid(IList<Product> arrayBody)
        {
            PutComplexValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put an array of complex type with values [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer':
        /// 5, 'string': '6'}]
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutComplexValidAsync(IList<Product> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutComplexValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get a null array
        /// </summary>
        public IList<IList<string>> GetArrayNull()
        {
            return GetArrayNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a null array
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<IList<string>>> GetArrayNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetArrayNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get an empty array []
        /// </summary>
        public IList<IList<string>> GetArrayEmpty()
        {
            return GetArrayEmptyAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an empty array []
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<IList<string>>> GetArrayEmptyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetArrayEmptyAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get an array of array of strings [['1', '2', '3'], null, ['7', '8', '9']]
        /// </summary>
        public IList<IList<string>> GetArrayItemNull()
        {
            return GetArrayItemNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an array of array of strings [['1', '2', '3'], null, ['7', '8', '9']]
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<IList<string>>> GetArrayItemNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetArrayItemNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get an array of array of strings [['1', '2', '3'], [], ['7', '8', '9']]
        /// </summary>
        public IList<IList<string>> GetArrayItemEmpty()
        {
            return GetArrayItemEmptyAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an array of array of strings [['1', '2', '3'], [], ['7', '8', '9']]
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<IList<string>>> GetArrayItemEmptyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetArrayItemEmptyAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get an array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
        /// </summary>
        public IList<IList<string>> GetArrayValid()
        {
            return GetArrayValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<IList<string>>> GetArrayValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetArrayValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put An array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutArrayValid(IList<IList<string>> arrayBody)
        {
            PutArrayValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put An array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutArrayValidAsync(IList<IList<string>> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutArrayValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get an array of Dictionaries with value null
        /// </summary>
        public IList<IDictionary<string, string>> GetDictionaryNull()
        {
            return GetDictionaryNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an array of Dictionaries with value null
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<IDictionary<string, string>>> GetDictionaryNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDictionaryNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get an array of Dictionaries of type &lt;string, string&gt; with value []
        /// </summary>
        public IList<IDictionary<string, string>> GetDictionaryEmpty()
        {
            return GetDictionaryEmptyAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an array of Dictionaries of type &lt;string, string&gt; with value []
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<IDictionary<string, string>>> GetDictionaryEmptyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDictionaryEmptyAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'},
        /// null, {'7': 'seven', '8': 'eight', '9': 'nine'}]
        /// </summary>
        public IList<IDictionary<string, string>> GetDictionaryItemNull()
        {
            return GetDictionaryItemNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'},
        /// null, {'7': 'seven', '8': 'eight', '9': 'nine'}]
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<IDictionary<string, string>>> GetDictionaryItemNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDictionaryItemNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'}, {},
        /// {'7': 'seven', '8': 'eight', '9': 'nine'}]
        /// </summary>
        public IList<IDictionary<string, string>> GetDictionaryItemEmpty()
        {
            return GetDictionaryItemEmptyAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'}, {},
        /// {'7': 'seven', '8': 'eight', '9': 'nine'}]
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<IDictionary<string, string>>> GetDictionaryItemEmptyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDictionaryItemEmptyAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'},
        /// {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
        /// </summary>
        public IList<IDictionary<string, string>> GetDictionaryValid()
        {
            return GetDictionaryValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'},
        /// {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<IList<IDictionary<string, string>>> GetDictionaryValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetDictionaryValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'},
        /// {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        public void PutDictionaryValid(IList<IDictionary<string, string>> arrayBody)
        {
            PutDictionaryValidAsync(arrayBody).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'},
        /// {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
        /// </summary>
        /// <param name='arrayBody'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutDictionaryValidAsync(IList<IDictionary<string, string>> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutDictionaryValidAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

    }
}
