// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Fixtures.MirrorSequences
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SequenceRequestResponseTest.
    /// </summary>
    public static partial class SequenceRequestResponseTestExtensions
    {
            /// <summary>
            /// Creates a new pet in the store.  Duplicates are allowed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pets'>
            /// Pets to add to the store
            /// </param>
            public static IList<Pet> AddPet(this ISequenceRequestResponseTest operations, IList<Pet> pets)
            {
                return operations.AddPetAsync(pets).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new pet in the store.  Duplicates are allowed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pets'>
            /// Pets to add to the store
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Pet>> AddPetAsync(this ISequenceRequestResponseTest operations, IList<Pet> pets, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddPetWithHttpMessagesAsync(pets, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds new pet stylesin the store.  Duplicates are allowed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='petStyle'>
            /// Pet style to add to the store
            /// </param>
            public static IList<int?> AddPetStyles(this ISequenceRequestResponseTest operations, IList<int?> petStyle)
            {
                return operations.AddPetStylesAsync(petStyle).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds new pet stylesin the store.  Duplicates are allowed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='petStyle'>
            /// Pet style to add to the store
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<int?>> AddPetStylesAsync(this ISequenceRequestResponseTest operations, IList<int?> petStyle, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddPetStylesWithHttpMessagesAsync(petStyle, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates new pet stylesin the store.  Duplicates are allowed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='petStyle'>
            /// Pet style to add to the store
            /// </param>
            public static IList<int?> UpdatePetStyles(this ISequenceRequestResponseTest operations, IList<int?> petStyle)
            {
                return operations.UpdatePetStylesAsync(petStyle).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates new pet stylesin the store.  Duplicates are allowed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='petStyle'>
            /// Pet style to add to the store
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<int?>> UpdatePetStylesAsync(this ISequenceRequestResponseTest operations, IList<int?> petStyle, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePetStylesWithHttpMessagesAsync(petStyle, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
