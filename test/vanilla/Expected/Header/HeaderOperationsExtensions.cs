// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Fixtures.Header
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for HeaderOperations.
    /// </summary>
    public static partial class HeaderOperationsExtensions
    {
            /// <summary>
            /// Send a post request with header value "User-Agent": "overwrite"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userAgent'>
            /// Send a post request with header value "User-Agent": "overwrite"
            /// </param>
            public static void ParamExistingKey(this IHeaderOperations operations, string userAgent)
            {
                operations.ParamExistingKeyAsync(userAgent).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send a post request with header value "User-Agent": "overwrite"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userAgent'>
            /// Send a post request with header value "User-Agent": "overwrite"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ParamExistingKeyAsync(this IHeaderOperations operations, string userAgent, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ParamExistingKeyWithHttpMessagesAsync(userAgent, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a response with header value "User-Agent": "overwrite"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static HeaderResponseExistingKeyHeaders ResponseExistingKey(this IHeaderOperations operations)
            {
                return operations.ResponseExistingKeyAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a response with header value "User-Agent": "overwrite"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HeaderResponseExistingKeyHeaders> ResponseExistingKeyAsync(this IHeaderOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResponseExistingKeyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Send a post request with header value "Content-Type": "text/html"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contentType'>
            /// Send a post request with header value "Content-Type": "text/html"
            /// </param>
            public static void ParamProtectedKey(this IHeaderOperations operations, string contentType)
            {
                operations.ParamProtectedKeyAsync(contentType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send a post request with header value "Content-Type": "text/html"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contentType'>
            /// Send a post request with header value "Content-Type": "text/html"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ParamProtectedKeyAsync(this IHeaderOperations operations, string contentType, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ParamProtectedKeyWithHttpMessagesAsync(contentType, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a response with header value "Content-Type": "text/html"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static HeaderResponseProtectedKeyHeaders ResponseProtectedKey(this IHeaderOperations operations)
            {
                return operations.ResponseProtectedKeyAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a response with header value "Content-Type": "text/html"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HeaderResponseProtectedKeyHeaders> ResponseProtectedKeyAsync(this IHeaderOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResponseProtectedKeyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Send a post request with header values "scenario": "positive", "value": 1
            /// or "scenario": "negative", "value": -2
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "positive" or "negative"
            /// </param>
            /// <param name='value'>
            /// Send a post request with header values 1 or -2
            /// </param>
            public static void ParamInteger(this IHeaderOperations operations, string scenario, int value)
            {
                operations.ParamIntegerAsync(scenario, value).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send a post request with header values "scenario": "positive", "value": 1
            /// or "scenario": "negative", "value": -2
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "positive" or "negative"
            /// </param>
            /// <param name='value'>
            /// Send a post request with header values 1 or -2
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ParamIntegerAsync(this IHeaderOperations operations, string scenario, int value, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ParamIntegerWithHttpMessagesAsync(scenario, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a response with header value "value": 1 or -2
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "positive" or "negative"
            /// </param>
            public static HeaderResponseIntegerHeaders ResponseInteger(this IHeaderOperations operations, string scenario)
            {
                return operations.ResponseIntegerAsync(scenario).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a response with header value "value": 1 or -2
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "positive" or "negative"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HeaderResponseIntegerHeaders> ResponseIntegerAsync(this IHeaderOperations operations, string scenario, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResponseIntegerWithHttpMessagesAsync(scenario, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Send a post request with header values "scenario": "positive", "value": 105
            /// or "scenario": "negative", "value": -2
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "positive" or "negative"
            /// </param>
            /// <param name='value'>
            /// Send a post request with header values 105 or -2
            /// </param>
            public static void ParamLong(this IHeaderOperations operations, string scenario, long value)
            {
                operations.ParamLongAsync(scenario, value).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send a post request with header values "scenario": "positive", "value": 105
            /// or "scenario": "negative", "value": -2
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "positive" or "negative"
            /// </param>
            /// <param name='value'>
            /// Send a post request with header values 105 or -2
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ParamLongAsync(this IHeaderOperations operations, string scenario, long value, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ParamLongWithHttpMessagesAsync(scenario, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a response with header value "value": 105 or -2
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "positive" or "negative"
            /// </param>
            public static HeaderResponseLongHeaders ResponseLong(this IHeaderOperations operations, string scenario)
            {
                return operations.ResponseLongAsync(scenario).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a response with header value "value": 105 or -2
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "positive" or "negative"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HeaderResponseLongHeaders> ResponseLongAsync(this IHeaderOperations operations, string scenario, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResponseLongWithHttpMessagesAsync(scenario, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Send a post request with header values "scenario": "positive", "value":
            /// 0.07 or "scenario": "negative", "value": -3.0
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "positive" or "negative"
            /// </param>
            /// <param name='value'>
            /// Send a post request with header values 0.07 or -3.0
            /// </param>
            public static void ParamFloat(this IHeaderOperations operations, string scenario, double value)
            {
                operations.ParamFloatAsync(scenario, value).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send a post request with header values "scenario": "positive", "value":
            /// 0.07 or "scenario": "negative", "value": -3.0
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "positive" or "negative"
            /// </param>
            /// <param name='value'>
            /// Send a post request with header values 0.07 or -3.0
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ParamFloatAsync(this IHeaderOperations operations, string scenario, double value, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ParamFloatWithHttpMessagesAsync(scenario, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a response with header value "value": 0.07 or -3.0
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "positive" or "negative"
            /// </param>
            public static HeaderResponseFloatHeaders ResponseFloat(this IHeaderOperations operations, string scenario)
            {
                return operations.ResponseFloatAsync(scenario).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a response with header value "value": 0.07 or -3.0
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "positive" or "negative"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HeaderResponseFloatHeaders> ResponseFloatAsync(this IHeaderOperations operations, string scenario, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResponseFloatWithHttpMessagesAsync(scenario, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Send a post request with header values "scenario": "positive", "value":
            /// 7e120 or "scenario": "negative", "value": -3.0
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "positive" or "negative"
            /// </param>
            /// <param name='value'>
            /// Send a post request with header values 7e120 or -3.0
            /// </param>
            public static void ParamDouble(this IHeaderOperations operations, string scenario, double value)
            {
                operations.ParamDoubleAsync(scenario, value).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send a post request with header values "scenario": "positive", "value":
            /// 7e120 or "scenario": "negative", "value": -3.0
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "positive" or "negative"
            /// </param>
            /// <param name='value'>
            /// Send a post request with header values 7e120 or -3.0
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ParamDoubleAsync(this IHeaderOperations operations, string scenario, double value, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ParamDoubleWithHttpMessagesAsync(scenario, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a response with header value "value": 7e120 or -3.0
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "positive" or "negative"
            /// </param>
            public static HeaderResponseDoubleHeaders ResponseDouble(this IHeaderOperations operations, string scenario)
            {
                return operations.ResponseDoubleAsync(scenario).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a response with header value "value": 7e120 or -3.0
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "positive" or "negative"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HeaderResponseDoubleHeaders> ResponseDoubleAsync(this IHeaderOperations operations, string scenario, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResponseDoubleWithHttpMessagesAsync(scenario, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Send a post request with header values "scenario": "true", "value": true or
            /// "scenario": "false", "value": false
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "true" or "false"
            /// </param>
            /// <param name='value'>
            /// Send a post request with header values true or false
            /// </param>
            public static void ParamBool(this IHeaderOperations operations, string scenario, bool value)
            {
                operations.ParamBoolAsync(scenario, value).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send a post request with header values "scenario": "true", "value": true or
            /// "scenario": "false", "value": false
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "true" or "false"
            /// </param>
            /// <param name='value'>
            /// Send a post request with header values true or false
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ParamBoolAsync(this IHeaderOperations operations, string scenario, bool value, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ParamBoolWithHttpMessagesAsync(scenario, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a response with header value "value": true or false
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "true" or "false"
            /// </param>
            public static HeaderResponseBoolHeaders ResponseBool(this IHeaderOperations operations, string scenario)
            {
                return operations.ResponseBoolAsync(scenario).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a response with header value "value": true or false
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "true" or "false"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HeaderResponseBoolHeaders> ResponseBoolAsync(this IHeaderOperations operations, string scenario, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResponseBoolWithHttpMessagesAsync(scenario, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Send a post request with header values "scenario": "valid", "value": "The
            /// quick brown fox jumps over the lazy dog" or "scenario": "null", "value":
            /// null or "scenario": "empty", "value": ""
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid" or "null" or
            /// "empty"
            /// </param>
            /// <param name='value'>
            /// Send a post request with header values "The quick brown fox jumps over the
            /// lazy dog" or null or ""
            /// </param>
            public static void ParamString(this IHeaderOperations operations, string scenario, string value = default(string))
            {
                operations.ParamStringAsync(scenario, value).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send a post request with header values "scenario": "valid", "value": "The
            /// quick brown fox jumps over the lazy dog" or "scenario": "null", "value":
            /// null or "scenario": "empty", "value": ""
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid" or "null" or
            /// "empty"
            /// </param>
            /// <param name='value'>
            /// Send a post request with header values "The quick brown fox jumps over the
            /// lazy dog" or null or ""
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ParamStringAsync(this IHeaderOperations operations, string scenario, string value = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ParamStringWithHttpMessagesAsync(scenario, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a response with header values "The quick brown fox jumps over the lazy
            /// dog" or null or ""
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid" or "null" or
            /// "empty"
            /// </param>
            public static HeaderResponseStringHeaders ResponseString(this IHeaderOperations operations, string scenario)
            {
                return operations.ResponseStringAsync(scenario).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a response with header values "The quick brown fox jumps over the lazy
            /// dog" or null or ""
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid" or "null" or
            /// "empty"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HeaderResponseStringHeaders> ResponseStringAsync(this IHeaderOperations operations, string scenario, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResponseStringWithHttpMessagesAsync(scenario, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Send a post request with header values "scenario": "valid", "value":
            /// "2010-01-01" or "scenario": "min", "value": "0001-01-01"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid" or "min"
            /// </param>
            /// <param name='value'>
            /// Send a post request with header values "2010-01-01" or "0001-01-01"
            /// </param>
            public static void ParamDate(this IHeaderOperations operations, string scenario, System.DateTime value)
            {
                operations.ParamDateAsync(scenario, value).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send a post request with header values "scenario": "valid", "value":
            /// "2010-01-01" or "scenario": "min", "value": "0001-01-01"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid" or "min"
            /// </param>
            /// <param name='value'>
            /// Send a post request with header values "2010-01-01" or "0001-01-01"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ParamDateAsync(this IHeaderOperations operations, string scenario, System.DateTime value, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ParamDateWithHttpMessagesAsync(scenario, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a response with header values "2010-01-01" or "0001-01-01"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid" or "min"
            /// </param>
            public static HeaderResponseDateHeaders ResponseDate(this IHeaderOperations operations, string scenario)
            {
                return operations.ResponseDateAsync(scenario).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a response with header values "2010-01-01" or "0001-01-01"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid" or "min"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HeaderResponseDateHeaders> ResponseDateAsync(this IHeaderOperations operations, string scenario, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResponseDateWithHttpMessagesAsync(scenario, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Send a post request with header values "scenario": "valid", "value":
            /// "2010-01-01T12:34:56Z" or "scenario": "min", "value":
            /// "0001-01-01T00:00:00Z"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid" or "min"
            /// </param>
            /// <param name='value'>
            /// Send a post request with header values "2010-01-01T12:34:56Z" or
            /// "0001-01-01T00:00:00Z"
            /// </param>
            public static void ParamDatetime(this IHeaderOperations operations, string scenario, System.DateTime value)
            {
                operations.ParamDatetimeAsync(scenario, value).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send a post request with header values "scenario": "valid", "value":
            /// "2010-01-01T12:34:56Z" or "scenario": "min", "value":
            /// "0001-01-01T00:00:00Z"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid" or "min"
            /// </param>
            /// <param name='value'>
            /// Send a post request with header values "2010-01-01T12:34:56Z" or
            /// "0001-01-01T00:00:00Z"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ParamDatetimeAsync(this IHeaderOperations operations, string scenario, System.DateTime value, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ParamDatetimeWithHttpMessagesAsync(scenario, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a response with header values "2010-01-01T12:34:56Z" or
            /// "0001-01-01T00:00:00Z"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid" or "min"
            /// </param>
            public static HeaderResponseDatetimeHeaders ResponseDatetime(this IHeaderOperations operations, string scenario)
            {
                return operations.ResponseDatetimeAsync(scenario).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a response with header values "2010-01-01T12:34:56Z" or
            /// "0001-01-01T00:00:00Z"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid" or "min"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HeaderResponseDatetimeHeaders> ResponseDatetimeAsync(this IHeaderOperations operations, string scenario, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResponseDatetimeWithHttpMessagesAsync(scenario, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Send a post request with header values "scenario": "valid", "value": "Wed,
            /// 01 Jan 2010 12:34:56 GMT" or "scenario": "min", "value": "Mon, 01 Jan 0001
            /// 00:00:00 GMT"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid" or "min"
            /// </param>
            /// <param name='value'>
            /// Send a post request with header values "Wed, 01 Jan 2010 12:34:56 GMT" or
            /// "Mon, 01 Jan 0001 00:00:00 GMT"
            /// </param>
            public static void ParamDatetimeRfc1123(this IHeaderOperations operations, string scenario, System.DateTime? value = default(System.DateTime?))
            {
                operations.ParamDatetimeRfc1123Async(scenario, value).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send a post request with header values "scenario": "valid", "value": "Wed,
            /// 01 Jan 2010 12:34:56 GMT" or "scenario": "min", "value": "Mon, 01 Jan 0001
            /// 00:00:00 GMT"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid" or "min"
            /// </param>
            /// <param name='value'>
            /// Send a post request with header values "Wed, 01 Jan 2010 12:34:56 GMT" or
            /// "Mon, 01 Jan 0001 00:00:00 GMT"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ParamDatetimeRfc1123Async(this IHeaderOperations operations, string scenario, System.DateTime? value = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ParamDatetimeRfc1123WithHttpMessagesAsync(scenario, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a response with header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon,
            /// 01 Jan 0001 00:00:00 GMT"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid" or "min"
            /// </param>
            public static HeaderResponseDatetimeRfc1123Headers ResponseDatetimeRfc1123(this IHeaderOperations operations, string scenario)
            {
                return operations.ResponseDatetimeRfc1123Async(scenario).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a response with header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon,
            /// 01 Jan 0001 00:00:00 GMT"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid" or "min"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HeaderResponseDatetimeRfc1123Headers> ResponseDatetimeRfc1123Async(this IHeaderOperations operations, string scenario, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResponseDatetimeRfc1123WithHttpMessagesAsync(scenario, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Send a post request with header values "scenario": "valid", "value":
            /// "P123DT22H14M12.011S"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid"
            /// </param>
            /// <param name='value'>
            /// Send a post request with header values "P123DT22H14M12.011S"
            /// </param>
            public static void ParamDuration(this IHeaderOperations operations, string scenario, System.TimeSpan value)
            {
                operations.ParamDurationAsync(scenario, value).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send a post request with header values "scenario": "valid", "value":
            /// "P123DT22H14M12.011S"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid"
            /// </param>
            /// <param name='value'>
            /// Send a post request with header values "P123DT22H14M12.011S"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ParamDurationAsync(this IHeaderOperations operations, string scenario, System.TimeSpan value, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ParamDurationWithHttpMessagesAsync(scenario, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a response with header values "P123DT22H14M12.011S"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid"
            /// </param>
            public static HeaderResponseDurationHeaders ResponseDuration(this IHeaderOperations operations, string scenario)
            {
                return operations.ResponseDurationAsync(scenario).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a response with header values "P123DT22H14M12.011S"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HeaderResponseDurationHeaders> ResponseDurationAsync(this IHeaderOperations operations, string scenario, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResponseDurationWithHttpMessagesAsync(scenario, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Send a post request with header values "scenario": "valid", "value":
            /// "啊齄丂狛狜隣郎隣兀﨩"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid"
            /// </param>
            /// <param name='value'>
            /// Send a post request with header values "啊齄丂狛狜隣郎隣兀﨩"
            /// </param>
            public static void ParamByte(this IHeaderOperations operations, string scenario, byte[] value)
            {
                operations.ParamByteAsync(scenario, value).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send a post request with header values "scenario": "valid", "value":
            /// "啊齄丂狛狜隣郎隣兀﨩"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid"
            /// </param>
            /// <param name='value'>
            /// Send a post request with header values "啊齄丂狛狜隣郎隣兀﨩"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ParamByteAsync(this IHeaderOperations operations, string scenario, byte[] value, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ParamByteWithHttpMessagesAsync(scenario, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a response with header values "啊齄丂狛狜隣郎隣兀﨩"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid"
            /// </param>
            public static HeaderResponseByteHeaders ResponseByte(this IHeaderOperations operations, string scenario)
            {
                return operations.ResponseByteAsync(scenario).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a response with header values "啊齄丂狛狜隣郎隣兀﨩"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HeaderResponseByteHeaders> ResponseByteAsync(this IHeaderOperations operations, string scenario, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResponseByteWithHttpMessagesAsync(scenario, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Send a post request with header values "scenario": "valid", "value": "GREY"
            /// or "scenario": "null", "value": null
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid" or "null" or
            /// "empty"
            /// </param>
            /// <param name='value'>
            /// Send a post request with header values 'GREY'. Possible values include:
            /// 'White', 'black', 'GREY'
            /// </param>
            public static void ParamEnum(this IHeaderOperations operations, string scenario, GreyscaleColors? value = default(GreyscaleColors?))
            {
                operations.ParamEnumAsync(scenario, value).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send a post request with header values "scenario": "valid", "value": "GREY"
            /// or "scenario": "null", "value": null
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid" or "null" or
            /// "empty"
            /// </param>
            /// <param name='value'>
            /// Send a post request with header values 'GREY'. Possible values include:
            /// 'White', 'black', 'GREY'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ParamEnumAsync(this IHeaderOperations operations, string scenario, GreyscaleColors? value = default(GreyscaleColors?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ParamEnumWithHttpMessagesAsync(scenario, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a response with header values "GREY" or null
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid" or "null" or
            /// "empty"
            /// </param>
            public static HeaderResponseEnumHeaders ResponseEnum(this IHeaderOperations operations, string scenario)
            {
                return operations.ResponseEnumAsync(scenario).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a response with header values "GREY" or null
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scenario'>
            /// Send a post request with header values "scenario": "valid" or "null" or
            /// "empty"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HeaderResponseEnumHeaders> ResponseEnumAsync(this IHeaderOperations operations, string scenario, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResponseEnumWithHttpMessagesAsync(scenario, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Send x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the
            /// header of the request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void CustomRequestId(this IHeaderOperations operations)
            {
                operations.CustomRequestIdAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the
            /// header of the request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CustomRequestIdAsync(this IHeaderOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CustomRequestIdWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
