// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zapappi.Client.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class SipTrunkEndpointModel
    {
        /// <summary>
        /// Initializes a new instance of the SipTrunkEndpointModel class.
        /// </summary>
        public SipTrunkEndpointModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SipTrunkEndpointModel class.
        /// </summary>
        public SipTrunkEndpointModel(int? id = default(int?), string ipAddress = default(string), int? port = default(int?), string description = default(string), int? priority = default(int?), bool? active = default(bool?))
        {
            Id = id;
            IpAddress = ipAddress;
            Port = port;
            Description = description;
            Priority = priority;
            Active = active;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public int? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IpAddress")]
        public string IpAddress { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Port")]
        public int? Port { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Priority")]
        public int? Priority { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Active")]
        public bool? Active { get; set; }

    }
}
