// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zapappi.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SMS.
    /// </summary>
    public static partial class SMSExtensions
    {
            /// <summary>
            /// Sends an SMS Message to the given destination
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='source'>
            /// </param>
            /// <param name='destination'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='webhook'>
            /// </param>
            public static SMSResponseModel SendSms(this ISMS operations, string subscriptionId, string source, string destination, string message, string webhook = default(string))
            {
                return operations.SendSmsAsync(subscriptionId, source, destination, message, webhook).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends an SMS Message to the given destination
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='source'>
            /// </param>
            /// <param name='destination'>
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='webhook'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SMSResponseModel> SendSmsAsync(this ISMS operations, string subscriptionId, string source, string destination, string message, string webhook = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendSmsWithHttpMessagesAsync(subscriptionId, source, destination, message, webhook, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all SMSs currently in your numbers queue
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='numberId'>
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static IList<SMSQueueItem> GetSmsQueue(this ISMS operations, string numberId, string subscriptionId, string id)
            {
                return operations.GetSmsQueueAsync(numberId, subscriptionId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all SMSs currently in your numbers queue
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='numberId'>
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task<IList<SMSQueueItem>> GetSmsQueueAsync(this ISMS operations, string numberId, string subscriptionId, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSmsQueueWithHttpMessagesAsync(numberId, subscriptionId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a specific SMS from the queue
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='entryId'>
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='messageId'>
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static object GetSmsFromQueue(this ISMS operations, string id, string entryId, string subscriptionId, string messageId)
            {
                return operations.GetSmsFromQueueAsync(id, entryId, subscriptionId, messageId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a specific SMS from the queue
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='entryId'>
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='messageId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task<object> GetSmsFromQueueAsync(this ISMS operations, string id, string entryId, string subscriptionId, string messageId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSmsFromQueueWithHttpMessagesAsync(id, entryId, subscriptionId, messageId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the SMS Log for the given Subscription Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='messageId'>
            /// </param>
            /// <param name='destination'>
            /// </param>
            public static IList<SmsCdrEntry> GetSmsLog(this ISMS operations, string subscriptionId, int? take = default(int?), int? skip = default(int?), string messageId = default(string), string destination = default(string))
            {
                return operations.GetSmsLogAsync(subscriptionId, take, skip, messageId, destination).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the SMS Log for the given Subscription Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='messageId'>
            /// </param>
            /// <param name='destination'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SmsCdrEntry>> GetSmsLogAsync(this ISMS operations, string subscriptionId, int? take = default(int?), int? skip = default(int?), string messageId = default(string), string destination = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSmsLogWithHttpMessagesAsync(subscriptionId, take, skip, messageId, destination, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
