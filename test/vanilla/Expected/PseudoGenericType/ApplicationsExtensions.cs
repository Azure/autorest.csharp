// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zapappi.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Applications.
    /// </summary>
    public static partial class ApplicationsExtensions
    {
            /// <summary>
            /// Returns a list of ZapApp Applications under your account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static IList<ApplicationModel> GetApplications(this IApplications operations, string subscriptionId)
            {
                return operations.GetApplicationsAsync(subscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of ZapApp Applications under your account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ApplicationModel>> GetApplicationsAsync(this IApplications operations, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApplicationsWithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new Application to the Zapappi subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='description'>
            /// </param>
            /// <param name='enabled'>
            /// </param>
            /// <param name='scriptBody'>
            /// </param>
            /// <param name='scriptUrl'>
            /// </param>
            public static string AddApplication(this IApplications operations, string subscriptionId, string name, string description, bool enabled, string scriptBody, string scriptUrl)
            {
                return operations.AddApplicationAsync(subscriptionId, name, description, enabled, scriptBody, scriptUrl).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new Application to the Zapappi subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='description'>
            /// </param>
            /// <param name='enabled'>
            /// </param>
            /// <param name='scriptBody'>
            /// </param>
            /// <param name='scriptUrl'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> AddApplicationAsync(this IApplications operations, string subscriptionId, string name, string description, bool enabled, string scriptBody, string scriptUrl, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddApplicationWithHttpMessagesAsync(subscriptionId, name, description, enabled, scriptBody, scriptUrl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a specific Application based on the Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ApplicationModel GetApplication(this IApplications operations, string subscriptionId, string id)
            {
                return operations.GetApplicationAsync(subscriptionId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a specific Application based on the Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationModel> GetApplicationAsync(this IApplications operations, string subscriptionId, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApplicationWithHttpMessagesAsync(subscriptionId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an existing Zapappi Application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The subscription id the application is attached too
            /// </param>
            /// <param name='appId'>
            /// The application id
            /// </param>
            /// <param name='description'>
            /// The application description
            /// </param>
            /// <param name='enabled'>
            /// Is the application enabled (call it be used to termiante calls)
            /// </param>
            /// <param name='scriptBody'>
            /// The script used to process the call
            /// </param>
            /// <param name='scriptUrl'>
            /// The Url of your script (if set, ScriptBody won't be used)
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object UpdateApplication(this IApplications operations, string subscriptionId, string appId, string description, bool enabled, string scriptBody, string scriptUrl, string id)
            {
                return operations.UpdateApplicationAsync(subscriptionId, appId, description, enabled, scriptBody, scriptUrl, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an existing Zapappi Application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The subscription id the application is attached too
            /// </param>
            /// <param name='appId'>
            /// The application id
            /// </param>
            /// <param name='description'>
            /// The application description
            /// </param>
            /// <param name='enabled'>
            /// Is the application enabled (call it be used to termiante calls)
            /// </param>
            /// <param name='scriptBody'>
            /// The script used to process the call
            /// </param>
            /// <param name='scriptUrl'>
            /// The Url of your script (if set, ScriptBody won't be used)
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateApplicationAsync(this IApplications operations, string subscriptionId, string appId, string description, bool enabled, string scriptBody, string scriptUrl, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateApplicationWithHttpMessagesAsync(subscriptionId, appId, description, enabled, scriptBody, scriptUrl, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of media files attached to this Application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Application Id
            /// </param>
            public static IList<string> GetApplicationFiles(this IApplications operations, string subscriptionId, string id)
            {
                return operations.GetApplicationFilesAsync(subscriptionId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of media files attached to this Application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Application Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetApplicationFilesAsync(this IApplications operations, string subscriptionId, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApplicationFilesWithHttpMessagesAsync(subscriptionId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a media file attached to this Application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Application Id
            /// </param>
            /// <param name='filename'>
            /// </param>
            public static object DeleteApplicationFile(this IApplications operations, string subscriptionId, string id, string filename)
            {
                return operations.DeleteApplicationFileAsync(subscriptionId, id, filename).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a media file attached to this Application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Application Id
            /// </param>
            /// <param name='filename'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteApplicationFileAsync(this IApplications operations, string subscriptionId, string id, string filename, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteApplicationFileWithHttpMessagesAsync(subscriptionId, id, filename, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new outbound call request for this Application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Application Id
            /// </param>
            /// <param name='model'>
            /// Callout details
            /// </param>
            public static CalloutReturnModel ApplicationCallout(this IApplications operations, string subscriptionId, string id, CalloutModel model)
            {
                return operations.ApplicationCalloutAsync(subscriptionId, id, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new outbound call request for this Application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Application Id
            /// </param>
            /// <param name='model'>
            /// Callout details
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CalloutReturnModel> ApplicationCalloutAsync(this IApplications operations, string subscriptionId, string id, CalloutModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApplicationCalloutWithHttpMessagesAsync(subscriptionId, id, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of Application Resources associated with the given
            /// Application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<ResourceModel> GetApplicationResources(this IApplications operations, string subscriptionId, string id)
            {
                return operations.GetApplicationResourcesAsync(subscriptionId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of Application Resources associated with the given
            /// Application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ResourceModel>> GetApplicationResourcesAsync(this IApplications operations, string subscriptionId, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApplicationResourcesWithHttpMessagesAsync(subscriptionId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds an Application Resource to the given Application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='model'>
            /// </param>
            public static void AddApplicationResources(this IApplications operations, string subscriptionId, string id, ResourceModel model)
            {
                operations.AddApplicationResourcesAsync(subscriptionId, id, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds an Application Resource to the given Application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddApplicationResourcesAsync(this IApplications operations, string subscriptionId, string id, ResourceModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddApplicationResourcesWithHttpMessagesAsync(subscriptionId, id, model, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes an Application Resource from the given Application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='resourceId'>
            /// </param>
            public static object DeleteApplicationResources(this IApplications operations, string subscriptionId, string id, string resourceId)
            {
                return operations.DeleteApplicationResourcesAsync(subscriptionId, id, resourceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an Application Resource from the given Application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='resourceId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteApplicationResourcesAsync(this IApplications operations, string subscriptionId, string id, string resourceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteApplicationResourcesWithHttpMessagesAsync(subscriptionId, id, resourceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of SIP Provider Accounts connected to your ZapApp platform
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static IList<SIPProviderModel> GetSIPProviders(this IApplications operations, string subscriptionId)
            {
                return operations.GetSIPProvidersAsync(subscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of SIP Provider Accounts connected to your ZapApp platform
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SIPProviderModel>> GetSIPProvidersAsync(this IApplications operations, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSIPProvidersWithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns call records for the given application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            public static IList<ApplicationCDRModel> GetApplicationCDR(this IApplications operations, string subscriptionId, string id, int? skip = default(int?), System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?))
            {
                return operations.GetApplicationCDRAsync(subscriptionId, id, skip, startDate, endDate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns call records for the given application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='startDate'>
            /// </param>
            /// <param name='endDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ApplicationCDRModel>> GetApplicationCDRAsync(this IApplications operations, string subscriptionId, string id, int? skip = default(int?), System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApplicationCDRWithHttpMessagesAsync(subscriptionId, id, skip, startDate, endDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='manifestUrl'>
            /// </param>
            /// <param name='applicationName'>
            /// </param>
            /// <param name='applicationDescription'>
            /// </param>
            /// <param name='configurationValues'>
            /// </param>
            public static ApplicationModel DeployApplication(this IApplications operations, string subscriptionId, string manifestUrl, string applicationName, string applicationDescription, IDictionary<string, string> configurationValues)
            {
                return operations.DeployApplicationAsync(subscriptionId, manifestUrl, applicationName, applicationDescription, configurationValues).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='manifestUrl'>
            /// </param>
            /// <param name='applicationName'>
            /// </param>
            /// <param name='applicationDescription'>
            /// </param>
            /// <param name='configurationValues'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationModel> DeployApplicationAsync(this IApplications operations, string subscriptionId, string manifestUrl, string applicationName, string applicationDescription, IDictionary<string, string> configurationValues, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeployApplicationWithHttpMessagesAsync(subscriptionId, manifestUrl, applicationName, applicationDescription, configurationValues, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all the Key Value Pairs for a given Application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription Id
            /// </param>
            /// <param name='id'>
            /// Application Id
            /// </param>
            public static IList<KeyValuePairModel> GetApplicationKeyValuePairs(this IApplications operations, string subscriptionId, string id)
            {
                return operations.GetApplicationKeyValuePairsAsync(subscriptionId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all the Key Value Pairs for a given Application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription Id
            /// </param>
            /// <param name='id'>
            /// Application Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<KeyValuePairModel>> GetApplicationKeyValuePairsAsync(this IApplications operations, string subscriptionId, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApplicationKeyValuePairsWithHttpMessagesAsync(subscriptionId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
