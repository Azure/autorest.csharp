// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zapappi.Client
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Contacts.
    /// </summary>
    public static partial class ContactsExtensions
    {
            /// <summary>
            /// Get a list of contacts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='take'>
            /// Number of items to return
            /// </param>
            /// <param name='skip'>
            /// Number of item to skip over
            /// </param>
            /// <param name='country'>
            /// The country of the contact
            /// </param>
            public static PagedResponse<ContactsModel> GetContacts(this IContacts operations, string subscriptionId, int take, int skip, System.Guid? country = default(System.Guid?))
            {
                return operations.GetContactsAsync(subscriptionId, take, skip, country).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of contacts
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='take'>
            /// Number of items to return
            /// </param>
            /// <param name='skip'>
            /// Number of item to skip over
            /// </param>
            /// <param name='country'>
            /// The country of the contact
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResponse<ContactsModel>> GetContactsAsync(this IContacts operations, string subscriptionId, int take, int skip, System.Guid? country = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetContactsWithHttpMessagesAsync(subscriptionId, take, skip, country, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a new contact
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='building'>
            /// </param>
            /// <param name='city'>
            /// </param>
            /// <param name='street'>
            /// </param>
            /// <param name='postcode'>
            /// </param>
            /// <param name='company'>
            /// </param>
            /// <param name='title'>
            /// </param>
            /// <param name='firstName'>
            /// </param>
            /// <param name='lastName'>
            /// </param>
            public static ContactsModel AddContact(this IContacts operations, string subscriptionId, string building, string city, string street, string postcode, string company = default(string), string title = default(string), string firstName = default(string), string lastName = default(string))
            {
                return operations.AddContactAsync(subscriptionId, building, city, street, postcode, company, title, firstName, lastName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a new contact
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='building'>
            /// </param>
            /// <param name='city'>
            /// </param>
            /// <param name='street'>
            /// </param>
            /// <param name='postcode'>
            /// </param>
            /// <param name='company'>
            /// </param>
            /// <param name='title'>
            /// </param>
            /// <param name='firstName'>
            /// </param>
            /// <param name='lastName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContactsModel> AddContactAsync(this IContacts operations, string subscriptionId, string building, string city, string street, string postcode, string company = default(string), string title = default(string), string firstName = default(string), string lastName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddContactWithHttpMessagesAsync(subscriptionId, building, city, street, postcode, company, title, firstName, lastName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a contact
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// Get specific contact
            /// </param>
            public static ContactsModel GetContact(this IContacts operations, string subscriptionId, string id)
            {
                return operations.GetContactAsync(subscriptionId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a contact
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// Get specific contact
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContactsModel> GetContactAsync(this IContacts operations, string subscriptionId, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetContactWithHttpMessagesAsync(subscriptionId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
