// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zapappi.Client
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Trunks operations.
    /// </summary>
    public partial interface ITrunks
    {
        /// <summary>
        /// Get your SIP Trunks as a PagedResponse
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='take'>
        /// Number of items to return
        /// </param>
        /// <param name='skip'>
        /// Number of item to skip over
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<PagedResponse<SipTrunkModel>>> GetTrunksWithHttpMessagesAsync(string subscriptionId, int take, int skip, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a new SIP Trunk
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='description'>
        /// </param>
        /// <param name='endpointId'>
        /// </param>
        /// <param name='autoCreateEndpoint'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<NewSipTrunkResponseModel>> CreateTrunkWithHttpMessagesAsync(string subscriptionId, string description, string endpointId, bool autoCreateEndpoint, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a specific SIP Trunk by Id
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<SipTrunkModel>> GetTrunkWithHttpMessagesAsync(string subscriptionId, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update SIP Trunk
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// SIP Trunk ID to get endpoints for
        /// </param>
        /// <param name='model'>
        /// Model used to update Trunk
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<SipTrunkModel>> UpdateTrunkWithHttpMessagesAsync(string subscriptionId, int id, UpdateSIPTrunkModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Return PagedResponse of SIP Trunk Endpoints (IP Addresses)
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// SIP Trunk ID to get endpoints for
        /// </param>
        /// <param name='take'>
        /// Number of items to return
        /// </param>
        /// <param name='skip'>
        /// Number of item to skip over
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<PagedResponse<SipTrunkEndpointModel>>> GetTrunkEndpointsWithHttpMessagesAsync(string subscriptionId, int id, int take, int skip, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a new SIP Trunk Endpoint IP Address
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// SIP Trunk Id
        /// </param>
        /// <param name='model'>
        /// Endpoint Model
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<SipTrunkEndpointModel>> CreateTrunkEndpointWithHttpMessagesAsync(string subscriptionId, int id, NewSipTrunkEndpointModel model, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete the specified SIP Trunk Endpoint
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// SIP Trunk Id
        /// </param>
        /// <param name='endpointId'>
        /// Endpoint Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> DeleteTrunkEndpointWithHttpMessagesAsync(string subscriptionId, int id, int endpointId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get specific SIP Trunk endpoint
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// SIP Trunk Id
        /// </param>
        /// <param name='endpointId'>
        /// Endpoint Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<SipTrunkEndpointModel>> GetTrunkEndpointWithHttpMessagesAsync(string subscriptionId, int id, int endpointId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of all restrictions on the trunk (Blacklist and
        /// Whitelist items)
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// Trunk Id
        /// </param>
        /// <param name='take'>
        /// </param>
        /// <param name='skip'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<PagedResponse<SipTrunkRestrictionItemModel>>> GetRestrictionsWithHttpMessagesAsync(string subscriptionId, int id, int take, int skip, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Adds a new restriction to the trunk (Blacklist and Whitelist items)
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='id'>
        /// Trunk Id
        /// </param>
        /// <param name='prefix'>
        /// Called number prefix
        /// </param>
        /// <param name='description'>
        /// </param>
        /// <param name='blacklist'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> AddRestrictionWithHttpMessagesAsync(string subscriptionId, int id, string prefix, string description, bool blacklist, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
