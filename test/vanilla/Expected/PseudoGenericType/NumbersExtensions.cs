// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zapappi.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Numbers.
    /// </summary>
    public static partial class NumbersExtensions
    {
            /// <summary>
            /// Returns a list of the numbers under the given subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='countryId'>
            /// </param>
            /// <param name='search'>
            /// </param>
            public static IList<TelephoneNumberModel> ExistingNumbers(this INumbers operations, string subscriptionId, int? skip = default(int?), int? take = default(int?), System.Guid? countryId = default(System.Guid?), string search = default(string))
            {
                return operations.ExistingNumbersAsync(subscriptionId, skip, take, countryId, search).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of the numbers under the given subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='skip'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='countryId'>
            /// </param>
            /// <param name='search'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TelephoneNumberModel>> ExistingNumbersAsync(this INumbers operations, string subscriptionId, int? skip = default(int?), int? take = default(int?), System.Guid? countryId = default(System.Guid?), string search = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExistingNumbersWithHttpMessagesAsync(subscriptionId, skip, take, countryId, search, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='countryId'>
            /// </param>
            /// <param name='numberType'>
            /// Possible values include: 'Any', 'Local', 'National', 'Mobile',
            /// 'PremiumRate', 'Freephone'
            /// </param>
            /// <param name='areaId'>
            /// </param>
            /// <param name='numberQty'>
            /// </param>
            /// <param name='description'>
            /// </param>
            public static IList<TelephoneNumberModel> PurchaseNumbers(this INumbers operations, string subscriptionId, string countryId, string numberType, string areaId, int numberQty, string description = default(string))
            {
                return operations.PurchaseNumbersAsync(subscriptionId, countryId, numberType, areaId, numberQty, description).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='countryId'>
            /// </param>
            /// <param name='numberType'>
            /// Possible values include: 'Any', 'Local', 'National', 'Mobile',
            /// 'PremiumRate', 'Freephone'
            /// </param>
            /// <param name='areaId'>
            /// </param>
            /// <param name='numberQty'>
            /// </param>
            /// <param name='description'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TelephoneNumberModel>> PurchaseNumbersAsync(this INumbers operations, string subscriptionId, string countryId, string numberType, string areaId, int numberQty, string description = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PurchaseNumbersWithHttpMessagesAsync(subscriptionId, countryId, numberType, areaId, numberQty, description, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a specific number for the given subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='numberId'>
            /// </param>
            public static TelephoneNumberModel ExistingNumber(this INumbers operations, string id, string subscriptionId, string numberId)
            {
                return operations.ExistingNumberAsync(id, subscriptionId, numberId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a specific number for the given subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='numberId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TelephoneNumberModel> ExistingNumberAsync(this INumbers operations, string id, string subscriptionId, string numberId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExistingNumberWithHttpMessagesAsync(id, subscriptionId, numberId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of countries for which numbers are available
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static IList<Country> GetCountries(this INumbers operations, string subscriptionId)
            {
                return operations.GetCountriesAsync(subscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of countries for which numbers are available
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Country>> GetCountriesAsync(this INumbers operations, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCountriesWithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of states available for a given country
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='countryId'>
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static IList<State> GetStatesByCountry(this INumbers operations, string countryId, string subscriptionId)
            {
                return operations.GetStatesByCountryAsync(countryId, subscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of states available for a given country
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='countryId'>
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<State>> GetStatesByCountryAsync(this INumbers operations, string countryId, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStatesByCountryWithHttpMessagesAsync(countryId, subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of Areas available for a given State and Country
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='countryId'>
            /// </param>
            /// <param name='stateId'>
            /// </param>
            /// <param name='numberType'>
            /// Possible values include: 'Any', 'Local', 'National', 'Mobile',
            /// 'PremiumRate', 'Freephone'
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static IList<Area> GetAreasByStateAndCountry(this INumbers operations, string countryId, string stateId, string numberType, string subscriptionId)
            {
                return operations.GetAreasByStateAndCountryAsync(countryId, stateId, numberType, subscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of Areas available for a given State and Country
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='countryId'>
            /// </param>
            /// <param name='stateId'>
            /// </param>
            /// <param name='numberType'>
            /// Possible values include: 'Any', 'Local', 'National', 'Mobile',
            /// 'PremiumRate', 'Freephone'
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Area>> GetAreasByStateAndCountryAsync(this INumbers operations, string countryId, string stateId, string numberType, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAreasByStateAndCountryWithHttpMessagesAsync(countryId, stateId, numberType, subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of Areas available for a given Country
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='countryId'>
            /// </param>
            /// <param name='numberType'>
            /// Possible values include: 'Any', 'Local', 'National', 'Mobile',
            /// 'PremiumRate', 'Freephone'
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static IList<Area> GetAreasByCountry(this INumbers operations, string countryId, string numberType, string subscriptionId)
            {
                return operations.GetAreasByCountryAsync(countryId, numberType, subscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of Areas available for a given Country
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='countryId'>
            /// </param>
            /// <param name='numberType'>
            /// Possible values include: 'Any', 'Local', 'National', 'Mobile',
            /// 'PremiumRate', 'Freephone'
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Area>> GetAreasByCountryAsync(this INumbers operations, string countryId, string numberType, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAreasByCountryWithHttpMessagesAsync(countryId, numberType, subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set the SMS Endoint for the given number
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='numberId'>
            /// The UniqueID of the number
            /// </param>
            /// <param name='endpointType'>
            /// The endpoint type that daa should be sent to. Possible values include:
            /// 'None', 'EMail', 'HTTPPost', 'HTTPGet'
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='number'>
            /// </param>
            /// <param name='data'>
            /// Data for the endpoint type (E.g. Url or EMail Address)
            /// </param>
            public static object SetSMSEndpoint(this INumbers operations, string numberId, string endpointType, string subscriptionId, string number, string data = default(string))
            {
                return operations.SetSMSEndpointAsync(numberId, endpointType, subscriptionId, number, data).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set the SMS Endoint for the given number
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='numberId'>
            /// The UniqueID of the number
            /// </param>
            /// <param name='endpointType'>
            /// The endpoint type that daa should be sent to. Possible values include:
            /// 'None', 'EMail', 'HTTPPost', 'HTTPGet'
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='number'>
            /// </param>
            /// <param name='data'>
            /// Data for the endpoint type (E.g. Url or EMail Address)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetSMSEndpointAsync(this INumbers operations, string numberId, string endpointType, string subscriptionId, string number, string data = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetSMSEndpointWithHttpMessagesAsync(numberId, endpointType, subscriptionId, number, data, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
