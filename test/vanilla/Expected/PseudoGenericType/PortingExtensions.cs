// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Zapappi.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Porting.
    /// </summary>
    public static partial class PortingExtensions
    {
            /// <summary>
            /// Get your port requests as a paged response
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='take'>
            /// Number of items to return
            /// </param>
            /// <param name='skip'>
            /// Number of item to skip over
            /// </param>
            public static PagedResponse<PortModel> GetPortRequests(this IPorting operations, string subscriptionId, int take, int skip)
            {
                return operations.GetPortRequestsAsync(subscriptionId, take, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get your port requests as a paged response
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='take'>
            /// Number of items to return
            /// </param>
            /// <param name='skip'>
            /// Number of item to skip over
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResponse<PortModel>> GetPortRequestsAsync(this IPorting operations, string subscriptionId, int take, int skip, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPortRequestsWithHttpMessagesAsync(subscriptionId, take, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new port request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='reference'>
            /// User Reference for the Port Request
            /// </param>
            /// <param name='type'>
            /// Number Type for the Port Request. Possible values include: 'Geo', 'NonGeo',
            /// 'Mobile', 'Freephone'
            /// </param>
            /// <param name='countryId'>
            /// Country of the Port Request
            /// </param>
            /// <param name='billingNumber'>
            /// The billing number for this Port Request
            /// </param>
            /// <param name='requestedPortDate'>
            /// Specify a preferred porting date
            /// </param>
            public static PortModel CreatePortRequest(this IPorting operations, string subscriptionId, string reference, string type, string countryId, string billingNumber = default(string), System.DateTime? requestedPortDate = default(System.DateTime?))
            {
                return operations.CreatePortRequestAsync(subscriptionId, reference, type, countryId, billingNumber, requestedPortDate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new port request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='reference'>
            /// User Reference for the Port Request
            /// </param>
            /// <param name='type'>
            /// Number Type for the Port Request. Possible values include: 'Geo', 'NonGeo',
            /// 'Mobile', 'Freephone'
            /// </param>
            /// <param name='countryId'>
            /// Country of the Port Request
            /// </param>
            /// <param name='billingNumber'>
            /// The billing number for this Port Request
            /// </param>
            /// <param name='requestedPortDate'>
            /// Specify a preferred porting date
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortModel> CreatePortRequestAsync(this IPorting operations, string subscriptionId, string reference, string type, string countryId, string billingNumber = default(string), System.DateTime? requestedPortDate = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreatePortRequestWithHttpMessagesAsync(subscriptionId, reference, type, countryId, billingNumber, requestedPortDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific port request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Id for the Port Request
            /// </param>
            public static PortModel GetPortRequest(this IPorting operations, string subscriptionId, int id)
            {
                return operations.GetPortRequestAsync(subscriptionId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific port request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Id for the Port Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortModel> GetPortRequestAsync(this IPorting operations, string subscriptionId, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPortRequestWithHttpMessagesAsync(subscriptionId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the specified port request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Id of Port Request
            /// </param>
            /// <param name='billingNumber'>
            /// The billing number of the Port Request
            /// </param>
            /// <param name='reference'>
            /// The reference of the Port Request
            /// </param>
            /// <param name='requestedPortDate'>
            /// Specify a preferred porting date
            /// </param>
            public static bool? UpdatePortRequest(this IPorting operations, string subscriptionId, int id, string billingNumber, string reference = default(string), System.DateTime? requestedPortDate = default(System.DateTime?))
            {
                return operations.UpdatePortRequestAsync(subscriptionId, id, billingNumber, reference, requestedPortDate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the specified port request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Id of Port Request
            /// </param>
            /// <param name='billingNumber'>
            /// The billing number of the Port Request
            /// </param>
            /// <param name='reference'>
            /// The reference of the Port Request
            /// </param>
            /// <param name='requestedPortDate'>
            /// Specify a preferred porting date
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> UpdatePortRequestAsync(this IPorting operations, string subscriptionId, int id, string billingNumber, string reference = default(string), System.DateTime? requestedPortDate = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePortRequestWithHttpMessagesAsync(subscriptionId, id, billingNumber, reference, requestedPortDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the specified port request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Id of Port Request
            /// </param>
            public static bool? DeletePortRequest(this IPorting operations, string subscriptionId, int id)
            {
                return operations.DeletePortRequestAsync(subscriptionId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the specified port request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Id of Port Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> DeletePortRequestAsync(this IPorting operations, string subscriptionId, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePortRequestWithHttpMessagesAsync(subscriptionId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get numbers associated with a specific port request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Id for the Port Request
            /// </param>
            /// <param name='take'>
            /// Number of items to return
            /// </param>
            /// <param name='skip'>
            /// Number of item to skip over
            /// </param>
            /// <param name='search'>
            /// Find a specific number details
            /// </param>
            public static PagedResponse<RequestNumberModel> GetPortNumbers(this IPorting operations, string subscriptionId, int id, int take, int skip, string search = default(string))
            {
                return operations.GetPortNumbersAsync(subscriptionId, id, take, skip, search).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get numbers associated with a specific port request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Id for the Port Request
            /// </param>
            /// <param name='take'>
            /// Number of items to return
            /// </param>
            /// <param name='skip'>
            /// Number of item to skip over
            /// </param>
            /// <param name='search'>
            /// Find a specific number details
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResponse<RequestNumberModel>> GetPortNumbersAsync(this IPorting operations, string subscriptionId, int id, int take, int skip, string search = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPortNumbersWithHttpMessagesAsync(subscriptionId, id, take, skip, search, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add numbers to a port request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Id of Port Request
            /// </param>
            /// <param name='numbers'>
            /// List of numbers to add to the Port Request
            /// </param>
            public static PagedResponse<RequestNumberModel> AddPortNumbers(this IPorting operations, string subscriptionId, int id, IList<string> numbers)
            {
                return operations.AddPortNumbersAsync(subscriptionId, id, numbers).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add numbers to a port request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Id of Port Request
            /// </param>
            /// <param name='numbers'>
            /// List of numbers to add to the Port Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResponse<RequestNumberModel>> AddPortNumbersAsync(this IPorting operations, string subscriptionId, int id, IList<string> numbers, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddPortNumbersWithHttpMessagesAsync(subscriptionId, id, numbers, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='numbers'>
            /// </param>
            public static PagedResponse<RequestNumberModel> RemovePortNumbers(this IPorting operations, string subscriptionId, int id, IList<int?> numbers)
            {
                return operations.RemovePortNumbersAsync(subscriptionId, id, numbers).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='numbers'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResponse<RequestNumberModel>> RemovePortNumbersAsync(this IPorting operations, string subscriptionId, int id, IList<int?> numbers, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemovePortNumbersWithHttpMessagesAsync(subscriptionId, id, numbers, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Submit a specified port request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Id of Port Request
            /// </param>
            public static bool? SubmitPortRequest(this IPorting operations, string subscriptionId, int id)
            {
                return operations.SubmitPortRequestAsync(subscriptionId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Submit a specified port request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Id of Port Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> SubmitPortRequestAsync(this IPorting operations, string subscriptionId, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SubmitPortRequestWithHttpMessagesAsync(subscriptionId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a Billing file to a specified port request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Id of Port Request
            /// </param>
            public static bool? AddPortFile(this IPorting operations, string subscriptionId, int id)
            {
                return operations.AddPortFileAsync(subscriptionId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a Billing file to a specified port request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Id of Port Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> AddPortFileAsync(this IPorting operations, string subscriptionId, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddPortFileWithHttpMessagesAsync(subscriptionId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add an LOA to a specified port request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Id of Port Request
            /// </param>
            /// <param name='customerContactId'>
            /// The Id of the customer contact
            /// </param>
            /// <param name='requesterContactId'>
            /// The Id of the requester contact
            /// </param>
            /// <param name='siteContactId'>
            /// The Id of the site contact
            /// </param>
            /// <param name='losingProviderId'>
            /// The Id of the losing provider
            /// </param>
            /// <param name='otherProvider'>
            /// If provider is missing
            /// </param>
            public static LoaModel AddPortLoa(this IPorting operations, string subscriptionId, int id, string customerContactId, string requesterContactId, string siteContactId, string losingProviderId, string otherProvider = default(string))
            {
                return operations.AddPortLoaAsync(subscriptionId, id, customerContactId, requesterContactId, siteContactId, losingProviderId, otherProvider).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add an LOA to a specified port request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Id of Port Request
            /// </param>
            /// <param name='customerContactId'>
            /// The Id of the customer contact
            /// </param>
            /// <param name='requesterContactId'>
            /// The Id of the requester contact
            /// </param>
            /// <param name='siteContactId'>
            /// The Id of the site contact
            /// </param>
            /// <param name='losingProviderId'>
            /// The Id of the losing provider
            /// </param>
            /// <param name='otherProvider'>
            /// If provider is missing
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LoaModel> AddPortLoaAsync(this IPorting operations, string subscriptionId, int id, string customerContactId, string requesterContactId, string siteContactId, string losingProviderId, string otherProvider = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddPortLoaWithHttpMessagesAsync(subscriptionId, id, customerContactId, requesterContactId, siteContactId, losingProviderId, otherProvider, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a file to an LOA for a specified port request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Id of Port Request
            /// </param>
            /// <param name='loaId'>
            /// The Id of the Contact to add the file to
            /// </param>
            public static bool? AddPortLoaFile(this IPorting operations, string subscriptionId, int id, int loaId)
            {
                return operations.AddPortLoaFileAsync(subscriptionId, id, loaId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a file to an LOA for a specified port request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Id of Port Request
            /// </param>
            /// <param name='loaId'>
            /// The Id of the Contact to add the file to
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> AddPortLoaFileAsync(this IPorting operations, string subscriptionId, int id, int loaId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddPortLoaFileWithHttpMessagesAsync(subscriptionId, id, loaId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Generate an LOA file for a specified port request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Id of Port Request
            /// </param>
            public static LoaModel GeneratePortLoaFile(this IPorting operations, string subscriptionId, int id)
            {
                return operations.GeneratePortLoaFileAsync(subscriptionId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generate an LOA file for a specified port request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Id of Port Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LoaModel> GeneratePortLoaFileAsync(this IPorting operations, string subscriptionId, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GeneratePortLoaFileWithHttpMessagesAsync(subscriptionId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of messages for a specified port request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Id of Port Request
            /// </param>
            /// <param name='take'>
            /// Number of items to return
            /// </param>
            /// <param name='skip'>
            /// Number of item to skip over
            /// </param>
            public static bool? GetPortMessages(this IPorting operations, string subscriptionId, int id, int take, int skip)
            {
                return operations.GetPortMessagesAsync(subscriptionId, id, take, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of messages for a specified port request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Id of Port Request
            /// </param>
            /// <param name='take'>
            /// Number of items to return
            /// </param>
            /// <param name='skip'>
            /// Number of item to skip over
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> GetPortMessagesAsync(this IPorting operations, string subscriptionId, int id, int take, int skip, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPortMessagesWithHttpMessagesAsync(subscriptionId, id, take, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a message to a specified port request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Id of Port Request
            /// </param>
            /// <param name='message'>
            /// The message to add to the Port Request
            /// </param>
            public static bool? AddPortMessage(this IPorting operations, string subscriptionId, int id, string message)
            {
                return operations.AddPortMessageAsync(subscriptionId, id, message).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a message to a specified port request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='id'>
            /// The Id of Port Request
            /// </param>
            /// <param name='message'>
            /// The message to add to the Port Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> AddPortMessageAsync(this IPorting operations, string subscriptionId, int id, string message, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddPortMessageWithHttpMessagesAsync(subscriptionId, id, message, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of porting countries
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static IList<CountryModel> GetPortingCountries(this IPorting operations, string subscriptionId)
            {
                return operations.GetPortingCountriesAsync(subscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of porting countries
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CountryModel>> GetPortingCountriesAsync(this IPorting operations, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPortingCountriesWithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of porting providers for a country
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='countryId'>
            /// </param>
            /// <param name='type'>
            /// The number type. Possible values include: 'National', 'Mobile', 'Local',
            /// 'Freephone'
            /// </param>
            public static PagedResponse<ProviderModel> GetPortingProviders(this IPorting operations, string subscriptionId, string countryId, string type)
            {
                return operations.GetPortingProvidersAsync(subscriptionId, countryId, type).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of porting providers for a country
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='countryId'>
            /// </param>
            /// <param name='type'>
            /// The number type. Possible values include: 'National', 'Mobile', 'Local',
            /// 'Freephone'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResponse<ProviderModel>> GetPortingProvidersAsync(this IPorting operations, string subscriptionId, string countryId, string type, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPortingProvidersWithHttpMessagesAsync(subscriptionId, countryId, type, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a webhook
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='url'>
            /// The url of the webhook
            /// </param>
            public static RequestWebhookModel AddPortingWebhook(this IPorting operations, string subscriptionId, string url)
            {
                return operations.AddPortingWebhookAsync(subscriptionId, url).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a webhook
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='url'>
            /// The url of the webhook
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RequestWebhookModel> AddPortingWebhookAsync(this IPorting operations, string subscriptionId, string url, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddPortingWebhookWithHttpMessagesAsync(subscriptionId, url, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
