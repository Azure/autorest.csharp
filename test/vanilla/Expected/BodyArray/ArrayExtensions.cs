// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Fixtures.BodyArray
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Array.
    /// </summary>
    public static partial class ArrayExtensions
    {
            /// <summary>
            /// Get null array value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<int?> GetNull(this IArray operations)
            {
                return operations.GetNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get null array value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<int?>> GetNullAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get invalid array [1, 2, 3
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<int?> GetInvalid(this IArray operations)
            {
                return operations.GetInvalidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get invalid array [1, 2, 3
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<int?>> GetInvalidAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInvalidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get empty array value []
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<int?> GetEmpty(this IArray operations)
            {
                return operations.GetEmptyAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get empty array value []
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<int?>> GetEmptyAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEmptyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set array value empty []
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutEmpty(this IArray operations, IList<string> arrayBody)
            {
                operations.PutEmptyAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set array value empty []
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutEmptyAsync(this IArray operations, IList<string> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutEmptyWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get boolean array value [true, false, false, true]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<bool?> GetBooleanTfft(this IArray operations)
            {
                return operations.GetBooleanTfftAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get boolean array value [true, false, false, true]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<bool?>> GetBooleanTfftAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBooleanTfftWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set array value empty [true, false, false, true]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutBooleanTfft(this IArray operations, IList<bool?> arrayBody)
            {
                operations.PutBooleanTfftAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set array value empty [true, false, false, true]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutBooleanTfftAsync(this IArray operations, IList<bool?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutBooleanTfftWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get boolean array value [true, null, false]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<bool?> GetBooleanInvalidNull(this IArray operations)
            {
                return operations.GetBooleanInvalidNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get boolean array value [true, null, false]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<bool?>> GetBooleanInvalidNullAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBooleanInvalidNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get boolean array value [true, 'boolean', false]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<bool?> GetBooleanInvalidString(this IArray operations)
            {
                return operations.GetBooleanInvalidStringAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get boolean array value [true, 'boolean', false]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<bool?>> GetBooleanInvalidStringAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBooleanInvalidStringWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get integer array value [1, -1, 3, 300]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<int?> GetIntegerValid(this IArray operations)
            {
                return operations.GetIntegerValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get integer array value [1, -1, 3, 300]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<int?>> GetIntegerValidAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIntegerValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set array value empty [1, -1, 3, 300]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutIntegerValid(this IArray operations, IList<int?> arrayBody)
            {
                operations.PutIntegerValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set array value empty [1, -1, 3, 300]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutIntegerValidAsync(this IArray operations, IList<int?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutIntegerValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get integer array value [1, null, 0]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<int?> GetIntInvalidNull(this IArray operations)
            {
                return operations.GetIntInvalidNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get integer array value [1, null, 0]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<int?>> GetIntInvalidNullAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIntInvalidNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get integer array value [1, 'integer', 0]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<int?> GetIntInvalidString(this IArray operations)
            {
                return operations.GetIntInvalidStringAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get integer array value [1, 'integer', 0]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<int?>> GetIntInvalidStringAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIntInvalidStringWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get integer array value [1, -1, 3, 300]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<long?> GetLongValid(this IArray operations)
            {
                return operations.GetLongValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get integer array value [1, -1, 3, 300]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<long?>> GetLongValidAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLongValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set array value empty [1, -1, 3, 300]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutLongValid(this IArray operations, IList<long?> arrayBody)
            {
                operations.PutLongValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set array value empty [1, -1, 3, 300]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutLongValidAsync(this IArray operations, IList<long?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutLongValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get long array value [1, null, 0]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<long?> GetLongInvalidNull(this IArray operations)
            {
                return operations.GetLongInvalidNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get long array value [1, null, 0]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<long?>> GetLongInvalidNullAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLongInvalidNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get long array value [1, 'integer', 0]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<long?> GetLongInvalidString(this IArray operations)
            {
                return operations.GetLongInvalidStringAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get long array value [1, 'integer', 0]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<long?>> GetLongInvalidStringAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLongInvalidStringWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get float array value [0, -0.01, 1.2e20]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<double?> GetFloatValid(this IArray operations)
            {
                return operations.GetFloatValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get float array value [0, -0.01, 1.2e20]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<double?>> GetFloatValidAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFloatValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set array value [0, -0.01, 1.2e20]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutFloatValid(this IArray operations, IList<double?> arrayBody)
            {
                operations.PutFloatValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set array value [0, -0.01, 1.2e20]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutFloatValidAsync(this IArray operations, IList<double?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutFloatValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get float array value [0.0, null, -1.2e20]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<double?> GetFloatInvalidNull(this IArray operations)
            {
                return operations.GetFloatInvalidNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get float array value [0.0, null, -1.2e20]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<double?>> GetFloatInvalidNullAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFloatInvalidNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get boolean array value [1.0, 'number', 0.0]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<double?> GetFloatInvalidString(this IArray operations)
            {
                return operations.GetFloatInvalidStringAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get boolean array value [1.0, 'number', 0.0]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<double?>> GetFloatInvalidStringAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFloatInvalidStringWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get float array value [0, -0.01, 1.2e20]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<double?> GetDoubleValid(this IArray operations)
            {
                return operations.GetDoubleValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get float array value [0, -0.01, 1.2e20]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<double?>> GetDoubleValidAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDoubleValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set array value [0, -0.01, 1.2e20]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutDoubleValid(this IArray operations, IList<double?> arrayBody)
            {
                operations.PutDoubleValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set array value [0, -0.01, 1.2e20]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutDoubleValidAsync(this IArray operations, IList<double?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutDoubleValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get float array value [0.0, null, -1.2e20]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<double?> GetDoubleInvalidNull(this IArray operations)
            {
                return operations.GetDoubleInvalidNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get float array value [0.0, null, -1.2e20]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<double?>> GetDoubleInvalidNullAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDoubleInvalidNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get boolean array value [1.0, 'number', 0.0]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<double?> GetDoubleInvalidString(this IArray operations)
            {
                return operations.GetDoubleInvalidStringAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get boolean array value [1.0, 'number', 0.0]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<double?>> GetDoubleInvalidStringAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDoubleInvalidStringWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get string array value ['foo1', 'foo2', 'foo3']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<string> GetStringValid(this IArray operations)
            {
                return operations.GetStringValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get string array value ['foo1', 'foo2', 'foo3']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetStringValidAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStringValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set array value ['foo1', 'foo2', 'foo3']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutStringValid(this IArray operations, IList<string> arrayBody)
            {
                operations.PutStringValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set array value ['foo1', 'foo2', 'foo3']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutStringValidAsync(this IArray operations, IList<string> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutStringValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get enum array value ['foo1', 'foo2', 'foo3']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<FooEnum?> GetEnumValid(this IArray operations)
            {
                return operations.GetEnumValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get enum array value ['foo1', 'foo2', 'foo3']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FooEnum?>> GetEnumValidAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEnumValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set array value ['foo1', 'foo2', 'foo3']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutEnumValid(this IArray operations, IList<FooEnum?> arrayBody)
            {
                operations.PutEnumValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set array value ['foo1', 'foo2', 'foo3']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutEnumValidAsync(this IArray operations, IList<FooEnum?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutEnumValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get enum array value ['foo1', 'foo2', 'foo3']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<string> GetStringEnumValid(this IArray operations)
            {
                return operations.GetStringEnumValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get enum array value ['foo1', 'foo2', 'foo3']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetStringEnumValidAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStringEnumValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set array value ['foo1', 'foo2', 'foo3']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutStringEnumValid(this IArray operations, IList<string> arrayBody)
            {
                operations.PutStringEnumValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set array value ['foo1', 'foo2', 'foo3']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutStringEnumValidAsync(this IArray operations, IList<string> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutStringEnumValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get string array value ['foo', null, 'foo2']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<string> GetStringWithNull(this IArray operations)
            {
                return operations.GetStringWithNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get string array value ['foo', null, 'foo2']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetStringWithNullAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStringWithNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get string array value ['foo', 123, 'foo2']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<string> GetStringWithInvalid(this IArray operations)
            {
                return operations.GetStringWithInvalidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get string array value ['foo', 123, 'foo2']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetStringWithInvalidAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStringWithInvalidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652',
            /// 'd1399005-30f7-40d6-8da6-dd7c89ad34db',
            /// 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<System.Guid?> GetUuidValid(this IArray operations)
            {
                return operations.GetUuidValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652',
            /// 'd1399005-30f7-40d6-8da6-dd7c89ad34db',
            /// 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<System.Guid?>> GetUuidValidAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUuidValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set array value  ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652',
            /// 'd1399005-30f7-40d6-8da6-dd7c89ad34db',
            /// 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutUuidValid(this IArray operations, IList<System.Guid?> arrayBody)
            {
                operations.PutUuidValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set array value  ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652',
            /// 'd1399005-30f7-40d6-8da6-dd7c89ad34db',
            /// 'f42f6aa1-a5bc-4ddf-907e-5f915de43205']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutUuidValidAsync(this IArray operations, IList<System.Guid?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutUuidValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'foo']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<System.Guid?> GetUuidInvalidChars(this IArray operations)
            {
                return operations.GetUuidInvalidCharsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'foo']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<System.Guid?>> GetUuidInvalidCharsAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUuidInvalidCharsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get integer array value ['2000-12-01', '1980-01-02', '1492-10-12']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<System.DateTime?> GetDateValid(this IArray operations)
            {
                return operations.GetDateValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get integer array value ['2000-12-01', '1980-01-02', '1492-10-12']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<System.DateTime?>> GetDateValidAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDateValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set array value  ['2000-12-01', '1980-01-02', '1492-10-12']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutDateValid(this IArray operations, IList<System.DateTime?> arrayBody)
            {
                operations.PutDateValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set array value  ['2000-12-01', '1980-01-02', '1492-10-12']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutDateValidAsync(this IArray operations, IList<System.DateTime?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutDateValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get date array value ['2012-01-01', null, '1776-07-04']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<System.DateTime?> GetDateInvalidNull(this IArray operations)
            {
                return operations.GetDateInvalidNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get date array value ['2012-01-01', null, '1776-07-04']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<System.DateTime?>> GetDateInvalidNullAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDateInvalidNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get date array value ['2011-03-22', 'date']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<System.DateTime?> GetDateInvalidChars(this IArray operations)
            {
                return operations.GetDateInvalidCharsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get date array value ['2011-03-22', 'date']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<System.DateTime?>> GetDateInvalidCharsAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDateInvalidCharsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get date-time array value ['2000-12-01t00:00:01z',
            /// '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<System.DateTime?> GetDateTimeValid(this IArray operations)
            {
                return operations.GetDateTimeValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get date-time array value ['2000-12-01t00:00:01z',
            /// '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<System.DateTime?>> GetDateTimeValidAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDateTimeValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set array value  ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00',
            /// '1492-10-12T10:15:01-08:00']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutDateTimeValid(this IArray operations, IList<System.DateTime?> arrayBody)
            {
                operations.PutDateTimeValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set array value  ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00',
            /// '1492-10-12T10:15:01-08:00']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutDateTimeValidAsync(this IArray operations, IList<System.DateTime?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutDateTimeValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get date array value ['2000-12-01t00:00:01z', null]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<System.DateTime?> GetDateTimeInvalidNull(this IArray operations)
            {
                return operations.GetDateTimeInvalidNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get date array value ['2000-12-01t00:00:01z', null]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<System.DateTime?>> GetDateTimeInvalidNullAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDateTimeInvalidNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get date array value ['2000-12-01t00:00:01z', 'date-time']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<System.DateTime?> GetDateTimeInvalidChars(this IArray operations)
            {
                return operations.GetDateTimeInvalidCharsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get date array value ['2000-12-01t00:00:01z', 'date-time']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<System.DateTime?>> GetDateTimeInvalidCharsAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDateTimeInvalidCharsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get date-time array value ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan
            /// 1980 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01 GMT']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<System.DateTime?> GetDateTimeRfc1123Valid(this IArray operations)
            {
                return operations.GetDateTimeRfc1123ValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get date-time array value ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan
            /// 1980 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01 GMT']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<System.DateTime?>> GetDateTimeRfc1123ValidAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDateTimeRfc1123ValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set array value  ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980
            /// 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01 GMT']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutDateTimeRfc1123Valid(this IArray operations, IList<System.DateTime?> arrayBody)
            {
                operations.PutDateTimeRfc1123ValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set array value  ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980
            /// 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01 GMT']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutDateTimeRfc1123ValidAsync(this IArray operations, IList<System.DateTime?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutDateTimeRfc1123ValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get duration array value ['P123DT22H14M12.011S', 'P5DT1H0M0S']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<System.TimeSpan?> GetDurationValid(this IArray operations)
            {
                return operations.GetDurationValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get duration array value ['P123DT22H14M12.011S', 'P5DT1H0M0S']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<System.TimeSpan?>> GetDurationValidAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDurationValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set array value  ['P123DT22H14M12.011S', 'P5DT1H0M0S']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutDurationValid(this IArray operations, IList<System.TimeSpan?> arrayBody)
            {
                operations.PutDurationValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set array value  ['P123DT22H14M12.011S', 'P5DT1H0M0S']
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutDurationValidAsync(this IArray operations, IList<System.TimeSpan?> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutDurationValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get byte array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)]
            /// with each item encoded in base64
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<byte[]> GetByteValid(this IArray operations)
            {
                return operations.GetByteValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get byte array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)]
            /// with each item encoded in base64
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<byte[]>> GetByteValidAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByteValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Put the array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)]
            /// with each elementencoded in base 64
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutByteValid(this IArray operations, IList<byte[]> arrayBody)
            {
                operations.PutByteValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Put the array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)]
            /// with each elementencoded in base 64
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutByteValidAsync(this IArray operations, IList<byte[]> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutByteValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get byte array value [hex(AB, AC, AD), null] with the first item base64
            /// encoded
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<byte[]> GetByteInvalidNull(this IArray operations)
            {
                return operations.GetByteInvalidNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get byte array value [hex(AB, AC, AD), null] with the first item base64
            /// encoded
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<byte[]>> GetByteInvalidNullAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByteInvalidNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get array value ['a string that gets encoded with base64url', 'test string'
            /// 'Lorem ipsum'] with the items base64url encoded
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<byte[]> GetBase64Url(this IArray operations)
            {
                return operations.GetBase64UrlAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get array value ['a string that gets encoded with base64url', 'test string'
            /// 'Lorem ipsum'] with the items base64url encoded
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<byte[]>> GetBase64UrlAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBase64UrlWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get array of complex type null value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Product> GetComplexNull(this IArray operations)
            {
                return operations.GetComplexNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get array of complex type null value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Product>> GetComplexNullAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetComplexNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get empty array of complex type []
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Product> GetComplexEmpty(this IArray operations)
            {
                return operations.GetComplexEmptyAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get empty array of complex type []
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Product>> GetComplexEmptyAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetComplexEmptyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get array of complex type with null item [{'integer': 1 'string': '2'},
            /// null, {'integer': 5, 'string': '6'}]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Product> GetComplexItemNull(this IArray operations)
            {
                return operations.GetComplexItemNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get array of complex type with null item [{'integer': 1 'string': '2'},
            /// null, {'integer': 5, 'string': '6'}]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Product>> GetComplexItemNullAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetComplexItemNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get array of complex type with empty item [{'integer': 1 'string': '2'},
            /// {}, {'integer': 5, 'string': '6'}]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Product> GetComplexItemEmpty(this IArray operations)
            {
                return operations.GetComplexItemEmptyAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get array of complex type with empty item [{'integer': 1 'string': '2'},
            /// {}, {'integer': 5, 'string': '6'}]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Product>> GetComplexItemEmptyAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetComplexItemEmptyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get array of complex type with [{'integer': 1 'string': '2'}, {'integer':
            /// 3, 'string': '4'}, {'integer': 5, 'string': '6'}]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Product> GetComplexValid(this IArray operations)
            {
                return operations.GetComplexValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get array of complex type with [{'integer': 1 'string': '2'}, {'integer':
            /// 3, 'string': '4'}, {'integer': 5, 'string': '6'}]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Product>> GetComplexValidAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetComplexValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Put an array of complex type with values [{'integer': 1 'string': '2'},
            /// {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutComplexValid(this IArray operations, IList<Product> arrayBody)
            {
                operations.PutComplexValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Put an array of complex type with values [{'integer': 1 'string': '2'},
            /// {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutComplexValidAsync(this IArray operations, IList<Product> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutComplexValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a null array
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<IList<string>> GetArrayNull(this IArray operations)
            {
                return operations.GetArrayNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a null array
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IList<string>>> GetArrayNullAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetArrayNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an empty array []
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<IList<string>> GetArrayEmpty(this IArray operations)
            {
                return operations.GetArrayEmptyAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an empty array []
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IList<string>>> GetArrayEmptyAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetArrayEmptyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an array of array of strings [['1', '2', '3'], null, ['7', '8', '9']]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<IList<string>> GetArrayItemNull(this IArray operations)
            {
                return operations.GetArrayItemNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an array of array of strings [['1', '2', '3'], null, ['7', '8', '9']]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IList<string>>> GetArrayItemNullAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetArrayItemNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an array of array of strings [['1', '2', '3'], [], ['7', '8', '9']]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<IList<string>> GetArrayItemEmpty(this IArray operations)
            {
                return operations.GetArrayItemEmptyAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an array of array of strings [['1', '2', '3'], [], ['7', '8', '9']]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IList<string>>> GetArrayItemEmptyAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetArrayItemEmptyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7',
            /// '8', '9']]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<IList<string>> GetArrayValid(this IArray operations)
            {
                return operations.GetArrayValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7',
            /// '8', '9']]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IList<string>>> GetArrayValidAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetArrayValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Put An array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7',
            /// '8', '9']]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutArrayValid(this IArray operations, IList<IList<string>> arrayBody)
            {
                operations.PutArrayValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Put An array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7',
            /// '8', '9']]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutArrayValidAsync(this IArray operations, IList<IList<string>> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutArrayValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get an array of Dictionaries with value null
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<IDictionary<string, string>> GetDictionaryNull(this IArray operations)
            {
                return operations.GetDictionaryNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an array of Dictionaries with value null
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IDictionary<string, string>>> GetDictionaryNullAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDictionaryNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an array of Dictionaries of type &lt;string, string&gt; with value []
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<IDictionary<string, string>> GetDictionaryEmpty(this IArray operations)
            {
                return operations.GetDictionaryEmptyAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an array of Dictionaries of type &lt;string, string&gt; with value []
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IDictionary<string, string>>> GetDictionaryEmptyAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDictionaryEmptyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an array of Dictionaries of type &lt;string, string&gt; with value
            /// [{'1': 'one', '2': 'two', '3': 'three'}, null, {'7': 'seven', '8': 'eight',
            /// '9': 'nine'}]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<IDictionary<string, string>> GetDictionaryItemNull(this IArray operations)
            {
                return operations.GetDictionaryItemNullAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an array of Dictionaries of type &lt;string, string&gt; with value
            /// [{'1': 'one', '2': 'two', '3': 'three'}, null, {'7': 'seven', '8': 'eight',
            /// '9': 'nine'}]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IDictionary<string, string>>> GetDictionaryItemNullAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDictionaryItemNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an array of Dictionaries of type &lt;string, string&gt; with value
            /// [{'1': 'one', '2': 'two', '3': 'three'}, {}, {'7': 'seven', '8': 'eight',
            /// '9': 'nine'}]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<IDictionary<string, string>> GetDictionaryItemEmpty(this IArray operations)
            {
                return operations.GetDictionaryItemEmptyAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an array of Dictionaries of type &lt;string, string&gt; with value
            /// [{'1': 'one', '2': 'two', '3': 'three'}, {}, {'7': 'seven', '8': 'eight',
            /// '9': 'nine'}]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IDictionary<string, string>>> GetDictionaryItemEmptyAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDictionaryItemEmptyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an array of Dictionaries of type &lt;string, string&gt; with value
            /// [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6':
            /// 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<IDictionary<string, string>> GetDictionaryValid(this IArray operations)
            {
                return operations.GetDictionaryValidAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an array of Dictionaries of type &lt;string, string&gt; with value
            /// [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6':
            /// 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IDictionary<string, string>>> GetDictionaryValidAsync(this IArray operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDictionaryValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an array of Dictionaries of type &lt;string, string&gt; with value
            /// [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6':
            /// 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutDictionaryValid(this IArray operations, IList<IDictionary<string, string>> arrayBody)
            {
                operations.PutDictionaryValidAsync(arrayBody).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an array of Dictionaries of type &lt;string, string&gt; with value
            /// [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6':
            /// 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutDictionaryValidAsync(this IArray operations, IList<IDictionary<string, string>> arrayBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutDictionaryValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
