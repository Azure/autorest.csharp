// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.Azure.Fluent.AcceptanceTestsAzureParameterGrouping
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// ParameterGroupingOperations operations.
    /// </summary>
    public partial class ParameterGroupingOperations : IParameterGroupingOperations
    {
        /// <summary>
        /// Initializes a new instance of the ParameterGroupingOperations class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public ParameterGroupingOperations(IParameterGroupingOperationsWithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private IParameterGroupingOperationsWithHttpMessages OperationsWithHttpMessages { get; set; }

        public IParameterGroupingOperationsWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Post a bunch of required parameters grouped
        /// </summary>
        /// <param name='parameterGroupingPostRequiredParameters'>
        /// Additional parameters for the operation
        /// </param>
        public void PostRequired(ParameterGroupingPostRequiredParametersInner parameterGroupingPostRequiredParameters)
        {
            PostRequiredAsync(parameterGroupingPostRequiredParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Post a bunch of required parameters grouped
        /// </summary>
        /// <param name='parameterGroupingPostRequiredParameters'>
        /// Additional parameters for the operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PostRequiredAsync(ParameterGroupingPostRequiredParametersInner parameterGroupingPostRequiredParameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PostRequiredAsync(parameterGroupingPostRequiredParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Post a bunch of optional parameters grouped
        /// </summary>
        /// <param name='parameterGroupingPostOptionalParameters'>
        /// Additional parameters for the operation
        /// </param>
        public void PostOptional(ParameterGroupingPostOptionalParametersInner parameterGroupingPostOptionalParameters = default(ParameterGroupingPostOptionalParametersInner))
        {
            PostOptionalAsync(parameterGroupingPostOptionalParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Post a bunch of optional parameters grouped
        /// </summary>
        /// <param name='parameterGroupingPostOptionalParameters'>
        /// Additional parameters for the operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PostOptionalAsync(ParameterGroupingPostOptionalParametersInner parameterGroupingPostOptionalParameters = default(ParameterGroupingPostOptionalParametersInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PostOptionalAsync(parameterGroupingPostOptionalParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Post parameters from multiple different parameter groups
        /// </summary>
        /// <param name='firstParameterGroup'>
        /// Additional parameters for the operation
        /// </param>
        /// <param name='parameterGroupingPostMultiParamGroupsSecondParamGroup'>
        /// Additional parameters for the operation
        /// </param>
        public void PostMultiParamGroups(FirstParameterGroupInner firstParameterGroup = default(FirstParameterGroupInner), ParameterGroupingPostMultiParamGroupsSecondParamGroupInner parameterGroupingPostMultiParamGroupsSecondParamGroup = default(ParameterGroupingPostMultiParamGroupsSecondParamGroupInner))
        {
            PostMultiParamGroupsAsync(firstParameterGroup, parameterGroupingPostMultiParamGroupsSecondParamGroup).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Post parameters from multiple different parameter groups
        /// </summary>
        /// <param name='firstParameterGroup'>
        /// Additional parameters for the operation
        /// </param>
        /// <param name='parameterGroupingPostMultiParamGroupsSecondParamGroup'>
        /// Additional parameters for the operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PostMultiParamGroupsAsync(FirstParameterGroupInner firstParameterGroup = default(FirstParameterGroupInner), ParameterGroupingPostMultiParamGroupsSecondParamGroupInner parameterGroupingPostMultiParamGroupsSecondParamGroup = default(ParameterGroupingPostMultiParamGroupsSecondParamGroupInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PostMultiParamGroupsAsync(firstParameterGroup, parameterGroupingPostMultiParamGroupsSecondParamGroup, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Post parameters with a shared parameter group object
        /// </summary>
        /// <param name='firstParameterGroup'>
        /// Additional parameters for the operation
        /// </param>
        public void PostSharedParameterGroupObject(FirstParameterGroupInner firstParameterGroup = default(FirstParameterGroupInner))
        {
            PostSharedParameterGroupObjectAsync(firstParameterGroup).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Post parameters with a shared parameter group object
        /// </summary>
        /// <param name='firstParameterGroup'>
        /// Additional parameters for the operation
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PostSharedParameterGroupObjectAsync(FirstParameterGroupInner firstParameterGroup = default(FirstParameterGroupInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PostSharedParameterGroupObjectAsync(firstParameterGroup, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

    }
}
