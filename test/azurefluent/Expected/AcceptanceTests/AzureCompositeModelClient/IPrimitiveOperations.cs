// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.Azure.Fluent.AcceptanceTestsAzureCompositeModelClient
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// PrimitiveOperations operations.
    /// </summary>
    public partial interface IPrimitiveOperations
    {
        IPrimitiveOperationsWithHttpMessages WithHttpMessages();

        /// <summary>
        /// Get complex types with integer properties
        /// </summary>
        IntWrapperInner GetInt();

        /// <summary>
        /// Get complex types with integer properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<IntWrapperInner> GetIntAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put complex types with integer properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put -1 and 2
        /// </param>
        void PutInt(IntWrapperInner complexBody);

        /// <summary>
        /// Put complex types with integer properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put -1 and 2
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutIntAsync(IntWrapperInner complexBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get complex types with long properties
        /// </summary>
        LongWrapperInner GetLong();

        /// <summary>
        /// Get complex types with long properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LongWrapperInner> GetLongAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put complex types with long properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 1099511627775 and -999511627788
        /// </param>
        void PutLong(LongWrapperInner complexBody);

        /// <summary>
        /// Put complex types with long properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 1099511627775 and -999511627788
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutLongAsync(LongWrapperInner complexBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get complex types with float properties
        /// </summary>
        FloatWrapperInner GetFloat();

        /// <summary>
        /// Get complex types with float properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<FloatWrapperInner> GetFloatAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put complex types with float properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 1.05 and -0.003
        /// </param>
        void PutFloat(FloatWrapperInner complexBody);

        /// <summary>
        /// Put complex types with float properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 1.05 and -0.003
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutFloatAsync(FloatWrapperInner complexBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get complex types with double properties
        /// </summary>
        DoubleWrapperInner GetDouble();

        /// <summary>
        /// Get complex types with double properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<DoubleWrapperInner> GetDoubleAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put complex types with double properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005
        /// </param>
        void PutDouble(DoubleWrapperInner complexBody);

        /// <summary>
        /// Put complex types with double properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutDoubleAsync(DoubleWrapperInner complexBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get complex types with bool properties
        /// </summary>
        BooleanWrapperInner GetBool();

        /// <summary>
        /// Get complex types with bool properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<BooleanWrapperInner> GetBoolAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put complex types with bool properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put true and false
        /// </param>
        void PutBool(BooleanWrapperInner complexBody);

        /// <summary>
        /// Put complex types with bool properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put true and false
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutBoolAsync(BooleanWrapperInner complexBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get complex types with string properties
        /// </summary>
        StringWrapperInner GetString();

        /// <summary>
        /// Get complex types with string properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<StringWrapperInner> GetStringAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put complex types with string properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 'goodrequest', '', and null
        /// </param>
        void PutString(StringWrapperInner complexBody);

        /// <summary>
        /// Put complex types with string properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 'goodrequest', '', and null
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutStringAsync(StringWrapperInner complexBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get complex types with date properties
        /// </summary>
        DateWrapperInner GetDate();

        /// <summary>
        /// Get complex types with date properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<DateWrapperInner> GetDateAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put complex types with date properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put '0001-01-01' and '2016-02-29'
        /// </param>
        void PutDate(DateWrapperInner complexBody);

        /// <summary>
        /// Put complex types with date properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put '0001-01-01' and '2016-02-29'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutDateAsync(DateWrapperInner complexBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get complex types with datetime properties
        /// </summary>
        DatetimeWrapperInner GetDateTime();

        /// <summary>
        /// Get complex types with datetime properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<DatetimeWrapperInner> GetDateTimeAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put complex types with datetime properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put '0001-01-01T12:00:00-04:00' and '2015-05-18T11:38:00-08:00'
        /// </param>
        void PutDateTime(DatetimeWrapperInner complexBody);

        /// <summary>
        /// Put complex types with datetime properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put '0001-01-01T12:00:00-04:00' and '2015-05-18T11:38:00-08:00'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutDateTimeAsync(DatetimeWrapperInner complexBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get complex types with datetimeRfc1123 properties
        /// </summary>
        Datetimerfc1123WrapperInner GetDateTimeRfc1123();

        /// <summary>
        /// Get complex types with datetimeRfc1123 properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Datetimerfc1123WrapperInner> GetDateTimeRfc1123Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put complex types with datetimeRfc1123 properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 'Mon, 01 Jan 0001 12:00:00 GMT' and 'Mon, 18 May 2015 11:38:00 GMT'
        /// </param>
        void PutDateTimeRfc1123(Datetimerfc1123WrapperInner complexBody);

        /// <summary>
        /// Put complex types with datetimeRfc1123 properties
        /// </summary>
        /// <param name='complexBody'>
        /// Please put 'Mon, 01 Jan 0001 12:00:00 GMT' and 'Mon, 18 May 2015 11:38:00 GMT'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutDateTimeRfc1123Async(Datetimerfc1123WrapperInner complexBody, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get complex types with duration properties
        /// </summary>
        DurationWrapperInner GetDuration();

        /// <summary>
        /// Get complex types with duration properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<DurationWrapperInner> GetDurationAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put complex types with duration properties
        /// </summary>
        /// <param name='field'>
        /// </param>
        void PutDuration(System.TimeSpan? field = default(System.TimeSpan?));

        /// <summary>
        /// Put complex types with duration properties
        /// </summary>
        /// <param name='field'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutDurationAsync(System.TimeSpan? field = default(System.TimeSpan?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get complex types with byte properties
        /// </summary>
        ByteWrapperInner GetByte();

        /// <summary>
        /// Get complex types with byte properties
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ByteWrapperInner> GetByteAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put complex types with byte properties
        /// </summary>
        /// <param name='field'>
        /// </param>
        void PutByte(byte[] field = default(byte[]));

        /// <summary>
        /// Put complex types with byte properties
        /// </summary>
        /// <param name='field'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutByteAsync(byte[] field = default(byte[]), CancellationToken cancellationToken = default(CancellationToken));
    }
}
