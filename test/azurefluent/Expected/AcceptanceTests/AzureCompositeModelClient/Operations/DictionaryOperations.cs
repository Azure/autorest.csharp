// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.Azure.Fluent.AcceptanceTestsAzureCompositeModelClient
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// DictionaryOperations operations.
    /// </summary>
    public partial class DictionaryOperations : IDictionaryOperations
    {
        /// <summary>
        /// Initializes a new instance of the DictionaryOperations class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public DictionaryOperations(IDictionaryOperationsWithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private IDictionaryOperationsWithHttpMessages OperationsWithHttpMessages { get; set; }

        public IDictionaryOperationsWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Get complex types with dictionary property
        /// </summary>
        public DictionaryWrapperInner GetValid()
        {
            return GetValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get complex types with dictionary property
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<DictionaryWrapperInner> GetValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetValidAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put complex types with dictionary property
        /// </summary>
        /// <param name='defaultProgram'>
        /// </param>
        public void PutValid(IDictionary<string, string> defaultProgram = default(IDictionary<string, string>))
        {
            PutValidAsync(defaultProgram).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put complex types with dictionary property
        /// </summary>
        /// <param name='defaultProgram'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutValidAsync(IDictionary<string, string> defaultProgram = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutValidAsync(defaultProgram, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get complex types with dictionary property which is empty
        /// </summary>
        public DictionaryWrapperInner GetEmpty()
        {
            return GetEmptyAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get complex types with dictionary property which is empty
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<DictionaryWrapperInner> GetEmptyAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetEmptyAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Put complex types with dictionary property which is empty
        /// </summary>
        /// <param name='defaultProgram'>
        /// </param>
        public void PutEmpty(IDictionary<string, string> defaultProgram = default(IDictionary<string, string>))
        {
            PutEmptyAsync(defaultProgram).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Put complex types with dictionary property which is empty
        /// </summary>
        /// <param name='defaultProgram'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PutEmptyAsync(IDictionary<string, string> defaultProgram = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PutEmptyAsync(defaultProgram, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get complex types with dictionary property which is null
        /// </summary>
        public DictionaryWrapperInner GetNull()
        {
            return GetNullAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get complex types with dictionary property which is null
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<DictionaryWrapperInner> GetNullAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetNullAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Get complex types with dictionary property while server doesn't provide a response payload
        /// </summary>
        public DictionaryWrapperInner GetNotProvided()
        {
            return GetNotProvidedAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get complex types with dictionary property while server doesn't provide a response payload
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<DictionaryWrapperInner> GetNotProvidedAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.GetNotProvidedAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

    }
}
