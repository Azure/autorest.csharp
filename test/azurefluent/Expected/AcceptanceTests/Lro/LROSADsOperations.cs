// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.Azure.Fluent.AcceptanceTestsLro
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// LROSADsOperations operations.
    /// </summary>
    public partial class LROSADsOperations : ILROSADsOperations
    {
        /// <summary>
        /// Initializes a new instance of the LROSADsOperations class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public LROSADsOperations(ILROSADsOperationsWithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private ILROSADsOperationsWithHttpMessages OperationsWithHttpMessages { get; set; }

        public ILROSADsOperationsWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Long running put request, service returns a 400 to the initial request
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner PutNonRetry400(ProductInner product = default(ProductInner))
        {
            return PutNonRetry400Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 400 to the initial request
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> PutNonRetry400Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutNonRetry400Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner PutNonRetry201Creating400(ProductInner product = default(ProductInner))
        {
            return PutNonRetry201Creating400Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> PutNonRetry201Creating400Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutNonRetry201Creating400Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner PutNonRetry201Creating400InvalidJson(ProductInner product = default(ProductInner))
        {
            return PutNonRetry201Creating400InvalidJsonAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> PutNonRetry201Creating400InvalidJsonAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutNonRetry201Creating400InvalidJsonAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the endpoint indicated in
        /// the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner PutAsyncRelativeRetry400(ProductInner product = default(ProductInner))
        {
            return PutAsyncRelativeRetry400Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the endpoint indicated in
        /// the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> PutAsyncRelativeRetry400Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutAsyncRelativeRetry400Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 400 with an error body
        /// </summary>
        public LROSADsDeleteNonRetry400HeadersInner DeleteNonRetry400()
        {
            return DeleteNonRetry400Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 400 with an error body
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDeleteNonRetry400HeadersInner> DeleteNonRetry400Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.DeleteNonRetry400Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 with a location header
        /// </summary>
        public LROSADsDelete202NonRetry400HeadersInner Delete202NonRetry400()
        {
            return Delete202NonRetry400Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 with a location header
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDelete202NonRetry400HeadersInner> Delete202NonRetry400Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Delete202NonRetry400Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        public LROSADsDeleteAsyncRelativeRetry400HeadersInner DeleteAsyncRelativeRetry400()
        {
            return DeleteAsyncRelativeRetry400Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDeleteAsyncRelativeRetry400HeadersInner> DeleteAsyncRelativeRetry400Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.DeleteAsyncRelativeRetry400Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 400 with no error body
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPostNonRetry400HeadersInner PostNonRetry400(ProductInner product = default(ProductInner))
        {
            return PostNonRetry400Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 400 with no error body
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPostNonRetry400HeadersInner> PostNonRetry400Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PostNonRetry400Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 with a location header
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPost202NonRetry400HeadersInner Post202NonRetry400(ProductInner product = default(ProductInner))
        {
            return Post202NonRetry400Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 with a location header
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPost202NonRetry400HeadersInner> Post202NonRetry400Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Post202NonRetry400Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPostAsyncRelativeRetry400HeadersInner PostAsyncRelativeRetry400(ProductInner product = default(ProductInner))
        {
            return PostAsyncRelativeRetry400Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPostAsyncRelativeRetry400HeadersInner> PostAsyncRelativeRetry400Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PostAsyncRelativeRetry400Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request with no payload
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner PutError201NoProvisioningStatePayload(ProductInner product = default(ProductInner))
        {
            return PutError201NoProvisioningStatePayloadAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request with no payload
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> PutError201NoProvisioningStatePayloadAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutError201NoProvisioningStatePayloadAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner PutAsyncRelativeRetryNoStatus(ProductInner product = default(ProductInner))
        {
            return PutAsyncRelativeRetryNoStatusAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> PutAsyncRelativeRetryNoStatusAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutAsyncRelativeRetryNoStatusAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner PutAsyncRelativeRetryNoStatusPayload(ProductInner product = default(ProductInner))
        {
            return PutAsyncRelativeRetryNoStatusPayloadAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> PutAsyncRelativeRetryNoStatusPayloadAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutAsyncRelativeRetryNoStatusPayloadAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 204 to the initial request, indicating success.
        /// </summary>
        public void Delete204Succeeded()
        {
            Delete204SucceededAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 204 to the initial request, indicating success.
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task Delete204SucceededAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.Delete204SucceededAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        public LROSADsDeleteAsyncRelativeRetryNoStatusHeadersInner DeleteAsyncRelativeRetryNoStatus()
        {
            return DeleteAsyncRelativeRetryNoStatusAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDeleteAsyncRelativeRetryNoStatusHeadersInner> DeleteAsyncRelativeRetryNoStatusAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.DeleteAsyncRelativeRetryNoStatusAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, without a location header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPost202NoLocationHeadersInner Post202NoLocation(ProductInner product = default(ProductInner))
        {
            return Post202NoLocationAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, without a location header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPost202NoLocationHeadersInner> Post202NoLocationAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Post202NoLocationAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPostAsyncRelativeRetryNoPayloadHeadersInner PostAsyncRelativeRetryNoPayload(ProductInner product = default(ProductInner))
        {
            return PostAsyncRelativeRetryNoPayloadAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPostAsyncRelativeRetryNoPayloadHeadersInner> PostAsyncRelativeRetryNoPayloadAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PostAsyncRelativeRetryNoPayloadAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that is not a valid json
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner Put200InvalidJson(ProductInner product = default(ProductInner))
        {
            return Put200InvalidJsonAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that is not a valid json
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> Put200InvalidJsonAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Put200InvalidJsonAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner PutAsyncRelativeRetryInvalidHeader(ProductInner product = default(ProductInner))
        {
            return PutAsyncRelativeRetryInvalidHeaderAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> PutAsyncRelativeRetryInvalidHeaderAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutAsyncRelativeRetryInvalidHeaderAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner PutAsyncRelativeRetryInvalidJsonPolling(ProductInner product = default(ProductInner))
        {
            return PutAsyncRelativeRetryInvalidJsonPollingAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> PutAsyncRelativeRetryInvalidJsonPollingAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutAsyncRelativeRetryInvalidJsonPollingAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request receing a reponse with an invalid
        /// 'Location' and 'Retry-After' headers
        /// </summary>
        public LROSADsDelete202RetryInvalidHeaderHeadersInner Delete202RetryInvalidHeader()
        {
            return Delete202RetryInvalidHeaderAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request receing a reponse with an invalid
        /// 'Location' and 'Retry-After' headers
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDelete202RetryInvalidHeaderHeadersInner> Delete202RetryInvalidHeaderAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Delete202RetryInvalidHeaderAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. The endpoint indicated in the
        /// Azure-AsyncOperation header is invalid
        /// </summary>
        public LROSADsDeleteAsyncRelativeRetryInvalidHeaderHeadersInner DeleteAsyncRelativeRetryInvalidHeader()
        {
            return DeleteAsyncRelativeRetryInvalidHeaderAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. The endpoint indicated in the
        /// Azure-AsyncOperation header is invalid
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDeleteAsyncRelativeRetryInvalidHeaderHeadersInner> DeleteAsyncRelativeRetryInvalidHeaderAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.DeleteAsyncRelativeRetryInvalidHeaderAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        public LROSADsDeleteAsyncRelativeRetryInvalidJsonPollingHeadersInner DeleteAsyncRelativeRetryInvalidJsonPolling()
        {
            return DeleteAsyncRelativeRetryInvalidJsonPollingAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDeleteAsyncRelativeRetryInvalidJsonPollingHeadersInner> DeleteAsyncRelativeRetryInvalidJsonPollingAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.DeleteAsyncRelativeRetryInvalidJsonPollingAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with invalid 'Location' and 'Retry-After'
        /// headers.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPost202RetryInvalidHeaderHeadersInner Post202RetryInvalidHeader(ProductInner product = default(ProductInner))
        {
            return Post202RetryInvalidHeaderAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with invalid 'Location' and 'Retry-After'
        /// headers.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPost202RetryInvalidHeaderHeadersInner> Post202RetryInvalidHeaderAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Post202RetryInvalidHeaderAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPostAsyncRelativeRetryInvalidHeaderHeadersInner PostAsyncRelativeRetryInvalidHeader(ProductInner product = default(ProductInner))
        {
            return PostAsyncRelativeRetryInvalidHeaderAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPostAsyncRelativeRetryInvalidHeaderHeadersInner> PostAsyncRelativeRetryInvalidHeaderAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PostAsyncRelativeRetryInvalidHeaderAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPostAsyncRelativeRetryInvalidJsonPollingHeadersInner PostAsyncRelativeRetryInvalidJsonPolling(ProductInner product = default(ProductInner))
        {
            return PostAsyncRelativeRetryInvalidJsonPollingAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPostAsyncRelativeRetryInvalidJsonPollingHeadersInner> PostAsyncRelativeRetryInvalidJsonPollingAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PostAsyncRelativeRetryInvalidJsonPollingAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 400 to the initial request
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner BeginPutNonRetry400(ProductInner product = default(ProductInner))
        {
            return BeginPutNonRetry400Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 400 to the initial request
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginPutNonRetry400Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutNonRetry400Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner BeginPutNonRetry201Creating400(ProductInner product = default(ProductInner))
        {
            return BeginPutNonRetry201Creating400Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginPutNonRetry201Creating400Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutNonRetry201Creating400Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner BeginPutNonRetry201Creating400InvalidJson(ProductInner product = default(ProductInner))
        {
            return BeginPutNonRetry201Creating400InvalidJsonAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginPutNonRetry201Creating400InvalidJsonAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutNonRetry201Creating400InvalidJsonAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the endpoint indicated in
        /// the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner BeginPutAsyncRelativeRetry400(ProductInner product = default(ProductInner))
        {
            return BeginPutAsyncRelativeRetry400Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the endpoint indicated in
        /// the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginPutAsyncRelativeRetry400Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutAsyncRelativeRetry400Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 400 with an error body
        /// </summary>
        public LROSADsDeleteNonRetry400HeadersInner BeginDeleteNonRetry400()
        {
            return BeginDeleteNonRetry400Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 400 with an error body
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDeleteNonRetry400HeadersInner> BeginDeleteNonRetry400Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDeleteNonRetry400Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 with a location header
        /// </summary>
        public LROSADsDelete202NonRetry400HeadersInner BeginDelete202NonRetry400()
        {
            return BeginDelete202NonRetry400Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 with a location header
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDelete202NonRetry400HeadersInner> BeginDelete202NonRetry400Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDelete202NonRetry400Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        public LROSADsDeleteAsyncRelativeRetry400HeadersInner BeginDeleteAsyncRelativeRetry400()
        {
            return BeginDeleteAsyncRelativeRetry400Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDeleteAsyncRelativeRetry400HeadersInner> BeginDeleteAsyncRelativeRetry400Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDeleteAsyncRelativeRetry400Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 400 with no error body
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPostNonRetry400HeadersInner BeginPostNonRetry400(ProductInner product = default(ProductInner))
        {
            return BeginPostNonRetry400Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 400 with no error body
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPostNonRetry400HeadersInner> BeginPostNonRetry400Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPostNonRetry400Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 with a location header
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPost202NonRetry400HeadersInner BeginPost202NonRetry400(ProductInner product = default(ProductInner))
        {
            return BeginPost202NonRetry400Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 with a location header
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPost202NonRetry400HeadersInner> BeginPost202NonRetry400Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPost202NonRetry400Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPostAsyncRelativeRetry400HeadersInner BeginPostAsyncRelativeRetry400(ProductInner product = default(ProductInner))
        {
            return BeginPostAsyncRelativeRetry400Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPostAsyncRelativeRetry400HeadersInner> BeginPostAsyncRelativeRetry400Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPostAsyncRelativeRetry400Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request with no payload
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner BeginPutError201NoProvisioningStatePayload(ProductInner product = default(ProductInner))
        {
            return BeginPutError201NoProvisioningStatePayloadAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request with no payload
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginPutError201NoProvisioningStatePayloadAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutError201NoProvisioningStatePayloadAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner BeginPutAsyncRelativeRetryNoStatus(ProductInner product = default(ProductInner))
        {
            return BeginPutAsyncRelativeRetryNoStatusAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginPutAsyncRelativeRetryNoStatusAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutAsyncRelativeRetryNoStatusAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner BeginPutAsyncRelativeRetryNoStatusPayload(ProductInner product = default(ProductInner))
        {
            return BeginPutAsyncRelativeRetryNoStatusPayloadAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginPutAsyncRelativeRetryNoStatusPayloadAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutAsyncRelativeRetryNoStatusPayloadAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 204 to the initial request, indicating success.
        /// </summary>
        public void BeginDelete204Succeeded()
        {
            BeginDelete204SucceededAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 204 to the initial request, indicating success.
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task BeginDelete204SucceededAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.BeginDelete204SucceededAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        public LROSADsDeleteAsyncRelativeRetryNoStatusHeadersInner BeginDeleteAsyncRelativeRetryNoStatus()
        {
            return BeginDeleteAsyncRelativeRetryNoStatusAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDeleteAsyncRelativeRetryNoStatusHeadersInner> BeginDeleteAsyncRelativeRetryNoStatusAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDeleteAsyncRelativeRetryNoStatusAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, without a location header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPost202NoLocationHeadersInner BeginPost202NoLocation(ProductInner product = default(ProductInner))
        {
            return BeginPost202NoLocationAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, without a location header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPost202NoLocationHeadersInner> BeginPost202NoLocationAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPost202NoLocationAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPostAsyncRelativeRetryNoPayloadHeadersInner BeginPostAsyncRelativeRetryNoPayload(ProductInner product = default(ProductInner))
        {
            return BeginPostAsyncRelativeRetryNoPayloadAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPostAsyncRelativeRetryNoPayloadHeadersInner> BeginPostAsyncRelativeRetryNoPayloadAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPostAsyncRelativeRetryNoPayloadAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that is not a valid json
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner BeginPut200InvalidJson(ProductInner product = default(ProductInner))
        {
            return BeginPut200InvalidJsonAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that is not a valid json
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginPut200InvalidJsonAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPut200InvalidJsonAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner BeginPutAsyncRelativeRetryInvalidHeader(ProductInner product = default(ProductInner))
        {
            return BeginPutAsyncRelativeRetryInvalidHeaderAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginPutAsyncRelativeRetryInvalidHeaderAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutAsyncRelativeRetryInvalidHeaderAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner BeginPutAsyncRelativeRetryInvalidJsonPolling(ProductInner product = default(ProductInner))
        {
            return BeginPutAsyncRelativeRetryInvalidJsonPollingAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginPutAsyncRelativeRetryInvalidJsonPollingAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutAsyncRelativeRetryInvalidJsonPollingAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request receing a reponse with an invalid
        /// 'Location' and 'Retry-After' headers
        /// </summary>
        public LROSADsDelete202RetryInvalidHeaderHeadersInner BeginDelete202RetryInvalidHeader()
        {
            return BeginDelete202RetryInvalidHeaderAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request receing a reponse with an invalid
        /// 'Location' and 'Retry-After' headers
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDelete202RetryInvalidHeaderHeadersInner> BeginDelete202RetryInvalidHeaderAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDelete202RetryInvalidHeaderAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. The endpoint indicated in the
        /// Azure-AsyncOperation header is invalid
        /// </summary>
        public LROSADsDeleteAsyncRelativeRetryInvalidHeaderHeadersInner BeginDeleteAsyncRelativeRetryInvalidHeader()
        {
            return BeginDeleteAsyncRelativeRetryInvalidHeaderAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. The endpoint indicated in the
        /// Azure-AsyncOperation header is invalid
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDeleteAsyncRelativeRetryInvalidHeaderHeadersInner> BeginDeleteAsyncRelativeRetryInvalidHeaderAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDeleteAsyncRelativeRetryInvalidHeaderAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        public LROSADsDeleteAsyncRelativeRetryInvalidJsonPollingHeadersInner BeginDeleteAsyncRelativeRetryInvalidJsonPolling()
        {
            return BeginDeleteAsyncRelativeRetryInvalidJsonPollingAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDeleteAsyncRelativeRetryInvalidJsonPollingHeadersInner> BeginDeleteAsyncRelativeRetryInvalidJsonPollingAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDeleteAsyncRelativeRetryInvalidJsonPollingAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with invalid 'Location' and 'Retry-After'
        /// headers.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPost202RetryInvalidHeaderHeadersInner BeginPost202RetryInvalidHeader(ProductInner product = default(ProductInner))
        {
            return BeginPost202RetryInvalidHeaderAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with invalid 'Location' and 'Retry-After'
        /// headers.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPost202RetryInvalidHeaderHeadersInner> BeginPost202RetryInvalidHeaderAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPost202RetryInvalidHeaderAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPostAsyncRelativeRetryInvalidHeaderHeadersInner BeginPostAsyncRelativeRetryInvalidHeader(ProductInner product = default(ProductInner))
        {
            return BeginPostAsyncRelativeRetryInvalidHeaderAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPostAsyncRelativeRetryInvalidHeaderHeadersInner> BeginPostAsyncRelativeRetryInvalidHeaderAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPostAsyncRelativeRetryInvalidHeaderAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPostAsyncRelativeRetryInvalidJsonPollingHeadersInner BeginPostAsyncRelativeRetryInvalidJsonPolling(ProductInner product = default(ProductInner))
        {
            return BeginPostAsyncRelativeRetryInvalidJsonPollingAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPostAsyncRelativeRetryInvalidJsonPollingHeadersInner> BeginPostAsyncRelativeRetryInvalidJsonPollingAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPostAsyncRelativeRetryInvalidJsonPollingAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

    }
}
