// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.Azure.Fluent.AcceptanceTestsLro
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// LROSADsOperations operations.
    /// </summary>
    public partial interface ILROSADsOperations
    {
        ILROSADsOperationsWithHttpMessages WithHttpMessages();

        /// <summary>
        /// Long running put request, service returns a 400 to the initial request
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        ProductInner PutNonRetry400(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running put request, service returns a 400 to the initial request
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ProductInner> PutNonRetry400Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        ProductInner PutNonRetry201Creating400(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ProductInner> PutNonRetry201Creating400Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        ProductInner PutNonRetry201Creating400InvalidJson(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ProductInner> PutNonRetry201Creating400InvalidJsonAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the endpoint indicated in
        /// the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        ProductInner PutAsyncRelativeRetry400(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the endpoint indicated in
        /// the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ProductInner> PutAsyncRelativeRetry400Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 400 with an error body
        /// </summary>
        LROSADsDeleteNonRetry400HeadersInner DeleteNonRetry400();

        /// <summary>
        /// Long running delete request, service returns a 400 with an error body
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDeleteNonRetry400HeadersInner> DeleteNonRetry400Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 with a location header
        /// </summary>
        LROSADsDelete202NonRetry400HeadersInner Delete202NonRetry400();

        /// <summary>
        /// Long running delete request, service returns a 202 with a location header
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDelete202NonRetry400HeadersInner> Delete202NonRetry400Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        LROSADsDeleteAsyncRelativeRetry400HeadersInner DeleteAsyncRelativeRetry400();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDeleteAsyncRelativeRetry400HeadersInner> DeleteAsyncRelativeRetry400Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 400 with no error body
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPostNonRetry400HeadersInner PostNonRetry400(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running post request, service returns a 400 with no error body
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPostNonRetry400HeadersInner> PostNonRetry400Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 with a location header
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPost202NonRetry400HeadersInner Post202NonRetry400(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running post request, service returns a 202 with a location header
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPost202NonRetry400HeadersInner> Post202NonRetry400Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPostAsyncRelativeRetry400HeadersInner PostAsyncRelativeRetry400(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPostAsyncRelativeRetry400HeadersInner> PostAsyncRelativeRetry400Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 201 to the initial request with no payload
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        ProductInner PutError201NoProvisioningStatePayload(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request with no payload
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ProductInner> PutError201NoProvisioningStatePayloadAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        ProductInner PutAsyncRelativeRetryNoStatus(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ProductInner> PutAsyncRelativeRetryNoStatusAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        ProductInner PutAsyncRelativeRetryNoStatusPayload(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ProductInner> PutAsyncRelativeRetryNoStatusPayloadAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 204 to the initial request, indicating success.
        /// </summary>
        void Delete204Succeeded();

        /// <summary>
        /// Long running delete request, service returns a 204 to the initial request, indicating success.
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task Delete204SucceededAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        LROSADsDeleteAsyncRelativeRetryNoStatusHeadersInner DeleteAsyncRelativeRetryNoStatus();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDeleteAsyncRelativeRetryNoStatusHeadersInner> DeleteAsyncRelativeRetryNoStatusAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, without a location header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPost202NoLocationHeadersInner Post202NoLocation(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, without a location header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPost202NoLocationHeadersInner> Post202NoLocationAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPostAsyncRelativeRetryNoPayloadHeadersInner PostAsyncRelativeRetryNoPayload(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPostAsyncRelativeRetryNoPayloadHeadersInner> PostAsyncRelativeRetryNoPayloadAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that is not a valid json
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        ProductInner Put200InvalidJson(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that is not a valid json
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ProductInner> Put200InvalidJsonAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        ProductInner PutAsyncRelativeRetryInvalidHeader(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ProductInner> PutAsyncRelativeRetryInvalidHeaderAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        ProductInner PutAsyncRelativeRetryInvalidJsonPolling(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ProductInner> PutAsyncRelativeRetryInvalidJsonPollingAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request receing a reponse with an invalid
        /// 'Location' and 'Retry-After' headers
        /// </summary>
        LROSADsDelete202RetryInvalidHeaderHeadersInner Delete202RetryInvalidHeader();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request receing a reponse with an invalid
        /// 'Location' and 'Retry-After' headers
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDelete202RetryInvalidHeaderHeadersInner> Delete202RetryInvalidHeaderAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. The endpoint indicated in the
        /// Azure-AsyncOperation header is invalid
        /// </summary>
        LROSADsDeleteAsyncRelativeRetryInvalidHeaderHeadersInner DeleteAsyncRelativeRetryInvalidHeader();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. The endpoint indicated in the
        /// Azure-AsyncOperation header is invalid
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDeleteAsyncRelativeRetryInvalidHeaderHeadersInner> DeleteAsyncRelativeRetryInvalidHeaderAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        LROSADsDeleteAsyncRelativeRetryInvalidJsonPollingHeadersInner DeleteAsyncRelativeRetryInvalidJsonPolling();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDeleteAsyncRelativeRetryInvalidJsonPollingHeadersInner> DeleteAsyncRelativeRetryInvalidJsonPollingAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with invalid 'Location' and 'Retry-After'
        /// headers.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPost202RetryInvalidHeaderHeadersInner Post202RetryInvalidHeader(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with invalid 'Location' and 'Retry-After'
        /// headers.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPost202RetryInvalidHeaderHeadersInner> Post202RetryInvalidHeaderAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPostAsyncRelativeRetryInvalidHeaderHeadersInner PostAsyncRelativeRetryInvalidHeader(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPostAsyncRelativeRetryInvalidHeaderHeadersInner> PostAsyncRelativeRetryInvalidHeaderAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPostAsyncRelativeRetryInvalidJsonPollingHeadersInner PostAsyncRelativeRetryInvalidJsonPolling(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPostAsyncRelativeRetryInvalidJsonPollingHeadersInner> PostAsyncRelativeRetryInvalidJsonPollingAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 400 to the initial request
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        ProductInner BeginPutNonRetry400(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running put request, service returns a 400 to the initial request
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ProductInner> BeginPutNonRetry400Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        ProductInner BeginPutNonRetry201Creating400(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ProductInner> BeginPutNonRetry201Creating400Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        ProductInner BeginPutNonRetry201Creating400InvalidJson(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ProductInner> BeginPutNonRetry201Creating400InvalidJsonAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the endpoint indicated in
        /// the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        ProductInner BeginPutAsyncRelativeRetry400(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the endpoint indicated in
        /// the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ProductInner> BeginPutAsyncRelativeRetry400Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 400 with an error body
        /// </summary>
        LROSADsDeleteNonRetry400HeadersInner BeginDeleteNonRetry400();

        /// <summary>
        /// Long running delete request, service returns a 400 with an error body
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDeleteNonRetry400HeadersInner> BeginDeleteNonRetry400Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 with a location header
        /// </summary>
        LROSADsDelete202NonRetry400HeadersInner BeginDelete202NonRetry400();

        /// <summary>
        /// Long running delete request, service returns a 202 with a location header
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDelete202NonRetry400HeadersInner> BeginDelete202NonRetry400Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        LROSADsDeleteAsyncRelativeRetry400HeadersInner BeginDeleteAsyncRelativeRetry400();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDeleteAsyncRelativeRetry400HeadersInner> BeginDeleteAsyncRelativeRetry400Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 400 with no error body
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPostNonRetry400HeadersInner BeginPostNonRetry400(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running post request, service returns a 400 with no error body
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPostNonRetry400HeadersInner> BeginPostNonRetry400Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 with a location header
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPost202NonRetry400HeadersInner BeginPost202NonRetry400(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running post request, service returns a 202 with a location header
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPost202NonRetry400HeadersInner> BeginPost202NonRetry400Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPostAsyncRelativeRetry400HeadersInner BeginPostAsyncRelativeRetry400(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPostAsyncRelativeRetry400HeadersInner> BeginPostAsyncRelativeRetry400Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 201 to the initial request with no payload
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        ProductInner BeginPutError201NoProvisioningStatePayload(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request with no payload
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ProductInner> BeginPutError201NoProvisioningStatePayloadAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        ProductInner BeginPutAsyncRelativeRetryNoStatus(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ProductInner> BeginPutAsyncRelativeRetryNoStatusAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        ProductInner BeginPutAsyncRelativeRetryNoStatusPayload(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ProductInner> BeginPutAsyncRelativeRetryNoStatusPayloadAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 204 to the initial request, indicating success.
        /// </summary>
        void BeginDelete204Succeeded();

        /// <summary>
        /// Long running delete request, service returns a 204 to the initial request, indicating success.
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task BeginDelete204SucceededAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        LROSADsDeleteAsyncRelativeRetryNoStatusHeadersInner BeginDeleteAsyncRelativeRetryNoStatus();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDeleteAsyncRelativeRetryNoStatusHeadersInner> BeginDeleteAsyncRelativeRetryNoStatusAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, without a location header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPost202NoLocationHeadersInner BeginPost202NoLocation(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, without a location header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPost202NoLocationHeadersInner> BeginPost202NoLocationAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPostAsyncRelativeRetryNoPayloadHeadersInner BeginPostAsyncRelativeRetryNoPayload(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPostAsyncRelativeRetryNoPayloadHeadersInner> BeginPostAsyncRelativeRetryNoPayloadAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that is not a valid json
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        ProductInner BeginPut200InvalidJson(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that is not a valid json
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ProductInner> BeginPut200InvalidJsonAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        ProductInner BeginPutAsyncRelativeRetryInvalidHeader(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ProductInner> BeginPutAsyncRelativeRetryInvalidHeaderAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        ProductInner BeginPutAsyncRelativeRetryInvalidJsonPolling(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ProductInner> BeginPutAsyncRelativeRetryInvalidJsonPollingAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request receing a reponse with an invalid
        /// 'Location' and 'Retry-After' headers
        /// </summary>
        LROSADsDelete202RetryInvalidHeaderHeadersInner BeginDelete202RetryInvalidHeader();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request receing a reponse with an invalid
        /// 'Location' and 'Retry-After' headers
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDelete202RetryInvalidHeaderHeadersInner> BeginDelete202RetryInvalidHeaderAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. The endpoint indicated in the
        /// Azure-AsyncOperation header is invalid
        /// </summary>
        LROSADsDeleteAsyncRelativeRetryInvalidHeaderHeadersInner BeginDeleteAsyncRelativeRetryInvalidHeader();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. The endpoint indicated in the
        /// Azure-AsyncOperation header is invalid
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDeleteAsyncRelativeRetryInvalidHeaderHeadersInner> BeginDeleteAsyncRelativeRetryInvalidHeaderAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        LROSADsDeleteAsyncRelativeRetryInvalidJsonPollingHeadersInner BeginDeleteAsyncRelativeRetryInvalidJsonPolling();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDeleteAsyncRelativeRetryInvalidJsonPollingHeadersInner> BeginDeleteAsyncRelativeRetryInvalidJsonPollingAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with invalid 'Location' and 'Retry-After'
        /// headers.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPost202RetryInvalidHeaderHeadersInner BeginPost202RetryInvalidHeader(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with invalid 'Location' and 'Retry-After'
        /// headers.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPost202RetryInvalidHeaderHeadersInner> BeginPost202RetryInvalidHeaderAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPostAsyncRelativeRetryInvalidHeaderHeadersInner BeginPostAsyncRelativeRetryInvalidHeader(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPostAsyncRelativeRetryInvalidHeaderHeadersInner> BeginPostAsyncRelativeRetryInvalidHeaderAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPostAsyncRelativeRetryInvalidJsonPollingHeadersInner BeginPostAsyncRelativeRetryInvalidJsonPolling(ProductInner product = default(ProductInner));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPostAsyncRelativeRetryInvalidJsonPollingHeadersInner> BeginPostAsyncRelativeRetryInvalidJsonPollingAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken));
    }
}
