// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.Azure.Fluent.AcceptanceTestsLro
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// LROsOperations operations.
    /// </summary>
    public partial class LROsOperations : ILROsOperations
    {
        /// <summary>
        /// Initializes a new instance of the LROsOperations class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public LROsOperations(ILROsOperationsWithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private ILROsOperationsWithHttpMessages OperationsWithHttpMessages { get; set; }

        public ILROsOperationsWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Succeeded’.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner Put200Succeeded(ProductInner product = default(ProductInner))
        {
            return Put200SucceededAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Succeeded’.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> Put200SucceededAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Put200SucceededAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that does not contain
        /// ProvisioningState=’Succeeded’.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner Put200SucceededNoState(ProductInner product = default(ProductInner))
        {
            return Put200SucceededNoStateAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that does not contain
        /// ProvisioningState=’Succeeded’.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> Put200SucceededNoStateAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Put200SucceededNoStateAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 202 to the initial request, with a location header that points to a
        /// polling URL that returns a 200 and an entity that doesn't contains ProvisioningState
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner Put202Retry200(ProductInner product = default(ProductInner))
        {
            return Put202Retry200Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 202 to the initial request, with a location header that points to a
        /// polling URL that returns a 200 and an entity that doesn't contains ProvisioningState
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> Put202Retry200Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Put202Retry200Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner Put201CreatingSucceeded200(ProductInner product = default(ProductInner))
        {
            return Put201CreatingSucceeded200Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> Put201CreatingSucceeded200Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Put201CreatingSucceeded200Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner Put200UpdatingSucceeded204(ProductInner product = default(ProductInner))
        {
            return Put200UpdatingSucceeded204Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> Put200UpdatingSucceeded204Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Put200UpdatingSucceeded204Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Failed’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner Put201CreatingFailed200(ProductInner product = default(ProductInner))
        {
            return Put201CreatingFailed200Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Failed’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> Put201CreatingFailed200Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Put201CreatingFailed200Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Canceled’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner Put200Acceptedcanceled200(ProductInner product = default(ProductInner))
        {
            return Put200Acceptedcanceled200Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Canceled’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> Put200Acceptedcanceled200Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Put200Acceptedcanceled200Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to
        /// operation status do not contain location header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner PutNoHeaderInRetry(ProductInner product = default(ProductInner))
        {
            return PutNoHeaderInRetryAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to
        /// operation status do not contain location header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> PutNoHeaderInRetryAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutNoHeaderInRetryAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner PutAsyncRetrySucceeded(ProductInner product = default(ProductInner))
        {
            return PutAsyncRetrySucceededAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> PutAsyncRetrySucceededAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutAsyncRetrySucceededAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner PutAsyncNoRetrySucceeded(ProductInner product = default(ProductInner))
        {
            return PutAsyncNoRetrySucceededAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> PutAsyncNoRetrySucceededAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutAsyncNoRetrySucceededAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner PutAsyncRetryFailed(ProductInner product = default(ProductInner))
        {
            return PutAsyncRetryFailedAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> PutAsyncRetryFailedAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutAsyncRetryFailedAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner PutAsyncNoRetrycanceled(ProductInner product = default(ProductInner))
        {
            return PutAsyncNoRetrycanceledAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> PutAsyncNoRetrycanceledAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutAsyncNoRetrycanceledAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent
        /// calls to operation status do not contain Azure-AsyncOperation header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner PutAsyncNoHeaderInRetry(ProductInner product = default(ProductInner))
        {
            return PutAsyncNoHeaderInRetryAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent
        /// calls to operation status do not contain Azure-AsyncOperation header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> PutAsyncNoHeaderInRetryAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutAsyncNoHeaderInRetryAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request with non resource.
        /// </summary>
        /// <param name='sku'>
        /// sku to put
        /// </param>
        public SkuInner PutNonResource(SkuInner sku = default(SkuInner))
        {
            return PutNonResourceAsync(sku).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request with non resource.
        /// </summary>
        /// <param name='sku'>
        /// sku to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<SkuInner> PutNonResourceAsync(SkuInner sku = default(SkuInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutNonResourceAsync(sku, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request with non resource.
        /// </summary>
        /// <param name='sku'>
        /// Sku to put
        /// </param>
        public SkuInner PutAsyncNonResource(SkuInner sku = default(SkuInner))
        {
            return PutAsyncNonResourceAsync(sku).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request with non resource.
        /// </summary>
        /// <param name='sku'>
        /// Sku to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<SkuInner> PutAsyncNonResourceAsync(SkuInner sku = default(SkuInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutAsyncNonResourceAsync(sku, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request with sub resource.
        /// </summary>
        /// <param name='provisioningState'>
        /// </param>
        public SubProductInner PutSubResource(string provisioningState = default(string))
        {
            return PutSubResourceAsync(provisioningState).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request with sub resource.
        /// </summary>
        /// <param name='provisioningState'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<SubProductInner> PutSubResourceAsync(string provisioningState = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutSubResourceAsync(provisioningState, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request with sub resource.
        /// </summary>
        /// <param name='provisioningState'>
        /// </param>
        public SubProductInner PutAsyncSubResource(string provisioningState = default(string))
        {
            return PutAsyncSubResourceAsync(provisioningState).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request with sub resource.
        /// </summary>
        /// <param name='provisioningState'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<SubProductInner> PutAsyncSubResourceAsync(string provisioningState = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutAsyncSubResourceAsync(provisioningState, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        public ProductInner DeleteProvisioning202Accepted200Succeeded()
        {
            return DeleteProvisioning202Accepted200SucceededAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> DeleteProvisioning202Accepted200SucceededAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.DeleteProvisioning202Accepted200SucceededAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Failed’
        /// </summary>
        public ProductInner DeleteProvisioning202DeletingFailed200()
        {
            return DeleteProvisioning202DeletingFailed200Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Failed’
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> DeleteProvisioning202DeletingFailed200Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.DeleteProvisioning202DeletingFailed200Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Canceled’
        /// </summary>
        public ProductInner DeleteProvisioning202Deletingcanceled200()
        {
            return DeleteProvisioning202Deletingcanceled200Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Canceled’
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> DeleteProvisioning202Deletingcanceled200Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.DeleteProvisioning202Deletingcanceled200Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete succeeds and returns right away
        /// </summary>
        public void Delete204Succeeded()
        {
            Delete204SucceededAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete succeeds and returns right away
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task Delete204SucceededAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.Delete204SucceededAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Polls return this value until the last
        /// poll returns a ‘200’ with ProvisioningState=’Succeeded’
        /// </summary>
        public ProductInner Delete202Retry200()
        {
            return Delete202Retry200Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Polls return this value until the last
        /// poll returns a ‘200’ with ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> Delete202Retry200Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Delete202Retry200Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Polls return this value until the last
        /// poll returns a ‘200’ with ProvisioningState=’Succeeded’
        /// </summary>
        public ProductInner Delete202NoRetry204()
        {
            return Delete202NoRetry204Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Polls return this value until the last
        /// poll returns a ‘200’ with ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> Delete202NoRetry204Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Delete202NoRetry204Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a location header in the initial request. Subsequent calls to
        /// operation status do not contain location header.
        /// </summary>
        public LROsDeleteNoHeaderInRetryHeadersInner DeleteNoHeaderInRetry()
        {
            return DeleteNoHeaderInRetryAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a location header in the initial request. Subsequent calls to
        /// operation status do not contain location header.
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROsDeleteNoHeaderInRetryHeadersInner> DeleteNoHeaderInRetryAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.DeleteNoHeaderInRetryAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent
        /// calls to operation status do not contain Azure-AsyncOperation header.
        /// </summary>
        public LROsDeleteAsyncNoHeaderInRetryHeadersInner DeleteAsyncNoHeaderInRetry()
        {
            return DeleteAsyncNoHeaderInRetryAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent
        /// calls to operation status do not contain Azure-AsyncOperation header.
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROsDeleteAsyncNoHeaderInRetryHeadersInner> DeleteAsyncNoHeaderInRetryAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.DeleteAsyncNoHeaderInRetryAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        public LROsDeleteAsyncRetrySucceededHeadersInner DeleteAsyncRetrySucceeded()
        {
            return DeleteAsyncRetrySucceededAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROsDeleteAsyncRetrySucceededHeadersInner> DeleteAsyncRetrySucceededAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.DeleteAsyncRetrySucceededAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        public LROsDeleteAsyncNoRetrySucceededHeadersInner DeleteAsyncNoRetrySucceeded()
        {
            return DeleteAsyncNoRetrySucceededAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROsDeleteAsyncNoRetrySucceededHeadersInner> DeleteAsyncNoRetrySucceededAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.DeleteAsyncNoRetrySucceededAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        public LROsDeleteAsyncRetryFailedHeadersInner DeleteAsyncRetryFailed()
        {
            return DeleteAsyncRetryFailedAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROsDeleteAsyncRetryFailedHeadersInner> DeleteAsyncRetryFailedAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.DeleteAsyncRetryFailedAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        public LROsDeleteAsyncRetrycanceledHeadersInner DeleteAsyncRetrycanceled()
        {
            return DeleteAsyncRetrycanceledAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROsDeleteAsyncRetrycanceledHeadersInner> DeleteAsyncRetrycanceledAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.DeleteAsyncRetrycanceledAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200
        /// with a response body after success.
        /// </summary>
        public SkuInner Post200WithPayload()
        {
            return Post200WithPayloadAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200
        /// with a response body after success.
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<SkuInner> Post200WithPayloadAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Post200WithPayloadAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers,
        /// Polls return a 200 with a response body after success
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROsPost202Retry200HeadersInner Post202Retry200(ProductInner product = default(ProductInner))
        {
            return Post202Retry200Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers,
        /// Polls return a 200 with a response body after success
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROsPost202Retry200HeadersInner> Post202Retry200Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Post202Retry200Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with
        /// noresponse body after success
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner Post202NoRetry204(ProductInner product = default(ProductInner))
        {
            return Post202NoRetry204Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with
        /// noresponse body after success
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> Post202NoRetry204Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Post202NoRetry204Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner PostAsyncRetrySucceeded(ProductInner product = default(ProductInner))
        {
            return PostAsyncRetrySucceededAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> PostAsyncRetrySucceededAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PostAsyncRetrySucceededAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner PostAsyncNoRetrySucceeded(ProductInner product = default(ProductInner))
        {
            return PostAsyncNoRetrySucceededAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> PostAsyncNoRetrySucceededAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PostAsyncNoRetrySucceededAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROsPostAsyncRetryFailedHeadersInner PostAsyncRetryFailed(ProductInner product = default(ProductInner))
        {
            return PostAsyncRetryFailedAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROsPostAsyncRetryFailedHeadersInner> PostAsyncRetryFailedAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PostAsyncRetryFailedAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROsPostAsyncRetrycanceledHeadersInner PostAsyncRetrycanceled(ProductInner product = default(ProductInner))
        {
            return PostAsyncRetrycanceledAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROsPostAsyncRetrycanceledHeadersInner> PostAsyncRetrycanceledAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PostAsyncRetrycanceledAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Succeeded’.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner BeginPut200Succeeded(ProductInner product = default(ProductInner))
        {
            return BeginPut200SucceededAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Succeeded’.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginPut200SucceededAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPut200SucceededAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that does not contain
        /// ProvisioningState=’Succeeded’.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner BeginPut200SucceededNoState(ProductInner product = default(ProductInner))
        {
            return BeginPut200SucceededNoStateAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that does not contain
        /// ProvisioningState=’Succeeded’.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginPut200SucceededNoStateAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPut200SucceededNoStateAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 202 to the initial request, with a location header that points to a
        /// polling URL that returns a 200 and an entity that doesn't contains ProvisioningState
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner BeginPut202Retry200(ProductInner product = default(ProductInner))
        {
            return BeginPut202Retry200Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 202 to the initial request, with a location header that points to a
        /// polling URL that returns a 200 and an entity that doesn't contains ProvisioningState
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginPut202Retry200Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPut202Retry200Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner BeginPut201CreatingSucceeded200(ProductInner product = default(ProductInner))
        {
            return BeginPut201CreatingSucceeded200Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginPut201CreatingSucceeded200Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPut201CreatingSucceeded200Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner BeginPut200UpdatingSucceeded204(ProductInner product = default(ProductInner))
        {
            return BeginPut200UpdatingSucceeded204Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginPut200UpdatingSucceeded204Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPut200UpdatingSucceeded204Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Failed’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner BeginPut201CreatingFailed200(ProductInner product = default(ProductInner))
        {
            return BeginPut201CreatingFailed200Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Failed’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginPut201CreatingFailed200Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPut201CreatingFailed200Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Canceled’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner BeginPut200Acceptedcanceled200(ProductInner product = default(ProductInner))
        {
            return BeginPut200Acceptedcanceled200Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Canceled’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginPut200Acceptedcanceled200Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPut200Acceptedcanceled200Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to
        /// operation status do not contain location header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner BeginPutNoHeaderInRetry(ProductInner product = default(ProductInner))
        {
            return BeginPutNoHeaderInRetryAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to
        /// operation status do not contain location header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginPutNoHeaderInRetryAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutNoHeaderInRetryAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner BeginPutAsyncRetrySucceeded(ProductInner product = default(ProductInner))
        {
            return BeginPutAsyncRetrySucceededAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginPutAsyncRetrySucceededAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutAsyncRetrySucceededAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner BeginPutAsyncNoRetrySucceeded(ProductInner product = default(ProductInner))
        {
            return BeginPutAsyncNoRetrySucceededAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginPutAsyncNoRetrySucceededAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutAsyncNoRetrySucceededAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner BeginPutAsyncRetryFailed(ProductInner product = default(ProductInner))
        {
            return BeginPutAsyncRetryFailedAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginPutAsyncRetryFailedAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutAsyncRetryFailedAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner BeginPutAsyncNoRetrycanceled(ProductInner product = default(ProductInner))
        {
            return BeginPutAsyncNoRetrycanceledAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginPutAsyncNoRetrycanceledAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutAsyncNoRetrycanceledAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent
        /// calls to operation status do not contain Azure-AsyncOperation header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner BeginPutAsyncNoHeaderInRetry(ProductInner product = default(ProductInner))
        {
            return BeginPutAsyncNoHeaderInRetryAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent
        /// calls to operation status do not contain Azure-AsyncOperation header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginPutAsyncNoHeaderInRetryAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutAsyncNoHeaderInRetryAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request with non resource.
        /// </summary>
        /// <param name='sku'>
        /// sku to put
        /// </param>
        public SkuInner BeginPutNonResource(SkuInner sku = default(SkuInner))
        {
            return BeginPutNonResourceAsync(sku).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request with non resource.
        /// </summary>
        /// <param name='sku'>
        /// sku to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<SkuInner> BeginPutNonResourceAsync(SkuInner sku = default(SkuInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutNonResourceAsync(sku, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request with non resource.
        /// </summary>
        /// <param name='sku'>
        /// Sku to put
        /// </param>
        public SkuInner BeginPutAsyncNonResource(SkuInner sku = default(SkuInner))
        {
            return BeginPutAsyncNonResourceAsync(sku).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request with non resource.
        /// </summary>
        /// <param name='sku'>
        /// Sku to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<SkuInner> BeginPutAsyncNonResourceAsync(SkuInner sku = default(SkuInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutAsyncNonResourceAsync(sku, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request with sub resource.
        /// </summary>
        /// <param name='provisioningState'>
        /// </param>
        public SubProductInner BeginPutSubResource(string provisioningState = default(string))
        {
            return BeginPutSubResourceAsync(provisioningState).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request with sub resource.
        /// </summary>
        /// <param name='provisioningState'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<SubProductInner> BeginPutSubResourceAsync(string provisioningState = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutSubResourceAsync(provisioningState, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request with sub resource.
        /// </summary>
        /// <param name='provisioningState'>
        /// </param>
        public SubProductInner BeginPutAsyncSubResource(string provisioningState = default(string))
        {
            return BeginPutAsyncSubResourceAsync(provisioningState).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request with sub resource.
        /// </summary>
        /// <param name='provisioningState'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<SubProductInner> BeginPutAsyncSubResourceAsync(string provisioningState = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutAsyncSubResourceAsync(provisioningState, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        public ProductInner BeginDeleteProvisioning202Accepted200Succeeded()
        {
            return BeginDeleteProvisioning202Accepted200SucceededAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginDeleteProvisioning202Accepted200SucceededAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDeleteProvisioning202Accepted200SucceededAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Failed’
        /// </summary>
        public ProductInner BeginDeleteProvisioning202DeletingFailed200()
        {
            return BeginDeleteProvisioning202DeletingFailed200Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Failed’
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginDeleteProvisioning202DeletingFailed200Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDeleteProvisioning202DeletingFailed200Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Canceled’
        /// </summary>
        public ProductInner BeginDeleteProvisioning202Deletingcanceled200()
        {
            return BeginDeleteProvisioning202Deletingcanceled200Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Canceled’
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginDeleteProvisioning202Deletingcanceled200Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDeleteProvisioning202Deletingcanceled200Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete succeeds and returns right away
        /// </summary>
        public void BeginDelete204Succeeded()
        {
            BeginDelete204SucceededAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete succeeds and returns right away
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task BeginDelete204SucceededAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.BeginDelete204SucceededAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Polls return this value until the last
        /// poll returns a ‘200’ with ProvisioningState=’Succeeded’
        /// </summary>
        public ProductInner BeginDelete202Retry200()
        {
            return BeginDelete202Retry200Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Polls return this value until the last
        /// poll returns a ‘200’ with ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginDelete202Retry200Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDelete202Retry200Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Polls return this value until the last
        /// poll returns a ‘200’ with ProvisioningState=’Succeeded’
        /// </summary>
        public ProductInner BeginDelete202NoRetry204()
        {
            return BeginDelete202NoRetry204Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Polls return this value until the last
        /// poll returns a ‘200’ with ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginDelete202NoRetry204Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDelete202NoRetry204Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a location header in the initial request. Subsequent calls to
        /// operation status do not contain location header.
        /// </summary>
        public LROsDeleteNoHeaderInRetryHeadersInner BeginDeleteNoHeaderInRetry()
        {
            return BeginDeleteNoHeaderInRetryAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a location header in the initial request. Subsequent calls to
        /// operation status do not contain location header.
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROsDeleteNoHeaderInRetryHeadersInner> BeginDeleteNoHeaderInRetryAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDeleteNoHeaderInRetryAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent
        /// calls to operation status do not contain Azure-AsyncOperation header.
        /// </summary>
        public LROsDeleteAsyncNoHeaderInRetryHeadersInner BeginDeleteAsyncNoHeaderInRetry()
        {
            return BeginDeleteAsyncNoHeaderInRetryAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent
        /// calls to operation status do not contain Azure-AsyncOperation header.
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROsDeleteAsyncNoHeaderInRetryHeadersInner> BeginDeleteAsyncNoHeaderInRetryAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDeleteAsyncNoHeaderInRetryAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        public LROsDeleteAsyncRetrySucceededHeadersInner BeginDeleteAsyncRetrySucceeded()
        {
            return BeginDeleteAsyncRetrySucceededAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROsDeleteAsyncRetrySucceededHeadersInner> BeginDeleteAsyncRetrySucceededAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDeleteAsyncRetrySucceededAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        public LROsDeleteAsyncNoRetrySucceededHeadersInner BeginDeleteAsyncNoRetrySucceeded()
        {
            return BeginDeleteAsyncNoRetrySucceededAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROsDeleteAsyncNoRetrySucceededHeadersInner> BeginDeleteAsyncNoRetrySucceededAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDeleteAsyncNoRetrySucceededAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        public LROsDeleteAsyncRetryFailedHeadersInner BeginDeleteAsyncRetryFailed()
        {
            return BeginDeleteAsyncRetryFailedAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROsDeleteAsyncRetryFailedHeadersInner> BeginDeleteAsyncRetryFailedAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDeleteAsyncRetryFailedAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        public LROsDeleteAsyncRetrycanceledHeadersInner BeginDeleteAsyncRetrycanceled()
        {
            return BeginDeleteAsyncRetrycanceledAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROsDeleteAsyncRetrycanceledHeadersInner> BeginDeleteAsyncRetrycanceledAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDeleteAsyncRetrycanceledAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200
        /// with a response body after success.
        /// </summary>
        public SkuInner BeginPost200WithPayload()
        {
            return BeginPost200WithPayloadAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200
        /// with a response body after success.
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<SkuInner> BeginPost200WithPayloadAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPost200WithPayloadAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers,
        /// Polls return a 200 with a response body after success
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROsPost202Retry200HeadersInner BeginPost202Retry200(ProductInner product = default(ProductInner))
        {
            return BeginPost202Retry200Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers,
        /// Polls return a 200 with a response body after success
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROsPost202Retry200HeadersInner> BeginPost202Retry200Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPost202Retry200Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with
        /// noresponse body after success
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner BeginPost202NoRetry204(ProductInner product = default(ProductInner))
        {
            return BeginPost202NoRetry204Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with
        /// noresponse body after success
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginPost202NoRetry204Async(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPost202NoRetry204Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner BeginPostAsyncRetrySucceeded(ProductInner product = default(ProductInner))
        {
            return BeginPostAsyncRetrySucceededAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginPostAsyncRetrySucceededAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPostAsyncRetrySucceededAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public ProductInner BeginPostAsyncNoRetrySucceeded(ProductInner product = default(ProductInner))
        {
            return BeginPostAsyncNoRetrySucceededAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<ProductInner> BeginPostAsyncNoRetrySucceededAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPostAsyncNoRetrySucceededAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROsPostAsyncRetryFailedHeadersInner BeginPostAsyncRetryFailed(ProductInner product = default(ProductInner))
        {
            return BeginPostAsyncRetryFailedAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROsPostAsyncRetryFailedHeadersInner> BeginPostAsyncRetryFailedAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPostAsyncRetryFailedAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROsPostAsyncRetrycanceledHeadersInner BeginPostAsyncRetrycanceled(ProductInner product = default(ProductInner))
        {
            return BeginPostAsyncRetrycanceledAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROsPostAsyncRetrycanceledHeadersInner> BeginPostAsyncRetrycanceledAsync(ProductInner product = default(ProductInner), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPostAsyncRetrycanceledAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

    }
}
