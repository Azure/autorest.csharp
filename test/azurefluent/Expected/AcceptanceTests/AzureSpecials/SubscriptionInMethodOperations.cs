// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.Azure.Fluent.AcceptanceTestsAzureSpecials
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// SubscriptionInMethodOperations operations.
    /// </summary>
    public partial class SubscriptionInMethodOperations : ISubscriptionInMethodOperations
    {
        /// <summary>
        /// Initializes a new instance of the SubscriptionInMethodOperations class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public SubscriptionInMethodOperations(ISubscriptionInMethodOperationsWithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private ISubscriptionInMethodOperationsWithHttpMessages OperationsWithHttpMessages { get; set; }

        public ISubscriptionInMethodOperationsWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// POST method with subscriptionId modeled in the method.  pass in subscription id = '1234-5678-9012-3456' to succeed
        /// </summary>
        /// <param name='subscriptionId'>
        /// This should appear as a method parameter, use value '1234-5678-9012-3456'
        /// </param>
        public void PostMethodLocalValid(string subscriptionId)
        {
            PostMethodLocalValidAsync(subscriptionId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// POST method with subscriptionId modeled in the method.  pass in subscription id = '1234-5678-9012-3456' to succeed
        /// </summary>
        /// <param name='subscriptionId'>
        /// This should appear as a method parameter, use value '1234-5678-9012-3456'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PostMethodLocalValidAsync(string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PostMethodLocalValidAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// POST method with subscriptionId modeled in the method.  pass in subscription id = null, client-side validation
        /// should prevent you from making this call
        /// </summary>
        /// <param name='subscriptionId'>
        /// This should appear as a method parameter, use value null, client-side validation should prvenet the call
        /// </param>
        public void PostMethodLocalNull(string subscriptionId)
        {
            PostMethodLocalNullAsync(subscriptionId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// POST method with subscriptionId modeled in the method.  pass in subscription id = null, client-side validation
        /// should prevent you from making this call
        /// </summary>
        /// <param name='subscriptionId'>
        /// This should appear as a method parameter, use value null, client-side validation should prvenet the call
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PostMethodLocalNullAsync(string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PostMethodLocalNullAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// POST method with subscriptionId modeled in the method.  pass in subscription id = '1234-5678-9012-3456' to succeed
        /// </summary>
        /// <param name='subscriptionId'>
        /// Should appear as a method parameter -use value '1234-5678-9012-3456'
        /// </param>
        public void PostPathLocalValid(string subscriptionId)
        {
            PostPathLocalValidAsync(subscriptionId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// POST method with subscriptionId modeled in the method.  pass in subscription id = '1234-5678-9012-3456' to succeed
        /// </summary>
        /// <param name='subscriptionId'>
        /// Should appear as a method parameter -use value '1234-5678-9012-3456'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PostPathLocalValidAsync(string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PostPathLocalValidAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// POST method with subscriptionId modeled in the method.  pass in subscription id = '1234-5678-9012-3456' to succeed
        /// </summary>
        /// <param name='subscriptionId'>
        /// The subscriptionId, which appears in the path, the value is always '1234-5678-9012-3456'
        /// </param>
        public void PostSwaggerLocalValid(string subscriptionId)
        {
            PostSwaggerLocalValidAsync(subscriptionId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// POST method with subscriptionId modeled in the method.  pass in subscription id = '1234-5678-9012-3456' to succeed
        /// </summary>
        /// <param name='subscriptionId'>
        /// The subscriptionId, which appears in the path, the value is always '1234-5678-9012-3456'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task PostSwaggerLocalValidAsync(string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.PostSwaggerLocalValidAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

    }
}
