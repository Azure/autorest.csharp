// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace body_formdata_urlencoded.Models
{
    /// <summary> Can take a value of dog, or cat, or fish. </summary>
    public readonly partial struct PostContentSchemaPetType : IEquatable<PostContentSchemaPetType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="PostContentSchemaPetType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PostContentSchemaPetType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DogValue = "dog";
        private const string CatValue = "cat";
        private const string FishValue = "fish";

        /// <summary> dog. </summary>
        public static PostContentSchemaPetType Dog { get; } = new PostContentSchemaPetType(DogValue);
        /// <summary> cat. </summary>
        public static PostContentSchemaPetType Cat { get; } = new PostContentSchemaPetType(CatValue);
        /// <summary> fish. </summary>
        public static PostContentSchemaPetType Fish { get; } = new PostContentSchemaPetType(FishValue);
        /// <summary> Determines if two <see cref="PostContentSchemaPetType"/> values are the same. </summary>
        public static bool operator ==(PostContentSchemaPetType left, PostContentSchemaPetType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PostContentSchemaPetType"/> values are not the same. </summary>
        public static bool operator !=(PostContentSchemaPetType left, PostContentSchemaPetType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PostContentSchemaPetType"/>. </summary>
        public static implicit operator PostContentSchemaPetType(string value) => new PostContentSchemaPetType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PostContentSchemaPetType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PostContentSchemaPetType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
