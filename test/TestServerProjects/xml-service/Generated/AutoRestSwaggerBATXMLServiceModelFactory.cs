// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace xml_service.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class AutoRestSwaggerBATXMLServiceModelFactory
    {
        /// <summary> Initializes a new instance of ListContainersResponse. </summary>
        /// <param name="serviceEndpoint"> The ServiceEndpoint. </param>
        /// <param name="prefix"> The Prefix. </param>
        /// <param name="marker"> The Marker. </param>
        /// <param name="maxResults"> The MaxResults. </param>
        /// <param name="containers"> The Containers. </param>
        /// <param name="nextMarker"> The NextMarker. </param>
        /// <returns> A new <see cref="Models.ListContainersResponse"/> instance for mocking. </returns>
        public static ListContainersResponse ListContainersResponse(string serviceEndpoint = null, string prefix = null, string marker = null, int maxResults = default, IEnumerable<Container> containers = null, string nextMarker = null)
        {
            containers ??= new List<Container>();

            return new ListContainersResponse(serviceEndpoint, prefix, marker, maxResults, containers?.ToList(), nextMarker);
        }

        /// <summary> Initializes a new instance of Container. </summary>
        /// <param name="name"> The Name. </param>
        /// <param name="properties"> Properties of a container. </param>
        /// <param name="metadata"> Dictionary of &lt;string&gt;. </param>
        /// <returns> A new <see cref="Models.Container"/> instance for mocking. </returns>
        public static Container Container(string name = null, ContainerProperties properties = null, IReadOnlyDictionary<string, string> metadata = null)
        {
            metadata ??= new Dictionary<string, string>();

            return new Container(name, properties, metadata);
        }

        /// <summary> Initializes a new instance of ContainerProperties. </summary>
        /// <param name="lastModified"> The LastModified. </param>
        /// <param name="etag"> The Etag. </param>
        /// <param name="leaseStatus"> The LeaseStatus. </param>
        /// <param name="leaseState"> The LeaseState. </param>
        /// <param name="leaseDuration"> The LeaseDuration. </param>
        /// <param name="publicAccess"> The PublicAccess. </param>
        /// <returns> A new <see cref="Models.ContainerProperties"/> instance for mocking. </returns>
        public static ContainerProperties ContainerProperties(DateTimeOffset lastModified = default, string etag = null, LeaseStatusType? leaseStatus = null, LeaseStateType? leaseState = null, LeaseDurationType? leaseDuration = null, PublicAccessType? publicAccess = null)
        {
            return new ContainerProperties(lastModified, etag, leaseStatus, leaseState, leaseDuration, publicAccess);
        }

        /// <summary> Initializes a new instance of ListBlobsResponse. </summary>
        /// <param name="serviceEndpoint"> The ServiceEndpoint. </param>
        /// <param name="containerName"> The ContainerName. </param>
        /// <param name="prefix"> The Prefix. </param>
        /// <param name="marker"> The Marker. </param>
        /// <param name="maxResults"> The MaxResults. </param>
        /// <param name="delimiter"> The Delimiter. </param>
        /// <param name="blobs"> The Blobs. </param>
        /// <param name="nextMarker"> The NextMarker. </param>
        /// <returns> A new <see cref="Models.ListBlobsResponse"/> instance for mocking. </returns>
        public static ListBlobsResponse ListBlobsResponse(string serviceEndpoint = null, string containerName = null, string prefix = null, string marker = null, int maxResults = default, string delimiter = null, Blobs blobs = null, string nextMarker = null)
        {
            return new ListBlobsResponse(serviceEndpoint, containerName, prefix, marker, maxResults, delimiter, blobs, nextMarker);
        }

        /// <summary> Initializes a new instance of Blobs. </summary>
        /// <param name="blobPrefix"> The BlobPrefix. </param>
        /// <param name="blob"> The Blob. </param>
        /// <returns> A new <see cref="Models.Blobs"/> instance for mocking. </returns>
        public static Blobs Blobs(IEnumerable<BlobPrefix> blobPrefix = null, IEnumerable<Blob> blob = null)
        {
            blobPrefix ??= new List<BlobPrefix>();
            blob ??= new List<Blob>();

            return new Blobs(blobPrefix?.ToList(), blob?.ToList());
        }

        /// <summary> Initializes a new instance of BlobPrefix. </summary>
        /// <param name="name"> The Name. </param>
        /// <returns> A new <see cref="Models.BlobPrefix"/> instance for mocking. </returns>
        public static BlobPrefix BlobPrefix(string name = null)
        {
            return new BlobPrefix(name);
        }

        /// <summary> Initializes a new instance of Blob. </summary>
        /// <param name="name"> The Name. </param>
        /// <param name="deleted"> The Deleted. </param>
        /// <param name="snapshot"> The Snapshot. </param>
        /// <param name="properties"> Properties of a blob. </param>
        /// <param name="metadata"> Dictionary of &lt;string&gt;. </param>
        /// <returns> A new <see cref="Models.Blob"/> instance for mocking. </returns>
        public static Blob Blob(string name = null, bool deleted = default, string snapshot = null, BlobProperties properties = null, IReadOnlyDictionary<string, string> metadata = null)
        {
            metadata ??= new Dictionary<string, string>();

            return new Blob(name, deleted, snapshot, properties, metadata);
        }

        /// <summary> Initializes a new instance of BlobProperties. </summary>
        /// <param name="lastModified"> The LastModified. </param>
        /// <param name="etag"> The Etag. </param>
        /// <param name="contentLength"> Size in bytes. </param>
        /// <param name="contentType"> The ContentType. </param>
        /// <param name="contentEncoding"> The ContentEncoding. </param>
        /// <param name="contentLanguage"> The ContentLanguage. </param>
        /// <param name="contentMD5"> The ContentMD5. </param>
        /// <param name="contentDisposition"> The ContentDisposition. </param>
        /// <param name="cacheControl"> The CacheControl. </param>
        /// <param name="blobSequenceNumber"> The BlobSequenceNumber. </param>
        /// <param name="blobType"> The BlobType. </param>
        /// <param name="leaseStatus"> The LeaseStatus. </param>
        /// <param name="leaseState"> The LeaseState. </param>
        /// <param name="leaseDuration"> The LeaseDuration. </param>
        /// <param name="copyId"> The CopyId. </param>
        /// <param name="copyStatus"> The CopyStatus. </param>
        /// <param name="copySource"> The CopySource. </param>
        /// <param name="copyProgress"> The CopyProgress. </param>
        /// <param name="copyCompletionTime"> The CopyCompletionTime. </param>
        /// <param name="copyStatusDescription"> The CopyStatusDescription. </param>
        /// <param name="serverEncrypted"> The ServerEncrypted. </param>
        /// <param name="incrementalCopy"> The IncrementalCopy. </param>
        /// <param name="destinationSnapshot"> The DestinationSnapshot. </param>
        /// <param name="deletedTime"> The DeletedTime. </param>
        /// <param name="remainingRetentionDays"> The RemainingRetentionDays. </param>
        /// <param name="accessTier"> The AccessTier. </param>
        /// <param name="accessTierInferred"> The AccessTierInferred. </param>
        /// <param name="archiveStatus"> The ArchiveStatus. </param>
        /// <returns> A new <see cref="Models.BlobProperties"/> instance for mocking. </returns>
        public static BlobProperties BlobProperties(DateTimeOffset lastModified = default, string etag = null, long? contentLength = null, string contentType = null, string contentEncoding = null, string contentLanguage = null, string contentMD5 = null, string contentDisposition = null, string cacheControl = null, int? blobSequenceNumber = null, BlobType? blobType = null, LeaseStatusType? leaseStatus = null, LeaseStateType? leaseState = null, LeaseDurationType? leaseDuration = null, string copyId = null, CopyStatusType? copyStatus = null, string copySource = null, string copyProgress = null, DateTimeOffset? copyCompletionTime = null, string copyStatusDescription = null, bool? serverEncrypted = null, bool? incrementalCopy = null, string destinationSnapshot = null, DateTimeOffset? deletedTime = null, int? remainingRetentionDays = null, AccessTier? accessTier = null, bool? accessTierInferred = null, ArchiveStatus? archiveStatus = null)
        {
            return new BlobProperties(lastModified, etag, contentLength, contentType, contentEncoding, contentLanguage, contentMD5, contentDisposition, cacheControl, blobSequenceNumber, blobType, leaseStatus, leaseState, leaseDuration, copyId, copyStatus, copySource, copyProgress, copyCompletionTime, copyStatusDescription, serverEncrypted, incrementalCopy, destinationSnapshot, deletedTime, remainingRetentionDays, accessTier, accessTierInferred, archiveStatus);
        }

        /// <summary> Initializes a new instance of JsonOutput. </summary>
        /// <param name="id"> The Id. </param>
        /// <returns> A new <see cref="Models.JsonOutput"/> instance for mocking. </returns>
        public static JsonOutput JsonOutput(int? id = null)
        {
            return new JsonOutput(id);
        }

        /// <summary> Initializes a new instance of ObjectWithXMsTextProperty. </summary>
        /// <param name="language"> Returned value should be &apos;english&apos;. </param>
        /// <param name="content"> Returned value should be &apos;I am text&apos;. </param>
        /// <returns> A new <see cref="Models.ObjectWithXMsTextProperty"/> instance for mocking. </returns>
        public static ObjectWithXMsTextProperty ObjectWithXMsTextProperty(string language = null, string content = null)
        {
            return new ObjectWithXMsTextProperty(language, content);
        }
    }
}
