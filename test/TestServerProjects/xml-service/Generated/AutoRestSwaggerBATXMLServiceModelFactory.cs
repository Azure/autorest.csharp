// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using xml_service.Models;

namespace xml_service
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class AutoRestSwaggerBATXMLServiceModelFactory
    {
        /// <summary> Initializes new instance of ListContainersResponse class. </summary>
        /// <param name="serviceEndpoint"> . </param>
        /// <param name="prefix"> . </param>
        /// <param name="marker"> . </param>
        /// <param name="maxResults"> . </param>
        /// <param name="containers"> . </param>
        /// <param name="nextMarker"> . </param>
        /// <returns> A new <see cref="Models.ListContainersResponse"/> instance for mocking. </returns>
        public static ListContainersResponse ListContainersResponse(string serviceEndpoint = default, string prefix = default, string marker = default, int maxResults = default, IReadOnlyList<Container> containers = default, string nextMarker = default)
        {
            containers ??= new List<Container>();
            return new ListContainersResponse(serviceEndpoint, prefix, marker, maxResults, containers, nextMarker);
        }

        /// <summary> Initializes new instance of Container class. </summary>
        /// <param name="name"> . </param>
        /// <param name="properties"> Properties of a container. </param>
        /// <param name="metadata"> Dictionary of &lt;string&gt;. </param>
        /// <returns> A new <see cref="Models.Container"/> instance for mocking. </returns>
        public static Container Container(string name = default, ContainerProperties properties = default, IReadOnlyDictionary<string, string> metadata = default)
        {
            metadata ??= new Dictionary<string, string>();
            return new Container(name, properties, metadata);
        }

        /// <summary> Initializes new instance of ContainerProperties class. </summary>
        /// <param name="lastModified"> . </param>
        /// <param name="etag"> . </param>
        /// <param name="leaseStatus"> . </param>
        /// <param name="leaseState"> . </param>
        /// <param name="leaseDuration"> . </param>
        /// <param name="publicAccess"> . </param>
        /// <returns> A new <see cref="Models.ContainerProperties"/> instance for mocking. </returns>
        public static ContainerProperties ContainerProperties(DateTimeOffset lastModified = default, string etag = default, LeaseStatusType? leaseStatus = default, LeaseStateType? leaseState = default, LeaseDurationType? leaseDuration = default, PublicAccessType? publicAccess = default)
        {
            return new ContainerProperties(lastModified, etag, leaseStatus, leaseState, leaseDuration, publicAccess);
        }

        /// <summary> Initializes new instance of ListBlobsResponse class. </summary>
        /// <param name="serviceEndpoint"> . </param>
        /// <param name="containerName"> . </param>
        /// <param name="prefix"> . </param>
        /// <param name="marker"> . </param>
        /// <param name="maxResults"> . </param>
        /// <param name="delimiter"> . </param>
        /// <param name="blobs"> . </param>
        /// <param name="nextMarker"> . </param>
        /// <returns> A new <see cref="Models.ListBlobsResponse"/> instance for mocking. </returns>
        public static ListBlobsResponse ListBlobsResponse(string serviceEndpoint = default, string containerName = default, string prefix = default, string marker = default, int maxResults = default, string delimiter = default, Blobs blobs = default, string nextMarker = default)
        {
            return new ListBlobsResponse(serviceEndpoint, containerName, prefix, marker, maxResults, delimiter, blobs, nextMarker);
        }

        /// <summary> Initializes new instance of Blobs class. </summary>
        /// <param name="blobPrefix"> . </param>
        /// <param name="blob"> . </param>
        /// <returns> A new <see cref="Models.Blobs"/> instance for mocking. </returns>
        public static Blobs Blobs(IReadOnlyList<BlobPrefix> blobPrefix = default, IReadOnlyList<Blob> blob = default)
        {
            blobPrefix ??= new List<BlobPrefix>();
            blob ??= new List<Blob>();
            return new Blobs(blobPrefix, blob);
        }

        /// <summary> Initializes new instance of BlobPrefix class. </summary>
        /// <param name="name"> . </param>
        /// <returns> A new <see cref="Models.BlobPrefix"/> instance for mocking. </returns>
        public static BlobPrefix BlobPrefix(string name = default)
        {
            return new BlobPrefix(name);
        }

        /// <summary> Initializes new instance of Blob class. </summary>
        /// <param name="name"> . </param>
        /// <param name="deleted"> . </param>
        /// <param name="snapshot"> . </param>
        /// <param name="properties"> Properties of a blob. </param>
        /// <param name="metadata"> Dictionary of &lt;string&gt;. </param>
        /// <returns> A new <see cref="Models.Blob"/> instance for mocking. </returns>
        public static Blob Blob(string name = default, bool deleted = default, string snapshot = default, BlobProperties properties = default, IReadOnlyDictionary<string, string> metadata = default)
        {
            metadata ??= new Dictionary<string, string>();
            return new Blob(name, deleted, snapshot, properties, metadata);
        }

        /// <summary> Initializes new instance of BlobProperties class. </summary>
        /// <param name="lastModified"> . </param>
        /// <param name="etag"> . </param>
        /// <param name="contentLength"> Size in bytes. </param>
        /// <param name="contentType"> . </param>
        /// <param name="contentEncoding"> . </param>
        /// <param name="contentLanguage"> . </param>
        /// <param name="contentMD5"> . </param>
        /// <param name="contentDisposition"> . </param>
        /// <param name="cacheControl"> . </param>
        /// <param name="blobSequenceNumber"> . </param>
        /// <param name="blobType"> . </param>
        /// <param name="leaseStatus"> . </param>
        /// <param name="leaseState"> . </param>
        /// <param name="leaseDuration"> . </param>
        /// <param name="copyId"> . </param>
        /// <param name="copyStatus"> . </param>
        /// <param name="copySource"> . </param>
        /// <param name="copyProgress"> . </param>
        /// <param name="copyCompletionTime"> . </param>
        /// <param name="copyStatusDescription"> . </param>
        /// <param name="serverEncrypted"> . </param>
        /// <param name="incrementalCopy"> . </param>
        /// <param name="destinationSnapshot"> . </param>
        /// <param name="deletedTime"> . </param>
        /// <param name="remainingRetentionDays"> . </param>
        /// <param name="accessTier"> . </param>
        /// <param name="accessTierInferred"> . </param>
        /// <param name="archiveStatus"> . </param>
        /// <returns> A new <see cref="Models.BlobProperties"/> instance for mocking. </returns>
        public static BlobProperties BlobProperties(DateTimeOffset lastModified = default, string etag = default, long? contentLength = default, string contentType = default, string contentEncoding = default, string contentLanguage = default, string contentMD5 = default, string contentDisposition = default, string cacheControl = default, int? blobSequenceNumber = default, BlobType? blobType = default, LeaseStatusType? leaseStatus = default, LeaseStateType? leaseState = default, LeaseDurationType? leaseDuration = default, string copyId = default, CopyStatusType? copyStatus = default, string copySource = default, string copyProgress = default, DateTimeOffset? copyCompletionTime = default, string copyStatusDescription = default, bool? serverEncrypted = default, bool? incrementalCopy = default, string destinationSnapshot = default, DateTimeOffset? deletedTime = default, int? remainingRetentionDays = default, AccessTier? accessTier = default, bool? accessTierInferred = default, ArchiveStatus? archiveStatus = default)
        {
            return new BlobProperties(lastModified, etag, contentLength, contentType, contentEncoding, contentLanguage, contentMD5, contentDisposition, cacheControl, blobSequenceNumber, blobType, leaseStatus, leaseState, leaseDuration, copyId, copyStatus, copySource, copyProgress, copyCompletionTime, copyStatusDescription, serverEncrypted, incrementalCopy, destinationSnapshot, deletedTime, remainingRetentionDays, accessTier, accessTierInferred, archiveStatus);
        }

        /// <summary> Initializes new instance of JsonOutput class. </summary>
        /// <param name="id"> . </param>
        /// <returns> A new <see cref="Models.JsonOutput"/> instance for mocking. </returns>
        public static JsonOutput JsonOutput(int? id = default)
        {
            return new JsonOutput(id);
        }

        /// <summary> Initializes new instance of ObjectWithXMsTextProperty class. </summary>
        /// <param name="language"> Returned value should be &apos;english&apos;. </param>
        /// <param name="content"> Returned value should be &apos;I am text&apos;. </param>
        /// <returns> A new <see cref="Models.ObjectWithXMsTextProperty"/> instance for mocking. </returns>
        public static ObjectWithXMsTextProperty ObjectWithXMsTextProperty(string language = default, string content = default)
        {
            return new ObjectWithXMsTextProperty(language, content);
        }
    }
}
