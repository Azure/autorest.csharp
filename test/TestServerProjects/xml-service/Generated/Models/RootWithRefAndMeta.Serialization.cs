// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace xml_service.Models
{
    public partial class RootWithRefAndMeta : IXmlSerializable, IPersistableModel<RootWithRefAndMeta>
    {
        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "RootWithRefAndMeta");
            if (Optional.IsDefined(RefToModel))
            {
                writer.WriteObjectValue(RefToModel, "XMLComplexTypeWithMeta");
            }
            if (Optional.IsDefined(Something))
            {
                writer.WriteStartElement("Something");
                writer.WriteValue(Something);
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        internal static RootWithRefAndMeta DeserializeRootWithRefAndMeta(XElement element, ModelReaderWriterOptions options = null)
        {
            ComplexTypeWithMeta refToModel = default;
            string something = default;
            if (element.Element("XMLComplexTypeWithMeta") is XElement xmlComplexTypeWithMetaElement)
            {
                refToModel = ComplexTypeWithMeta.DeserializeComplexTypeWithMeta(xmlComplexTypeWithMetaElement);
            }
            if (element.Element("Something") is XElement somethingElement)
            {
                something = (string)somethingElement;
            }
            return new RootWithRefAndMeta(refToModel, something, default);
        }

        BinaryData IPersistableModel<RootWithRefAndMeta>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RootWithRefAndMeta>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "X":
                    {
                        using MemoryStream stream = new MemoryStream();
                        using XmlWriter writer = XmlWriter.Create(stream);
                        ((IXmlSerializable)this).Write(writer, null);
                        writer.Flush();
                        if (stream.Position > int.MaxValue)
                        {
                            return BinaryData.FromStream(stream);
                        }
                        else
                        {
                            return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
                        }
                    }
                default:
                    throw new InvalidOperationException($"The model {nameof(RootWithRefAndMeta)} does not support '{options.Format}' format.");
            }
        }

        RootWithRefAndMeta IPersistableModel<RootWithRefAndMeta>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RootWithRefAndMeta>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "X":
                    return DeserializeRootWithRefAndMeta(XElement.Load(data.ToStream()), options);
                default:
                    throw new InvalidOperationException($"The model {nameof(RootWithRefAndMeta)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<RootWithRefAndMeta>.GetFormatFromOptions(ModelReaderWriterOptions options) => "X";
    }
}
