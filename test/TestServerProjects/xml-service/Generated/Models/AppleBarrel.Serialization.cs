// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace xml_service.Models
{
    public partial class AppleBarrel : IXmlSerializable, IPersistableModel<AppleBarrel>
    {
        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "AppleBarrel");
            if (Optional.IsCollectionDefined(GoodApples))
            {
                writer.WriteStartElement("GoodApples");
                foreach (var item in GoodApples)
                {
                    writer.WriteStartElement("Apple");
                    writer.WriteValue(item);
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            if (Optional.IsCollectionDefined(BadApples))
            {
                writer.WriteStartElement("BadApples");
                foreach (var item in BadApples)
                {
                    writer.WriteStartElement("Apple");
                    writer.WriteValue(item);
                    writer.WriteEndElement();
                }
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        internal static AppleBarrel DeserializeAppleBarrel(XElement element, ModelReaderWriterOptions options = null)
        {
            IList<string> goodApples = default;
            IList<string> badApples = default;
            if (element.Element("GoodApples") is XElement goodApplesElement)
            {
                var array = new List<string>();
                foreach (var e in goodApplesElement.Elements("Apple"))
                {
                    array.Add((string)e);
                }
                goodApples = array;
            }
            if (element.Element("BadApples") is XElement badApplesElement)
            {
                var array = new List<string>();
                foreach (var e in badApplesElement.Elements("Apple"))
                {
                    array.Add((string)e);
                }
                badApples = array;
            }
            return new AppleBarrel(goodApples, badApples, default);
        }

        BinaryData IPersistableModel<AppleBarrel>.Write(ModelReaderWriterOptions options)
        {
            bool implementsJson = this is IJsonModel<AppleBarrel>;
            bool isValid = options.Format == "J" && implementsJson || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {GetType().Name} does not support '{options.Format}' format.");
            }

            using MemoryStream stream = new MemoryStream();
            using XmlWriter writer = XmlWriter.Create(stream);
            ((IXmlSerializable)this).Write(writer, null);
            writer.Flush();
            if (stream.Position > int.MaxValue)
            {
                return BinaryData.FromStream(stream);
            }
            else
            {
                return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
            }
        }

        AppleBarrel IPersistableModel<AppleBarrel>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(AppleBarrel)} does not support '{options.Format}' format.");
            }

            return DeserializeAppleBarrel(XElement.Load(data.ToStream()), options);
        }

        string IPersistableModel<AppleBarrel>.GetWireFormat(ModelReaderWriterOptions options) => "X";
    }
}
