// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace xml_service.Models
{
    public partial class Slide : IXmlSerializable, IModel<Slide>
    {
        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "slide");
            if (Optional.IsDefined(Type))
            {
                writer.WriteStartAttribute("type");
                writer.WriteValue(Type);
                writer.WriteEndAttribute();
            }
            if (Optional.IsDefined(Title))
            {
                writer.WriteStartElement("title");
                writer.WriteValue(Title);
                writer.WriteEndElement();
            }
            if (Optional.IsCollectionDefined(Items))
            {
                foreach (var item in Items)
                {
                    writer.WriteStartElement("item");
                    writer.WriteValue(item);
                    writer.WriteEndElement();
                }
            }
            writer.WriteEndElement();
        }

        internal static Slide DeserializeSlide(XElement element, ModelReaderWriterOptions options = null)
        {
            string type = default;
            string title = default;
            IList<string> items = default;
            if (element.Attribute("type") is XAttribute typeAttribute)
            {
                type = (string)typeAttribute;
            }
            if (element.Element("title") is XElement titleElement)
            {
                title = (string)titleElement;
            }
            var array = new List<string>();
            foreach (var e in element.Elements("item"))
            {
                array.Add((string)e);
            }
            items = array;
            return new Slide(type, title, items, default);
        }

        BinaryData IModel<Slide>.Write(ModelReaderWriterOptions options)
        {
            bool implementsJson = this is IJsonModel<Slide>;
            bool isValid = options.Format == ModelReaderWriterFormat.Json && implementsJson || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {GetType().Name} does not support '{options.Format}' format.");
            }

            using MemoryStream stream = new MemoryStream();
            using XmlWriter writer = XmlWriter.Create(stream);
            ((IXmlSerializable)this).Write(writer, null);
            writer.Flush();
            if (stream.Position > int.MaxValue)
            {
                return BinaryData.FromStream(stream);
            }
            else
            {
                return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
            }
        }

        Slide IModel<Slide>.Read(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(Slide)} does not support '{options.Format}' format.");
            }

            return DeserializeSlide(XElement.Load(data.ToStream()), options);
        }

        ModelReaderWriterFormat IModel<Slide>.GetWireFormat(ModelReaderWriterOptions options) => ModelReaderWriterFormat.Xml;
    }
}
