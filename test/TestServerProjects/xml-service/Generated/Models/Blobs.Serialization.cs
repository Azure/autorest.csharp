// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;
using Azure.Core.Serialization;

namespace xml_service.Models
{
    public partial class Blobs : IXmlSerializable, IXmlModelSerializable
    {
        void IXmlModelSerializable.Serialize(XmlWriter writer, ModelSerializerOptions options) => ((IXmlSerializable)this).Write(writer, null, options);

        void IXmlSerializable.Write(XmlWriter writer, string nameHint, ModelSerializerOptions options)
        {
            writer.WriteStartElement("Blobs");
            if (Optional.IsCollectionDefined(BlobPrefix))
            {
                foreach (var item in BlobPrefix)
                {
                    writer.WriteObjectValue(item, "BlobPrefix", options);
                }
            }
            if (Optional.IsCollectionDefined(Blob))
            {
                foreach (var item in Blob)
                {
                    writer.WriteObjectValue(item, "Blob", options);
                }
            }
            writer.WriteEndElement();
        }

        object IModelSerializable.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            return DeserializeBlobs(XElement.Load(data.ToStream()), options);
        }

        internal static Blobs DeserializeBlobs(XElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.AzureServiceDefault;
            IReadOnlyList<BlobPrefix> blobPrefix = default;
            IReadOnlyList<Blob> blob = default;
            var array = new List<BlobPrefix>();
            foreach (var e in element.Elements("BlobPrefix"))
            {
                array.Add(Models.BlobPrefix.DeserializeBlobPrefix(e));
            }
            blobPrefix = array;
            var array0 = new List<Blob>();
            foreach (var e in element.Elements("Blob"))
            {
                array0.Add(Models.Blob.DeserializeBlob(e));
            }
            blob = array0;
            return new Blobs(blobPrefix, blob);
        }
    }
}
