// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace xml_service.Models
{
    public partial class Slideshow : IXmlSerializable, IModelSerializable<Slideshow>
    {
        private void Serialize(XmlWriter writer, string nameHint, ModelSerializerOptions options)
        {
            writer.WriteStartElement(nameHint ?? "slideshow");
            if (Optional.IsDefined(Title))
            {
                writer.WriteStartAttribute("title");
                writer.WriteValue(Title);
                writer.WriteEndAttribute();
            }
            if (Optional.IsDefined(Date))
            {
                writer.WriteStartAttribute("date");
                writer.WriteValue(Date);
                writer.WriteEndAttribute();
            }
            if (Optional.IsDefined(Author))
            {
                writer.WriteStartAttribute("author");
                writer.WriteValue(Author);
                writer.WriteEndAttribute();
            }
            if (Optional.IsCollectionDefined(Slides))
            {
                foreach (var item in Slides)
                {
                    writer.WriteObjectValue(item, "slide");
                }
            }
            writer.WriteEndElement();
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint) => Serialize(writer, nameHint, ModelSerializerOptions.DefaultWireOptions);

        internal static Slideshow DeserializeSlideshow(XElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;
            string title = default;
            string date = default;
            string author = default;
            IList<Slide> slides = default;
            if (element.Attribute("title") is XAttribute titleAttribute)
            {
                title = (string)titleAttribute;
            }
            if (element.Attribute("date") is XAttribute dateAttribute)
            {
                date = (string)dateAttribute;
            }
            if (element.Attribute("author") is XAttribute authorAttribute)
            {
                author = (string)authorAttribute;
            }
            var array = new List<Slide>();
            foreach (var e in element.Elements("slide"))
            {
                array.Add(Slide.DeserializeSlide(e));
            }
            slides = array;
            return new Slideshow(title, date, author, slides, default);
        }

        BinaryData IModelSerializable<Slideshow>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            options ??= ModelSerializerOptions.DefaultWireOptions;
            using MemoryStream stream = new MemoryStream();
            using XmlWriter writer = XmlWriter.Create(stream);
            Serialize(writer, null, options);
            writer.Flush();
            if (stream.Position > int.MaxValue)
            {
                return BinaryData.FromStream(stream);
            }
            else
            {
                return new BinaryData(stream.GetBuffer().AsMemory(0, (int)stream.Position));
            }
        }

        Slideshow IModelSerializable<Slideshow>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return DeserializeSlideshow(XElement.Load(data.ToStream()), options);
        }

        /// <summary> Converts a <see cref="Slideshow"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="Slideshow"/> to convert. </param>
        public static implicit operator RequestContent(Slideshow model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="Slideshow"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator Slideshow(Response response)
        {
            if (response is null)
            {
                return null;
            }

            return DeserializeSlideshow(XElement.Load(response.ContentStream), ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
