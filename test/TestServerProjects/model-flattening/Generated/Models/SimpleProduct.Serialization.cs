// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace model_flattening.Models
{
    public partial class SimpleProduct : IUtf8JsonSerializable, IModelJsonSerializable<SimpleProduct>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<SimpleProduct>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<SimpleProduct>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<SimpleProduct>(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("base_product_id"u8);
            writer.WriteStringValue(ProductId);
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("base_product_description"u8);
                writer.WriteStringValue(Description);
            }
            writer.WritePropertyName("details"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(MaxProductDisplayName))
            {
                writer.WritePropertyName("max_product_display_name"u8);
                writer.WriteStringValue(MaxProductDisplayName);
            }
            if (Optional.IsDefined(Capacity))
            {
                writer.WritePropertyName("max_product_capacity"u8);
                writer.WriteStringValue(Capacity.Value.ToString());
            }
            writer.WritePropertyName("max_product_image"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(GenericValue))
            {
                writer.WritePropertyName("generic_value"u8);
                writer.WriteStringValue(GenericValue);
            }
            if (Optional.IsDefined(OdataValue))
            {
                writer.WritePropertyName("@odata.value"u8);
                writer.WriteStringValue(OdataValue);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static SimpleProduct DeserializeSimpleProduct(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string baseProductId = default;
            Optional<string> baseProductDescription = default;
            Optional<string> maxProductDisplayName = default;
            Optional<SimpleProductPropertiesMaxProductCapacity> maxProductCapacity = default;
            Optional<string> genericValue = default;
            Optional<string> odataValue = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("base_product_id"u8))
                {
                    baseProductId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("base_product_description"u8))
                {
                    baseProductDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("details"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("max_product_display_name"u8))
                        {
                            maxProductDisplayName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("max_product_capacity"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            maxProductCapacity = new SimpleProductPropertiesMaxProductCapacity(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("max_product_image"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.NameEquals("generic_value"u8))
                                {
                                    genericValue = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("@odata.value"u8))
                                {
                                    odataValue = property1.Value.GetString();
                                    continue;
                                }
                            }
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new SimpleProduct(baseProductId, baseProductDescription.Value, maxProductDisplayName.Value, Optional.ToNullable(maxProductCapacity), genericValue.Value, odataValue.Value, rawData);
        }

        SimpleProduct IModelJsonSerializable<SimpleProduct>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<SimpleProduct>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeSimpleProduct(doc.RootElement, options);
        }

        BinaryData IModelSerializable<SimpleProduct>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<SimpleProduct>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        SimpleProduct IModelSerializable<SimpleProduct>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<SimpleProduct>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeSimpleProduct(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="SimpleProduct"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="SimpleProduct"/> to convert. </param>
        public static implicit operator RequestContent(SimpleProduct model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="SimpleProduct"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator SimpleProduct(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeSimpleProduct(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
