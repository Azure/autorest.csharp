!<!CodeModel> 
info: !<!Info> 
  description: Test Infrastructure for AutoRest
  title: AutoRest Complex Test Service
schemas: !<!Schemas> 
  booleans:
    - !<!BooleanSchema> &ref_11
      type: boolean
      language: !<!Languages> 
        default:
          name: Boolean
          description: ''
      protocol: !<!Protocols> {}
  numbers:
    - !<!NumberSchema> &ref_3
      type: integer
      precision: 32
      language: !<!Languages> 
        default:
          name: Integer
          description: Basic Id
      protocol: !<!Protocols> {}
    - !<!NumberSchema> &ref_6
      type: integer
      precision: 32
      language: !<!Languages> 
        default:
          name: Integer
          description: ''
      protocol: !<!Protocols> {}
    - !<!NumberSchema> &ref_8
      type: integer
      precision: 64
      language: !<!Languages> 
        default:
          name: Integer
          description: ''
      protocol: !<!Protocols> {}
    - !<!NumberSchema> &ref_9
      type: number
      precision: 32
      language: !<!Languages> 
        default:
          name: Number
          description: ''
      protocol: !<!Protocols> {}
    - !<!NumberSchema> &ref_10
      type: number
      precision: 64
      language: !<!Languages> 
        default:
          name: Number
          description: ''
      protocol: !<!Protocols> {}
  strings:
    - !<!StringSchema> &ref_0
      type: string
      language: !<!Languages> 
        default:
          name: String
          description: simple string
      protocol: !<!Protocols> {}
    - !<!StringSchema> &ref_4
      type: string
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: BasicName
          description: Name property with a very long description that does not fit on a single line and a line break.
      protocol: !<!Protocols> {}
    - !<!StringSchema> &ref_7
      type: string
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: ErrorMessage
          description: ''
      protocol: !<!Protocols> {}
    - !<!StringSchema> &ref_12
      type: string
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: StringWrapperField
          description: ''
      protocol: !<!Protocols> {}
    - !<!StringSchema> &ref_13
      type: string
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: StringWrapperEmpty
          description: ''
      protocol: !<!Protocols> {}
    - !<!StringSchema> &ref_14
      type: string
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: StringWrapperNull
          description: ''
      protocol: !<!Protocols> {}
    - !<!StringSchema> &ref_23
      type: string
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: ArrayWrapperArrayItem
          description: ''
      protocol: !<!Protocols> {}
    - !<!StringSchema> &ref_1
      type: string
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: String
          description: ''
      protocol: !<!Protocols> {}
    - !<!StringSchema> &ref_32
      type: string
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: SiameseBreed
          description: ''
      protocol: !<!Protocols> {}
    - !<!StringSchema> &ref_31
      type: string
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: CatColor
          description: ''
      protocol: !<!Protocols> {}
    - !<!StringSchema> &ref_27
      type: string
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: DogFood
          description: ''
      protocol: !<!Protocols> {}
    - !<!StringSchema> &ref_30
      type: string
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: PetName
          description: ''
      protocol: !<!Protocols> {}
    - !<!StringSchema> &ref_38
      type: string
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: FishFishtype
          description: ''
      protocol: !<!Protocols> {}
    - !<!StringSchema> &ref_48
      type: string
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: FishSpecies
          description: ''
      protocol: !<!Protocols> {}
    - !<!StringSchema> &ref_52
      type: string
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: DotFishType
          description: ''
      protocol: !<!Protocols> {}
    - !<!StringSchema> &ref_54
      type: string
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: DotFishSpecies
          description: ''
      protocol: !<!Protocols> {}
    - !<!StringSchema> &ref_50
      type: string
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: DotSalmonLocation
          description: ''
      protocol: !<!Protocols> {}
    - !<!StringSchema> &ref_39
      type: string
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: SalmonLocation
          description: ''
      protocol: !<!Protocols> {}
    - !<!StringSchema> &ref_55
      type: string
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: ReadonlyObjId
          description: ''
      protocol: !<!Protocols> {}
    - !<!StringSchema> &ref_61
      type: string
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: MyBaseTypePropB1
          description: ''
      protocol: !<!Protocols> {}
    - !<!StringSchema> &ref_62
      type: string
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: MyBaseHelperTypePropBH1
          description: ''
      protocol: !<!Protocols> {}
    - !<!StringSchema> &ref_36
      type: string
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: SmartSalmonCollegeDegree
          description: ''
      protocol: !<!Protocols> {}
    - !<!StringSchema> &ref_57
      type: string
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: MyDerivedTypePropD1
          description: ''
      protocol: !<!Protocols> {}
  choices:
    - !<!ChoiceSchema> &ref_5
      choices:
        - !<!ChoiceValue> 
          value: cyan
          language:
            default:
              name: Cyan
              description: ''
        - !<!ChoiceValue> 
          value: Magenta
          language:
            default:
              name: Magenta
              description: ''
        - !<!ChoiceValue> 
          value: YELLOW
          language:
            default:
              name: Yellow
              description: ''
        - !<!ChoiceValue> 
          value: blacK
          language:
            default:
              name: BlacK
              description: ''
      type: choice
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      choiceType: *ref_0
      language: !<!Languages> 
        default:
          name: CMYKColors
          description: ''
      protocol: !<!Protocols> {}
    - !<!ChoiceSchema> &ref_59
      choices:
        - !<!ChoiceValue> 
          value: Kind1
          language:
            default:
              name: Kind1
              description: ''
      type: choice
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      choiceType: *ref_0
      language: !<!Languages> 
        default:
          name: MyKind
          description: ''
      protocol: !<!Protocols> {}
    - !<!ChoiceSchema> &ref_42
      choices:
        - !<!ChoiceValue> 
          value: pink
          language:
            default:
              name: Pink
              description: ''
        - !<!ChoiceValue> 
          value: gray
          language:
            default:
              name: Gray
              description: ''
        - !<!ChoiceValue> 
          value: brown
          language:
            default:
              name: Brown
              description: ''
        - !<!ChoiceValue> 
          value: RED
          language:
            default:
              name: UpperRed
              description: Uppercase RED
        - !<!ChoiceValue> 
          value: red
          language:
            default:
              name: LowerRed
              description: Lowercase RED
      type: choice
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      choiceType: *ref_0
      defaultValue: gray
      language: !<!Languages> 
        default:
          name: GoblinSharkColor
          description: Colors possible
      protocol: !<!Protocols> {}
  constants:
    - !<!ConstantSchema> &ref_70
      type: constant
      value: !<!ConstantValue> 
        value: application/json
      valueType: *ref_0
      language: !<!Languages> 
        default:
          name: Accept
          description: 'Accept: application/json'
      protocol: !<!Protocols> {}
    - !<!ConstantSchema> &ref_68
      type: constant
      value: !<!ConstantValue> 
        value: '2016-02-29'
      valueType: *ref_0
      language: !<!Languages> 
        default:
          name: ApiVersion20160229
          description: Api Version (2016-02-29)
      protocol: !<!Protocols> {}
    - !<!ConstantSchema> &ref_74
      type: constant
      value: !<!ConstantValue> 
        value: application/json
      valueType: *ref_0
      language: !<!Languages> 
        default:
          name: ApplicationJson
          description: Content Type 'application/json'
      protocol: !<!Protocols> {}
  dictionaries:
    - !<!DictionarySchema> &ref_24
      type: dictionary
      elementType: *ref_1
      language: !<!Languages> 
        default:
          name: DictionaryWrapperDefaultProgram
          description: Dictionary of <string>
      protocol: !<!Protocols> {}
    - !<!DictionarySchema> &ref_34
      type: dictionary
      elementType: !<!AnySchema> &ref_2
        type: any
        language: !<!Languages> 
          default:
            name: any
            description: Any object
        protocol: !<!Protocols> {}
      language: !<!Languages> 
        default:
          name: SmartSalmon
          description: Dictionary of <any>
      protocol: !<!Protocols> {}
  any:
    - *ref_2
  byteArrays:
    - !<!ByteArraySchema> &ref_22
      type: byte-array
      format: byte
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: ByteWrapperField
          description: ''
      protocol: !<!Protocols> {}
    - !<!ByteArraySchema> &ref_41
      type: byte-array
      format: byte
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: SawsharkPicture
          description: ''
      protocol: !<!Protocols> {}
  dateTimes:
    - !<!DateTimeSchema> &ref_17
      type: date-time
      format: date-time
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: DatetimeWrapperField
          description: ''
      protocol: !<!Protocols> {}
    - !<!DateTimeSchema> &ref_18
      type: date-time
      format: date-time
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: DatetimeWrapperNow
          description: ''
      protocol: !<!Protocols> {}
    - !<!DateTimeSchema> &ref_19
      type: date-time
      format: date-time-rfc1123
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: Datetimerfc1123WrapperField
          description: ''
      protocol: !<!Protocols> {}
    - !<!DateTimeSchema> &ref_20
      type: date-time
      format: date-time-rfc1123
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: Datetimerfc1123WrapperNow
          description: ''
      protocol: !<!Protocols> {}
    - !<!DateTimeSchema> &ref_47
      type: date-time
      format: date-time
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: SharkBirthday
          description: ''
      protocol: !<!Protocols> {}
  dates:
    - !<!DateSchema> &ref_15
      type: date
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: DateWrapperField
          description: ''
      protocol: !<!Protocols> {}
    - !<!DateSchema> &ref_16
      type: date
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: DateWrapperLeap
          description: ''
      protocol: !<!Protocols> {}
  durations:
    - !<!DurationSchema> &ref_21
      type: duration
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      language: !<!Languages> 
        default:
          name: DurationWrapperField
          description: ''
      protocol: !<!Protocols> {}
  objects:
    - !<!ObjectSchema> &ref_71
      type: object
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      properties:
        - !<!Property> 
          schema: *ref_3
          nullable: true
          serializedName: id
          language: !<!Languages> 
            default:
              name: id
              description: Basic Id
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_4
          serializedName: name
          language: !<!Languages> 
            default:
              name: name
              description: Name property with a very long description that does not fit on a single line and a line break.
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_5
          serializedName: color
          language: !<!Languages> 
            default:
              name: color
              description: ''
          protocol: !<!Protocols> {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !<!Languages> 
        default:
          name: Basic
          description: ''
          namespace: ''
      protocol: !<!Protocols> {}
    - !<!ObjectSchema> &ref_72
      type: object
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      properties:
        - !<!Property> 
          schema: *ref_6
          serializedName: status
          language: !<!Languages> 
            default:
              name: status
              description: ''
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_7
          serializedName: message
          language: !<!Languages> 
            default:
              name: message
              description: ''
          protocol: !<!Protocols> {}
      serializationFormats:
        - json
      usage:
        - exception
      language: !<!Languages> 
        default:
          name: Error
          description: ''
          namespace: ''
      protocol: !<!Protocols> {}
    - !<!ObjectSchema> &ref_76
      type: object
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      properties:
        - !<!Property> 
          schema: *ref_6
          serializedName: field1
          language: !<!Languages> 
            default:
              name: field1
              description: ''
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_6
          serializedName: field2
          language: !<!Languages> 
            default:
              name: field2
              description: ''
          protocol: !<!Protocols> {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !<!Languages> 
        default:
          name: IntWrapper
          description: ''
          namespace: ''
      protocol: !<!Protocols> {}
    - !<!ObjectSchema> &ref_78
      type: object
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      properties:
        - !<!Property> 
          schema: *ref_8
          serializedName: field1
          language: !<!Languages> 
            default:
              name: field1
              description: ''
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_8
          serializedName: field2
          language: !<!Languages> 
            default:
              name: field2
              description: ''
          protocol: !<!Protocols> {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !<!Languages> 
        default:
          name: LongWrapper
          description: ''
          namespace: ''
      protocol: !<!Protocols> {}
    - !<!ObjectSchema> &ref_80
      type: object
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      properties:
        - !<!Property> 
          schema: *ref_9
          serializedName: field1
          language: !<!Languages> 
            default:
              name: field1
              description: ''
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_9
          serializedName: field2
          language: !<!Languages> 
            default:
              name: field2
              description: ''
          protocol: !<!Protocols> {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !<!Languages> 
        default:
          name: FloatWrapper
          description: ''
          namespace: ''
      protocol: !<!Protocols> {}
    - !<!ObjectSchema> &ref_82
      type: object
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      properties:
        - !<!Property> 
          schema: *ref_10
          serializedName: field1
          language: !<!Languages> 
            default:
              name: field1
              description: ''
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_10
          serializedName: field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose
          language: !<!Languages> 
            default:
              name: field56ZerosAfterTheDotAndNegativeZeroBeforeDotAndThisIsALongFieldNameOnPurpose
              description: ''
          protocol: !<!Protocols> {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !<!Languages> 
        default:
          name: DoubleWrapper
          description: ''
          namespace: ''
      protocol: !<!Protocols> {}
    - !<!ObjectSchema> &ref_84
      type: object
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      properties:
        - !<!Property> 
          schema: *ref_11
          serializedName: field_true
          language: !<!Languages> 
            default:
              name: fieldTrue
              description: ''
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_11
          serializedName: field_false
          language: !<!Languages> 
            default:
              name: fieldFalse
              description: ''
          protocol: !<!Protocols> {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !<!Languages> 
        default:
          name: BooleanWrapper
          description: ''
          namespace: ''
      protocol: !<!Protocols> {}
    - !<!ObjectSchema> &ref_86
      type: object
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      properties:
        - !<!Property> 
          schema: *ref_12
          serializedName: field
          language: !<!Languages> 
            default:
              name: field
              description: ''
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_13
          serializedName: empty
          language: !<!Languages> 
            default:
              name: empty
              description: ''
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_14
          serializedName: 'null'
          language: !<!Languages> 
            default:
              name: 'null'
              description: ''
          protocol: !<!Protocols> {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !<!Languages> 
        default:
          name: StringWrapper
          description: ''
          namespace: ''
      protocol: !<!Protocols> {}
    - !<!ObjectSchema> &ref_88
      type: object
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      properties:
        - !<!Property> 
          schema: *ref_15
          serializedName: field
          language: !<!Languages> 
            default:
              name: field
              description: ''
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_16
          serializedName: leap
          language: !<!Languages> 
            default:
              name: leap
              description: ''
          protocol: !<!Protocols> {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !<!Languages> 
        default:
          name: DateWrapper
          description: ''
          namespace: ''
      protocol: !<!Protocols> {}
    - !<!ObjectSchema> &ref_90
      type: object
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      properties:
        - !<!Property> 
          schema: *ref_17
          serializedName: field
          language: !<!Languages> 
            default:
              name: field
              description: ''
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_18
          serializedName: now
          language: !<!Languages> 
            default:
              name: now
              description: ''
          protocol: !<!Protocols> {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !<!Languages> 
        default:
          name: DatetimeWrapper
          description: ''
          namespace: ''
      protocol: !<!Protocols> {}
    - !<!ObjectSchema> &ref_92
      type: object
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      properties:
        - !<!Property> 
          schema: *ref_19
          serializedName: field
          language: !<!Languages> 
            default:
              name: field
              description: ''
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_20
          serializedName: now
          language: !<!Languages> 
            default:
              name: now
              description: ''
          protocol: !<!Protocols> {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !<!Languages> 
        default:
          name: Datetimerfc1123Wrapper
          description: ''
          namespace: ''
      protocol: !<!Protocols> {}
    - !<!ObjectSchema> &ref_94
      type: object
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      properties:
        - !<!Property> 
          schema: *ref_21
          serializedName: field
          language: !<!Languages> 
            default:
              name: field
              description: ''
          protocol: !<!Protocols> {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !<!Languages> 
        default:
          name: DurationWrapper
          description: ''
          namespace: ''
      protocol: !<!Protocols> {}
    - !<!ObjectSchema> &ref_96
      type: object
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      properties:
        - !<!Property> 
          schema: *ref_22
          serializedName: field
          language: !<!Languages> 
            default:
              name: field
              description: ''
          protocol: !<!Protocols> {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !<!Languages> 
        default:
          name: ByteWrapper
          description: ''
          namespace: ''
      protocol: !<!Protocols> {}
    - !<!ObjectSchema> &ref_98
      type: object
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      properties:
        - !<!Property> 
          schema: !<!ArraySchema> &ref_63
            type: array
            apiVersions:
              - !<!ApiVersion> 
                version: '2016-02-29'
            elementType: *ref_23
            language: !<!Languages> 
              default:
                name: ArrayWrapperArray
                description: Array of ArrayWrapperArrayItem
            protocol: !<!Protocols> {}
          serializedName: array
          language: !<!Languages> 
            default:
              name: array
              description: ''
          protocol: !<!Protocols> {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !<!Languages> 
        default:
          name: ArrayWrapper
          description: ''
          namespace: ''
      protocol: !<!Protocols> {}
    - !<!ObjectSchema> &ref_101
      type: object
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      properties:
        - !<!Property> 
          schema: *ref_24
          nullable: true
          serializedName: defaultProgram
          language: !<!Languages> 
            default:
              name: defaultProgram
              description: Dictionary of <string>
          protocol: !<!Protocols> {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !<!Languages> 
        default:
          name: DictionaryWrapper
          description: ''
          namespace: ''
      protocol: !<!Protocols> {}
    - !<!ObjectSchema> &ref_25
      type: object
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      parents: !<!Relations> 
        all:
          - !<!ObjectSchema> &ref_28
            type: object
            apiVersions:
              - !<!ApiVersion> 
                version: '2016-02-29'
            children: !<!Relations> 
              all:
                - *ref_25
              immediate:
                - *ref_25
            parents: !<!Relations> 
              all:
                - !<!ObjectSchema> &ref_26
                  type: object
                  apiVersions:
                    - !<!ApiVersion> 
                      version: '2016-02-29'
                  children: !<!Relations> 
                    all:
                      - !<!ObjectSchema> &ref_29
                        type: object
                        apiVersions:
                          - !<!ApiVersion> 
                            version: '2016-02-29'
                        parents: !<!Relations> 
                          all:
                            - *ref_26
                          immediate:
                            - *ref_26
                        properties:
                          - !<!Property> 
                            schema: *ref_27
                            serializedName: food
                            language: !<!Languages> 
                              default:
                                name: food
                                description: ''
                            protocol: !<!Protocols> {}
                        serializationFormats:
                          - json
                        usage:
                          - output
                          - input
                        language: !<!Languages> 
                          default:
                            name: Dog
                            description: ''
                            namespace: ''
                        protocol: !<!Protocols> {}
                      - *ref_28
                      - *ref_25
                    immediate:
                      - *ref_29
                      - *ref_28
                  properties:
                    - !<!Property> 
                      schema: *ref_6
                      serializedName: id
                      language: !<!Languages> 
                        default:
                          name: id
                          description: ''
                      protocol: !<!Protocols> {}
                    - !<!Property> 
                      schema: *ref_30
                      serializedName: name
                      language: !<!Languages> 
                        default:
                          name: name
                          description: ''
                      protocol: !<!Protocols> {}
                  serializationFormats:
                    - json
                  usage:
                    - output
                    - input
                  language: !<!Languages> 
                    default:
                      name: Pet
                      description: ''
                      namespace: ''
                  protocol: !<!Protocols> {}
              immediate:
                - *ref_26
            properties:
              - !<!Property> 
                schema: *ref_31
                serializedName: color
                language: !<!Languages> 
                  default:
                    name: color
                    description: ''
                protocol: !<!Protocols> {}
              - !<!Property> 
                schema: !<!ArraySchema> &ref_64
                  type: array
                  apiVersions:
                    - !<!ApiVersion> 
                      version: '2016-02-29'
                  elementType: *ref_29
                  language: !<!Languages> 
                    default:
                      name: CatHates
                      description: Array of dog
                  protocol: !<!Protocols> {}
                serializedName: hates
                language: !<!Languages> 
                  default:
                    name: hates
                    description: ''
                protocol: !<!Protocols> {}
            serializationFormats:
              - json
            usage:
              - output
              - input
            language: !<!Languages> 
              default:
                name: Cat
                description: ''
                namespace: ''
            protocol: !<!Protocols> {}
          - *ref_26
        immediate:
          - *ref_28
      properties:
        - !<!Property> 
          schema: *ref_32
          serializedName: breed
          language: !<!Languages> 
            default:
              name: breed
              description: ''
          protocol: !<!Protocols> {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !<!Languages> 
        default:
          name: Siamese
          description: ''
          namespace: ''
      protocol: !<!Protocols> {}
    - *ref_28
    - *ref_29
    - *ref_26
    - !<!ObjectSchema> &ref_35
      type: object
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      children: !<!Relations> 
        all:
          - !<!ObjectSchema> &ref_33
            type: object
            apiVersions:
              - !<!ApiVersion> 
                version: '2016-02-29'
            children: !<!Relations> 
              all:
                - !<!ObjectSchema> &ref_37
                  type: object
                  apiVersions:
                    - !<!ApiVersion> 
                      version: '2016-02-29'
                  discriminatorValue: smart_salmon
                  parents: !<!Relations> 
                    all:
                      - *ref_33
                      - *ref_34
                      - *ref_35
                    immediate:
                      - *ref_33
                      - *ref_34
                  properties:
                    - !<!Property> 
                      schema: *ref_36
                      serializedName: college_degree
                      language: !<!Languages> 
                        default:
                          name: collegeDegree
                          description: ''
                      protocol: !<!Protocols> {}
                  serializationFormats:
                    - json
                  usage:
                    - output
                    - input
                  language: !<!Languages> 
                    default:
                      name: SmartSalmon
                      description: ''
                      namespace: ''
                  protocol: !<!Protocols> {}
              immediate:
                - *ref_37
            discriminator: !<!Discriminator> 
              all:
                smart_salmon: *ref_37
              immediate:
                smart_salmon: *ref_37
              property: !<!Property> &ref_46
                schema: *ref_38
                isDiscriminator: true
                required: true
                serializedName: fishtype
                language: !<!Languages> 
                  default:
                    name: fishtype
                    description: ''
                protocol: !<!Protocols> {}
            discriminatorValue: salmon
            parents: !<!Relations> 
              all:
                - *ref_35
              immediate:
                - *ref_35
            properties:
              - !<!Property> 
                schema: *ref_39
                serializedName: location
                language: !<!Languages> 
                  default:
                    name: location
                    description: ''
                protocol: !<!Protocols> {}
              - !<!Property> 
                schema: *ref_11
                serializedName: iswild
                language: !<!Languages> 
                  default:
                    name: iswild
                    description: ''
                protocol: !<!Protocols> {}
            serializationFormats:
              - json
            usage:
              - output
              - input
            language: !<!Languages> 
              default:
                name: Salmon
                description: ''
                namespace: ''
            protocol: !<!Protocols> {}
          - *ref_37
          - !<!ObjectSchema> &ref_40
            type: object
            apiVersions:
              - !<!ApiVersion> 
                version: '2016-02-29'
            children: !<!Relations> 
              all:
                - !<!ObjectSchema> &ref_43
                  type: object
                  apiVersions:
                    - !<!ApiVersion> 
                      version: '2016-02-29'
                  discriminatorValue: sawshark
                  parents: !<!Relations> 
                    all:
                      - *ref_40
                      - *ref_35
                    immediate:
                      - *ref_40
                  properties:
                    - !<!Property> 
                      schema: *ref_41
                      serializedName: picture
                      language: !<!Languages> 
                        default:
                          name: picture
                          description: ''
                      protocol: !<!Protocols> {}
                  serializationFormats:
                    - json
                  usage:
                    - output
                    - input
                  language: !<!Languages> 
                    default:
                      name: Sawshark
                      description: ''
                      namespace: ''
                  protocol: !<!Protocols> {}
                - !<!ObjectSchema> &ref_44
                  type: object
                  apiVersions:
                    - !<!ApiVersion> 
                      version: '2016-02-29'
                  discriminatorValue: goblin
                  parents: !<!Relations> 
                    all:
                      - *ref_40
                      - *ref_35
                    immediate:
                      - *ref_40
                  properties:
                    - !<!Property> 
                      schema: *ref_6
                      serializedName: jawsize
                      language: !<!Languages> 
                        default:
                          name: jawsize
                          description: ''
                      protocol: !<!Protocols> {}
                    - !<!Property> 
                      schema: *ref_42
                      serializedName: color
                      language: !<!Languages> 
                        default:
                          name: color
                          description: Colors possible
                      protocol: !<!Protocols> {}
                  serializationFormats:
                    - json
                  usage:
                    - output
                    - input
                  extensions:
                    x-ms-discriminator-value: goblin
                  language: !<!Languages> 
                    default:
                      name: Goblinshark
                      description: ''
                      namespace: ''
                  protocol: !<!Protocols> {}
                - !<!ObjectSchema> &ref_45
                  type: object
                  apiVersions:
                    - !<!ApiVersion> 
                      version: '2016-02-29'
                  discriminatorValue: cookiecuttershark
                  parents: !<!Relations> 
                    all:
                      - *ref_40
                      - *ref_35
                    immediate:
                      - *ref_40
                  serializationFormats:
                    - json
                  usage:
                    - output
                    - input
                  language: !<!Languages> 
                    default:
                      name: Cookiecuttershark
                      description: ''
                      namespace: ''
                  protocol: !<!Protocols> {}
              immediate:
                - *ref_43
                - *ref_44
                - *ref_45
            discriminator: !<!Discriminator> 
              all:
                cookiecuttershark: *ref_45
                goblin: *ref_44
                sawshark: *ref_43
              immediate:
                cookiecuttershark: *ref_45
                goblin: *ref_44
                sawshark: *ref_43
              property: *ref_46
            discriminatorValue: shark
            parents: !<!Relations> 
              all:
                - *ref_35
              immediate:
                - *ref_35
            properties:
              - !<!Property> 
                schema: *ref_6
                required: false
                serializedName: age
                language: !<!Languages> 
                  default:
                    name: age
                    description: ''
                protocol: !<!Protocols> {}
              - !<!Property> 
                schema: *ref_47
                required: true
                serializedName: birthday
                language: !<!Languages> 
                  default:
                    name: birthday
                    description: ''
                protocol: !<!Protocols> {}
            serializationFormats:
              - json
            usage:
              - output
              - input
            language: !<!Languages> 
              default:
                name: Shark
                description: ''
                namespace: ''
            protocol: !<!Protocols> {}
          - *ref_43
          - *ref_44
          - *ref_45
        immediate:
          - *ref_33
          - *ref_40
      discriminator: !<!Discriminator> 
        all:
          cookiecuttershark: *ref_45
          goblin: *ref_44
          salmon: *ref_33
          sawshark: *ref_43
          shark: *ref_40
          smart_salmon: *ref_37
        immediate:
          salmon: *ref_33
          shark: *ref_40
        property: *ref_46
      properties:
        - *ref_46
        - !<!Property> 
          schema: *ref_48
          required: false
          serializedName: species
          language: !<!Languages> 
            default:
              name: species
              description: ''
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_9
          required: true
          serializedName: length
          language: !<!Languages> 
            default:
              name: length
              description: ''
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: !<!ArraySchema> &ref_65
            type: array
            apiVersions:
              - !<!ApiVersion> 
                version: '2016-02-29'
            elementType: *ref_35
            language: !<!Languages> 
              default:
                name: FishSiblings
                description: Array of Fish
            protocol: !<!Protocols> {}
          required: false
          serializedName: siblings
          language: !<!Languages> 
            default:
              name: siblings
              description: ''
          protocol: !<!Protocols> {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !<!Languages> 
        default:
          name: Fish
          description: ''
          namespace: ''
      protocol: !<!Protocols> {}
    - !<!ObjectSchema> &ref_49
      type: object
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      children: !<!Relations> 
        all:
          - !<!ObjectSchema> &ref_51
            type: object
            apiVersions:
              - !<!ApiVersion> 
                version: '2016-02-29'
            discriminatorValue: DotSalmon
            parents: !<!Relations> 
              all:
                - *ref_49
              immediate:
                - *ref_49
            properties:
              - !<!Property> 
                schema: *ref_50
                serializedName: location
                language: !<!Languages> 
                  default:
                    name: location
                    description: ''
                protocol: !<!Protocols> {}
              - !<!Property> 
                schema: *ref_11
                serializedName: iswild
                language: !<!Languages> 
                  default:
                    name: iswild
                    description: ''
                protocol: !<!Protocols> {}
            serializationFormats:
              - json
            usage:
              - output
            language: !<!Languages> 
              default:
                name: DotSalmon
                description: ''
                namespace: ''
            protocol: !<!Protocols> {}
        immediate:
          - *ref_51
      discriminator: !<!Discriminator> 
        all:
          DotSalmon: *ref_51
        immediate:
          DotSalmon: *ref_51
        property: !<!Property> &ref_53
          schema: *ref_52
          isDiscriminator: true
          required: true
          serializedName: fish.type
          language: !<!Languages> 
            default:
              name: fishType
              description: ''
          protocol: !<!Protocols> {}
      properties:
        - *ref_53
        - !<!Property> 
          schema: *ref_54
          required: false
          serializedName: species
          language: !<!Languages> 
            default:
              name: species
              description: ''
          protocol: !<!Protocols> {}
      serializationFormats:
        - json
      usage:
        - output
      language: !<!Languages> 
        default:
          name: DotFish
          description: ''
          namespace: ''
      protocol: !<!Protocols> {}
    - !<!ObjectSchema> &ref_106
      type: object
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      properties:
        - !<!Property> 
          schema: *ref_51
          serializedName: sampleSalmon
          language: !<!Languages> 
            default:
              name: sampleSalmon
              description: ''
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: !<!ArraySchema> &ref_66
            type: array
            apiVersions:
              - !<!ApiVersion> 
                version: '2016-02-29'
            elementType: *ref_51
            language: !<!Languages> 
              default:
                name: DotFishMarketSalmons
                description: Array of DotSalmon
            protocol: !<!Protocols> {}
          serializedName: salmons
          language: !<!Languages> 
            default:
              name: salmons
              description: ''
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_49
          serializedName: sampleFish
          language: !<!Languages> 
            default:
              name: sampleFish
              description: ''
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: !<!ArraySchema> &ref_67
            type: array
            apiVersions:
              - !<!ApiVersion> 
                version: '2016-02-29'
            elementType: *ref_49
            language: !<!Languages> 
              default:
                name: DotFishMarketFishes
                description: Array of DotFish
            protocol: !<!Protocols> {}
          serializedName: fishes
          language: !<!Languages> 
            default:
              name: fishes
              description: ''
          protocol: !<!Protocols> {}
      serializationFormats:
        - json
      usage:
        - output
      language: !<!Languages> 
        default:
          name: DotFishMarket
          description: ''
          namespace: ''
      protocol: !<!Protocols> {}
    - *ref_51
    - *ref_33
    - !<!ObjectSchema> &ref_111
      type: object
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      properties:
        - !<!Property> 
          schema: *ref_55
          readOnly: true
          serializedName: id
          language: !<!Languages> 
            default:
              name: id
              description: ''
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_6
          serializedName: size
          language: !<!Languages> 
            default:
              name: size
              description: ''
          protocol: !<!Protocols> {}
      serializationFormats:
        - json
      usage:
        - output
        - input
      language: !<!Languages> 
        default:
          name: ReadonlyObj
          description: ''
          namespace: ''
      protocol: !<!Protocols> {}
    - !<!ObjectSchema> &ref_56
      type: object
      apiVersions:
        - !<!ApiVersion> 
          version: '2016-02-29'
      children: !<!Relations> 
        all:
          - !<!ObjectSchema> &ref_58
            type: object
            apiVersions:
              - !<!ApiVersion> 
                version: '2016-02-29'
            discriminatorValue: Kind1
            parents: !<!Relations> 
              all:
                - *ref_56
              immediate:
                - *ref_56
            properties:
              - !<!Property> 
                schema: *ref_57
                serializedName: propD1
                language: !<!Languages> 
                  default:
                    name: propD1
                    description: ''
                protocol: !<!Protocols> {}
            serializationFormats:
              - json
            usage:
              - output
            extensions:
              x-ms-discriminator-value: Kind1
            language: !<!Languages> 
              default:
                name: MyDerivedType
                description: ''
                namespace: ''
            protocol: !<!Protocols> {}
        immediate:
          - *ref_58
      discriminator: !<!Discriminator> 
        all:
          Kind1: *ref_58
        immediate:
          Kind1: *ref_58
        property: !<!Property> &ref_60
          schema: *ref_59
          isDiscriminator: true
          required: true
          serializedName: kind
          language: !<!Languages> 
            default:
              name: kind
              description: ''
          protocol: !<!Protocols> {}
      properties:
        - *ref_60
        - !<!Property> 
          schema: *ref_61
          required: false
          serializedName: propB1
          language: !<!Languages> 
            default:
              name: propB1
              description: ''
          protocol: !<!Protocols> {}
        - !<!Property> 
          schema: *ref_62
          flattenedNames:
            - helper
            - propBH1
          required: false
          serializedName: propBH1
          language: !<!Languages> 
            default:
              name: propBH1
              description: ''
          protocol: !<!Protocols> {}
      serializationFormats:
        - json
      usage:
        - output
      language: !<!Languages> 
        default:
          name: MyBaseType
          description: ''
          namespace: ''
      protocol: !<!Protocols> {}
    - *ref_37
    - *ref_40
    - *ref_43
    - *ref_44
    - *ref_45
    - *ref_58
  arrays:
    - *ref_63
    - *ref_64
    - *ref_65
    - *ref_66
    - *ref_67
globalParameters:
  - !<!Parameter> &ref_69
    schema: *ref_0
    clientDefaultValue: 'http://localhost:3000'
    implementation: Client
    origin: 'modelerfour:synthesized/host'
    required: true
    extensions:
      x-ms-skip-url-encoding: true
    language: !<!Languages> 
      default:
        name: $host
        description: server parameter
        serializedName: $host
    protocol: !<!Protocols> 
      http: !<!HttpParameter> 
        in: uri
  - !<!Parameter> &ref_73
    schema: *ref_68
    implementation: Client
    origin: 'modelerfour:synthesized/api-version'
    required: true
    language: !<!Languages> 
      default:
        name: apiVersion
        description: Api Version
        serializedName: api-version
    protocol: !<!Protocols> 
      http: !<!HttpParameter> 
        in: query
operationGroups:
  - !<!OperationGroup> 
    $key: basic
    operations:
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/basic/valid
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_71
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetValid
            description: 'Get complex type {id: 2, name: ''abc'', color: ''YELLOW''}'
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
          - *ref_73
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_74
                implementation: Method
                origin: 'modelerfour:synthesized/content-type'
                required: true
                language: !<!Languages> 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
              - !<!Parameter> &ref_75
                schema: *ref_71
                implementation: Method
                required: true
                language: !<!Languages> 
                  default:
                    name: complexBody
                    description: 'Please put {id: 2, name: ''abc'', color: ''Magenta''}'
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: body
                    style: json
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters:
              - *ref_75
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpWithBodyRequest> 
                path: /complex/basic/valid
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!Response> 
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: PutValid
            description: 'Please put {id: 2, name: ''abc'', color: ''Magenta''}'
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/basic/invalid
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_71
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetInvalid
            description: Get a basic complex type that is invalid for the local strong type
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/basic/empty
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_71
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetEmpty
            description: Get a basic complex type that is empty
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/basic/null
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_71
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetNull
            description: Get a basic complex type whose properties are null
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/basic/notprovided
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_71
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetNotProvided
            description: Get a basic complex type while the server doesn't provide a response payload
        protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: Basic
        description: ''
    protocol: !<!Protocols> {}
  - !<!OperationGroup> 
    $key: primitive
    operations:
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/primitive/integer
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_76
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetInt
            description: Get complex types with integer properties
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_74
                implementation: Method
                origin: 'modelerfour:synthesized/content-type'
                required: true
                language: !<!Languages> 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
              - !<!Parameter> &ref_77
                schema: *ref_76
                implementation: Method
                required: true
                language: !<!Languages> 
                  default:
                    name: complexBody
                    description: Please put -1 and 2
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: body
                    style: json
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters:
              - *ref_77
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpWithBodyRequest> 
                path: /complex/primitive/integer
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!Response> 
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: PutInt
            description: Put complex types with integer properties
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/primitive/long
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_78
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetLong
            description: Get complex types with long properties
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_74
                implementation: Method
                origin: 'modelerfour:synthesized/content-type'
                required: true
                language: !<!Languages> 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
              - !<!Parameter> &ref_79
                schema: *ref_78
                implementation: Method
                required: true
                language: !<!Languages> 
                  default:
                    name: complexBody
                    description: Please put 1099511627775 and -999511627788
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: body
                    style: json
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters:
              - *ref_79
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpWithBodyRequest> 
                path: /complex/primitive/long
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!Response> 
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: PutLong
            description: Put complex types with long properties
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/primitive/float
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_80
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetFloat
            description: Get complex types with float properties
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_74
                implementation: Method
                origin: 'modelerfour:synthesized/content-type'
                required: true
                language: !<!Languages> 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
              - !<!Parameter> &ref_81
                schema: *ref_80
                implementation: Method
                required: true
                language: !<!Languages> 
                  default:
                    name: complexBody
                    description: Please put 1.05 and -0.003
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: body
                    style: json
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters:
              - *ref_81
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpWithBodyRequest> 
                path: /complex/primitive/float
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!Response> 
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: PutFloat
            description: Put complex types with float properties
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/primitive/double
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_82
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetDouble
            description: Get complex types with double properties
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_74
                implementation: Method
                origin: 'modelerfour:synthesized/content-type'
                required: true
                language: !<!Languages> 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
              - !<!Parameter> &ref_83
                schema: *ref_82
                implementation: Method
                required: true
                language: !<!Languages> 
                  default:
                    name: complexBody
                    description: Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: body
                    style: json
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters:
              - *ref_83
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpWithBodyRequest> 
                path: /complex/primitive/double
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!Response> 
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: PutDouble
            description: Put complex types with double properties
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/primitive/bool
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_84
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetBool
            description: Get complex types with bool properties
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_74
                implementation: Method
                origin: 'modelerfour:synthesized/content-type'
                required: true
                language: !<!Languages> 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
              - !<!Parameter> &ref_85
                schema: *ref_84
                implementation: Method
                required: true
                language: !<!Languages> 
                  default:
                    name: complexBody
                    description: Please put true and false
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: body
                    style: json
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters:
              - *ref_85
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpWithBodyRequest> 
                path: /complex/primitive/bool
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!Response> 
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: PutBool
            description: Put complex types with bool properties
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/primitive/string
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_86
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetString
            description: Get complex types with string properties
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_74
                implementation: Method
                origin: 'modelerfour:synthesized/content-type'
                required: true
                language: !<!Languages> 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
              - !<!Parameter> &ref_87
                schema: *ref_86
                implementation: Method
                required: true
                language: !<!Languages> 
                  default:
                    name: complexBody
                    description: 'Please put ''goodrequest'', '''', and null'
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: body
                    style: json
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters:
              - *ref_87
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpWithBodyRequest> 
                path: /complex/primitive/string
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!Response> 
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: PutString
            description: Put complex types with string properties
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/primitive/date
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_88
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetDate
            description: Get complex types with date properties
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_74
                implementation: Method
                origin: 'modelerfour:synthesized/content-type'
                required: true
                language: !<!Languages> 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
              - !<!Parameter> &ref_89
                schema: *ref_88
                implementation: Method
                required: true
                language: !<!Languages> 
                  default:
                    name: complexBody
                    description: Please put '0001-01-01' and '2016-02-29'
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: body
                    style: json
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters:
              - *ref_89
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpWithBodyRequest> 
                path: /complex/primitive/date
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!Response> 
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: PutDate
            description: Put complex types with date properties
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/primitive/datetime
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_90
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetDateTime
            description: Get complex types with datetime properties
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_74
                implementation: Method
                origin: 'modelerfour:synthesized/content-type'
                required: true
                language: !<!Languages> 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
              - !<!Parameter> &ref_91
                schema: *ref_90
                implementation: Method
                required: true
                language: !<!Languages> 
                  default:
                    name: complexBody
                    description: 'Please put ''0001-01-01T12:00:00-04:00'' and ''2015-05-18T11:38:00-08:00'''
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: body
                    style: json
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters:
              - *ref_91
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpWithBodyRequest> 
                path: /complex/primitive/datetime
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!Response> 
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: PutDateTime
            description: Put complex types with datetime properties
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/primitive/datetimerfc1123
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_92
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetDateTimeRfc1123
            description: Get complex types with datetimeRfc1123 properties
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_74
                implementation: Method
                origin: 'modelerfour:synthesized/content-type'
                required: true
                language: !<!Languages> 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
              - !<!Parameter> &ref_93
                schema: *ref_92
                implementation: Method
                required: true
                language: !<!Languages> 
                  default:
                    name: complexBody
                    description: 'Please put ''Mon, 01 Jan 0001 12:00:00 GMT'' and ''Mon, 18 May 2015 11:38:00 GMT'''
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: body
                    style: json
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters:
              - *ref_93
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpWithBodyRequest> 
                path: /complex/primitive/datetimerfc1123
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!Response> 
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: PutDateTimeRfc1123
            description: Put complex types with datetimeRfc1123 properties
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/primitive/duration
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_94
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetDuration
            description: Get complex types with duration properties
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_74
                implementation: Method
                origin: 'modelerfour:synthesized/content-type'
                required: true
                language: !<!Languages> 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
              - !<!Parameter> &ref_95
                schema: *ref_94
                implementation: Method
                required: true
                language: !<!Languages> 
                  default:
                    name: complexBody
                    description: Please put 'P123DT22H14M12.011S'
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: body
                    style: json
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters:
              - *ref_95
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpWithBodyRequest> 
                path: /complex/primitive/duration
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!Response> 
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: PutDuration
            description: Put complex types with duration properties
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/primitive/byte
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_96
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetByte
            description: Get complex types with byte properties
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_74
                implementation: Method
                origin: 'modelerfour:synthesized/content-type'
                required: true
                language: !<!Languages> 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
              - !<!Parameter> &ref_97
                schema: *ref_96
                implementation: Method
                required: true
                language: !<!Languages> 
                  default:
                    name: complexBody
                    description: Please put non-ascii byte string hex(FF FE FD FC 00 FA F9 F8 F7 F6)
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: body
                    style: json
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters:
              - *ref_97
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpWithBodyRequest> 
                path: /complex/primitive/byte
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!Response> 
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: PutByte
            description: Put complex types with byte properties
        protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: Primitive
        description: ''
    protocol: !<!Protocols> {}
  - !<!OperationGroup> 
    $key: array
    operations:
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/array/valid
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_98
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetValid
            description: Get complex types with array property
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_74
                implementation: Method
                origin: 'modelerfour:synthesized/content-type'
                required: true
                language: !<!Languages> 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
              - !<!Parameter> &ref_99
                schema: *ref_98
                implementation: Method
                required: true
                language: !<!Languages> 
                  default:
                    name: complexBody
                    description: 'Please put an array with 4 items: "1, 2, 3, 4", "", null, "&S#$(*Y", "The quick brown fox jumps over the lazy dog"'
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: body
                    style: json
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters:
              - *ref_99
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpWithBodyRequest> 
                path: /complex/array/valid
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!Response> 
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: PutValid
            description: Put complex types with array property
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/array/empty
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_98
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetEmpty
            description: Get complex types with array property which is empty
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_74
                implementation: Method
                origin: 'modelerfour:synthesized/content-type'
                required: true
                language: !<!Languages> 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
              - !<!Parameter> &ref_100
                schema: *ref_98
                implementation: Method
                required: true
                language: !<!Languages> 
                  default:
                    name: complexBody
                    description: Please put an empty array
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: body
                    style: json
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters:
              - *ref_100
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpWithBodyRequest> 
                path: /complex/array/empty
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!Response> 
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: PutEmpty
            description: Put complex types with array property which is empty
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/array/notprovided
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_98
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetNotProvided
            description: Get complex types with array property while server doesn't provide a response payload
        protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: Array
        description: ''
    protocol: !<!Protocols> {}
  - !<!OperationGroup> 
    $key: dictionary
    operations:
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/dictionary/typed/valid
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_101
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetValid
            description: Get complex types with dictionary property
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_74
                implementation: Method
                origin: 'modelerfour:synthesized/content-type'
                required: true
                language: !<!Languages> 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
              - !<!Parameter> &ref_102
                schema: *ref_101
                implementation: Method
                required: true
                language: !<!Languages> 
                  default:
                    name: complexBody
                    description: 'Please put a dictionary with 5 key-value pairs: "txt":"notepad", "bmp":"mspaint", "xls":"excel", "exe":"", "":null'
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: body
                    style: json
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters:
              - *ref_102
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpWithBodyRequest> 
                path: /complex/dictionary/typed/valid
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!Response> 
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: PutValid
            description: Put complex types with dictionary property
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/dictionary/typed/empty
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_101
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetEmpty
            description: Get complex types with dictionary property which is empty
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_74
                implementation: Method
                origin: 'modelerfour:synthesized/content-type'
                required: true
                language: !<!Languages> 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
              - !<!Parameter> &ref_103
                schema: *ref_101
                implementation: Method
                required: true
                language: !<!Languages> 
                  default:
                    name: complexBody
                    description: Please put an empty dictionary
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: body
                    style: json
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters:
              - *ref_103
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpWithBodyRequest> 
                path: /complex/dictionary/typed/empty
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!Response> 
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: PutEmpty
            description: Put complex types with dictionary property which is empty
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/dictionary/typed/null
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_101
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetNull
            description: Get complex types with dictionary property which is null
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/dictionary/typed/notprovided
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_101
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetNotProvided
            description: Get complex types with dictionary property while server doesn't provide a response payload
        protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: Dictionary
        description: ''
    protocol: !<!Protocols> {}
  - !<!OperationGroup> 
    $key: inheritance
    operations:
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/inheritance/valid
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_25
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetValid
            description: Get complex types that extend others
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_74
                implementation: Method
                origin: 'modelerfour:synthesized/content-type'
                required: true
                language: !<!Languages> 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
              - !<!Parameter> &ref_104
                schema: *ref_25
                implementation: Method
                required: true
                language: !<!Languages> 
                  default:
                    name: complexBody
                    description: 'Please put a siamese with id=2, name="Siameee", color=green, breed=persion, which hates 2 dogs, the 1st one named "Potato" with id=1 and food="tomato", and the 2nd one named "Tomato" with id=-1 and food="french fries".'
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: body
                    style: json
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters:
              - *ref_104
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpWithBodyRequest> 
                path: /complex/inheritance/valid
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!Response> 
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: PutValid
            description: Put complex types that extend others
        protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: Inheritance
        description: ''
    protocol: !<!Protocols> {}
  - !<!OperationGroup> 
    $key: polymorphism
    operations:
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/polymorphism/valid
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_35
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetValid
            description: Get complex types that are polymorphic
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_74
                implementation: Method
                origin: 'modelerfour:synthesized/content-type'
                required: true
                language: !<!Languages> 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
              - !<!Parameter> &ref_105
                schema: *ref_35
                implementation: Method
                required: true
                language: !<!Languages> 
                  default:
                    name: complexBody
                    description: |-
                      Please put a salmon that looks like this:
                      {
                              'fishtype':'Salmon',
                              'location':'alaska',
                              'iswild':true,
                              'species':'king',
                              'length':1.0,
                              'siblings':[
                                {
                                  'fishtype':'Shark',
                                  'age':6,
                                  'birthday': '2012-01-05T01:00:00Z',
                                  'length':20.0,
                                  'species':'predator',
                                },
                                {
                                  'fishtype':'Sawshark',
                                  'age':105,
                                  'birthday': '1900-01-05T01:00:00Z',
                                  'length':10.0,
                                  'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),
                                  'species':'dangerous',
                                },
                                {
                                  'fishtype': 'goblin',
                                  'age': 1,
                                  'birthday': '2015-08-08T00:00:00Z',
                                  'length': 30.0,
                                  'species': 'scary',
                                  'jawsize': 5
                                }
                              ]
                            };
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: body
                    style: json
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters:
              - *ref_105
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpWithBodyRequest> 
                path: /complex/polymorphism/valid
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!Response> 
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: PutValid
            description: Put complex types that are polymorphic
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/polymorphism/dotsyntax
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_49
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetDotSyntax
            description: 'Get complex types that are polymorphic, JSON key contains a dot'
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/polymorphism/composedWithDiscriminator
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_106
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetComposedWithDiscriminator
            description: 'Get complex object composing a polymorphic scalar property and array property with polymorphic element type, with discriminator specified. Deserialization must NOT fail and use the discriminator type specified on the wire.'
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/polymorphism/composedWithoutDiscriminator
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_106
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetComposedWithoutDiscriminator
            description: 'Get complex object composing a polymorphic scalar property and array property with polymorphic element type, without discriminator specified on wire. Deserialization must NOT fail and use the explicit type of the property.'
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/polymorphism/complicated
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_33
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetComplicated
            description: 'Get complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties'
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_74
                implementation: Method
                origin: 'modelerfour:synthesized/content-type'
                required: true
                language: !<!Languages> 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
              - !<!Parameter> &ref_107
                schema: *ref_33
                implementation: Method
                required: true
                language: !<!Languages> 
                  default:
                    name: complexBody
                    description: ''
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: body
                    style: json
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters:
              - *ref_107
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpWithBodyRequest> 
                path: /complex/polymorphism/complicated
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!Response> 
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: PutComplicated
            description: 'Put complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties'
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_74
                implementation: Method
                origin: 'modelerfour:synthesized/content-type'
                required: true
                language: !<!Languages> 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
              - !<!Parameter> &ref_108
                schema: *ref_33
                implementation: Method
                required: true
                language: !<!Languages> 
                  default:
                    name: complexBody
                    description: ''
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: body
                    style: json
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters:
              - *ref_108
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpWithBodyRequest> 
                path: /complex/polymorphism/missingdiscriminator
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_33
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: PutMissingDiscriminator
            description: 'Put complex types that are polymorphic, omitting the discriminator'
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_74
                implementation: Method
                origin: 'modelerfour:synthesized/content-type'
                required: true
                language: !<!Languages> 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
              - !<!Parameter> &ref_109
                schema: *ref_35
                implementation: Method
                required: true
                language: !<!Languages> 
                  default:
                    name: complexBody
                    description: |-
                      Please attempt put a sawshark that looks like this, the client should not allow this data to be sent:
                      {
                          "fishtype": "sawshark",
                          "species": "snaggle toothed",
                          "length": 18.5,
                          "age": 2,
                          "birthday": "2013-06-01T01:00:00Z",
                          "location": "alaska",
                          "picture": base64(FF FF FF FF FE),
                          "siblings": [
                              {
                                  "fishtype": "shark",
                                  "species": "predator",
                                  "birthday": "2012-01-05T01:00:00Z",
                                  "length": 20,
                                  "age": 6
                              },
                              {
                                  "fishtype": "sawshark",
                                  "species": "dangerous",
                                  "picture": base64(FF FF FF FF FE),
                                  "length": 10,
                                  "age": 105
                              }
                          ]
                      }
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: body
                    style: json
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters:
              - *ref_109
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpWithBodyRequest> 
                path: /complex/polymorphism/missingrequired/invalid
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!Response> 
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: PutValidMissingRequired
            description: 'Put complex types that are polymorphic, attempting to omit required ''birthday'' field - the request should not be allowed from the client'
        protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: Polymorphism
        description: ''
    protocol: !<!Protocols> {}
  - !<!OperationGroup> 
    $key: polymorphicrecursive
    operations:
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/polymorphicrecursive/valid
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_35
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetValid
            description: Get complex types that are polymorphic and have recursive references
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_74
                implementation: Method
                origin: 'modelerfour:synthesized/content-type'
                required: true
                language: !<!Languages> 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
              - !<!Parameter> &ref_110
                schema: *ref_35
                implementation: Method
                required: true
                language: !<!Languages> 
                  default:
                    name: complexBody
                    description: |-
                      Please put a salmon that looks like this:
                      {
                          "fishtype": "salmon",
                          "species": "king",
                          "length": 1,
                          "age": 1,
                          "location": "alaska",
                          "iswild": true,
                          "siblings": [
                              {
                                  "fishtype": "shark",
                                  "species": "predator",
                                  "length": 20,
                                  "age": 6,
                                  "siblings": [
                                      {
                                          "fishtype": "salmon",
                                          "species": "coho",
                                          "length": 2,
                                          "age": 2,
                                          "location": "atlantic",
                                          "iswild": true,
                                          "siblings": [
                                              {
                                                  "fishtype": "shark",
                                                  "species": "predator",
                                                  "length": 20,
                                                  "age": 6
                                              },
                                              {
                                                  "fishtype": "sawshark",
                                                  "species": "dangerous",
                                                  "length": 10,
                                                  "age": 105
                                              }
                                          ]
                                      },
                                      {
                                          "fishtype": "sawshark",
                                          "species": "dangerous",
                                          "length": 10,
                                          "age": 105
                                      }
                                  ]
                              },
                              {
                                  "fishtype": "sawshark",
                                  "species": "dangerous",
                                  "length": 10,
                                  "age": 105
                              }
                          ]
                      }
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: body
                    style: json
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters:
              - *ref_110
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpWithBodyRequest> 
                path: /complex/polymorphicrecursive/valid
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!Response> 
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: PutValid
            description: Put complex types that are polymorphic and have recursive references
        protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: Polymorphicrecursive
        description: ''
    protocol: !<!Protocols> {}
  - !<!OperationGroup> 
    $key: readonlyproperty
    operations:
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/readonlyproperty/valid
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_111
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: GetValid
            description: Get complex types that have readonly properties
        protocol: !<!Protocols> {}
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_74
                implementation: Method
                origin: 'modelerfour:synthesized/content-type'
                required: true
                language: !<!Languages> 
                  default:
                    name: contentType
                    description: Body Parameter content-type
                    serializedName: Content-Type
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
              - !<!Parameter> &ref_112
                schema: *ref_111
                implementation: Method
                required: true
                language: !<!Languages> 
                  default:
                    name: complexBody
                    description: ''
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: body
                    style: json
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters:
              - *ref_112
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpWithBodyRequest> 
                path: /complex/readonlyproperty/valid
                method: put
                knownMediaType: json
                mediaTypes:
                  - application/json
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!Response> 
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                statusCodes:
                  - '200'
        exceptions:
          - !<!SchemaResponse> 
            schema: *ref_72
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - default
        language: !<!Languages> 
          default:
            name: PutValid
            description: Put complex types that have readonly properties
        protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: Readonlyproperty
        description: ''
    protocol: !<!Protocols> {}
  - !<!OperationGroup> 
    $key: flattencomplex
    operations:
      - !<!Operation> 
        apiVersions:
          - !<!ApiVersion> 
            version: '2016-02-29'
        parameters:
          - *ref_69
        requests:
          - !<!Request> 
            parameters:
              - !<!Parameter> 
                schema: *ref_70
                implementation: Method
                origin: 'modelerfour:synthesized/accept'
                required: true
                language: !<!Languages> 
                  default:
                    name: accept
                    description: Accept header
                    serializedName: Accept
                protocol: !<!Protocols> 
                  http: !<!HttpParameter> 
                    in: header
            signatureParameters: []
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpRequest> 
                path: /complex/flatten/valid
                method: get
                uri: '{$host}'
        signatureParameters: []
        responses:
          - !<!SchemaResponse> 
            schema: *ref_56
            language: !<!Languages> 
              default:
                name: ''
                description: ''
            protocol: !<!Protocols> 
              http: !<!HttpResponse> 
                knownMediaType: json
                mediaTypes:
                  - application/json
                statusCodes:
                  - '200'
        language: !<!Languages> 
          default:
            name: GetValid
            description: ''
        protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: Flattencomplex
        description: ''
    protocol: !<!Protocols> {}
security: !<!Security> 
  authenticationRequired: false
language: !<!Languages> 
  default:
    name: AutoRestComplexTestService
    description: ''
protocol: !<!Protocols> 
  http: !<!HttpModel> {}
