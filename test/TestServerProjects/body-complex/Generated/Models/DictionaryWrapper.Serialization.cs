// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;

namespace body_complex.Models
{
    public partial class DictionaryWrapper : IUtf8JsonSerializable, IModelJsonSerializable<DictionaryWrapper>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<DictionaryWrapper>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<DictionaryWrapper>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(DefaultProgram))
            {
                if (DefaultProgram != null)
                {
                    writer.WritePropertyName("defaultProgram"u8);
                    writer.WriteStartObject();
                    foreach (var item in DefaultProgram)
                    {
                        writer.WritePropertyName(item.Key);
                        writer.WriteStringValue(item.Value);
                    }
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNull("defaultProgram");
                }
            }
            writer.WriteEndObject();
        }

        DictionaryWrapper IModelJsonSerializable<DictionaryWrapper>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using JsonDocument doc = JsonDocument.ParseValue(ref reader);
            return DeserializeDictionaryWrapper(doc.RootElement, options);
        }

        BinaryData IModelSerializable<DictionaryWrapper>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);
            return ModelSerializer.SerializeCore(this, options);
        }

        DictionaryWrapper IModelSerializable<DictionaryWrapper>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeDictionaryWrapper(document.RootElement, options);
        }

        internal static DictionaryWrapper DeserializeDictionaryWrapper(JsonElement element, ModelSerializerOptions options = null)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IDictionary<string, string>> defaultProgram = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("defaultProgram"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    defaultProgram = dictionary;
                    continue;
                }
            }
            return new DictionaryWrapper(Optional.ToDictionary(defaultProgram));
        }
    }
}
