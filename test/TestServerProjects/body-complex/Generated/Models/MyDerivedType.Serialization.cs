// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace body_complex.Models
{
    public partial class MyDerivedType
    {
        internal static MyDerivedType DeserializeMyDerivedType(JsonElement element)
        {
            string propD1 = default;
            string kind = default;
            string propB1 = default;
            string propBH1 = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("propD1"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    propD1 = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kind"))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("propB1"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    propB1 = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("helper"))
                {
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("propBH1"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            propBH1 = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new MyDerivedType(propD1, kind, propB1, propBH1);
        }
    }
}
