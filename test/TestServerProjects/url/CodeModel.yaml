!<!CodeModel> 
schemas: !<!Schemas> 
  objects:
  - !<!ObjectSchema> &ref_13
    type: object
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    properties:
    - !<!Property> 
      schema: !<!NumberSchema> &ref_7
        type: integer
        precision: 32
        language: !<!Languages> 
          default:
            name: Integer
            description: ''
        protocol: !<!Protocols> {}
      serializedName: status
      language: !<!Languages> 
        default:
          name: status
          description: ''
      protocol: !<!Protocols> {}
    - !<!Property> 
      schema: !<!StringSchema> &ref_8
        type: string
        apiVersions:
        - !<!ApiVersion> 
          version: 1.0.0
        language: !<!Languages> 
          default:
            name: ErrorMessage
            description: ''
        protocol: !<!Protocols> {}
      serializedName: message
      language: !<!Languages> 
        default:
          name: message
          description: ''
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: Error
        description: ''
        namespace: Api100
    protocol: !<!Protocols> {}
  arrays:
  - !<!ArraySchema> &ref_43
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    elementType: !<!StringSchema> &ref_10
      type: string
      apiVersions:
      - !<!ApiVersion> 
        version: 1.0.0
      language: !<!Languages> 
        default:
          name: Get0ItemsItem
          description: ''
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: ArrayOfGet0ItemsItem
        description: Array of Get0ItemsItem
    protocol: !<!Protocols> {}
  - !<!ArraySchema> &ref_80
    type: array
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    elementType: !<!StringSchema> &ref_9
      type: string
      apiVersions:
      - !<!ApiVersion> 
        version: 1.0.0
      language: !<!Languages> 
        default:
          name: String
          description: ''
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: ArrayOfString
        description: Array of String
    protocol: !<!Protocols> {}
  booleans:
  - !<!BooleanSchema> &ref_0
    type: boolean
    language: !<!Languages> 
      default:
        name: Bool
        description: simple boolean
    protocol: !<!Protocols> {}
  - !<!BooleanSchema> &ref_49
    type: boolean
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    language: !<!Languages> 
      default:
        name: Boolean
        description: ''
    protocol: !<!Protocols> {}
  byteArrays:
  - !<!ByteArraySchema> &ref_31
    type: byte-array
    format: byte
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    language: !<!Languages> 
      default:
        name: ByteArray
        description: ''
    protocol: !<!Protocols> {}
  - !<!ByteArraySchema> &ref_4
    type: byte-array
    format: byte
    language: !<!Languages> 
      default:
        name: ByteArray
        description: ''
    protocol: !<!Protocols> {}
  - !<!ByteArraySchema> &ref_41
    type: byte-array
    format: base64url
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    language: !<!Languages> 
      default:
        name: ByteArray
        description: ''
    protocol: !<!Protocols> {}
  constants:
  - !<!ConstantSchema> &ref_12
    type: constant
    value: !<!ConstantValue> 
      value: true
    valueType: *ref_0
    language: !<!Languages> 
      default:
        name: Constant1
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_14
    type: constant
    value: !<!ConstantValue> 
      value: false
    valueType: *ref_0
    language: !<!Languages> 
      default:
        name: Constant2
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_15
    type: constant
    value: !<!ConstantValue> 
      value: 1000000
    valueType: !<!NumberSchema> &ref_1
      type: number
      precision: 32
      language: !<!Languages> 
        default:
          name: Number
          description: ''
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: Constant3
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_16
    type: constant
    value: !<!ConstantValue> 
      value: -1000000
    valueType: *ref_1
    language: !<!Languages> 
      default:
        name: Constant4
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_17
    type: constant
    value: !<!ConstantValue> 
      value: 10000000000
    valueType: *ref_1
    language: !<!Languages> 
      default:
        name: Constant5
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_18
    type: constant
    value: !<!ConstantValue> 
      value: -10000000000
    valueType: *ref_1
    language: !<!Languages> 
      default:
        name: Constant6
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_19
    type: constant
    value: !<!ConstantValue> 
      value: 103400000000000000000
    valueType: *ref_1
    language: !<!Languages> 
      default:
        name: Constant7
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_20
    type: constant
    value: !<!ConstantValue> 
      value: -1.034e-20
    valueType: *ref_1
    language: !<!Languages> 
      default:
        name: Constant8
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_21
    type: constant
    value: !<!ConstantValue> 
      value: 9999999.999
    valueType: !<!NumberSchema> &ref_2
      type: number
      precision: 64
      language: !<!Languages> 
        default:
          name: Number
          description: ''
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: Constant9
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_22
    type: constant
    value: !<!ConstantValue> 
      value: -9999999.999
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant10
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_23
    type: constant
    value: !<!ConstantValue> 
      value: 啊齄丂狛狜隣郎隣兀﨩
    valueType: !<!StringSchema> &ref_3
      type: string
      language: !<!Languages> 
        default:
          name: String
          description: simple string
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: Constant11
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_24
    type: constant
    value: !<!ConstantValue> 
      value: 'begin!*''();:@ &=+$,/?#[]end'
    valueType: *ref_3
    language: !<!Languages> 
      default:
        name: Constant12
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_25
    type: constant
    value: !<!ConstantValue> 
      value: 'begin!*''();:@&=+$,end'
    valueType: *ref_3
    language: !<!Languages> 
      default:
        name: Constant13
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_26
    type: constant
    value: !<!ConstantValue> 
      value: ''
    valueType: *ref_3
    language: !<!Languages> 
      default:
        name: Constant14
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_33
    type: constant
    value: !<!ConstantValue> 
      value: ''
    valueType: *ref_4
    language: !<!Languages> 
      default:
        name: Constant15
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_35
    type: constant
    value: !<!ConstantValue> 
      value: '2012-01-01'
    valueType: !<!DateSchema> &ref_5
      type: date
      language: !<!Languages> 
        default:
          name: Date
          description: ''
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: Constant16
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_38
    type: constant
    value: !<!ConstantValue> 
      value: '2012-01-01T01:01:01Z'
    valueType: !<!DateTimeSchema> &ref_6
      type: date-time
      format: date-time
      language: !<!Languages> 
        default:
          name: DateTime
          description: ''
      protocol: !<!Protocols> {}
    language: !<!Languages> 
      default:
        name: Constant17
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_47
    type: constant
    value: !<!ConstantValue> 
      value: true
    valueType: *ref_0
    language: !<!Languages> 
      default:
        name: Constant18
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_48
    type: constant
    value: !<!ConstantValue> 
      value: false
    valueType: *ref_0
    language: !<!Languages> 
      default:
        name: Constant19
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_51
    type: constant
    value: !<!ConstantValue> 
      value: 1000000
    valueType: *ref_1
    language: !<!Languages> 
      default:
        name: Constant20
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_52
    type: constant
    value: !<!ConstantValue> 
      value: -1000000
    valueType: *ref_1
    language: !<!Languages> 
      default:
        name: Constant21
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_55
    type: constant
    value: !<!ConstantValue> 
      value: 10000000000
    valueType: *ref_1
    language: !<!Languages> 
      default:
        name: Constant22
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_56
    type: constant
    value: !<!ConstantValue> 
      value: -10000000000
    valueType: *ref_1
    language: !<!Languages> 
      default:
        name: Constant23
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_59
    type: constant
    value: !<!ConstantValue> 
      value: 103400000000000000000
    valueType: *ref_1
    language: !<!Languages> 
      default:
        name: Constant24
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_60
    type: constant
    value: !<!ConstantValue> 
      value: -1.034e-20
    valueType: *ref_1
    language: !<!Languages> 
      default:
        name: Constant25
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_63
    type: constant
    value: !<!ConstantValue> 
      value: 9999999.999
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant26
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_64
    type: constant
    value: !<!ConstantValue> 
      value: -9999999.999
    valueType: *ref_2
    language: !<!Languages> 
      default:
        name: Constant27
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_67
    type: constant
    value: !<!ConstantValue> 
      value: 啊齄丂狛狜隣郎隣兀﨩
    valueType: *ref_3
    language: !<!Languages> 
      default:
        name: Constant28
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_68
    type: constant
    value: !<!ConstantValue> 
      value: 'begin!*''();:@ &=+$,/?#[]end'
    valueType: *ref_3
    language: !<!Languages> 
      default:
        name: Constant29
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_69
    type: constant
    value: !<!ConstantValue> 
      value: ''
    valueType: *ref_3
    language: !<!Languages> 
      default:
        name: Constant30
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_74
    type: constant
    value: !<!ConstantValue> 
      value: ''
    valueType: *ref_4
    language: !<!Languages> 
      default:
        name: Constant31
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_76
    type: constant
    value: !<!ConstantValue> 
      value: '2012-01-01'
    valueType: *ref_5
    language: !<!Languages> 
      default:
        name: Constant32
        description: ''
    protocol: !<!Protocols> {}
  - !<!ConstantSchema> &ref_78
    type: constant
    value: !<!ConstantValue> 
      value: '2012-01-01T01:01:01Z'
    valueType: *ref_6
    language: !<!Languages> 
      default:
        name: Constant33
        description: ''
    protocol: !<!Protocols> {}
  dateTimes:
  - *ref_6
  - !<!DateTimeSchema> &ref_39
    type: date-time
    format: date-time
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    language: !<!Languages> 
      default:
        name: DateTime
        description: ''
    protocol: !<!Protocols> {}
  dates:
  - *ref_5
  - !<!DateSchema> &ref_36
    type: date
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    language: !<!Languages> 
      default:
        name: Date
        description: ''
    protocol: !<!Protocols> {}
  numbers:
  - *ref_7
  - *ref_1
  - *ref_2
  - !<!NumberSchema> &ref_53
    type: integer
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    precision: 32
    language: !<!Languages> 
      default:
        name: Integer
        description: ''
    protocol: !<!Protocols> {}
  - !<!NumberSchema> &ref_57
    type: integer
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    precision: 64
    language: !<!Languages> 
      default:
        name: Integer
        description: ''
    protocol: !<!Protocols> {}
  - !<!NumberSchema> &ref_61
    type: number
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    precision: 32
    language: !<!Languages> 
      default:
        name: Number
        description: ''
    protocol: !<!Protocols> {}
  - !<!NumberSchema> &ref_65
    type: number
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    precision: 64
    language: !<!Languages> 
      default:
        name: Number
        description: ''
    protocol: !<!Protocols> {}
  sealedChoices:
  - !<!SealedChoiceSchema> &ref_28
    choices:
    - !<!ChoiceValue> 
      value: red color
      language:
        default:
          name: RedColor
          description: ''
    - !<!ChoiceValue> 
      value: green color
      language:
        default:
          name: GreenColor
          description: ''
    - !<!ChoiceValue> 
      value: blue color
      language:
        default:
          name: BlueColor
          description: ''
    type: sealed-choice
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    choiceType: *ref_3
    language: !<!Languages> 
      default:
        name: UriColor
        description: ''
    protocol: !<!Protocols> {}
  strings:
  - *ref_3
  - *ref_8
  - *ref_9
  - *ref_10
  unixtimes:
  - !<!UnixTimeSchema> &ref_45
    type: unixtime
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    language: !<!Languages> 
      default:
        name: Unixtime
        description: 'date in seconds since 1970-01-01T00:00:00Z.'
    protocol: !<!Protocols> {}
globalParameters:
- !<!Parameter> &ref_87
  schema: *ref_9
  implementation: Client
  required: true
  extensions:
    x-ms-priority: 0
  language: !<!Languages> 
    default:
      name: globalStringPath
      description: A string value 'globalItemStringPath' that appears in the path
      serializedName: globalStringPath
  protocol: !<!Protocols> 
    http: !<!HttpParameter> 
      in: path
- !<!Parameter> &ref_88
  schema: *ref_9
  implementation: Client
  extensions:
    x-ms-priority: 1
  language: !<!Languages> 
    default:
      name: globalStringQuery
      description: should contain value null
      serializedName: globalStringQuery
  protocol: !<!Protocols> 
    http: !<!HttpParameter> 
      in: query
- !<!Parameter> &ref_11
  schema: *ref_3
  clientDefaultValue: 'http://localhost:3000'
  implementation: Client
  required: true
  extensions:
    x-ms-skip-url-encoding: true
  language: !<!Languages> 
    default:
      name: $host
      description: server parameter
      serializedName: $host
  protocol: !<!Protocols> 
    http: !<!HttpParameter> 
      in: uri
info: !<!Info> 
  description: Test Infrastructure for AutoRest
  title: url
operationGroups:
- !<!OperationGroup> 
  $key: paths
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_12
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: boolPath
            description: true boolean value
            serializedName: boolPath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/bool/true/{boolPath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: GetBooleanTrue
        description: Get true Boolean value on path
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_14
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: boolPath
            description: false boolean value
            serializedName: boolPath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/bool/false/{boolPath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: GetBooleanFalse
        description: Get false Boolean value on path
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_15
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: intPath
            description: '''1000000'' integer value'
            serializedName: intPath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/int/1000000/{intPath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: GetIntOneMillion
        description: Get '1000000' integer value
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_16
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: intPath
            description: '''-1000000'' integer value'
            serializedName: intPath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/int/-1000000/{intPath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: GetIntNegativeOneMillion
        description: Get '-1000000' integer value
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_17
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: longPath
            description: '''10000000000'' 64 bit integer value'
            serializedName: longPath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/long/10000000000/{longPath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: GetTenBillion
        description: Get '10000000000' 64 bit integer value
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_18
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: longPath
            description: '''-10000000000'' 64 bit integer value'
            serializedName: longPath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/long/-10000000000/{longPath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: GetNegativeTenBillion
        description: Get '-10000000000' 64 bit integer value
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_19
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: floatPath
            description: '''1.034E+20''numeric value'
            serializedName: floatPath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/float/1.034E+20/{floatPath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: FloatScientificPositive
        description: Get '1.034E+20' numeric value
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_20
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: floatPath
            description: '''-1.034E-20''numeric value'
            serializedName: floatPath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/float/-1.034E-20/{floatPath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: FloatScientificNegative
        description: Get '-1.034E-20' numeric value
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_21
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: doublePath
            description: '''9999999.999''numeric value'
            serializedName: doublePath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/double/9999999.999/{doublePath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: DoubleDecimalPositive
        description: Get '9999999.999' numeric value
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_22
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: doublePath
            description: '''-9999999.999''numeric value'
            serializedName: doublePath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/double/-9999999.999/{doublePath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: DoubleDecimalNegative
        description: Get '-9999999.999' numeric value
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_23
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: stringPath
            description: '''啊齄丂狛狜隣郎隣兀﨩''multi-byte string value'
            serializedName: stringPath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/string/unicode/{stringPath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: StringUnicode
        description: Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_24
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: stringPath
            description: '''begin!*''();:@ &=+$,/?#[]end'' url encoded string value'
            serializedName: stringPath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend/{stringPath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: StringUrlEncoded
        description: 'Get ''begin!*''();:@ &=+$,/?#[]end'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_25
        implementation: Method
        required: true
        extensions:
          x-ms-skip-url-encoding: true
        language: !<!Languages> 
          default:
            name: stringPath
            description: '''begin!*''();:@&=+$,end'' url encoded string value'
            serializedName: stringPath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/string/begin!*''();:@&=+$,end/{stringPath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: StringUrlNonEncoded
        description: 'Get ''begin!*''();:@&=+$,end'
        summary: 'https://tools.ietf.org/html/rfc3986#appendix-A ''path'' accept any ''pchar'' not encoded'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_26
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: stringPath
            description: ''''' string value'
            serializedName: stringPath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/string/empty/{stringPath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: StringEmpty
        description: Get ''
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_27
        schema: *ref_9
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: stringPath
            description: null string value
            serializedName: stringPath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      signatureParameters:
      - *ref_27
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/string/null/{stringPath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: StringNull
        description: Get null (should throw)
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_29
        schema: *ref_28
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: enumPath
            description: send the value green
            serializedName: enumPath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      signatureParameters:
      - *ref_29
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/enum/green%20color/{enumPath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: EnumValid
        description: Get using uri with 'green color' in path parameter
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_30
        schema: *ref_28
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: enumPath
            description: send the value green
            serializedName: enumPath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      signatureParameters:
      - *ref_30
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/string/null/{enumPath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: EnumNull
        description: Get null (should throw on the client before the request is sent on wire)
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_32
        schema: *ref_31
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: bytePath
            description: '''啊齄丂狛狜隣郎隣兀﨩'' multibyte value as utf-8 encoded byte array'
            serializedName: bytePath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      signatureParameters:
      - *ref_32
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/byte/multibyte/{bytePath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: ByteMultiByte
        description: Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_33
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: bytePath
            description: ''''' as byte array'
            serializedName: bytePath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/byte/empty/{bytePath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: ByteEmpty
        description: Get '' as byte array
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_34
        schema: *ref_31
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: bytePath
            description: '''啊齄丂狛狜隣郎隣兀﨩'' multibyte value as utf-8 encoded byte array'
            serializedName: bytePath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      signatureParameters:
      - *ref_34
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/byte/null/{bytePath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: ByteNull
        description: Get null as byte array (should throw)
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_35
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: datePath
            description: '''2012-01-01'' as date'
            serializedName: datePath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/date/2012-01-01/{datePath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: DateValid
        description: Get '2012-01-01' as date
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_37
        schema: *ref_36
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: datePath
            description: null as date (should throw)
            serializedName: datePath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      signatureParameters:
      - *ref_37
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/date/null/{datePath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: DateNull
        description: 'Get null as date - this should throw or be unusable on the client side, depending on date representation'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_38
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: dateTimePath
            description: '''2012-01-01T01:01:01Z'' as date-time'
            serializedName: dateTimePath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/datetime/2012-01-01T01%3A01%3A01Z/{dateTimePath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: DateTimeValid
        description: 'Get ''2012-01-01T01:01:01Z'' as date-time'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_40
        schema: *ref_39
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: dateTimePath
            description: null as date-time
            serializedName: dateTimePath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      signatureParameters:
      - *ref_40
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/datetime/null/{dateTimePath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '400'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: DateTimeNull
        description: 'Get null as date-time, should be disallowed or throw depending on representation of date-time'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_42
        schema: *ref_41
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: base64UrlPath
            description: base64url encoded value
            serializedName: base64UrlPath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      signatureParameters:
      - *ref_42
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/string/bG9yZW0/{base64UrlPath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: Base64Url
        description: Get 'lorem' encoded value as 'bG9yZW0' (base64url)
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_44
        schema: *ref_43
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: arrayPath
            description: 'an array of string [''ArrayPath1'', ''begin!*''();:@ &=+$,/?#[]end'' , null, ''''] using the csv-array format'
            serializedName: arrayPath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
            style: simple
      signatureParameters:
      - *ref_44
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/array/ArrayPath1%2cbegin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend%2c%2c/{arrayPath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: ArrayCsvInPath
        description: 'Get an array of string [''ArrayPath1'', ''begin!*''();:@ &=+$,/?#[]end'' , null, ''''] using the csv-array format'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_46
        schema: *ref_45
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: unixTimeUrlPath
            description: Unix time encoded value
            serializedName: unixTimeUrlPath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      signatureParameters:
      - *ref_46
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/paths/int/1460505600/{unixTimeUrlPath}'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: UnixTimeUrl
        description: Get the date 2016-04-13 encoded value as '1460505600' (Unix time)
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: Paths
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: queries
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_47
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: boolQuery
            description: true boolean value
            serializedName: boolQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/bool/true
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: GetBooleanTrue
        description: Get true Boolean value on path
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_48
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: boolQuery
            description: false boolean value
            serializedName: boolQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/bool/false
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: GetBooleanFalse
        description: Get false Boolean value on path
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_50
        schema: *ref_49
        implementation: Method
        language: !<!Languages> 
          default:
            name: boolQuery
            description: null boolean value
            serializedName: boolQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters:
      - *ref_50
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/bool/null
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: GetBooleanNull
        description: Get null Boolean value on query (query string should be absent)
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_51
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: intQuery
            description: '''1000000'' integer value'
            serializedName: intQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/int/1000000
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: GetIntOneMillion
        description: Get '1000000' integer value
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_52
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: intQuery
            description: '''-1000000'' integer value'
            serializedName: intQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/int/-1000000
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: GetIntNegativeOneMillion
        description: Get '-1000000' integer value
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_54
        schema: *ref_53
        implementation: Method
        language: !<!Languages> 
          default:
            name: intQuery
            description: null integer value
            serializedName: intQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters:
      - *ref_54
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/int/null
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: GetIntNull
        description: Get null integer value (no query parameter)
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_55
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: longQuery
            description: '''10000000000'' 64 bit integer value'
            serializedName: longQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/long/10000000000
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: GetTenBillion
        description: Get '10000000000' 64 bit integer value
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_56
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: longQuery
            description: '''-10000000000'' 64 bit integer value'
            serializedName: longQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/long/-10000000000
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: GetNegativeTenBillion
        description: Get '-10000000000' 64 bit integer value
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_58
        schema: *ref_57
        implementation: Method
        language: !<!Languages> 
          default:
            name: longQuery
            description: null 64 bit integer value
            serializedName: longQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters:
      - *ref_58
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/long/null
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: GetLongNull
        description: Get 'null 64 bit integer value (no query param in uri)
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_59
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: floatQuery
            description: '''1.034E+20''numeric value'
            serializedName: floatQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/float/1.034E+20
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: FloatScientificPositive
        description: Get '1.034E+20' numeric value
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_60
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: floatQuery
            description: '''-1.034E-20''numeric value'
            serializedName: floatQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/float/-1.034E-20
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: FloatScientificNegative
        description: Get '-1.034E-20' numeric value
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_62
        schema: *ref_61
        implementation: Method
        language: !<!Languages> 
          default:
            name: floatQuery
            description: null numeric value
            serializedName: floatQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters:
      - *ref_62
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/float/null
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: FloatNull
        description: Get null numeric value (no query parameter)
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_63
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: doubleQuery
            description: '''9999999.999''numeric value'
            serializedName: doubleQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/double/9999999.999
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: DoubleDecimalPositive
        description: Get '9999999.999' numeric value
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_64
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: doubleQuery
            description: '''-9999999.999''numeric value'
            serializedName: doubleQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/double/-9999999.999
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: DoubleDecimalNegative
        description: Get '-9999999.999' numeric value
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_66
        schema: *ref_65
        implementation: Method
        language: !<!Languages> 
          default:
            name: doubleQuery
            description: null numeric value
            serializedName: doubleQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters:
      - *ref_66
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/double/null
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: DoubleNull
        description: Get null numeric value (no query parameter)
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_67
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: stringQuery
            description: '''啊齄丂狛狜隣郎隣兀﨩''multi-byte string value'
            serializedName: stringQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/string/unicode/
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: StringUnicode
        description: Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_68
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: stringQuery
            description: '''begin!*''();:@ &=+$,/?#[]end'' url encoded string value'
            serializedName: stringQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: StringUrlEncoded
        description: 'Get ''begin!*''();:@ &=+$,/?#[]end'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_69
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: stringQuery
            description: ''''' string value'
            serializedName: stringQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/string/empty
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: StringEmpty
        description: Get ''
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_70
        schema: *ref_9
        implementation: Method
        language: !<!Languages> 
          default:
            name: stringQuery
            description: null string value
            serializedName: stringQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters:
      - *ref_70
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/string/null
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: StringNull
        description: Get null (no query parameter in url)
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_71
        schema: *ref_28
        implementation: Method
        language: !<!Languages> 
          default:
            name: enumQuery
            description: '''green color'' enum value'
            serializedName: enumQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters:
      - *ref_71
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/enum/green%20color
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: EnumValid
        description: Get using uri with query parameter 'green color'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_72
        schema: *ref_28
        implementation: Method
        language: !<!Languages> 
          default:
            name: enumQuery
            description: '''green color'' enum value'
            serializedName: enumQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters:
      - *ref_72
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/enum/null
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: EnumNull
        description: Get null (no query parameter in url)
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_73
        schema: *ref_31
        implementation: Method
        language: !<!Languages> 
          default:
            name: byteQuery
            description: '''啊齄丂狛狜隣郎隣兀﨩'' multibyte value as utf-8 encoded byte array'
            serializedName: byteQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters:
      - *ref_73
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/byte/multibyte
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: ByteMultiByte
        description: Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_74
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: byteQuery
            description: ''''' as byte array'
            serializedName: byteQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/byte/empty
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: ByteEmpty
        description: Get '' as byte array
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_75
        schema: *ref_31
        implementation: Method
        language: !<!Languages> 
          default:
            name: byteQuery
            description: '''啊齄丂狛狜隣郎隣兀﨩'' multibyte value as utf-8 encoded byte array'
            serializedName: byteQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters:
      - *ref_75
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/byte/null
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: ByteNull
        description: Get null as byte array (no query parameters in uri)
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_76
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: dateQuery
            description: '''2012-01-01'' as date'
            serializedName: dateQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/date/2012-01-01
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: DateValid
        description: Get '2012-01-01' as date
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_77
        schema: *ref_36
        implementation: Method
        language: !<!Languages> 
          default:
            name: dateQuery
            description: null as date (no query parameters in uri)
            serializedName: dateQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters:
      - *ref_77
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/date/null
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: DateNull
        description: Get null as date - this should result in no query parameters in uri
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> 
        schema: *ref_78
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: dateTimeQuery
            description: '''2012-01-01T01:01:01Z'' as date-time'
            serializedName: dateTimeQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters: []
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/datetime/2012-01-01T01%3A01%3A01Z
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: DateTimeValid
        description: 'Get ''2012-01-01T01:01:01Z'' as date-time'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_79
        schema: *ref_39
        implementation: Method
        language: !<!Languages> 
          default:
            name: dateTimeQuery
            description: null as date-time (no query parameters)
            serializedName: dateTimeQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters:
      - *ref_79
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/datetime/null
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: DateTimeNull
        description: 'Get null as date-time, should result in no query parameters in uri'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_81
        schema: *ref_80
        implementation: Method
        language: !<!Languages> 
          default:
            name: arrayQuery
            description: 'an array of string [''ArrayQuery1'', ''begin!*''();:@ &=+$,/?#[]end'' , null, ''''] using the csv-array format'
            serializedName: arrayQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
            style: form
      signatureParameters:
      - *ref_81
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/array/csv/string/valid
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: ArrayStringCsvValid
        description: 'Get an array of string [''ArrayQuery1'', ''begin!*''();:@ &=+$,/?#[]end'' , null, ''''] using the csv-array format'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_82
        schema: *ref_80
        implementation: Method
        language: !<!Languages> 
          default:
            name: arrayQuery
            description: 'an array of string [''ArrayQuery1'', ''begin!*''();:@ &=+$,/?#[]end'' , null, ''''] using the csv-array format'
            serializedName: arrayQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
            style: form
      signatureParameters:
      - *ref_82
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/array/csv/string/null
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: ArrayStringCsvNull
        description: Get a null array of string using the csv-array format
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_83
        schema: *ref_80
        implementation: Method
        language: !<!Languages> 
          default:
            name: arrayQuery
            description: 'an array of string [''ArrayQuery1'', ''begin!*''();:@ &=+$,/?#[]end'' , null, ''''] using the csv-array format'
            serializedName: arrayQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
            style: form
      signatureParameters:
      - *ref_83
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/array/csv/string/empty
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: ArrayStringCsvEmpty
        description: 'Get an empty array [] of string using the csv-array format'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_84
        schema: *ref_80
        implementation: Method
        language: !<!Languages> 
          default:
            name: arrayQuery
            description: 'an array of string [''ArrayQuery1'', ''begin!*''();:@ &=+$,/?#[]end'' , null, ''''] using the ssv-array format'
            serializedName: arrayQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
            style: spaceDelimited
      signatureParameters:
      - *ref_84
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/array/ssv/string/valid
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: ArrayStringSsvValid
        description: 'Get an array of string [''ArrayQuery1'', ''begin!*''();:@ &=+$,/?#[]end'' , null, ''''] using the ssv-array format'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_85
        schema: *ref_80
        implementation: Method
        language: !<!Languages> 
          default:
            name: arrayQuery
            description: 'an array of string [''ArrayQuery1'', ''begin!*''();:@ &=+$,/?#[]end'' , null, ''''] using the tsv-array format'
            serializedName: arrayQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
            style: tabDelimited
      signatureParameters:
      - *ref_85
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/array/tsv/string/valid
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: ArrayStringTsvValid
        description: 'Get an array of string [''ArrayQuery1'', ''begin!*''();:@ &=+$,/?#[]end'' , null, ''''] using the tsv-array format'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_86
        schema: *ref_80
        implementation: Method
        language: !<!Languages> 
          default:
            name: arrayQuery
            description: 'an array of string [''ArrayQuery1'', ''begin!*''();:@ &=+$,/?#[]end'' , null, ''''] using the pipes-array format'
            serializedName: arrayQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
            style: pipeDelimited
      signatureParameters:
      - *ref_86
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: /queries/array/pipes/string/valid
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: ArrayStringPipesValid
        description: 'Get an array of string [''ArrayQuery1'', ''begin!*''();:@ &=+$,/?#[]end'' , null, ''''] using the pipes-array format'
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: Queries
      description: ''
  protocol: !<!Protocols> {}
- !<!OperationGroup> 
  $key: pathItems
  operations:
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_89
        schema: *ref_9
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: pathItemStringPath
            description: A string value 'pathItemStringPath' that appears in the path
            serializedName: pathItemStringPath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      - !<!Parameter> &ref_90
        schema: *ref_9
        implementation: Method
        language: !<!Languages> 
          default:
            name: pathItemStringQuery
            description: A string value 'pathItemStringQuery' that appears as a query parameter
            serializedName: pathItemStringQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      - *ref_87
      - *ref_88
      - !<!Parameter> &ref_91
        schema: *ref_9
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: localStringPath
            description: should contain value 'localStringPath'
            serializedName: localStringPath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      - !<!Parameter> &ref_92
        schema: *ref_9
        implementation: Method
        language: !<!Languages> 
          default:
            name: localStringQuery
            description: should contain value 'localStringQuery'
            serializedName: localStringQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters:
      - *ref_89
      - *ref_90
      - *ref_91
      - *ref_92
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/pathItemStringQuery/localStringQuery'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: GetAllWithValues
        description: >-
          send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath', localStringPath='localStringPath', globalStringQuery='globalStringQuery', pathItemStringQuery='pathItemStringQuery',
          localStringQuery='localStringQuery'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_93
        schema: *ref_9
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: pathItemStringPath
            description: A string value 'pathItemStringPath' that appears in the path
            serializedName: pathItemStringPath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      - !<!Parameter> &ref_94
        schema: *ref_9
        implementation: Method
        language: !<!Languages> 
          default:
            name: pathItemStringQuery
            description: A string value 'pathItemStringQuery' that appears as a query parameter
            serializedName: pathItemStringQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      - *ref_87
      - *ref_88
      - !<!Parameter> &ref_95
        schema: *ref_9
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: localStringPath
            description: should contain value 'localStringPath'
            serializedName: localStringPath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      - !<!Parameter> &ref_96
        schema: *ref_9
        implementation: Method
        language: !<!Languages> 
          default:
            name: localStringQuery
            description: should contain value 'localStringQuery'
            serializedName: localStringQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters:
      - *ref_93
      - *ref_94
      - *ref_95
      - *ref_96
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/localStringQuery'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: GetGlobalQueryNull
        description: 'send globalStringPath=''globalStringPath'', pathItemStringPath=''pathItemStringPath'', localStringPath=''localStringPath'', globalStringQuery=null, pathItemStringQuery=''pathItemStringQuery'', localStringQuery=''localStringQuery'''
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_97
        schema: *ref_9
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: pathItemStringPath
            description: A string value 'pathItemStringPath' that appears in the path
            serializedName: pathItemStringPath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      - !<!Parameter> &ref_98
        schema: *ref_9
        implementation: Method
        language: !<!Languages> 
          default:
            name: pathItemStringQuery
            description: A string value 'pathItemStringQuery' that appears as a query parameter
            serializedName: pathItemStringQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      - *ref_87
      - *ref_88
      - !<!Parameter> &ref_99
        schema: *ref_9
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: localStringPath
            description: should contain value 'localStringPath'
            serializedName: localStringPath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      - !<!Parameter> &ref_100
        schema: *ref_9
        implementation: Method
        language: !<!Languages> 
          default:
            name: localStringQuery
            description: should contain value 'localStringQuery'
            serializedName: localStringQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters:
      - *ref_97
      - *ref_98
      - *ref_99
      - *ref_100
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/null'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: GetGlobalAndLocalQueryNull
        description: 'send globalStringPath=globalStringPath, pathItemStringPath=''pathItemStringPath'', localStringPath=''localStringPath'', globalStringQuery=null, pathItemStringQuery=''pathItemStringQuery'', localStringQuery=null'
    protocol: !<!Protocols> {}
  - !<!Operation> 
    apiVersions:
    - !<!ApiVersion> 
      version: 1.0.0
    request: !<!Request> 
      parameters:
      - *ref_11
      - !<!Parameter> &ref_101
        schema: *ref_9
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: pathItemStringPath
            description: A string value 'pathItemStringPath' that appears in the path
            serializedName: pathItemStringPath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      - !<!Parameter> &ref_102
        schema: *ref_9
        implementation: Method
        language: !<!Languages> 
          default:
            name: pathItemStringQuery
            description: A string value 'pathItemStringQuery' that appears as a query parameter
            serializedName: pathItemStringQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      - *ref_87
      - *ref_88
      - !<!Parameter> &ref_103
        schema: *ref_9
        implementation: Method
        required: true
        language: !<!Languages> 
          default:
            name: localStringPath
            description: should contain value 'localStringPath'
            serializedName: localStringPath
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: path
      - !<!Parameter> &ref_104
        schema: *ref_9
        implementation: Method
        language: !<!Languages> 
          default:
            name: localStringQuery
            description: should contain value 'localStringQuery'
            serializedName: localStringQuery
        protocol: !<!Protocols> 
          http: !<!HttpParameter> 
            in: query
      signatureParameters:
      - *ref_101
      - *ref_102
      - *ref_103
      - *ref_104
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpRequest> 
          path: '/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/null/null'
          method: get
          uri: '{$host}'
    responses:
    - !<!Response> 
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          statusCodes:
          - '200'
    exceptions:
    - !<!SchemaResponse> 
      schema: *ref_13
      language: !<!Languages> 
        default:
          name: ''
          description: ''
      protocol: !<!Protocols> 
        http: !<!HttpResponse> 
          knownMediaType: json
          mediaTypes:
          - application/json
          statusCodes:
          - default
    language: !<!Languages> 
      default:
        name: GetLocalPathItemQueryNull
        description: 'send globalStringPath=''globalStringPath'', pathItemStringPath=''pathItemStringPath'', localStringPath=''localStringPath'', globalStringQuery=''globalStringQuery'', pathItemStringQuery=null, localStringQuery=null'
    protocol: !<!Protocols> {}
  language: !<!Languages> 
    default:
      name: PathItems
      description: ''
  protocol: !<!Protocols> {}
language: !<!Languages> 
  default:
    name: Url
    description: ''
protocol: !<!Protocols> 
  http: !<!HttpModel> {}
