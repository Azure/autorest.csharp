// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;

namespace azure_special_properties
{
    /// <summary> The SkipUrlEncoding service client. </summary>
    public partial class SkipUrlEncodingClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal SkipUrlEncodingRestClient RestClient { get; }
        /// <summary> Initializes a new instance of SkipUrlEncodingClient for mocking. </summary>
        protected SkipUrlEncodingClient()
        {
        }
        /// <summary> Initializes a new instance of SkipUrlEncodingClient. </summary>
        internal SkipUrlEncodingClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string host = "http://localhost:3000")
        {
            RestClient = new SkipUrlEncodingRestClient(clientDiagnostics, pipeline, host);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Get method with unencoded path parameter with value &apos;path1/path2/path3&apos;. </summary>
        /// <param name="unencodedPathParam"> Unencoded path parameter with value &apos;path1/path2/path3&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetMethodPathValidAsync(string unencodedPathParam, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetMethodPathValidAsync(unencodedPathParam, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get method with unencoded path parameter with value &apos;path1/path2/path3&apos;. </summary>
        /// <param name="unencodedPathParam"> Unencoded path parameter with value &apos;path1/path2/path3&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetMethodPathValid(string unencodedPathParam, CancellationToken cancellationToken = default)
        {
            return RestClient.GetMethodPathValid(unencodedPathParam, cancellationToken);
        }

        /// <summary> Get method with unencoded path parameter with value &apos;path1/path2/path3&apos;. </summary>
        /// <param name="unencodedPathParam"> Unencoded path parameter with value &apos;path1/path2/path3&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetPathValidAsync(string unencodedPathParam, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetPathValidAsync(unencodedPathParam, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get method with unencoded path parameter with value &apos;path1/path2/path3&apos;. </summary>
        /// <param name="unencodedPathParam"> Unencoded path parameter with value &apos;path1/path2/path3&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetPathValid(string unencodedPathParam, CancellationToken cancellationToken = default)
        {
            return RestClient.GetPathValid(unencodedPathParam, cancellationToken);
        }

        /// <summary> Get method with unencoded path parameter with value &apos;path1/path2/path3&apos;. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetSwaggerPathValidAsync(CancellationToken cancellationToken = default)
        {
            return await RestClient.GetSwaggerPathValidAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get method with unencoded path parameter with value &apos;path1/path2/path3&apos;. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetSwaggerPathValid(CancellationToken cancellationToken = default)
        {
            return RestClient.GetSwaggerPathValid(cancellationToken);
        }

        /// <summary> Get method with unencoded query parameter with value &apos;value1&amp;q2=value2&amp;q3=value3&apos;. </summary>
        /// <param name="q1"> Unencoded query parameter with value &apos;value1&amp;q2=value2&amp;q3=value3&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetMethodQueryValidAsync(string q1, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetMethodQueryValidAsync(q1, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get method with unencoded query parameter with value &apos;value1&amp;q2=value2&amp;q3=value3&apos;. </summary>
        /// <param name="q1"> Unencoded query parameter with value &apos;value1&amp;q2=value2&amp;q3=value3&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetMethodQueryValid(string q1, CancellationToken cancellationToken = default)
        {
            return RestClient.GetMethodQueryValid(q1, cancellationToken);
        }

        /// <summary> Get method with unencoded query parameter with value null. </summary>
        /// <param name="q1"> Unencoded query parameter with value null. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetMethodQueryNullAsync(string q1 = null, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetMethodQueryNullAsync(q1, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get method with unencoded query parameter with value null. </summary>
        /// <param name="q1"> Unencoded query parameter with value null. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetMethodQueryNull(string q1 = null, CancellationToken cancellationToken = default)
        {
            return RestClient.GetMethodQueryNull(q1, cancellationToken);
        }

        /// <summary> Get method with unencoded query parameter with value &apos;value1&amp;q2=value2&amp;q3=value3&apos;. </summary>
        /// <param name="q1"> Unencoded query parameter with value &apos;value1&amp;q2=value2&amp;q3=value3&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetPathQueryValidAsync(string q1, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetPathQueryValidAsync(q1, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get method with unencoded query parameter with value &apos;value1&amp;q2=value2&amp;q3=value3&apos;. </summary>
        /// <param name="q1"> Unencoded query parameter with value &apos;value1&amp;q2=value2&amp;q3=value3&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetPathQueryValid(string q1, CancellationToken cancellationToken = default)
        {
            return RestClient.GetPathQueryValid(q1, cancellationToken);
        }

        /// <summary> Get method with unencoded query parameter with value &apos;value1&amp;q2=value2&amp;q3=value3&apos;. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetSwaggerQueryValidAsync(CancellationToken cancellationToken = default)
        {
            return await RestClient.GetSwaggerQueryValidAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get method with unencoded query parameter with value &apos;value1&amp;q2=value2&amp;q3=value3&apos;. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetSwaggerQueryValid(CancellationToken cancellationToken = default)
        {
            return RestClient.GetSwaggerQueryValid(cancellationToken);
        }
    }
}
