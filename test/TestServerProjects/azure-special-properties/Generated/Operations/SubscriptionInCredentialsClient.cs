// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;

namespace azure_special_properties
{
    /// <summary> The SubscriptionInCredentials service client. </summary>
    public partial class SubscriptionInCredentialsClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal SubscriptionInCredentialsRestClient RestClient { get; }
        /// <summary> Initializes a new instance of SubscriptionInCredentialsClient for mocking. </summary>
        protected SubscriptionInCredentialsClient()
        {
        }
        /// <summary> Initializes a new instance of SubscriptionInCredentialsClient. </summary>
        internal SubscriptionInCredentialsClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, string host = "http://localhost:3000", string apiVersion = "2015-07-01-preview")
        {
            RestClient = new SubscriptionInCredentialsRestClient(clientDiagnostics, pipeline, subscriptionId, host, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to &apos;1234-5678-9012-3456&apos; to succeed. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PostMethodGlobalValidAsync(CancellationToken cancellationToken = default)
        {
            return await RestClient.PostMethodGlobalValidAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary> POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to &apos;1234-5678-9012-3456&apos; to succeed. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PostMethodGlobalValid(CancellationToken cancellationToken = default)
        {
            return RestClient.PostMethodGlobalValid(cancellationToken);
        }

        /// <summary> POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to null, and client-side validation should prevent you from making this call. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PostMethodGlobalNullAsync(CancellationToken cancellationToken = default)
        {
            return await RestClient.PostMethodGlobalNullAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary> POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to null, and client-side validation should prevent you from making this call. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PostMethodGlobalNull(CancellationToken cancellationToken = default)
        {
            return RestClient.PostMethodGlobalNull(cancellationToken);
        }

        /// <summary> POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to &apos;1234-5678-9012-3456&apos; to succeed. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PostMethodGlobalNotProvidedValidAsync(CancellationToken cancellationToken = default)
        {
            return await RestClient.PostMethodGlobalNotProvidedValidAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary> POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to &apos;1234-5678-9012-3456&apos; to succeed. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PostMethodGlobalNotProvidedValid(CancellationToken cancellationToken = default)
        {
            return RestClient.PostMethodGlobalNotProvidedValid(cancellationToken);
        }

        /// <summary> POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to &apos;1234-5678-9012-3456&apos; to succeed. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PostPathGlobalValidAsync(CancellationToken cancellationToken = default)
        {
            return await RestClient.PostPathGlobalValidAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary> POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to &apos;1234-5678-9012-3456&apos; to succeed. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PostPathGlobalValid(CancellationToken cancellationToken = default)
        {
            return RestClient.PostPathGlobalValid(cancellationToken);
        }

        /// <summary> POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to &apos;1234-5678-9012-3456&apos; to succeed. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PostSwaggerGlobalValidAsync(CancellationToken cancellationToken = default)
        {
            return await RestClient.PostSwaggerGlobalValidAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary> POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to &apos;1234-5678-9012-3456&apos; to succeed. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PostSwaggerGlobalValid(CancellationToken cancellationToken = default)
        {
            return RestClient.PostSwaggerGlobalValid(cancellationToken);
        }
    }
}
