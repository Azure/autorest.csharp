// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;

namespace azure_special_properties
{
    /// <summary> The ApiVersionLocal service client. </summary>
    public partial class ApiVersionLocalClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal ApiVersionLocalRestClient RestClient { get; }
        /// <summary> Initializes a new instance of ApiVersionLocalClient for mocking. </summary>
        protected ApiVersionLocalClient()
        {
        }
        /// <summary> Initializes a new instance of ApiVersionLocalClient. </summary>
        internal ApiVersionLocalClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string host = "http://localhost:3000")
        {
            RestClient = new ApiVersionLocalRestClient(clientDiagnostics, pipeline, host);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Get method with api-version modeled in the method.  pass in api-version = &apos;2.0&apos; to succeed. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetMethodLocalValidAsync(CancellationToken cancellationToken = default)
        {
            return await RestClient.GetMethodLocalValidAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get method with api-version modeled in the method.  pass in api-version = &apos;2.0&apos; to succeed. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetMethodLocalValid(CancellationToken cancellationToken = default)
        {
            return RestClient.GetMethodLocalValid(cancellationToken);
        }

        /// <summary> Get method with api-version modeled in the method.  pass in api-version = null to succeed. </summary>
        /// <param name="apiVersion"> This should appear as a method parameter, use value null, this should result in no serialized parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetMethodLocalNullAsync(string apiVersion = null, CancellationToken cancellationToken = default)
        {
            return await RestClient.GetMethodLocalNullAsync(apiVersion, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get method with api-version modeled in the method.  pass in api-version = null to succeed. </summary>
        /// <param name="apiVersion"> This should appear as a method parameter, use value null, this should result in no serialized parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetMethodLocalNull(string apiVersion = null, CancellationToken cancellationToken = default)
        {
            return RestClient.GetMethodLocalNull(apiVersion, cancellationToken);
        }

        /// <summary> Get method with api-version modeled in the method.  pass in api-version = &apos;2.0&apos; to succeed. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetPathLocalValidAsync(CancellationToken cancellationToken = default)
        {
            return await RestClient.GetPathLocalValidAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get method with api-version modeled in the method.  pass in api-version = &apos;2.0&apos; to succeed. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetPathLocalValid(CancellationToken cancellationToken = default)
        {
            return RestClient.GetPathLocalValid(cancellationToken);
        }

        /// <summary> Get method with api-version modeled in the method.  pass in api-version = &apos;2.0&apos; to succeed. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetSwaggerLocalValidAsync(CancellationToken cancellationToken = default)
        {
            return await RestClient.GetSwaggerLocalValidAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get method with api-version modeled in the method.  pass in api-version = &apos;2.0&apos; to succeed. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetSwaggerLocalValid(CancellationToken cancellationToken = default)
        {
            return RestClient.GetSwaggerLocalValid(cancellationToken);
        }
    }
}
