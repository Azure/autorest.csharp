// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;

namespace httpInfrastructure
{
    public partial class HttpFailureClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal HttpFailureRestClient RestClient { get; }
        /// <summary> Initializes a new instance of HttpFailureClient for mocking. </summary>
        protected HttpFailureClient()
        {
        }
        /// <summary> Initializes a new instance of HttpFailureClient. </summary>
        internal HttpFailureClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string host = "http://localhost:3000")
        {
            RestClient = new HttpFailureRestClient(clientDiagnostics, pipeline, host);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Get empty error form server. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<bool>> GetEmptyErrorAsync(CancellationToken cancellationToken = default)
        {
            return await RestClient.GetEmptyErrorAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get empty error form server. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<bool> GetEmptyError(CancellationToken cancellationToken = default)
        {
            return RestClient.GetEmptyError(cancellationToken);
        }

        /// <summary> Get empty error form server. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<bool>> GetNoModelErrorAsync(CancellationToken cancellationToken = default)
        {
            return await RestClient.GetNoModelErrorAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get empty error form server. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<bool> GetNoModelError(CancellationToken cancellationToken = default)
        {
            return RestClient.GetNoModelError(cancellationToken);
        }

        /// <summary> Get empty response from server. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<bool>> GetNoModelEmptyAsync(CancellationToken cancellationToken = default)
        {
            return await RestClient.GetNoModelEmptyAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get empty response from server. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<bool> GetNoModelEmpty(CancellationToken cancellationToken = default)
        {
            return RestClient.GetNoModelEmpty(cancellationToken);
        }
    }
}
