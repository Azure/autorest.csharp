// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;

namespace validation.Models
{
    public partial class ConstantProduct : IUtf8JsonSerializable, IModelJsonSerializable<ConstantProduct>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<ConstantProduct>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<ConstantProduct>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("constProperty"u8);
            writer.WriteStringValue(ConstProperty.ToString());
            writer.WritePropertyName("constProperty2"u8);
            writer.WriteStringValue(ConstProperty2.ToString());
            writer.WriteEndObject();
        }

        ConstantProduct IModelJsonSerializable<ConstantProduct>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeConstantProduct(document.RootElement, options);
        }

        BinaryData IModelSerializable<ConstantProduct>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);
            return ModelSerializer.SerializeCore(this, options);
        }

        ConstantProduct IModelSerializable<ConstantProduct>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeConstantProduct(document.RootElement, options);
        }

        internal static ConstantProduct DeserializeConstantProduct(JsonElement element, ModelSerializerOptions options = null)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ConstantProductConstProperty constProperty = default;
            ConstantProductConstProperty2 constProperty2 = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("constProperty"u8))
                {
                    constProperty = new ConstantProductConstProperty(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("constProperty2"u8))
                {
                    constProperty2 = new ConstantProductConstProperty2(property.Value.GetString());
                    continue;
                }
            }
            return new ConstantProduct(constProperty, constProperty2);
        }
    }
}
