// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace multiple_inheritance.Models
{
    public partial class Kitten : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(EatsMiceYet))
            {
                writer.WritePropertyName("eatsMiceYet");
                writer.WriteBooleanValue(EatsMiceYet.Value);
            }
            if (Optional.IsDefined(LikesMilk))
            {
                writer.WritePropertyName("likesMilk");
                writer.WriteBooleanValue(LikesMilk.Value);
            }
            if (Optional.IsDefined(Meows))
            {
                writer.WritePropertyName("meows");
                writer.WriteBooleanValue(Meows.Value);
            }
            if (Optional.IsDefined(Hisses))
            {
                writer.WritePropertyName("hisses");
                writer.WriteBooleanValue(Hisses.Value);
            }
            writer.WritePropertyName("name");
            writer.WriteStringValue(Name);
            writer.WriteEndObject();
        }

        internal static Kitten DeserializeKitten(JsonElement element)
        {
            Optional<bool> eatsMiceYet = default;
            Optional<bool> likesMilk = default;
            Optional<bool> meows = default;
            Optional<bool> hisses = default;
            string name = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("eatsMiceYet"))
                {
                    eatsMiceYet = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("likesMilk"))
                {
                    likesMilk = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("meows"))
                {
                    meows = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("hisses"))
                {
                    hisses = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
            }
            return new Kitten(name, Optional.ToNullable(likesMilk), Optional.ToNullable(meows), Optional.ToNullable(hisses), Optional.ToNullable(eatsMiceYet));
        }
    }
}
