// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using Azure.Core;

namespace additionalProperties.Models
{
    /// <summary> The PetAPInPropertiesWithAPString. </summary>
    public partial class PetAPInPropertiesWithAPString : IDictionary<string, string>
    {
        /// <summary> Initializes a new instance of PetAPInPropertiesWithAPString. </summary>
        /// <param name="id"> . </param>
        /// <param name="odataLocation"> . </param>
        /// <exception cref="ArgumentNullException"> <paramref name="odataLocation"/> is null. </exception>
        public PetAPInPropertiesWithAPString(int id, string odataLocation)
        {
            if (odataLocation == null)
            {
                throw new ArgumentNullException(nameof(odataLocation));
            }

            Id = id;
            OdataLocation = odataLocation;
            AdditionalProperties = new ChangeTrackingDictionary<string, float>();
            MoreAdditionalProperties = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of PetAPInPropertiesWithAPString. </summary>
        /// <param name="id"> . </param>
        /// <param name="name"> . </param>
        /// <param name="status"> . </param>
        /// <param name="odataLocation"> . </param>
        /// <param name="additionalProperties"> Dictionary of &lt;number&gt;. </param>
        /// <param name="moreAdditionalProperties"> . </param>
        internal PetAPInPropertiesWithAPString(int id, string name, bool? status, string odataLocation, IDictionary<string, float> additionalProperties, IDictionary<string, string> moreAdditionalProperties)
        {
            Id = id;
            Name = name;
            Status = status;
            OdataLocation = odataLocation;
            AdditionalProperties = additionalProperties;
            MoreAdditionalProperties = moreAdditionalProperties;
        }

        public int Id { get; set; }
        public string Name { get; set; }
        public bool? Status { get; }
        public string OdataLocation { get; set; }
        /// <summary> Dictionary of &lt;number&gt;. </summary>
        public IDictionary<string, float> AdditionalProperties { get; }
        /// <inheritdoc />
        public IEnumerator<KeyValuePair<string, string>> GetEnumerator() => MoreAdditionalProperties.GetEnumerator();
        /// <inheritdoc />
        IEnumerator IEnumerable.GetEnumerator() => MoreAdditionalProperties.GetEnumerator();
        /// <inheritdoc />
        public bool TryGetValue(string key, out string value) => MoreAdditionalProperties.TryGetValue(key, out value);
        /// <inheritdoc />
        public bool ContainsKey(string key) => MoreAdditionalProperties.ContainsKey(key);
        /// <inheritdoc />
        public ICollection<string> Keys => MoreAdditionalProperties.Keys;
        /// <inheritdoc />
        public ICollection<string> Values => MoreAdditionalProperties.Values;
        /// <inheritdoc cref="ICollection{T}.Count"/>
        int ICollection<KeyValuePair<string, string>>.Count => MoreAdditionalProperties.Count;
        /// <inheritdoc />
        public void Add(string key, string value) => MoreAdditionalProperties.Add(key, value);
        /// <inheritdoc />
        public bool Remove(string key) => MoreAdditionalProperties.Remove(key);
        /// <inheritdoc cref="ICollection{T}.IsReadOnly"/>
        bool ICollection<KeyValuePair<string, string>>.IsReadOnly => MoreAdditionalProperties.IsReadOnly;
        /// <inheritdoc cref="ICollection{T}.Add"/>
        void ICollection<KeyValuePair<string, string>>.Add(KeyValuePair<string, string> value) => MoreAdditionalProperties.Add(value);
        /// <inheritdoc cref="ICollection{T}.Remove"/>
        bool ICollection<KeyValuePair<string, string>>.Remove(KeyValuePair<string, string> value) => MoreAdditionalProperties.Remove(value);
        /// <inheritdoc cref="ICollection{T}.Contains"/>
        bool ICollection<KeyValuePair<string, string>>.Contains(KeyValuePair<string, string> value) => MoreAdditionalProperties.Contains(value);
        /// <inheritdoc cref="ICollection{T}.CopyTo"/>
        void ICollection<KeyValuePair<string, string>>.CopyTo(KeyValuePair<string, string>[] destination, int offset) => MoreAdditionalProperties.CopyTo(destination, offset);
        /// <inheritdoc cref="ICollection{T}.Clear"/>
        void ICollection<KeyValuePair<string, string>>.Clear() => MoreAdditionalProperties.Clear();
        /// <inheritdoc />
        public string this[string key]
        {
            get => MoreAdditionalProperties[key];
            set => MoreAdditionalProperties[key] = value;
        }
    }
}
