// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;

namespace additionalProperties.Models
{
    public partial class PetAPInPropertiesWithAPString : IUtf8JsonSerializable, IModelJsonSerializable<PetAPInPropertiesWithAPString>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<PetAPInPropertiesWithAPString>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<PetAPInPropertiesWithAPString>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("id"u8);
            writer.WriteNumberValue(Id);
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format == ModelSerializerFormat.Json && Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteBooleanValue(Status.Value);
            }
            writer.WritePropertyName("@odata.location"u8);
            writer.WriteStringValue(OdataLocation);
            if (Optional.IsCollectionDefined(AdditionalProperties))
            {
                writer.WritePropertyName("additionalProperties"u8);
                writer.WriteStartObject();
                foreach (var item in AdditionalProperties)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteNumberValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (MoreAdditionalProperties != null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var item in MoreAdditionalProperties)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
            }
            writer.WriteEndObject();
        }

        PetAPInPropertiesWithAPString IModelJsonSerializable<PetAPInPropertiesWithAPString>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializePetAPInPropertiesWithAPString(document.RootElement, options);
        }

        BinaryData IModelSerializable<PetAPInPropertiesWithAPString>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);
            return ModelSerializer.SerializeCore(this, options);
        }

        PetAPInPropertiesWithAPString IModelSerializable<PetAPInPropertiesWithAPString>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializePetAPInPropertiesWithAPString(document.RootElement, options);
        }

        internal static PetAPInPropertiesWithAPString DeserializePetAPInPropertiesWithAPString(JsonElement element, ModelSerializerOptions options = null)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int id = default;
            Optional<string> name = default;
            Optional<bool> status = default;
            string odataLocation = default;
            Optional<IDictionary<string, float>> additionalProperties = default;
            IDictionary<string, string> moreAdditionalProperties = default;
            Dictionary<string, string> additionalPropertiesDictionary = new Dictionary<string, string>();
            if (options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in element.EnumerateObject())
                {
                    if (property.NameEquals("id"u8))
                    {
                        id = property.Value.GetInt32();
                        continue;
                    }
                    if (property.NameEquals("name"u8))
                    {
                        name = property.Value.GetString();
                        continue;
                    }
                    if (property.NameEquals("status"u8))
                    {
                        if (property.Value.ValueKind == JsonValueKind.Null)
                        {
                            continue;
                        }
                        status = property.Value.GetBoolean();
                        continue;
                    }
                    if (property.NameEquals("@odata.location"u8))
                    {
                        odataLocation = property.Value.GetString();
                        continue;
                    }
                    if (property.NameEquals("additionalProperties"u8))
                    {
                        if (property.Value.ValueKind == JsonValueKind.Null)
                        {
                            continue;
                        }
                        Dictionary<string, float> dictionary = new Dictionary<string, float>();
                        foreach (var property0 in property.Value.EnumerateObject())
                        {
                            dictionary.Add(property0.Name, property0.Value.GetSingle());
                        }
                        additionalProperties = dictionary;
                        continue;
                    }
                    additionalPropertiesDictionary.Add(property.Name, property.Value.GetString());
                }
                moreAdditionalProperties = additionalPropertiesDictionary;
            }
            return new PetAPInPropertiesWithAPString(id, name.Value, Optional.ToNullable(status), odataLocation, Optional.ToDictionary(additionalProperties), moreAdditionalProperties);
        }
    }
}
