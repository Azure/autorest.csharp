// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using System.Xml;
using Azure;
using Azure.Identity;
using NUnit.Framework;
using header_LowLevel;

namespace header_LowLevel.Tests
{
    public class HeaderClientTests : header_LowLevelTestBase
    {
        public HeaderClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        public async Task ParamExistingKey_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamExistingKeyAsync("<userAgent>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamExistingKey_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamExistingKeyAsync("<userAgent>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseExistingKey_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseExistingKeyAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseExistingKey_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseExistingKeyAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamProtectedKey_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamProtectedKeyAsync("<contentType>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamProtectedKey_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamProtectedKeyAsync("<contentType>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseProtectedKey_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseProtectedKeyAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseProtectedKey_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseProtectedKeyAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamInteger_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamIntegerAsync("<scenario>", 1234);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamInteger_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamIntegerAsync("<scenario>", 1234);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseInteger_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseIntegerAsync("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseInteger_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseIntegerAsync("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamLong_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamLongAsync("<scenario>", 1234L);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamLong_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamLongAsync("<scenario>", 1234L);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseLong_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseLongAsync("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseLong_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseLongAsync("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamFloat_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamFloatAsync("<scenario>", 123.45F);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamFloat_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamFloatAsync("<scenario>", 123.45F);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseFloat_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseFloatAsync("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseFloat_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseFloatAsync("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamDouble_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamDoubleAsync("<scenario>", 123.45);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamDouble_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamDoubleAsync("<scenario>", 123.45);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseDouble_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseDoubleAsync("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseDouble_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseDoubleAsync("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamBool_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamBoolAsync("<scenario>", true);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamBool_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamBoolAsync("<scenario>", true);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseBool_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseBoolAsync("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseBool_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseBoolAsync("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamString_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamStringAsync("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamString_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamStringAsync("<scenario>", value: "<value>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseString_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseStringAsync("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseString_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseStringAsync("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamDate_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamDateAsync("<scenario>", DateTimeOffset.Parse("2022-05-10"));
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamDate_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamDateAsync("<scenario>", DateTimeOffset.Parse("2022-05-10"));
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseDate_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseDateAsync("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseDate_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseDateAsync("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamDatetime_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamDatetimeAsync("<scenario>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamDatetime_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamDatetimeAsync("<scenario>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseDatetime_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseDatetimeAsync("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseDatetime_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseDatetimeAsync("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamDatetimeRfc1123_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamDatetimeRfc1123Async("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamDatetimeRfc1123_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamDatetimeRfc1123Async("<scenario>", value: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseDatetimeRfc1123_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseDatetimeRfc1123Async("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseDatetimeRfc1123_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseDatetimeRfc1123Async("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamDuration_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamDurationAsync("<scenario>", XmlConvert.ToTimeSpan("PT1H23M45S"));
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamDuration_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamDurationAsync("<scenario>", XmlConvert.ToTimeSpan("PT1H23M45S"));
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseDuration_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseDurationAsync("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseDuration_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseDurationAsync("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamByte_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamByteAsync("<scenario>", BinaryData.FromObjectAsJson(new object()));
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamByte_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamByteAsync("<scenario>", BinaryData.FromObjectAsJson(new object()));
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseByte_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseByteAsync("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseByte_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseByteAsync("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamEnum_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamEnumAsync("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ParamEnum_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ParamEnumAsync("<scenario>", value: "White");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseEnum_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseEnumAsync("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ResponseEnum_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.ResponseEnumAsync("<scenario>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task CustomRequestId_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.CustomRequestIdAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task CustomRequestId_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HeaderClient client = CreateHeaderClient(credential, endpoint);

            Response response = await client.CustomRequestIdAsync();
            Console.WriteLine(response.Status);
        }
    }
}
