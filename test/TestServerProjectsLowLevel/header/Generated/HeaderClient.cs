// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace header_LowLevel
{
    /// <summary> The Header service client. </summary>
    public partial class HeaderClient
    {
        private const string AuthorizationHeader = "Fake-Subscription-Key";
        private readonly AzureKeyCredential _keyCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of HeaderClient for mocking. </summary>
        protected HeaderClient()
        {
        }

        /// <summary> Initializes a new instance of HeaderClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public HeaderClient(AzureKeyCredential credential) : this(credential, new Uri("http://localhost:3000"), new HeaderClientOptions())
        {
        }

        /// <summary> Initializes a new instance of HeaderClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        public HeaderClient(AzureKeyCredential credential, Uri endpoint, HeaderClientOptions options)
        {
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new HeaderClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _keyCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new AzureKeyCredentialPolicy(_keyCredential, AuthorizationHeader) }, new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <summary> Send a post request with header value &quot;User-Agent&quot;: &quot;overwrite&quot;. </summary>
        /// <param name="userAgent"> Send a post request with header value &quot;User-Agent&quot;: &quot;overwrite&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userAgent"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamExistingKeyAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ParamExistingKeyAsync("<userAgent>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ParamExistingKeyAsync(string userAgent, RequestContext context = null)
        {
            Argument.AssertNotNull(userAgent, nameof(userAgent));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamExistingKey");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamExistingKeyRequest(userAgent, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header value &quot;User-Agent&quot;: &quot;overwrite&quot;. </summary>
        /// <param name="userAgent"> Send a post request with header value &quot;User-Agent&quot;: &quot;overwrite&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userAgent"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamExistingKey with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ParamExistingKey("<userAgent>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ParamExistingKey(string userAgent, RequestContext context = null)
        {
            Argument.AssertNotNull(userAgent, nameof(userAgent));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamExistingKey");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamExistingKeyRequest(userAgent, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header value &quot;User-Agent&quot;: &quot;overwrite&quot;. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseExistingKeyAsync.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ResponseExistingKeyAsync();
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ResponseExistingKeyAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseExistingKey");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseExistingKeyRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header value &quot;User-Agent&quot;: &quot;overwrite&quot;. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseExistingKey.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ResponseExistingKey();
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ResponseExistingKey(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseExistingKey");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseExistingKeyRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header value &quot;Content-Type&quot;: &quot;text/html&quot;. </summary>
        /// <param name="contentType"> Send a post request with header value &quot;Content-Type&quot;: &quot;text/html&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contentType"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamProtectedKeyAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ParamProtectedKeyAsync("<contentType>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ParamProtectedKeyAsync(string contentType, RequestContext context = null)
        {
            Argument.AssertNotNull(contentType, nameof(contentType));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamProtectedKey");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamProtectedKeyRequest(contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header value &quot;Content-Type&quot;: &quot;text/html&quot;. </summary>
        /// <param name="contentType"> Send a post request with header value &quot;Content-Type&quot;: &quot;text/html&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contentType"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamProtectedKey with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ParamProtectedKey("<contentType>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ParamProtectedKey(string contentType, RequestContext context = null)
        {
            Argument.AssertNotNull(contentType, nameof(contentType));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamProtectedKey");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamProtectedKeyRequest(contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header value &quot;Content-Type&quot;: &quot;text/html&quot;. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseProtectedKeyAsync.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ResponseProtectedKeyAsync();
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ResponseProtectedKeyAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseProtectedKey");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseProtectedKeyRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header value &quot;Content-Type&quot;: &quot;text/html&quot;. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseProtectedKey.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ResponseProtectedKey();
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ResponseProtectedKey(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseProtectedKey");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseProtectedKeyRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header values &quot;scenario&quot;: &quot;positive&quot;, &quot;value&quot;: 1 or &quot;scenario&quot;: &quot;negative&quot;, &quot;value&quot;: -2. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;positive&quot; or &quot;negative&quot;. </param>
        /// <param name="value"> Send a post request with header values 1 or -2. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamIntegerAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ParamIntegerAsync("<scenario>", 1234);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ParamIntegerAsync(string scenario, int value, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamInteger");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamIntegerRequest(scenario, value, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header values &quot;scenario&quot;: &quot;positive&quot;, &quot;value&quot;: 1 or &quot;scenario&quot;: &quot;negative&quot;, &quot;value&quot;: -2. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;positive&quot; or &quot;negative&quot;. </param>
        /// <param name="value"> Send a post request with header values 1 or -2. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamInteger with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ParamInteger("<scenario>", 1234);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ParamInteger(string scenario, int value, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamInteger");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamIntegerRequest(scenario, value, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header value &quot;value&quot;: 1 or -2. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;positive&quot; or &quot;negative&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseIntegerAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ResponseIntegerAsync("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ResponseIntegerAsync(string scenario, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseInteger");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseIntegerRequest(scenario, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header value &quot;value&quot;: 1 or -2. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;positive&quot; or &quot;negative&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseInteger with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ResponseInteger("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ResponseInteger(string scenario, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseInteger");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseIntegerRequest(scenario, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header values &quot;scenario&quot;: &quot;positive&quot;, &quot;value&quot;: 105 or &quot;scenario&quot;: &quot;negative&quot;, &quot;value&quot;: -2. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;positive&quot; or &quot;negative&quot;. </param>
        /// <param name="value"> Send a post request with header values 105 or -2. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamLongAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ParamLongAsync("<scenario>", 1234);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ParamLongAsync(string scenario, long value, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamLong");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamLongRequest(scenario, value, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header values &quot;scenario&quot;: &quot;positive&quot;, &quot;value&quot;: 105 or &quot;scenario&quot;: &quot;negative&quot;, &quot;value&quot;: -2. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;positive&quot; or &quot;negative&quot;. </param>
        /// <param name="value"> Send a post request with header values 105 or -2. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamLong with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ParamLong("<scenario>", 1234);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ParamLong(string scenario, long value, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamLong");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamLongRequest(scenario, value, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header value &quot;value&quot;: 105 or -2. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;positive&quot; or &quot;negative&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseLongAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ResponseLongAsync("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ResponseLongAsync(string scenario, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseLong");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseLongRequest(scenario, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header value &quot;value&quot;: 105 or -2. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;positive&quot; or &quot;negative&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseLong with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ResponseLong("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ResponseLong(string scenario, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseLong");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseLongRequest(scenario, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header values &quot;scenario&quot;: &quot;positive&quot;, &quot;value&quot;: 0.07 or &quot;scenario&quot;: &quot;negative&quot;, &quot;value&quot;: -3.0. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;positive&quot; or &quot;negative&quot;. </param>
        /// <param name="value"> Send a post request with header values 0.07 or -3.0. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamFloatAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ParamFloatAsync("<scenario>", 1234);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ParamFloatAsync(string scenario, float value, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamFloat");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamFloatRequest(scenario, value, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header values &quot;scenario&quot;: &quot;positive&quot;, &quot;value&quot;: 0.07 or &quot;scenario&quot;: &quot;negative&quot;, &quot;value&quot;: -3.0. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;positive&quot; or &quot;negative&quot;. </param>
        /// <param name="value"> Send a post request with header values 0.07 or -3.0. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamFloat with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ParamFloat("<scenario>", 1234);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ParamFloat(string scenario, float value, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamFloat");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamFloatRequest(scenario, value, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header value &quot;value&quot;: 0.07 or -3.0. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;positive&quot; or &quot;negative&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseFloatAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ResponseFloatAsync("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ResponseFloatAsync(string scenario, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseFloat");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseFloatRequest(scenario, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header value &quot;value&quot;: 0.07 or -3.0. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;positive&quot; or &quot;negative&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseFloat with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ResponseFloat("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ResponseFloat(string scenario, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseFloat");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseFloatRequest(scenario, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header values &quot;scenario&quot;: &quot;positive&quot;, &quot;value&quot;: 7e120 or &quot;scenario&quot;: &quot;negative&quot;, &quot;value&quot;: -3.0. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;positive&quot; or &quot;negative&quot;. </param>
        /// <param name="value"> Send a post request with header values 7e120 or -3.0. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamDoubleAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ParamDoubleAsync("<scenario>", 1234);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ParamDoubleAsync(string scenario, double value, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamDouble");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamDoubleRequest(scenario, value, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header values &quot;scenario&quot;: &quot;positive&quot;, &quot;value&quot;: 7e120 or &quot;scenario&quot;: &quot;negative&quot;, &quot;value&quot;: -3.0. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;positive&quot; or &quot;negative&quot;. </param>
        /// <param name="value"> Send a post request with header values 7e120 or -3.0. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamDouble with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ParamDouble("<scenario>", 1234);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ParamDouble(string scenario, double value, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamDouble");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamDoubleRequest(scenario, value, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header value &quot;value&quot;: 7e120 or -3.0. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;positive&quot; or &quot;negative&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseDoubleAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ResponseDoubleAsync("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ResponseDoubleAsync(string scenario, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseDouble");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseDoubleRequest(scenario, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header value &quot;value&quot;: 7e120 or -3.0. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;positive&quot; or &quot;negative&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseDouble with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ResponseDouble("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ResponseDouble(string scenario, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseDouble");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseDoubleRequest(scenario, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header values &quot;scenario&quot;: &quot;true&quot;, &quot;value&quot;: true or &quot;scenario&quot;: &quot;false&quot;, &quot;value&quot;: false. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;true&quot; or &quot;false&quot;. </param>
        /// <param name="value"> Send a post request with header values true or false. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamBoolAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ParamBoolAsync("<scenario>", true);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ParamBoolAsync(string scenario, bool value, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamBool");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamBoolRequest(scenario, value, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header values &quot;scenario&quot;: &quot;true&quot;, &quot;value&quot;: true or &quot;scenario&quot;: &quot;false&quot;, &quot;value&quot;: false. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;true&quot; or &quot;false&quot;. </param>
        /// <param name="value"> Send a post request with header values true or false. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamBool with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ParamBool("<scenario>", true);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ParamBool(string scenario, bool value, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamBool");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamBoolRequest(scenario, value, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header value &quot;value&quot;: true or false. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;true&quot; or &quot;false&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseBoolAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ResponseBoolAsync("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ResponseBoolAsync(string scenario, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseBool");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseBoolRequest(scenario, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header value &quot;value&quot;: true or false. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;true&quot; or &quot;false&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseBool with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ResponseBool("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ResponseBool(string scenario, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseBool");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseBoolRequest(scenario, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot;, &quot;value&quot;: &quot;The quick brown fox jumps over the lazy dog&quot; or &quot;scenario&quot;: &quot;null&quot;, &quot;value&quot;: null or &quot;scenario&quot;: &quot;empty&quot;, &quot;value&quot;: &quot;&quot;. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot; or &quot;null&quot; or &quot;empty&quot;. </param>
        /// <param name="value"> Send a post request with header values &quot;The quick brown fox jumps over the lazy dog&quot; or null or &quot;&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamStringAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ParamStringAsync("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call ParamStringAsync with all parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ParamStringAsync("<scenario>", "<value>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ParamStringAsync(string scenario, string value = null, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamString");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamStringRequest(scenario, value, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot;, &quot;value&quot;: &quot;The quick brown fox jumps over the lazy dog&quot; or &quot;scenario&quot;: &quot;null&quot;, &quot;value&quot;: null or &quot;scenario&quot;: &quot;empty&quot;, &quot;value&quot;: &quot;&quot;. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot; or &quot;null&quot; or &quot;empty&quot;. </param>
        /// <param name="value"> Send a post request with header values &quot;The quick brown fox jumps over the lazy dog&quot; or null or &quot;&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamString with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ParamString("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call ParamString with all parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ParamString("<scenario>", "<value>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ParamString(string scenario, string value = null, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamString");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamStringRequest(scenario, value, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header values &quot;The quick brown fox jumps over the lazy dog&quot; or null or &quot;&quot;. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot; or &quot;null&quot; or &quot;empty&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseStringAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ResponseStringAsync("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ResponseStringAsync(string scenario, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseString");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseStringRequest(scenario, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header values &quot;The quick brown fox jumps over the lazy dog&quot; or null or &quot;&quot;. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot; or &quot;null&quot; or &quot;empty&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseString with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ResponseString("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ResponseString(string scenario, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseString");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseStringRequest(scenario, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot;, &quot;value&quot;: &quot;2010-01-01&quot; or &quot;scenario&quot;: &quot;min&quot;, &quot;value&quot;: &quot;0001-01-01&quot;. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot; or &quot;min&quot;. </param>
        /// <param name="value"> Send a post request with header values &quot;2010-01-01&quot; or &quot;0001-01-01&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamDateAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ParamDateAsync("<scenario>", DateTimeOffset.UtcNow);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ParamDateAsync(string scenario, DateTimeOffset value, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamDate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamDateRequest(scenario, value, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot;, &quot;value&quot;: &quot;2010-01-01&quot; or &quot;scenario&quot;: &quot;min&quot;, &quot;value&quot;: &quot;0001-01-01&quot;. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot; or &quot;min&quot;. </param>
        /// <param name="value"> Send a post request with header values &quot;2010-01-01&quot; or &quot;0001-01-01&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamDate with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ParamDate("<scenario>", DateTimeOffset.UtcNow);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ParamDate(string scenario, DateTimeOffset value, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamDate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamDateRequest(scenario, value, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header values &quot;2010-01-01&quot; or &quot;0001-01-01&quot;. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot; or &quot;min&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseDateAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ResponseDateAsync("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ResponseDateAsync(string scenario, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseDate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseDateRequest(scenario, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header values &quot;2010-01-01&quot; or &quot;0001-01-01&quot;. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot; or &quot;min&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseDate with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ResponseDate("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ResponseDate(string scenario, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseDate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseDateRequest(scenario, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot;, &quot;value&quot;: &quot;2010-01-01T12:34:56Z&quot; or &quot;scenario&quot;: &quot;min&quot;, &quot;value&quot;: &quot;0001-01-01T00:00:00Z&quot;. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot; or &quot;min&quot;. </param>
        /// <param name="value"> Send a post request with header values &quot;2010-01-01T12:34:56Z&quot; or &quot;0001-01-01T00:00:00Z&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamDatetimeAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ParamDatetimeAsync("<scenario>", DateTimeOffset.UtcNow);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ParamDatetimeAsync(string scenario, DateTimeOffset value, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamDatetime");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamDatetimeRequest(scenario, value, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot;, &quot;value&quot;: &quot;2010-01-01T12:34:56Z&quot; or &quot;scenario&quot;: &quot;min&quot;, &quot;value&quot;: &quot;0001-01-01T00:00:00Z&quot;. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot; or &quot;min&quot;. </param>
        /// <param name="value"> Send a post request with header values &quot;2010-01-01T12:34:56Z&quot; or &quot;0001-01-01T00:00:00Z&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamDatetime with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ParamDatetime("<scenario>", DateTimeOffset.UtcNow);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ParamDatetime(string scenario, DateTimeOffset value, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamDatetime");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamDatetimeRequest(scenario, value, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header values &quot;2010-01-01T12:34:56Z&quot; or &quot;0001-01-01T00:00:00Z&quot;. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot; or &quot;min&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseDatetimeAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ResponseDatetimeAsync("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ResponseDatetimeAsync(string scenario, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseDatetime");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseDatetimeRequest(scenario, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header values &quot;2010-01-01T12:34:56Z&quot; or &quot;0001-01-01T00:00:00Z&quot;. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot; or &quot;min&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseDatetime with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ResponseDatetime("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ResponseDatetime(string scenario, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseDatetime");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseDatetimeRequest(scenario, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot;, &quot;value&quot;: &quot;Wed, 01 Jan 2010 12:34:56 GMT&quot; or &quot;scenario&quot;: &quot;min&quot;, &quot;value&quot;: &quot;Mon, 01 Jan 0001 00:00:00 GMT&quot;. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot; or &quot;min&quot;. </param>
        /// <param name="value"> Send a post request with header values &quot;Wed, 01 Jan 2010 12:34:56 GMT&quot; or &quot;Mon, 01 Jan 0001 00:00:00 GMT&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamDatetimeRfc1123Async with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ParamDatetimeRfc1123Async("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call ParamDatetimeRfc1123Async with all parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ParamDatetimeRfc1123Async("<scenario>", DateTimeOffset.UtcNow);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ParamDatetimeRfc1123Async(string scenario, DateTimeOffset? value = null, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamDatetimeRfc1123");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamDatetimeRfc1123Request(scenario, value, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot;, &quot;value&quot;: &quot;Wed, 01 Jan 2010 12:34:56 GMT&quot; or &quot;scenario&quot;: &quot;min&quot;, &quot;value&quot;: &quot;Mon, 01 Jan 0001 00:00:00 GMT&quot;. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot; or &quot;min&quot;. </param>
        /// <param name="value"> Send a post request with header values &quot;Wed, 01 Jan 2010 12:34:56 GMT&quot; or &quot;Mon, 01 Jan 0001 00:00:00 GMT&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamDatetimeRfc1123 with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ParamDatetimeRfc1123("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call ParamDatetimeRfc1123 with all parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ParamDatetimeRfc1123("<scenario>", DateTimeOffset.UtcNow);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ParamDatetimeRfc1123(string scenario, DateTimeOffset? value = null, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamDatetimeRfc1123");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamDatetimeRfc1123Request(scenario, value, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header values &quot;Wed, 01 Jan 2010 12:34:56 GMT&quot; or &quot;Mon, 01 Jan 0001 00:00:00 GMT&quot;. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot; or &quot;min&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseDatetimeRfc1123Async with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ResponseDatetimeRfc1123Async("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ResponseDatetimeRfc1123Async(string scenario, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseDatetimeRfc1123");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseDatetimeRfc1123Request(scenario, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header values &quot;Wed, 01 Jan 2010 12:34:56 GMT&quot; or &quot;Mon, 01 Jan 0001 00:00:00 GMT&quot;. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot; or &quot;min&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseDatetimeRfc1123 with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ResponseDatetimeRfc1123("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ResponseDatetimeRfc1123(string scenario, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseDatetimeRfc1123");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseDatetimeRfc1123Request(scenario, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot;, &quot;value&quot;: &quot;P123DT22H14M12.011S&quot;. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot;. </param>
        /// <param name="value"> Send a post request with header values &quot;P123DT22H14M12.011S&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamDurationAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ParamDurationAsync("<scenario>", new TimeSpan(1, 2, 3));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ParamDurationAsync(string scenario, TimeSpan value, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamDuration");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamDurationRequest(scenario, value, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot;, &quot;value&quot;: &quot;P123DT22H14M12.011S&quot;. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot;. </param>
        /// <param name="value"> Send a post request with header values &quot;P123DT22H14M12.011S&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamDuration with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ParamDuration("<scenario>", new TimeSpan(1, 2, 3));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ParamDuration(string scenario, TimeSpan value, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamDuration");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamDurationRequest(scenario, value, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header values &quot;P123DT22H14M12.011S&quot;. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseDurationAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ResponseDurationAsync("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ResponseDurationAsync(string scenario, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseDuration");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseDurationRequest(scenario, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header values &quot;P123DT22H14M12.011S&quot;. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseDuration with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ResponseDuration("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ResponseDuration(string scenario, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseDuration");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseDurationRequest(scenario, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot;, &quot;value&quot;: &quot;啊齄丂狛狜隣郎隣兀﨩&quot;. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot;. </param>
        /// <param name="value"> Send a post request with header values &quot;啊齄丂狛狜隣郎隣兀﨩&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> or <paramref name="value"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamByteAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ParamByteAsync("<scenario>", null);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ParamByteAsync(string scenario, byte[] value, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamByte");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamByteRequest(scenario, value, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot;, &quot;value&quot;: &quot;啊齄丂狛狜隣郎隣兀﨩&quot;. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot;. </param>
        /// <param name="value"> Send a post request with header values &quot;啊齄丂狛狜隣郎隣兀﨩&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> or <paramref name="value"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamByte with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ParamByte("<scenario>", null);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ParamByte(string scenario, byte[] value, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamByte");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamByteRequest(scenario, value, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header values &quot;啊齄丂狛狜隣郎隣兀﨩&quot;. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseByteAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ResponseByteAsync("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ResponseByteAsync(string scenario, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseByte");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseByteRequest(scenario, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header values &quot;啊齄丂狛狜隣郎隣兀﨩&quot;. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseByte with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ResponseByte("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ResponseByte(string scenario, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseByte");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseByteRequest(scenario, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot;, &quot;value&quot;: &quot;GREY&quot; or &quot;scenario&quot;: &quot;null&quot;, &quot;value&quot;: null. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot; or &quot;null&quot; or &quot;empty&quot;. </param>
        /// <param name="value"> Send a post request with header values &apos;GREY&apos; . Allowed values: &quot;White&quot; | &quot;black&quot; | &quot;GREY&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamEnumAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ParamEnumAsync("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call ParamEnumAsync with all parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ParamEnumAsync("<scenario>", "<value>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ParamEnumAsync(string scenario, string value = null, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamEnum");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamEnumRequest(scenario, value, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot;, &quot;value&quot;: &quot;GREY&quot; or &quot;scenario&quot;: &quot;null&quot;, &quot;value&quot;: null. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot; or &quot;null&quot; or &quot;empty&quot;. </param>
        /// <param name="value"> Send a post request with header values &apos;GREY&apos; . Allowed values: &quot;White&quot; | &quot;black&quot; | &quot;GREY&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ParamEnum with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ParamEnum("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call ParamEnum with all parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ParamEnum("<scenario>", "<value>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ParamEnum(string scenario, string value = null, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ParamEnum");
            scope.Start();
            try
            {
                using HttpMessage message = CreateParamEnumRequest(scenario, value, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header values &quot;GREY&quot; or null. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot; or &quot;null&quot; or &quot;empty&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseEnumAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.ResponseEnumAsync("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ResponseEnumAsync(string scenario, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseEnum");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseEnumRequest(scenario, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a response with header values &quot;GREY&quot; or null. </summary>
        /// <param name="scenario"> Send a post request with header values &quot;scenario&quot;: &quot;valid&quot; or &quot;null&quot; or &quot;empty&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scenario"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResponseEnum with required parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.ResponseEnum("<scenario>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response ResponseEnum(string scenario, RequestContext context = null)
        {
            Argument.AssertNotNull(scenario, nameof(scenario));

            using var scope = ClientDiagnostics.CreateScope("HeaderClient.ResponseEnum");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResponseEnumRequest(scenario, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the header of the request. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CustomRequestIdAsync.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = await client.CustomRequestIdAsync();
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> CustomRequestIdAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("HeaderClient.CustomRequestId");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCustomRequestIdRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Send x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the header of the request. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CustomRequestId.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new HeaderClient(credential);
        /// 
        /// Response response = client.CustomRequestId();
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response CustomRequestId(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("HeaderClient.CustomRequestId");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCustomRequestIdRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateParamExistingKeyRequest(string userAgent, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/param/existingkey", false);
            request.Uri = uri;
            request.Headers.Add("User-Agent", userAgent);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateResponseExistingKeyRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/response/existingkey", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateParamProtectedKeyRequest(string contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/param/protectedkey", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateResponseProtectedKeyRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/response/protectedkey", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateParamIntegerRequest(string scenario, int value, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/param/prim/integer", false);
            request.Uri = uri;
            request.Headers.Add("scenario", scenario);
            request.Headers.Add("value", value);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateResponseIntegerRequest(string scenario, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/response/prim/integer", false);
            request.Uri = uri;
            request.Headers.Add("scenario", scenario);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateParamLongRequest(string scenario, long value, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/param/prim/long", false);
            request.Uri = uri;
            request.Headers.Add("scenario", scenario);
            request.Headers.Add("value", value);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateResponseLongRequest(string scenario, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/response/prim/long", false);
            request.Uri = uri;
            request.Headers.Add("scenario", scenario);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateParamFloatRequest(string scenario, float value, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/param/prim/float", false);
            request.Uri = uri;
            request.Headers.Add("scenario", scenario);
            request.Headers.Add("value", value);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateResponseFloatRequest(string scenario, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/response/prim/float", false);
            request.Uri = uri;
            request.Headers.Add("scenario", scenario);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateParamDoubleRequest(string scenario, double value, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/param/prim/double", false);
            request.Uri = uri;
            request.Headers.Add("scenario", scenario);
            request.Headers.Add("value", value);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateResponseDoubleRequest(string scenario, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/response/prim/double", false);
            request.Uri = uri;
            request.Headers.Add("scenario", scenario);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateParamBoolRequest(string scenario, bool value, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/param/prim/bool", false);
            request.Uri = uri;
            request.Headers.Add("scenario", scenario);
            request.Headers.Add("value", value);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateResponseBoolRequest(string scenario, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/response/prim/bool", false);
            request.Uri = uri;
            request.Headers.Add("scenario", scenario);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateParamStringRequest(string scenario, string value, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/param/prim/string", false);
            request.Uri = uri;
            request.Headers.Add("scenario", scenario);
            if (value != null)
            {
                request.Headers.Add("value", value);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateResponseStringRequest(string scenario, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/response/prim/string", false);
            request.Uri = uri;
            request.Headers.Add("scenario", scenario);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateParamDateRequest(string scenario, DateTimeOffset value, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/param/prim/date", false);
            request.Uri = uri;
            request.Headers.Add("scenario", scenario);
            request.Headers.Add("value", value, "D");
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateResponseDateRequest(string scenario, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/response/prim/date", false);
            request.Uri = uri;
            request.Headers.Add("scenario", scenario);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateParamDatetimeRequest(string scenario, DateTimeOffset value, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/param/prim/datetime", false);
            request.Uri = uri;
            request.Headers.Add("scenario", scenario);
            request.Headers.Add("value", value, "O");
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateResponseDatetimeRequest(string scenario, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/response/prim/datetime", false);
            request.Uri = uri;
            request.Headers.Add("scenario", scenario);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateParamDatetimeRfc1123Request(string scenario, DateTimeOffset? value, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/param/prim/datetimerfc1123", false);
            request.Uri = uri;
            request.Headers.Add("scenario", scenario);
            if (value != null)
            {
                request.Headers.Add("value", value.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateResponseDatetimeRfc1123Request(string scenario, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/response/prim/datetimerfc1123", false);
            request.Uri = uri;
            request.Headers.Add("scenario", scenario);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateParamDurationRequest(string scenario, TimeSpan value, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/param/prim/duration", false);
            request.Uri = uri;
            request.Headers.Add("scenario", scenario);
            request.Headers.Add("value", value, "P");
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateResponseDurationRequest(string scenario, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/response/prim/duration", false);
            request.Uri = uri;
            request.Headers.Add("scenario", scenario);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateParamByteRequest(string scenario, byte[] value, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/param/prim/byte", false);
            request.Uri = uri;
            request.Headers.Add("scenario", scenario);
            request.Headers.Add("value", value, "D");
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateResponseByteRequest(string scenario, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/response/prim/byte", false);
            request.Uri = uri;
            request.Headers.Add("scenario", scenario);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateParamEnumRequest(string scenario, string value, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/param/prim/enum", false);
            request.Uri = uri;
            request.Headers.Add("scenario", scenario);
            if (value != null)
            {
                request.Headers.Add("value", value);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateResponseEnumRequest(string scenario, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/response/prim/enum", false);
            request.Uri = uri;
            request.Headers.Add("scenario", scenario);
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCustomRequestIdRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/header/custom/x-ms-client-request-id/9C4D50EE-2D56-4CD3-8152-34347DC9F2B0", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
