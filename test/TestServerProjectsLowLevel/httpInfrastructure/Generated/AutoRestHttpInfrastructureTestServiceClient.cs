// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace httpInfrastructure_LowLevel
{
    // Data plane generated client. The AutoRestHttpInfrastructureTestService service client.
    /// <summary> The AutoRestHttpInfrastructureTestService service client. </summary>
    public partial class AutoRestHttpInfrastructureTestServiceClient
    {
        private const string AuthorizationHeader = "Fake-Subscription-Key";
        private readonly AzureKeyCredential _keyCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of AutoRestHttpInfrastructureTestServiceClient for mocking. </summary>
        protected AutoRestHttpInfrastructureTestServiceClient()
        {
        }

        /// <summary> Initializes a new instance of AutoRestHttpInfrastructureTestServiceClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public AutoRestHttpInfrastructureTestServiceClient(AzureKeyCredential credential) : this(credential, new Uri("http://localhost:3000"), new AutoRestHttpInfrastructureTestServiceClientOptions())
        {
        }

        /// <summary> Initializes a new instance of AutoRestHttpInfrastructureTestServiceClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        public AutoRestHttpInfrastructureTestServiceClient(AzureKeyCredential credential, Uri endpoint, AutoRestHttpInfrastructureTestServiceClientOptions options)
        {
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new AutoRestHttpInfrastructureTestServiceClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _keyCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new AzureKeyCredentialPolicy(_keyCredential, AuthorizationHeader) }, new ResponseClassifier());
            _endpoint = endpoint;
        }

        private HttpFailure _cachedHttpFailure;
        private HttpSuccess _cachedHttpSuccess;
        private HttpRedirects _cachedHttpRedirects;
        private HttpClientFailure _cachedHttpClientFailure;
        private HttpServerFailure _cachedHttpServerFailure;
        private HttpRetry _cachedHttpRetry;
        private MultipleResponses _cachedMultipleResponses;

        /// <summary> Initializes a new instance of HttpFailure. </summary>
        public virtual HttpFailure GetHttpFailureClient()
        {
            return Volatile.Read(ref _cachedHttpFailure) ?? Interlocked.CompareExchange(ref _cachedHttpFailure, new HttpFailure(ClientDiagnostics, _pipeline, _keyCredential, _endpoint), null) ?? _cachedHttpFailure;
        }

        /// <summary> Initializes a new instance of HttpSuccess. </summary>
        public virtual HttpSuccess GetHttpSuccessClient()
        {
            return Volatile.Read(ref _cachedHttpSuccess) ?? Interlocked.CompareExchange(ref _cachedHttpSuccess, new HttpSuccess(ClientDiagnostics, _pipeline, _keyCredential, _endpoint), null) ?? _cachedHttpSuccess;
        }

        /// <summary> Initializes a new instance of HttpRedirects. </summary>
        public virtual HttpRedirects GetHttpRedirectsClient()
        {
            return Volatile.Read(ref _cachedHttpRedirects) ?? Interlocked.CompareExchange(ref _cachedHttpRedirects, new HttpRedirects(ClientDiagnostics, _pipeline, _keyCredential, _endpoint), null) ?? _cachedHttpRedirects;
        }

        /// <summary> Initializes a new instance of HttpClientFailure. </summary>
        public virtual HttpClientFailure GetHttpClientFailureClient()
        {
            return Volatile.Read(ref _cachedHttpClientFailure) ?? Interlocked.CompareExchange(ref _cachedHttpClientFailure, new HttpClientFailure(ClientDiagnostics, _pipeline, _keyCredential, _endpoint), null) ?? _cachedHttpClientFailure;
        }

        /// <summary> Initializes a new instance of HttpServerFailure. </summary>
        public virtual HttpServerFailure GetHttpServerFailureClient()
        {
            return Volatile.Read(ref _cachedHttpServerFailure) ?? Interlocked.CompareExchange(ref _cachedHttpServerFailure, new HttpServerFailure(ClientDiagnostics, _pipeline, _keyCredential, _endpoint), null) ?? _cachedHttpServerFailure;
        }

        /// <summary> Initializes a new instance of HttpRetry. </summary>
        public virtual HttpRetry GetHttpRetryClient()
        {
            return Volatile.Read(ref _cachedHttpRetry) ?? Interlocked.CompareExchange(ref _cachedHttpRetry, new HttpRetry(ClientDiagnostics, _pipeline, _keyCredential, _endpoint), null) ?? _cachedHttpRetry;
        }

        /// <summary> Initializes a new instance of MultipleResponses. </summary>
        public virtual MultipleResponses GetMultipleResponsesClient()
        {
            return Volatile.Read(ref _cachedMultipleResponses) ?? Interlocked.CompareExchange(ref _cachedMultipleResponses, new MultipleResponses(ClientDiagnostics, _pipeline, _keyCredential, _endpoint), null) ?? _cachedMultipleResponses;
        }
    }
}
