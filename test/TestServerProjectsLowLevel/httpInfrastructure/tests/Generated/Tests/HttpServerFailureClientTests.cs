// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using httpInfrastructure_LowLevel;

namespace httpInfrastructure_LowLevel.Tests
{
    public class HttpServerFailureClientTests : httpInfrastructure_LowLevelTestBase
    {
        public HttpServerFailureClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        public async Task Head501_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpServerFailureClient client = CreateHttpServerFailureClient(credential, endpoint);

            Response response = await client.Head501Async();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Head501_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpServerFailureClient client = CreateHttpServerFailureClient(credential, endpoint);

            Response response = await client.Head501Async();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Get501_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpServerFailureClient client = CreateHttpServerFailureClient(credential, endpoint);

            Response response = await client.Get501Async();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Get501_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpServerFailureClient client = CreateHttpServerFailureClient(credential, endpoint);

            Response response = await client.Get501Async();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Post505_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpServerFailureClient client = CreateHttpServerFailureClient(credential, endpoint);

            RequestContent content = null;
            Response response = await client.Post505Async(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Post505_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpServerFailureClient client = CreateHttpServerFailureClient(credential, endpoint);

            RequestContent content = RequestContent.Create("true");
            Response response = await client.Post505Async(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Delete505_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpServerFailureClient client = CreateHttpServerFailureClient(credential, endpoint);

            RequestContent content = null;
            Response response = await client.Delete505Async(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Delete505_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpServerFailureClient client = CreateHttpServerFailureClient(credential, endpoint);

            RequestContent content = RequestContent.Create("true");
            Response response = await client.Delete505Async(content);
            Console.WriteLine(response.Status);
        }
    }
}
