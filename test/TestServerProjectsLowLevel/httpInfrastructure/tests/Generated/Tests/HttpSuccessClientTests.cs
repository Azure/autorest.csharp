// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using httpInfrastructure_LowLevel;

namespace httpInfrastructure_LowLevel.Tests
{
    public class HttpSuccessClientTests : httpInfrastructure_LowLevelTestBase
    {
        public HttpSuccessClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Head200_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            Response response = await client.Head200Async();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Head200_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            Response response = await client.Head200Async();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Get200_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            Response response = await client.Get200Async(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Get200_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            Response response = await client.Get200Async(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Options200_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            Response response = await client.Options200Async(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Options200_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            Response response = await client.Options200Async(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Put200_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = null;
            Response response = await client.Put200Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Put200_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = RequestContent.Create("true");
            Response response = await client.Put200Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Patch200_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = null;
            Response response = await client.Patch200Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Patch200_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = RequestContent.Create("true");
            Response response = await client.Patch200Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Post200_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = null;
            Response response = await client.Post200Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Post200_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = RequestContent.Create("true");
            Response response = await client.Post200Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Delete200_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = null;
            Response response = await client.Delete200Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Delete200_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = RequestContent.Create("true");
            Response response = await client.Delete200Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Put201_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = null;
            Response response = await client.Put201Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Put201_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = RequestContent.Create("true");
            Response response = await client.Put201Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Post201_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = null;
            Response response = await client.Post201Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Post201_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = RequestContent.Create("true");
            Response response = await client.Post201Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Put202_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = null;
            Response response = await client.Put202Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Put202_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = RequestContent.Create("true");
            Response response = await client.Put202Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Patch202_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = null;
            Response response = await client.Patch202Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Patch202_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = RequestContent.Create("true");
            Response response = await client.Patch202Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Post202_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = null;
            Response response = await client.Post202Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Post202_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = RequestContent.Create("true");
            Response response = await client.Post202Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Delete202_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = null;
            Response response = await client.Delete202Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Delete202_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = RequestContent.Create("true");
            Response response = await client.Delete202Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Head204_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            Response response = await client.Head204Async();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Head204_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            Response response = await client.Head204Async();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Put204_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = null;
            Response response = await client.Put204Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Put204_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = RequestContent.Create("true");
            Response response = await client.Put204Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Patch204_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = null;
            Response response = await client.Patch204Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Patch204_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = RequestContent.Create("true");
            Response response = await client.Patch204Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Post204_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = null;
            Response response = await client.Post204Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Post204_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = RequestContent.Create("true");
            Response response = await client.Post204Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Delete204_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = null;
            Response response = await client.Delete204Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Delete204_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            RequestContent content = RequestContent.Create("true");
            Response response = await client.Delete204Async(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Head404_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            Response response = await client.Head404Async();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Head404_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            Response response = await client.Head404Async();
        }
    }
}
