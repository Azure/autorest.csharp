<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="Head200Async(global::Azure.RequestContext)">
<example>
This sample shows how to call Head200Async.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

Response response = await client.Head200Async(new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Head200(global::Azure.RequestContext)">
<example>
This sample shows how to call Head200.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

Response response = client.Head200(new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Get200Async(global::Azure.RequestContext)">
<example>
This sample shows how to call Get200Async and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

Response response = await client.Get200Async(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
</example>
    </member>
    <member name="Get200(global::Azure.RequestContext)">
<example>
This sample shows how to call Get200 and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

Response response = client.Get200(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
</example>
    </member>
    <member name="Options200Async(global::Azure.RequestContext)">
<example>
This sample shows how to call Options200Async and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

Response response = await client.Options200Async(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
</example>
    </member>
    <member name="Options200(global::Azure.RequestContext)">
<example>
This sample shows how to call Options200 and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

Response response = client.Options200(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
</example>
    </member>
    <member name="Put200Async(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Put200Async with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = await client.Put200Async(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Put200(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Put200 with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = client.Put200(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Patch200Async(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Patch200Async with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = await client.Patch200Async(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Patch200(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Patch200 with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = client.Patch200(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Post200Async(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Post200Async with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = await client.Post200Async(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Post200(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Post200 with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = client.Post200(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Delete200Async(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Delete200Async with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = await client.Delete200Async(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Delete200(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Delete200 with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = client.Delete200(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Put201Async(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Put201Async with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = await client.Put201Async(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Put201(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Put201 with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = client.Put201(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Post201Async(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Post201Async with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = await client.Post201Async(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Post201(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Post201 with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = client.Post201(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Put202Async(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Put202Async with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = await client.Put202Async(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Put202(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Put202 with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = client.Put202(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Patch202Async(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Patch202Async with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = await client.Patch202Async(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Patch202(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Patch202 with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = client.Patch202(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Post202Async(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Post202Async with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = await client.Post202Async(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Post202(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Post202 with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = client.Post202(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Delete202Async(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Delete202Async with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = await client.Delete202Async(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Delete202(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Delete202 with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = client.Delete202(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Head204Async(global::Azure.RequestContext)">
<example>
This sample shows how to call Head204Async.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

Response response = await client.Head204Async(new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Head204(global::Azure.RequestContext)">
<example>
This sample shows how to call Head204.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

Response response = client.Head204(new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Put204Async(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Put204Async with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = await client.Put204Async(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Put204(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Put204 with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = client.Put204(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Patch204Async(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Patch204Async with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = await client.Patch204Async(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Patch204(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Patch204 with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = client.Patch204(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Post204Async(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Post204Async with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = await client.Post204Async(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Post204(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Post204 with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = client.Post204(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Delete204Async(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Delete204Async with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = await client.Delete204Async(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Delete204(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Delete204 with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

var data = true;

Response response = client.Delete204(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Head404Async(global::Azure.RequestContext)">
<example>
This sample shows how to call Head404Async.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

Response response = await client.Head404Async(new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Head404(global::Azure.RequestContext)">
<example>
This sample shows how to call Head404.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new HttpSuccessClient(credential);

Response response = client.Head404(new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
  </members>
</doc>