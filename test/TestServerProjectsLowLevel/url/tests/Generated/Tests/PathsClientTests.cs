// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Identity;
using NUnit.Framework;
using url_LowLevel;

namespace url_LowLevel.Tests
{
    public class PathsClientTests : url_LowLevelTestBase
    {
        public PathsClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        public async Task GetBooleanTrue_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.GetBooleanTrueAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task GetBooleanTrue_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.GetBooleanTrueAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task GetBooleanFalse_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.GetBooleanFalseAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task GetBooleanFalse_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.GetBooleanFalseAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task GetIntOneMillion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.GetIntOneMillionAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task GetIntOneMillion_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.GetIntOneMillionAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task GetIntNegativeOneMillion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.GetIntNegativeOneMillionAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task GetIntNegativeOneMillion_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.GetIntNegativeOneMillionAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task GetTenBillion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.GetTenBillionAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task GetTenBillion_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.GetTenBillionAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task GetNegativeTenBillion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.GetNegativeTenBillionAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task GetNegativeTenBillion_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.GetNegativeTenBillionAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task FloatScientificPositive_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.FloatScientificPositiveAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task FloatScientificPositive_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.FloatScientificPositiveAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task FloatScientificNegative_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.FloatScientificNegativeAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task FloatScientificNegative_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.FloatScientificNegativeAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task DoubleDecimalPositive_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.DoubleDecimalPositiveAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task DoubleDecimalPositive_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.DoubleDecimalPositiveAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task DoubleDecimalNegative_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.DoubleDecimalNegativeAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task DoubleDecimalNegative_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.DoubleDecimalNegativeAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task StringUnicode_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.StringUnicodeAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task StringUnicode_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.StringUnicodeAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task StringUrlEncoded_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.StringUrlEncodedAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task StringUrlEncoded_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.StringUrlEncodedAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task StringUrlNonEncoded_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.StringUrlNonEncodedAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task StringUrlNonEncoded_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.StringUrlNonEncodedAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task StringEmpty_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.StringEmptyAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task StringEmpty_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.StringEmptyAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task StringNull_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.StringNullAsync("<stringPath>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task StringNull_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.StringNullAsync("<stringPath>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task EnumValid_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.EnumValidAsync("red color");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task EnumValid_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.EnumValidAsync("red color");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task EnumNull_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.EnumNullAsync("red color");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task EnumNull_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.EnumNullAsync("red color");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ByteMultiByte_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.ByteMultiByteAsync(BinaryData.FromObjectAsJson(new object()));
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ByteMultiByte_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.ByteMultiByteAsync(BinaryData.FromObjectAsJson(new object()));
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ByteEmpty_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.ByteEmptyAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ByteEmpty_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.ByteEmptyAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ByteNull_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.ByteNullAsync(BinaryData.FromObjectAsJson(new object()));
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ByteNull_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.ByteNullAsync(BinaryData.FromObjectAsJson(new object()));
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task DateValid_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.DateValidAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task DateValid_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.DateValidAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task DateNull_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.DateNullAsync(DateTimeOffset.Parse("2022-05-10"));
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task DateNull_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.DateNullAsync(DateTimeOffset.Parse("2022-05-10"));
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task DateTimeValid_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.DateTimeValidAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task DateTimeValid_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.DateTimeValidAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task DateTimeNull_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.DateTimeNullAsync(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task DateTimeNull_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.DateTimeNullAsync(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Base64Url_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.Base64UrlAsync(BinaryData.FromObjectAsJson(new object()));
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Base64Url_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.Base64UrlAsync(BinaryData.FromObjectAsJson(new object()));
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ArrayCsvInPath_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.ArrayCsvInPathAsync(new List<string>()
{
"<arrayPath>"
});
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task ArrayCsvInPath_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.ArrayCsvInPathAsync(new List<string>()
{
"<arrayPath>"
});
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task UnixTimeUrl_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.UnixTimeUrlAsync(DateTimeOffset.FromUnixTimeSeconds(1652209051));
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task UnixTimeUrl_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PathsClient client = CreatePathsClient(credential, endpoint);

            Response response = await client.UnixTimeUrlAsync(DateTimeOffset.FromUnixTimeSeconds(1652209051));
            Console.WriteLine(response.Status);
        }
    }
}
