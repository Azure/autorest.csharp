// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Identity;
using NUnit.Framework;
using url_LowLevel;

namespace url_LowLevel.Tests
{
    public class QueriesClientTests : url_LowLevelTestBase
    {
        public QueriesClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetBooleanTrue_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.GetBooleanTrueAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetBooleanTrue_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.GetBooleanTrueAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetBooleanFalse_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.GetBooleanFalseAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetBooleanFalse_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.GetBooleanFalseAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetBooleanNull_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.GetBooleanNullAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetBooleanNull_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.GetBooleanNullAsync(boolQuery: true);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetIntOneMillion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.GetIntOneMillionAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetIntOneMillion_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.GetIntOneMillionAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetIntNegativeOneMillion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.GetIntNegativeOneMillionAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetIntNegativeOneMillion_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.GetIntNegativeOneMillionAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetIntNull_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.GetIntNullAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetIntNull_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.GetIntNullAsync(intQuery: 1234);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetTenBillion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.GetTenBillionAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetTenBillion_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.GetTenBillionAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetNegativeTenBillion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.GetNegativeTenBillionAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetNegativeTenBillion_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.GetNegativeTenBillionAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetLongNull_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.GetLongNullAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetLongNull_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.GetLongNullAsync(longQuery: 1234L);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task FloatScientificPositive_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.FloatScientificPositiveAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task FloatScientificPositive_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.FloatScientificPositiveAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task FloatScientificNegative_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.FloatScientificNegativeAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task FloatScientificNegative_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.FloatScientificNegativeAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task FloatNull_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.FloatNullAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task FloatNull_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.FloatNullAsync(floatQuery: 123.45F);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DoubleDecimalPositive_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.DoubleDecimalPositiveAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DoubleDecimalPositive_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.DoubleDecimalPositiveAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DoubleDecimalNegative_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.DoubleDecimalNegativeAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DoubleDecimalNegative_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.DoubleDecimalNegativeAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DoubleNull_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.DoubleNullAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DoubleNull_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.DoubleNullAsync(doubleQuery: 123.45);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task StringUnicode_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.StringUnicodeAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task StringUnicode_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.StringUnicodeAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task StringUrlEncoded_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.StringUrlEncodedAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task StringUrlEncoded_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.StringUrlEncodedAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task StringEmpty_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.StringEmptyAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task StringEmpty_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.StringEmptyAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task StringNull_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.StringNullAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task StringNull_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.StringNullAsync(stringQuery: "<stringQuery>");
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task EnumValid_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.EnumValidAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task EnumValid_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.EnumValidAsync(enumQuery: "red color");
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task EnumNull_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.EnumNullAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task EnumNull_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.EnumNullAsync(enumQuery: "red color");
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task ByteMultiByte_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.ByteMultiByteAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task ByteMultiByte_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.ByteMultiByteAsync(byteQuery: BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task ByteEmpty_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.ByteEmptyAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task ByteEmpty_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.ByteEmptyAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task ByteNull_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.ByteNullAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task ByteNull_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.ByteNullAsync(byteQuery: BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DateValid_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.DateValidAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DateValid_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.DateValidAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DateNull_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.DateNullAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DateNull_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.DateNullAsync(dateQuery: DateTimeOffset.Parse("2022-05-10"));
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DateTimeValid_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.DateTimeValidAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DateTimeValid_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.DateTimeValidAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DateTimeNull_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.DateTimeNullAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DateTimeNull_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.DateTimeNullAsync(dateTimeQuery: DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task ArrayStringCsvValid_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.ArrayStringCsvValidAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task ArrayStringCsvValid_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.ArrayStringCsvValidAsync(arrayQuery: new List<string>()
{
"<arrayQuery>"
});
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task ArrayStringCsvNull_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.ArrayStringCsvNullAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task ArrayStringCsvNull_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.ArrayStringCsvNullAsync(arrayQuery: new List<string>()
{
"<arrayQuery>"
});
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task ArrayStringCsvEmpty_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.ArrayStringCsvEmptyAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task ArrayStringCsvEmpty_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.ArrayStringCsvEmptyAsync(arrayQuery: new List<string>()
{
"<arrayQuery>"
});
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task ArrayStringNoCollectionFormatEmpty_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.ArrayStringNoCollectionFormatEmptyAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task ArrayStringNoCollectionFormatEmpty_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.ArrayStringNoCollectionFormatEmptyAsync(arrayQuery: new List<string>()
{
"<arrayQuery>"
});
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task ArrayStringSsvValid_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.ArrayStringSsvValidAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task ArrayStringSsvValid_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.ArrayStringSsvValidAsync(arrayQuery: new List<string>()
{
"<arrayQuery>"
});
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task ArrayStringTsvValid_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.ArrayStringTsvValidAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task ArrayStringTsvValid_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.ArrayStringTsvValidAsync(arrayQuery: new List<string>()
{
"<arrayQuery>"
});
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task ArrayStringPipesValid_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.ArrayStringPipesValidAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task ArrayStringPipesValid_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            QueriesClient client = CreateQueriesClient(credential, endpoint);

            Response response = await client.ArrayStringPipesValidAsync(arrayQuery: new List<string>()
{
"<arrayQuery>"
});
        }
    }
}
