// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace paging_LowLevel
{
    /// <summary> The Paging service client. </summary>
    public partial class PagingClient
    {
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get => _pipeline; }
        private HttpPipeline _pipeline;
        private const string AuthorizationHeader = "Fake-Subscription-Key";
        private readonly AzureKeyCredential _keyCredential;
        private Uri endpoint;
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly PagingRestClient RestClient;

        /// <summary> Initializes a new instance of PagingClient for mocking. </summary>
        protected PagingClient()
        {
        }

        /// <summary> Initializes a new instance of PagingClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public PagingClient(AzureKeyCredential credential, Uri endpoint = null, AutoRestPagingTestServiceClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            endpoint ??= new Uri("http://localhost:3000");

            options ??= new AutoRestPagingTestServiceClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _keyCredential = credential;
            var authPolicy = new AzureKeyCredentialPolicy(_keyCredential, AuthorizationHeader);
            _pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new LowLevelCallbackPolicy() }, new HttpPipelinePolicy[] { authPolicy }, new ResponseClassifier());
            this.endpoint = endpoint;
            RestClient = new PagingRestClient(_clientDiagnostics, _pipeline, endpoint);
        }

        /// <summary> A paging operation that must return result of the default &apos;value&apos; node. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [Product],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> GetNoItemNamePagesAsync(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            async Task<Page<BinaryData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetNoItemNamePages");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetNoItemNamePagesAsync(options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "value", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            async Task<Page<BinaryData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetNoItemNamePages");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetNoItemNamePagesNextPageAsync(nextLink, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "value", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that must return result of the default &apos;value&apos; node. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [Product],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> GetNoItemNamePages(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            Page<BinaryData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetNoItemNamePages");
                scope.Start();
                try
                {
                    Response response = RestClient.GetNoItemNamePages(options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "value", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            Page<BinaryData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetNoItemNamePages");
                scope.Start();
                try
                {
                    Response response = RestClient.GetNoItemNamePagesNextPage(nextLink, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "value", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that must ignore any kind of nextLink, and stop after page 1. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> GetNullNextLinkNamePagesAsync(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            async Task<Page<BinaryData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetNullNextLinkNamePages");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetNullNextLinkNamePagesAsync(options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", null);
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> A paging operation that must ignore any kind of nextLink, and stop after page 1. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> GetNullNextLinkNamePages(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            Page<BinaryData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetNullNextLinkNamePages");
                scope.Start();
                try
                {
                    Response response = RestClient.GetNullNextLinkNamePages(options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", null);
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> A paging operation that finishes on the first call without a nextlink. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> GetSinglePagesAsync(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            async Task<Page<BinaryData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetSinglePages");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetSinglePagesAsync(options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            async Task<Page<BinaryData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetSinglePages");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetSinglePagesNextPageAsync(nextLink, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that finishes on the first call without a nextlink. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> GetSinglePages(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            Page<BinaryData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetSinglePages");
                scope.Start();
                try
                {
                    Response response = RestClient.GetSinglePages(options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            Page<BinaryData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetSinglePages");
                scope.Start();
                try
                {
                    Response response = RestClient.GetSinglePagesNextPage(nextLink, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation whose first response&apos;s items list is empty, but still returns a next link. Second (and final) call, will give you an items list of 1. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [Product],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> FirstResponseEmptyAsync(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            async Task<Page<BinaryData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.FirstResponseEmpty");
                scope.Start();
                try
                {
                    Response response = await RestClient.FirstResponseEmptyAsync(options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "value", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            async Task<Page<BinaryData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.FirstResponseEmpty");
                scope.Start();
                try
                {
                    Response response = await RestClient.FirstResponseEmptyNextPageAsync(nextLink, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "value", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation whose first response&apos;s items list is empty, but still returns a next link. Second (and final) call, will give you an items list of 1. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [Product],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> FirstResponseEmpty(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            Page<BinaryData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.FirstResponseEmpty");
                scope.Start();
                try
                {
                    Response response = RestClient.FirstResponseEmpty(options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "value", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            Page<BinaryData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.FirstResponseEmpty");
                scope.Start();
                try
                {
                    Response response = RestClient.FirstResponseEmptyNextPage(nextLink, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "value", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that includes a nextLink that has 10 pages. </summary>
        /// <param name="clientRequestId"> The String to use. </param>
        /// <param name="maxresults"> Sets the maximum number of items to return in the response. </param>
        /// <param name="timeout"> Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> GetMultiplePagesAsync(string clientRequestId = null, int? maxresults = null, int? timeout = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            async Task<Page<BinaryData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePages");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetMultiplePagesAsync(clientRequestId, maxresults, timeout, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            async Task<Page<BinaryData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePages");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetMultiplePagesNextPageAsync(nextLink, clientRequestId, maxresults, timeout, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that includes a nextLink that has 10 pages. </summary>
        /// <param name="clientRequestId"> The String to use. </param>
        /// <param name="maxresults"> Sets the maximum number of items to return in the response. </param>
        /// <param name="timeout"> Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> GetMultiplePages(string clientRequestId = null, int? maxresults = null, int? timeout = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            Page<BinaryData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePages");
                scope.Start();
                try
                {
                    Response response = RestClient.GetMultiplePages(clientRequestId, maxresults, timeout, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            Page<BinaryData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePages");
                scope.Start();
                try
                {
                    Response response = RestClient.GetMultiplePagesNextPage(nextLink, clientRequestId, maxresults, timeout, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that includes a next operation. It has a different query parameter from it&apos;s next operation nextOperationWithQueryParams. Returns a ProductResult. </summary>
        /// <param name="requiredQueryParameter"> A required integer query parameter. Put in value &apos;100&apos; to pass test. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> GetWithQueryParamsAsync(int requiredQueryParameter, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            async Task<Page<BinaryData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetWithQueryParams");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetWithQueryParamsAsync(requiredQueryParameter, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            async Task<Page<BinaryData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetWithQueryParams");
                scope.Start();
                try
                {
                    Response response = await RestClient.NextOperationWithQueryParamsAsync(options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that includes a next operation. It has a different query parameter from it&apos;s next operation nextOperationWithQueryParams. Returns a ProductResult. </summary>
        /// <param name="requiredQueryParameter"> A required integer query parameter. Put in value &apos;100&apos; to pass test. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> GetWithQueryParams(int requiredQueryParameter, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            Page<BinaryData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetWithQueryParams");
                scope.Start();
                try
                {
                    Response response = RestClient.GetWithQueryParams(requiredQueryParameter, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            Page<BinaryData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetWithQueryParams");
                scope.Start();
                try
                {
                    Response response = RestClient.NextOperationWithQueryParams(options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Next operation for getWithQueryParams. Pass in next=True to pass test. Returns a ProductResult. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> NextOperationWithQueryParamsAsync(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            async Task<Page<BinaryData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.NextOperationWithQueryParams");
                scope.Start();
                try
                {
                    Response response = await RestClient.NextOperationWithQueryParamsAsync(options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", null);
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Next operation for getWithQueryParams. Pass in next=True to pass test. Returns a ProductResult. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> NextOperationWithQueryParams(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            Page<BinaryData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.NextOperationWithQueryParams");
                scope.Start();
                try
                {
                    Response response = RestClient.NextOperationWithQueryParams(options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", null);
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> A paging operation that includes a nextLink in odata format that has 10 pages. </summary>
        /// <param name="clientRequestId"> The String to use. </param>
        /// <param name="maxresults"> Sets the maximum number of items to return in the response. </param>
        /// <param name="timeout"> Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   odata.nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> GetOdataMultiplePagesAsync(string clientRequestId = null, int? maxresults = null, int? timeout = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            async Task<Page<BinaryData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetOdataMultiplePages");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetOdataMultiplePagesAsync(clientRequestId, maxresults, timeout, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "odata.nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            async Task<Page<BinaryData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetOdataMultiplePages");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetOdataMultiplePagesNextPageAsync(nextLink, clientRequestId, maxresults, timeout, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "odata.nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that includes a nextLink in odata format that has 10 pages. </summary>
        /// <param name="clientRequestId"> The String to use. </param>
        /// <param name="maxresults"> Sets the maximum number of items to return in the response. </param>
        /// <param name="timeout"> Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   odata.nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> GetOdataMultiplePages(string clientRequestId = null, int? maxresults = null, int? timeout = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            Page<BinaryData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetOdataMultiplePages");
                scope.Start();
                try
                {
                    Response response = RestClient.GetOdataMultiplePages(clientRequestId, maxresults, timeout, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "odata.nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            Page<BinaryData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetOdataMultiplePages");
                scope.Start();
                try
                {
                    Response response = RestClient.GetOdataMultiplePagesNextPage(nextLink, clientRequestId, maxresults, timeout, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "odata.nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that includes a nextLink that has 10 pages. </summary>
        /// <param name="offset"> Offset of return value. </param>
        /// <param name="clientRequestId"> The String to use. </param>
        /// <param name="maxresults"> Sets the maximum number of items to return in the response. </param>
        /// <param name="timeout"> Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> GetMultiplePagesWithOffsetAsync(int offset, string clientRequestId = null, int? maxresults = null, int? timeout = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            async Task<Page<BinaryData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesWithOffset");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetMultiplePagesWithOffsetAsync(offset, clientRequestId, maxresults, timeout, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            async Task<Page<BinaryData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesWithOffset");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetMultiplePagesWithOffsetNextPageAsync(nextLink, offset, clientRequestId, maxresults, timeout, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that includes a nextLink that has 10 pages. </summary>
        /// <param name="offset"> Offset of return value. </param>
        /// <param name="clientRequestId"> The String to use. </param>
        /// <param name="maxresults"> Sets the maximum number of items to return in the response. </param>
        /// <param name="timeout"> Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> GetMultiplePagesWithOffset(int offset, string clientRequestId = null, int? maxresults = null, int? timeout = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            Page<BinaryData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesWithOffset");
                scope.Start();
                try
                {
                    Response response = RestClient.GetMultiplePagesWithOffset(offset, clientRequestId, maxresults, timeout, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            Page<BinaryData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesWithOffset");
                scope.Start();
                try
                {
                    Response response = RestClient.GetMultiplePagesWithOffsetNextPage(nextLink, offset, clientRequestId, maxresults, timeout, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> GetMultiplePagesRetryFirstAsync(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            async Task<Page<BinaryData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesRetryFirst");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetMultiplePagesRetryFirstAsync(options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            async Task<Page<BinaryData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesRetryFirst");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetMultiplePagesRetryFirstNextPageAsync(nextLink, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> GetMultiplePagesRetryFirst(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            Page<BinaryData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesRetryFirst");
                scope.Start();
                try
                {
                    Response response = RestClient.GetMultiplePagesRetryFirst(options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            Page<BinaryData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesRetryFirst");
                scope.Start();
                try
                {
                    Response response = RestClient.GetMultiplePagesRetryFirstNextPage(nextLink, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> GetMultiplePagesRetrySecondAsync(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            async Task<Page<BinaryData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesRetrySecond");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetMultiplePagesRetrySecondAsync(options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            async Task<Page<BinaryData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesRetrySecond");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetMultiplePagesRetrySecondNextPageAsync(nextLink, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> GetMultiplePagesRetrySecond(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            Page<BinaryData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesRetrySecond");
                scope.Start();
                try
                {
                    Response response = RestClient.GetMultiplePagesRetrySecond(options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            Page<BinaryData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesRetrySecond");
                scope.Start();
                try
                {
                    Response response = RestClient.GetMultiplePagesRetrySecondNextPage(nextLink, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that receives a 400 on the first call. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> GetSinglePagesFailureAsync(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            async Task<Page<BinaryData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetSinglePagesFailure");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetSinglePagesFailureAsync(options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            async Task<Page<BinaryData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetSinglePagesFailure");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetSinglePagesFailureNextPageAsync(nextLink, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that receives a 400 on the first call. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> GetSinglePagesFailure(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            Page<BinaryData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetSinglePagesFailure");
                scope.Start();
                try
                {
                    Response response = RestClient.GetSinglePagesFailure(options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            Page<BinaryData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetSinglePagesFailure");
                scope.Start();
                try
                {
                    Response response = RestClient.GetSinglePagesFailureNextPage(nextLink, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that receives a 400 on the second call. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> GetMultiplePagesFailureAsync(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            async Task<Page<BinaryData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesFailure");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetMultiplePagesFailureAsync(options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            async Task<Page<BinaryData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesFailure");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetMultiplePagesFailureNextPageAsync(nextLink, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that receives a 400 on the second call. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> GetMultiplePagesFailure(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            Page<BinaryData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesFailure");
                scope.Start();
                try
                {
                    Response response = RestClient.GetMultiplePagesFailure(options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            Page<BinaryData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesFailure");
                scope.Start();
                try
                {
                    Response response = RestClient.GetMultiplePagesFailureNextPage(nextLink, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that receives an invalid nextLink. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> GetMultiplePagesFailureUriAsync(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            async Task<Page<BinaryData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesFailureUri");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetMultiplePagesFailureUriAsync(options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            async Task<Page<BinaryData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesFailureUri");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetMultiplePagesFailureUriNextPageAsync(nextLink, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that receives an invalid nextLink. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> GetMultiplePagesFailureUri(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            Page<BinaryData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesFailureUri");
                scope.Start();
                try
                {
                    Response response = RestClient.GetMultiplePagesFailureUri(options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            Page<BinaryData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesFailureUri");
                scope.Start();
                try
                {
                    Response response = RestClient.GetMultiplePagesFailureUriNextPage(nextLink, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that doesn&apos;t return a full URL, just a fragment. </summary>
        /// <param name="apiVersion"> Sets the api version to use. </param>
        /// <param name="tenant"> Sets the tenant to use. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   odata.nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> GetMultiplePagesFragmentNextLinkAsync(string apiVersion, string tenant, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            async Task<Page<BinaryData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesFragmentNextLink");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetMultiplePagesFragmentNextLinkAsync(apiVersion, tenant, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "odata.nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            async Task<Page<BinaryData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesFragmentNextLink");
                scope.Start();
                try
                {
                    Response response = await RestClient.NextFragmentAsync(apiVersion, tenant, nextLink, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "odata.nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that doesn&apos;t return a full URL, just a fragment. </summary>
        /// <param name="apiVersion"> Sets the api version to use. </param>
        /// <param name="tenant"> Sets the tenant to use. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   odata.nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> GetMultiplePagesFragmentNextLink(string apiVersion, string tenant, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            Page<BinaryData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesFragmentNextLink");
                scope.Start();
                try
                {
                    Response response = RestClient.GetMultiplePagesFragmentNextLink(apiVersion, tenant, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "odata.nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            Page<BinaryData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesFragmentNextLink");
                scope.Start();
                try
                {
                    Response response = RestClient.NextFragment(apiVersion, tenant, nextLink, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "odata.nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that doesn&apos;t return a full URL, just a fragment with parameters grouped. </summary>
        /// <param name="apiVersion"> Sets the api version to use. </param>
        /// <param name="tenant"> Sets the tenant to use. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   odata.nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> GetMultiplePagesFragmentWithGroupingNextLinkAsync(string apiVersion, string tenant, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            async Task<Page<BinaryData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesFragmentWithGroupingNextLink");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetMultiplePagesFragmentWithGroupingNextLinkAsync(apiVersion, tenant, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "odata.nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            async Task<Page<BinaryData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesFragmentWithGroupingNextLink");
                scope.Start();
                try
                {
                    Response response = await RestClient.NextFragmentWithGroupingAsync(apiVersion, tenant, nextLink, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "odata.nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that doesn&apos;t return a full URL, just a fragment with parameters grouped. </summary>
        /// <param name="apiVersion"> Sets the api version to use. </param>
        /// <param name="tenant"> Sets the tenant to use. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   odata.nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> GetMultiplePagesFragmentWithGroupingNextLink(string apiVersion, string tenant, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            Page<BinaryData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesFragmentWithGroupingNextLink");
                scope.Start();
                try
                {
                    Response response = RestClient.GetMultiplePagesFragmentWithGroupingNextLink(apiVersion, tenant, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "odata.nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            Page<BinaryData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesFragmentWithGroupingNextLink");
                scope.Start();
                try
                {
                    Response response = RestClient.NextFragmentWithGrouping(apiVersion, tenant, nextLink, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "odata.nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that doesn&apos;t return a full URL, just a fragment. </summary>
        /// <param name="apiVersion"> Sets the api version to use. </param>
        /// <param name="tenant"> Sets the tenant to use. </param>
        /// <param name="nextLink"> Next link for list operation. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   odata.nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> NextFragmentAsync(string apiVersion, string tenant, string nextLink, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            async Task<Page<BinaryData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.NextFragment");
                scope.Start();
                try
                {
                    Response response = await RestClient.NextFragmentAsync(apiVersion, tenant, nextLink, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "odata.nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            async Task<Page<BinaryData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.NextFragment");
                scope.Start();
                try
                {
                    Response response = await RestClient.NextFragmentAsync(apiVersion, tenant, nextLink, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "odata.nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that doesn&apos;t return a full URL, just a fragment. </summary>
        /// <param name="apiVersion"> Sets the api version to use. </param>
        /// <param name="tenant"> Sets the tenant to use. </param>
        /// <param name="nextLink"> Next link for list operation. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   odata.nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> NextFragment(string apiVersion, string tenant, string nextLink, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            Page<BinaryData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.NextFragment");
                scope.Start();
                try
                {
                    Response response = RestClient.NextFragment(apiVersion, tenant, nextLink, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "odata.nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            Page<BinaryData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.NextFragment");
                scope.Start();
                try
                {
                    Response response = RestClient.NextFragment(apiVersion, tenant, nextLink, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "odata.nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that doesn&apos;t return a full URL, just a fragment. </summary>
        /// <param name="apiVersion"> Sets the api version to use. </param>
        /// <param name="tenant"> Sets the tenant to use. </param>
        /// <param name="nextLink"> Next link for list operation. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   odata.nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> NextFragmentWithGroupingAsync(string apiVersion, string tenant, string nextLink, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            async Task<Page<BinaryData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.NextFragmentWithGrouping");
                scope.Start();
                try
                {
                    Response response = await RestClient.NextFragmentWithGroupingAsync(apiVersion, tenant, nextLink, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "odata.nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            async Task<Page<BinaryData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.NextFragmentWithGrouping");
                scope.Start();
                try
                {
                    Response response = await RestClient.NextFragmentWithGroupingAsync(apiVersion, tenant, nextLink, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "odata.nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that doesn&apos;t return a full URL, just a fragment. </summary>
        /// <param name="apiVersion"> Sets the api version to use. </param>
        /// <param name="tenant"> Sets the tenant to use. </param>
        /// <param name="nextLink"> Next link for list operation. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   odata.nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> NextFragmentWithGrouping(string apiVersion, string tenant, string nextLink, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            Page<BinaryData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.NextFragmentWithGrouping");
                scope.Start();
                try
                {
                    Response response = RestClient.NextFragmentWithGrouping(apiVersion, tenant, nextLink, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "odata.nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            Page<BinaryData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.NextFragmentWithGrouping");
                scope.Start();
                try
                {
                    Response response = RestClient.NextFragmentWithGrouping(apiVersion, tenant, nextLink, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "odata.nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that returns a paging model whose item name is is overriden by x-ms-client-name &apos;indexes&apos;. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> GetPagingModelWithItemNameWithXMSClientNameAsync(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            async Task<Page<BinaryData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetPagingModelWithItemNameWithXMSClientName");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetPagingModelWithItemNameWithXMSClientNameAsync(options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            async Task<Page<BinaryData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetPagingModelWithItemNameWithXMSClientName");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetPagingModelWithItemNameWithXMSClientNameNextPageAsync(nextLink, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A paging operation that returns a paging model whose item name is is overriden by x-ms-client-name &apos;indexes&apos;. </summary>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> GetPagingModelWithItemNameWithXMSClientName(RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            Page<BinaryData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetPagingModelWithItemNameWithXMSClientName");
                scope.Start();
                try
                {
                    Response response = RestClient.GetPagingModelWithItemNameWithXMSClientName(options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            Page<BinaryData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetPagingModelWithItemNameWithXMSClientName");
                scope.Start();
                try
                {
                    Response response = RestClient.GetPagingModelWithItemNameWithXMSClientNameNextPage(nextLink, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> A long-running paging operation that includes a nextLink that has 10 pages. </summary>
        /// <param name="clientRequestId"> The String to use. </param>
        /// <param name="maxresults"> Sets the maximum number of items to return in the response. </param>
        /// <param name="timeout"> Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Operation<AsyncPageable<BinaryData>>> GetMultiplePagesLROAsync(string clientRequestId = null, int? maxresults = null, int? timeout = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            async Task<Page<BinaryData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesLRO");
                scope.Start();
                try
                {
                    Response response = await RestClient.GetMultiplePagesLRONextPageAsync(nextLink, clientRequestId, maxresults, timeout, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            using var scope0 = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesLRO");
            scope0.Start();
            try
            {
                using HttpMessage message = RestClient.CreateGetMultiplePagesLRORequest(clientRequestId, maxresults, timeout);
                Response response = await RestClient.GetMultiplePagesLROAsync(clientRequestId, maxresults, timeout, options).ConfigureAwait(false);
                return new FuncOperation<AsyncPageable<BinaryData>>(_clientDiagnostics, _pipeline, message.Request, response, OperationFinalStateVia.Location, "PagingClient.GetMultiplePagesLRO", (response) =>
                {
                    return PageableHelpers.CreateAsyncEnumerable((pageSizeHint) =>
                    {
                        return Task.FromResult(LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink"));
                    }, NextPageFunc);
                });
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> A long-running paging operation that includes a nextLink that has 10 pages. </summary>
        /// <param name="clientRequestId"> The String to use. </param>
        /// <param name="maxresults"> Sets the maximum number of items to return in the response. </param>
        /// <param name="timeout"> Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   values: [
        ///     {
        ///       properties: {
        ///         id: number,
        ///         name: string
        ///       }
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Operation<Pageable<BinaryData>> GetMultiplePagesLRO(string clientRequestId = null, int? maxresults = null, int? timeout = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            Page<BinaryData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesLRO");
                scope.Start();
                try
                {
                    Response response = RestClient.GetMultiplePagesLRONextPage(nextLink, clientRequestId, maxresults, timeout, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            using var scope0 = _clientDiagnostics.CreateScope("PagingClient.GetMultiplePagesLRO");
            scope0.Start();
            try
            {
                using HttpMessage message = RestClient.CreateGetMultiplePagesLRORequest(clientRequestId, maxresults, timeout);
                Response response = RestClient.GetMultiplePagesLRO(clientRequestId, maxresults, timeout, options);
                return new FuncOperation<Pageable<BinaryData>>(_clientDiagnostics, _pipeline, message.Request, response, OperationFinalStateVia.Location, "PagingClient.GetMultiplePagesLRO", (response) =>
                {
                    return PageableHelpers.CreateEnumerable((pageSizeHint) =>
                    {
                        return LowLevelPagableHelpers.BuildPageForResponse(response, "values", "nextLink");
                    }, NextPageFunc);
                });
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }
    }
}
