// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using paging_LowLevel;

namespace paging_LowLevel.Tests
{
    public class PagingClientTests : paging_LowLevelTestBase
    {
        public PagingClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetNoItemNamePages_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetNoItemNamePagesAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetNoItemNamePages_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetNoItemNamePagesAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetEmptyNextLinkNamePages_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetEmptyNextLinkNamePagesAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetEmptyNextLinkNamePages_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetEmptyNextLinkNamePagesAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetNullNextLinkNamePages_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetNullNextLinkNamePagesAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetNullNextLinkNamePages_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetNullNextLinkNamePagesAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetSinglePages_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetSinglePagesAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetSinglePages_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetSinglePagesAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetSinglePagesWithBodyParams_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new object());
            await foreach (BinaryData item in client.GetSinglePagesWithBodyParamsAsync(content))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetSinglePagesWithBodyParams_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            await foreach (BinaryData item in client.GetSinglePagesWithBodyParamsAsync(content))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task FirstResponseEmpty_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.FirstResponseEmptyAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task FirstResponseEmpty_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.FirstResponseEmptyAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetMultiplePages_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetMultiplePagesAsync(null, null, null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetMultiplePages_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetMultiplePagesAsync(1234, 1234, null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetWithQueryParams_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetWithQueryParamsAsync(1234, null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetWithQueryParams_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetWithQueryParamsAsync(1234, null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DuplicateParams_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.DuplicateParamsAsync(null, null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DuplicateParams_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.DuplicateParamsAsync("<filter>", null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PageWithMaxPageSize_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.PageWithMaxPageSizeAsync(null, null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PageWithMaxPageSize_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.PageWithMaxPageSizeAsync("5", null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task NextOperationWithQueryParams_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.NextOperationWithQueryParamsAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task NextOperationWithQueryParams_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.NextOperationWithQueryParamsAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetOdataMultiplePages_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetOdataMultiplePagesAsync(null, null, null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetOdataMultiplePages_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetOdataMultiplePagesAsync(1234, 1234, null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetMultiplePagesWithOffset_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetMultiplePagesWithOffsetAsync(1234, null, null, null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetMultiplePagesWithOffset_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetMultiplePagesWithOffsetAsync(1234, 1234, 1234, null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetMultiplePagesRetryFirst_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetMultiplePagesRetryFirstAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetMultiplePagesRetryFirst_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetMultiplePagesRetryFirstAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetMultiplePagesRetrySecond_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetMultiplePagesRetrySecondAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetMultiplePagesRetrySecond_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetMultiplePagesRetrySecondAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetSinglePagesFailure_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetSinglePagesFailureAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetSinglePagesFailure_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetSinglePagesFailureAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetMultiplePagesFailure_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetMultiplePagesFailureAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetMultiplePagesFailure_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetMultiplePagesFailureAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetMultiplePagesFailureUri_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetMultiplePagesFailureUriAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetMultiplePagesFailureUri_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetMultiplePagesFailureUriAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetMultiplePagesFragmentNextLink_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetMultiplePagesFragmentNextLinkAsync("<tenant>", "<apiVersion>", null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetMultiplePagesFragmentNextLink_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetMultiplePagesFragmentNextLinkAsync("<tenant>", "<apiVersion>", null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetMultiplePagesFragmentWithGroupingNextLink_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetMultiplePagesFragmentWithGroupingNextLinkAsync("<tenant>", "<apiVersion>", null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetMultiplePagesFragmentWithGroupingNextLink_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetMultiplePagesFragmentWithGroupingNextLinkAsync("<tenant>", "<apiVersion>", null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task AppendApiVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.AppendApiVersionAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task AppendApiVersion_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.AppendApiVersionAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task ReplaceApiVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.ReplaceApiVersionAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task ReplaceApiVersion_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.ReplaceApiVersionAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task NextFragment_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.NextFragmentAsync("<tenant>", "<nextLink>", "<apiVersion>", null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task NextFragment_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.NextFragmentAsync("<tenant>", "<nextLink>", "<apiVersion>", null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task NextFragmentWithGrouping_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.NextFragmentWithGroupingAsync("<tenant>", "<nextLink>", "<apiVersion>", null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task NextFragmentWithGrouping_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.NextFragmentWithGroupingAsync("<tenant>", "<nextLink>", "<apiVersion>", null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetPagingModelWithItemNameWithXMSClientName_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetPagingModelWithItemNameWithXMSClientNameAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetPagingModelWithItemNameWithXMSClientName_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            await foreach (BinaryData item in client.GetPagingModelWithItemNameWithXMSClientNameAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetMultiplePagesLRO_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            Operation<AsyncPageable<BinaryData>> operation = await client.GetMultiplePagesLROAsync(WaitUntil.Completed, null, null, null);
            await foreach (BinaryData item in operation.Value)
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetMultiplePagesLRO_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PagingClient client = CreatePagingClient(credential, endpoint);

            Operation<AsyncPageable<BinaryData>> operation = await client.GetMultiplePagesLROAsync(WaitUntil.Completed, 1234, 1234, null);
            await foreach (BinaryData item in operation.Value)
            {
            }
        }
    }
}
