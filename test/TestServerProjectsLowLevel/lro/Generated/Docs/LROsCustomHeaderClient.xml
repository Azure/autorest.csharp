<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="PutAsyncRetrySucceededAsync(WaitUntil,RequestContent,RequestContext)">
<example>
This sample shows how to call PutAsyncRetrySucceededAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new LROsCustomHeaderClient(credential);

var data = new {};

var operation = await client.PutAsyncRetrySucceededAsync(WaitUntil.Started, RequestContent.Create(data));

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PutAsyncRetrySucceededAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new LROsCustomHeaderClient(credential);

var data = new {
    properties = new {
        provisioningState = "<provisioningState>",
    },
    tags = new {
        key = "<String>",
    },
    location = "<location>",
};

var operation = await client.PutAsyncRetrySucceededAsync(WaitUntil.Started, RequestContent.Create(data));

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningStateValues").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Product</c>:
<code>{
  properties: {
    provisioningState: string, # Optional.
    provisioningStateValues: &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;canceled&quot; | &quot;Accepted&quot; | &quot;Creating&quot; | &quot;Created&quot; | &quot;Updating&quot; | &quot;Updated&quot; | &quot;Deleting&quot; | &quot;Deleted&quot; | &quot;OK&quot;, # Optional.
  }, # Optional.
  id: string, # Optional. Resource Id
  type: string, # Optional. Resource Type
  tags: Dictionary&lt;string, string&gt;, # Optional. Dictionary of &lt;string&gt;
  location: string, # Optional. Resource Location
  name: string, # Optional. Resource Name
}
</code>

Response Body:

Schema for <c>Product</c>:
<code>{
  properties: {
    provisioningState: string, # Optional.
    provisioningStateValues: &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;canceled&quot; | &quot;Accepted&quot; | &quot;Creating&quot; | &quot;Created&quot; | &quot;Updating&quot; | &quot;Updated&quot; | &quot;Deleting&quot; | &quot;Deleted&quot; | &quot;OK&quot;, # Optional.
  }, # Optional.
  id: string, # Optional. Resource Id
  type: string, # Optional. Resource Type
  tags: Dictionary&lt;string, string&gt;, # Optional. Dictionary of &lt;string&gt;
  location: string, # Optional. Resource Location
  name: string, # Optional. Resource Name
}
</code>

</remarks>
    </member>
    <member name="PutAsyncRetrySucceeded(WaitUntil,RequestContent,RequestContext)">
<example>
This sample shows how to call PutAsyncRetrySucceeded with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new LROsCustomHeaderClient(credential);

var data = new {};

var operation = client.PutAsyncRetrySucceeded(WaitUntil.Started, RequestContent.Create(data));

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PutAsyncRetrySucceeded with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new LROsCustomHeaderClient(credential);

var data = new {
    properties = new {
        provisioningState = "<provisioningState>",
    },
    tags = new {
        key = "<String>",
    },
    location = "<location>",
};

var operation = client.PutAsyncRetrySucceeded(WaitUntil.Started, RequestContent.Create(data));

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningStateValues").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Product</c>:
<code>{
  properties: {
    provisioningState: string, # Optional.
    provisioningStateValues: &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;canceled&quot; | &quot;Accepted&quot; | &quot;Creating&quot; | &quot;Created&quot; | &quot;Updating&quot; | &quot;Updated&quot; | &quot;Deleting&quot; | &quot;Deleted&quot; | &quot;OK&quot;, # Optional.
  }, # Optional.
  id: string, # Optional. Resource Id
  type: string, # Optional. Resource Type
  tags: Dictionary&lt;string, string&gt;, # Optional. Dictionary of &lt;string&gt;
  location: string, # Optional. Resource Location
  name: string, # Optional. Resource Name
}
</code>

Response Body:

Schema for <c>Product</c>:
<code>{
  properties: {
    provisioningState: string, # Optional.
    provisioningStateValues: &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;canceled&quot; | &quot;Accepted&quot; | &quot;Creating&quot; | &quot;Created&quot; | &quot;Updating&quot; | &quot;Updated&quot; | &quot;Deleting&quot; | &quot;Deleted&quot; | &quot;OK&quot;, # Optional.
  }, # Optional.
  id: string, # Optional. Resource Id
  type: string, # Optional. Resource Type
  tags: Dictionary&lt;string, string&gt;, # Optional. Dictionary of &lt;string&gt;
  location: string, # Optional. Resource Location
  name: string, # Optional. Resource Name
}
</code>

</remarks>
    </member>
    <member name="Put201CreatingSucceeded200Async(WaitUntil,RequestContent,RequestContext)">
<example>
This sample shows how to call Put201CreatingSucceeded200Async with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new LROsCustomHeaderClient(credential);

var data = new {};

var operation = await client.Put201CreatingSucceeded200Async(WaitUntil.Started, RequestContent.Create(data));

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Put201CreatingSucceeded200Async with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new LROsCustomHeaderClient(credential);

var data = new {
    properties = new {
        provisioningState = "<provisioningState>",
    },
    tags = new {
        key = "<String>",
    },
    location = "<location>",
};

var operation = await client.Put201CreatingSucceeded200Async(WaitUntil.Started, RequestContent.Create(data));

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningStateValues").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Product</c>:
<code>{
  properties: {
    provisioningState: string, # Optional.
    provisioningStateValues: &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;canceled&quot; | &quot;Accepted&quot; | &quot;Creating&quot; | &quot;Created&quot; | &quot;Updating&quot; | &quot;Updated&quot; | &quot;Deleting&quot; | &quot;Deleted&quot; | &quot;OK&quot;, # Optional.
  }, # Optional.
  id: string, # Optional. Resource Id
  type: string, # Optional. Resource Type
  tags: Dictionary&lt;string, string&gt;, # Optional. Dictionary of &lt;string&gt;
  location: string, # Optional. Resource Location
  name: string, # Optional. Resource Name
}
</code>

Response Body:

Schema for <c>Product</c>:
<code>{
  properties: {
    provisioningState: string, # Optional.
    provisioningStateValues: &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;canceled&quot; | &quot;Accepted&quot; | &quot;Creating&quot; | &quot;Created&quot; | &quot;Updating&quot; | &quot;Updated&quot; | &quot;Deleting&quot; | &quot;Deleted&quot; | &quot;OK&quot;, # Optional.
  }, # Optional.
  id: string, # Optional. Resource Id
  type: string, # Optional. Resource Type
  tags: Dictionary&lt;string, string&gt;, # Optional. Dictionary of &lt;string&gt;
  location: string, # Optional. Resource Location
  name: string, # Optional. Resource Name
}
</code>

</remarks>
    </member>
    <member name="Put201CreatingSucceeded200(WaitUntil,RequestContent,RequestContext)">
<example>
This sample shows how to call Put201CreatingSucceeded200 with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new LROsCustomHeaderClient(credential);

var data = new {};

var operation = client.Put201CreatingSucceeded200(WaitUntil.Started, RequestContent.Create(data));

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Put201CreatingSucceeded200 with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new LROsCustomHeaderClient(credential);

var data = new {
    properties = new {
        provisioningState = "<provisioningState>",
    },
    tags = new {
        key = "<String>",
    },
    location = "<location>",
};

var operation = client.Put201CreatingSucceeded200(WaitUntil.Started, RequestContent.Create(data));

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningStateValues").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Product</c>:
<code>{
  properties: {
    provisioningState: string, # Optional.
    provisioningStateValues: &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;canceled&quot; | &quot;Accepted&quot; | &quot;Creating&quot; | &quot;Created&quot; | &quot;Updating&quot; | &quot;Updated&quot; | &quot;Deleting&quot; | &quot;Deleted&quot; | &quot;OK&quot;, # Optional.
  }, # Optional.
  id: string, # Optional. Resource Id
  type: string, # Optional. Resource Type
  tags: Dictionary&lt;string, string&gt;, # Optional. Dictionary of &lt;string&gt;
  location: string, # Optional. Resource Location
  name: string, # Optional. Resource Name
}
</code>

Response Body:

Schema for <c>Product</c>:
<code>{
  properties: {
    provisioningState: string, # Optional.
    provisioningStateValues: &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;canceled&quot; | &quot;Accepted&quot; | &quot;Creating&quot; | &quot;Created&quot; | &quot;Updating&quot; | &quot;Updated&quot; | &quot;Deleting&quot; | &quot;Deleted&quot; | &quot;OK&quot;, # Optional.
  }, # Optional.
  id: string, # Optional. Resource Id
  type: string, # Optional. Resource Type
  tags: Dictionary&lt;string, string&gt;, # Optional. Dictionary of &lt;string&gt;
  location: string, # Optional. Resource Location
  name: string, # Optional. Resource Name
}
</code>

</remarks>
    </member>
    <member name="Post202Retry200Async(WaitUntil,RequestContent,RequestContext)">
<example>
This sample shows how to call Post202Retry200Async with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new LROsCustomHeaderClient(credential);

var data = new {};

var operation = await client.Post202Retry200Async(WaitUntil.Started, RequestContent.Create(data));

var response = await operation.WaitForCompletionResponseAsync();
Console.WriteLine(response.Status)
]]></code>
This sample shows how to call Post202Retry200Async with all parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new LROsCustomHeaderClient(credential);

var data = new {
    properties = new {
        provisioningState = "<provisioningState>",
    },
    tags = new {
        key = "<String>",
    },
    location = "<location>",
};

var operation = await client.Post202Retry200Async(WaitUntil.Started, RequestContent.Create(data));

var response = await operation.WaitForCompletionResponseAsync();
Console.WriteLine(response.Status)
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Product</c>:
<code>{
  properties: {
    provisioningState: string, # Optional.
    provisioningStateValues: &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;canceled&quot; | &quot;Accepted&quot; | &quot;Creating&quot; | &quot;Created&quot; | &quot;Updating&quot; | &quot;Updated&quot; | &quot;Deleting&quot; | &quot;Deleted&quot; | &quot;OK&quot;, # Optional.
  }, # Optional.
  id: string, # Optional. Resource Id
  type: string, # Optional. Resource Type
  tags: Dictionary&lt;string, string&gt;, # Optional. Dictionary of &lt;string&gt;
  location: string, # Optional. Resource Location
  name: string, # Optional. Resource Name
}
</code>

</remarks>
    </member>
    <member name="Post202Retry200(WaitUntil,RequestContent,RequestContext)">
<example>
This sample shows how to call Post202Retry200 with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new LROsCustomHeaderClient(credential);

var data = new {};

var operation = client.Post202Retry200(WaitUntil.Started, RequestContent.Create(data));

var response = operation.WaitForCompletionResponse();
Console.WriteLine(response.Status)
]]></code>
This sample shows how to call Post202Retry200 with all parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new LROsCustomHeaderClient(credential);

var data = new {
    properties = new {
        provisioningState = "<provisioningState>",
    },
    tags = new {
        key = "<String>",
    },
    location = "<location>",
};

var operation = client.Post202Retry200(WaitUntil.Started, RequestContent.Create(data));

var response = operation.WaitForCompletionResponse();
Console.WriteLine(response.Status)
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Product</c>:
<code>{
  properties: {
    provisioningState: string, # Optional.
    provisioningStateValues: &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;canceled&quot; | &quot;Accepted&quot; | &quot;Creating&quot; | &quot;Created&quot; | &quot;Updating&quot; | &quot;Updated&quot; | &quot;Deleting&quot; | &quot;Deleted&quot; | &quot;OK&quot;, # Optional.
  }, # Optional.
  id: string, # Optional. Resource Id
  type: string, # Optional. Resource Type
  tags: Dictionary&lt;string, string&gt;, # Optional. Dictionary of &lt;string&gt;
  location: string, # Optional. Resource Location
  name: string, # Optional. Resource Name
}
</code>

</remarks>
    </member>
    <member name="PostAsyncRetrySucceededAsync(WaitUntil,RequestContent,RequestContext)">
<example>
This sample shows how to call PostAsyncRetrySucceededAsync with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new LROsCustomHeaderClient(credential);

var data = new {};

var operation = await client.PostAsyncRetrySucceededAsync(WaitUntil.Started, RequestContent.Create(data));

var response = await operation.WaitForCompletionResponseAsync();
Console.WriteLine(response.Status)
]]></code>
This sample shows how to call PostAsyncRetrySucceededAsync with all parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new LROsCustomHeaderClient(credential);

var data = new {
    properties = new {
        provisioningState = "<provisioningState>",
    },
    tags = new {
        key = "<String>",
    },
    location = "<location>",
};

var operation = await client.PostAsyncRetrySucceededAsync(WaitUntil.Started, RequestContent.Create(data));

var response = await operation.WaitForCompletionResponseAsync();
Console.WriteLine(response.Status)
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Product</c>:
<code>{
  properties: {
    provisioningState: string, # Optional.
    provisioningStateValues: &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;canceled&quot; | &quot;Accepted&quot; | &quot;Creating&quot; | &quot;Created&quot; | &quot;Updating&quot; | &quot;Updated&quot; | &quot;Deleting&quot; | &quot;Deleted&quot; | &quot;OK&quot;, # Optional.
  }, # Optional.
  id: string, # Optional. Resource Id
  type: string, # Optional. Resource Type
  tags: Dictionary&lt;string, string&gt;, # Optional. Dictionary of &lt;string&gt;
  location: string, # Optional. Resource Location
  name: string, # Optional. Resource Name
}
</code>

</remarks>
    </member>
    <member name="PostAsyncRetrySucceeded(WaitUntil,RequestContent,RequestContext)">
<example>
This sample shows how to call PostAsyncRetrySucceeded with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new LROsCustomHeaderClient(credential);

var data = new {};

var operation = client.PostAsyncRetrySucceeded(WaitUntil.Started, RequestContent.Create(data));

var response = operation.WaitForCompletionResponse();
Console.WriteLine(response.Status)
]]></code>
This sample shows how to call PostAsyncRetrySucceeded with all parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new LROsCustomHeaderClient(credential);

var data = new {
    properties = new {
        provisioningState = "<provisioningState>",
    },
    tags = new {
        key = "<String>",
    },
    location = "<location>",
};

var operation = client.PostAsyncRetrySucceeded(WaitUntil.Started, RequestContent.Create(data));

var response = operation.WaitForCompletionResponse();
Console.WriteLine(response.Status)
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Product</c>:
<code>{
  properties: {
    provisioningState: string, # Optional.
    provisioningStateValues: &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;canceled&quot; | &quot;Accepted&quot; | &quot;Creating&quot; | &quot;Created&quot; | &quot;Updating&quot; | &quot;Updated&quot; | &quot;Deleting&quot; | &quot;Deleted&quot; | &quot;OK&quot;, # Optional.
  }, # Optional.
  id: string, # Optional. Resource Id
  type: string, # Optional. Resource Type
  tags: Dictionary&lt;string, string&gt;, # Optional. Dictionary of &lt;string&gt;
  location: string, # Optional. Resource Location
  name: string, # Optional. Resource Name
}
</code>

</remarks>
    </member>
  </members>
</doc>