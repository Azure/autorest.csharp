// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace lro_LowLevel.Samples
{
    public class Samples_LROsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Put200Succeeded()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.Put200Succeeded(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Patch200SucceededIgnoreHeaders()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.Patch200SucceededIgnoreHeaders(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Patch201RetryWithAsyncHeader()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.Patch201RetryWithAsyncHeader(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Patch202RetryWithAsyncAndLocationHeader()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.Patch202RetryWithAsyncAndLocationHeader(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Put201Succeeded()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.Put201Succeeded(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Post202List()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var operation = client.Post202List(WaitUntil.Completed);

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Put200SucceededNoState()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.Put200SucceededNoState(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Put202Retry200()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.Put202Retry200(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Put201CreatingSucceeded200()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.Put201CreatingSucceeded200(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Put200UpdatingSucceeded204()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.Put200UpdatingSucceeded204(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Put201CreatingFailed200()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.Put201CreatingFailed200(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Put200Acceptedcanceled200()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.Put200Acceptedcanceled200(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutNoHeaderInRetry()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.PutNoHeaderInRetry(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutAsyncRetrySucceeded()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.PutAsyncRetrySucceeded(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutAsyncNoRetrySucceeded()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.PutAsyncNoRetrySucceeded(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutAsyncRetryFailed()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.PutAsyncRetryFailed(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutAsyncNoRetrycanceled()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.PutAsyncNoRetrycanceled(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutAsyncNoHeaderInRetry()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.PutAsyncNoHeaderInRetry(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutNonResource()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.PutNonResource(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutAsyncNonResource()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.PutAsyncNonResource(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutSubResource()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.PutSubResource(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutAsyncSubResource()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.PutAsyncSubResource(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteProvisioning202Accepted200Succeeded()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var operation = client.DeleteProvisioning202Accepted200Succeeded(WaitUntil.Completed);

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteProvisioning202DeletingFailed200()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var operation = client.DeleteProvisioning202DeletingFailed200(WaitUntil.Completed);

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteProvisioning202Deletingcanceled200()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var operation = client.DeleteProvisioning202Deletingcanceled200(WaitUntil.Completed);

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete204Succeeded()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var operation = client.Delete204Succeeded(WaitUntil.Completed);

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete202Retry200()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var operation = client.Delete202Retry200(WaitUntil.Completed);

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete202NoRetry204()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var operation = client.Delete202NoRetry204(WaitUntil.Completed);

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteNoHeaderInRetry()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var operation = client.DeleteNoHeaderInRetry(WaitUntil.Completed);

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteAsyncNoHeaderInRetry()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var operation = client.DeleteAsyncNoHeaderInRetry(WaitUntil.Completed);

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteAsyncRetrySucceeded()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var operation = client.DeleteAsyncRetrySucceeded(WaitUntil.Completed);

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteAsyncNoRetrySucceeded()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var operation = client.DeleteAsyncNoRetrySucceeded(WaitUntil.Completed);

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteAsyncRetryFailed()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var operation = client.DeleteAsyncRetryFailed(WaitUntil.Completed);

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteAsyncRetrycanceled()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var operation = client.DeleteAsyncRetrycanceled(WaitUntil.Completed);

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Post200WithPayload()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var operation = client.Post200WithPayload(WaitUntil.Completed);

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Post202Retry200()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.Post202Retry200(WaitUntil.Completed, RequestContent.Create(data));

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Post202NoRetry204()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.Post202NoRetry204(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PostDoubleHeadersFinalLocationGet()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var operation = client.PostDoubleHeadersFinalLocationGet(WaitUntil.Completed);

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PostDoubleHeadersFinalAzureHeaderGet()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var operation = client.PostDoubleHeadersFinalAzureHeaderGet(WaitUntil.Completed);

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PostDoubleHeadersFinalAzureHeaderGetDefault()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var operation = client.PostDoubleHeadersFinalAzureHeaderGetDefault(WaitUntil.Completed);

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PostAsyncRetrySucceeded()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.PostAsyncRetrySucceeded(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PostAsyncNoRetrySucceeded()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.PostAsyncNoRetrySucceeded(WaitUntil.Completed, RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PostAsyncRetryFailed()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.PostAsyncRetryFailed(WaitUntil.Completed, RequestContent.Create(data));

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PostAsyncRetrycanceled()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new LROsClient(credential);

            var data = new { };

            var operation = client.PostAsyncRetrycanceled(WaitUntil.Completed, RequestContent.Create(data));

            Console.WriteLine(operation.GetRawResponse().Status);
        }
    }
}
