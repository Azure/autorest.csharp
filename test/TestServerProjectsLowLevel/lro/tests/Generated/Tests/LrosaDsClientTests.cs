// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using lro_LowLevel;

namespace lro_LowLevel.Tests
{
    public class LrosaDsClientTests : lro_LowLevelTestBase
    {
        public LrosaDsClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutNonRetry400_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = null;
            Operation<BinaryData> operation = await client.PutNonRetry400Async(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutNonRetry400_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    provisioningState = "<provisioningState>",
                },
                tags = new
                {
                    key = "<tags>",
                },
                location = "<location>",
            });
            Operation<BinaryData> operation = await client.PutNonRetry400Async(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutNonRetry201Creating400_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = null;
            Operation<BinaryData> operation = await client.PutNonRetry201Creating400Async(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutNonRetry201Creating400_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    provisioningState = "<provisioningState>",
                },
                tags = new
                {
                    key = "<tags>",
                },
                location = "<location>",
            });
            Operation<BinaryData> operation = await client.PutNonRetry201Creating400Async(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutNonRetry201Creating400InvalidJson_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = null;
            Operation<BinaryData> operation = await client.PutNonRetry201Creating400InvalidJsonAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutNonRetry201Creating400InvalidJson_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    provisioningState = "<provisioningState>",
                },
                tags = new
                {
                    key = "<tags>",
                },
                location = "<location>",
            });
            Operation<BinaryData> operation = await client.PutNonRetry201Creating400InvalidJsonAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutAsyncRelativeRetry400_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = null;
            Operation<BinaryData> operation = await client.PutAsyncRelativeRetry400Async(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutAsyncRelativeRetry400_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    provisioningState = "<provisioningState>",
                },
                tags = new
                {
                    key = "<tags>",
                },
                location = "<location>",
            });
            Operation<BinaryData> operation = await client.PutAsyncRelativeRetry400Async(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DeleteNonRetry400_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            Operation operation = await client.DeleteNonRetry400Async(WaitUntil.Completed);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DeleteNonRetry400_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            Operation operation = await client.DeleteNonRetry400Async(WaitUntil.Completed);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Delete202NonRetry400_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            Operation operation = await client.Delete202NonRetry400Async(WaitUntil.Completed);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Delete202NonRetry400_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            Operation operation = await client.Delete202NonRetry400Async(WaitUntil.Completed);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DeleteAsyncRelativeRetry400_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            Operation operation = await client.DeleteAsyncRelativeRetry400Async(WaitUntil.Completed);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DeleteAsyncRelativeRetry400_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            Operation operation = await client.DeleteAsyncRelativeRetry400Async(WaitUntil.Completed);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PostNonRetry400_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = null;
            Operation operation = await client.PostNonRetry400Async(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PostNonRetry400_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    provisioningState = "<provisioningState>",
                },
                tags = new
                {
                    key = "<tags>",
                },
                location = "<location>",
            });
            Operation operation = await client.PostNonRetry400Async(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Post202NonRetry400_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = null;
            Operation operation = await client.Post202NonRetry400Async(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Post202NonRetry400_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    provisioningState = "<provisioningState>",
                },
                tags = new
                {
                    key = "<tags>",
                },
                location = "<location>",
            });
            Operation operation = await client.Post202NonRetry400Async(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PostAsyncRelativeRetry400_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = null;
            Operation operation = await client.PostAsyncRelativeRetry400Async(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PostAsyncRelativeRetry400_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    provisioningState = "<provisioningState>",
                },
                tags = new
                {
                    key = "<tags>",
                },
                location = "<location>",
            });
            Operation operation = await client.PostAsyncRelativeRetry400Async(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutError201NoProvisioningStatePayload_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = null;
            Operation<BinaryData> operation = await client.PutError201NoProvisioningStatePayloadAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutError201NoProvisioningStatePayload_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    provisioningState = "<provisioningState>",
                },
                tags = new
                {
                    key = "<tags>",
                },
                location = "<location>",
            });
            Operation<BinaryData> operation = await client.PutError201NoProvisioningStatePayloadAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutAsyncRelativeRetryNoStatus_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = null;
            Operation<BinaryData> operation = await client.PutAsyncRelativeRetryNoStatusAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutAsyncRelativeRetryNoStatus_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    provisioningState = "<provisioningState>",
                },
                tags = new
                {
                    key = "<tags>",
                },
                location = "<location>",
            });
            Operation<BinaryData> operation = await client.PutAsyncRelativeRetryNoStatusAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutAsyncRelativeRetryNoStatusPayload_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = null;
            Operation<BinaryData> operation = await client.PutAsyncRelativeRetryNoStatusPayloadAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutAsyncRelativeRetryNoStatusPayload_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    provisioningState = "<provisioningState>",
                },
                tags = new
                {
                    key = "<tags>",
                },
                location = "<location>",
            });
            Operation<BinaryData> operation = await client.PutAsyncRelativeRetryNoStatusPayloadAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Delete204Succeeded_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            Operation operation = await client.Delete204SucceededAsync(WaitUntil.Completed);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Delete204Succeeded_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            Operation operation = await client.Delete204SucceededAsync(WaitUntil.Completed);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DeleteAsyncRelativeRetryNoStatus_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            Operation operation = await client.DeleteAsyncRelativeRetryNoStatusAsync(WaitUntil.Completed);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DeleteAsyncRelativeRetryNoStatus_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            Operation operation = await client.DeleteAsyncRelativeRetryNoStatusAsync(WaitUntil.Completed);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Post202NoLocation_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = null;
            Operation operation = await client.Post202NoLocationAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Post202NoLocation_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    provisioningState = "<provisioningState>",
                },
                tags = new
                {
                    key = "<tags>",
                },
                location = "<location>",
            });
            Operation operation = await client.Post202NoLocationAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PostAsyncRelativeRetryNoPayload_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = null;
            Operation operation = await client.PostAsyncRelativeRetryNoPayloadAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PostAsyncRelativeRetryNoPayload_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    provisioningState = "<provisioningState>",
                },
                tags = new
                {
                    key = "<tags>",
                },
                location = "<location>",
            });
            Operation operation = await client.PostAsyncRelativeRetryNoPayloadAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Put200InvalidJson_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = null;
            Operation<BinaryData> operation = await client.Put200InvalidJsonAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Put200InvalidJson_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    provisioningState = "<provisioningState>",
                },
                tags = new
                {
                    key = "<tags>",
                },
                location = "<location>",
            });
            Operation<BinaryData> operation = await client.Put200InvalidJsonAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutAsyncRelativeRetryInvalidHeader_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = null;
            Operation<BinaryData> operation = await client.PutAsyncRelativeRetryInvalidHeaderAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutAsyncRelativeRetryInvalidHeader_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    provisioningState = "<provisioningState>",
                },
                tags = new
                {
                    key = "<tags>",
                },
                location = "<location>",
            });
            Operation<BinaryData> operation = await client.PutAsyncRelativeRetryInvalidHeaderAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutAsyncRelativeRetryInvalidJsonPolling_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = null;
            Operation<BinaryData> operation = await client.PutAsyncRelativeRetryInvalidJsonPollingAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutAsyncRelativeRetryInvalidJsonPolling_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    provisioningState = "<provisioningState>",
                },
                tags = new
                {
                    key = "<tags>",
                },
                location = "<location>",
            });
            Operation<BinaryData> operation = await client.PutAsyncRelativeRetryInvalidJsonPollingAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Delete202RetryInvalidHeader_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            Operation operation = await client.Delete202RetryInvalidHeaderAsync(WaitUntil.Completed);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Delete202RetryInvalidHeader_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            Operation operation = await client.Delete202RetryInvalidHeaderAsync(WaitUntil.Completed);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DeleteAsyncRelativeRetryInvalidHeader_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            Operation operation = await client.DeleteAsyncRelativeRetryInvalidHeaderAsync(WaitUntil.Completed);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DeleteAsyncRelativeRetryInvalidHeader_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            Operation operation = await client.DeleteAsyncRelativeRetryInvalidHeaderAsync(WaitUntil.Completed);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DeleteAsyncRelativeRetryInvalidJsonPolling_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            Operation operation = await client.DeleteAsyncRelativeRetryInvalidJsonPollingAsync(WaitUntil.Completed);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DeleteAsyncRelativeRetryInvalidJsonPolling_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            Operation operation = await client.DeleteAsyncRelativeRetryInvalidJsonPollingAsync(WaitUntil.Completed);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Post202RetryInvalidHeader_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = null;
            Operation operation = await client.Post202RetryInvalidHeaderAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Post202RetryInvalidHeader_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    provisioningState = "<provisioningState>",
                },
                tags = new
                {
                    key = "<tags>",
                },
                location = "<location>",
            });
            Operation operation = await client.Post202RetryInvalidHeaderAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PostAsyncRelativeRetryInvalidHeader_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = null;
            Operation operation = await client.PostAsyncRelativeRetryInvalidHeaderAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PostAsyncRelativeRetryInvalidHeader_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    provisioningState = "<provisioningState>",
                },
                tags = new
                {
                    key = "<tags>",
                },
                location = "<location>",
            });
            Operation operation = await client.PostAsyncRelativeRetryInvalidHeaderAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PostAsyncRelativeRetryInvalidJsonPolling_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = null;
            Operation operation = await client.PostAsyncRelativeRetryInvalidJsonPollingAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PostAsyncRelativeRetryInvalidJsonPolling_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LrosaDsClient client = CreateLrosaDsClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    provisioningState = "<provisioningState>",
                },
                tags = new
                {
                    key = "<tags>",
                },
                location = "<location>",
            });
            Operation operation = await client.PostAsyncRelativeRetryInvalidJsonPollingAsync(WaitUntil.Completed, content);
        }
    }
}
