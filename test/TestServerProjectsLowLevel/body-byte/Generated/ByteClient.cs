// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

#pragma warning disable AZC0007

namespace body_byte
{
    /// <summary> The Byte service client. </summary>
    public partial class ByteClient
    {
        protected HttpPipeline Pipeline { get; }
        private const string AuthorizationHeader = "Fake-Subscription-Key";
        private Uri endpoint;

        /// <summary> Initializes a new instance of ByteClient for mocking. </summary>
        protected ByteClient()
        {
        }

        /// <summary> Initializes a new instance of ByteClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        internal ByteClient(AzureKeyCredential credential, Uri endpoint = null, AutoRestSwaggerBATByteServiceClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            endpoint ??= new Uri("http://localhost:3000");

            options ??= new AutoRestSwaggerBATByteServiceClientOptions();
            Pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, AuthorizationHeader));
            this.endpoint = endpoint;
        }

        /// <summary> Get null byte value. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetNullAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetNullRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get null byte value. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetNull(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetNullRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetNull"/> and <see cref="GetNullAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        protected Request CreateGetNullRequest(RequestContent requestBody)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/byte/null", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Get empty byte value &apos;&apos;. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetEmptyAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetEmptyRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get empty byte value &apos;&apos;. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetEmpty(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetEmptyRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetEmpty"/> and <see cref="GetEmptyAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        protected Request CreateGetEmptyRequest(RequestContent requestBody)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/byte/empty", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Get non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6). </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetNonAsciiAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetNonAsciiRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6). </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetNonAscii(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetNonAsciiRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetNonAscii"/> and <see cref="GetNonAsciiAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        protected Request CreateGetNonAsciiRequest(RequestContent requestBody)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/byte/nonAscii", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Put non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6). </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PutNonAsciiAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreatePutNonAsciiRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Put non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6). </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PutNonAscii(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreatePutNonAsciiRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="PutNonAscii"/> and <see cref="PutNonAsciiAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        protected Request CreatePutNonAsciiRequest(RequestContent requestBody)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/byte/nonAscii", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return request;
        }
        /// <summary> Get invalid byte value &apos;:::SWAGGER::::&apos;. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetInvalidAsync(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetInvalidRequest(requestBody);
            return await Pipeline.SendRequestAsync(req, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get invalid byte value &apos;:::SWAGGER::::&apos;. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetInvalid(RequestContent requestBody, CancellationToken cancellationToken = default)
        {
            Request req = CreateGetInvalidRequest(requestBody);
            return Pipeline.SendRequest(req, cancellationToken);
        }

        /// <summary> Create Request for <see cref="GetInvalid"/> and <see cref="GetInvalidAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        protected Request CreateGetInvalidRequest(RequestContent requestBody)
        {
            var request = Pipeline.CreateRequest();
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/byte/invalid", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Content = requestBody;
            return request;
        }
    }
}
