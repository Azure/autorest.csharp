// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace dpg_initial_LowLevel
{
    /// <summary> The Test service client. </summary>
    public partial class TestClient
    {
        private const string AuthorizationHeader = "Fake-Subscription-Key";
        private readonly AzureKeyCredential _keyCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of TestClient for mocking. </summary>
        protected TestClient()
        {
        }

        /// <summary> Initializes a new instance of TestClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public TestClient(AzureKeyCredential credential, Uri endpoint = null, CloudNativeTestClientOptions options = null)
        {
            Argument.AssertNotNull(credential, nameof(credential));
            endpoint ??= new Uri("");
            options ??= new CloudNativeTestClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options);
            _keyCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new AzureKeyCredentialPolicy(_keyCredential, AuthorizationHeader) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Creates/Updates a new load test. Test name must be a valid URL character ^[a-z0-9_-]*$. </summary>
        /// <param name="testId"> Unique identifier for load test name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   testId: string,
        ///   description: string,
        ///   displayName: string,
        ///   resourceId: string,
        ///   loadTestConfig: {
        ///     engineInstances: number
        ///   },
        ///   passFailCriteria: {
        ///     passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;
        ///   },
        ///   createdDateTime: string (ISO 8601 Format),
        ///   createdBy: string,
        ///   lastModifiedDateTime: string (ISO 8601 Format),
        ///   lastModifiedBy: string,
        ///   inputArtifacts: {
        ///     configUrl: {
        ///       url: string,
        ///       fileId: string,
        ///       filename: string,
        ///       expireTime: string (ISO 8601 Format)
        ///     },
        ///     testScriptUrl: FileUrl,
        ///     inputArtifactsZipFileurl: FileUrl,
        ///     additionalUrls: [FileUrl]
        ///   },
        ///   secrets: Dictionary&lt;string, SecretMetadata&gt;,
        ///   environmentVariables: Dictionary&lt;string, string&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   testId: string,
        ///   description: string,
        ///   displayName: string,
        ///   resourceId: string,
        ///   loadTestConfig: {
        ///     engineInstances: number
        ///   },
        ///   passFailCriteria: {
        ///     passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;
        ///   },
        ///   createdDateTime: string (ISO 8601 Format),
        ///   createdBy: string,
        ///   lastModifiedDateTime: string (ISO 8601 Format),
        ///   lastModifiedBy: string,
        ///   inputArtifacts: {
        ///     configUrl: {
        ///       url: string,
        ///       fileId: string,
        ///       filename: string,
        ///       expireTime: string (ISO 8601 Format)
        ///     },
        ///     testScriptUrl: FileUrl,
        ///     inputArtifactsZipFileurl: FileUrl,
        ///     additionalUrls: [FileUrl]
        ///   },
        ///   secrets: Dictionary&lt;string, SecretMetadata&gt;,
        ///   environmentVariables: Dictionary&lt;string, string&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateOrUpdateTestAsync(string testId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testId, nameof(testId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("TestClient.CreateOrUpdateTest");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateTestRequest(testId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates/Updates a new load test. Test name must be a valid URL character ^[a-z0-9_-]*$. </summary>
        /// <param name="testId"> Unique identifier for load test name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   testId: string,
        ///   description: string,
        ///   displayName: string,
        ///   resourceId: string,
        ///   loadTestConfig: {
        ///     engineInstances: number
        ///   },
        ///   passFailCriteria: {
        ///     passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;
        ///   },
        ///   createdDateTime: string (ISO 8601 Format),
        ///   createdBy: string,
        ///   lastModifiedDateTime: string (ISO 8601 Format),
        ///   lastModifiedBy: string,
        ///   inputArtifacts: {
        ///     configUrl: {
        ///       url: string,
        ///       fileId: string,
        ///       filename: string,
        ///       expireTime: string (ISO 8601 Format)
        ///     },
        ///     testScriptUrl: FileUrl,
        ///     inputArtifactsZipFileurl: FileUrl,
        ///     additionalUrls: [FileUrl]
        ///   },
        ///   secrets: Dictionary&lt;string, SecretMetadata&gt;,
        ///   environmentVariables: Dictionary&lt;string, string&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   testId: string,
        ///   description: string,
        ///   displayName: string,
        ///   resourceId: string,
        ///   loadTestConfig: {
        ///     engineInstances: number
        ///   },
        ///   passFailCriteria: {
        ///     passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;
        ///   },
        ///   createdDateTime: string (ISO 8601 Format),
        ///   createdBy: string,
        ///   lastModifiedDateTime: string (ISO 8601 Format),
        ///   lastModifiedBy: string,
        ///   inputArtifacts: {
        ///     configUrl: {
        ///       url: string,
        ///       fileId: string,
        ///       filename: string,
        ///       expireTime: string (ISO 8601 Format)
        ///     },
        ///     testScriptUrl: FileUrl,
        ///     inputArtifactsZipFileurl: FileUrl,
        ///     additionalUrls: [FileUrl]
        ///   },
        ///   secrets: Dictionary&lt;string, SecretMetadata&gt;,
        ///   environmentVariables: Dictionary&lt;string, string&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateOrUpdateTest(string testId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testId, nameof(testId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("TestClient.CreateOrUpdateTest");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateTestRequest(testId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a test with given name. Test name must be a valid URL character ^[a-z0-9_-]*$. </summary>
        /// <param name="testId"> Unique identifier for load test name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> DeleteLoadTestAsync(string testId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testId, nameof(testId));

            using var scope = ClientDiagnostics.CreateScope("TestClient.DeleteLoadTest");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteLoadTestRequest(testId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a test with given name. Test name must be a valid URL character ^[a-z0-9_-]*$. </summary>
        /// <param name="testId"> Unique identifier for load test name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response DeleteLoadTest(string testId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testId, nameof(testId));

            using var scope = ClientDiagnostics.CreateScope("TestClient.DeleteLoadTest");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteLoadTestRequest(testId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get load test model of given test name. </summary>
        /// <param name="testId"> Unique identifier for load test name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   testId: string,
        ///   description: string,
        ///   displayName: string,
        ///   resourceId: string,
        ///   loadTestConfig: {
        ///     engineInstances: number
        ///   },
        ///   passFailCriteria: {
        ///     passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;
        ///   },
        ///   createdDateTime: string (ISO 8601 Format),
        ///   createdBy: string,
        ///   lastModifiedDateTime: string (ISO 8601 Format),
        ///   lastModifiedBy: string,
        ///   inputArtifacts: {
        ///     configUrl: {
        ///       url: string,
        ///       fileId: string,
        ///       filename: string,
        ///       expireTime: string (ISO 8601 Format)
        ///     },
        ///     testScriptUrl: FileUrl,
        ///     inputArtifactsZipFileurl: FileUrl,
        ///     additionalUrls: [FileUrl]
        ///   },
        ///   secrets: Dictionary&lt;string, SecretMetadata&gt;,
        ///   environmentVariables: Dictionary&lt;string, string&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetLoadTestAsync(string testId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testId, nameof(testId));

            using var scope = ClientDiagnostics.CreateScope("TestClient.GetLoadTest");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetLoadTestRequest(testId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get load test model of given test name. </summary>
        /// <param name="testId"> Unique identifier for load test name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   testId: string,
        ///   description: string,
        ///   displayName: string,
        ///   resourceId: string,
        ///   loadTestConfig: {
        ///     engineInstances: number
        ///   },
        ///   passFailCriteria: {
        ///     passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;
        ///   },
        ///   createdDateTime: string (ISO 8601 Format),
        ///   createdBy: string,
        ///   lastModifiedDateTime: string (ISO 8601 Format),
        ///   lastModifiedBy: string,
        ///   inputArtifacts: {
        ///     configUrl: {
        ///       url: string,
        ///       fileId: string,
        ///       filename: string,
        ///       expireTime: string (ISO 8601 Format)
        ///     },
        ///     testScriptUrl: FileUrl,
        ///     inputArtifactsZipFileurl: FileUrl,
        ///     additionalUrls: [FileUrl]
        ///   },
        ///   secrets: Dictionary&lt;string, SecretMetadata&gt;,
        ///   environmentVariables: Dictionary&lt;string, string&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetLoadTest(string testId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testId, nameof(testId));

            using var scope = ClientDiagnostics.CreateScope("TestClient.GetLoadTest");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetLoadTestRequest(testId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all load tests for a given Fully qualified resource Id e.g subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}. </summary>
        /// <param name="orderBy"> Sort on one of the field - lastModifiedDateTime, displayName, createdBy in (field asc/desc) format. eg: displayName asc. </param>
        /// <param name="search"> Filter search based on searchable fields- testId, createdBy. </param>
        /// <param name="lastUpdatedStartTime"> Start DateTime(Iso8601Literal format) of the last updated time range to filter tests. </param>
        /// <param name="lastUpdatedEndTime"> End DateTime(Iso8601Literal format) of the last updated time range to filter tests. </param>
        /// <param name="nextLink"> NextLink Token to get next page of response. </param>
        /// <param name="maxPageSize"> No of results in response. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       testId: string,
        ///       description: string,
        ///       displayName: string,
        ///       resourceId: string,
        ///       loadTestConfig: {
        ///         engineInstances: number
        ///       },
        ///       passFailCriteria: {
        ///         passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;
        ///       },
        ///       createdDateTime: string (ISO 8601 Format),
        ///       createdBy: string,
        ///       lastModifiedDateTime: string (ISO 8601 Format),
        ///       lastModifiedBy: string,
        ///       inputArtifacts: {
        ///         configUrl: {
        ///           url: string,
        ///           fileId: string,
        ///           filename: string,
        ///           expireTime: string (ISO 8601 Format)
        ///         },
        ///         testScriptUrl: FileUrl,
        ///         inputArtifactsZipFileurl: FileUrl,
        ///         additionalUrls: [FileUrl]
        ///       },
        ///       secrets: Dictionary&lt;string, SecretMetadata&gt;,
        ///       environmentVariables: Dictionary&lt;string, string&gt;
        ///     }
        ///   ],
        ///   continuationToken: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetLoadTestSearchesAsync(string orderBy = null, string search = null, DateTimeOffset? lastUpdatedStartTime = null, DateTimeOffset? lastUpdatedEndTime = null, string nextLink = null, int? maxPageSize = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("TestClient.GetLoadTestSearches");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetLoadTestSearchesRequest(orderBy, search, lastUpdatedStartTime, lastUpdatedEndTime, nextLink, maxPageSize, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all load tests for a given Fully qualified resource Id e.g subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}. </summary>
        /// <param name="orderBy"> Sort on one of the field - lastModifiedDateTime, displayName, createdBy in (field asc/desc) format. eg: displayName asc. </param>
        /// <param name="search"> Filter search based on searchable fields- testId, createdBy. </param>
        /// <param name="lastUpdatedStartTime"> Start DateTime(Iso8601Literal format) of the last updated time range to filter tests. </param>
        /// <param name="lastUpdatedEndTime"> End DateTime(Iso8601Literal format) of the last updated time range to filter tests. </param>
        /// <param name="nextLink"> NextLink Token to get next page of response. </param>
        /// <param name="maxPageSize"> No of results in response. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       testId: string,
        ///       description: string,
        ///       displayName: string,
        ///       resourceId: string,
        ///       loadTestConfig: {
        ///         engineInstances: number
        ///       },
        ///       passFailCriteria: {
        ///         passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;
        ///       },
        ///       createdDateTime: string (ISO 8601 Format),
        ///       createdBy: string,
        ///       lastModifiedDateTime: string (ISO 8601 Format),
        ///       lastModifiedBy: string,
        ///       inputArtifacts: {
        ///         configUrl: {
        ///           url: string,
        ///           fileId: string,
        ///           filename: string,
        ///           expireTime: string (ISO 8601 Format)
        ///         },
        ///         testScriptUrl: FileUrl,
        ///         inputArtifactsZipFileurl: FileUrl,
        ///         additionalUrls: [FileUrl]
        ///       },
        ///       secrets: Dictionary&lt;string, SecretMetadata&gt;,
        ///       environmentVariables: Dictionary&lt;string, string&gt;
        ///     }
        ///   ],
        ///   continuationToken: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetLoadTestSearches(string orderBy = null, string search = null, DateTimeOffset? lastUpdatedStartTime = null, DateTimeOffset? lastUpdatedEndTime = null, string nextLink = null, int? maxPageSize = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("TestClient.GetLoadTestSearches");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetLoadTestSearchesRequest(orderBy, search, lastUpdatedStartTime, lastUpdatedEndTime, nextLink, maxPageSize, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Upload input file for a given test name. File name must be a valid URL character ^[a-z0-9_-]*$. File size can&apos;t be more than 50 MB. Existing file with same name for the given test will be overwritten. </summary>
        /// <param name="testId"> Unique identifier for load test name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="fileId"> Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testId"/>, <paramref name="fileId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testId"/> or <paramref name="fileId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   testId: string,
        ///   description: string,
        ///   displayName: string,
        ///   resourceId: string,
        ///   loadTestConfig: {
        ///     engineInstances: number
        ///   },
        ///   passFailCriteria: {
        ///     passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;
        ///   },
        ///   createdDateTime: string (ISO 8601 Format),
        ///   createdBy: string,
        ///   lastModifiedDateTime: string (ISO 8601 Format),
        ///   lastModifiedBy: string,
        ///   inputArtifacts: {
        ///     configUrl: {
        ///       url: string,
        ///       fileId: string,
        ///       filename: string,
        ///       expireTime: string (ISO 8601 Format)
        ///     },
        ///     testScriptUrl: FileUrl,
        ///     inputArtifactsZipFileurl: FileUrl,
        ///     additionalUrls: [FileUrl]
        ///   },
        ///   secrets: Dictionary&lt;string, SecretMetadata&gt;,
        ///   environmentVariables: Dictionary&lt;string, string&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> UploadTestFileAsync(string testId, string fileId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testId, nameof(testId));
            Argument.AssertNotNullOrEmpty(fileId, nameof(fileId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("TestClient.UploadTestFile");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUploadTestFileRequest(testId, fileId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Upload input file for a given test name. File name must be a valid URL character ^[a-z0-9_-]*$. File size can&apos;t be more than 50 MB. Existing file with same name for the given test will be overwritten. </summary>
        /// <param name="testId"> Unique identifier for load test name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="fileId"> Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testId"/>, <paramref name="fileId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testId"/> or <paramref name="fileId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   testId: string,
        ///   description: string,
        ///   displayName: string,
        ///   resourceId: string,
        ///   loadTestConfig: {
        ///     engineInstances: number
        ///   },
        ///   passFailCriteria: {
        ///     passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;
        ///   },
        ///   createdDateTime: string (ISO 8601 Format),
        ///   createdBy: string,
        ///   lastModifiedDateTime: string (ISO 8601 Format),
        ///   lastModifiedBy: string,
        ///   inputArtifacts: {
        ///     configUrl: {
        ///       url: string,
        ///       fileId: string,
        ///       filename: string,
        ///       expireTime: string (ISO 8601 Format)
        ///     },
        ///     testScriptUrl: FileUrl,
        ///     inputArtifactsZipFileurl: FileUrl,
        ///     additionalUrls: [FileUrl]
        ///   },
        ///   secrets: Dictionary&lt;string, SecretMetadata&gt;,
        ///   environmentVariables: Dictionary&lt;string, string&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response UploadTestFile(string testId, string fileId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testId, nameof(testId));
            Argument.AssertNotNullOrEmpty(fileId, nameof(fileId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("TestClient.UploadTestFile");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUploadTestFileRequest(testId, fileId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get test file with given file name. </summary>
        /// <param name="testId"> Unique identifier for load test name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="fileId"> Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testId"/> or <paramref name="fileId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testId"/> or <paramref name="fileId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   url: string,
        ///   expireTime: string (ISO 8601 Format)
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetTestFileAsync(string testId, string fileId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testId, nameof(testId));
            Argument.AssertNotNullOrEmpty(fileId, nameof(fileId));

            using var scope = ClientDiagnostics.CreateScope("TestClient.GetTestFile");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTestFileRequest(testId, fileId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get test file with given file name. </summary>
        /// <param name="testId"> Unique identifier for load test name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="fileId"> Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testId"/> or <paramref name="fileId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testId"/> or <paramref name="fileId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   url: string,
        ///   expireTime: string (ISO 8601 Format)
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetTestFile(string testId, string fileId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testId, nameof(testId));
            Argument.AssertNotNullOrEmpty(fileId, nameof(fileId));

            using var scope = ClientDiagnostics.CreateScope("TestClient.GetTestFile");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTestFileRequest(testId, fileId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete file of given file name for a test. File name must be a valid URL character ^[a-z0-9_-]*$. </summary>
        /// <param name="testId"> Unique identifier for load test name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="fileId"> Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testId"/> or <paramref name="fileId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testId"/> or <paramref name="fileId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> DeleteTestFileAsync(string testId, string fileId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testId, nameof(testId));
            Argument.AssertNotNullOrEmpty(fileId, nameof(fileId));

            using var scope = ClientDiagnostics.CreateScope("TestClient.DeleteTestFile");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteTestFileRequest(testId, fileId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete file of given file name for a test. File name must be a valid URL character ^[a-z0-9_-]*$. </summary>
        /// <param name="testId"> Unique identifier for load test name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="fileId"> Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testId"/> or <paramref name="fileId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testId"/> or <paramref name="fileId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response DeleteTestFile(string testId, string fileId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testId, nameof(testId));
            Argument.AssertNotNullOrEmpty(fileId, nameof(fileId));

            using var scope = ClientDiagnostics.CreateScope("TestClient.DeleteTestFile");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteTestFileRequest(testId, fileId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all test files. </summary>
        /// <param name="testId"> Unique identifier for load test name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       url: string,
        ///       fileId: string,
        ///       filename: string,
        ///       expireTime: string (ISO 8601 Format)
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetAllTestFilesAsync(string testId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testId, nameof(testId));

            using var scope = ClientDiagnostics.CreateScope("TestClient.GetAllTestFiles");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAllTestFilesRequest(testId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all test files. </summary>
        /// <param name="testId"> Unique identifier for load test name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       url: string,
        ///       fileId: string,
        ///       filename: string,
        ///       expireTime: string (ISO 8601 Format)
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetAllTestFiles(string testId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testId, nameof(testId));

            using var scope = ClientDiagnostics.CreateScope("TestClient.GetAllTestFiles");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAllTestFilesRequest(testId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateCreateOrUpdateTestRequest(string testId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/loadtests/", false);
            uri.AppendPath(testId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/merge-patch+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteLoadTestRequest(string testId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/loadtests/", false);
            uri.AppendPath(testId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetLoadTestRequest(string testId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/loadtests/", false);
            uri.AppendPath(testId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetLoadTestSearchesRequest(string orderBy, string search, DateTimeOffset? lastUpdatedStartTime, DateTimeOffset? lastUpdatedEndTime, string nextLink, int? maxPageSize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/loadtests/sortAndFilter", false);
            if (orderBy != null)
            {
                uri.AppendQuery("orderBy", orderBy, true);
            }
            if (search != null)
            {
                uri.AppendQuery("search", search, true);
            }
            if (lastUpdatedStartTime != null)
            {
                uri.AppendQuery("lastUpdatedStartTime", lastUpdatedStartTime.Value, "O", true);
            }
            if (lastUpdatedEndTime != null)
            {
                uri.AppendQuery("lastUpdatedEndTime", lastUpdatedEndTime.Value, "O", true);
            }
            if (nextLink != null)
            {
                uri.AppendQuery("nextLink", nextLink, true);
            }
            if (maxPageSize != null)
            {
                uri.AppendQuery("maxPageSize", maxPageSize.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUploadTestFileRequest(string testId, string fileId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier201);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/loadtests/", false);
            uri.AppendPath(testId, true);
            uri.AppendPath("/files/", false);
            uri.AppendPath(fileId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetTestFileRequest(string testId, string fileId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/loadtests/", false);
            uri.AppendPath(testId, true);
            uri.AppendPath("/files/", false);
            uri.AppendPath(fileId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteTestFileRequest(string testId, string fileId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/loadtests/", false);
            uri.AppendPath(testId, true);
            uri.AppendPath("/files/", false);
            uri.AppendPath(fileId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetAllTestFilesRequest(string testId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/loadtests/", false);
            uri.AppendPath(testId, true);
            uri.AppendPath("/files", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier201;
        private static ResponseClassifier ResponseClassifier201 => _responseClassifier201 ??= new StatusCodeClassifier(stackalloc ushort[] { 201 });
    }
}
