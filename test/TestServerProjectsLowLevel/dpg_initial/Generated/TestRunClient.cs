// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace dpg_initial_LowLevel
{
    /// <summary> The TestRun service client. </summary>
    public partial class TestRunClient
    {
        private const string AuthorizationHeader = "Fake-Subscription-Key";
        private readonly AzureKeyCredential _keyCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of TestRunClient for mocking. </summary>
        protected TestRunClient()
        {
        }

        /// <summary> Initializes a new instance of TestRunClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public TestRunClient(AzureKeyCredential credential, Uri endpoint = null, CloudNativeTestClientOptions options = null)
        {
            Argument.AssertNotNull(credential, nameof(credential));
            endpoint ??= new Uri("");
            options ??= new CloudNativeTestClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options);
            _keyCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new AzureKeyCredentialPolicy(_keyCredential, AuthorizationHeader) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Delete a test run with given name. Test run name must be a valid URL character ^[a-z0-9_-]*$. </summary>
        /// <param name="testRunId"> Unique identifier for load test run name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testRunId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> DeleteTestRunAsync(string testRunId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));

            using var scope = ClientDiagnostics.CreateScope("TestRunClient.DeleteTestRun");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteTestRunRequest(testRunId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a test run with given name. Test run name must be a valid URL character ^[a-z0-9_-]*$. </summary>
        /// <param name="testRunId"> Unique identifier for load test run name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testRunId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response DeleteTestRun(string testRunId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));

            using var scope = ClientDiagnostics.CreateScope("TestRunClient.DeleteTestRun");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteTestRunRequest(testRunId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create and start new test run of the given name, test run name must be a valid URL character ^[a-z0-9_-]*$. </summary>
        /// <param name="testRunId"> Unique identifier for load test run name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="oldTestRunId"> Existing testRunId to re run new test. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testRunId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   testRunId: string,
        ///   displayName: string,
        ///   testId: string,
        ///   resourceId: string,
        ///   description: string,
        ///   status: string,
        ///   startDateTime: string (ISO 8601 Format),
        ///   endDateTime: string (ISO 8601 Format),
        ///   loadTestConfig: {
        ///     engineInstances: number
        ///   },
        ///   testResult: string,
        ///   passFailCriteria: {
        ///     passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;
        ///   },
        ///   testArtifacts: {
        ///     inputArtifacts: {
        ///       configUrl: {
        ///         url: string,
        ///         fileId: string,
        ///         filename: string,
        ///         expireTime: string (ISO 8601 Format)
        ///       },
        ///       testScriptUrl: FileUrl,
        ///       inputArtifactsZipFileurl: FileUrl,
        ///       additionalUrls: [FileUrl]
        ///     } (required),
        ///     outputArtifacts: {
        ///       resultUrl: FileUrl (required),
        ///       logsUrl: FileUrl (required)
        ///     }
        ///   },
        ///   executedDateTime: string (ISO 8601 Format),
        ///   vusers: number,
        ///   testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;,
        ///   createdDateTime: string (ISO 8601 Format),
        ///   createdBy: string,
        ///   lastModifiedDateTime: string (ISO 8601 Format),
        ///   lastModifiedBy: string,
        ///   portalUrl: string,
        ///   secrets: Dictionary&lt;string, SecretMetadata&gt;,
        ///   environmentVariables: Dictionary&lt;string, string&gt;,
        ///   duration: number
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   testRunId: string,
        ///   displayName: string,
        ///   testId: string,
        ///   resourceId: string,
        ///   description: string,
        ///   status: string,
        ///   startDateTime: string (ISO 8601 Format),
        ///   endDateTime: string (ISO 8601 Format),
        ///   loadTestConfig: {
        ///     engineInstances: number
        ///   },
        ///   testResult: string,
        ///   passFailCriteria: {
        ///     passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;
        ///   },
        ///   testArtifacts: {
        ///     inputArtifacts: {
        ///       configUrl: {
        ///         url: string,
        ///         fileId: string,
        ///         filename: string,
        ///         expireTime: string (ISO 8601 Format)
        ///       },
        ///       testScriptUrl: FileUrl,
        ///       inputArtifactsZipFileurl: FileUrl,
        ///       additionalUrls: [FileUrl]
        ///     },
        ///     outputArtifacts: {
        ///       resultUrl: FileUrl,
        ///       logsUrl: FileUrl
        ///     }
        ///   },
        ///   executedDateTime: string (ISO 8601 Format),
        ///   vusers: number,
        ///   testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;,
        ///   createdDateTime: string (ISO 8601 Format),
        ///   createdBy: string,
        ///   lastModifiedDateTime: string (ISO 8601 Format),
        ///   lastModifiedBy: string,
        ///   portalUrl: string,
        ///   secrets: Dictionary&lt;string, SecretMetadata&gt;,
        ///   environmentVariables: Dictionary&lt;string, string&gt;,
        ///   duration: number
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateAndUpdateTestAsync(string testRunId, RequestContent content, string oldTestRunId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("TestRunClient.CreateAndUpdateTest");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateAndUpdateTestRequest(testRunId, content, oldTestRunId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create and start new test run of the given name, test run name must be a valid URL character ^[a-z0-9_-]*$. </summary>
        /// <param name="testRunId"> Unique identifier for load test run name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="oldTestRunId"> Existing testRunId to re run new test. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testRunId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   testRunId: string,
        ///   displayName: string,
        ///   testId: string,
        ///   resourceId: string,
        ///   description: string,
        ///   status: string,
        ///   startDateTime: string (ISO 8601 Format),
        ///   endDateTime: string (ISO 8601 Format),
        ///   loadTestConfig: {
        ///     engineInstances: number
        ///   },
        ///   testResult: string,
        ///   passFailCriteria: {
        ///     passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;
        ///   },
        ///   testArtifacts: {
        ///     inputArtifacts: {
        ///       configUrl: {
        ///         url: string,
        ///         fileId: string,
        ///         filename: string,
        ///         expireTime: string (ISO 8601 Format)
        ///       },
        ///       testScriptUrl: FileUrl,
        ///       inputArtifactsZipFileurl: FileUrl,
        ///       additionalUrls: [FileUrl]
        ///     } (required),
        ///     outputArtifacts: {
        ///       resultUrl: FileUrl (required),
        ///       logsUrl: FileUrl (required)
        ///     }
        ///   },
        ///   executedDateTime: string (ISO 8601 Format),
        ///   vusers: number,
        ///   testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;,
        ///   createdDateTime: string (ISO 8601 Format),
        ///   createdBy: string,
        ///   lastModifiedDateTime: string (ISO 8601 Format),
        ///   lastModifiedBy: string,
        ///   portalUrl: string,
        ///   secrets: Dictionary&lt;string, SecretMetadata&gt;,
        ///   environmentVariables: Dictionary&lt;string, string&gt;,
        ///   duration: number
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   testRunId: string,
        ///   displayName: string,
        ///   testId: string,
        ///   resourceId: string,
        ///   description: string,
        ///   status: string,
        ///   startDateTime: string (ISO 8601 Format),
        ///   endDateTime: string (ISO 8601 Format),
        ///   loadTestConfig: {
        ///     engineInstances: number
        ///   },
        ///   testResult: string,
        ///   passFailCriteria: {
        ///     passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;
        ///   },
        ///   testArtifacts: {
        ///     inputArtifacts: {
        ///       configUrl: {
        ///         url: string,
        ///         fileId: string,
        ///         filename: string,
        ///         expireTime: string (ISO 8601 Format)
        ///       },
        ///       testScriptUrl: FileUrl,
        ///       inputArtifactsZipFileurl: FileUrl,
        ///       additionalUrls: [FileUrl]
        ///     },
        ///     outputArtifacts: {
        ///       resultUrl: FileUrl,
        ///       logsUrl: FileUrl
        ///     }
        ///   },
        ///   executedDateTime: string (ISO 8601 Format),
        ///   vusers: number,
        ///   testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;,
        ///   createdDateTime: string (ISO 8601 Format),
        ///   createdBy: string,
        ///   lastModifiedDateTime: string (ISO 8601 Format),
        ///   lastModifiedBy: string,
        ///   portalUrl: string,
        ///   secrets: Dictionary&lt;string, SecretMetadata&gt;,
        ///   environmentVariables: Dictionary&lt;string, string&gt;,
        ///   duration: number
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateAndUpdateTest(string testRunId, RequestContent content, string oldTestRunId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("TestRunClient.CreateAndUpdateTest");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateAndUpdateTestRequest(testRunId, content, oldTestRunId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get test run of given name. </summary>
        /// <param name="testRunId"> Unique identifier for load test run name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testRunId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   testRunId: string,
        ///   displayName: string,
        ///   testId: string,
        ///   resourceId: string,
        ///   description: string,
        ///   status: string,
        ///   startDateTime: string (ISO 8601 Format),
        ///   endDateTime: string (ISO 8601 Format),
        ///   loadTestConfig: {
        ///     engineInstances: number
        ///   },
        ///   testResult: string,
        ///   passFailCriteria: {
        ///     passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;
        ///   },
        ///   testArtifacts: {
        ///     inputArtifacts: {
        ///       configUrl: {
        ///         url: string,
        ///         fileId: string,
        ///         filename: string,
        ///         expireTime: string (ISO 8601 Format)
        ///       },
        ///       testScriptUrl: FileUrl,
        ///       inputArtifactsZipFileurl: FileUrl,
        ///       additionalUrls: [FileUrl]
        ///     },
        ///     outputArtifacts: {
        ///       resultUrl: FileUrl,
        ///       logsUrl: FileUrl
        ///     }
        ///   },
        ///   executedDateTime: string (ISO 8601 Format),
        ///   vusers: number,
        ///   testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;,
        ///   createdDateTime: string (ISO 8601 Format),
        ///   createdBy: string,
        ///   lastModifiedDateTime: string (ISO 8601 Format),
        ///   lastModifiedBy: string,
        ///   portalUrl: string,
        ///   secrets: Dictionary&lt;string, SecretMetadata&gt;,
        ///   environmentVariables: Dictionary&lt;string, string&gt;,
        ///   duration: number
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetTestRunAsync(string testRunId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));

            using var scope = ClientDiagnostics.CreateScope("TestRunClient.GetTestRun");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTestRunRequest(testRunId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get test run of given name. </summary>
        /// <param name="testRunId"> Unique identifier for load test run name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testRunId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   testRunId: string,
        ///   displayName: string,
        ///   testId: string,
        ///   resourceId: string,
        ///   description: string,
        ///   status: string,
        ///   startDateTime: string (ISO 8601 Format),
        ///   endDateTime: string (ISO 8601 Format),
        ///   loadTestConfig: {
        ///     engineInstances: number
        ///   },
        ///   testResult: string,
        ///   passFailCriteria: {
        ///     passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;
        ///   },
        ///   testArtifacts: {
        ///     inputArtifacts: {
        ///       configUrl: {
        ///         url: string,
        ///         fileId: string,
        ///         filename: string,
        ///         expireTime: string (ISO 8601 Format)
        ///       },
        ///       testScriptUrl: FileUrl,
        ///       inputArtifactsZipFileurl: FileUrl,
        ///       additionalUrls: [FileUrl]
        ///     },
        ///     outputArtifacts: {
        ///       resultUrl: FileUrl,
        ///       logsUrl: FileUrl
        ///     }
        ///   },
        ///   executedDateTime: string (ISO 8601 Format),
        ///   vusers: number,
        ///   testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;,
        ///   createdDateTime: string (ISO 8601 Format),
        ///   createdBy: string,
        ///   lastModifiedDateTime: string (ISO 8601 Format),
        ///   lastModifiedBy: string,
        ///   portalUrl: string,
        ///   secrets: Dictionary&lt;string, SecretMetadata&gt;,
        ///   environmentVariables: Dictionary&lt;string, string&gt;,
        ///   duration: number
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetTestRun(string testRunId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));

            using var scope = ClientDiagnostics.CreateScope("TestRunClient.GetTestRun");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTestRunRequest(testRunId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get testrun file with given file name. </summary>
        /// <param name="testRunId"> Unique identifier for load test run name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="fileId"> Unique identifier for test run file, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testRunId"/> or <paramref name="fileId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testRunId"/> or <paramref name="fileId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   url: string,
        ///   expireTime: string (ISO 8601 Format)
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetTestRunFileAsync(string testRunId, string fileId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));
            Argument.AssertNotNullOrEmpty(fileId, nameof(fileId));

            using var scope = ClientDiagnostics.CreateScope("TestRunClient.GetTestRunFile");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTestRunFileRequest(testRunId, fileId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get testrun file with given file name. </summary>
        /// <param name="testRunId"> Unique identifier for load test run name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="fileId"> Unique identifier for test run file, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testRunId"/> or <paramref name="fileId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testRunId"/> or <paramref name="fileId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   url: string,
        ///   expireTime: string (ISO 8601 Format)
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetTestRunFile(string testRunId, string fileId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));
            Argument.AssertNotNullOrEmpty(fileId, nameof(fileId));

            using var scope = ClientDiagnostics.CreateScope("TestRunClient.GetTestRunFile");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTestRunFileRequest(testRunId, fileId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all test runs with given filters. </summary>
        /// <param name="orderBy"> Sort on one of the field - status, displayName, executedDateTime in (field asc/desc) format. eg: displayName asc. </param>
        /// <param name="nextLink"> NextLink Token to get next page of response. </param>
        /// <param name="search"> Filter search based on searchable fields - description, executedUser. </param>
        /// <param name="testId"> Unique identifier for load test name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="executionFrom"> The end DateTime(Iso8601Literal format) of test-run execution time filter range. </param>
        /// <param name="executionTo"> The start DateTime(Iso8601Literal format) of test-run execution time filter range. </param>
        /// <param name="status">
        /// Comma separated list of test run status, value can be -  &quot;ACCEPTED&quot;, &quot;NOTSTARTED&quot;,&quot;PROVISIONING&quot;,&quot;PROVISIONED&quot;,&quot;CONFIGURING&quot;,
        /// &quot;CONFIGURED&quot;,&quot;EXECUTING&quot;,&quot;EXECUTED&quot;,&quot;DEPROVISIONING&quot;,&quot;DEPROVISIONED&quot;,&quot;DONE&quot;,&quot;CANCELLED&quot;,&quot;FAILED&quot;
        /// </param>
        /// <param name="maxPageSize"> No of results in response. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       testRunId: string,
        ///       displayName: string,
        ///       testId: string,
        ///       resourceId: string,
        ///       description: string,
        ///       status: string,
        ///       startDateTime: string (ISO 8601 Format),
        ///       endDateTime: string (ISO 8601 Format),
        ///       loadTestConfig: {
        ///         engineInstances: number
        ///       },
        ///       testResult: string,
        ///       passFailCriteria: {
        ///         passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;
        ///       },
        ///       testArtifacts: {
        ///         inputArtifacts: {
        ///           configUrl: {
        ///             url: string,
        ///             fileId: string,
        ///             filename: string,
        ///             expireTime: string (ISO 8601 Format)
        ///           },
        ///           testScriptUrl: FileUrl,
        ///           inputArtifactsZipFileurl: FileUrl,
        ///           additionalUrls: [FileUrl]
        ///         },
        ///         outputArtifacts: {
        ///           resultUrl: FileUrl,
        ///           logsUrl: FileUrl
        ///         }
        ///       },
        ///       executedDateTime: string (ISO 8601 Format),
        ///       vusers: number,
        ///       testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;,
        ///       createdDateTime: string (ISO 8601 Format),
        ///       createdBy: string,
        ///       lastModifiedDateTime: string (ISO 8601 Format),
        ///       lastModifiedBy: string,
        ///       portalUrl: string,
        ///       secrets: Dictionary&lt;string, SecretMetadata&gt;,
        ///       environmentVariables: Dictionary&lt;string, string&gt;,
        ///       duration: number
        ///     }
        ///   ],
        ///   continuationToken: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetAppTestRunsSearchAsync(string orderBy = null, string nextLink = null, string search = null, string testId = null, DateTimeOffset? executionFrom = null, DateTimeOffset? executionTo = null, string status = null, int? maxPageSize = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("TestRunClient.GetAppTestRunsSearch");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAppTestRunsSearchRequest(orderBy, nextLink, search, testId, executionFrom, executionTo, status, maxPageSize, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all test runs with given filters. </summary>
        /// <param name="orderBy"> Sort on one of the field - status, displayName, executedDateTime in (field asc/desc) format. eg: displayName asc. </param>
        /// <param name="nextLink"> NextLink Token to get next page of response. </param>
        /// <param name="search"> Filter search based on searchable fields - description, executedUser. </param>
        /// <param name="testId"> Unique identifier for load test name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="executionFrom"> The end DateTime(Iso8601Literal format) of test-run execution time filter range. </param>
        /// <param name="executionTo"> The start DateTime(Iso8601Literal format) of test-run execution time filter range. </param>
        /// <param name="status">
        /// Comma separated list of test run status, value can be -  &quot;ACCEPTED&quot;, &quot;NOTSTARTED&quot;,&quot;PROVISIONING&quot;,&quot;PROVISIONED&quot;,&quot;CONFIGURING&quot;,
        /// &quot;CONFIGURED&quot;,&quot;EXECUTING&quot;,&quot;EXECUTED&quot;,&quot;DEPROVISIONING&quot;,&quot;DEPROVISIONED&quot;,&quot;DONE&quot;,&quot;CANCELLED&quot;,&quot;FAILED&quot;
        /// </param>
        /// <param name="maxPageSize"> No of results in response. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       testRunId: string,
        ///       displayName: string,
        ///       testId: string,
        ///       resourceId: string,
        ///       description: string,
        ///       status: string,
        ///       startDateTime: string (ISO 8601 Format),
        ///       endDateTime: string (ISO 8601 Format),
        ///       loadTestConfig: {
        ///         engineInstances: number
        ///       },
        ///       testResult: string,
        ///       passFailCriteria: {
        ///         passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;
        ///       },
        ///       testArtifacts: {
        ///         inputArtifacts: {
        ///           configUrl: {
        ///             url: string,
        ///             fileId: string,
        ///             filename: string,
        ///             expireTime: string (ISO 8601 Format)
        ///           },
        ///           testScriptUrl: FileUrl,
        ///           inputArtifactsZipFileurl: FileUrl,
        ///           additionalUrls: [FileUrl]
        ///         },
        ///         outputArtifacts: {
        ///           resultUrl: FileUrl,
        ///           logsUrl: FileUrl
        ///         }
        ///       },
        ///       executedDateTime: string (ISO 8601 Format),
        ///       vusers: number,
        ///       testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;,
        ///       createdDateTime: string (ISO 8601 Format),
        ///       createdBy: string,
        ///       lastModifiedDateTime: string (ISO 8601 Format),
        ///       lastModifiedBy: string,
        ///       portalUrl: string,
        ///       secrets: Dictionary&lt;string, SecretMetadata&gt;,
        ///       environmentVariables: Dictionary&lt;string, string&gt;,
        ///       duration: number
        ///     }
        ///   ],
        ///   continuationToken: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetAppTestRunsSearch(string orderBy = null, string nextLink = null, string search = null, string testId = null, DateTimeOffset? executionFrom = null, DateTimeOffset? executionTo = null, string status = null, int? maxPageSize = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("TestRunClient.GetAppTestRunsSearch");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAppTestRunsSearchRequest(orderBy, nextLink, search, testId, executionFrom, executionTo, status, maxPageSize, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Stop test run of given name. </summary>
        /// <param name="testRunId"> Unique identifier for load test run name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testRunId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   testRunId: string,
        ///   displayName: string,
        ///   testId: string,
        ///   resourceId: string,
        ///   description: string,
        ///   status: string,
        ///   startDateTime: string (ISO 8601 Format),
        ///   endDateTime: string (ISO 8601 Format),
        ///   loadTestConfig: {
        ///     engineInstances: number
        ///   },
        ///   testResult: string,
        ///   passFailCriteria: {
        ///     passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;
        ///   },
        ///   testArtifacts: {
        ///     inputArtifacts: {
        ///       configUrl: {
        ///         url: string,
        ///         fileId: string,
        ///         filename: string,
        ///         expireTime: string (ISO 8601 Format)
        ///       },
        ///       testScriptUrl: FileUrl,
        ///       inputArtifactsZipFileurl: FileUrl,
        ///       additionalUrls: [FileUrl]
        ///     },
        ///     outputArtifacts: {
        ///       resultUrl: FileUrl,
        ///       logsUrl: FileUrl
        ///     }
        ///   },
        ///   executedDateTime: string (ISO 8601 Format),
        ///   vusers: number,
        ///   testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;,
        ///   createdDateTime: string (ISO 8601 Format),
        ///   createdBy: string,
        ///   lastModifiedDateTime: string (ISO 8601 Format),
        ///   lastModifiedBy: string,
        ///   portalUrl: string,
        ///   secrets: Dictionary&lt;string, SecretMetadata&gt;,
        ///   environmentVariables: Dictionary&lt;string, string&gt;,
        ///   duration: number
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> StopTestRunAsync(string testRunId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));

            using var scope = ClientDiagnostics.CreateScope("TestRunClient.StopTestRun");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStopTestRunRequest(testRunId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Stop test run of given name. </summary>
        /// <param name="testRunId"> Unique identifier for load test run name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testRunId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   testRunId: string,
        ///   displayName: string,
        ///   testId: string,
        ///   resourceId: string,
        ///   description: string,
        ///   status: string,
        ///   startDateTime: string (ISO 8601 Format),
        ///   endDateTime: string (ISO 8601 Format),
        ///   loadTestConfig: {
        ///     engineInstances: number
        ///   },
        ///   testResult: string,
        ///   passFailCriteria: {
        ///     passFailMetrics: Dictionary&lt;string, PassFailMetric&gt;
        ///   },
        ///   testArtifacts: {
        ///     inputArtifacts: {
        ///       configUrl: {
        ///         url: string,
        ///         fileId: string,
        ///         filename: string,
        ///         expireTime: string (ISO 8601 Format)
        ///       },
        ///       testScriptUrl: FileUrl,
        ///       inputArtifactsZipFileurl: FileUrl,
        ///       additionalUrls: [FileUrl]
        ///     },
        ///     outputArtifacts: {
        ///       resultUrl: FileUrl,
        ///       logsUrl: FileUrl
        ///     }
        ///   },
        ///   executedDateTime: string (ISO 8601 Format),
        ///   vusers: number,
        ///   testRunStatistics: Dictionary&lt;string, TestRunStatisticsModel&gt;,
        ///   createdDateTime: string (ISO 8601 Format),
        ///   createdBy: string,
        ///   lastModifiedDateTime: string (ISO 8601 Format),
        ///   lastModifiedBy: string,
        ///   portalUrl: string,
        ///   secrets: Dictionary&lt;string, SecretMetadata&gt;,
        ///   environmentVariables: Dictionary&lt;string, string&gt;,
        ///   duration: number
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response StopTestRun(string testRunId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));

            using var scope = ClientDiagnostics.CreateScope("TestRunClient.StopTestRun");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStopTestRunRequest(testRunId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all client metrics for a given load test run. </summary>
        /// <param name="testRunId"> Unique identifier for load test run name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="filter"> Filter to be used in metrics queries, filters can be applied on following fields : request, error, percentile( possible values : 90, 99, 95) or time (can be between start and end time). Request and error filter values can be get from /clientMetricsFilter API. Example of filter : (request eq &apos;HTTP Request1&apos; or request eq &apos;total-4bec6d5b-c3c3-4f5f-be09-5c4abb28aedd&apos;) and (error eq &apos;Non HTTP response code: org.apache.http.conn.ConnectTimeoutException&apos; or error eq &apos;total-4bec6d5b-c3c3-4f5f-be09-5c4abb28aedd&apos;) and (percentile eq 90) and (time ge 1626346535054 and time le 1626346924744). </param>
        /// <param name="groupByInterval"> Group by time interval, in which interval metrics needs to be retrieved, values can be 10s,20s,30s,1m,2m,5m,1h. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testRunId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   testRunId: string,
        ///   timeSeries: {
        ///     activeUsers: Dictionary&lt;string, TimeSeries[]&gt;,
        ///     responseTime: Dictionary&lt;string, TimeSeries[]&gt;,
        ///     throughput: Dictionary&lt;string, TimeSeries[]&gt;,
        ///     errors: Dictionary&lt;string, TimeSeries[]&gt;
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetTestRunClientMetricsAsync(string testRunId, string filter = null, string groupByInterval = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));

            using var scope = ClientDiagnostics.CreateScope("TestRunClient.GetTestRunClientMetrics");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTestRunClientMetricsRequest(testRunId, filter, groupByInterval, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all client metrics for a given load test run. </summary>
        /// <param name="testRunId"> Unique identifier for load test run name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="filter"> Filter to be used in metrics queries, filters can be applied on following fields : request, error, percentile( possible values : 90, 99, 95) or time (can be between start and end time). Request and error filter values can be get from /clientMetricsFilter API. Example of filter : (request eq &apos;HTTP Request1&apos; or request eq &apos;total-4bec6d5b-c3c3-4f5f-be09-5c4abb28aedd&apos;) and (error eq &apos;Non HTTP response code: org.apache.http.conn.ConnectTimeoutException&apos; or error eq &apos;total-4bec6d5b-c3c3-4f5f-be09-5c4abb28aedd&apos;) and (percentile eq 90) and (time ge 1626346535054 and time le 1626346924744). </param>
        /// <param name="groupByInterval"> Group by time interval, in which interval metrics needs to be retrieved, values can be 10s,20s,30s,1m,2m,5m,1h. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testRunId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   testRunId: string,
        ///   timeSeries: {
        ///     activeUsers: Dictionary&lt;string, TimeSeries[]&gt;,
        ///     responseTime: Dictionary&lt;string, TimeSeries[]&gt;,
        ///     throughput: Dictionary&lt;string, TimeSeries[]&gt;,
        ///     errors: Dictionary&lt;string, TimeSeries[]&gt;
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetTestRunClientMetrics(string testRunId, string filter = null, string groupByInterval = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));

            using var scope = ClientDiagnostics.CreateScope("TestRunClient.GetTestRunClientMetrics");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTestRunClientMetricsRequest(testRunId, filter, groupByInterval, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all client metrics supported filters list for a given load test run. </summary>
        /// <param name="testRunId"> Unique identifier for load test run name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testRunId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   testRunId: string,
        ///   filters: {
        ///     requestSamplerValues: [string],
        ///     errorFiltersValues: [string]
        ///   },
        ///   timeRange: {
        ///     startTime: string (ISO 8601 Format),
        ///     endTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetTestRunClientMetricsFiltersAsync(string testRunId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));

            using var scope = ClientDiagnostics.CreateScope("TestRunClient.GetTestRunClientMetricsFilters");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTestRunClientMetricsFiltersRequest(testRunId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all client metrics supported filters list for a given load test run. </summary>
        /// <param name="testRunId"> Unique identifier for load test run name, must be a valid URL character ^[a-z0-9_-]*$. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="testRunId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="testRunId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   testRunId: string,
        ///   filters: {
        ///     requestSamplerValues: [string],
        ///     errorFiltersValues: [string]
        ///   },
        ///   timeRange: {
        ///     startTime: string (ISO 8601 Format),
        ///     endTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [ErrorResponseBody]
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetTestRunClientMetricsFilters(string testRunId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(testRunId, nameof(testRunId));

            using var scope = ClientDiagnostics.CreateScope("TestRunClient.GetTestRunClientMetricsFilters");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTestRunClientMetricsFiltersRequest(testRunId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateDeleteTestRunRequest(string testRunId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/testruns/", false);
            uri.AppendPath(testRunId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateAndUpdateTestRequest(string testRunId, RequestContent content, string oldTestRunId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/testruns/", false);
            uri.AppendPath(testRunId, true);
            if (oldTestRunId != null)
            {
                uri.AppendQuery("oldTestRunId", oldTestRunId, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/merge-patch+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetTestRunRequest(string testRunId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/testruns/", false);
            uri.AppendPath(testRunId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetTestRunFileRequest(string testRunId, string fileId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/testruns/", false);
            uri.AppendPath(testRunId, true);
            uri.AppendPath("/files/", false);
            uri.AppendPath(fileId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetAppTestRunsSearchRequest(string orderBy, string nextLink, string search, string testId, DateTimeOffset? executionFrom, DateTimeOffset? executionTo, string status, int? maxPageSize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/testruns/sortAndFilter", false);
            if (orderBy != null)
            {
                uri.AppendQuery("orderBy", orderBy, true);
            }
            if (nextLink != null)
            {
                uri.AppendQuery("nextLink", nextLink, true);
            }
            if (search != null)
            {
                uri.AppendQuery("search", search, true);
            }
            if (testId != null)
            {
                uri.AppendQuery("testId", testId, true);
            }
            if (executionFrom != null)
            {
                uri.AppendQuery("executionFrom", executionFrom.Value, "O", true);
            }
            if (executionTo != null)
            {
                uri.AppendQuery("executionTo", executionTo.Value, "O", true);
            }
            if (status != null)
            {
                uri.AppendQuery("status", status, true);
            }
            if (maxPageSize != null)
            {
                uri.AppendQuery("maxPageSize", maxPageSize.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateStopTestRunRequest(string testRunId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/testruns/", false);
            uri.AppendPath(testRunId, true);
            uri.AppendPath(":stop", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetTestRunClientMetricsRequest(string testRunId, string filter, string groupByInterval, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/testruns/", false);
            uri.AppendPath(testRunId, true);
            uri.AppendPath("/clientMetrics", false);
            if (filter != null)
            {
                uri.AppendQuery("filter", filter, true);
            }
            if (groupByInterval != null)
            {
                uri.AppendQuery("groupByInterval", groupByInterval, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetTestRunClientMetricsFiltersRequest(string testRunId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/testruns/", false);
            uri.AppendPath(testRunId, true);
            uri.AppendPath("/clientMetricsFilters", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
