<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetIntAsync(global::Azure.RequestContext)">
<example>
This sample shows how to call GetIntAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

Response response = await client.GetIntAsync(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("field1").ToString());
Console.WriteLine(result.GetProperty("field2").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>IntWrapper</c>:
<code>{
  field1: number, # Optional.
  field2: number, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetInt(global::Azure.RequestContext)">
<example>
This sample shows how to call GetInt and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

Response response = client.GetInt(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("field1").ToString());
Console.WriteLine(result.GetProperty("field2").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>IntWrapper</c>:
<code>{
  field1: number, # Optional.
  field2: number, # Optional.
}
</code>

</remarks>
    </member>
    <member name="PutIntAsync(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call PutIntAsync.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {};

Response response = await client.PutIntAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutIntAsync with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {
    field1 = 1234,
    field2 = 1234,
};

Response response = await client.PutIntAsync(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>IntWrapper</c>:
<code>{
  field1: number, # Optional.
  field2: number, # Optional.
}
</code>

</remarks>
    </member>
    <member name="PutInt(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call PutInt.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {};

Response response = client.PutInt(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutInt with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {
    field1 = 1234,
    field2 = 1234,
};

Response response = client.PutInt(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>IntWrapper</c>:
<code>{
  field1: number, # Optional.
  field2: number, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetLongAsync(global::Azure.RequestContext)">
<example>
This sample shows how to call GetLongAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

Response response = await client.GetLongAsync(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("field1").ToString());
Console.WriteLine(result.GetProperty("field2").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>LongWrapper</c>:
<code>{
  field1: number, # Optional.
  field2: number, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetLong(global::Azure.RequestContext)">
<example>
This sample shows how to call GetLong and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

Response response = client.GetLong(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("field1").ToString());
Console.WriteLine(result.GetProperty("field2").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>LongWrapper</c>:
<code>{
  field1: number, # Optional.
  field2: number, # Optional.
}
</code>

</remarks>
    </member>
    <member name="PutLongAsync(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call PutLongAsync.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {};

Response response = await client.PutLongAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutLongAsync with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {
    field1 = 1234L,
    field2 = 1234L,
};

Response response = await client.PutLongAsync(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>LongWrapper</c>:
<code>{
  field1: number, # Optional.
  field2: number, # Optional.
}
</code>

</remarks>
    </member>
    <member name="PutLong(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call PutLong.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {};

Response response = client.PutLong(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutLong with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {
    field1 = 1234L,
    field2 = 1234L,
};

Response response = client.PutLong(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>LongWrapper</c>:
<code>{
  field1: number, # Optional.
  field2: number, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetFloatAsync(global::Azure.RequestContext)">
<example>
This sample shows how to call GetFloatAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

Response response = await client.GetFloatAsync(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("field1").ToString());
Console.WriteLine(result.GetProperty("field2").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>FloatWrapper</c>:
<code>{
  field1: number, # Optional.
  field2: number, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetFloat(global::Azure.RequestContext)">
<example>
This sample shows how to call GetFloat and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

Response response = client.GetFloat(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("field1").ToString());
Console.WriteLine(result.GetProperty("field2").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>FloatWrapper</c>:
<code>{
  field1: number, # Optional.
  field2: number, # Optional.
}
</code>

</remarks>
    </member>
    <member name="PutFloatAsync(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call PutFloatAsync.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {};

Response response = await client.PutFloatAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutFloatAsync with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {
    field1 = 123.45f,
    field2 = 123.45f,
};

Response response = await client.PutFloatAsync(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>FloatWrapper</c>:
<code>{
  field1: number, # Optional.
  field2: number, # Optional.
}
</code>

</remarks>
    </member>
    <member name="PutFloat(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call PutFloat.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {};

Response response = client.PutFloat(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutFloat with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {
    field1 = 123.45f,
    field2 = 123.45f,
};

Response response = client.PutFloat(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>FloatWrapper</c>:
<code>{
  field1: number, # Optional.
  field2: number, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetDoubleAsync(global::Azure.RequestContext)">
<example>
This sample shows how to call GetDoubleAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

Response response = await client.GetDoubleAsync(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("field1").ToString());
Console.WriteLine(result.GetProperty("field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DoubleWrapper</c>:
<code>{
  field1: number, # Optional.
  field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose: number, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetDouble(global::Azure.RequestContext)">
<example>
This sample shows how to call GetDouble and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

Response response = client.GetDouble(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("field1").ToString());
Console.WriteLine(result.GetProperty("field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DoubleWrapper</c>:
<code>{
  field1: number, # Optional.
  field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose: number, # Optional.
}
</code>

</remarks>
    </member>
    <member name="PutDoubleAsync(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call PutDoubleAsync.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {};

Response response = await client.PutDoubleAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutDoubleAsync with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {
    field1 = 123.45d,
    field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose = 123.45d,
};

Response response = await client.PutDoubleAsync(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>DoubleWrapper</c>:
<code>{
  field1: number, # Optional.
  field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose: number, # Optional.
}
</code>

</remarks>
    </member>
    <member name="PutDouble(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call PutDouble.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {};

Response response = client.PutDouble(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutDouble with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {
    field1 = 123.45d,
    field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose = 123.45d,
};

Response response = client.PutDouble(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>DoubleWrapper</c>:
<code>{
  field1: number, # Optional.
  field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose: number, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetBoolAsync(global::Azure.RequestContext)">
<example>
This sample shows how to call GetBoolAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

Response response = await client.GetBoolAsync(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("field_true").ToString());
Console.WriteLine(result.GetProperty("field_false").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>BooleanWrapper</c>:
<code>{
  field_true: boolean, # Optional.
  field_false: boolean, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetBool(global::Azure.RequestContext)">
<example>
This sample shows how to call GetBool and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

Response response = client.GetBool(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("field_true").ToString());
Console.WriteLine(result.GetProperty("field_false").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>BooleanWrapper</c>:
<code>{
  field_true: boolean, # Optional.
  field_false: boolean, # Optional.
}
</code>

</remarks>
    </member>
    <member name="PutBoolAsync(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call PutBoolAsync.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {};

Response response = await client.PutBoolAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutBoolAsync with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {
    field_true = true,
    field_false = true,
};

Response response = await client.PutBoolAsync(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>BooleanWrapper</c>:
<code>{
  field_true: boolean, # Optional.
  field_false: boolean, # Optional.
}
</code>

</remarks>
    </member>
    <member name="PutBool(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call PutBool.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {};

Response response = client.PutBool(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutBool with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {
    field_true = true,
    field_false = true,
};

Response response = client.PutBool(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>BooleanWrapper</c>:
<code>{
  field_true: boolean, # Optional.
  field_false: boolean, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetStringAsync(global::Azure.RequestContext)">
<example>
This sample shows how to call GetStringAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

Response response = await client.GetStringAsync(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("field").ToString());
Console.WriteLine(result.GetProperty("empty").ToString());
Console.WriteLine(result.GetProperty("null").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>StringWrapper</c>:
<code>{
  field: string, # Optional.
  empty: string, # Optional.
  null: string, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetString(global::Azure.RequestContext)">
<example>
This sample shows how to call GetString and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

Response response = client.GetString(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("field").ToString());
Console.WriteLine(result.GetProperty("empty").ToString());
Console.WriteLine(result.GetProperty("null").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>StringWrapper</c>:
<code>{
  field: string, # Optional.
  empty: string, # Optional.
  null: string, # Optional.
}
</code>

</remarks>
    </member>
    <member name="PutStringAsync(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call PutStringAsync.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {};

Response response = await client.PutStringAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutStringAsync with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {
    field = "<field>",
    empty = "<empty>",
    @null = "<null>",
};

Response response = await client.PutStringAsync(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>StringWrapper</c>:
<code>{
  field: string, # Optional.
  empty: string, # Optional.
  null: string, # Optional.
}
</code>

</remarks>
    </member>
    <member name="PutString(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call PutString.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {};

Response response = client.PutString(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutString with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {
    field = "<field>",
    empty = "<empty>",
    @null = "<null>",
};

Response response = client.PutString(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>StringWrapper</c>:
<code>{
  field: string, # Optional.
  empty: string, # Optional.
  null: string, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetDateAsync(global::Azure.RequestContext)">
<example>
This sample shows how to call GetDateAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

Response response = await client.GetDateAsync(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("field").ToString());
Console.WriteLine(result.GetProperty("leap").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DateWrapper</c>:
<code>{
  field: string (date), # Optional.
  leap: string (date), # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetDate(global::Azure.RequestContext)">
<example>
This sample shows how to call GetDate and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

Response response = client.GetDate(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("field").ToString());
Console.WriteLine(result.GetProperty("leap").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DateWrapper</c>:
<code>{
  field: string (date), # Optional.
  leap: string (date), # Optional.
}
</code>

</remarks>
    </member>
    <member name="PutDateAsync(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call PutDateAsync.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {};

Response response = await client.PutDateAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutDateAsync with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {
    field = "2022-05-10",
    leap = "2022-05-10",
};

Response response = await client.PutDateAsync(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>DateWrapper</c>:
<code>{
  field: string (date), # Optional.
  leap: string (date), # Optional.
}
</code>

</remarks>
    </member>
    <member name="PutDate(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call PutDate.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {};

Response response = client.PutDate(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutDate with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {
    field = "2022-05-10",
    leap = "2022-05-10",
};

Response response = client.PutDate(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>DateWrapper</c>:
<code>{
  field: string (date), # Optional.
  leap: string (date), # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetDateTimeAsync(global::Azure.RequestContext)">
<example>
This sample shows how to call GetDateTimeAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

Response response = await client.GetDateTimeAsync(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("field").ToString());
Console.WriteLine(result.GetProperty("now").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DatetimeWrapper</c>:
<code>{
  field: string (ISO 8601 Format), # Optional.
  now: string (ISO 8601 Format), # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetDateTime(global::Azure.RequestContext)">
<example>
This sample shows how to call GetDateTime and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

Response response = client.GetDateTime(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("field").ToString());
Console.WriteLine(result.GetProperty("now").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DatetimeWrapper</c>:
<code>{
  field: string (ISO 8601 Format), # Optional.
  now: string (ISO 8601 Format), # Optional.
}
</code>

</remarks>
    </member>
    <member name="PutDateTimeAsync(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call PutDateTimeAsync.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {};

Response response = await client.PutDateTimeAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutDateTimeAsync with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {
    field = "2022-05-10T18:57:31.2311892Z",
    now = "2022-05-10T18:57:31.2311892Z",
};

Response response = await client.PutDateTimeAsync(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>DatetimeWrapper</c>:
<code>{
  field: string (ISO 8601 Format), # Optional.
  now: string (ISO 8601 Format), # Optional.
}
</code>

</remarks>
    </member>
    <member name="PutDateTime(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call PutDateTime.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {};

Response response = client.PutDateTime(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutDateTime with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {
    field = "2022-05-10T18:57:31.2311892Z",
    now = "2022-05-10T18:57:31.2311892Z",
};

Response response = client.PutDateTime(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>DatetimeWrapper</c>:
<code>{
  field: string (ISO 8601 Format), # Optional.
  now: string (ISO 8601 Format), # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetDateTimeRfc1123Async(global::Azure.RequestContext)">
<example>
This sample shows how to call GetDateTimeRfc1123Async and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

Response response = await client.GetDateTimeRfc1123Async(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("field").ToString());
Console.WriteLine(result.GetProperty("now").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Datetimerfc1123Wrapper</c>:
<code>{
  field: string (RFC1123 Format), # Optional.
  now: string (RFC1123 Format), # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetDateTimeRfc1123(global::Azure.RequestContext)">
<example>
This sample shows how to call GetDateTimeRfc1123 and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

Response response = client.GetDateTimeRfc1123(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("field").ToString());
Console.WriteLine(result.GetProperty("now").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Datetimerfc1123Wrapper</c>:
<code>{
  field: string (RFC1123 Format), # Optional.
  now: string (RFC1123 Format), # Optional.
}
</code>

</remarks>
    </member>
    <member name="PutDateTimeRfc1123Async(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call PutDateTimeRfc1123Async.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {};

Response response = await client.PutDateTimeRfc1123Async(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutDateTimeRfc1123Async with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {
    field = "Tue, 10 May 2022 18:57:31 GMT",
    now = "Tue, 10 May 2022 18:57:31 GMT",
};

Response response = await client.PutDateTimeRfc1123Async(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Datetimerfc1123Wrapper</c>:
<code>{
  field: string (RFC1123 Format), # Optional.
  now: string (RFC1123 Format), # Optional.
}
</code>

</remarks>
    </member>
    <member name="PutDateTimeRfc1123(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call PutDateTimeRfc1123.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {};

Response response = client.PutDateTimeRfc1123(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutDateTimeRfc1123 with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {
    field = "Tue, 10 May 2022 18:57:31 GMT",
    now = "Tue, 10 May 2022 18:57:31 GMT",
};

Response response = client.PutDateTimeRfc1123(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Datetimerfc1123Wrapper</c>:
<code>{
  field: string (RFC1123 Format), # Optional.
  now: string (RFC1123 Format), # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetDurationAsync(global::Azure.RequestContext)">
<example>
This sample shows how to call GetDurationAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

Response response = await client.GetDurationAsync(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("field").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DurationWrapper</c>:
<code>{
  field: string (duration ISO 8601 Format), # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetDuration(global::Azure.RequestContext)">
<example>
This sample shows how to call GetDuration and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

Response response = client.GetDuration(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("field").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DurationWrapper</c>:
<code>{
  field: string (duration ISO 8601 Format), # Optional.
}
</code>

</remarks>
    </member>
    <member name="PutDurationAsync(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call PutDurationAsync.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {};

Response response = await client.PutDurationAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutDurationAsync with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {
    field = "PT1H23M45S",
};

Response response = await client.PutDurationAsync(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>DurationWrapper</c>:
<code>{
  field: string (duration ISO 8601 Format), # Optional.
}
</code>

</remarks>
    </member>
    <member name="PutDuration(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call PutDuration.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {};

Response response = client.PutDuration(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutDuration with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {
    field = "PT1H23M45S",
};

Response response = client.PutDuration(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>DurationWrapper</c>:
<code>{
  field: string (duration ISO 8601 Format), # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetByteAsync(global::Azure.RequestContext)">
<example>
This sample shows how to call GetByteAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

Response response = await client.GetByteAsync(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("field").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>ByteWrapper</c>:
<code>{
  field: Bytes, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetByte(global::Azure.RequestContext)">
<example>
This sample shows how to call GetByte and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

Response response = client.GetByte(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("field").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>ByteWrapper</c>:
<code>{
  field: Bytes, # Optional.
}
</code>

</remarks>
    </member>
    <member name="PutByteAsync(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call PutByteAsync.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {};

Response response = await client.PutByteAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutByteAsync with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {
    field = new {},
};

Response response = await client.PutByteAsync(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>ByteWrapper</c>:
<code>{
  field: Bytes, # Optional.
}
</code>

</remarks>
    </member>
    <member name="PutByte(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call PutByte.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {};

Response response = client.PutByte(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutByte with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PrimitiveClient(credential);

var data = new {
    field = new {},
};

Response response = client.PutByte(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>ByteWrapper</c>:
<code>{
  field: Bytes, # Optional.
}
</code>

</remarks>
    </member>
  </members>
</doc>