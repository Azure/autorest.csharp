<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetValidAsync(global::Azure.RequestContext)">
<example>
This sample shows how to call GetValidAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new DictionaryClient(credential);

Response response = await client.GetValidAsync(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("defaultProgram").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DictionaryWrapper</c>:
<code>{
  defaultProgram: Dictionary&lt;string, string&gt;, # Optional. Dictionary of &lt;string&gt;
}
</code>

</remarks>
    </member>
    <member name="GetValid(global::Azure.RequestContext)">
<example>
This sample shows how to call GetValid and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new DictionaryClient(credential);

Response response = client.GetValid(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("defaultProgram").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DictionaryWrapper</c>:
<code>{
  defaultProgram: Dictionary&lt;string, string&gt;, # Optional. Dictionary of &lt;string&gt;
}
</code>

</remarks>
    </member>
    <member name="PutValidAsync(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call PutValidAsync.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new DictionaryClient(credential);

var data = new {};

Response response = await client.PutValidAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutValidAsync with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new DictionaryClient(credential);

var data = new {
    defaultProgram = new {
        key = "<String>",
    },
};

Response response = await client.PutValidAsync(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>DictionaryWrapper</c>:
<code>{
  defaultProgram: Dictionary&lt;string, string&gt;, # Optional. Dictionary of &lt;string&gt;
}
</code>

</remarks>
    </member>
    <member name="PutValid(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call PutValid.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new DictionaryClient(credential);

var data = new {};

Response response = client.PutValid(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutValid with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new DictionaryClient(credential);

var data = new {
    defaultProgram = new {
        key = "<String>",
    },
};

Response response = client.PutValid(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>DictionaryWrapper</c>:
<code>{
  defaultProgram: Dictionary&lt;string, string&gt;, # Optional. Dictionary of &lt;string&gt;
}
</code>

</remarks>
    </member>
    <member name="GetEmptyAsync(global::Azure.RequestContext)">
<example>
This sample shows how to call GetEmptyAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new DictionaryClient(credential);

Response response = await client.GetEmptyAsync(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("defaultProgram").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DictionaryWrapper</c>:
<code>{
  defaultProgram: Dictionary&lt;string, string&gt;, # Optional. Dictionary of &lt;string&gt;
}
</code>

</remarks>
    </member>
    <member name="GetEmpty(global::Azure.RequestContext)">
<example>
This sample shows how to call GetEmpty and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new DictionaryClient(credential);

Response response = client.GetEmpty(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("defaultProgram").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DictionaryWrapper</c>:
<code>{
  defaultProgram: Dictionary&lt;string, string&gt;, # Optional. Dictionary of &lt;string&gt;
}
</code>

</remarks>
    </member>
    <member name="PutEmptyAsync(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call PutEmptyAsync.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new DictionaryClient(credential);

var data = new {};

Response response = await client.PutEmptyAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutEmptyAsync with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new DictionaryClient(credential);

var data = new {
    defaultProgram = new {
        key = "<String>",
    },
};

Response response = await client.PutEmptyAsync(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>DictionaryWrapper</c>:
<code>{
  defaultProgram: Dictionary&lt;string, string&gt;, # Optional. Dictionary of &lt;string&gt;
}
</code>

</remarks>
    </member>
    <member name="PutEmpty(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call PutEmpty.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new DictionaryClient(credential);

var data = new {};

Response response = client.PutEmpty(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutEmpty with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new DictionaryClient(credential);

var data = new {
    defaultProgram = new {
        key = "<String>",
    },
};

Response response = client.PutEmpty(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>DictionaryWrapper</c>:
<code>{
  defaultProgram: Dictionary&lt;string, string&gt;, # Optional. Dictionary of &lt;string&gt;
}
</code>

</remarks>
    </member>
    <member name="GetNullAsync(global::Azure.RequestContext)">
<example>
This sample shows how to call GetNullAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new DictionaryClient(credential);

Response response = await client.GetNullAsync(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("defaultProgram").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DictionaryWrapper</c>:
<code>{
  defaultProgram: Dictionary&lt;string, string&gt;, # Optional. Dictionary of &lt;string&gt;
}
</code>

</remarks>
    </member>
    <member name="GetNull(global::Azure.RequestContext)">
<example>
This sample shows how to call GetNull and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new DictionaryClient(credential);

Response response = client.GetNull(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("defaultProgram").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DictionaryWrapper</c>:
<code>{
  defaultProgram: Dictionary&lt;string, string&gt;, # Optional. Dictionary of &lt;string&gt;
}
</code>

</remarks>
    </member>
    <member name="GetNotProvidedAsync(global::Azure.RequestContext)">
<example>
This sample shows how to call GetNotProvidedAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new DictionaryClient(credential);

Response response = await client.GetNotProvidedAsync(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("defaultProgram").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DictionaryWrapper</c>:
<code>{
  defaultProgram: Dictionary&lt;string, string&gt;, # Optional. Dictionary of &lt;string&gt;
}
</code>

</remarks>
    </member>
    <member name="GetNotProvided(global::Azure.RequestContext)">
<example>
This sample shows how to call GetNotProvided and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new DictionaryClient(credential);

Response response = client.GetNotProvided(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("defaultProgram").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DictionaryWrapper</c>:
<code>{
  defaultProgram: Dictionary&lt;string, string&gt;, # Optional. Dictionary of &lt;string&gt;
}
</code>

</remarks>
    </member>
  </members>
</doc>