// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace body_complex_LowLevel
{
    /// <summary> The Primitive service client. </summary>
    public partial class PrimitiveClient
    {
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }
        private const string AuthorizationHeader = "Fake-Subscription-Key";
        private Uri endpoint;
        private readonly string apiVersion;
        private readonly ClientDiagnostics _clientDiagnostics;

        /// <summary> Initializes a new instance of PrimitiveClient for mocking. </summary>
        protected PrimitiveClient()
        {
        }

        /// <summary> Initializes a new instance of PrimitiveClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public PrimitiveClient(AzureKeyCredential credential, Uri endpoint = null, AutoRestComplexTestServiceClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            endpoint ??= new Uri("http://localhost:3000");

            options ??= new AutoRestComplexTestServiceClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            var authPolicy = new AzureKeyCredentialPolicy(credential, AuthorizationHeader);
            Pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { authPolicy, new LowLevelCallbackPolicy() });
            this.endpoint = endpoint;
            apiVersion = options.Version;
        }

        /// <summary> Get complex types with integer properties. </summary>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetIntAsync(RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreateGetIntRequest(requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            await Pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Get complex types with integer properties. </summary>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetInt(RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreateGetIntRequest(requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            Pipeline.Send(message, cancellationToken);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Create Request for <see cref="GetInt"/> and <see cref="GetIntAsync"/> operations. </summary>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetIntRequest(RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/complex/primitive/integer", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Put complex types with integer properties. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PutIntAsync(RequestContent requestBody, RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreatePutIntRequest(requestBody, requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            await Pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Put complex types with integer properties. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PutInt(RequestContent requestBody, RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreatePutIntRequest(requestBody, requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            Pipeline.Send(message, cancellationToken);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Create Request for <see cref="PutInt"/> and <see cref="PutIntAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreatePutIntRequest(RequestContent requestBody, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/complex/primitive/integer", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }

        /// <summary> Get complex types with long properties. </summary>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetLongAsync(RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreateGetLongRequest(requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            await Pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Get complex types with long properties. </summary>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetLong(RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreateGetLongRequest(requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            Pipeline.Send(message, cancellationToken);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Create Request for <see cref="GetLong"/> and <see cref="GetLongAsync"/> operations. </summary>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetLongRequest(RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/complex/primitive/long", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Put complex types with long properties. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PutLongAsync(RequestContent requestBody, RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreatePutLongRequest(requestBody, requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            await Pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Put complex types with long properties. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PutLong(RequestContent requestBody, RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreatePutLongRequest(requestBody, requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            Pipeline.Send(message, cancellationToken);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Create Request for <see cref="PutLong"/> and <see cref="PutLongAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreatePutLongRequest(RequestContent requestBody, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/complex/primitive/long", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }

        /// <summary> Get complex types with float properties. </summary>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetFloatAsync(RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreateGetFloatRequest(requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            await Pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Get complex types with float properties. </summary>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetFloat(RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreateGetFloatRequest(requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            Pipeline.Send(message, cancellationToken);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Create Request for <see cref="GetFloat"/> and <see cref="GetFloatAsync"/> operations. </summary>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetFloatRequest(RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/complex/primitive/float", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Put complex types with float properties. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PutFloatAsync(RequestContent requestBody, RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreatePutFloatRequest(requestBody, requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            await Pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Put complex types with float properties. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PutFloat(RequestContent requestBody, RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreatePutFloatRequest(requestBody, requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            Pipeline.Send(message, cancellationToken);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Create Request for <see cref="PutFloat"/> and <see cref="PutFloatAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreatePutFloatRequest(RequestContent requestBody, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/complex/primitive/float", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }

        /// <summary> Get complex types with double properties. </summary>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetDoubleAsync(RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreateGetDoubleRequest(requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            await Pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Get complex types with double properties. </summary>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetDouble(RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreateGetDoubleRequest(requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            Pipeline.Send(message, cancellationToken);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Create Request for <see cref="GetDouble"/> and <see cref="GetDoubleAsync"/> operations. </summary>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetDoubleRequest(RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/complex/primitive/double", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Put complex types with double properties. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PutDoubleAsync(RequestContent requestBody, RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreatePutDoubleRequest(requestBody, requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            await Pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Put complex types with double properties. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PutDouble(RequestContent requestBody, RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreatePutDoubleRequest(requestBody, requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            Pipeline.Send(message, cancellationToken);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Create Request for <see cref="PutDouble"/> and <see cref="PutDoubleAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreatePutDoubleRequest(RequestContent requestBody, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/complex/primitive/double", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }

        /// <summary> Get complex types with bool properties. </summary>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetBoolAsync(RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreateGetBoolRequest(requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            await Pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Get complex types with bool properties. </summary>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetBool(RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreateGetBoolRequest(requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            Pipeline.Send(message, cancellationToken);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Create Request for <see cref="GetBool"/> and <see cref="GetBoolAsync"/> operations. </summary>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetBoolRequest(RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/complex/primitive/bool", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Put complex types with bool properties. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PutBoolAsync(RequestContent requestBody, RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreatePutBoolRequest(requestBody, requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            await Pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Put complex types with bool properties. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PutBool(RequestContent requestBody, RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreatePutBoolRequest(requestBody, requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            Pipeline.Send(message, cancellationToken);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Create Request for <see cref="PutBool"/> and <see cref="PutBoolAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreatePutBoolRequest(RequestContent requestBody, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/complex/primitive/bool", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }

        /// <summary> Get complex types with string properties. </summary>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetStringAsync(RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreateGetStringRequest(requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            await Pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Get complex types with string properties. </summary>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetString(RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreateGetStringRequest(requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            Pipeline.Send(message, cancellationToken);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Create Request for <see cref="GetString"/> and <see cref="GetStringAsync"/> operations. </summary>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetStringRequest(RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/complex/primitive/string", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Put complex types with string properties. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PutStringAsync(RequestContent requestBody, RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreatePutStringRequest(requestBody, requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            await Pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Put complex types with string properties. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PutString(RequestContent requestBody, RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreatePutStringRequest(requestBody, requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            Pipeline.Send(message, cancellationToken);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Create Request for <see cref="PutString"/> and <see cref="PutStringAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreatePutStringRequest(RequestContent requestBody, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/complex/primitive/string", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }

        /// <summary> Get complex types with date properties. </summary>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetDateAsync(RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreateGetDateRequest(requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            await Pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Get complex types with date properties. </summary>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetDate(RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreateGetDateRequest(requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            Pipeline.Send(message, cancellationToken);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Create Request for <see cref="GetDate"/> and <see cref="GetDateAsync"/> operations. </summary>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetDateRequest(RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/complex/primitive/date", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Put complex types with date properties. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PutDateAsync(RequestContent requestBody, RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreatePutDateRequest(requestBody, requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            await Pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Put complex types with date properties. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PutDate(RequestContent requestBody, RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreatePutDateRequest(requestBody, requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            Pipeline.Send(message, cancellationToken);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Create Request for <see cref="PutDate"/> and <see cref="PutDateAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreatePutDateRequest(RequestContent requestBody, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/complex/primitive/date", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }

        /// <summary> Get complex types with datetime properties. </summary>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetDateTimeAsync(RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreateGetDateTimeRequest(requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            await Pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Get complex types with datetime properties. </summary>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetDateTime(RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreateGetDateTimeRequest(requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            Pipeline.Send(message, cancellationToken);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Create Request for <see cref="GetDateTime"/> and <see cref="GetDateTimeAsync"/> operations. </summary>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetDateTimeRequest(RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/complex/primitive/datetime", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Put complex types with datetime properties. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PutDateTimeAsync(RequestContent requestBody, RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreatePutDateTimeRequest(requestBody, requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            await Pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Put complex types with datetime properties. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PutDateTime(RequestContent requestBody, RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreatePutDateTimeRequest(requestBody, requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            Pipeline.Send(message, cancellationToken);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Create Request for <see cref="PutDateTime"/> and <see cref="PutDateTimeAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreatePutDateTimeRequest(RequestContent requestBody, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/complex/primitive/datetime", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }

        /// <summary> Get complex types with datetimeRfc1123 properties. </summary>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetDateTimeRfc1123Async(RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreateGetDateTimeRfc1123Request(requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            await Pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Get complex types with datetimeRfc1123 properties. </summary>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetDateTimeRfc1123(RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreateGetDateTimeRfc1123Request(requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            Pipeline.Send(message, cancellationToken);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Create Request for <see cref="GetDateTimeRfc1123"/> and <see cref="GetDateTimeRfc1123Async"/> operations. </summary>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetDateTimeRfc1123Request(RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/complex/primitive/datetimerfc1123", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Put complex types with datetimeRfc1123 properties. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PutDateTimeRfc1123Async(RequestContent requestBody, RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreatePutDateTimeRfc1123Request(requestBody, requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            await Pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Put complex types with datetimeRfc1123 properties. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PutDateTimeRfc1123(RequestContent requestBody, RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreatePutDateTimeRfc1123Request(requestBody, requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            Pipeline.Send(message, cancellationToken);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Create Request for <see cref="PutDateTimeRfc1123"/> and <see cref="PutDateTimeRfc1123Async"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreatePutDateTimeRfc1123Request(RequestContent requestBody, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/complex/primitive/datetimerfc1123", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }

        /// <summary> Get complex types with duration properties. </summary>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetDurationAsync(RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreateGetDurationRequest(requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            await Pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Get complex types with duration properties. </summary>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetDuration(RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreateGetDurationRequest(requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            Pipeline.Send(message, cancellationToken);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Create Request for <see cref="GetDuration"/> and <see cref="GetDurationAsync"/> operations. </summary>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetDurationRequest(RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/complex/primitive/duration", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Put complex types with duration properties. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PutDurationAsync(RequestContent requestBody, RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreatePutDurationRequest(requestBody, requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            await Pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Put complex types with duration properties. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PutDuration(RequestContent requestBody, RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreatePutDurationRequest(requestBody, requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            Pipeline.Send(message, cancellationToken);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Create Request for <see cref="PutDuration"/> and <see cref="PutDurationAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreatePutDurationRequest(RequestContent requestBody, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/complex/primitive/duration", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }

        /// <summary> Get complex types with byte properties. </summary>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetByteAsync(RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreateGetByteRequest(requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            await Pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Get complex types with byte properties. </summary>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetByte(RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreateGetByteRequest(requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            Pipeline.Send(message, cancellationToken);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Create Request for <see cref="GetByte"/> and <see cref="GetByteAsync"/> operations. </summary>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetByteRequest(RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/complex/primitive/byte", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Put complex types with byte properties. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PutByteAsync(RequestContent requestBody, RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreatePutByteRequest(requestBody, requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            await Pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Put complex types with byte properties. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PutByte(RequestContent requestBody, RequestOptions requestOptions = null, CancellationToken cancellationToken = default)
        {
            HttpMessage message = CreatePutByteRequest(requestBody, requestOptions);
            if (requestOptions?.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            Pipeline.Send(message, cancellationToken);
            ResponseStatusOption statusOption = requestOptions?.StatusOption ?? ResponseStatusOption.Default;
            if (statusOption == ResponseStatusOption.Default)
            {
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            else
            {
                return message.Response;
            }
        }

        /// <summary> Create Request for <see cref="PutByte"/> and <see cref="PutByteAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreatePutByteRequest(RequestContent requestBody, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/complex/primitive/byte", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }
    }
}
