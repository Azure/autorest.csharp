<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetValidAsync(RequestContext)">
<example>
This sample shows how to call GetValidAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphicrecursiveClient(credential);

Response response = await client.GetValidAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("fishtype").ToString());
Console.WriteLine(result.GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("fishtype").ToString());
Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("length").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
<details><summary>Salmon</summary>Schema for <c>Salmon</c>:
<code>{
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>~+ 5 more JSON objects</summary><details><summary>Shark</summary>Schema for <c>Shark</c>:
<code>{
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>SmartSalmon</summary>Schema for <c>SmartSalmon</c>:
<code>{
  college_degree: string, # Optional.
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Sawshark</summary>Schema for <c>Sawshark</c>:
<code>{
  picture: Bytes, # Optional.
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Goblinshark</summary>Schema for <c>Goblinshark</c>:
<code>{
  jawsize: number, # Optional.
  color: &quot;pink&quot; | &quot;gray&quot; | &quot;brown&quot; | &quot;RED&quot; | &quot;red&quot;, # Optional. Colors possible
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Cookiecuttershark</summary>Schema for <c>Cookiecuttershark</c>:
<code>{
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
</details>

</remarks>
    </member>
    <member name="GetValid(RequestContext)">
<example>
This sample shows how to call GetValid and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphicrecursiveClient(credential);

Response response = client.GetValid();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("fishtype").ToString());
Console.WriteLine(result.GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("fishtype").ToString());
Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("length").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
<details><summary>Salmon</summary>Schema for <c>Salmon</c>:
<code>{
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>~+ 5 more JSON objects</summary><details><summary>Shark</summary>Schema for <c>Shark</c>:
<code>{
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>SmartSalmon</summary>Schema for <c>SmartSalmon</c>:
<code>{
  college_degree: string, # Optional.
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Sawshark</summary>Schema for <c>Sawshark</c>:
<code>{
  picture: Bytes, # Optional.
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Goblinshark</summary>Schema for <c>Goblinshark</c>:
<code>{
  jawsize: number, # Optional.
  color: &quot;pink&quot; | &quot;gray&quot; | &quot;brown&quot; | &quot;RED&quot; | &quot;red&quot;, # Optional. Colors possible
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Cookiecuttershark</summary>Schema for <c>Cookiecuttershark</c>:
<code>{
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
</details>

</remarks>
    </member>
    <member name="PutValidAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call PutValidAsync with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphicrecursiveClient(credential);

var data = new {
    fishtype = "salmon",
    length = 123.45f,
};

Response response = await client.PutValidAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutValidAsync with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphicrecursiveClient(credential);

var data = new {
    location = "<location>",
    iswild = true,
    fishtype = "salmon",
    species = "<species>",
    length = 123.45f,
    siblings = new[] {},
};

Response response = await client.PutValidAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
<details><summary>Salmon</summary>Schema for <c>Salmon</c>:
<code>{
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>~+ 5 more JSON objects</summary><details><summary>Shark</summary>Schema for <c>Shark</c>:
<code>{
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>SmartSalmon</summary>Schema for <c>SmartSalmon</c>:
<code>{
  college_degree: string, # Optional.
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Sawshark</summary>Schema for <c>Sawshark</c>:
<code>{
  picture: Bytes, # Optional.
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Goblinshark</summary>Schema for <c>Goblinshark</c>:
<code>{
  jawsize: number, # Optional.
  color: &quot;pink&quot; | &quot;gray&quot; | &quot;brown&quot; | &quot;RED&quot; | &quot;red&quot;, # Optional. Colors possible
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Cookiecuttershark</summary>Schema for <c>Cookiecuttershark</c>:
<code>{
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
</details>

</remarks>
    </member>
    <member name="PutValid(RequestContent,RequestContext)">
<example>
This sample shows how to call PutValid with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphicrecursiveClient(credential);

var data = new {
    fishtype = "salmon",
    length = 123.45f,
};

Response response = client.PutValid(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutValid with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphicrecursiveClient(credential);

var data = new {
    location = "<location>",
    iswild = true,
    fishtype = "salmon",
    species = "<species>",
    length = 123.45f,
    siblings = new[] {},
};

Response response = client.PutValid(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
<details><summary>Salmon</summary>Schema for <c>Salmon</c>:
<code>{
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>~+ 5 more JSON objects</summary><details><summary>Shark</summary>Schema for <c>Shark</c>:
<code>{
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>SmartSalmon</summary>Schema for <c>SmartSalmon</c>:
<code>{
  college_degree: string, # Optional.
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Sawshark</summary>Schema for <c>Sawshark</c>:
<code>{
  picture: Bytes, # Optional.
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Goblinshark</summary>Schema for <c>Goblinshark</c>:
<code>{
  jawsize: number, # Optional.
  color: &quot;pink&quot; | &quot;gray&quot; | &quot;brown&quot; | &quot;RED&quot; | &quot;red&quot;, # Optional. Colors possible
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Cookiecuttershark</summary>Schema for <c>Cookiecuttershark</c>:
<code>{
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
</details>

</remarks>
    </member>
  </members>
</doc>