<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetValidAsync(RequestContext)">
<example>
This sample shows how to call GetValidAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphismClient(credential);

Response response = await client.GetValidAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("fishtype").ToString());
Console.WriteLine(result.GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("fishtype").ToString());
Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("length").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
<details><summary>Salmon</summary>Schema for <c>Salmon</c>:
<code>{
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>~+ 5 more JSON objects</summary><details><summary>Shark</summary>Schema for <c>Shark</c>:
<code>{
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>SmartSalmon</summary>Schema for <c>SmartSalmon</c>:
<code>{
  college_degree: string, # Optional.
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Sawshark</summary>Schema for <c>Sawshark</c>:
<code>{
  picture: Bytes, # Optional.
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Goblinshark</summary>Schema for <c>Goblinshark</c>:
<code>{
  jawsize: number, # Optional.
  color: &quot;pink&quot; | &quot;gray&quot; | &quot;brown&quot; | &quot;RED&quot; | &quot;red&quot;, # Optional. Colors possible
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Cookiecuttershark</summary>Schema for <c>Cookiecuttershark</c>:
<code>{
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
</details>

</remarks>
    </member>
    <member name="GetValid(RequestContext)">
<example>
This sample shows how to call GetValid and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphismClient(credential);

Response response = client.GetValid();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("fishtype").ToString());
Console.WriteLine(result.GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("fishtype").ToString());
Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("length").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
<details><summary>Salmon</summary>Schema for <c>Salmon</c>:
<code>{
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>~+ 5 more JSON objects</summary><details><summary>Shark</summary>Schema for <c>Shark</c>:
<code>{
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>SmartSalmon</summary>Schema for <c>SmartSalmon</c>:
<code>{
  college_degree: string, # Optional.
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Sawshark</summary>Schema for <c>Sawshark</c>:
<code>{
  picture: Bytes, # Optional.
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Goblinshark</summary>Schema for <c>Goblinshark</c>:
<code>{
  jawsize: number, # Optional.
  color: &quot;pink&quot; | &quot;gray&quot; | &quot;brown&quot; | &quot;RED&quot; | &quot;red&quot;, # Optional. Colors possible
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Cookiecuttershark</summary>Schema for <c>Cookiecuttershark</c>:
<code>{
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
</details>

</remarks>
    </member>
    <member name="PutValidAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call PutValidAsync with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphismClient(credential);

var data = new {
    fishtype = "salmon",
    length = 123.45f,
};

Response response = await client.PutValidAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutValidAsync with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphismClient(credential);

var data = new {
    location = "<location>",
    iswild = true,
    fishtype = "salmon",
    species = "<species>",
    length = 123.45f,
    siblings = new[] {},
};

Response response = await client.PutValidAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
<details><summary>Salmon</summary>Schema for <c>Salmon</c>:
<code>{
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>~+ 5 more JSON objects</summary><details><summary>Shark</summary>Schema for <c>Shark</c>:
<code>{
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>SmartSalmon</summary>Schema for <c>SmartSalmon</c>:
<code>{
  college_degree: string, # Optional.
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Sawshark</summary>Schema for <c>Sawshark</c>:
<code>{
  picture: Bytes, # Optional.
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Goblinshark</summary>Schema for <c>Goblinshark</c>:
<code>{
  jawsize: number, # Optional.
  color: &quot;pink&quot; | &quot;gray&quot; | &quot;brown&quot; | &quot;RED&quot; | &quot;red&quot;, # Optional. Colors possible
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Cookiecuttershark</summary>Schema for <c>Cookiecuttershark</c>:
<code>{
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
</details>

</remarks>
    </member>
    <member name="PutValid(RequestContent,RequestContext)">
<example>
This sample shows how to call PutValid with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphismClient(credential);

var data = new {
    fishtype = "salmon",
    length = 123.45f,
};

Response response = client.PutValid(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutValid with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphismClient(credential);

var data = new {
    location = "<location>",
    iswild = true,
    fishtype = "salmon",
    species = "<species>",
    length = 123.45f,
    siblings = new[] {},
};

Response response = client.PutValid(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
<details><summary>Salmon</summary>Schema for <c>Salmon</c>:
<code>{
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>~+ 5 more JSON objects</summary><details><summary>Shark</summary>Schema for <c>Shark</c>:
<code>{
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>SmartSalmon</summary>Schema for <c>SmartSalmon</c>:
<code>{
  college_degree: string, # Optional.
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Sawshark</summary>Schema for <c>Sawshark</c>:
<code>{
  picture: Bytes, # Optional.
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Goblinshark</summary>Schema for <c>Goblinshark</c>:
<code>{
  jawsize: number, # Optional.
  color: &quot;pink&quot; | &quot;gray&quot; | &quot;brown&quot; | &quot;RED&quot; | &quot;red&quot;, # Optional. Colors possible
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Cookiecuttershark</summary>Schema for <c>Cookiecuttershark</c>:
<code>{
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
</details>

</remarks>
    </member>
    <member name="GetDotSyntaxAsync(RequestContext)">
<example>
This sample shows how to call GetDotSyntaxAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphismClient(credential);

Response response = await client.GetDotSyntaxAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("fish.type").ToString());
Console.WriteLine(result.GetProperty("species").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

<details><summary>DotSalmon</summary>Schema for <c>DotSalmon</c>:
<code>{
  location: string, # Optional.
  iswild: boolean, # Optional.
  fish.type: string, # Required.
  species: string, # Optional.
}
</code>
</details>

</remarks>
    </member>
    <member name="GetDotSyntax(RequestContext)">
<example>
This sample shows how to call GetDotSyntax and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphismClient(credential);

Response response = client.GetDotSyntax();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("fish.type").ToString());
Console.WriteLine(result.GetProperty("species").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

<details><summary>DotSalmon</summary>Schema for <c>DotSalmon</c>:
<code>{
  location: string, # Optional.
  iswild: boolean, # Optional.
  fish.type: string, # Required.
  species: string, # Optional.
}
</code>
</details>

</remarks>
    </member>
    <member name="GetComposedWithDiscriminatorAsync(RequestContext)">
<example>
This sample shows how to call GetComposedWithDiscriminatorAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphismClient(credential);

Response response = await client.GetComposedWithDiscriminatorAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("sampleSalmon").GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("sampleSalmon").GetProperty("iswild").ToString());
Console.WriteLine(result.GetProperty("sampleSalmon").GetProperty("fish.type").ToString());
Console.WriteLine(result.GetProperty("sampleSalmon").GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("salmons")[0].GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("salmons")[0].GetProperty("iswild").ToString());
Console.WriteLine(result.GetProperty("salmons")[0].GetProperty("fish.type").ToString());
Console.WriteLine(result.GetProperty("salmons")[0].GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("sampleFish").GetProperty("fish.type").ToString());
Console.WriteLine(result.GetProperty("sampleFish").GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("fishes")[0].GetProperty("fish.type").ToString());
Console.WriteLine(result.GetProperty("fishes")[0].GetProperty("species").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DotFishMarket</c>:
<code>{
  sampleSalmon: {
    location: string, # Optional.
    iswild: boolean, # Optional.
    fish.type: string, # Required.
    species: string, # Optional.
  }, # Optional.
  salmons: [DotSalmon], # Optional.
  sampleFish: {
    fish.type: string, # Required.
    species: string, # Optional.
  }, # Optional.
  fishes: [DotFish], # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetComposedWithDiscriminator(RequestContext)">
<example>
This sample shows how to call GetComposedWithDiscriminator and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphismClient(credential);

Response response = client.GetComposedWithDiscriminator();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("sampleSalmon").GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("sampleSalmon").GetProperty("iswild").ToString());
Console.WriteLine(result.GetProperty("sampleSalmon").GetProperty("fish.type").ToString());
Console.WriteLine(result.GetProperty("sampleSalmon").GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("salmons")[0].GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("salmons")[0].GetProperty("iswild").ToString());
Console.WriteLine(result.GetProperty("salmons")[0].GetProperty("fish.type").ToString());
Console.WriteLine(result.GetProperty("salmons")[0].GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("sampleFish").GetProperty("fish.type").ToString());
Console.WriteLine(result.GetProperty("sampleFish").GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("fishes")[0].GetProperty("fish.type").ToString());
Console.WriteLine(result.GetProperty("fishes")[0].GetProperty("species").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DotFishMarket</c>:
<code>{
  sampleSalmon: {
    location: string, # Optional.
    iswild: boolean, # Optional.
    fish.type: string, # Required.
    species: string, # Optional.
  }, # Optional.
  salmons: [DotSalmon], # Optional.
  sampleFish: {
    fish.type: string, # Required.
    species: string, # Optional.
  }, # Optional.
  fishes: [DotFish], # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetComposedWithoutDiscriminatorAsync(RequestContext)">
<example>
This sample shows how to call GetComposedWithoutDiscriminatorAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphismClient(credential);

Response response = await client.GetComposedWithoutDiscriminatorAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("sampleSalmon").GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("sampleSalmon").GetProperty("iswild").ToString());
Console.WriteLine(result.GetProperty("sampleSalmon").GetProperty("fish.type").ToString());
Console.WriteLine(result.GetProperty("sampleSalmon").GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("salmons")[0].GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("salmons")[0].GetProperty("iswild").ToString());
Console.WriteLine(result.GetProperty("salmons")[0].GetProperty("fish.type").ToString());
Console.WriteLine(result.GetProperty("salmons")[0].GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("sampleFish").GetProperty("fish.type").ToString());
Console.WriteLine(result.GetProperty("sampleFish").GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("fishes")[0].GetProperty("fish.type").ToString());
Console.WriteLine(result.GetProperty("fishes")[0].GetProperty("species").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DotFishMarket</c>:
<code>{
  sampleSalmon: {
    location: string, # Optional.
    iswild: boolean, # Optional.
    fish.type: string, # Required.
    species: string, # Optional.
  }, # Optional.
  salmons: [DotSalmon], # Optional.
  sampleFish: {
    fish.type: string, # Required.
    species: string, # Optional.
  }, # Optional.
  fishes: [DotFish], # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetComposedWithoutDiscriminator(RequestContext)">
<example>
This sample shows how to call GetComposedWithoutDiscriminator and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphismClient(credential);

Response response = client.GetComposedWithoutDiscriminator();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("sampleSalmon").GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("sampleSalmon").GetProperty("iswild").ToString());
Console.WriteLine(result.GetProperty("sampleSalmon").GetProperty("fish.type").ToString());
Console.WriteLine(result.GetProperty("sampleSalmon").GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("salmons")[0].GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("salmons")[0].GetProperty("iswild").ToString());
Console.WriteLine(result.GetProperty("salmons")[0].GetProperty("fish.type").ToString());
Console.WriteLine(result.GetProperty("salmons")[0].GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("sampleFish").GetProperty("fish.type").ToString());
Console.WriteLine(result.GetProperty("sampleFish").GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("fishes")[0].GetProperty("fish.type").ToString());
Console.WriteLine(result.GetProperty("fishes")[0].GetProperty("species").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DotFishMarket</c>:
<code>{
  sampleSalmon: {
    location: string, # Optional.
    iswild: boolean, # Optional.
    fish.type: string, # Required.
    species: string, # Optional.
  }, # Optional.
  salmons: [DotSalmon], # Optional.
  sampleFish: {
    fish.type: string, # Required.
    species: string, # Optional.
  }, # Optional.
  fishes: [DotFish], # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetComplicatedAsync(RequestContext)">
<example>
This sample shows how to call GetComplicatedAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphismClient(credential);

Response response = await client.GetComplicatedAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("iswild").ToString());
Console.WriteLine(result.GetProperty("fishtype").ToString());
Console.WriteLine(result.GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("fishtype").ToString());
Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("length").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

<details><summary>SmartSalmon</summary>Schema for <c>SmartSalmon</c>:
<code>{
  college_degree: string, # Optional.
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>

</remarks>
    </member>
    <member name="GetComplicated(RequestContext)">
<example>
This sample shows how to call GetComplicated and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphismClient(credential);

Response response = client.GetComplicated();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("iswild").ToString());
Console.WriteLine(result.GetProperty("fishtype").ToString());
Console.WriteLine(result.GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("fishtype").ToString());
Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("length").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

<details><summary>SmartSalmon</summary>Schema for <c>SmartSalmon</c>:
<code>{
  college_degree: string, # Optional.
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>

</remarks>
    </member>
    <member name="PutComplicatedAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call PutComplicatedAsync with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphismClient(credential);

var data = new {
    fishtype = "smart_salmon",
    length = 123.45f,
};

Response response = await client.PutComplicatedAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutComplicatedAsync with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphismClient(credential);

var data = new {
    college_degree = "<college_degree>",
    location = "<location>",
    iswild = true,
    fishtype = "smart_salmon",
    species = "<species>",
    length = 123.45f,
    siblings = new[] {
        new {
            location = "<location>",
            iswild = true,
            fishtype = "salmon",
            species = "<species>",
            length = 123.45f,
            siblings = new[] {},
        }
    },
};

Response response = await client.PutComplicatedAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

<details><summary>SmartSalmon</summary>Schema for <c>SmartSalmon</c>:
<code>{
  college_degree: string, # Optional.
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>

</remarks>
    </member>
    <member name="PutComplicated(RequestContent,RequestContext)">
<example>
This sample shows how to call PutComplicated with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphismClient(credential);

var data = new {
    fishtype = "smart_salmon",
    length = 123.45f,
};

Response response = client.PutComplicated(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutComplicated with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphismClient(credential);

var data = new {
    college_degree = "<college_degree>",
    location = "<location>",
    iswild = true,
    fishtype = "smart_salmon",
    species = "<species>",
    length = 123.45f,
    siblings = new[] {
        new {
            location = "<location>",
            iswild = true,
            fishtype = "salmon",
            species = "<species>",
            length = 123.45f,
            siblings = new[] {},
        }
    },
};

Response response = client.PutComplicated(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

<details><summary>SmartSalmon</summary>Schema for <c>SmartSalmon</c>:
<code>{
  college_degree: string, # Optional.
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>

</remarks>
    </member>
    <member name="PutMissingDiscriminatorAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call PutMissingDiscriminatorAsync with required request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphismClient(credential);

var data = new {
    fishtype = "smart_salmon",
    length = 123.45f,
};

Response response = await client.PutMissingDiscriminatorAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PutMissingDiscriminatorAsync with all request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphismClient(credential);

var data = new {
    college_degree = "<college_degree>",
    location = "<location>",
    iswild = true,
    fishtype = "smart_salmon",
    species = "<species>",
    length = 123.45f,
    siblings = new[] {
        new {
            location = "<location>",
            iswild = true,
            fishtype = "salmon",
            species = "<species>",
            length = 123.45f,
            siblings = new[] {},
        }
    },
};

Response response = await client.PutMissingDiscriminatorAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("iswild").ToString());
Console.WriteLine(result.GetProperty("fishtype").ToString());
Console.WriteLine(result.GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("fishtype").ToString());
Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("length").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

<details><summary>SmartSalmon</summary>Schema for <c>SmartSalmon</c>:
<code>{
  college_degree: string, # Optional.
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>

Response Body:

<details><summary>SmartSalmon</summary>Schema for <c>SmartSalmon</c>:
<code>{
  college_degree: string, # Optional.
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>

</remarks>
    </member>
    <member name="PutMissingDiscriminator(RequestContent,RequestContext)">
<example>
This sample shows how to call PutMissingDiscriminator with required request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphismClient(credential);

var data = new {
    fishtype = "smart_salmon",
    length = 123.45f,
};

Response response = client.PutMissingDiscriminator(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PutMissingDiscriminator with all request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphismClient(credential);

var data = new {
    college_degree = "<college_degree>",
    location = "<location>",
    iswild = true,
    fishtype = "smart_salmon",
    species = "<species>",
    length = 123.45f,
    siblings = new[] {
        new {
            location = "<location>",
            iswild = true,
            fishtype = "salmon",
            species = "<species>",
            length = 123.45f,
            siblings = new[] {},
        }
    },
};

Response response = client.PutMissingDiscriminator(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("iswild").ToString());
Console.WriteLine(result.GetProperty("fishtype").ToString());
Console.WriteLine(result.GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("fishtype").ToString());
Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("species").ToString());
Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("length").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

<details><summary>SmartSalmon</summary>Schema for <c>SmartSalmon</c>:
<code>{
  college_degree: string, # Optional.
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>

Response Body:

<details><summary>SmartSalmon</summary>Schema for <c>SmartSalmon</c>:
<code>{
  college_degree: string, # Optional.
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>

</remarks>
    </member>
    <member name="PutValidMissingRequiredAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call PutValidMissingRequiredAsync with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphismClient(credential);

var data = new {
    fishtype = "salmon",
    length = 123.45f,
};

Response response = await client.PutValidMissingRequiredAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutValidMissingRequiredAsync with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphismClient(credential);

var data = new {
    location = "<location>",
    iswild = true,
    fishtype = "salmon",
    species = "<species>",
    length = 123.45f,
    siblings = new[] {},
};

Response response = await client.PutValidMissingRequiredAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
<details><summary>Salmon</summary>Schema for <c>Salmon</c>:
<code>{
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>~+ 5 more JSON objects</summary><details><summary>Shark</summary>Schema for <c>Shark</c>:
<code>{
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>SmartSalmon</summary>Schema for <c>SmartSalmon</c>:
<code>{
  college_degree: string, # Optional.
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Sawshark</summary>Schema for <c>Sawshark</c>:
<code>{
  picture: Bytes, # Optional.
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Goblinshark</summary>Schema for <c>Goblinshark</c>:
<code>{
  jawsize: number, # Optional.
  color: &quot;pink&quot; | &quot;gray&quot; | &quot;brown&quot; | &quot;RED&quot; | &quot;red&quot;, # Optional. Colors possible
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Cookiecuttershark</summary>Schema for <c>Cookiecuttershark</c>:
<code>{
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
</details>

</remarks>
    </member>
    <member name="PutValidMissingRequired(RequestContent,RequestContext)">
<example>
This sample shows how to call PutValidMissingRequired with required request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphismClient(credential);

var data = new {
    fishtype = "salmon",
    length = 123.45f,
};

Response response = client.PutValidMissingRequired(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutValidMissingRequired with all request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new PolymorphismClient(credential);

var data = new {
    location = "<location>",
    iswild = true,
    fishtype = "salmon",
    species = "<species>",
    length = 123.45f,
    siblings = new[] {},
};

Response response = client.PutValidMissingRequired(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
<details><summary>Salmon</summary>Schema for <c>Salmon</c>:
<code>{
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>~+ 5 more JSON objects</summary><details><summary>Shark</summary>Schema for <c>Shark</c>:
<code>{
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>SmartSalmon</summary>Schema for <c>SmartSalmon</c>:
<code>{
  college_degree: string, # Optional.
  location: string, # Optional.
  iswild: boolean, # Optional.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Sawshark</summary>Schema for <c>Sawshark</c>:
<code>{
  picture: Bytes, # Optional.
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Goblinshark</summary>Schema for <c>Goblinshark</c>:
<code>{
  jawsize: number, # Optional.
  color: &quot;pink&quot; | &quot;gray&quot; | &quot;brown&quot; | &quot;RED&quot; | &quot;red&quot;, # Optional. Colors possible
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
<details><summary>Cookiecuttershark</summary>Schema for <c>Cookiecuttershark</c>:
<code>{
  age: number, # Optional.
  birthday: string (ISO 8601 Format), # Required.
  fishtype: string, # Required.
  species: string, # Optional.
  length: number, # Required.
  siblings: [
    {
      fishtype: string, # Required.
      species: string, # Optional.
      length: number, # Required.
      siblings: [Fish], # Optional.
    }
  ], # Optional.
}
</code>
</details>
</details>

</remarks>
    </member>
  </members>
</doc>