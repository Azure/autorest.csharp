// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using body_complex_LowLevel;

namespace body_complex_LowLevel.Samples
{
    public class Samples_PolymorphismClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetValid()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            Response response = client.GetValid(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetValid_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            Response response = await client.GetValidAsync(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetValid_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            Response response = client.GetValid(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetValid_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            Response response = await client.GetValidAsync(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutValid()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                fishtype = "salmon",
                length = 123.45F,
            });
            Response response = client.PutValid(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutValid_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                fishtype = "salmon",
                length = 123.45F,
            });
            Response response = await client.PutValidAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutValid_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                location = "<location>",
                iswild = true,
                fishtype = "salmon",
                species = "<species>",
                length = 123.45F,
                siblings = new object[]
            {
null
            },
            });
            Response response = client.PutValid(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutValid_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                location = "<location>",
                iswild = true,
                fishtype = "salmon",
                species = "<species>",
                length = 123.45F,
                siblings = new object[]
            {
null
            },
            });
            Response response = await client.PutValidAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDotSyntax()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            Response response = client.GetDotSyntax(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDotSyntax_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            Response response = await client.GetDotSyntaxAsync(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDotSyntax_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            Response response = client.GetDotSyntax(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDotSyntax_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            Response response = await client.GetDotSyntaxAsync(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetComposedWithDiscriminator()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            Response response = client.GetComposedWithDiscriminator(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetComposedWithDiscriminator_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            Response response = await client.GetComposedWithDiscriminatorAsync(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetComposedWithDiscriminator_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            Response response = client.GetComposedWithDiscriminator(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetComposedWithDiscriminator_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            Response response = await client.GetComposedWithDiscriminatorAsync(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetComposedWithoutDiscriminator()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            Response response = client.GetComposedWithoutDiscriminator(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetComposedWithoutDiscriminator_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            Response response = await client.GetComposedWithoutDiscriminatorAsync(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetComposedWithoutDiscriminator_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            Response response = client.GetComposedWithoutDiscriminator(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetComposedWithoutDiscriminator_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            Response response = await client.GetComposedWithoutDiscriminatorAsync(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetComplicated()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            Response response = client.GetComplicated(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetComplicated_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            Response response = await client.GetComplicatedAsync(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetComplicated_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            Response response = client.GetComplicated(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetComplicated_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            Response response = await client.GetComplicatedAsync(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutComplicated()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                fishtype = "smart_salmon",
                length = 123.45F,
            });
            Response response = client.PutComplicated(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutComplicated_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                fishtype = "smart_salmon",
                length = 123.45F,
            });
            Response response = await client.PutComplicatedAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutComplicated_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                college_degree = "<college_degree>",
                location = "<location>",
                iswild = true,
                fishtype = "smart_salmon",
                species = "<species>",
                length = 123.45F,
                siblings = new object[]
            {
new
{
location = "<location>",
iswild = true,
fishtype = "salmon",
species = "<species>",
length = 123.45F,
siblings = new object[]
{
null
},
}
            },
            });
            Response response = client.PutComplicated(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutComplicated_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                college_degree = "<college_degree>",
                location = "<location>",
                iswild = true,
                fishtype = "smart_salmon",
                species = "<species>",
                length = 123.45F,
                siblings = new object[]
            {
new
{
location = "<location>",
iswild = true,
fishtype = "salmon",
species = "<species>",
length = 123.45F,
siblings = new object[]
{
null
},
}
            },
            });
            Response response = await client.PutComplicatedAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutMissingDiscriminator()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                fishtype = "smart_salmon",
                length = 123.45F,
            });
            Response response = client.PutMissingDiscriminator(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutMissingDiscriminator_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                fishtype = "smart_salmon",
                length = 123.45F,
            });
            Response response = await client.PutMissingDiscriminatorAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutMissingDiscriminator_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                college_degree = "<college_degree>",
                location = "<location>",
                iswild = true,
                fishtype = "smart_salmon",
                species = "<species>",
                length = 123.45F,
                siblings = new object[]
            {
new
{
location = "<location>",
iswild = true,
fishtype = "salmon",
species = "<species>",
length = 123.45F,
siblings = new object[]
{
null
},
}
            },
            });
            Response response = client.PutMissingDiscriminator(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutMissingDiscriminator_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                college_degree = "<college_degree>",
                location = "<location>",
                iswild = true,
                fishtype = "smart_salmon",
                species = "<species>",
                length = 123.45F,
                siblings = new object[]
            {
new
{
location = "<location>",
iswild = true,
fishtype = "salmon",
species = "<species>",
length = 123.45F,
siblings = new object[]
{
null
},
}
            },
            });
            Response response = await client.PutMissingDiscriminatorAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutValidMissingRequired()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                fishtype = "salmon",
                length = 123.45F,
            });
            Response response = client.PutValidMissingRequired(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutValidMissingRequired_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                fishtype = "salmon",
                length = 123.45F,
            });
            Response response = await client.PutValidMissingRequiredAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutValidMissingRequired_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                location = "<location>",
                iswild = true,
                fishtype = "salmon",
                species = "<species>",
                length = 123.45F,
                siblings = new object[]
            {
null
            },
            });
            Response response = client.PutValidMissingRequired(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutValidMissingRequired_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PolymorphismClient client = new PolymorphismClient(credential);

            RequestContent content = RequestContent.Create(new
            {
                location = "<location>",
                iswild = true,
                fishtype = "salmon",
                species = "<species>",
                length = 123.45F,
                siblings = new object[]
            {
null
            },
            });
            Response response = await client.PutValidMissingRequiredAsync(content);
        }
    }
}
