// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using body_complex_LowLevel;

namespace body_complex_LowLevel.Tests
{
    public class PolymorphismClientTests : body_complex_LowLevelTestBase
    {
        public PolymorphismClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        public async Task GetValid_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PolymorphismClient client = CreatePolymorphismClient(credential, endpoint);

            Response response = await client.GetValidAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("fishtype").ToString());
            Console.WriteLine(result.GetProperty("length").ToString());
        }

        [Test]
        public async Task GetValid_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PolymorphismClient client = CreatePolymorphismClient(credential, endpoint);

            Response response = await client.GetValidAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("fishtype").ToString());
            Console.WriteLine(result.GetProperty("species").ToString());
            Console.WriteLine(result.GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("fishtype").ToString());
            Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("species").ToString());
            Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("length").ToString());
        }

        [Test]
        public async Task PutValid_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PolymorphismClient client = CreatePolymorphismClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                fishtype = "salmon",
                length = 123.45F,
            });
            Response response = await client.PutValidAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task PutValid_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PolymorphismClient client = CreatePolymorphismClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                location = "<location>",
                iswild = true,
                fishtype = "salmon",
                species = "<species>",
                length = 123.45F,
                siblings = new List<object>()
{
null
},
            });
            Response response = await client.PutValidAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task GetDotSyntax_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PolymorphismClient client = CreatePolymorphismClient(credential, endpoint);

            Response response = await client.GetDotSyntaxAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("fish.type").ToString());
        }

        [Test]
        public async Task GetDotSyntax_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PolymorphismClient client = CreatePolymorphismClient(credential, endpoint);

            Response response = await client.GetDotSyntaxAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("fish.type").ToString());
            Console.WriteLine(result.GetProperty("species").ToString());
        }

        [Test]
        public async Task GetComposedWithDiscriminator_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PolymorphismClient client = CreatePolymorphismClient(credential, endpoint);

            Response response = await client.GetComposedWithDiscriminatorAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        public async Task GetComposedWithDiscriminator_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PolymorphismClient client = CreatePolymorphismClient(credential, endpoint);

            Response response = await client.GetComposedWithDiscriminatorAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sampleSalmon").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sampleSalmon").GetProperty("iswild").ToString());
            Console.WriteLine(result.GetProperty("sampleSalmon").GetProperty("fish.type").ToString());
            Console.WriteLine(result.GetProperty("sampleSalmon").GetProperty("species").ToString());
            Console.WriteLine(result.GetProperty("salmons")[0].GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("salmons")[0].GetProperty("iswild").ToString());
            Console.WriteLine(result.GetProperty("salmons")[0].GetProperty("fish.type").ToString());
            Console.WriteLine(result.GetProperty("salmons")[0].GetProperty("species").ToString());
            Console.WriteLine(result.GetProperty("sampleFish").GetProperty("fish.type").ToString());
            Console.WriteLine(result.GetProperty("sampleFish").GetProperty("species").ToString());
            Console.WriteLine(result.GetProperty("fishes")[0].GetProperty("fish.type").ToString());
            Console.WriteLine(result.GetProperty("fishes")[0].GetProperty("species").ToString());
        }

        [Test]
        public async Task GetComposedWithoutDiscriminator_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PolymorphismClient client = CreatePolymorphismClient(credential, endpoint);

            Response response = await client.GetComposedWithoutDiscriminatorAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        public async Task GetComposedWithoutDiscriminator_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PolymorphismClient client = CreatePolymorphismClient(credential, endpoint);

            Response response = await client.GetComposedWithoutDiscriminatorAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("sampleSalmon").GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("sampleSalmon").GetProperty("iswild").ToString());
            Console.WriteLine(result.GetProperty("sampleSalmon").GetProperty("fish.type").ToString());
            Console.WriteLine(result.GetProperty("sampleSalmon").GetProperty("species").ToString());
            Console.WriteLine(result.GetProperty("salmons")[0].GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("salmons")[0].GetProperty("iswild").ToString());
            Console.WriteLine(result.GetProperty("salmons")[0].GetProperty("fish.type").ToString());
            Console.WriteLine(result.GetProperty("salmons")[0].GetProperty("species").ToString());
            Console.WriteLine(result.GetProperty("sampleFish").GetProperty("fish.type").ToString());
            Console.WriteLine(result.GetProperty("sampleFish").GetProperty("species").ToString());
            Console.WriteLine(result.GetProperty("fishes")[0].GetProperty("fish.type").ToString());
            Console.WriteLine(result.GetProperty("fishes")[0].GetProperty("species").ToString());
        }

        [Test]
        public async Task GetComplicated_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PolymorphismClient client = CreatePolymorphismClient(credential, endpoint);

            Response response = await client.GetComplicatedAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        public async Task GetComplicated_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PolymorphismClient client = CreatePolymorphismClient(credential, endpoint);

            Response response = await client.GetComplicatedAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("iswild").ToString());
            Console.WriteLine(result.GetProperty("fishtype").ToString());
            Console.WriteLine(result.GetProperty("species").ToString());
            Console.WriteLine(result.GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("fishtype").ToString());
            Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("species").ToString());
            Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("length").ToString());
        }

        [Test]
        public async Task PutComplicated_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PolymorphismClient client = CreatePolymorphismClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                fishtype = "smart_salmon",
                length = 123.45F,
            });
            Response response = await client.PutComplicatedAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task PutComplicated_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PolymorphismClient client = CreatePolymorphismClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                college_degree = "<college_degree>",
                location = "<location>",
                iswild = true,
                fishtype = "smart_salmon",
                species = "<species>",
                length = 123.45F,
                siblings = new List<object>()
{
new
{
location = "<location>",
iswild = true,
fishtype = "salmon",
species = "<species>",
length = 123.45F,
siblings = new List<object>()
{
null
},
}
},
            });
            Response response = await client.PutComplicatedAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task PutMissingDiscriminator_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PolymorphismClient client = CreatePolymorphismClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                fishtype = "smart_salmon",
                length = 123.45F,
            });
            Response response = await client.PutMissingDiscriminatorAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        public async Task PutMissingDiscriminator_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PolymorphismClient client = CreatePolymorphismClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                college_degree = "<college_degree>",
                location = "<location>",
                iswild = true,
                fishtype = "smart_salmon",
                species = "<species>",
                length = 123.45F,
                siblings = new List<object>()
{
new
{
location = "<location>",
iswild = true,
fishtype = "salmon",
species = "<species>",
length = 123.45F,
siblings = new List<object>()
{
null
},
}
},
            });
            Response response = await client.PutMissingDiscriminatorAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("iswild").ToString());
            Console.WriteLine(result.GetProperty("fishtype").ToString());
            Console.WriteLine(result.GetProperty("species").ToString());
            Console.WriteLine(result.GetProperty("length").ToString());
            Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("fishtype").ToString());
            Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("species").ToString());
            Console.WriteLine(result.GetProperty("siblings")[0].GetProperty("length").ToString());
        }

        [Test]
        public async Task PutValidMissingRequired_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PolymorphismClient client = CreatePolymorphismClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                fishtype = "salmon",
                length = 123.45F,
            });
            Response response = await client.PutValidMissingRequiredAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task PutValidMissingRequired_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            PolymorphismClient client = CreatePolymorphismClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                location = "<location>",
                iswild = true,
                fishtype = "salmon",
                species = "<species>",
                length = 123.45F,
                siblings = new List<object>()
{
null
},
            });
            Response response = await client.PutValidMissingRequiredAsync(content);
            Console.WriteLine(response.Status);
        }
    }
}
