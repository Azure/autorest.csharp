<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetModelAsync(String,RequestContext)">
<example>
This sample shows how to call GetModelAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new DPGClient(credential);

Response response = await client.GetModelAsync("<mode>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("received").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

<details><summary>LROProduct</summary>Schema for <c>LROProduct</c>:
<code>{
  provisioningState: string, # Required.
  received: &quot;raw&quot; | &quot;model&quot;, # Required.
}
</code>
</details>

</remarks>
    </member>
    <member name="GetModel(String,RequestContext)">
<example>
This sample shows how to call GetModel with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new DPGClient(credential);

Response response = client.GetModel("<mode>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("received").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

<details><summary>LROProduct</summary>Schema for <c>LROProduct</c>:
<code>{
  provisioningState: string, # Required.
  received: &quot;raw&quot; | &quot;model&quot;, # Required.
}
</code>
</details>

</remarks>
    </member>
    <member name="PostModelAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call PostModelAsync with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new DPGClient(credential);

var data = new {
    hello = "<hello>",
};

Response response = await client.PostModelAsync("<mode>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("received").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Input</c>:
<code>{
  hello: string, # Required.
}
</code>

Response Body:

<details><summary>LROProduct</summary>Schema for <c>LROProduct</c>:
<code>{
  provisioningState: string, # Required.
  received: &quot;raw&quot; | &quot;model&quot;, # Required.
}
</code>
</details>

</remarks>
    </member>
    <member name="PostModel(String,RequestContent,RequestContext)">
<example>
This sample shows how to call PostModel with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new DPGClient(credential);

var data = new {
    hello = "<hello>",
};

Response response = client.PostModel("<mode>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("received").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Input</c>:
<code>{
  hello: string, # Required.
}
</code>

Response Body:

<details><summary>LROProduct</summary>Schema for <c>LROProduct</c>:
<code>{
  provisioningState: string, # Required.
  received: &quot;raw&quot; | &quot;model&quot;, # Required.
}
</code>
</details>

</remarks>
    </member>
    <member name="GetPagesAsync(String,RequestContext)">
<example>
This sample shows how to call GetPagesAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new DPGClient(credential);

await foreach (var data in client.GetPagesAsync("<mode>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("received").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>ProductResultValues</c>:
<code>{
  received: &quot;raw&quot; | &quot;model&quot;, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetPages(String,RequestContext)">
<example>
This sample shows how to call GetPages with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new DPGClient(credential);

foreach (var data in client.GetPages("<mode>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("received").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>ProductResultValues</c>:
<code>{
  received: &quot;raw&quot; | &quot;model&quot;, # Required.
}
</code>

</remarks>
    </member>
    <member name="LroAsync(WaitUntil,String,RequestContext)">
<example>
This sample shows how to call LroAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new DPGClient(credential);

var operation = await client.LroAsync(WaitUntil.Completed, "<mode>");

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("received").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>LROProduct</c>:
<code>{
  provisioningState: string, # Required.
  received: &quot;raw&quot; | &quot;model&quot;, # Required.
}
</code>

</remarks>
    </member>
    <member name="Lro(WaitUntil,String,RequestContext)">
<example>
This sample shows how to call Lro with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new DPGClient(credential);

var operation = client.Lro(WaitUntil.Completed, "<mode>");

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("received").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>LROProduct</c>:
<code>{
  provisioningState: string, # Required.
  received: &quot;raw&quot; | &quot;model&quot;, # Required.
}
</code>

</remarks>
    </member>
  </members>
</doc>