// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using dpg_customization_LowLevel.Models;

namespace dpg_customization_LowLevel
{
    public partial class DPGClient
    {
        /// <summary> Post either raw response as a model and pass in &apos;raw&apos; for mode, or grow up your operation to take a model instead, and put in &apos;model&apos; as mode. </summary>
        /// <param name="mode"> The mode with which you&apos;ll be handling your returned body. &apos;raw&apos; for just dealing with the raw body, and &apos;model&apos; if you are going to convert the raw body to a customized body before returning to users. </param>
        /// <param name="input"> Please put {&apos;hello&apos;: &apos;world!&apos;}. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="mode"/> or <paramref name="input"/> is null. </exception>
        public async Task<Response<Product>> PostModelAsync(string mode, Input input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            // TO-DO: how to convert from model Input to requestContent
            using var stream = new MemoryStream();
            using var writer = new Utf8JsonWriter(stream);
            (input as IUtf8JsonSerializable).Write(writer);
            writer.Flush();

            RequestContext requestContext = new RequestContext();
            requestContext.CancellationToken = cancellationToken;

            Response result = await PostModelAsync("model", RequestContent.Create(stream.ToArray()), requestContext);
            // TO-DO: make sure the returned response dose not lose information.
            return Response.FromValue((Product)result, result);
        }

        /// <summary> Post either raw response as a model and pass in &apos;raw&apos; for mode, or grow up your operation to take a model instead, and put in &apos;model&apos; as mode. </summary>
        /// <param name="mode"> The mode with which you&apos;ll be handling your returned body. &apos;raw&apos; for just dealing with the raw body, and &apos;model&apos; if you are going to convert the raw body to a customized body before returning to users. </param>
        /// <param name="input"> Please put {&apos;hello&apos;: &apos;world!&apos;}. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="mode"/> or <paramref name="input"/> is null. </exception>
        public Response<Product> PostModel(string mode, Input input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            // TO-DO: how to convert from model Input to requestContent
            using var stream = new MemoryStream();
            using var writer = new Utf8JsonWriter(stream);
            (input as IUtf8JsonSerializable).Write(writer);
            writer.Flush();

            RequestContext requestContext = new RequestContext();
            requestContext.CancellationToken = cancellationToken;

            Response result = PostModel("model", RequestContent.Create(stream.ToArray()), requestContext);
            // TO-DO: make sure the returned response dose not lose information.
            return Response.FromValue((Product)result, result);
        }
    }
}
