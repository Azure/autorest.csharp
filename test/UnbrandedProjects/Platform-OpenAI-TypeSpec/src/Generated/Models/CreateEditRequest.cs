// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace OpenAI.Models
{
    /// <summary> The CreateEditRequest. </summary>
    public partial class CreateEditRequest
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        internal IDictionary<string, BinaryData> SerializedAdditionalRawData { get; set; }
        /// <summary> Initializes a new instance of <see cref="CreateEditRequest"/>. </summary>
        /// <param name="model"></param>
        /// <param name="instruction"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="instruction"/> is null. </exception>
        public CreateEditRequest(CreateEditRequestModel model, string instruction)
        {
            Argument.AssertNotNull(instruction, nameof(instruction));

            Model = model;
            Instruction = instruction;
        }

        /// <summary> Initializes a new instance of <see cref="CreateEditRequest"/>. </summary>
        /// <param name="model"></param>
        /// <param name="input"></param>
        /// <param name="instruction"></param>
        /// <param name="n"></param>
        /// <param name="temperature"></param>
        /// <param name="topP"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CreateEditRequest(CreateEditRequestModel model, string input, string instruction, long? n, double? temperature, double? topP, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Model = model;
            Input = input;
            Instruction = instruction;
            N = n;
            Temperature = temperature;
            TopP = topP;
            SerializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CreateEditRequest"/> for deserialization. </summary>
        internal CreateEditRequest()
        {
        }

        /// <summary> Gets the model. </summary>
        public CreateEditRequestModel Model { get; }
        /// <summary> Gets or sets the input. </summary>
        public string Input { get; set; }
        /// <summary> Gets the instruction. </summary>
        public string Instruction { get; }
        /// <summary> Gets or sets the n. </summary>
        public long? N { get; set; }
        /// <summary> Gets or sets the temperature. </summary>
        public double? Temperature { get; set; }
        /// <summary> Gets or sets the top p. </summary>
        public double? TopP { get; set; }
    }
}
