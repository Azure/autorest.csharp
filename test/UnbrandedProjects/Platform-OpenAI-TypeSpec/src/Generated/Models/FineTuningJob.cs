// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace OpenAI.Models
{
    /// <summary> The FineTuningJob. </summary>
    public partial class FineTuningJob
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        internal IDictionary<string, BinaryData> SerializedAdditionalRawData { get; set; }
        /// <summary> Initializes a new instance of <see cref="FineTuningJob"/>. </summary>
        /// <param name="id"></param>
        /// <param name="createdAt"></param>
        /// <param name="finishedAt"></param>
        /// <param name="model"></param>
        /// <param name="fineTunedModel"></param>
        /// <param name="organizationId"></param>
        /// <param name="status"></param>
        /// <param name="hyperparameters"></param>
        /// <param name="trainingFile"></param>
        /// <param name="validationFile"></param>
        /// <param name="resultFiles"></param>
        /// <param name="trainedTokens"></param>
        /// <param name="error"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="model"/>, <paramref name="organizationId"/>, <paramref name="hyperparameters"/>, <paramref name="trainingFile"/> or <paramref name="resultFiles"/> is null. </exception>
        internal FineTuningJob(string id, DateTimeOffset createdAt, DateTimeOffset? finishedAt, string model, string fineTunedModel, string organizationId, FineTuningJobStatus status, FineTuningJobHyperparameters hyperparameters, string trainingFile, string validationFile, IEnumerable<string> resultFiles, long? trainedTokens, FineTuningJobError error)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(model, nameof(model));
            Argument.AssertNotNull(organizationId, nameof(organizationId));
            Argument.AssertNotNull(hyperparameters, nameof(hyperparameters));
            Argument.AssertNotNull(trainingFile, nameof(trainingFile));
            Argument.AssertNotNull(resultFiles, nameof(resultFiles));

            Id = id;
            CreatedAt = createdAt;
            FinishedAt = finishedAt;
            Model = model;
            FineTunedModel = fineTunedModel;
            OrganizationId = organizationId;
            Status = status;
            Hyperparameters = hyperparameters;
            TrainingFile = trainingFile;
            ValidationFile = validationFile;
            ResultFiles = resultFiles.ToList();
            TrainedTokens = trainedTokens;
            Error = error;
        }

        /// <summary> Initializes a new instance of <see cref="FineTuningJob"/>. </summary>
        /// <param name="id"></param>
        /// <param name="object"></param>
        /// <param name="createdAt"></param>
        /// <param name="finishedAt"></param>
        /// <param name="model"></param>
        /// <param name="fineTunedModel"></param>
        /// <param name="organizationId"></param>
        /// <param name="status"></param>
        /// <param name="hyperparameters"></param>
        /// <param name="trainingFile"></param>
        /// <param name="validationFile"></param>
        /// <param name="resultFiles"></param>
        /// <param name="trainedTokens"></param>
        /// <param name="error"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal FineTuningJob(string id, FineTuningJobObject @object, DateTimeOffset createdAt, DateTimeOffset? finishedAt, string model, string fineTunedModel, string organizationId, FineTuningJobStatus status, FineTuningJobHyperparameters hyperparameters, string trainingFile, string validationFile, IReadOnlyList<string> resultFiles, long? trainedTokens, FineTuningJobError error, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Object = @object;
            CreatedAt = createdAt;
            FinishedAt = finishedAt;
            Model = model;
            FineTunedModel = fineTunedModel;
            OrganizationId = organizationId;
            Status = status;
            Hyperparameters = hyperparameters;
            TrainingFile = trainingFile;
            ValidationFile = validationFile;
            ResultFiles = resultFiles;
            TrainedTokens = trainedTokens;
            Error = error;
            SerializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="FineTuningJob"/> for deserialization. </summary>
        internal FineTuningJob()
        {
        }

        /// <summary> Gets the id. </summary>
        public string Id { get; }
        /// <summary> Gets the object. </summary>
        public FineTuningJobObject Object { get; } = FineTuningJobObject.FineTuningJob;

        /// <summary> Gets the created at. </summary>
        public DateTimeOffset CreatedAt { get; }
        /// <summary> Gets the finished at. </summary>
        public DateTimeOffset? FinishedAt { get; }
        /// <summary> Gets the model. </summary>
        public string Model { get; }
        /// <summary> Gets the fine tuned model. </summary>
        public string FineTunedModel { get; }
        /// <summary> Gets the organization id. </summary>
        public string OrganizationId { get; }
        /// <summary> Gets the status. </summary>
        public FineTuningJobStatus Status { get; }
        /// <summary> Gets the hyperparameters. </summary>
        public FineTuningJobHyperparameters Hyperparameters { get; }
        /// <summary> Gets the training file. </summary>
        public string TrainingFile { get; }
        /// <summary> Gets the validation file. </summary>
        public string ValidationFile { get; }
        /// <summary> Gets the result files. </summary>
        public IReadOnlyList<string> ResultFiles { get; }
        /// <summary> Gets the trained tokens. </summary>
        public long? TrainedTokens { get; }
        /// <summary> Gets the error. </summary>
        public FineTuningJobError Error { get; }
    }
}
