// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ServiceModel.Rest.Experimental;

namespace OpenAI.Models
{
    /// <summary> Completion choice. </summary>
    public partial class CompletionChoice
    {
        /// <summary> Initializes a new instance of CompletionChoice. </summary>
        /// <param name="index"></param>
        /// <param name="text"></param>
        /// <param name="logprobs"></param>
        /// <param name="finishReason">
        /// The reason the model stopped generating tokens. This will be `stop` if the model hit a
        /// natural stop point or a provided stop sequence, or `content_filter` if content was omitted
        /// due to a flag from our content filters, `length` if the maximum number of tokens specified
        /// in the request was reached, or `content_filter` if content was omitted due to a flag from our
        /// content filters.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="text"/> is null. </exception>
        internal CompletionChoice(long index, string text, LogProbs logprobs, FinishReason finishReason)
        {
            ClientUtilities.AssertNotNull(text, nameof(text));

            Index = index;
            Text = text;
            Logprobs = logprobs;
            FinishReason = finishReason;
        }

        /// <summary> Gets the index. </summary>
        public long Index { get; }
        /// <summary> Gets the text. </summary>
        public string Text { get; }
        /// <summary> Gets the logprobs. </summary>
        public LogProbs Logprobs { get; }
        /// <summary>
        /// The reason the model stopped generating tokens. This will be `stop` if the model hit a
        /// natural stop point or a provided stop sequence, or `content_filter` if content was omitted
        /// due to a flag from our content filters, `length` if the maximum number of tokens specified
        /// in the request was reached, or `content_filter` if content was omitted due to a flag from our
        /// content filters.
        /// </summary>
        public FinishReason FinishReason { get; }
    }
}
