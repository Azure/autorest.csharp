// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace OpenAI.Models
{
    /// <summary> The CreateFineTuneRequest. </summary>
    public partial class CreateFineTuneRequest
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        internal IDictionary<string, BinaryData> SerializedAdditionalRawData { get; set; }
        /// <summary> Initializes a new instance of <see cref="CreateFineTuneRequest"/>. </summary>
        /// <param name="trainingFile"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="trainingFile"/> is null. </exception>
        public CreateFineTuneRequest(string trainingFile)
        {
            Argument.AssertNotNull(trainingFile, nameof(trainingFile));

            TrainingFile = trainingFile;
            ClassificationBetas = new ChangeTrackingList<double>();
        }

        /// <summary> Initializes a new instance of <see cref="CreateFineTuneRequest"/>. </summary>
        /// <param name="trainingFile"></param>
        /// <param name="validationFile"></param>
        /// <param name="model"></param>
        /// <param name="nEpochs"></param>
        /// <param name="batchSize"></param>
        /// <param name="learningRateMultiplier"></param>
        /// <param name="promptLossRate"></param>
        /// <param name="computeClassificationMetrics"></param>
        /// <param name="classificationNClasses"></param>
        /// <param name="classificationPositiveClass"></param>
        /// <param name="classificationBetas"></param>
        /// <param name="suffix"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CreateFineTuneRequest(string trainingFile, string validationFile, CreateFineTuneRequestModel? model, long? nEpochs, long? batchSize, double? learningRateMultiplier, double? promptLossRate, bool? computeClassificationMetrics, long? classificationNClasses, string classificationPositiveClass, IList<double> classificationBetas, string suffix, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            TrainingFile = trainingFile;
            ValidationFile = validationFile;
            Model = model;
            NEpochs = nEpochs;
            BatchSize = batchSize;
            LearningRateMultiplier = learningRateMultiplier;
            PromptLossRate = promptLossRate;
            ComputeClassificationMetrics = computeClassificationMetrics;
            ClassificationNClasses = classificationNClasses;
            ClassificationPositiveClass = classificationPositiveClass;
            ClassificationBetas = classificationBetas;
            Suffix = suffix;
            SerializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CreateFineTuneRequest"/> for deserialization. </summary>
        internal CreateFineTuneRequest()
        {
        }

        /// <summary> Gets the training file. </summary>
        public string TrainingFile { get; }
        /// <summary> Gets or sets the validation file. </summary>
        public string ValidationFile { get; set; }
        /// <summary> Gets or sets the model. </summary>
        public CreateFineTuneRequestModel? Model { get; set; }
        /// <summary> Gets or sets the n epochs. </summary>
        public long? NEpochs { get; set; }
        /// <summary> Gets or sets the batch size. </summary>
        public long? BatchSize { get; set; }
        /// <summary> Gets or sets the learning rate multiplier. </summary>
        public double? LearningRateMultiplier { get; set; }
        /// <summary> Gets or sets the prompt loss rate. </summary>
        public double? PromptLossRate { get; set; }
        /// <summary> Gets or sets the compute classification metrics. </summary>
        public bool? ComputeClassificationMetrics { get; set; }
        /// <summary> Gets or sets the classification n classes. </summary>
        public long? ClassificationNClasses { get; set; }
        /// <summary> Gets or sets the classification positive class. </summary>
        public string ClassificationPositiveClass { get; set; }
        /// <summary> Gets or sets the classification betas. </summary>
        public IList<double> ClassificationBetas { get; set; }
        /// <summary> Gets or sets the suffix. </summary>
        public string Suffix { get; set; }
    }
}
