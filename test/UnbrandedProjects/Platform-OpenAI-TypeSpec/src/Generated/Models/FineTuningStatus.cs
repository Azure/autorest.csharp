// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace OpenAI.Models
{
    /// <summary> fine tuning status. </summary>
    public readonly partial struct FineTuningStatus : IEquatable<FineTuningStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FineTuningStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FineTuningStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CreatedValue = "created";
        private const string PendingValue = "pending";
        private const string RunningValue = "running";
        private const string SucceededValue = "succeeded";
        private const string FailedValue = "failed";
        private const string CancelledValue = "cancelled";

        /// <summary> created. </summary>
        public static FineTuningStatus Created { get; } = new FineTuningStatus(CreatedValue);
        /// <summary> pending. </summary>
        public static FineTuningStatus Pending { get; } = new FineTuningStatus(PendingValue);
        /// <summary> running. </summary>
        public static FineTuningStatus Running { get; } = new FineTuningStatus(RunningValue);
        /// <summary> succeeded. </summary>
        public static FineTuningStatus Succeeded { get; } = new FineTuningStatus(SucceededValue);
        /// <summary> failed. </summary>
        public static FineTuningStatus Failed { get; } = new FineTuningStatus(FailedValue);
        /// <summary> cancelled. </summary>
        public static FineTuningStatus Cancelled { get; } = new FineTuningStatus(CancelledValue);
        /// <summary> Determines if two <see cref="FineTuningStatus"/> values are the same. </summary>
        public static bool operator ==(FineTuningStatus left, FineTuningStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FineTuningStatus"/> values are not the same. </summary>
        public static bool operator !=(FineTuningStatus left, FineTuningStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FineTuningStatus"/>. </summary>
        public static implicit operator FineTuningStatus(string value) => new FineTuningStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FineTuningStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FineTuningStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
