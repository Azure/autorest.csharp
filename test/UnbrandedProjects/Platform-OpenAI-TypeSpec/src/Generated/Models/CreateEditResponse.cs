// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace OpenAI.Models
{
    /// <summary> The CreateEditResponse. </summary>
    [Obsolete("deprecated")]
    public partial class CreateEditResponse
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        internal IDictionary<string, BinaryData> SerializedAdditionalRawData { get; set; }
        /// <summary> Initializes a new instance of <see cref="CreateEditResponse"/>. </summary>
        /// <param name="created"></param>
        /// <param name="choices"></param>
        /// <param name="usage"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="choices"/> or <paramref name="usage"/> is null. </exception>
        internal CreateEditResponse(DateTimeOffset created, IEnumerable<CreateEditResponseChoice> choices, CompletionUsage usage)
        {
            Argument.AssertNotNull(choices, nameof(choices));
            Argument.AssertNotNull(usage, nameof(usage));

            Created = created;
            Choices = choices.ToList();
            Usage = usage;
        }

        /// <summary> Initializes a new instance of <see cref="CreateEditResponse"/>. </summary>
        /// <param name="object"></param>
        /// <param name="created"></param>
        /// <param name="choices"></param>
        /// <param name="usage"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CreateEditResponse(CreateEditResponseObject @object, DateTimeOffset created, IReadOnlyList<CreateEditResponseChoice> choices, CompletionUsage usage, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Object = @object;
            Created = created;
            Choices = choices;
            Usage = usage;
            SerializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CreateEditResponse"/> for deserialization. </summary>
        internal CreateEditResponse()
        {
        }

        /// <summary> Gets the object. </summary>
        public CreateEditResponseObject Object { get; } = CreateEditResponseObject.Edit;

        /// <summary> Gets the created. </summary>
        public DateTimeOffset Created { get; }
        /// <summary> Gets the choices. </summary>
        public IReadOnlyList<CreateEditResponseChoice> Choices { get; }
        /// <summary> Gets the usage. </summary>
        public CompletionUsage Usage { get; }
    }
}
