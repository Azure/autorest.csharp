// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace OpenAI.Models
{
    /// <summary> The CreateChatCompletionRequest. </summary>
    internal partial class CreateChatCompletionRequest
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        internal IDictionary<string, BinaryData> SerializedAdditionalRawData { get; set; }
        /// <summary> Initializes a new instance of <see cref="CreateChatCompletionRequest"/>. </summary>
        /// <param name="model"></param>
        /// <param name="messages"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="messages"/> is null. </exception>
        internal CreateChatCompletionRequest(CreateChatCompletionRequestModel model, IEnumerable<ChatCompletionRequestMessage> messages)
        {
            Argument.AssertNotNull(messages, nameof(messages));

            Model = model;
            Messages = messages.ToList();
            Functions = new ChangeTrackingList<ChatCompletionFunctions>();
            LogitBias = new ChangeTrackingDictionary<string, long>();
        }

        /// <summary> Initializes a new instance of <see cref="CreateChatCompletionRequest"/>. </summary>
        /// <param name="model"></param>
        /// <param name="messages"></param>
        /// <param name="functions"></param>
        /// <param name="functionCall"></param>
        /// <param name="temperature"></param>
        /// <param name="topP"></param>
        /// <param name="n"></param>
        /// <param name="maxTokens"></param>
        /// <param name="stop"></param>
        /// <param name="presencePenalty"></param>
        /// <param name="frequencyPenalty"></param>
        /// <param name="logitBias"></param>
        /// <param name="user"></param>
        /// <param name="stream"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CreateChatCompletionRequest(CreateChatCompletionRequestModel model, IReadOnlyList<ChatCompletionRequestMessage> messages, IReadOnlyList<ChatCompletionFunctions> functions, BinaryData functionCall, double? temperature, double? topP, long? n, long? maxTokens, BinaryData stop, double? presencePenalty, double? frequencyPenalty, IReadOnlyDictionary<string, long> logitBias, string user, bool? stream, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Model = model;
            Messages = messages;
            Functions = functions;
            FunctionCall = functionCall;
            Temperature = temperature;
            TopP = topP;
            N = n;
            MaxTokens = maxTokens;
            Stop = stop;
            PresencePenalty = presencePenalty;
            FrequencyPenalty = frequencyPenalty;
            LogitBias = logitBias;
            User = user;
            Stream = stream;
            SerializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CreateChatCompletionRequest"/> for deserialization. </summary>
        internal CreateChatCompletionRequest()
        {
        }

        /// <summary> Gets the model. </summary>
        public CreateChatCompletionRequestModel Model { get; }
        /// <summary> Gets the messages. </summary>
        public IReadOnlyList<ChatCompletionRequestMessage> Messages { get; }
        /// <summary> Gets the functions. </summary>
        public IReadOnlyList<ChatCompletionFunctions> Functions { get; }
        /// <summary>
        /// Gets the function call
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description>"none"</description>
        /// </item>
        /// <item>
        /// <description>"auto"</description>
        /// </item>
        /// <item>
        /// <description><see cref="ChatCompletionFunctionCallOption"/></description>
        /// </item>
        /// </list>
        /// </remarks>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData FunctionCall { get; }
        /// <summary> Gets the temperature. </summary>
        public double? Temperature { get; }
        /// <summary> Gets the top p. </summary>
        public double? TopP { get; }
        /// <summary> Gets the n. </summary>
        public long? N { get; }
        /// <summary> Gets the max tokens. </summary>
        public long? MaxTokens { get; }
        /// <summary>
        /// Gets the stop
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// <remarks>
        /// Supported types:
        /// <list type="bullet">
        /// <item>
        /// <description><see cref="string"/></description>
        /// </item>
        /// <item>
        /// <description><see cref="IList{T}"/> where <c>T</c> is of type <see cref="string"/></description>
        /// </item>
        /// </list>
        /// </remarks>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Stop { get; }
        /// <summary> Gets the presence penalty. </summary>
        public double? PresencePenalty { get; }
        /// <summary> Gets the frequency penalty. </summary>
        public double? FrequencyPenalty { get; }
        /// <summary> Gets the logit bias. </summary>
        public IReadOnlyDictionary<string, long> LogitBias { get; }
        /// <summary> Gets the user. </summary>
        public string User { get; }
        /// <summary> Gets the stream. </summary>
        public bool? Stream { get; }
    }
}
