// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace OpenAI.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class OpenAIModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.CreateModerationRequest"/>. </summary>
        /// <param name="input"></param>
        /// <param name="model"></param>
        /// <returns> A new <see cref="Models.CreateModerationRequest"/> instance for mocking. </returns>
        public static CreateModerationRequest CreateModerationRequest(BinaryData input = null, CreateModerationRequestModel? model = null)
        {
            return new CreateModerationRequest(input, model, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateModerationResponse"/>. </summary>
        /// <param name="id"></param>
        /// <param name="model"></param>
        /// <param name="results"></param>
        /// <returns> A new <see cref="Models.CreateModerationResponse"/> instance for mocking. </returns>
        public static CreateModerationResponse CreateModerationResponse(string id = null, string model = null, IEnumerable<CreateModerationResponseResult> results = null)
        {
            results ??= new List<CreateModerationResponseResult>();

            return new CreateModerationResponse(id, model, results?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateModerationResponseResult"/>. </summary>
        /// <param name="flagged"></param>
        /// <param name="categories"></param>
        /// <param name="categoryScores"></param>
        /// <returns> A new <see cref="Models.CreateModerationResponseResult"/> instance for mocking. </returns>
        public static CreateModerationResponseResult CreateModerationResponseResult(bool flagged = default, CreateModerationResponseResultCategories categories = null, CreateModerationResponseResultCategoryScores categoryScores = null)
        {
            return new CreateModerationResponseResult(flagged, categories, categoryScores, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateModerationResponseResultCategories"/>. </summary>
        /// <param name="hate"></param>
        /// <param name="hateThreatening"></param>
        /// <param name="harassment"></param>
        /// <param name="harassmentThreatening"></param>
        /// <param name="selfHarm"></param>
        /// <param name="selfHarmIntent"></param>
        /// <param name="selfHarmInstructive"></param>
        /// <param name="sexual"></param>
        /// <param name="sexualMinors"></param>
        /// <param name="violence"></param>
        /// <param name="violenceGraphic"></param>
        /// <returns> A new <see cref="Models.CreateModerationResponseResultCategories"/> instance for mocking. </returns>
        public static CreateModerationResponseResultCategories CreateModerationResponseResultCategories(bool hate = default, bool hateThreatening = default, bool harassment = default, bool harassmentThreatening = default, bool selfHarm = default, bool selfHarmIntent = default, bool selfHarmInstructive = default, bool sexual = default, bool sexualMinors = default, bool violence = default, bool violenceGraphic = default)
        {
            return new CreateModerationResponseResultCategories(
                hate,
                hateThreatening,
                harassment,
                harassmentThreatening,
                selfHarm,
                selfHarmIntent,
                selfHarmInstructive,
                sexual,
                sexualMinors,
                violence,
                violenceGraphic,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateModerationResponseResultCategoryScores"/>. </summary>
        /// <param name="hate"></param>
        /// <param name="hateThreatening"></param>
        /// <param name="harassment"></param>
        /// <param name="harassmentThreatening"></param>
        /// <param name="selfHarm"></param>
        /// <param name="selfHarmIntent"></param>
        /// <param name="selfHarmInstructive"></param>
        /// <param name="sexual"></param>
        /// <param name="sexualMinors"></param>
        /// <param name="violence"></param>
        /// <param name="violenceGraphic"></param>
        /// <returns> A new <see cref="Models.CreateModerationResponseResultCategoryScores"/> instance for mocking. </returns>
        public static CreateModerationResponseResultCategoryScores CreateModerationResponseResultCategoryScores(double hate = default, double hateThreatening = default, double harassment = default, double harassmentThreatening = default, double selfHarm = default, double selfHarmIntent = default, double selfHarmInstructive = default, double sexual = default, double sexualMinors = default, double violence = default, double violenceGraphic = default)
        {
            return new CreateModerationResponseResultCategoryScores(
                hate,
                hateThreatening,
                harassment,
                harassmentThreatening,
                selfHarm,
                selfHarmIntent,
                selfHarmInstructive,
                sexual,
                sexualMinors,
                violence,
                violenceGraphic,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateImageRequest"/>. </summary>
        /// <param name="prompt"></param>
        /// <param name="n"></param>
        /// <param name="size"></param>
        /// <param name="responseFormat"></param>
        /// <param name="user"></param>
        /// <returns> A new <see cref="Models.CreateImageRequest"/> instance for mocking. </returns>
        public static CreateImageRequest CreateImageRequest(string prompt = null, long? n = null, CreateImageRequestSize? size = null, CreateImageRequestResponseFormat? responseFormat = null, string user = null)
        {
            return new CreateImageRequest(
                prompt,
                n,
                size,
                responseFormat,
                user,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ImagesResponse"/>. </summary>
        /// <param name="created"></param>
        /// <param name="data"></param>
        /// <returns> A new <see cref="Models.ImagesResponse"/> instance for mocking. </returns>
        public static ImagesResponse ImagesResponse(DateTimeOffset created = default, IEnumerable<Image> data = null)
        {
            data ??= new List<Image>();

            return new ImagesResponse(created, data?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Image"/>. </summary>
        /// <param name="url"></param>
        /// <param name="b64Json"></param>
        /// <returns> A new <see cref="Models.Image"/> instance for mocking. </returns>
        public static Image Image(Uri url = null, BinaryData b64Json = null)
        {
            return new Image(url, b64Json, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateImageEditRequest"/>. </summary>
        /// <param name="prompt"></param>
        /// <param name="image"></param>
        /// <param name="mask"></param>
        /// <param name="n"></param>
        /// <param name="size"></param>
        /// <param name="responseFormat"></param>
        /// <param name="user"></param>
        /// <returns> A new <see cref="Models.CreateImageEditRequest"/> instance for mocking. </returns>
        public static CreateImageEditRequest CreateImageEditRequest(string prompt = null, Stream image = null, Stream mask = null, long? n = null, CreateImageRequestSize? size = null, CreateImageRequestResponseFormat? responseFormat = null, string user = null)
        {
            return new CreateImageEditRequest(
                prompt,
                image,
                mask,
                n,
                size,
                responseFormat,
                user,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateImageVariationRequest"/>. </summary>
        /// <param name="image"></param>
        /// <param name="n"></param>
        /// <param name="size"></param>
        /// <param name="responseFormat"></param>
        /// <param name="user"></param>
        /// <returns> A new <see cref="Models.CreateImageVariationRequest"/> instance for mocking. </returns>
        public static CreateImageVariationRequest CreateImageVariationRequest(Stream image = null, long? n = null, CreateImageRequestSize? size = null, CreateImageRequestResponseFormat? responseFormat = null, string user = null)
        {
            return new CreateImageVariationRequest(
                image,
                n,
                size,
                responseFormat,
                user,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ListModelsResponse"/>. </summary>
        /// <param name="object"></param>
        /// <param name="data"></param>
        /// <returns> A new <see cref="Models.ListModelsResponse"/> instance for mocking. </returns>
        public static ListModelsResponse ListModelsResponse(string @object = null, IEnumerable<Model> data = null)
        {
            data ??= new List<Model>();

            return new ListModelsResponse(@object, data?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Model"/>. </summary>
        /// <param name="id"></param>
        /// <param name="object"></param>
        /// <param name="created"></param>
        /// <param name="ownedBy"></param>
        /// <returns> A new <see cref="Models.Model"/> instance for mocking. </returns>
        public static Model Model(string id = null, ModelObject @object = default, DateTimeOffset created = default, string ownedBy = null)
        {
            return new Model(id, @object, created, ownedBy, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeleteModelResponse"/>. </summary>
        /// <param name="id"></param>
        /// <param name="object"></param>
        /// <param name="deleted"></param>
        /// <returns> A new <see cref="Models.DeleteModelResponse"/> instance for mocking. </returns>
        public static DeleteModelResponse DeleteModelResponse(string id = null, string @object = null, bool deleted = default)
        {
            return new DeleteModelResponse(id, @object, deleted, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateFineTuneRequest"/>. </summary>
        /// <param name="trainingFile"></param>
        /// <param name="validationFile"></param>
        /// <param name="model"></param>
        /// <param name="nEpochs"></param>
        /// <param name="batchSize"></param>
        /// <param name="learningRateMultiplier"></param>
        /// <param name="promptLossRate"></param>
        /// <param name="computeClassificationMetrics"></param>
        /// <param name="classificationNClasses"></param>
        /// <param name="classificationPositiveClass"></param>
        /// <param name="classificationBetas"></param>
        /// <param name="suffix"></param>
        /// <returns> A new <see cref="Models.CreateFineTuneRequest"/> instance for mocking. </returns>
        public static CreateFineTuneRequest CreateFineTuneRequest(string trainingFile = null, string validationFile = null, CreateFineTuneRequestModel? model = null, long? nEpochs = null, long? batchSize = null, double? learningRateMultiplier = null, double? promptLossRate = null, bool? computeClassificationMetrics = null, long? classificationNClasses = null, string classificationPositiveClass = null, IEnumerable<double> classificationBetas = null, string suffix = null)
        {
            classificationBetas ??= new List<double>();

            return new CreateFineTuneRequest(
                trainingFile,
                validationFile,
                model,
                nEpochs,
                batchSize,
                learningRateMultiplier,
                promptLossRate,
                computeClassificationMetrics,
                classificationNClasses,
                classificationPositiveClass,
                classificationBetas?.ToList(),
                suffix,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FineTune"/>. </summary>
        /// <param name="id"></param>
        /// <param name="object"></param>
        /// <param name="createdAt"></param>
        /// <param name="updatedAt"></param>
        /// <param name="model"></param>
        /// <param name="fineTunedModel"></param>
        /// <param name="organizationId"></param>
        /// <param name="status"></param>
        /// <param name="hyperparams"></param>
        /// <param name="trainingFiles"></param>
        /// <param name="validationFiles"></param>
        /// <param name="resultFiles"></param>
        /// <param name="events"></param>
        /// <returns> A new <see cref="Models.FineTune"/> instance for mocking. </returns>
        public static FineTune FineTune(string id = null, FineTuneObject @object = default, DateTimeOffset createdAt = default, DateTimeOffset updatedAt = default, string model = null, string fineTunedModel = null, string organizationId = null, FineTuneStatus status = default, FineTuneHyperparams hyperparams = null, IEnumerable<OpenAIFile> trainingFiles = null, IEnumerable<OpenAIFile> validationFiles = null, IEnumerable<OpenAIFile> resultFiles = null, IEnumerable<FineTuneEvent> events = null)
        {
            trainingFiles ??= new List<OpenAIFile>();
            validationFiles ??= new List<OpenAIFile>();
            resultFiles ??= new List<OpenAIFile>();
            events ??= new List<FineTuneEvent>();

            return new FineTune(
                id,
                @object,
                createdAt,
                updatedAt,
                model,
                fineTunedModel,
                organizationId,
                status,
                hyperparams,
                trainingFiles?.ToList(),
                validationFiles?.ToList(),
                resultFiles?.ToList(),
                events?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FineTuneHyperparams"/>. </summary>
        /// <param name="nEpochs"></param>
        /// <param name="batchSize"></param>
        /// <param name="promptLossWeight"></param>
        /// <param name="learningRateMultiplier"></param>
        /// <param name="computeClassificationMetrics"></param>
        /// <param name="classificationPositiveClass"></param>
        /// <param name="classificationNClasses"></param>
        /// <returns> A new <see cref="Models.FineTuneHyperparams"/> instance for mocking. </returns>
        public static FineTuneHyperparams FineTuneHyperparams(long nEpochs = default, long batchSize = default, double promptLossWeight = default, double learningRateMultiplier = default, bool? computeClassificationMetrics = null, string classificationPositiveClass = null, long? classificationNClasses = null)
        {
            return new FineTuneHyperparams(
                nEpochs,
                batchSize,
                promptLossWeight,
                learningRateMultiplier,
                computeClassificationMetrics,
                classificationPositiveClass,
                classificationNClasses,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OpenAIFile"/>. </summary>
        /// <param name="id"></param>
        /// <param name="object"></param>
        /// <param name="bytes"></param>
        /// <param name="createdAt"></param>
        /// <param name="filename"></param>
        /// <param name="purpose"></param>
        /// <param name="status"></param>
        /// <param name="statusDetails"></param>
        /// <returns> A new <see cref="Models.OpenAIFile"/> instance for mocking. </returns>
        public static OpenAIFile OpenAIFile(string id = null, OpenAIFileObject @object = default, long bytes = default, DateTimeOffset createdAt = default, string filename = null, string purpose = null, OpenAIFileStatus status = default, string statusDetails = null)
        {
            return new OpenAIFile(
                id,
                @object,
                bytes,
                createdAt,
                filename,
                purpose,
                status,
                statusDetails,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FineTuneEvent"/>. </summary>
        /// <param name="object"></param>
        /// <param name="createdAt"></param>
        /// <param name="level"></param>
        /// <param name="message"></param>
        /// <returns> A new <see cref="Models.FineTuneEvent"/> instance for mocking. </returns>
        public static FineTuneEvent FineTuneEvent(string @object = null, DateTimeOffset createdAt = default, string level = null, string message = null)
        {
            return new FineTuneEvent(@object, createdAt, level, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ListFineTunesResponse"/>. </summary>
        /// <param name="object"></param>
        /// <param name="data"></param>
        /// <returns> A new <see cref="Models.ListFineTunesResponse"/> instance for mocking. </returns>
        public static ListFineTunesResponse ListFineTunesResponse(string @object = null, IEnumerable<FineTune> data = null)
        {
            data ??= new List<FineTune>();

            return new ListFineTunesResponse(@object, data?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ListFineTuneEventsResponse"/>. </summary>
        /// <param name="object"></param>
        /// <param name="data"></param>
        /// <returns> A new <see cref="Models.ListFineTuneEventsResponse"/> instance for mocking. </returns>
        public static ListFineTuneEventsResponse ListFineTuneEventsResponse(string @object = null, IEnumerable<FineTuneEvent> data = null)
        {
            data ??= new List<FineTuneEvent>();

            return new ListFineTuneEventsResponse(@object, data?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ListFilesResponse"/>. </summary>
        /// <param name="object"></param>
        /// <param name="data"></param>
        /// <returns> A new <see cref="Models.ListFilesResponse"/> instance for mocking. </returns>
        public static ListFilesResponse ListFilesResponse(string @object = null, IEnumerable<OpenAIFile> data = null)
        {
            data ??= new List<OpenAIFile>();

            return new ListFilesResponse(@object, data?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeleteFileResponse"/>. </summary>
        /// <param name="id"></param>
        /// <param name="object"></param>
        /// <param name="deleted"></param>
        /// <returns> A new <see cref="Models.DeleteFileResponse"/> instance for mocking. </returns>
        public static DeleteFileResponse DeleteFileResponse(string id = null, string @object = null, bool deleted = default)
        {
            return new DeleteFileResponse(id, @object, deleted, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateEmbeddingRequest"/>. </summary>
        /// <param name="model"></param>
        /// <param name="input"></param>
        /// <param name="user"></param>
        /// <returns> A new <see cref="Models.CreateEmbeddingRequest"/> instance for mocking. </returns>
        public static CreateEmbeddingRequest CreateEmbeddingRequest(CreateEmbeddingRequestModel model = default, BinaryData input = null, string user = null)
        {
            return new CreateEmbeddingRequest(model, input, user, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateEmbeddingResponse"/>. </summary>
        /// <param name="object"></param>
        /// <param name="model"></param>
        /// <param name="data"></param>
        /// <param name="usage"></param>
        /// <returns> A new <see cref="Models.CreateEmbeddingResponse"/> instance for mocking. </returns>
        public static CreateEmbeddingResponse CreateEmbeddingResponse(CreateEmbeddingResponseObject @object = default, string model = null, IEnumerable<Embedding> data = null, CreateEmbeddingResponseUsage usage = null)
        {
            data ??= new List<Embedding>();

            return new CreateEmbeddingResponse(@object, model, data?.ToList(), usage, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Embedding"/>. </summary>
        /// <param name="index"></param>
        /// <param name="object"></param>
        /// <param name="embeddingProperty"></param>
        /// <returns> A new <see cref="Models.Embedding"/> instance for mocking. </returns>
        public static Embedding Embedding(long index = default, EmbeddingObject @object = default, IEnumerable<double> embeddingProperty = null)
        {
            embeddingProperty ??= new List<double>();

            return new Embedding(index, @object, embeddingProperty?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateEmbeddingResponseUsage"/>. </summary>
        /// <param name="promptTokens"></param>
        /// <param name="totalTokens"></param>
        /// <returns> A new <see cref="Models.CreateEmbeddingResponseUsage"/> instance for mocking. </returns>
        public static CreateEmbeddingResponseUsage CreateEmbeddingResponseUsage(long promptTokens = default, long totalTokens = default)
        {
            return new CreateEmbeddingResponseUsage(promptTokens, totalTokens, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateEditRequest"/>. </summary>
        /// <param name="model"></param>
        /// <param name="input"></param>
        /// <param name="instruction"></param>
        /// <param name="n"></param>
        /// <param name="temperature"></param>
        /// <param name="topP"></param>
        /// <returns> A new <see cref="Models.CreateEditRequest"/> instance for mocking. </returns>
        public static CreateEditRequest CreateEditRequest(CreateEditRequestModel model = default, string input = null, string instruction = null, long? n = null, double? temperature = null, double? topP = null)
        {
            return new CreateEditRequest(
                model,
                input,
                instruction,
                n,
                temperature,
                topP,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateEditResponse"/>. </summary>
        /// <param name="object"></param>
        /// <param name="created"></param>
        /// <param name="choices"></param>
        /// <param name="usage"></param>
        /// <returns> A new <see cref="Models.CreateEditResponse"/> instance for mocking. </returns>
        public static CreateEditResponse CreateEditResponse(CreateEditResponseObject @object = default, DateTimeOffset created = default, IEnumerable<CreateEditResponseChoice> choices = null, CompletionUsage usage = null)
        {
            choices ??= new List<CreateEditResponseChoice>();

            return new CreateEditResponse(@object, created, choices?.ToList(), usage, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateEditResponseChoice"/>. </summary>
        /// <param name="text"></param>
        /// <param name="index"></param>
        /// <param name="finishReason"></param>
        /// <returns> A new <see cref="Models.CreateEditResponseChoice"/> instance for mocking. </returns>
        public static CreateEditResponseChoice CreateEditResponseChoice(string text = null, long index = default, CreateEditResponseChoiceFinishReason finishReason = default)
        {
            return new CreateEditResponseChoice(text, index, finishReason, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CompletionUsage"/>. </summary>
        /// <param name="promptTokens"></param>
        /// <param name="completionTokens"></param>
        /// <param name="totalTokens"></param>
        /// <returns> A new <see cref="Models.CompletionUsage"/> instance for mocking. </returns>
        public static CompletionUsage CompletionUsage(long promptTokens = default, long completionTokens = default, long totalTokens = default)
        {
            return new CompletionUsage(promptTokens, completionTokens, totalTokens, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateCompletionResponse"/>. </summary>
        /// <param name="id"></param>
        /// <param name="object"></param>
        /// <param name="created"></param>
        /// <param name="model"></param>
        /// <param name="choices"></param>
        /// <param name="usage"></param>
        /// <returns> A new <see cref="Models.CreateCompletionResponse"/> instance for mocking. </returns>
        public static CreateCompletionResponse CreateCompletionResponse(string id = null, string @object = null, DateTimeOffset created = default, string model = null, IEnumerable<CreateCompletionResponseChoice> choices = null, CompletionUsage usage = null)
        {
            choices ??= new List<CreateCompletionResponseChoice>();

            return new CreateCompletionResponse(
                id,
                @object,
                created,
                model,
                choices?.ToList(),
                usage,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateCompletionResponseChoice"/>. </summary>
        /// <param name="index"></param>
        /// <param name="text"></param>
        /// <param name="logprobs"></param>
        /// <param name="finishReason"></param>
        /// <returns> A new <see cref="Models.CreateCompletionResponseChoice"/> instance for mocking. </returns>
        public static CreateCompletionResponseChoice CreateCompletionResponseChoice(long index = default, string text = null, CreateCompletionResponseChoiceLogprobs logprobs = null, CreateCompletionResponseChoiceFinishReason finishReason = default)
        {
            return new CreateCompletionResponseChoice(index, text, logprobs, finishReason, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateCompletionResponseChoiceLogprobs"/>. </summary>
        /// <param name="tokens"></param>
        /// <param name="tokenLogprobs"></param>
        /// <param name="topLogprobs"></param>
        /// <param name="textOffset"></param>
        /// <returns> A new <see cref="Models.CreateCompletionResponseChoiceLogprobs"/> instance for mocking. </returns>
        public static CreateCompletionResponseChoiceLogprobs CreateCompletionResponseChoiceLogprobs(IEnumerable<string> tokens = null, IEnumerable<double> tokenLogprobs = null, IEnumerable<IDictionary<string, long>> topLogprobs = null, IEnumerable<long> textOffset = null)
        {
            tokens ??= new List<string>();
            tokenLogprobs ??= new List<double>();
            topLogprobs ??= new List<IDictionary<string, long>>();
            textOffset ??= new List<long>();

            return new CreateCompletionResponseChoiceLogprobs(tokens?.ToList(), tokenLogprobs?.ToList(), topLogprobs?.ToList(), textOffset?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateFineTuningJobRequest"/>. </summary>
        /// <param name="trainingFile"></param>
        /// <param name="validationFile"></param>
        /// <param name="model"></param>
        /// <param name="hyperparameters"></param>
        /// <param name="suffix"></param>
        /// <returns> A new <see cref="Models.CreateFineTuningJobRequest"/> instance for mocking. </returns>
        public static CreateFineTuningJobRequest CreateFineTuningJobRequest(string trainingFile = null, string validationFile = null, CreateFineTuningJobRequestModel model = default, CreateFineTuningJobRequestHyperparameters hyperparameters = null, string suffix = null)
        {
            return new CreateFineTuningJobRequest(
                trainingFile,
                validationFile,
                model,
                hyperparameters,
                suffix,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FineTuningJob"/>. </summary>
        /// <param name="id"></param>
        /// <param name="object"></param>
        /// <param name="createdAt"></param>
        /// <param name="finishedAt"></param>
        /// <param name="model"></param>
        /// <param name="fineTunedModel"></param>
        /// <param name="organizationId"></param>
        /// <param name="status"></param>
        /// <param name="hyperparameters"></param>
        /// <param name="trainingFile"></param>
        /// <param name="validationFile"></param>
        /// <param name="resultFiles"></param>
        /// <param name="trainedTokens"></param>
        /// <param name="error"></param>
        /// <returns> A new <see cref="Models.FineTuningJob"/> instance for mocking. </returns>
        public static FineTuningJob FineTuningJob(string id = null, FineTuningJobObject @object = default, DateTimeOffset createdAt = default, DateTimeOffset? finishedAt = null, string model = null, string fineTunedModel = null, string organizationId = null, FineTuningJobStatus status = default, FineTuningJobHyperparameters hyperparameters = null, string trainingFile = null, string validationFile = null, IEnumerable<string> resultFiles = null, long? trainedTokens = null, FineTuningJobError error = null)
        {
            resultFiles ??= new List<string>();

            return new FineTuningJob(
                id,
                @object,
                createdAt,
                finishedAt,
                model,
                fineTunedModel,
                organizationId,
                status,
                hyperparameters,
                trainingFile,
                validationFile,
                resultFiles?.ToList(),
                trainedTokens,
                error,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FineTuningJobHyperparameters"/>. </summary>
        /// <param name="nEpochs"></param>
        /// <returns> A new <see cref="Models.FineTuningJobHyperparameters"/> instance for mocking. </returns>
        public static FineTuningJobHyperparameters FineTuningJobHyperparameters(BinaryData nEpochs = null)
        {
            return new FineTuningJobHyperparameters(nEpochs, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FineTuningJobError"/>. </summary>
        /// <param name="message"></param>
        /// <param name="code"></param>
        /// <param name="param"></param>
        /// <returns> A new <see cref="Models.FineTuningJobError"/> instance for mocking. </returns>
        public static FineTuningJobError FineTuningJobError(string message = null, string code = null, string param = null)
        {
            return new FineTuningJobError(message, code, param, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ListPaginatedFineTuningJobsResponse"/>. </summary>
        /// <param name="object"></param>
        /// <param name="data"></param>
        /// <param name="hasMore"></param>
        /// <returns> A new <see cref="Models.ListPaginatedFineTuningJobsResponse"/> instance for mocking. </returns>
        public static ListPaginatedFineTuningJobsResponse ListPaginatedFineTuningJobsResponse(string @object = null, IEnumerable<FineTuningJob> data = null, bool hasMore = default)
        {
            data ??= new List<FineTuningJob>();

            return new ListPaginatedFineTuningJobsResponse(@object, data?.ToList(), hasMore, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ListFineTuningJobEventsResponse"/>. </summary>
        /// <param name="object"></param>
        /// <param name="data"></param>
        /// <returns> A new <see cref="Models.ListFineTuningJobEventsResponse"/> instance for mocking. </returns>
        public static ListFineTuningJobEventsResponse ListFineTuningJobEventsResponse(string @object = null, IEnumerable<FineTuningJobEvent> data = null)
        {
            data ??= new List<FineTuningJobEvent>();

            return new ListFineTuningJobEventsResponse(@object, data?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FineTuningJobEvent"/>. </summary>
        /// <param name="id"></param>
        /// <param name="object"></param>
        /// <param name="createdAt"></param>
        /// <param name="level"></param>
        /// <param name="message"></param>
        /// <returns> A new <see cref="Models.FineTuningJobEvent"/> instance for mocking. </returns>
        public static FineTuningJobEvent FineTuningJobEvent(string id = null, string @object = null, DateTimeOffset createdAt = default, FineTuningJobEventLevel level = default, string message = null)
        {
            return new FineTuningJobEvent(
                id,
                @object,
                createdAt,
                level,
                message,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ChatCompletionRequestMessage"/>. </summary>
        /// <param name="role"></param>
        /// <param name="content"></param>
        /// <param name="name"></param>
        /// <param name="functionCall"></param>
        /// <returns> A new <see cref="Models.ChatCompletionRequestMessage"/> instance for mocking. </returns>
        public static ChatCompletionRequestMessage ChatCompletionRequestMessage(ChatCompletionRequestMessageRole role = default, string content = null, string name = null, ChatCompletionRequestMessageFunctionCall functionCall = null)
        {
            return new ChatCompletionRequestMessage(role, content, name, functionCall, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ChatCompletionFunctions"/>. </summary>
        /// <param name="name"></param>
        /// <param name="description"></param>
        /// <param name="parameters"></param>
        /// <returns> A new <see cref="Models.ChatCompletionFunctions"/> instance for mocking. </returns>
        public static ChatCompletionFunctions ChatCompletionFunctions(string name = null, string description = null, ChatCompletionFunctionParameters parameters = null)
        {
            return new ChatCompletionFunctions(name, description, parameters, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateChatCompletionResponse"/>. </summary>
        /// <param name="id"></param>
        /// <param name="object"></param>
        /// <param name="created"></param>
        /// <param name="model"></param>
        /// <param name="choices"></param>
        /// <param name="usage"></param>
        /// <returns> A new <see cref="Models.CreateChatCompletionResponse"/> instance for mocking. </returns>
        public static CreateChatCompletionResponse CreateChatCompletionResponse(string id = null, string @object = null, DateTimeOffset created = default, string model = null, IEnumerable<CreateChatCompletionResponseChoice> choices = null, CompletionUsage usage = null)
        {
            choices ??= new List<CreateChatCompletionResponseChoice>();

            return new CreateChatCompletionResponse(
                id,
                @object,
                created,
                model,
                choices?.ToList(),
                usage,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateChatCompletionResponseChoice"/>. </summary>
        /// <param name="index"></param>
        /// <param name="message"></param>
        /// <param name="finishReason"></param>
        /// <returns> A new <see cref="Models.CreateChatCompletionResponseChoice"/> instance for mocking. </returns>
        public static CreateChatCompletionResponseChoice CreateChatCompletionResponseChoice(long index = default, ChatCompletionResponseMessage message = null, CreateChatCompletionResponseChoiceFinishReason finishReason = default)
        {
            return new CreateChatCompletionResponseChoice(index, message, finishReason, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ChatCompletionResponseMessage"/>. </summary>
        /// <param name="role"></param>
        /// <param name="content"></param>
        /// <param name="functionCall"></param>
        /// <returns> A new <see cref="Models.ChatCompletionResponseMessage"/> instance for mocking. </returns>
        public static ChatCompletionResponseMessage ChatCompletionResponseMessage(ChatCompletionResponseMessageRole role = default, string content = null, ChatCompletionResponseMessageFunctionCall functionCall = null)
        {
            return new ChatCompletionResponseMessage(role, content, functionCall, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ChatCompletionResponseMessageFunctionCall"/>. </summary>
        /// <param name="name"></param>
        /// <param name="arguments"></param>
        /// <returns> A new <see cref="Models.ChatCompletionResponseMessageFunctionCall"/> instance for mocking. </returns>
        public static ChatCompletionResponseMessageFunctionCall ChatCompletionResponseMessageFunctionCall(string name = null, string arguments = null)
        {
            return new ChatCompletionResponseMessageFunctionCall(name, arguments, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateTranslationRequest"/>. </summary>
        /// <param name="file"></param>
        /// <param name="model"></param>
        /// <param name="prompt"></param>
        /// <param name="responseFormat"></param>
        /// <param name="temperature"></param>
        /// <returns> A new <see cref="Models.CreateTranslationRequest"/> instance for mocking. </returns>
        public static CreateTranslationRequest CreateTranslationRequest(Stream file = null, CreateTranslationRequestModel model = default, string prompt = null, CreateTranslationRequestResponseFormat? responseFormat = null, double? temperature = null)
        {
            return new CreateTranslationRequest(
                file,
                model,
                prompt,
                responseFormat,
                temperature,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateTranslationResponse"/>. </summary>
        /// <param name="text"></param>
        /// <returns> A new <see cref="Models.CreateTranslationResponse"/> instance for mocking. </returns>
        public static CreateTranslationResponse CreateTranslationResponse(string text = null)
        {
            return new CreateTranslationResponse(text, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateTranscriptionRequest"/>. </summary>
        /// <param name="file"></param>
        /// <param name="model"></param>
        /// <param name="prompt"></param>
        /// <param name="responseFormat"></param>
        /// <param name="temperature"></param>
        /// <param name="language"></param>
        /// <returns> A new <see cref="Models.CreateTranscriptionRequest"/> instance for mocking. </returns>
        public static CreateTranscriptionRequest CreateTranscriptionRequest(Stream file = null, CreateTranscriptionRequestModel model = default, string prompt = null, CreateTranscriptionRequestResponseFormat? responseFormat = null, double? temperature = null, string language = null)
        {
            return new CreateTranscriptionRequest(
                file,
                model,
                prompt,
                responseFormat,
                temperature,
                language,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateTranscriptionResponse"/>. </summary>
        /// <param name="text"></param>
        /// <returns> A new <see cref="Models.CreateTranscriptionResponse"/> instance for mocking. </returns>
        public static CreateTranscriptionResponse CreateTranscriptionResponse(string text = null)
        {
            return new CreateTranscriptionResponse(text, serializedAdditionalRawData: null);
        }
    }
}
