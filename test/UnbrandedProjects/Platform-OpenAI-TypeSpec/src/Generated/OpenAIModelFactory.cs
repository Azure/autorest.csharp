// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace OpenAI.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class OpenAIModelFactory
    {
        /// <summary> Initializes a new instance of CreateTranscriptionResponse. </summary>
        /// <param name="text"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="text"/> is null. </exception>
        /// <returns> A new <see cref="Models.CreateTranscriptionResponse"/> instance for mocking. </returns>
        public static CreateTranscriptionResponse CreateTranscriptionResponse(string text = null)
        {
            if (text == null)
            {
                throw new ArgumentNullException(nameof(text));
            }

            return new CreateTranscriptionResponse(text);
        }

        /// <summary> Initializes a new instance of CreateTranslationResponse. </summary>
        /// <param name="text"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="text"/> is null. </exception>
        /// <returns> A new <see cref="Models.CreateTranslationResponse"/> instance for mocking. </returns>
        public static CreateTranslationResponse CreateTranslationResponse(string text = null)
        {
            if (text == null)
            {
                throw new ArgumentNullException(nameof(text));
            }

            return new CreateTranslationResponse(text);
        }

        /// <summary> Initializes a new instance of CreateChatCompletionResponse. </summary>
        /// <param name="id"> A unique identifier for the chat completion. </param>
        /// <param name="object"> The object type, which is always `chat.completion`. </param>
        /// <param name="created"> The Unix timestamp (in seconds) of when the chat completion was created. </param>
        /// <param name="model"> The model used for the chat completion. </param>
        /// <param name="choices"> A list of chat completion choices. Can be more than one if `n` is greater than 1. </param>
        /// <param name="usage"></param>
        /// <returns> A new <see cref="Models.CreateChatCompletionResponse"/> instance for mocking. </returns>
        public static CreateChatCompletionResponse CreateChatCompletionResponse(string id = null, string @object = null, DateTimeOffset created = default, string model = null, IEnumerable<CreateChoice> choices = null, CompletionUsage usage = null)
        {
            choices ??= new List<CreateChoice>();

            return new CreateChatCompletionResponse(id, @object, created, model, choices?.ToList(), usage);
        }

        /// <summary> Initializes a new instance of CreateChoice. </summary>
        /// <param name="index"> The index of the choice in the list of choices. </param>
        /// <param name="message"></param>
        /// <param name="finishReason">
        /// The reason the model stopped generating tokens. This will be `stop` if the model hit a
        /// natural stop point or a provided stop sequence, `length` if the maximum number of tokens
        /// specified in the request was reached, `content_filter` if the content was omitted due to
        /// a flag from our content filters, or `function_call` if the model called a function.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="message"/> is null. </exception>
        /// <returns> A new <see cref="Models.CreateChoice"/> instance for mocking. </returns>
        public static CreateChoice CreateChoice(long index = default, ChatCompletionResponseMessage message = null, CreateChoiceFinishReason finishReason = default)
        {
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            return new CreateChoice(index, message, finishReason);
        }

        /// <summary> Initializes a new instance of ChatCompletionResponseMessage. </summary>
        /// <param name="role"> The role of the author of this message. </param>
        /// <param name="content"> The contents of the message. </param>
        /// <param name="functionCall"> The name and arguments of a function that should be called, as generated by the model. </param>
        /// <returns> A new <see cref="Models.ChatCompletionResponseMessage"/> instance for mocking. </returns>
        public static ChatCompletionResponseMessage ChatCompletionResponseMessage(ChatCompletionResponseMessageRole role = default, string content = null, CreateChatCompletionResponseFunctionCall functionCall = null)
        {
            return new ChatCompletionResponseMessage(role, content, functionCall);
        }

        /// <summary> Initializes a new instance of CreateChatCompletionResponseFunctionCall. </summary>
        /// <param name="name"> The name of the function to call. </param>
        /// <param name="arguments">
        /// The arguments to call the function with, as generated by the model in JSON format. Note that
        /// the model does not always generate valid JSON, and may hallucinate parameters not defined by
        /// your function schema. Validate the arguments in your code before calling your function.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="arguments"/> is null. </exception>
        /// <returns> A new <see cref="Models.CreateChatCompletionResponseFunctionCall"/> instance for mocking. </returns>
        public static CreateChatCompletionResponseFunctionCall CreateChatCompletionResponseFunctionCall(string name = null, string arguments = null)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (arguments == null)
            {
                throw new ArgumentNullException(nameof(arguments));
            }

            return new CreateChatCompletionResponseFunctionCall(name, arguments);
        }

        /// <summary> Initializes a new instance of CompletionUsage. </summary>
        /// <param name="promptTokens"> Number of tokens in the prompt. </param>
        /// <param name="completionTokens"> Number of tokens in the generated completion. </param>
        /// <param name="totalTokens"> Total number of tokens used in the request (prompt + completion). </param>
        /// <returns> A new <see cref="Models.CompletionUsage"/> instance for mocking. </returns>
        public static CompletionUsage CompletionUsage(long promptTokens = default, long completionTokens = default, long totalTokens = default)
        {
            return new CompletionUsage(promptTokens, completionTokens, totalTokens);
        }

        /// <summary> Initializes a new instance of FineTuningJob. </summary>
        /// <param name="id"> The object identifier, which can be referenced in the API endpoints. </param>
        /// <param name="object"> The object type, which is always "fine_tuning.job". </param>
        /// <param name="createdAt"> The Unix timestamp (in seconds) for when the fine-tuning job was created. </param>
        /// <param name="finishedAt">
        /// The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be
        /// null if the fine-tuning job is still running.
        /// </param>
        /// <param name="model"> The base model that is being fine-tuned. </param>
        /// <param name="fineTunedModel">
        /// The name of the fine-tuned model that is being created. The value will be null if the
        /// fine-tuning job is still running.
        /// </param>
        /// <param name="organizationId"> The organization that owns the fine-tuning job. </param>
        /// <param name="status">
        /// The current status of the fine-tuning job, which can be either `created`, `pending`, `running`,
        /// `succeeded`, `failed`, or `cancelled`.
        /// </param>
        /// <param name="hyperparameters">
        /// The hyperparameters used for the fine-tuning job. See the
        /// [fine-tuning guide](/docs/guides/fine-tuning) for more details.
        /// </param>
        /// <param name="trainingFile">
        /// The file ID used for training. You can retrieve the training data with the
        /// [Files API](/docs/api-reference/files/retrieve-contents).
        /// </param>
        /// <param name="validationFile">
        /// The file ID used for validation. You can retrieve the validation results with the
        /// [Files API](/docs/api-reference/files/retrieve-contents).
        /// </param>
        /// <param name="resultFiles">
        /// The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the
        /// [Files API](/docs/api-reference/files/retrieve-contents).
        /// </param>
        /// <param name="trainedTokens">
        /// The total number of billable tokens processed by this fine tuning job. The value will be null
        /// if the fine-tuning job is still running.
        /// </param>
        /// <param name="error">
        /// For fine-tuning jobs that have `failed`, this will contain more information on the cause of the
        /// failure.
        /// </param>
        /// <returns> A new <see cref="Models.FineTuningJob"/> instance for mocking. </returns>
        public static FineTuningJob FineTuningJob(string id = null, FineTuningJobObject @object = default, DateTimeOffset createdAt = default, DateTimeOffset? finishedAt = null, string model = null, string fineTunedModel = null, string organizationId = null, FineTuningJobStatus status = default, FineTuningJobHyperparameters hyperparameters = null, string trainingFile = null, string validationFile = null, IEnumerable<string> resultFiles = null, long? trainedTokens = null, FineTuningJobError error = null)
        {
            resultFiles ??= new List<string>();

            return new FineTuningJob(id, @object, createdAt, finishedAt, model, fineTunedModel, organizationId, status, hyperparameters, trainingFile, validationFile, resultFiles?.ToList(), trainedTokens, error);
        }

        /// <summary> Initializes a new instance of FineTuningJobHyperparameters. </summary>
        /// <param name="nEpochs">
        /// The number of epochs to train the model for. An epoch refers to one full cycle through the
        /// training dataset.
        ///
        /// "Auto" decides the optimal number of epochs based on the size of the dataset. If setting the
        /// number manually, we support any number between 1 and 50 epochs.
        /// </param>
        /// <returns> A new <see cref="Models.FineTuningJobHyperparameters"/> instance for mocking. </returns>
        public static FineTuningJobHyperparameters FineTuningJobHyperparameters(BinaryData nEpochs = null)
        {
            return new FineTuningJobHyperparameters(nEpochs);
        }

        /// <summary> Initializes a new instance of FineTuningJobError. </summary>
        /// <param name="message"> A human-readable error message. </param>
        /// <param name="code"> A machine-readable error code. </param>
        /// <param name="param">
        /// The parameter that was invalid, usually `training_file` or `validation_file`. This field
        /// will be null if the failure was not parameter-specific.
        /// </param>
        /// <returns> A new <see cref="Models.FineTuningJobError"/> instance for mocking. </returns>
        public static FineTuningJobError FineTuningJobError(string message = null, string code = null, string param = null)
        {
            return new FineTuningJobError(message, code, param);
        }

        /// <summary> Initializes a new instance of ListPaginatedFineTuningJobsResponse. </summary>
        /// <param name="object"></param>
        /// <param name="data"></param>
        /// <param name="hasMore"></param>
        /// <returns> A new <see cref="Models.ListPaginatedFineTuningJobsResponse"/> instance for mocking. </returns>
        public static ListPaginatedFineTuningJobsResponse ListPaginatedFineTuningJobsResponse(string @object = null, IEnumerable<FineTuningJob> data = null, bool hasMore = default)
        {
            data ??= new List<FineTuningJob>();

            return new ListPaginatedFineTuningJobsResponse(@object, data?.ToList(), hasMore);
        }

        /// <summary> Initializes a new instance of ListFineTuningJobEventsResponse. </summary>
        /// <param name="object"></param>
        /// <param name="data"></param>
        /// <returns> A new <see cref="Models.ListFineTuningJobEventsResponse"/> instance for mocking. </returns>
        public static ListFineTuningJobEventsResponse ListFineTuningJobEventsResponse(string @object = null, IEnumerable<FineTuningJobEvent> data = null)
        {
            data ??= new List<FineTuningJobEvent>();

            return new ListFineTuningJobEventsResponse(@object, data?.ToList());
        }

        /// <summary> Initializes a new instance of FineTuningJobEvent. </summary>
        /// <param name="id"></param>
        /// <param name="object"></param>
        /// <param name="createdAt"></param>
        /// <param name="level"></param>
        /// <param name="message"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="object"/> or <paramref name="message"/> is null. </exception>
        /// <returns> A new <see cref="Models.FineTuningJobEvent"/> instance for mocking. </returns>
        public static FineTuningJobEvent FineTuningJobEvent(string id = null, string @object = null, DateTimeOffset createdAt = default, FineTuningJobEventLevel level = default, string message = null)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (@object == null)
            {
                throw new ArgumentNullException(nameof(@object));
            }
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            return new FineTuningJobEvent(id, @object, createdAt, level, message);
        }

        /// <summary> Initializes a new instance of CreateCompletionResponse. </summary>
        /// <param name="id"> A unique identifier for the completion. </param>
        /// <param name="object"> The object type, which is always `text_completion`. </param>
        /// <param name="created"> The Unix timestamp (in seconds) of when the completion was created. </param>
        /// <param name="model"> The model used for the completion. </param>
        /// <param name="choices"> The list of completion choices the model generated for the input. </param>
        /// <param name="usage"></param>
        /// <returns> A new <see cref="Models.CreateCompletionResponse"/> instance for mocking. </returns>
        public static CreateCompletionResponse CreateCompletionResponse(string id = null, string @object = null, DateTimeOffset created = default, string model = null, IEnumerable<CreateCompletionResponseChoice> choices = null, CompletionUsage usage = null)
        {
            choices ??= new List<CreateCompletionResponseChoice>();

            return new CreateCompletionResponse(id, @object, created, model, choices?.ToList(), usage);
        }

        /// <summary> Initializes a new instance of CreateCompletionResponseChoice. </summary>
        /// <param name="index"></param>
        /// <param name="text"></param>
        /// <param name="logprobs"></param>
        /// <param name="finishReason">
        /// The reason the model stopped generating tokens. This will be `stop` if the model hit a
        /// natural stop point or a provided stop sequence, or `content_filter` if content was omitted
        /// due to a flag from our content filters, `length` if the maximum number of tokens specified
        /// in the request was reached, or `content_filter` if content was omitted due to a flag from our
        /// content filters.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="text"/> is null. </exception>
        /// <returns> A new <see cref="Models.CreateCompletionResponseChoice"/> instance for mocking. </returns>
        public static CreateCompletionResponseChoice CreateCompletionResponseChoice(long index = default, string text = null, CreateLogprobs logprobs = null, CreateCompletionResponseChoiceFinishReason finishReason = default)
        {
            if (text == null)
            {
                throw new ArgumentNullException(nameof(text));
            }

            return new CreateCompletionResponseChoice(index, text, logprobs, finishReason);
        }

        /// <summary> Initializes a new instance of CreateLogprobs. </summary>
        /// <param name="tokens"></param>
        /// <param name="tokenLogprobs"></param>
        /// <param name="topLogprobs"></param>
        /// <param name="textOffset"></param>
        /// <returns> A new <see cref="Models.CreateLogprobs"/> instance for mocking. </returns>
        public static CreateLogprobs CreateLogprobs(IEnumerable<string> tokens = null, IEnumerable<double> tokenLogprobs = null, IEnumerable<IDictionary<string, long>> topLogprobs = null, IEnumerable<long> textOffset = null)
        {
            tokens ??= new List<string>();
            tokenLogprobs ??= new List<double>();
            topLogprobs ??= new List<IDictionary<string, long>>();
            textOffset ??= new List<long>();

            return new CreateLogprobs(tokens?.ToList(), tokenLogprobs?.ToList(), topLogprobs?.ToList(), textOffset?.ToList());
        }

        /// <summary> Initializes a new instance of CreateEditResponse. </summary>
        /// <param name="object"> The object type, which is always `edit`. </param>
        /// <param name="created"> The Unix timestamp (in seconds) of when the edit was created. </param>
        /// <param name="choices"> description: A list of edit choices. Can be more than one if `n` is greater than 1. </param>
        /// <param name="usage"></param>
        /// <returns> A new <see cref="Models.CreateEditResponse"/> instance for mocking. </returns>
        public static CreateEditResponse CreateEditResponse(CreateEditResponseObject @object = default, DateTimeOffset created = default, IEnumerable<CreateEditResponseChoice> choices = null, CompletionUsage usage = null)
        {
            choices ??= new List<CreateEditResponseChoice>();

            return new CreateEditResponse(@object, created, choices?.ToList(), usage);
        }

        /// <summary> Initializes a new instance of CreateEditResponseChoice. </summary>
        /// <param name="text"> The edited result. </param>
        /// <param name="index"> The index of the choice in the list of choices. </param>
        /// <param name="finishReason">
        /// The reason the model stopped generating tokens. This will be `stop` if the model hit a
        /// natural stop point or a provided stop sequence, or `length` if the maximum number of tokens
        /// specified in the request was reached.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="text"/> is null. </exception>
        /// <returns> A new <see cref="Models.CreateEditResponseChoice"/> instance for mocking. </returns>
        public static CreateEditResponseChoice CreateEditResponseChoice(string text = null, long index = default, CreateEditResponseChoiceFinishReason finishReason = default)
        {
            if (text == null)
            {
                throw new ArgumentNullException(nameof(text));
            }

            return new CreateEditResponseChoice(text, index, finishReason);
        }

        /// <summary> Initializes a new instance of CreateEmbeddingResponse. </summary>
        /// <param name="object"> The object type, which is always "embedding". </param>
        /// <param name="model"> The name of the model used to generate the embedding. </param>
        /// <param name="data"> The list of embeddings generated by the model. </param>
        /// <param name="usage"> The usage information for the request. </param>
        /// <returns> A new <see cref="Models.CreateEmbeddingResponse"/> instance for mocking. </returns>
        public static CreateEmbeddingResponse CreateEmbeddingResponse(CreateEmbeddingResponseObject @object = default, string model = null, IEnumerable<Embedding> data = null, CreateUsage usage = null)
        {
            data ??= new List<Embedding>();

            return new CreateEmbeddingResponse(@object, model, data?.ToList(), usage);
        }

        /// <summary> Initializes a new instance of Embedding. </summary>
        /// <param name="index"> The index of the embedding in the list of embeddings. </param>
        /// <param name="object"> The object type, which is always "embedding". </param>
        /// <param name="embeddingProperty">
        /// The embedding vector, which is a list of floats. The length of vector depends on the model as\
        /// listed in the [embedding guide](/docs/guides/embeddings).
        /// </param>
        /// <returns> A new <see cref="Models.Embedding"/> instance for mocking. </returns>
        public static Embedding Embedding(long index = default, EmbeddingObject @object = default, IEnumerable<double> embeddingProperty = null)
        {
            embeddingProperty ??= new List<double>();

            return new Embedding(index, @object, embeddingProperty?.ToList());
        }

        /// <summary> Initializes a new instance of CreateUsage. </summary>
        /// <param name="promptTokens"> The number of tokens used by the prompt. </param>
        /// <param name="totalTokens"> The total number of tokens used by the request. </param>
        /// <returns> A new <see cref="Models.CreateUsage"/> instance for mocking. </returns>
        public static CreateUsage CreateUsage(long promptTokens = default, long totalTokens = default)
        {
            return new CreateUsage(promptTokens, totalTokens);
        }

        /// <summary> Initializes a new instance of ListFilesResponse. </summary>
        /// <param name="object"></param>
        /// <param name="data"></param>
        /// <returns> A new <see cref="Models.ListFilesResponse"/> instance for mocking. </returns>
        public static ListFilesResponse ListFilesResponse(string @object = null, IEnumerable<OpenAIFile> data = null)
        {
            data ??= new List<OpenAIFile>();

            return new ListFilesResponse(@object, data?.ToList());
        }

        /// <summary> Initializes a new instance of OpenAIFile. </summary>
        /// <param name="id"> The file identifier, which can be referenced in the API endpoints. </param>
        /// <param name="object"> The object type, which is always "file". </param>
        /// <param name="bytes"> The size of the file in bytes. </param>
        /// <param name="createdAt"> The Unix timestamp (in seconds) for when the file was created. </param>
        /// <param name="filename"> The name of the file. </param>
        /// <param name="purpose"> The intended purpose of the file. Currently, only "fine-tune" is supported. </param>
        /// <param name="status">
        /// The current status of the file, which can be either `uploaded`, `processed`, `pending`,
        /// `error`, `deleting` or `deleted`.
        /// </param>
        /// <param name="statusDetails">
        /// Additional details about the status of the file. If the file is in the `error` state, this will
        /// include a message describing the error.
        /// </param>
        /// <returns> A new <see cref="Models.OpenAIFile"/> instance for mocking. </returns>
        public static OpenAIFile OpenAIFile(string id = null, OpenAIFileObject @object = default, long bytes = default, DateTimeOffset createdAt = default, string filename = null, string purpose = null, OpenAIFileStatus status = default, string statusDetails = null)
        {
            return new OpenAIFile(id, @object, bytes, createdAt, filename, purpose, status, statusDetails);
        }

        /// <summary> Initializes a new instance of DeleteFileResponse. </summary>
        /// <param name="id"></param>
        /// <param name="object"></param>
        /// <param name="deleted"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="object"/> is null. </exception>
        /// <returns> A new <see cref="Models.DeleteFileResponse"/> instance for mocking. </returns>
        public static DeleteFileResponse DeleteFileResponse(string id = null, string @object = null, bool deleted = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (@object == null)
            {
                throw new ArgumentNullException(nameof(@object));
            }

            return new DeleteFileResponse(id, @object, deleted);
        }

        /// <summary> Initializes a new instance of FineTune. </summary>
        /// <param name="id"> The object identifier, which can be referenced in the API endpoints. </param>
        /// <param name="object"> The object type, which is always "fine-tune". </param>
        /// <param name="createdAt"> The Unix timestamp (in seconds) for when the fine-tuning job was created. </param>
        /// <param name="updatedAt"> The Unix timestamp (in seconds) for when the fine-tuning job was last updated. </param>
        /// <param name="model"> The base model that is being fine-tuned. </param>
        /// <param name="fineTunedModel"> The name of the fine-tuned model that is being created. </param>
        /// <param name="organizationId"> The organization that owns the fine-tuning job. </param>
        /// <param name="status">
        /// The current status of the fine-tuning job, which can be either `created`, `running`,
        /// `succeeded`, `failed`, or `cancelled`.
        /// </param>
        /// <param name="hyperparams">
        /// The hyperparameters used for the fine-tuning job. See the
        /// [fine-tuning guide](/docs/guides/legacy-fine-tuning/hyperparameters) for more details.
        /// </param>
        /// <param name="trainingFiles"> The list of files used for training. </param>
        /// <param name="validationFiles"> The list of files used for validation. </param>
        /// <param name="resultFiles"> The compiled results files for the fine-tuning job. </param>
        /// <param name="events"> The list of events that have been observed in the lifecycle of the FineTune job. </param>
        /// <returns> A new <see cref="Models.FineTune"/> instance for mocking. </returns>
        public static FineTune FineTune(string id = null, FineTuneObject @object = default, DateTimeOffset createdAt = default, DateTimeOffset updatedAt = default, string model = null, string fineTunedModel = null, string organizationId = null, FineTuneStatus status = default, FineTuneHyperparams hyperparams = null, IEnumerable<OpenAIFile> trainingFiles = null, IEnumerable<OpenAIFile> validationFiles = null, IEnumerable<OpenAIFile> resultFiles = null, IEnumerable<FineTuneEvent> events = null)
        {
            trainingFiles ??= new List<OpenAIFile>();
            validationFiles ??= new List<OpenAIFile>();
            resultFiles ??= new List<OpenAIFile>();
            events ??= new List<FineTuneEvent>();

            return new FineTune(id, @object, createdAt, updatedAt, model, fineTunedModel, organizationId, status, hyperparams, trainingFiles?.ToList(), validationFiles?.ToList(), resultFiles?.ToList(), events?.ToList());
        }

        /// <summary> Initializes a new instance of FineTuneHyperparams. </summary>
        /// <param name="nEpochs">
        /// The number of epochs to train the model for. An epoch refers to one full cycle through the
        /// training dataset.
        /// </param>
        /// <param name="batchSize">
        /// The batch size to use for training. The batch size is the number of training examples used to
        /// train a single forward and backward pass.
        /// </param>
        /// <param name="promptLossWeight"> The weight to use for loss on the prompt tokens. </param>
        /// <param name="learningRateMultiplier"> The learning rate multiplier to use for training. </param>
        /// <param name="computeClassificationMetrics"> The classification metrics to compute using the validation dataset at the end of every epoch. </param>
        /// <param name="classificationPositiveClass"> The positive class to use for computing classification metrics. </param>
        /// <param name="classificationNClasses"> The number of classes to use for computing classification metrics. </param>
        /// <returns> A new <see cref="Models.FineTuneHyperparams"/> instance for mocking. </returns>
        public static FineTuneHyperparams FineTuneHyperparams(long nEpochs = default, long batchSize = default, double promptLossWeight = default, double learningRateMultiplier = default, bool? computeClassificationMetrics = null, string classificationPositiveClass = null, long? classificationNClasses = null)
        {
            return new FineTuneHyperparams(nEpochs, batchSize, promptLossWeight, learningRateMultiplier, computeClassificationMetrics, classificationPositiveClass, classificationNClasses);
        }

        /// <summary> Initializes a new instance of FineTuneEvent. </summary>
        /// <param name="object"></param>
        /// <param name="createdAt"></param>
        /// <param name="level"></param>
        /// <param name="message"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="object"/>, <paramref name="level"/> or <paramref name="message"/> is null. </exception>
        /// <returns> A new <see cref="Models.FineTuneEvent"/> instance for mocking. </returns>
        public static FineTuneEvent FineTuneEvent(string @object = null, DateTimeOffset createdAt = default, string level = null, string message = null)
        {
            if (@object == null)
            {
                throw new ArgumentNullException(nameof(@object));
            }
            if (level == null)
            {
                throw new ArgumentNullException(nameof(level));
            }
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            return new FineTuneEvent(@object, createdAt, level, message);
        }

        /// <summary> Initializes a new instance of ListFineTunesResponse. </summary>
        /// <param name="object"></param>
        /// <param name="data"></param>
        /// <returns> A new <see cref="Models.ListFineTunesResponse"/> instance for mocking. </returns>
        public static ListFineTunesResponse ListFineTunesResponse(string @object = null, IEnumerable<FineTune> data = null)
        {
            data ??= new List<FineTune>();

            return new ListFineTunesResponse(@object, data?.ToList());
        }

        /// <summary> Initializes a new instance of ListFineTuneEventsResponse. </summary>
        /// <param name="object"></param>
        /// <param name="data"></param>
        /// <returns> A new <see cref="Models.ListFineTuneEventsResponse"/> instance for mocking. </returns>
        public static ListFineTuneEventsResponse ListFineTuneEventsResponse(string @object = null, IEnumerable<FineTuneEvent> data = null)
        {
            data ??= new List<FineTuneEvent>();

            return new ListFineTuneEventsResponse(@object, data?.ToList());
        }

        /// <summary> Initializes a new instance of ListModelsResponse. </summary>
        /// <param name="object"></param>
        /// <param name="data"></param>
        /// <returns> A new <see cref="Models.ListModelsResponse"/> instance for mocking. </returns>
        public static ListModelsResponse ListModelsResponse(string @object = null, IEnumerable<Model> data = null)
        {
            data ??= new List<Model>();

            return new ListModelsResponse(@object, data?.ToList());
        }

        /// <summary> Initializes a new instance of Model. </summary>
        /// <param name="id"> The model identifier, which can be referenced in the API endpoints. </param>
        /// <param name="object"> The object type, which is always "model". </param>
        /// <param name="created"> The Unix timestamp (in seconds) when the model was created. </param>
        /// <param name="ownedBy"> The organization that owns the model. </param>
        /// <returns> A new <see cref="Models.Model"/> instance for mocking. </returns>
        public static Model Model(string id = null, ModelObject @object = default, DateTimeOffset created = default, string ownedBy = null)
        {
            return new Model(id, @object, created, ownedBy);
        }

        /// <summary> Initializes a new instance of DeleteModelResponse. </summary>
        /// <param name="id"></param>
        /// <param name="object"></param>
        /// <param name="deleted"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="object"/> is null. </exception>
        /// <returns> A new <see cref="Models.DeleteModelResponse"/> instance for mocking. </returns>
        public static DeleteModelResponse DeleteModelResponse(string id = null, string @object = null, bool deleted = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (@object == null)
            {
                throw new ArgumentNullException(nameof(@object));
            }

            return new DeleteModelResponse(id, @object, deleted);
        }

        /// <summary> Initializes a new instance of ImagesResponse. </summary>
        /// <param name="created"></param>
        /// <param name="data"></param>
        /// <returns> A new <see cref="Models.ImagesResponse"/> instance for mocking. </returns>
        public static ImagesResponse ImagesResponse(DateTimeOffset created = default, IEnumerable<Image> data = null)
        {
            data ??= new List<Image>();

            return new ImagesResponse(created, data?.ToList());
        }

        /// <summary> Initializes a new instance of Image. </summary>
        /// <param name="url"> The URL of the generated image, if `response_format` is `url` (default). </param>
        /// <param name="b64Json"> The base64-encoded JSON of the generated image, if `response_format` is `b64_json`. </param>
        /// <returns> A new <see cref="Models.Image"/> instance for mocking. </returns>
        public static Image Image(Uri url = null, BinaryData b64Json = null)
        {
            return new Image(url, b64Json);
        }

        /// <summary> Initializes a new instance of CreateModerationResponse. </summary>
        /// <param name="id"> The unique identifier for the moderation request. </param>
        /// <param name="model"> The model used to generate the moderation results. </param>
        /// <param name="results"> A list of moderation objects. </param>
        /// <returns> A new <see cref="Models.CreateModerationResponse"/> instance for mocking. </returns>
        public static CreateModerationResponse CreateModerationResponse(string id = null, string model = null, IEnumerable<CreateResult> results = null)
        {
            results ??= new List<CreateResult>();

            return new CreateModerationResponse(id, model, results?.ToList());
        }

        /// <summary> Initializes a new instance of CreateResult. </summary>
        /// <param name="flagged"> Whether the content violates [OpenAI's usage policies](/policies/usage-policies). </param>
        /// <param name="categories"> A list of the categories, and whether they are flagged or not. </param>
        /// <param name="categoryScores"> A list of the categories along with their scores as predicted by model. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="categories"/> or <paramref name="categoryScores"/> is null. </exception>
        /// <returns> A new <see cref="Models.CreateResult"/> instance for mocking. </returns>
        public static CreateResult CreateResult(bool flagged = default, CreateCategories categories = null, CreateCategoryScores categoryScores = null)
        {
            if (categories == null)
            {
                throw new ArgumentNullException(nameof(categories));
            }
            if (categoryScores == null)
            {
                throw new ArgumentNullException(nameof(categoryScores));
            }

            return new CreateResult(flagged, categories, categoryScores);
        }

        /// <summary> Initializes a new instance of CreateCategories. </summary>
        /// <param name="hate">
        /// Content that expresses, incites, or promotes hate based on race, gender, ethnicity,
        /// religion, nationality, sexual orientation, disability status, or caste. Hateful content
        /// aimed at non-protected groups (e.g., chess players) is harrassment.
        /// </param>
        /// <param name="hateThreatening">
        /// Hateful content that also includes violence or serious harm towards the targeted group
        /// based on race, gender, ethnicity, religion, nationality, sexual orientation, disability
        /// status, or caste.
        /// </param>
        /// <param name="harassment"> Content that expresses, incites, or promotes harassing language towards any target. </param>
        /// <param name="harassmentThreatening"> Harassment content that also includes violence or serious harm towards any target. </param>
        /// <param name="selfHarm">
        /// Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting,
        /// and eating disorders.
        /// </param>
        /// <param name="selfHarmIntent">
        /// Content where the speaker expresses that they are engaging or intend to engage in acts of
        /// self-harm, such as suicide, cutting, and eating disorders.
        /// </param>
        /// <param name="selfHarmInstructive">
        /// Content that encourages performing acts of self-harm, such as suicide, cutting, and eating
        /// disorders, or that gives instructions or advice on how to commit such acts.
        /// </param>
        /// <param name="sexual">
        /// Content meant to arouse sexual excitement, such as the description of sexual activity, or
        /// that promotes sexual services (excluding sex education and wellness).
        /// </param>
        /// <param name="sexualMinors"> Sexual content that includes an individual who is under 18 years old. </param>
        /// <param name="violence"> Content that depicts death, violence, or physical injury. </param>
        /// <param name="violenceGraphic"> Content that depicts death, violence, or physical injury in graphic detail. </param>
        /// <returns> A new <see cref="Models.CreateCategories"/> instance for mocking. </returns>
        public static CreateCategories CreateCategories(bool hate = default, bool hateThreatening = default, bool harassment = default, bool harassmentThreatening = default, bool selfHarm = default, bool selfHarmIntent = default, bool selfHarmInstructive = default, bool sexual = default, bool sexualMinors = default, bool violence = default, bool violenceGraphic = default)
        {
            return new CreateCategories(hate, hateThreatening, harassment, harassmentThreatening, selfHarm, selfHarmIntent, selfHarmInstructive, sexual, sexualMinors, violence, violenceGraphic);
        }

        /// <summary> Initializes a new instance of CreateCategoryScores. </summary>
        /// <param name="hate"> The score for the category 'hate'. </param>
        /// <param name="hateThreatening"> The score for the category 'hate/threatening'. </param>
        /// <param name="harassment"> The score for the category 'harassment'. </param>
        /// <param name="harassmentThreatening"> The score for the category 'harassment/threatening'. </param>
        /// <param name="selfHarm"> The score for the category 'self-harm'. </param>
        /// <param name="selfHarmIntent"> The score for the category 'self-harm/intent'. </param>
        /// <param name="selfHarmInstructive"> The score for the category 'self-harm/instructive'. </param>
        /// <param name="sexual"> The score for the category 'sexual'. </param>
        /// <param name="sexualMinors"> The score for the category 'sexual/minors'. </param>
        /// <param name="violence"> The score for the category 'violence'. </param>
        /// <param name="violenceGraphic"> The score for the category 'violence/graphic'. </param>
        /// <returns> A new <see cref="Models.CreateCategoryScores"/> instance for mocking. </returns>
        public static CreateCategoryScores CreateCategoryScores(double hate = default, double hateThreatening = default, double harassment = default, double harassmentThreatening = default, double selfHarm = default, double selfHarmIntent = default, double selfHarmInstructive = default, double sexual = default, double sexualMinors = default, double violence = default, double violenceGraphic = default)
        {
            return new CreateCategoryScores(hate, hateThreatening, harassment, harassmentThreatening, selfHarm, selfHarmIntent, selfHarmInstructive, sexual, sexualMinors, violence, violenceGraphic);
        }
    }
}
