// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace NoTestTypeSpec.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class NoTestTypeSpecModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.Thing"/>. </summary>
        /// <param name="name"></param>
        /// <param name="requiredUnion"></param>
        /// <param name="requiredLiteralString"></param>
        /// <param name="requiredLiteralInt"></param>
        /// <param name="requiredLiteralFloat"></param>
        /// <param name="requiredLiteralBool"></param>
        /// <param name="optionalLiteralString"></param>
        /// <param name="optionalLiteralInt"></param>
        /// <param name="optionalLiteralFloat"></param>
        /// <param name="optionalLiteralBool"></param>
        /// <param name="requiredBadDescription"></param>
        /// <param name="optionalNullableList"></param>
        /// <param name="requiredNullableList"></param>
        /// <returns> A new <see cref="Models.Thing"/> instance for mocking. </returns>
        public static Thing Thing(string name = null, BinaryData requiredUnion = null, ThingRequiredLiteralString requiredLiteralString = default, ThingRequiredLiteralInt requiredLiteralInt = default, ThingRequiredLiteralFloat requiredLiteralFloat = default, bool requiredLiteralBool = default, ThingOptionalLiteralString? optionalLiteralString = null, ThingOptionalLiteralInt? optionalLiteralInt = null, ThingOptionalLiteralFloat? optionalLiteralFloat = null, bool? optionalLiteralBool = null, string requiredBadDescription = null, IEnumerable<int> optionalNullableList = null, IEnumerable<int> requiredNullableList = null)
        {
            optionalNullableList ??= new List<int>();
            requiredNullableList ??= new List<int>();

            return new Thing(
                name,
                requiredUnion,
                requiredLiteralString,
                requiredLiteralInt,
                requiredLiteralFloat,
                requiredLiteralBool,
                optionalLiteralString,
                optionalLiteralInt,
                optionalLiteralFloat,
                optionalLiteralBool,
                requiredBadDescription,
                optionalNullableList?.ToList(),
                requiredNullableList?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DerivedThing"/>. </summary>
        /// <param name="name"></param>
        /// <param name="requiredUnion"></param>
        /// <param name="requiredLiteralString"></param>
        /// <param name="requiredLiteralInt"></param>
        /// <param name="requiredLiteralFloat"></param>
        /// <param name="requiredLiteralBool"></param>
        /// <param name="optionalLiteralString"></param>
        /// <param name="optionalLiteralInt"></param>
        /// <param name="optionalLiteralFloat"></param>
        /// <param name="optionalLiteralBool"></param>
        /// <param name="requiredBadDescription"></param>
        /// <param name="optionalNullableList"></param>
        /// <param name="requiredNullableList"></param>
        /// <param name="myProperty"></param>
        /// <returns> A new <see cref="Models.DerivedThing"/> instance for mocking. </returns>
        public static DerivedThing DerivedThing(string name = null, BinaryData requiredUnion = null, ThingRequiredLiteralString requiredLiteralString = default, ThingRequiredLiteralInt requiredLiteralInt = default, ThingRequiredLiteralFloat requiredLiteralFloat = default, bool requiredLiteralBool = default, ThingOptionalLiteralString? optionalLiteralString = null, ThingOptionalLiteralInt? optionalLiteralInt = null, ThingOptionalLiteralFloat? optionalLiteralFloat = null, bool? optionalLiteralBool = null, string requiredBadDescription = null, IEnumerable<int> optionalNullableList = null, IEnumerable<int> requiredNullableList = null, string myProperty = null)
        {
            optionalNullableList ??= new List<int>();
            requiredNullableList ??= new List<int>();

            return new DerivedThing(
                name,
                requiredUnion,
                requiredLiteralString,
                requiredLiteralInt,
                requiredLiteralFloat,
                requiredLiteralBool,
                optionalLiteralString,
                optionalLiteralInt,
                optionalLiteralFloat,
                optionalLiteralBool,
                requiredBadDescription,
                optionalNullableList?.ToList(),
                requiredNullableList?.ToList(),
                serializedAdditionalRawData: null,
                myProperty);
        }
    }
}
