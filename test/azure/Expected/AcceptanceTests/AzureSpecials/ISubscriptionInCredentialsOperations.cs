// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.Azure.AcceptanceTestsAzureSpecials
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// SubscriptionInCredentialsOperations operations.
    /// </summary>
    public partial interface ISubscriptionInCredentialsOperations
    {
        ISubscriptionInCredentialsOperationsWithHttpMessages WithHttpMessages();

        /// <summary>
        /// POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to '1234-5678-9012-3456'
        /// to succeed
        /// </summary>
        void PostMethodGlobalValid();

        /// <summary>
        /// POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to '1234-5678-9012-3456'
        /// to succeed
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PostMethodGlobalValidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to null, and client-side
        /// validation should prevent you from making this call
        /// </summary>
        void PostMethodGlobalNull();

        /// <summary>
        /// POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to null, and client-side
        /// validation should prevent you from making this call
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PostMethodGlobalNullAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to '1234-5678-9012-3456'
        /// to succeed
        /// </summary>
        void PostMethodGlobalNotProvidedValid();

        /// <summary>
        /// POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to '1234-5678-9012-3456'
        /// to succeed
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PostMethodGlobalNotProvidedValidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to '1234-5678-9012-3456'
        /// to succeed
        /// </summary>
        void PostPathGlobalValid();

        /// <summary>
        /// POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to '1234-5678-9012-3456'
        /// to succeed
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PostPathGlobalValidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to '1234-5678-9012-3456'
        /// to succeed
        /// </summary>
        void PostSwaggerGlobalValid();

        /// <summary>
        /// POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to '1234-5678-9012-3456'
        /// to succeed
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PostSwaggerGlobalValidAsync(CancellationToken cancellationToken = default(CancellationToken));
    }
}
