// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.Azure.AcceptanceTestsAzureSpecials
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// SkipUrlEncodingOperations operations.
    /// </summary>
    public partial class SkipUrlEncodingOperations : ISkipUrlEncodingOperations
    {
        /// <summary>
        /// Initializes a new instance of the SkipUrlEncodingOperations class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public SkipUrlEncodingOperations(ISkipUrlEncodingOperationsWithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private ISkipUrlEncodingOperationsWithHttpMessages OperationsWithHttpMessages { get; set; }

        public ISkipUrlEncodingOperationsWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Get method with unencoded path parameter with value 'path1/path2/path3'
        /// </summary>
        /// <param name='unencodedPathParam'>
        /// Unencoded path parameter with value 'path1/path2/path3'
        /// </param>
        public void GetMethodPathValid(string unencodedPathParam)
        {
            GetMethodPathValidAsync(unencodedPathParam).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get method with unencoded path parameter with value 'path1/path2/path3'
        /// </summary>
        /// <param name='unencodedPathParam'>
        /// Unencoded path parameter with value 'path1/path2/path3'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task GetMethodPathValidAsync(string unencodedPathParam, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.GetMethodPathValidAsync(unencodedPathParam, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get method with unencoded path parameter with value 'path1/path2/path3'
        /// </summary>
        /// <param name='unencodedPathParam'>
        /// Unencoded path parameter with value 'path1/path2/path3'
        /// </param>
        public void GetPathPathValid(string unencodedPathParam)
        {
            GetPathPathValidAsync(unencodedPathParam).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get method with unencoded path parameter with value 'path1/path2/path3'
        /// </summary>
        /// <param name='unencodedPathParam'>
        /// Unencoded path parameter with value 'path1/path2/path3'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task GetPathPathValidAsync(string unencodedPathParam, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.GetPathPathValidAsync(unencodedPathParam, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get method with unencoded path parameter with value 'path1/path2/path3'
        /// </summary>
        public void GetSwaggerPathValid()
        {
            GetSwaggerPathValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get method with unencoded path parameter with value 'path1/path2/path3'
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task GetSwaggerPathValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.GetSwaggerPathValidAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get method with unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
        /// </summary>
        /// <param name='q1'>
        /// Unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
        /// </param>
        public void GetMethodQueryValid(string q1)
        {
            GetMethodQueryValidAsync(q1).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get method with unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
        /// </summary>
        /// <param name='q1'>
        /// Unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task GetMethodQueryValidAsync(string q1, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.GetMethodQueryValidAsync(q1, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get method with unencoded query parameter with value null
        /// </summary>
        /// <param name='q1'>
        /// Unencoded query parameter with value null
        /// </param>
        public void GetMethodQueryNull(string q1 = default(string))
        {
            GetMethodQueryNullAsync(q1).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get method with unencoded query parameter with value null
        /// </summary>
        /// <param name='q1'>
        /// Unencoded query parameter with value null
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task GetMethodQueryNullAsync(string q1 = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.GetMethodQueryNullAsync(q1, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get method with unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
        /// </summary>
        /// <param name='q1'>
        /// Unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
        /// </param>
        public void GetPathQueryValid(string q1)
        {
            GetPathQueryValidAsync(q1).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get method with unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
        /// </summary>
        /// <param name='q1'>
        /// Unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task GetPathQueryValidAsync(string q1, CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.GetPathQueryValidAsync(q1, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Get method with unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
        /// </summary>
        public void GetSwaggerQueryValid()
        {
            GetSwaggerQueryValidAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get method with unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task GetSwaggerQueryValidAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.GetSwaggerQueryValidAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

    }
}
