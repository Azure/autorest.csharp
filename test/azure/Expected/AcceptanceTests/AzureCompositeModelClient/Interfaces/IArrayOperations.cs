// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.Azure.AcceptanceTestsAzureCompositeModelClient
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// ArrayOperations operations.
    /// </summary>
    public partial interface IArrayOperations
    {
        IArrayOperationsWithHttpMessages WithHttpMessages();

        /// <summary>
        /// Get complex types with array property
        /// </summary>
        ArrayWrapper GetValid();

        /// <summary>
        /// Get complex types with array property
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ArrayWrapper> GetValidAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put complex types with array property
        /// </summary>
        /// <param name='array'>
        /// </param>
        void PutValid(IList<string> array = default(IList<string>));

        /// <summary>
        /// Put complex types with array property
        /// </summary>
        /// <param name='array'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutValidAsync(IList<string> array = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get complex types with array property which is empty
        /// </summary>
        ArrayWrapper GetEmpty();

        /// <summary>
        /// Get complex types with array property which is empty
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ArrayWrapper> GetEmptyAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Put complex types with array property which is empty
        /// </summary>
        /// <param name='array'>
        /// </param>
        void PutEmpty(IList<string> array = default(IList<string>));

        /// <summary>
        /// Put complex types with array property which is empty
        /// </summary>
        /// <param name='array'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task PutEmptyAsync(IList<string> array = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get complex types with array property while server doesn't provide a response payload
        /// </summary>
        ArrayWrapper GetNotProvided();

        /// <summary>
        /// Get complex types with array property while server doesn't provide a response payload
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<ArrayWrapper> GetNotProvidedAsync(CancellationToken cancellationToken = default(CancellationToken));
    }
}
