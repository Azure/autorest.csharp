// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.Azure.AcceptanceTestsLro
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// LROsOperations operations.
    /// </summary>
    public partial interface ILROsOperations
    {
        ILROsOperationsWithHttpMessages WithHttpMessages();

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Succeeded’.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product Put200Succeeded(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Succeeded’.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> Put200SucceededAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that does not contain
        /// ProvisioningState=’Succeeded’.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product Put200SucceededNoState(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that does not contain
        /// ProvisioningState=’Succeeded’.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> Put200SucceededNoStateAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 202 to the initial request, with a location header that points to a
        /// polling URL that returns a 200 and an entity that doesn't contains ProvisioningState
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product Put202Retry200(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 202 to the initial request, with a location header that points to a
        /// polling URL that returns a 200 and an entity that doesn't contains ProvisioningState
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> Put202Retry200Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product Put201CreatingSucceeded200(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> Put201CreatingSucceeded200Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product Put200UpdatingSucceeded204(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> Put200UpdatingSucceeded204Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Failed’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product Put201CreatingFailed200(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Failed’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> Put201CreatingFailed200Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Canceled’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product Put200Acceptedcanceled200(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Canceled’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> Put200Acceptedcanceled200Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to
        /// operation status do not contain location header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product PutNoHeaderInRetry(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to
        /// operation status do not contain location header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> PutNoHeaderInRetryAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product PutAsyncRetrySucceeded(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> PutAsyncRetrySucceededAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product PutAsyncNoRetrySucceeded(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> PutAsyncNoRetrySucceededAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product PutAsyncRetryFailed(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> PutAsyncRetryFailedAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product PutAsyncNoRetrycanceled(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> PutAsyncNoRetrycanceledAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent
        /// calls to operation status do not contain Azure-AsyncOperation header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product PutAsyncNoHeaderInRetry(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent
        /// calls to operation status do not contain Azure-AsyncOperation header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> PutAsyncNoHeaderInRetryAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request with non resource.
        /// </summary>
        /// <param name='sku'>
        /// sku to put
        /// </param>
        Sku PutNonResource(Sku sku = default(Sku));

        /// <summary>
        /// Long running put request with non resource.
        /// </summary>
        /// <param name='sku'>
        /// sku to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Sku> PutNonResourceAsync(Sku sku = default(Sku), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request with non resource.
        /// </summary>
        /// <param name='sku'>
        /// Sku to put
        /// </param>
        Sku PutAsyncNonResource(Sku sku = default(Sku));

        /// <summary>
        /// Long running put request with non resource.
        /// </summary>
        /// <param name='sku'>
        /// Sku to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Sku> PutAsyncNonResourceAsync(Sku sku = default(Sku), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request with sub resource.
        /// </summary>
        /// <param name='provisioningState'>
        /// </param>
        SubProduct PutSubResource(string provisioningState = default(string));

        /// <summary>
        /// Long running put request with sub resource.
        /// </summary>
        /// <param name='provisioningState'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<SubProduct> PutSubResourceAsync(string provisioningState = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request with sub resource.
        /// </summary>
        /// <param name='provisioningState'>
        /// </param>
        SubProduct PutAsyncSubResource(string provisioningState = default(string));

        /// <summary>
        /// Long running put request with sub resource.
        /// </summary>
        /// <param name='provisioningState'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<SubProduct> PutAsyncSubResourceAsync(string provisioningState = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        Product DeleteProvisioning202Accepted200Succeeded();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> DeleteProvisioning202Accepted200SucceededAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Failed’
        /// </summary>
        Product DeleteProvisioning202DeletingFailed200();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Failed’
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> DeleteProvisioning202DeletingFailed200Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Canceled’
        /// </summary>
        Product DeleteProvisioning202Deletingcanceled200();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Canceled’
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> DeleteProvisioning202Deletingcanceled200Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete succeeds and returns right away
        /// </summary>
        void Delete204Succeeded();

        /// <summary>
        /// Long running delete succeeds and returns right away
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task Delete204SucceededAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Polls return this value until the last
        /// poll returns a ‘200’ with ProvisioningState=’Succeeded’
        /// </summary>
        Product Delete202Retry200();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Polls return this value until the last
        /// poll returns a ‘200’ with ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> Delete202Retry200Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Polls return this value until the last
        /// poll returns a ‘200’ with ProvisioningState=’Succeeded’
        /// </summary>
        Product Delete202NoRetry204();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Polls return this value until the last
        /// poll returns a ‘200’ with ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> Delete202NoRetry204Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a location header in the initial request. Subsequent calls to
        /// operation status do not contain location header.
        /// </summary>
        LROsDeleteNoHeaderInRetryHeaders DeleteNoHeaderInRetry();

        /// <summary>
        /// Long running delete request, service returns a location header in the initial request. Subsequent calls to
        /// operation status do not contain location header.
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROsDeleteNoHeaderInRetryHeaders> DeleteNoHeaderInRetryAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent
        /// calls to operation status do not contain Azure-AsyncOperation header.
        /// </summary>
        LROsDeleteAsyncNoHeaderInRetryHeaders DeleteAsyncNoHeaderInRetry();

        /// <summary>
        /// Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent
        /// calls to operation status do not contain Azure-AsyncOperation header.
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROsDeleteAsyncNoHeaderInRetryHeaders> DeleteAsyncNoHeaderInRetryAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        LROsDeleteAsyncRetrySucceededHeaders DeleteAsyncRetrySucceeded();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROsDeleteAsyncRetrySucceededHeaders> DeleteAsyncRetrySucceededAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        LROsDeleteAsyncNoRetrySucceededHeaders DeleteAsyncNoRetrySucceeded();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROsDeleteAsyncNoRetrySucceededHeaders> DeleteAsyncNoRetrySucceededAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        LROsDeleteAsyncRetryFailedHeaders DeleteAsyncRetryFailed();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROsDeleteAsyncRetryFailedHeaders> DeleteAsyncRetryFailedAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        LROsDeleteAsyncRetrycanceledHeaders DeleteAsyncRetrycanceled();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROsDeleteAsyncRetrycanceledHeaders> DeleteAsyncRetrycanceledAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200
        /// with a response body after success.
        /// </summary>
        Sku Post200WithPayload();

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200
        /// with a response body after success.
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Sku> Post200WithPayloadAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers,
        /// Polls return a 200 with a response body after success
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROsPost202Retry200Headers Post202Retry200(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers,
        /// Polls return a 200 with a response body after success
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROsPost202Retry200Headers> Post202Retry200Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with
        /// noresponse body after success
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product Post202NoRetry204(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with
        /// noresponse body after success
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> Post202NoRetry204Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product PostAsyncRetrySucceeded(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> PostAsyncRetrySucceededAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product PostAsyncNoRetrySucceeded(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> PostAsyncNoRetrySucceededAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROsPostAsyncRetryFailedHeaders PostAsyncRetryFailed(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROsPostAsyncRetryFailedHeaders> PostAsyncRetryFailedAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROsPostAsyncRetrycanceledHeaders PostAsyncRetrycanceled(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROsPostAsyncRetrycanceledHeaders> PostAsyncRetrycanceledAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Succeeded’.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product BeginPut200Succeeded(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Succeeded’.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginPut200SucceededAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that does not contain
        /// ProvisioningState=’Succeeded’.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product BeginPut200SucceededNoState(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that does not contain
        /// ProvisioningState=’Succeeded’.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginPut200SucceededNoStateAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 202 to the initial request, with a location header that points to a
        /// polling URL that returns a 200 and an entity that doesn't contains ProvisioningState
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product BeginPut202Retry200(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 202 to the initial request, with a location header that points to a
        /// polling URL that returns a 200 and an entity that doesn't contains ProvisioningState
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginPut202Retry200Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product BeginPut201CreatingSucceeded200(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginPut201CreatingSucceeded200Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product BeginPut200UpdatingSucceeded204(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginPut200UpdatingSucceeded204Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Failed’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product BeginPut201CreatingFailed200(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Failed’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginPut201CreatingFailed200Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Canceled’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product BeginPut200Acceptedcanceled200(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Canceled’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginPut200Acceptedcanceled200Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to
        /// operation status do not contain location header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product BeginPutNoHeaderInRetry(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to
        /// operation status do not contain location header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginPutNoHeaderInRetryAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product BeginPutAsyncRetrySucceeded(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginPutAsyncRetrySucceededAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product BeginPutAsyncNoRetrySucceeded(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginPutAsyncNoRetrySucceededAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product BeginPutAsyncRetryFailed(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginPutAsyncRetryFailedAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product BeginPutAsyncNoRetrycanceled(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginPutAsyncNoRetrycanceledAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent
        /// calls to operation status do not contain Azure-AsyncOperation header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product BeginPutAsyncNoHeaderInRetry(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent
        /// calls to operation status do not contain Azure-AsyncOperation header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginPutAsyncNoHeaderInRetryAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request with non resource.
        /// </summary>
        /// <param name='sku'>
        /// sku to put
        /// </param>
        Sku BeginPutNonResource(Sku sku = default(Sku));

        /// <summary>
        /// Long running put request with non resource.
        /// </summary>
        /// <param name='sku'>
        /// sku to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Sku> BeginPutNonResourceAsync(Sku sku = default(Sku), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request with non resource.
        /// </summary>
        /// <param name='sku'>
        /// Sku to put
        /// </param>
        Sku BeginPutAsyncNonResource(Sku sku = default(Sku));

        /// <summary>
        /// Long running put request with non resource.
        /// </summary>
        /// <param name='sku'>
        /// Sku to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Sku> BeginPutAsyncNonResourceAsync(Sku sku = default(Sku), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request with sub resource.
        /// </summary>
        /// <param name='provisioningState'>
        /// </param>
        SubProduct BeginPutSubResource(string provisioningState = default(string));

        /// <summary>
        /// Long running put request with sub resource.
        /// </summary>
        /// <param name='provisioningState'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<SubProduct> BeginPutSubResourceAsync(string provisioningState = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request with sub resource.
        /// </summary>
        /// <param name='provisioningState'>
        /// </param>
        SubProduct BeginPutAsyncSubResource(string provisioningState = default(string));

        /// <summary>
        /// Long running put request with sub resource.
        /// </summary>
        /// <param name='provisioningState'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<SubProduct> BeginPutAsyncSubResourceAsync(string provisioningState = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        Product BeginDeleteProvisioning202Accepted200Succeeded();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginDeleteProvisioning202Accepted200SucceededAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Failed’
        /// </summary>
        Product BeginDeleteProvisioning202DeletingFailed200();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Failed’
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginDeleteProvisioning202DeletingFailed200Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Canceled’
        /// </summary>
        Product BeginDeleteProvisioning202Deletingcanceled200();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Canceled’
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginDeleteProvisioning202Deletingcanceled200Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete succeeds and returns right away
        /// </summary>
        void BeginDelete204Succeeded();

        /// <summary>
        /// Long running delete succeeds and returns right away
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task BeginDelete204SucceededAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Polls return this value until the last
        /// poll returns a ‘200’ with ProvisioningState=’Succeeded’
        /// </summary>
        Product BeginDelete202Retry200();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Polls return this value until the last
        /// poll returns a ‘200’ with ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginDelete202Retry200Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Polls return this value until the last
        /// poll returns a ‘200’ with ProvisioningState=’Succeeded’
        /// </summary>
        Product BeginDelete202NoRetry204();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Polls return this value until the last
        /// poll returns a ‘200’ with ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginDelete202NoRetry204Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a location header in the initial request. Subsequent calls to
        /// operation status do not contain location header.
        /// </summary>
        LROsDeleteNoHeaderInRetryHeaders BeginDeleteNoHeaderInRetry();

        /// <summary>
        /// Long running delete request, service returns a location header in the initial request. Subsequent calls to
        /// operation status do not contain location header.
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROsDeleteNoHeaderInRetryHeaders> BeginDeleteNoHeaderInRetryAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent
        /// calls to operation status do not contain Azure-AsyncOperation header.
        /// </summary>
        LROsDeleteAsyncNoHeaderInRetryHeaders BeginDeleteAsyncNoHeaderInRetry();

        /// <summary>
        /// Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent
        /// calls to operation status do not contain Azure-AsyncOperation header.
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROsDeleteAsyncNoHeaderInRetryHeaders> BeginDeleteAsyncNoHeaderInRetryAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        LROsDeleteAsyncRetrySucceededHeaders BeginDeleteAsyncRetrySucceeded();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROsDeleteAsyncRetrySucceededHeaders> BeginDeleteAsyncRetrySucceededAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        LROsDeleteAsyncNoRetrySucceededHeaders BeginDeleteAsyncNoRetrySucceeded();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROsDeleteAsyncNoRetrySucceededHeaders> BeginDeleteAsyncNoRetrySucceededAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        LROsDeleteAsyncRetryFailedHeaders BeginDeleteAsyncRetryFailed();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROsDeleteAsyncRetryFailedHeaders> BeginDeleteAsyncRetryFailedAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        LROsDeleteAsyncRetrycanceledHeaders BeginDeleteAsyncRetrycanceled();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROsDeleteAsyncRetrycanceledHeaders> BeginDeleteAsyncRetrycanceledAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200
        /// with a response body after success.
        /// </summary>
        Sku BeginPost200WithPayload();

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200
        /// with a response body after success.
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Sku> BeginPost200WithPayloadAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers,
        /// Polls return a 200 with a response body after success
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROsPost202Retry200Headers BeginPost202Retry200(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers,
        /// Polls return a 200 with a response body after success
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROsPost202Retry200Headers> BeginPost202Retry200Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with
        /// noresponse body after success
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product BeginPost202NoRetry204(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with
        /// noresponse body after success
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginPost202NoRetry204Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product BeginPostAsyncRetrySucceeded(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginPostAsyncRetrySucceededAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product BeginPostAsyncNoRetrySucceeded(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginPostAsyncNoRetrySucceededAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROsPostAsyncRetryFailedHeaders BeginPostAsyncRetryFailed(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROsPostAsyncRetryFailedHeaders> BeginPostAsyncRetryFailedAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROsPostAsyncRetrycanceledHeaders BeginPostAsyncRetrycanceled(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROsPostAsyncRetrycanceledHeaders> BeginPostAsyncRetrycanceledAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
    }
}
