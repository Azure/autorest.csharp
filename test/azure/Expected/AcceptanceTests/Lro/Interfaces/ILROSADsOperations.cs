// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.Azure.AcceptanceTestsLro
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// LROSADsOperations operations.
    /// </summary>
    public partial interface ILROSADsOperations
    {
        ILROSADsOperationsWithHttpMessages WithHttpMessages();

        /// <summary>
        /// Long running put request, service returns a 400 to the initial request
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product PutNonRetry400(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 400 to the initial request
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> PutNonRetry400Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product PutNonRetry201Creating400(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> PutNonRetry201Creating400Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product PutNonRetry201Creating400InvalidJson(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> PutNonRetry201Creating400InvalidJsonAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the endpoint indicated in
        /// the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product PutAsyncRelativeRetry400(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the endpoint indicated in
        /// the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> PutAsyncRelativeRetry400Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 400 with an error body
        /// </summary>
        LROSADsDeleteNonRetry400Headers DeleteNonRetry400();

        /// <summary>
        /// Long running delete request, service returns a 400 with an error body
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDeleteNonRetry400Headers> DeleteNonRetry400Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 with a location header
        /// </summary>
        LROSADsDelete202NonRetry400Headers Delete202NonRetry400();

        /// <summary>
        /// Long running delete request, service returns a 202 with a location header
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDelete202NonRetry400Headers> Delete202NonRetry400Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        LROSADsDeleteAsyncRelativeRetry400Headers DeleteAsyncRelativeRetry400();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDeleteAsyncRelativeRetry400Headers> DeleteAsyncRelativeRetry400Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 400 with no error body
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPostNonRetry400Headers PostNonRetry400(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 400 with no error body
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPostNonRetry400Headers> PostNonRetry400Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 with a location header
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPost202NonRetry400Headers Post202NonRetry400(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 202 with a location header
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPost202NonRetry400Headers> Post202NonRetry400Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPostAsyncRelativeRetry400Headers PostAsyncRelativeRetry400(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPostAsyncRelativeRetry400Headers> PostAsyncRelativeRetry400Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 201 to the initial request with no payload
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product PutError201NoProvisioningStatePayload(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request with no payload
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> PutError201NoProvisioningStatePayloadAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product PutAsyncRelativeRetryNoStatus(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> PutAsyncRelativeRetryNoStatusAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product PutAsyncRelativeRetryNoStatusPayload(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> PutAsyncRelativeRetryNoStatusPayloadAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 204 to the initial request, indicating success.
        /// </summary>
        void Delete204Succeeded();

        /// <summary>
        /// Long running delete request, service returns a 204 to the initial request, indicating success.
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task Delete204SucceededAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        LROSADsDeleteAsyncRelativeRetryNoStatusHeaders DeleteAsyncRelativeRetryNoStatus();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDeleteAsyncRelativeRetryNoStatusHeaders> DeleteAsyncRelativeRetryNoStatusAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, without a location header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPost202NoLocationHeaders Post202NoLocation(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, without a location header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPost202NoLocationHeaders> Post202NoLocationAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPostAsyncRelativeRetryNoPayloadHeaders PostAsyncRelativeRetryNoPayload(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPostAsyncRelativeRetryNoPayloadHeaders> PostAsyncRelativeRetryNoPayloadAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that is not a valid json
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product Put200InvalidJson(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that is not a valid json
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> Put200InvalidJsonAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product PutAsyncRelativeRetryInvalidHeader(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> PutAsyncRelativeRetryInvalidHeaderAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product PutAsyncRelativeRetryInvalidJsonPolling(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> PutAsyncRelativeRetryInvalidJsonPollingAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request receing a reponse with an invalid
        /// 'Location' and 'Retry-After' headers
        /// </summary>
        LROSADsDelete202RetryInvalidHeaderHeaders Delete202RetryInvalidHeader();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request receing a reponse with an invalid
        /// 'Location' and 'Retry-After' headers
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDelete202RetryInvalidHeaderHeaders> Delete202RetryInvalidHeaderAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. The endpoint indicated in the
        /// Azure-AsyncOperation header is invalid
        /// </summary>
        LROSADsDeleteAsyncRelativeRetryInvalidHeaderHeaders DeleteAsyncRelativeRetryInvalidHeader();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. The endpoint indicated in the
        /// Azure-AsyncOperation header is invalid
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDeleteAsyncRelativeRetryInvalidHeaderHeaders> DeleteAsyncRelativeRetryInvalidHeaderAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        LROSADsDeleteAsyncRelativeRetryInvalidJsonPollingHeaders DeleteAsyncRelativeRetryInvalidJsonPolling();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDeleteAsyncRelativeRetryInvalidJsonPollingHeaders> DeleteAsyncRelativeRetryInvalidJsonPollingAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with invalid 'Location' and 'Retry-After'
        /// headers.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPost202RetryInvalidHeaderHeaders Post202RetryInvalidHeader(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with invalid 'Location' and 'Retry-After'
        /// headers.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPost202RetryInvalidHeaderHeaders> Post202RetryInvalidHeaderAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPostAsyncRelativeRetryInvalidHeaderHeaders PostAsyncRelativeRetryInvalidHeader(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPostAsyncRelativeRetryInvalidHeaderHeaders> PostAsyncRelativeRetryInvalidHeaderAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPostAsyncRelativeRetryInvalidJsonPollingHeaders PostAsyncRelativeRetryInvalidJsonPolling(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPostAsyncRelativeRetryInvalidJsonPollingHeaders> PostAsyncRelativeRetryInvalidJsonPollingAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 400 to the initial request
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product BeginPutNonRetry400(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 400 to the initial request
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginPutNonRetry400Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product BeginPutNonRetry201Creating400(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginPutNonRetry201Creating400Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product BeginPutNonRetry201Creating400InvalidJson(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginPutNonRetry201Creating400InvalidJsonAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the endpoint indicated in
        /// the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product BeginPutAsyncRelativeRetry400(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the endpoint indicated in
        /// the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginPutAsyncRelativeRetry400Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 400 with an error body
        /// </summary>
        LROSADsDeleteNonRetry400Headers BeginDeleteNonRetry400();

        /// <summary>
        /// Long running delete request, service returns a 400 with an error body
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDeleteNonRetry400Headers> BeginDeleteNonRetry400Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 with a location header
        /// </summary>
        LROSADsDelete202NonRetry400Headers BeginDelete202NonRetry400();

        /// <summary>
        /// Long running delete request, service returns a 202 with a location header
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDelete202NonRetry400Headers> BeginDelete202NonRetry400Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        LROSADsDeleteAsyncRelativeRetry400Headers BeginDeleteAsyncRelativeRetry400();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDeleteAsyncRelativeRetry400Headers> BeginDeleteAsyncRelativeRetry400Async(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 400 with no error body
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPostNonRetry400Headers BeginPostNonRetry400(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 400 with no error body
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPostNonRetry400Headers> BeginPostNonRetry400Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 with a location header
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPost202NonRetry400Headers BeginPost202NonRetry400(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 202 with a location header
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPost202NonRetry400Headers> BeginPost202NonRetry400Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPostAsyncRelativeRetry400Headers BeginPostAsyncRelativeRetry400(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPostAsyncRelativeRetry400Headers> BeginPostAsyncRelativeRetry400Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 201 to the initial request with no payload
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product BeginPutError201NoProvisioningStatePayload(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request with no payload
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginPutError201NoProvisioningStatePayloadAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product BeginPutAsyncRelativeRetryNoStatus(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginPutAsyncRelativeRetryNoStatusAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product BeginPutAsyncRelativeRetryNoStatusPayload(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginPutAsyncRelativeRetryNoStatusPayloadAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 204 to the initial request, indicating success.
        /// </summary>
        void BeginDelete204Succeeded();

        /// <summary>
        /// Long running delete request, service returns a 204 to the initial request, indicating success.
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task BeginDelete204SucceededAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        LROSADsDeleteAsyncRelativeRetryNoStatusHeaders BeginDeleteAsyncRelativeRetryNoStatus();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDeleteAsyncRelativeRetryNoStatusHeaders> BeginDeleteAsyncRelativeRetryNoStatusAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, without a location header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPost202NoLocationHeaders BeginPost202NoLocation(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, without a location header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPost202NoLocationHeaders> BeginPost202NoLocationAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPostAsyncRelativeRetryNoPayloadHeaders BeginPostAsyncRelativeRetryNoPayload(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPostAsyncRelativeRetryNoPayloadHeaders> BeginPostAsyncRelativeRetryNoPayloadAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that is not a valid json
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product BeginPut200InvalidJson(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that is not a valid json
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginPut200InvalidJsonAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product BeginPutAsyncRelativeRetryInvalidHeader(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginPutAsyncRelativeRetryInvalidHeaderAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        Product BeginPutAsyncRelativeRetryInvalidJsonPolling(Product product = default(Product));

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<Product> BeginPutAsyncRelativeRetryInvalidJsonPollingAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request receing a reponse with an invalid
        /// 'Location' and 'Retry-After' headers
        /// </summary>
        LROSADsDelete202RetryInvalidHeaderHeaders BeginDelete202RetryInvalidHeader();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request receing a reponse with an invalid
        /// 'Location' and 'Retry-After' headers
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDelete202RetryInvalidHeaderHeaders> BeginDelete202RetryInvalidHeaderAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. The endpoint indicated in the
        /// Azure-AsyncOperation header is invalid
        /// </summary>
        LROSADsDeleteAsyncRelativeRetryInvalidHeaderHeaders BeginDeleteAsyncRelativeRetryInvalidHeader();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. The endpoint indicated in the
        /// Azure-AsyncOperation header is invalid
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDeleteAsyncRelativeRetryInvalidHeaderHeaders> BeginDeleteAsyncRelativeRetryInvalidHeaderAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        LROSADsDeleteAsyncRelativeRetryInvalidJsonPollingHeaders BeginDeleteAsyncRelativeRetryInvalidJsonPolling();

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsDeleteAsyncRelativeRetryInvalidJsonPollingHeaders> BeginDeleteAsyncRelativeRetryInvalidJsonPollingAsync(CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with invalid 'Location' and 'Retry-After'
        /// headers.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPost202RetryInvalidHeaderHeaders BeginPost202RetryInvalidHeader(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with invalid 'Location' and 'Retry-After'
        /// headers.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPost202RetryInvalidHeaderHeaders> BeginPost202RetryInvalidHeaderAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPostAsyncRelativeRetryInvalidHeaderHeaders BeginPostAsyncRelativeRetryInvalidHeader(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPostAsyncRelativeRetryInvalidHeaderHeaders> BeginPostAsyncRelativeRetryInvalidHeaderAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        LROSADsPostAsyncRelativeRetryInvalidJsonPollingHeaders BeginPostAsyncRelativeRetryInvalidJsonPolling(Product product = default(Product));

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<LROSADsPostAsyncRelativeRetryInvalidJsonPollingHeaders> BeginPostAsyncRelativeRetryInvalidJsonPollingAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken));
    }
}
