// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.Azure.AcceptanceTestsLro
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// LROSADsOperations operations.
    /// </summary>
    public partial class LROSADsOperations : ILROSADsOperations
    {
        /// <summary>
        /// Initializes a new instance of the LROSADsOperations class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public LROSADsOperations(ILROSADsOperationsWithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private ILROSADsOperationsWithHttpMessages OperationsWithHttpMessages { get; set; }

        public ILROSADsOperationsWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Long running put request, service returns a 400 to the initial request
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public Product PutNonRetry400(Product product = default(Product))
        {
            return PutNonRetry400Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 400 to the initial request
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Product> PutNonRetry400Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutNonRetry400Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public Product PutNonRetry201Creating400(Product product = default(Product))
        {
            return PutNonRetry201Creating400Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Product> PutNonRetry201Creating400Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutNonRetry201Creating400Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public Product PutNonRetry201Creating400InvalidJson(Product product = default(Product))
        {
            return PutNonRetry201Creating400InvalidJsonAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Product> PutNonRetry201Creating400InvalidJsonAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutNonRetry201Creating400InvalidJsonAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the endpoint indicated in
        /// the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public Product PutAsyncRelativeRetry400(Product product = default(Product))
        {
            return PutAsyncRelativeRetry400Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the endpoint indicated in
        /// the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Product> PutAsyncRelativeRetry400Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutAsyncRelativeRetry400Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 400 with an error body
        /// </summary>
        public LROSADsDeleteNonRetry400Headers DeleteNonRetry400()
        {
            return DeleteNonRetry400Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 400 with an error body
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDeleteNonRetry400Headers> DeleteNonRetry400Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.DeleteNonRetry400Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 with a location header
        /// </summary>
        public LROSADsDelete202NonRetry400Headers Delete202NonRetry400()
        {
            return Delete202NonRetry400Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 with a location header
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDelete202NonRetry400Headers> Delete202NonRetry400Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Delete202NonRetry400Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        public LROSADsDeleteAsyncRelativeRetry400Headers DeleteAsyncRelativeRetry400()
        {
            return DeleteAsyncRelativeRetry400Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDeleteAsyncRelativeRetry400Headers> DeleteAsyncRelativeRetry400Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.DeleteAsyncRelativeRetry400Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 400 with no error body
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPostNonRetry400Headers PostNonRetry400(Product product = default(Product))
        {
            return PostNonRetry400Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 400 with no error body
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPostNonRetry400Headers> PostNonRetry400Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PostNonRetry400Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 with a location header
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPost202NonRetry400Headers Post202NonRetry400(Product product = default(Product))
        {
            return Post202NonRetry400Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 with a location header
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPost202NonRetry400Headers> Post202NonRetry400Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Post202NonRetry400Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPostAsyncRelativeRetry400Headers PostAsyncRelativeRetry400(Product product = default(Product))
        {
            return PostAsyncRelativeRetry400Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPostAsyncRelativeRetry400Headers> PostAsyncRelativeRetry400Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PostAsyncRelativeRetry400Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request with no payload
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public Product PutError201NoProvisioningStatePayload(Product product = default(Product))
        {
            return PutError201NoProvisioningStatePayloadAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request with no payload
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Product> PutError201NoProvisioningStatePayloadAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutError201NoProvisioningStatePayloadAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public Product PutAsyncRelativeRetryNoStatus(Product product = default(Product))
        {
            return PutAsyncRelativeRetryNoStatusAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Product> PutAsyncRelativeRetryNoStatusAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutAsyncRelativeRetryNoStatusAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public Product PutAsyncRelativeRetryNoStatusPayload(Product product = default(Product))
        {
            return PutAsyncRelativeRetryNoStatusPayloadAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Product> PutAsyncRelativeRetryNoStatusPayloadAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutAsyncRelativeRetryNoStatusPayloadAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 204 to the initial request, indicating success.
        /// </summary>
        public void Delete204Succeeded()
        {
            Delete204SucceededAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 204 to the initial request, indicating success.
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task Delete204SucceededAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.Delete204SucceededAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        public LROSADsDeleteAsyncRelativeRetryNoStatusHeaders DeleteAsyncRelativeRetryNoStatus()
        {
            return DeleteAsyncRelativeRetryNoStatusAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDeleteAsyncRelativeRetryNoStatusHeaders> DeleteAsyncRelativeRetryNoStatusAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.DeleteAsyncRelativeRetryNoStatusAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, without a location header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPost202NoLocationHeaders Post202NoLocation(Product product = default(Product))
        {
            return Post202NoLocationAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, without a location header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPost202NoLocationHeaders> Post202NoLocationAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Post202NoLocationAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPostAsyncRelativeRetryNoPayloadHeaders PostAsyncRelativeRetryNoPayload(Product product = default(Product))
        {
            return PostAsyncRelativeRetryNoPayloadAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPostAsyncRelativeRetryNoPayloadHeaders> PostAsyncRelativeRetryNoPayloadAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PostAsyncRelativeRetryNoPayloadAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that is not a valid json
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public Product Put200InvalidJson(Product product = default(Product))
        {
            return Put200InvalidJsonAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that is not a valid json
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Product> Put200InvalidJsonAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Put200InvalidJsonAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public Product PutAsyncRelativeRetryInvalidHeader(Product product = default(Product))
        {
            return PutAsyncRelativeRetryInvalidHeaderAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Product> PutAsyncRelativeRetryInvalidHeaderAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutAsyncRelativeRetryInvalidHeaderAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public Product PutAsyncRelativeRetryInvalidJsonPolling(Product product = default(Product))
        {
            return PutAsyncRelativeRetryInvalidJsonPollingAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Product> PutAsyncRelativeRetryInvalidJsonPollingAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutAsyncRelativeRetryInvalidJsonPollingAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request receing a reponse with an invalid
        /// 'Location' and 'Retry-After' headers
        /// </summary>
        public LROSADsDelete202RetryInvalidHeaderHeaders Delete202RetryInvalidHeader()
        {
            return Delete202RetryInvalidHeaderAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request receing a reponse with an invalid
        /// 'Location' and 'Retry-After' headers
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDelete202RetryInvalidHeaderHeaders> Delete202RetryInvalidHeaderAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Delete202RetryInvalidHeaderAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. The endpoint indicated in the
        /// Azure-AsyncOperation header is invalid
        /// </summary>
        public LROSADsDeleteAsyncRelativeRetryInvalidHeaderHeaders DeleteAsyncRelativeRetryInvalidHeader()
        {
            return DeleteAsyncRelativeRetryInvalidHeaderAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. The endpoint indicated in the
        /// Azure-AsyncOperation header is invalid
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDeleteAsyncRelativeRetryInvalidHeaderHeaders> DeleteAsyncRelativeRetryInvalidHeaderAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.DeleteAsyncRelativeRetryInvalidHeaderAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        public LROSADsDeleteAsyncRelativeRetryInvalidJsonPollingHeaders DeleteAsyncRelativeRetryInvalidJsonPolling()
        {
            return DeleteAsyncRelativeRetryInvalidJsonPollingAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDeleteAsyncRelativeRetryInvalidJsonPollingHeaders> DeleteAsyncRelativeRetryInvalidJsonPollingAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.DeleteAsyncRelativeRetryInvalidJsonPollingAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with invalid 'Location' and 'Retry-After'
        /// headers.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPost202RetryInvalidHeaderHeaders Post202RetryInvalidHeader(Product product = default(Product))
        {
            return Post202RetryInvalidHeaderAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with invalid 'Location' and 'Retry-After'
        /// headers.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPost202RetryInvalidHeaderHeaders> Post202RetryInvalidHeaderAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Post202RetryInvalidHeaderAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPostAsyncRelativeRetryInvalidHeaderHeaders PostAsyncRelativeRetryInvalidHeader(Product product = default(Product))
        {
            return PostAsyncRelativeRetryInvalidHeaderAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPostAsyncRelativeRetryInvalidHeaderHeaders> PostAsyncRelativeRetryInvalidHeaderAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PostAsyncRelativeRetryInvalidHeaderAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPostAsyncRelativeRetryInvalidJsonPollingHeaders PostAsyncRelativeRetryInvalidJsonPolling(Product product = default(Product))
        {
            return PostAsyncRelativeRetryInvalidJsonPollingAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPostAsyncRelativeRetryInvalidJsonPollingHeaders> PostAsyncRelativeRetryInvalidJsonPollingAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PostAsyncRelativeRetryInvalidJsonPollingAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 400 to the initial request
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public Product BeginPutNonRetry400(Product product = default(Product))
        {
            return BeginPutNonRetry400Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 400 to the initial request
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Product> BeginPutNonRetry400Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutNonRetry400Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public Product BeginPutNonRetry201Creating400(Product product = default(Product))
        {
            return BeginPutNonRetry201Creating400Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Product> BeginPutNonRetry201Creating400Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutNonRetry201Creating400Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public Product BeginPutNonRetry201Creating400InvalidJson(Product product = default(Product))
        {
            return BeginPutNonRetry201Creating400InvalidJsonAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Product> BeginPutNonRetry201Creating400InvalidJsonAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutNonRetry201Creating400InvalidJsonAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the endpoint indicated in
        /// the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public Product BeginPutAsyncRelativeRetry400(Product product = default(Product))
        {
            return BeginPutAsyncRelativeRetry400Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the endpoint indicated in
        /// the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Product> BeginPutAsyncRelativeRetry400Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutAsyncRelativeRetry400Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 400 with an error body
        /// </summary>
        public LROSADsDeleteNonRetry400Headers BeginDeleteNonRetry400()
        {
            return BeginDeleteNonRetry400Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 400 with an error body
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDeleteNonRetry400Headers> BeginDeleteNonRetry400Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDeleteNonRetry400Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 with a location header
        /// </summary>
        public LROSADsDelete202NonRetry400Headers BeginDelete202NonRetry400()
        {
            return BeginDelete202NonRetry400Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 with a location header
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDelete202NonRetry400Headers> BeginDelete202NonRetry400Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDelete202NonRetry400Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        public LROSADsDeleteAsyncRelativeRetry400Headers BeginDeleteAsyncRelativeRetry400()
        {
            return BeginDeleteAsyncRelativeRetry400Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDeleteAsyncRelativeRetry400Headers> BeginDeleteAsyncRelativeRetry400Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDeleteAsyncRelativeRetry400Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 400 with no error body
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPostNonRetry400Headers BeginPostNonRetry400(Product product = default(Product))
        {
            return BeginPostNonRetry400Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 400 with no error body
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPostNonRetry400Headers> BeginPostNonRetry400Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPostNonRetry400Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 with a location header
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPost202NonRetry400Headers BeginPost202NonRetry400(Product product = default(Product))
        {
            return BeginPost202NonRetry400Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 with a location header
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPost202NonRetry400Headers> BeginPost202NonRetry400Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPost202NonRetry400Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPostAsyncRelativeRetry400Headers BeginPostAsyncRelativeRetry400(Product product = default(Product))
        {
            return BeginPostAsyncRelativeRetry400Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPostAsyncRelativeRetry400Headers> BeginPostAsyncRelativeRetry400Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPostAsyncRelativeRetry400Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request with no payload
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public Product BeginPutError201NoProvisioningStatePayload(Product product = default(Product))
        {
            return BeginPutError201NoProvisioningStatePayloadAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 201 to the initial request with no payload
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Product> BeginPutError201NoProvisioningStatePayloadAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutError201NoProvisioningStatePayloadAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public Product BeginPutAsyncRelativeRetryNoStatus(Product product = default(Product))
        {
            return BeginPutAsyncRelativeRetryNoStatusAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Product> BeginPutAsyncRelativeRetryNoStatusAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutAsyncRelativeRetryNoStatusAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public Product BeginPutAsyncRelativeRetryNoStatusPayload(Product product = default(Product))
        {
            return BeginPutAsyncRelativeRetryNoStatusPayloadAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Product> BeginPutAsyncRelativeRetryNoStatusPayloadAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutAsyncRelativeRetryNoStatusPayloadAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 204 to the initial request, indicating success.
        /// </summary>
        public void BeginDelete204Succeeded()
        {
            BeginDelete204SucceededAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 204 to the initial request, indicating success.
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task BeginDelete204SucceededAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            (await OperationsWithHttpMessages.BeginDelete204SucceededAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        public LROSADsDeleteAsyncRelativeRetryNoStatusHeaders BeginDeleteAsyncRelativeRetryNoStatus()
        {
            return BeginDeleteAsyncRelativeRetryNoStatusAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDeleteAsyncRelativeRetryNoStatusHeaders> BeginDeleteAsyncRelativeRetryNoStatusAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDeleteAsyncRelativeRetryNoStatusAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, without a location header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPost202NoLocationHeaders BeginPost202NoLocation(Product product = default(Product))
        {
            return BeginPost202NoLocationAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, without a location header.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPost202NoLocationHeaders> BeginPost202NoLocationAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPost202NoLocationAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPostAsyncRelativeRetryNoPayloadHeaders BeginPostAsyncRelativeRetryNoPayload(Product product = default(Product))
        {
            return BeginPostAsyncRelativeRetryNoPayloadAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPostAsyncRelativeRetryNoPayloadHeaders> BeginPostAsyncRelativeRetryNoPayloadAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPostAsyncRelativeRetryNoPayloadAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that is not a valid json
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public Product BeginPut200InvalidJson(Product product = default(Product))
        {
            return BeginPut200InvalidJsonAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that is not a valid json
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Product> BeginPut200InvalidJsonAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPut200InvalidJsonAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public Product BeginPutAsyncRelativeRetryInvalidHeader(Product product = default(Product))
        {
            return BeginPutAsyncRelativeRetryInvalidHeaderAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Product> BeginPutAsyncRelativeRetryInvalidHeaderAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutAsyncRelativeRetryInvalidHeaderAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public Product BeginPutAsyncRelativeRetryInvalidJsonPolling(Product product = default(Product))
        {
            return BeginPutAsyncRelativeRetryInvalidJsonPollingAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Product> BeginPutAsyncRelativeRetryInvalidJsonPollingAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutAsyncRelativeRetryInvalidJsonPollingAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request receing a reponse with an invalid
        /// 'Location' and 'Retry-After' headers
        /// </summary>
        public LROSADsDelete202RetryInvalidHeaderHeaders BeginDelete202RetryInvalidHeader()
        {
            return BeginDelete202RetryInvalidHeaderAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request receing a reponse with an invalid
        /// 'Location' and 'Retry-After' headers
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDelete202RetryInvalidHeaderHeaders> BeginDelete202RetryInvalidHeaderAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDelete202RetryInvalidHeaderAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. The endpoint indicated in the
        /// Azure-AsyncOperation header is invalid
        /// </summary>
        public LROSADsDeleteAsyncRelativeRetryInvalidHeaderHeaders BeginDeleteAsyncRelativeRetryInvalidHeader()
        {
            return BeginDeleteAsyncRelativeRetryInvalidHeaderAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. The endpoint indicated in the
        /// Azure-AsyncOperation header is invalid
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDeleteAsyncRelativeRetryInvalidHeaderHeaders> BeginDeleteAsyncRelativeRetryInvalidHeaderAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDeleteAsyncRelativeRetryInvalidHeaderAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        public LROSADsDeleteAsyncRelativeRetryInvalidJsonPollingHeaders BeginDeleteAsyncRelativeRetryInvalidJsonPolling()
        {
            return BeginDeleteAsyncRelativeRetryInvalidJsonPollingAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the
        /// Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsDeleteAsyncRelativeRetryInvalidJsonPollingHeaders> BeginDeleteAsyncRelativeRetryInvalidJsonPollingAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDeleteAsyncRelativeRetryInvalidJsonPollingAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with invalid 'Location' and 'Retry-After'
        /// headers.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPost202RetryInvalidHeaderHeaders BeginPost202RetryInvalidHeader(Product product = default(Product))
        {
            return BeginPost202RetryInvalidHeaderAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with invalid 'Location' and 'Retry-After'
        /// headers.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPost202RetryInvalidHeaderHeaders> BeginPost202RetryInvalidHeaderAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPost202RetryInvalidHeaderAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPostAsyncRelativeRetryInvalidHeaderHeaders BeginPostAsyncRelativeRetryInvalidHeader(Product product = default(Product))
        {
            return BeginPostAsyncRelativeRetryInvalidHeaderAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPostAsyncRelativeRetryInvalidHeaderHeaders> BeginPostAsyncRelativeRetryInvalidHeaderAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPostAsyncRelativeRetryInvalidHeaderAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LROSADsPostAsyncRelativeRetryInvalidJsonPollingHeaders BeginPostAsyncRelativeRetryInvalidJsonPolling(Product product = default(Product))
        {
            return BeginPostAsyncRelativeRetryInvalidJsonPollingAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LROSADsPostAsyncRelativeRetryInvalidJsonPollingHeaders> BeginPostAsyncRelativeRetryInvalidJsonPollingAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPostAsyncRelativeRetryInvalidJsonPollingAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

    }
}
