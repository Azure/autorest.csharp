// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

namespace Fixtures.Azure.AcceptanceTestsLro
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// LRORetrysOperations operations.
    /// </summary>
    public partial class LRORetrysOperations : ILRORetrysOperations
    {
        /// <summary>
        /// Initializes a new instance of the LRORetrysOperations class.
        /// </summary>
        /// <param name='operationsWithHttpMessages'>
        /// Reference to the low level operations
        /// </param>
        /// <exception cref='System.ArgumentNullException'>
        /// Thrown when a required parameter is null.
        /// </exception>
        public LRORetrysOperations(ILRORetrysOperationsWithHttpMessages operationsWithHttpMessages)
        {
            if (operationsWithHttpMessages == null)
            {
                throw new System.ArgumentNullException(nameof(operationsWithHttpMessages));
            }
            OperationsWithHttpMessages = operationsWithHttpMessages;
        }

        private ILRORetrysOperationsWithHttpMessages OperationsWithHttpMessages { get; set; }

        public ILRORetrysOperationsWithHttpMessages WithHttpMessages()
        {
            return OperationsWithHttpMessages;
        }

        /// <summary>
        /// Long running put request, service returns a 500, then a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public Product Put201CreatingSucceeded200(Product product = default(Product))
        {
            return Put201CreatingSucceeded200Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 500, then a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Product> Put201CreatingSucceeded200Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Put201CreatingSucceeded200Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 500, then a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public Product PutAsyncRelativeRetrySucceeded(Product product = default(Product))
        {
            return PutAsyncRelativeRetrySucceededAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 500, then a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Product> PutAsyncRelativeRetrySucceededAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PutAsyncRelativeRetrySucceededAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 500, then a  202 to the initial request, with an entity that
        /// contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        public Product DeleteProvisioning202Accepted200Succeeded()
        {
            return DeleteProvisioning202Accepted200SucceededAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 500, then a  202 to the initial request, with an entity that
        /// contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Product> DeleteProvisioning202Accepted200SucceededAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.DeleteProvisioning202Accepted200SucceededAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 500, then a 202 to the initial request. Polls return this value
        /// until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
        /// </summary>
        public LRORetrysDelete202Retry200Headers Delete202Retry200()
        {
            return Delete202Retry200Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 500, then a 202 to the initial request. Polls return this value
        /// until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LRORetrysDelete202Retry200Headers> Delete202Retry200Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Delete202Retry200Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 500, then a 202 to the initial request. Poll the endpoint indicated
        /// in the Azure-AsyncOperation header for operation status
        /// </summary>
        public LRORetrysDeleteAsyncRelativeRetrySucceededHeaders DeleteAsyncRelativeRetrySucceeded()
        {
            return DeleteAsyncRelativeRetrySucceededAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 500, then a 202 to the initial request. Poll the endpoint indicated
        /// in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LRORetrysDeleteAsyncRelativeRetrySucceededHeaders> DeleteAsyncRelativeRetrySucceededAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.DeleteAsyncRelativeRetrySucceededAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 500, then a 202 to the initial request, with 'Location' and
        /// 'Retry-After' headers, Polls return a 200 with a response body after success
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LRORetrysPost202Retry200Headers Post202Retry200(Product product = default(Product))
        {
            return Post202Retry200Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 500, then a 202 to the initial request, with 'Location' and
        /// 'Retry-After' headers, Polls return a 200 with a response body after success
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LRORetrysPost202Retry200Headers> Post202Retry200Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.Post202Retry200Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 500, then a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LRORetrysPostAsyncRelativeRetrySucceededHeaders PostAsyncRelativeRetrySucceeded(Product product = default(Product))
        {
            return PostAsyncRelativeRetrySucceededAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 500, then a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LRORetrysPostAsyncRelativeRetrySucceededHeaders> PostAsyncRelativeRetrySucceededAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.PostAsyncRelativeRetrySucceededAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 500, then a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public Product BeginPut201CreatingSucceeded200(Product product = default(Product))
        {
            return BeginPut201CreatingSucceeded200Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 500, then a 201 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Product> BeginPut201CreatingSucceeded200Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPut201CreatingSucceeded200Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running put request, service returns a 500, then a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public Product BeginPutAsyncRelativeRetrySucceeded(Product product = default(Product))
        {
            return BeginPutAsyncRelativeRetrySucceededAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running put request, service returns a 500, then a 200 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Product> BeginPutAsyncRelativeRetrySucceededAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPutAsyncRelativeRetrySucceededAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 500, then a  202 to the initial request, with an entity that
        /// contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        public Product BeginDeleteProvisioning202Accepted200Succeeded()
        {
            return BeginDeleteProvisioning202Accepted200SucceededAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 500, then a  202 to the initial request, with an entity that
        /// contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with
        /// ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<Product> BeginDeleteProvisioning202Accepted200SucceededAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDeleteProvisioning202Accepted200SucceededAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 500, then a 202 to the initial request. Polls return this value
        /// until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
        /// </summary>
        public LRORetrysDelete202Retry200Headers BeginDelete202Retry200()
        {
            return BeginDelete202Retry200Async().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 500, then a 202 to the initial request. Polls return this value
        /// until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LRORetrysDelete202Retry200Headers> BeginDelete202Retry200Async(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDelete202Retry200Async(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running delete request, service returns a 500, then a 202 to the initial request. Poll the endpoint indicated
        /// in the Azure-AsyncOperation header for operation status
        /// </summary>
        public LRORetrysDeleteAsyncRelativeRetrySucceededHeaders BeginDeleteAsyncRelativeRetrySucceeded()
        {
            return BeginDeleteAsyncRelativeRetrySucceededAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running delete request, service returns a 500, then a 202 to the initial request. Poll the endpoint indicated
        /// in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LRORetrysDeleteAsyncRelativeRetrySucceededHeaders> BeginDeleteAsyncRelativeRetrySucceededAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginDeleteAsyncRelativeRetrySucceededAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 500, then a 202 to the initial request, with 'Location' and
        /// 'Retry-After' headers, Polls return a 200 with a response body after success
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LRORetrysPost202Retry200Headers BeginPost202Retry200(Product product = default(Product))
        {
            return BeginPost202Retry200Async(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 500, then a 202 to the initial request, with 'Location' and
        /// 'Retry-After' headers, Polls return a 200 with a response body after success
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LRORetrysPost202Retry200Headers> BeginPost202Retry200Async(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPost202Retry200Async(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

        /// <summary>
        /// Long running post request, service returns a 500, then a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        public LRORetrysPostAsyncRelativeRetrySucceededHeaders BeginPostAsyncRelativeRetrySucceeded(Product product = default(Product))
        {
            return BeginPostAsyncRelativeRetrySucceededAsync(product).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Long running post request, service returns a 500, then a 202 to the initial request, with an entity that contains
        /// ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
        /// </summary>
        /// <param name='product'>
        /// Product to put
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<LRORetrysPostAsyncRelativeRetrySucceededHeaders> BeginPostAsyncRelativeRetrySucceededAsync(Product product = default(Product), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await OperationsWithHttpMessages.BeginPostAsyncRelativeRetrySucceededAsync(product, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }

    }
}
