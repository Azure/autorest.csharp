// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace _Type.Model.Inheritance.Samples
{
    public class Samples_InheritanceClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PostValid()
        {
            var client = new InheritanceClient();

            var data = new
            {
                smart = true,
                age = 1234,
                name = "<name>",
            };

            Response response = client.PostValid(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetValid()
        {
            var client = new InheritanceClient();

            Response response = client.GetValid(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("smart").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutValid()
        {
            var client = new InheritanceClient();

            var data = new
            {
                smart = true,
                age = 1234,
                name = "<name>",
            };

            Response response = client.PutValid(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("smart").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetModel()
        {
            var client = new InheritanceClient();

            Response response = client.GetModel(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutModel()
        {
            var client = new InheritanceClient();

            var data = new
            {
                age = 1234,
            };

            Response response = client.PutModel(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRecursiveModel()
        {
            var client = new InheritanceClient();

            Response response = client.GetRecursiveModel(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutRecursiveModel()
        {
            var client = new InheritanceClient();

            var data = new
            {
                age = 1234,
            };

            Response response = client.PutRecursiveModel(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetMissingDiscriminator()
        {
            var client = new InheritanceClient();

            Response response = client.GetMissingDiscriminator(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWrongDiscriminator()
        {
            var client = new InheritanceClient();

            Response response = client.GetWrongDiscriminator(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("age").ToString());
        }
    }
}
