// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Type.Model.Generic.Models;

namespace _Type.Model.Generic.Samples
{
    public partial class Samples_GenericClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Generic_GenericType_ShortVersion()
        {
            GenericClient client = new GenericClient();

            using RequestContent content = RequestContent.Create(new
            {
                kind = "Int32Values",
                values = new object[]
            {
1234
            },
                value = 1234,
            });
            Response response = client.GenericType(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Generic_GenericType_ShortVersion_Async()
        {
            GenericClient client = new GenericClient();

            using RequestContent content = RequestContent.Create(new
            {
                kind = "Int32Values",
                values = new object[]
            {
1234
            },
                value = 1234,
            });
            Response response = await client.GenericTypeAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Generic_GenericType_ShortVersion_Convenience()
        {
            GenericClient client = new GenericClient();

            Int32Type input = new Int32Type(new int[] { 1234 }, 1234);
            Response response = client.GenericType(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Generic_GenericType_ShortVersion_Convenience_Async()
        {
            GenericClient client = new GenericClient();

            Int32Type input = new Int32Type(new int[] { 1234 }, 1234);
            Response response = await client.GenericTypeAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Generic_GenericType_AllParameters()
        {
            GenericClient client = new GenericClient();

            using RequestContent content = RequestContent.Create(new
            {
                kind = "Int32Values",
                values = new object[]
            {
1234
            },
                value = 1234,
            });
            Response response = client.GenericType(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Generic_GenericType_AllParameters_Async()
        {
            GenericClient client = new GenericClient();

            using RequestContent content = RequestContent.Create(new
            {
                kind = "Int32Values",
                values = new object[]
            {
1234
            },
                value = 1234,
            });
            Response response = await client.GenericTypeAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Generic_GenericType_AllParameters_Convenience()
        {
            GenericClient client = new GenericClient();

            Int32Type input = new Int32Type(new int[] { 1234 }, 1234);
            Response response = client.GenericType(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Generic_GenericType_AllParameters_Convenience_Async()
        {
            GenericClient client = new GenericClient();

            Int32Type input = new Int32Type(new int[] { 1234 }, 1234);
            Response response = await client.GenericTypeAsync(input);
        }
    }
}
