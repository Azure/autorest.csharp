// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace _Type.Model.Generic.Models
{
    /// <summary> The Int32Type_kind. </summary>
    public readonly partial struct Int32TypeKind : IEquatable<Int32TypeKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Int32TypeKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Int32TypeKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string Int32ValuesValue = "Int32Values";

        /// <summary> Int32Values. </summary>
        public static Int32TypeKind Int32Values { get; } = new Int32TypeKind(Int32ValuesValue);
        /// <summary> Determines if two <see cref="Int32TypeKind"/> values are the same. </summary>
        public static bool operator ==(Int32TypeKind left, Int32TypeKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Int32TypeKind"/> values are not the same. </summary>
        public static bool operator !=(Int32TypeKind left, Int32TypeKind right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Int32TypeKind"/>. </summary>
        public static implicit operator Int32TypeKind(string value) => new Int32TypeKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Int32TypeKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Int32TypeKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
