// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace _Type.Model.Generic.Models
{
    /// <summary> Facets an int32 field by the specified value ranges. </summary>
    public partial class Int32Type : NumericType
    {
        /// <summary> Initializes a new instance of <see cref="Int32Type"/>. </summary>
        /// <param name="values"> This model is used to perform facet processing on fields based on a specified range of values. </param>
        /// <param name="value"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="values"/> is null. </exception>
        public Int32Type(IEnumerable<int> values, int value) : base(values, value)
        {
            Argument.AssertNotNull(values, nameof(values));
        }

        /// <summary> Initializes a new instance of <see cref="Int32Type"/>. </summary>
        /// <param name="values"> This model is used to perform facet processing on fields based on a specified range of values. </param>
        /// <param name="value"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="kind"> The facet type. </param>
        internal Int32Type(IList<int> values, int value, IDictionary<string, BinaryData> serializedAdditionalRawData, Int32TypeKind kind) : base(values, value, serializedAdditionalRawData)
        {
            Kind = kind;
        }

        /// <summary> Initializes a new instance of <see cref="Int32Type"/> for deserialization. </summary>
        internal Int32Type()
        {
        }

        /// <summary> The facet type. </summary>
        public Int32TypeKind Kind { get; } = Int32TypeKind.Int32Values;
    }
}
