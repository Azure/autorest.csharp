// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Type.Model.Empty;
using _Type.Model.Empty.Models;

namespace _Type.Model.Empty.Samples
{
    public class Samples_EmptyClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutEmpty()
        {
            EmptyClient client = new EmptyClient();

            RequestContent content = RequestContent.Create(new object());
            Response response = client.PutEmpty(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutEmpty_Async()
        {
            EmptyClient client = new EmptyClient();

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.PutEmptyAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutEmpty_Convenience()
        {
            EmptyClient client = new EmptyClient();

            EmptyInput input = new EmptyInput();
            Response response = client.PutEmpty(input);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutEmpty_Convenience_Async()
        {
            EmptyClient client = new EmptyClient();

            EmptyInput input = new EmptyInput();
            Response response = await client.PutEmptyAsync(input);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutEmpty_AllParameters()
        {
            EmptyClient client = new EmptyClient();

            RequestContent content = RequestContent.Create(new object());
            Response response = client.PutEmpty(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutEmpty_AllParameters_Async()
        {
            EmptyClient client = new EmptyClient();

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.PutEmptyAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutEmpty_AllParameters_Convenience()
        {
            EmptyClient client = new EmptyClient();

            EmptyInput input = new EmptyInput();
            Response response = client.PutEmpty(input);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutEmpty_AllParameters_Convenience_Async()
        {
            EmptyClient client = new EmptyClient();

            EmptyInput input = new EmptyInput();
            Response response = await client.PutEmptyAsync(input);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEmpty()
        {
            EmptyClient client = new EmptyClient();

            Response response = client.GetEmpty(null);

            Console.WriteLine(response.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEmpty_Async()
        {
            EmptyClient client = new EmptyClient();

            Response response = await client.GetEmptyAsync(null);

            Console.WriteLine(response.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEmpty_Convenience()
        {
            EmptyClient client = new EmptyClient();

            Response<EmptyOutput> response = client.GetEmpty();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEmpty_Convenience_Async()
        {
            EmptyClient client = new EmptyClient();

            Response<EmptyOutput> response = await client.GetEmptyAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEmpty_AllParameters()
        {
            EmptyClient client = new EmptyClient();

            Response response = client.GetEmpty(null);

            Console.WriteLine(response.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEmpty_AllParameters_Async()
        {
            EmptyClient client = new EmptyClient();

            Response response = await client.GetEmptyAsync(null);

            Console.WriteLine(response.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetEmpty_AllParameters_Convenience()
        {
            EmptyClient client = new EmptyClient();

            Response<EmptyOutput> response = client.GetEmpty();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetEmpty_AllParameters_Convenience_Async()
        {
            EmptyClient client = new EmptyClient();

            Response<EmptyOutput> response = await client.GetEmptyAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PostRoundTripEmpty()
        {
            EmptyClient client = new EmptyClient();

            RequestContent content = RequestContent.Create(new object());
            Response response = client.PostRoundTripEmpty(content);

            Console.WriteLine(response.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PostRoundTripEmpty_Async()
        {
            EmptyClient client = new EmptyClient();

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.PostRoundTripEmptyAsync(content);

            Console.WriteLine(response.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PostRoundTripEmpty_Convenience()
        {
            EmptyClient client = new EmptyClient();

            EmptyInputOutput body = new EmptyInputOutput();
            Response<EmptyInputOutput> response = client.PostRoundTripEmpty(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PostRoundTripEmpty_Convenience_Async()
        {
            EmptyClient client = new EmptyClient();

            EmptyInputOutput body = new EmptyInputOutput();
            Response<EmptyInputOutput> response = await client.PostRoundTripEmptyAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PostRoundTripEmpty_AllParameters()
        {
            EmptyClient client = new EmptyClient();

            RequestContent content = RequestContent.Create(new object());
            Response response = client.PostRoundTripEmpty(content);

            Console.WriteLine(response.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PostRoundTripEmpty_AllParameters_Async()
        {
            EmptyClient client = new EmptyClient();

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.PostRoundTripEmptyAsync(content);

            Console.WriteLine(response.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PostRoundTripEmpty_AllParameters_Convenience()
        {
            EmptyClient client = new EmptyClient();

            EmptyInputOutput body = new EmptyInputOutput();
            Response<EmptyInputOutput> response = client.PostRoundTripEmpty(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PostRoundTripEmpty_AllParameters_Convenience_Async()
        {
            EmptyClient client = new EmptyClient();

            EmptyInputOutput body = new EmptyInputOutput();
            Response<EmptyInputOutput> response = await client.PostRoundTripEmptyAsync(body);
        }
    }
}
