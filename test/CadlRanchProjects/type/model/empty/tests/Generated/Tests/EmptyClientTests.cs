// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Type.Model.Empty;
using _Type.Model.Empty.Models;

namespace _Type.Model.Empty.Tests
{
    public class EmptyClientTests : _TypeModelEmptyTestBase
    {
        public EmptyClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        public async Task PutEmpty_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EmptyClient client = CreateEmptyClient(endpoint);

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.PutEmptyAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task PutEmpty_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EmptyClient client = CreateEmptyClient(endpoint);

            EmptyInput input = new EmptyInput();
            Response response = await client.PutEmptyAsync(input);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task PutEmpty_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EmptyClient client = CreateEmptyClient(endpoint);

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.PutEmptyAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task PutEmpty_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EmptyClient client = CreateEmptyClient(endpoint);

            EmptyInput input = new EmptyInput();
            Response response = await client.PutEmptyAsync(input);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task GetEmpty_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EmptyClient client = CreateEmptyClient(endpoint);

            Response response = await client.GetEmptyAsync(null);

            Console.WriteLine(response.ToString());
        }

        [Test]
        public async Task GetEmpty_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EmptyClient client = CreateEmptyClient(endpoint);

            Response<EmptyOutput> response = await client.GetEmptyAsync();
        }

        [Test]
        public async Task GetEmpty_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EmptyClient client = CreateEmptyClient(endpoint);

            Response response = await client.GetEmptyAsync(null);

            Console.WriteLine(response.ToString());
        }

        [Test]
        public async Task GetEmpty_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EmptyClient client = CreateEmptyClient(endpoint);

            Response<EmptyOutput> response = await client.GetEmptyAsync();
        }

        [Test]
        public async Task PostRoundTripEmpty_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EmptyClient client = CreateEmptyClient(endpoint);

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.PostRoundTripEmptyAsync(content);

            Console.WriteLine(response.ToString());
        }

        [Test]
        public async Task PostRoundTripEmpty_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EmptyClient client = CreateEmptyClient(endpoint);

            EmptyInputOutput body = new EmptyInputOutput();
            Response<EmptyInputOutput> response = await client.PostRoundTripEmptyAsync(body);
        }

        [Test]
        public async Task PostRoundTripEmpty_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EmptyClient client = CreateEmptyClient(endpoint);

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.PostRoundTripEmptyAsync(content);

            Console.WriteLine(response.ToString());
        }

        [Test]
        public async Task PostRoundTripEmpty_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EmptyClient client = CreateEmptyClient(endpoint);

            EmptyInputOutput body = new EmptyInputOutput();
            Response<EmptyInputOutput> response = await client.PostRoundTripEmptyAsync(body);
        }
    }
}
