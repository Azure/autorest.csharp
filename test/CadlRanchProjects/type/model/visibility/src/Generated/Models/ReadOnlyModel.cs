// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace _Type.Model.Visibility.Models
{
    /// <summary> RoundTrip model with readonly properties. </summary>
    public partial class ReadOnlyModel
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ReadOnlyModel"/>. </summary>
        public ReadOnlyModel()
        {
            RequiredNullableIntList = new ChangeTrackingList<int>();
            OptionalNullableIntList = new ChangeTrackingList<int>();
            RequiredNullableModelList = new ChangeTrackingList<InnerModel>();
            OptionalNullableModelList = new ChangeTrackingList<InnerModel>();
            RequiredStringRecord = new ChangeTrackingDictionary<string, string>();
            OptionalStringRecord = new ChangeTrackingDictionary<string, string>();
            RequiredModelRecord = new ChangeTrackingDictionary<string, InnerModel>();
            OptionalModelRecord = new ChangeTrackingDictionary<string, InnerModel>();
        }

        /// <summary> Initializes a new instance of <see cref="ReadOnlyModel"/>. </summary>
        /// <param name="requiredNullableIntList"> Required readonly nullable int list. </param>
        /// <param name="optionalNullableIntList"> Optional readonly nullable int list. </param>
        /// <param name="requiredNullableModelList"> Required readonly nullable model list. </param>
        /// <param name="optionalNullableModelList"> Optional readonly nullable model list. </param>
        /// <param name="requiredStringRecord"> Required readonly string dictionary. </param>
        /// <param name="optionalStringRecord"> Optional readonly string dictionary. </param>
        /// <param name="requiredModelRecord"> Required readonly model dictionary. </param>
        /// <param name="optionalModelRecord"> Optional readonly model dictionary. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ReadOnlyModel(IReadOnlyList<int> requiredNullableIntList, IReadOnlyList<int> optionalNullableIntList, IReadOnlyList<InnerModel> requiredNullableModelList, IReadOnlyList<InnerModel> optionalNullableModelList, IReadOnlyDictionary<string, string> requiredStringRecord, IReadOnlyDictionary<string, string> optionalStringRecord, IReadOnlyDictionary<string, InnerModel> requiredModelRecord, IReadOnlyDictionary<string, InnerModel> optionalModelRecord, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            RequiredNullableIntList = requiredNullableIntList;
            OptionalNullableIntList = optionalNullableIntList;
            RequiredNullableModelList = requiredNullableModelList;
            OptionalNullableModelList = optionalNullableModelList;
            RequiredStringRecord = requiredStringRecord;
            OptionalStringRecord = optionalStringRecord;
            RequiredModelRecord = requiredModelRecord;
            OptionalModelRecord = optionalModelRecord;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Required readonly nullable int list. </summary>
        public IReadOnlyList<int> RequiredNullableIntList { get; }
        /// <summary> Optional readonly nullable int list. </summary>
        public IReadOnlyList<int> OptionalNullableIntList { get; }
        /// <summary> Required readonly nullable model list. </summary>
        public IReadOnlyList<InnerModel> RequiredNullableModelList { get; }
        /// <summary> Optional readonly nullable model list. </summary>
        public IReadOnlyList<InnerModel> OptionalNullableModelList { get; }
        /// <summary> Required readonly string dictionary. </summary>
        public IReadOnlyDictionary<string, string> RequiredStringRecord { get; }
        /// <summary> Optional readonly string dictionary. </summary>
        public IReadOnlyDictionary<string, string> OptionalStringRecord { get; }
        /// <summary> Required readonly model dictionary. </summary>
        public IReadOnlyDictionary<string, InnerModel> RequiredModelRecord { get; }
        /// <summary> Optional readonly model dictionary. </summary>
        public IReadOnlyDictionary<string, InnerModel> OptionalModelRecord { get; }
    }
}
