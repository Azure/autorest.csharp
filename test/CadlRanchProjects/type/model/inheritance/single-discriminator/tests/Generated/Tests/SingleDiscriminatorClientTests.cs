// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Type.Model.Inheritance.SingleDiscriminator;
using _Type.Model.Inheritance.SingleDiscriminator.Models;

namespace _Type.Model.Inheritance.SingleDiscriminator.Tests
{
    public class SingleDiscriminatorClientTests : _TypeModelInheritanceSingleDiscriminatorTestBase
    {
        public SingleDiscriminatorClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetModel_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            Response response = await client.GetModelAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetModel_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            Response<Bird> response = await client.GetModelAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetModel_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            Response response = await client.GetModelAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetModel_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            Response<Bird> response = await client.GetModelAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutModel_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                kind = "seagull",
                wingspan = 1234,
            });
            Response response = await client.PutModelAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutModel_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            Bird input = new SeaGull(1234);
            Response response = await client.PutModelAsync(input);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutModel_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                kind = "seagull",
                wingspan = 1234,
            });
            Response response = await client.PutModelAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutModel_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            Bird input = new SeaGull(1234);
            Response response = await client.PutModelAsync(input);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetRecursiveModel_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            Response response = await client.GetRecursiveModelAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetRecursiveModel_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            Response<Bird> response = await client.GetRecursiveModelAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetRecursiveModel_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            Response response = await client.GetRecursiveModelAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetRecursiveModel_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            Response<Bird> response = await client.GetRecursiveModelAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutRecursiveModel_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                kind = "seagull",
                wingspan = 1234,
            });
            Response response = await client.PutRecursiveModelAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutRecursiveModel_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            Bird input = new SeaGull(1234);
            Response response = await client.PutRecursiveModelAsync(input);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutRecursiveModel_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                kind = "seagull",
                wingspan = 1234,
            });
            Response response = await client.PutRecursiveModelAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutRecursiveModel_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            Bird input = new SeaGull(1234);
            Response response = await client.PutRecursiveModelAsync(input);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetMissingDiscriminator_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            Response response = await client.GetMissingDiscriminatorAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetMissingDiscriminator_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            Response<Bird> response = await client.GetMissingDiscriminatorAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetMissingDiscriminator_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            Response response = await client.GetMissingDiscriminatorAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetMissingDiscriminator_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            Response<Bird> response = await client.GetMissingDiscriminatorAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetWrongDiscriminator_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            Response response = await client.GetWrongDiscriminatorAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetWrongDiscriminator_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            Response<Bird> response = await client.GetWrongDiscriminatorAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetWrongDiscriminator_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            Response response = await client.GetWrongDiscriminatorAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetWrongDiscriminator_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            Response<Bird> response = await client.GetWrongDiscriminatorAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetLegacyModel_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            Response response = await client.GetLegacyModelAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetLegacyModel_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            Response<Dinosaur> response = await client.GetLegacyModelAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetLegacyModel_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            Response response = await client.GetLegacyModelAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetLegacyModel_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            SingleDiscriminatorClient client = CreateSingleDiscriminatorClient(endpoint);

            Response<Dinosaur> response = await client.GetLegacyModelAsync();
        }
    }
}
