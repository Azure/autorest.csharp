// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Type.Model.Inheritance.SingleDiscriminator.Models;

namespace _Type.Model.Inheritance.SingleDiscriminator.Samples
{
    public class Samples_SingleDiscriminatorClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetModel()
        {
            var client = new SingleDiscriminatorClient();

            Response response = client.GetModel(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("wingspan").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetModel_AllParameters()
        {
            var client = new SingleDiscriminatorClient();

            Response response = client.GetModel(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("wingspan").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetModel_Async()
        {
            var client = new SingleDiscriminatorClient();

            Response response = await client.GetModelAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("wingspan").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetModel_AllParameters_Async()
        {
            var client = new SingleDiscriminatorClient();

            Response response = await client.GetModelAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("wingspan").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetModel_Convenience_Async()
        {
            var client = new SingleDiscriminatorClient();

            var result = await client.GetModelAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutModel()
        {
            var client = new SingleDiscriminatorClient();

            var data = new
            {
                kind = "seagull",
                wingspan = 1234,
            };

            Response response = client.PutModel(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutModel_AllParameters()
        {
            var client = new SingleDiscriminatorClient();

            var data = new
            {
                kind = "seagull",
                wingspan = 1234,
            };

            Response response = client.PutModel(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutModel_Async()
        {
            var client = new SingleDiscriminatorClient();

            var data = new
            {
                kind = "seagull",
                wingspan = 1234,
            };

            Response response = await client.PutModelAsync(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutModel_AllParameters_Async()
        {
            var client = new SingleDiscriminatorClient();

            var data = new
            {
                kind = "seagull",
                wingspan = 1234,
            };

            Response response = await client.PutModelAsync(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutModel_Convenience_Async()
        {
            var client = new SingleDiscriminatorClient();

            var input = new SeaGull(1234);
            var result = await client.PutModelAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRecursiveModel()
        {
            var client = new SingleDiscriminatorClient();

            Response response = client.GetRecursiveModel(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("wingspan").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetRecursiveModel_AllParameters()
        {
            var client = new SingleDiscriminatorClient();

            Response response = client.GetRecursiveModel(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("wingspan").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRecursiveModel_Async()
        {
            var client = new SingleDiscriminatorClient();

            Response response = await client.GetRecursiveModelAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("wingspan").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRecursiveModel_AllParameters_Async()
        {
            var client = new SingleDiscriminatorClient();

            Response response = await client.GetRecursiveModelAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("wingspan").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetRecursiveModel_Convenience_Async()
        {
            var client = new SingleDiscriminatorClient();

            var result = await client.GetRecursiveModelAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutRecursiveModel()
        {
            var client = new SingleDiscriminatorClient();

            var data = new
            {
                kind = "seagull",
                wingspan = 1234,
            };

            Response response = client.PutRecursiveModel(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutRecursiveModel_AllParameters()
        {
            var client = new SingleDiscriminatorClient();

            var data = new
            {
                kind = "seagull",
                wingspan = 1234,
            };

            Response response = client.PutRecursiveModel(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutRecursiveModel_Async()
        {
            var client = new SingleDiscriminatorClient();

            var data = new
            {
                kind = "seagull",
                wingspan = 1234,
            };

            Response response = await client.PutRecursiveModelAsync(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutRecursiveModel_AllParameters_Async()
        {
            var client = new SingleDiscriminatorClient();

            var data = new
            {
                kind = "seagull",
                wingspan = 1234,
            };

            Response response = await client.PutRecursiveModelAsync(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutRecursiveModel_Convenience_Async()
        {
            var client = new SingleDiscriminatorClient();

            var input = new SeaGull(1234);
            var result = await client.PutRecursiveModelAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetMissingDiscriminator()
        {
            var client = new SingleDiscriminatorClient();

            Response response = client.GetMissingDiscriminator(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("wingspan").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetMissingDiscriminator_AllParameters()
        {
            var client = new SingleDiscriminatorClient();

            Response response = client.GetMissingDiscriminator(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("wingspan").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetMissingDiscriminator_Async()
        {
            var client = new SingleDiscriminatorClient();

            Response response = await client.GetMissingDiscriminatorAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("wingspan").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetMissingDiscriminator_AllParameters_Async()
        {
            var client = new SingleDiscriminatorClient();

            Response response = await client.GetMissingDiscriminatorAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("wingspan").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetMissingDiscriminator_Convenience_Async()
        {
            var client = new SingleDiscriminatorClient();

            var result = await client.GetMissingDiscriminatorAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWrongDiscriminator()
        {
            var client = new SingleDiscriminatorClient();

            Response response = client.GetWrongDiscriminator(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("wingspan").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWrongDiscriminator_AllParameters()
        {
            var client = new SingleDiscriminatorClient();

            Response response = client.GetWrongDiscriminator(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("wingspan").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWrongDiscriminator_Async()
        {
            var client = new SingleDiscriminatorClient();

            Response response = await client.GetWrongDiscriminatorAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("wingspan").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWrongDiscriminator_AllParameters_Async()
        {
            var client = new SingleDiscriminatorClient();

            Response response = await client.GetWrongDiscriminatorAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("wingspan").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWrongDiscriminator_Convenience_Async()
        {
            var client = new SingleDiscriminatorClient();

            var result = await client.GetWrongDiscriminatorAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLegacyModel()
        {
            var client = new SingleDiscriminatorClient();

            Response response = client.GetLegacyModel(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("size").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLegacyModel_AllParameters()
        {
            var client = new SingleDiscriminatorClient();

            Response response = client.GetLegacyModel(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("size").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLegacyModel_Async()
        {
            var client = new SingleDiscriminatorClient();

            Response response = await client.GetLegacyModelAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("size").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLegacyModel_AllParameters_Async()
        {
            var client = new SingleDiscriminatorClient();

            Response response = await client.GetLegacyModelAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("size").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLegacyModel_Convenience_Async()
        {
            var client = new SingleDiscriminatorClient();

            var result = await client.GetLegacyModelAsync();
        }
    }
}
