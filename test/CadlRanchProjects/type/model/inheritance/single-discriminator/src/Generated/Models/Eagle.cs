// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace _Type.Model.Inheritance.SingleDiscriminator.Models
{
    /// <summary> The second level model in polymorphic single levels inheritance which contains references to other polymorphic instances. </summary>
    public partial class Eagle : Bird
    {
        /// <summary> Initializes a new instance of Eagle. </summary>
        /// <param name="wingspan"></param>
        public Eagle(int wingspan) : base(wingspan)
        {
            Kind = "eagle";
            Friends = new ChangeTrackingList<Bird>();
            Hate = new ChangeTrackingDictionary<string, Bird>();
        }

        /// <summary> Initializes a new instance of Eagle. </summary>
        /// <param name="kind"></param>
        /// <param name="wingspan"></param>
        /// <param name="friends"></param>
        /// <param name="hate"></param>
        /// <param name="partner"></param>
        internal Eagle(string kind, int wingspan, IList<Bird> friends, IDictionary<string, Bird> hate, Bird partner) : base(kind, wingspan)
        {
            Friends = friends;
            Hate = hate;
            Partner = partner;
        }

        /// <summary>
        /// Gets the friends
        /// Please note <see cref="Bird"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SeaGull"/>, <see cref="Sparrow"/>, <see cref="Goose"/> and <see cref="Eagle"/>.
        /// </summary>
        public IList<Bird> Friends { get; }
        /// <summary>
        /// Gets the hate
        /// Please note <see cref="Bird"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SeaGull"/>, <see cref="Sparrow"/>, <see cref="Goose"/> and <see cref="Eagle"/>.
        /// </summary>
        public IDictionary<string, Bird> Hate { get; }
        /// <summary>
        /// Gets or sets the partner
        /// Please note <see cref="Bird"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SeaGull"/>, <see cref="Sparrow"/>, <see cref="Goose"/> and <see cref="Eagle"/>.
        /// </summary>
        public Bird Partner { get; set; }
    }
}
