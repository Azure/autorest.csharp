// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Type.Model.Inheritance.NotDiscriminated.Models;

namespace _Type.Model.Inheritance.NotDiscriminated.Samples
{
    public class Samples_NotDiscriminatedClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PostValid()
        {
            var client = new NotDiscriminatedClient();

            var data = new
            {
                smart = true,
                age = 1234,
                name = "<name>",
            };

            Response response = client.PostValid(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PostValid_AllParameters()
        {
            var client = new NotDiscriminatedClient();

            var data = new
            {
                smart = true,
                age = 1234,
                name = "<name>",
            };

            Response response = client.PostValid(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PostValid_Async()
        {
            var client = new NotDiscriminatedClient();

            var data = new
            {
                smart = true,
                age = 1234,
                name = "<name>",
            };

            Response response = await client.PostValidAsync(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PostValid_AllParameters_Async()
        {
            var client = new NotDiscriminatedClient();

            var data = new
            {
                smart = true,
                age = 1234,
                name = "<name>",
            };

            Response response = await client.PostValidAsync(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PostValid_Convenience_Async()
        {
            var client = new NotDiscriminatedClient();

            var input = new Siamese("<name>", 1234, true);
            var result = await client.PostValidAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetValid()
        {
            var client = new NotDiscriminatedClient();

            Response response = client.GetValid(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("smart").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetValid_AllParameters()
        {
            var client = new NotDiscriminatedClient();

            Response response = client.GetValid(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("smart").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetValid_Async()
        {
            var client = new NotDiscriminatedClient();

            Response response = await client.GetValidAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("smart").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetValid_AllParameters_Async()
        {
            var client = new NotDiscriminatedClient();

            Response response = await client.GetValidAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("smart").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetValid_Convenience_Async()
        {
            var client = new NotDiscriminatedClient();

            var result = await client.GetValidAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutValid()
        {
            var client = new NotDiscriminatedClient();

            var data = new
            {
                smart = true,
                age = 1234,
                name = "<name>",
            };

            Response response = client.PutValid(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("smart").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutValid_AllParameters()
        {
            var client = new NotDiscriminatedClient();

            var data = new
            {
                smart = true,
                age = 1234,
                name = "<name>",
            };

            Response response = client.PutValid(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("smart").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutValid_Async()
        {
            var client = new NotDiscriminatedClient();

            var data = new
            {
                smart = true,
                age = 1234,
                name = "<name>",
            };

            Response response = await client.PutValidAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("smart").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutValid_AllParameters_Async()
        {
            var client = new NotDiscriminatedClient();

            var data = new
            {
                smart = true,
                age = 1234,
                name = "<name>",
            };

            Response response = await client.PutValidAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("smart").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutValid_Convenience_Async()
        {
            var client = new NotDiscriminatedClient();

            var input = new Siamese("<name>", 1234, true);
            var result = await client.PutValidAsync(input);
        }
    }
}
