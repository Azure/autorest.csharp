// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Type.Model.Inheritance.NotDiscriminated;
using _Type.Model.Inheritance.NotDiscriminated.Models;

namespace _Type.Model.Inheritance.NotDiscriminated.Tests
{
    public partial class NotDiscriminatedClientTests : _TypeModelInheritanceNotDiscriminatedTestBase
    {
        public NotDiscriminatedClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task NotDiscriminated_PostValid_ShortVersion()
        {
            Uri endpoint = null;
            NotDiscriminatedClient client = CreateNotDiscriminatedClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                smart = true,
                age = 1234,
                name = "<name>",
            });
            Response response = await client.PostValidAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task NotDiscriminated_PostValid_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            NotDiscriminatedClient client = CreateNotDiscriminatedClient(endpoint);

            Siamese input = new Siamese("<name>", 1234, true);
            Response response = await client.PostValidAsync(input);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task NotDiscriminated_PostValid_AllParameters()
        {
            Uri endpoint = null;
            NotDiscriminatedClient client = CreateNotDiscriminatedClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                smart = true,
                age = 1234,
                name = "<name>",
            });
            Response response = await client.PostValidAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task NotDiscriminated_PostValid_AllParameters_Convenience()
        {
            Uri endpoint = null;
            NotDiscriminatedClient client = CreateNotDiscriminatedClient(endpoint);

            Siamese input = new Siamese("<name>", 1234, true);
            Response response = await client.PostValidAsync(input);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task NotDiscriminated_GetValid_ShortVersion()
        {
            Uri endpoint = null;
            NotDiscriminatedClient client = CreateNotDiscriminatedClient(endpoint);

            Response response = await client.GetValidAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task NotDiscriminated_GetValid_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            NotDiscriminatedClient client = CreateNotDiscriminatedClient(endpoint);

            Response<Siamese> response = await client.GetValidAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task NotDiscriminated_GetValid_AllParameters()
        {
            Uri endpoint = null;
            NotDiscriminatedClient client = CreateNotDiscriminatedClient(endpoint);

            Response response = await client.GetValidAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task NotDiscriminated_GetValid_AllParameters_Convenience()
        {
            Uri endpoint = null;
            NotDiscriminatedClient client = CreateNotDiscriminatedClient(endpoint);

            Response<Siamese> response = await client.GetValidAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task NotDiscriminated_PutValid_ShortVersion()
        {
            Uri endpoint = null;
            NotDiscriminatedClient client = CreateNotDiscriminatedClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                smart = true,
                age = 1234,
                name = "<name>",
            });
            Response response = await client.PutValidAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task NotDiscriminated_PutValid_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            NotDiscriminatedClient client = CreateNotDiscriminatedClient(endpoint);

            Siamese input = new Siamese("<name>", 1234, true);
            Response<Siamese> response = await client.PutValidAsync(input);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task NotDiscriminated_PutValid_AllParameters()
        {
            Uri endpoint = null;
            NotDiscriminatedClient client = CreateNotDiscriminatedClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                smart = true,
                age = 1234,
                name = "<name>",
            });
            Response response = await client.PutValidAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task NotDiscriminated_PutValid_AllParameters_Convenience()
        {
            Uri endpoint = null;
            NotDiscriminatedClient client = CreateNotDiscriminatedClient(endpoint);

            Siamese input = new Siamese("<name>", 1234, true);
            Response<Siamese> response = await client.PutValidAsync(input);
        }
    }
}
