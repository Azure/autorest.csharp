// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Type.Model.Inheritance.EnumDiscriminator;
using _Type.Model.Inheritance.EnumDiscriminator.Models;

namespace _Type.Model.Inheritance.EnumDiscriminator.Tests
{
    public class EnumDiscriminatorClientTests : _TypeModelInheritanceEnumDiscriminatorTestBase
    {
        public EnumDiscriminatorClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetExtensibleModel_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response response = await client.GetExtensibleModelAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetExtensibleModel_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response<Dog> response = await client.GetExtensibleModelAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetExtensibleModel_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response response = await client.GetExtensibleModelAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetExtensibleModel_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response<Dog> response = await client.GetExtensibleModelAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutExtensibleModel_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                kind = "golden",
                weight = 1234,
            });
            Response response = await client.PutExtensibleModelAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutExtensibleModel_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Dog input = new Golden(1234);
            Response response = await client.PutExtensibleModelAsync(input);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutExtensibleModel_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                kind = "golden",
                weight = 1234,
            });
            Response response = await client.PutExtensibleModelAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutExtensibleModel_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Dog input = new Golden(1234);
            Response response = await client.PutExtensibleModelAsync(input);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetExtensibleModelMissingDiscriminator_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response response = await client.GetExtensibleModelMissingDiscriminatorAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetExtensibleModelMissingDiscriminator_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response<Dog> response = await client.GetExtensibleModelMissingDiscriminatorAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetExtensibleModelMissingDiscriminator_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response response = await client.GetExtensibleModelMissingDiscriminatorAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetExtensibleModelMissingDiscriminator_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response<Dog> response = await client.GetExtensibleModelMissingDiscriminatorAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetExtensibleModelWrongDiscriminator_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response response = await client.GetExtensibleModelWrongDiscriminatorAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetExtensibleModelWrongDiscriminator_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response<Dog> response = await client.GetExtensibleModelWrongDiscriminatorAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetExtensibleModelWrongDiscriminator_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response response = await client.GetExtensibleModelWrongDiscriminatorAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetExtensibleModelWrongDiscriminator_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response<Dog> response = await client.GetExtensibleModelWrongDiscriminatorAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetFixedModel_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response response = await client.GetFixedModelAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetFixedModel_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response<Snake> response = await client.GetFixedModelAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetFixedModel_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response response = await client.GetFixedModelAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetFixedModel_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response<Snake> response = await client.GetFixedModelAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutFixedModel_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                kind = "cobra",
                length = 1234,
            });
            Response response = await client.PutFixedModelAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutFixedModel_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Snake input = new Cobra(1234);
            Response response = await client.PutFixedModelAsync(input);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutFixedModel_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                kind = "cobra",
                length = 1234,
            });
            Response response = await client.PutFixedModelAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PutFixedModel_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Snake input = new Cobra(1234);
            Response response = await client.PutFixedModelAsync(input);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetFixedModelMissingDiscriminator_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response response = await client.GetFixedModelMissingDiscriminatorAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetFixedModelMissingDiscriminator_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response<Snake> response = await client.GetFixedModelMissingDiscriminatorAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetFixedModelMissingDiscriminator_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response response = await client.GetFixedModelMissingDiscriminatorAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetFixedModelMissingDiscriminator_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response<Snake> response = await client.GetFixedModelMissingDiscriminatorAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetFixedModelWrongDiscriminator_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response response = await client.GetFixedModelWrongDiscriminatorAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetFixedModelWrongDiscriminator_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response<Snake> response = await client.GetFixedModelWrongDiscriminatorAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetFixedModelWrongDiscriminator_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response response = await client.GetFixedModelWrongDiscriminatorAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetFixedModelWrongDiscriminator_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response<Snake> response = await client.GetFixedModelWrongDiscriminatorAsync();
        }
    }
}
