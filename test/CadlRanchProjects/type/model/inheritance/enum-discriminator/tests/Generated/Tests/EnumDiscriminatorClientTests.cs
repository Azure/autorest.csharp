// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Type.Model.Inheritance.EnumDiscriminator;
using _Type.Model.Inheritance.EnumDiscriminator.Models;

namespace _Type.Model.Inheritance.EnumDiscriminator.Tests
{
    public partial class EnumDiscriminatorClientTests : _TypeModelInheritanceEnumDiscriminatorTestBase
    {
        public EnumDiscriminatorClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_GetExtensibleModel_ShortVersion()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response response = await client.GetExtensibleModelAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_GetExtensibleModel_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response<Dog> response = await client.GetExtensibleModelAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_GetExtensibleModel_AllParameters()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response response = await client.GetExtensibleModelAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_GetExtensibleModel_AllParameters_Convenience()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response<Dog> response = await client.GetExtensibleModelAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_PutExtensibleModel_ShortVersion()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "golden",
                weight = 1234,
            });
            Response response = await client.PutExtensibleModelAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_PutExtensibleModel_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Dog input = new Golden(1234);
            Response response = await client.PutExtensibleModelAsync(input);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_PutExtensibleModel_AllParameters()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "golden",
                weight = 1234,
            });
            Response response = await client.PutExtensibleModelAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_PutExtensibleModel_AllParameters_Convenience()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Dog input = new Golden(1234);
            Response response = await client.PutExtensibleModelAsync(input);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_GetExtensibleModelMissingDiscriminator_ShortVersion()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response response = await client.GetExtensibleModelMissingDiscriminatorAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_GetExtensibleModelMissingDiscriminator_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response<Dog> response = await client.GetExtensibleModelMissingDiscriminatorAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_GetExtensibleModelMissingDiscriminator_AllParameters()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response response = await client.GetExtensibleModelMissingDiscriminatorAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_GetExtensibleModelMissingDiscriminator_AllParameters_Convenience()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response<Dog> response = await client.GetExtensibleModelMissingDiscriminatorAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_GetExtensibleModelWrongDiscriminator_ShortVersion()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response response = await client.GetExtensibleModelWrongDiscriminatorAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_GetExtensibleModelWrongDiscriminator_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response<Dog> response = await client.GetExtensibleModelWrongDiscriminatorAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_GetExtensibleModelWrongDiscriminator_AllParameters()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response response = await client.GetExtensibleModelWrongDiscriminatorAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_GetExtensibleModelWrongDiscriminator_AllParameters_Convenience()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response<Dog> response = await client.GetExtensibleModelWrongDiscriminatorAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_GetFixedModel_ShortVersion()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response response = await client.GetFixedModelAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_GetFixedModel_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response<Snake> response = await client.GetFixedModelAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_GetFixedModel_AllParameters()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response response = await client.GetFixedModelAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_GetFixedModel_AllParameters_Convenience()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response<Snake> response = await client.GetFixedModelAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_PutFixedModel_ShortVersion()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "cobra",
                length = 1234,
            });
            Response response = await client.PutFixedModelAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_PutFixedModel_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Snake input = new Cobra(1234);
            Response response = await client.PutFixedModelAsync(input);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_PutFixedModel_AllParameters()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                kind = "cobra",
                length = 1234,
            });
            Response response = await client.PutFixedModelAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_PutFixedModel_AllParameters_Convenience()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Snake input = new Cobra(1234);
            Response response = await client.PutFixedModelAsync(input);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_GetFixedModelMissingDiscriminator_ShortVersion()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response response = await client.GetFixedModelMissingDiscriminatorAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_GetFixedModelMissingDiscriminator_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response<Snake> response = await client.GetFixedModelMissingDiscriminatorAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_GetFixedModelMissingDiscriminator_AllParameters()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response response = await client.GetFixedModelMissingDiscriminatorAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_GetFixedModelMissingDiscriminator_AllParameters_Convenience()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response<Snake> response = await client.GetFixedModelMissingDiscriminatorAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_GetFixedModelWrongDiscriminator_ShortVersion()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response response = await client.GetFixedModelWrongDiscriminatorAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_GetFixedModelWrongDiscriminator_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response<Snake> response = await client.GetFixedModelWrongDiscriminatorAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_GetFixedModelWrongDiscriminator_AllParameters()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response response = await client.GetFixedModelWrongDiscriminatorAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumDiscriminator_GetFixedModelWrongDiscriminator_AllParameters_Convenience()
        {
            Uri endpoint = null;
            EnumDiscriminatorClient client = CreateEnumDiscriminatorClient(endpoint);

            Response<Snake> response = await client.GetFixedModelWrongDiscriminatorAsync();
        }
    }
}
