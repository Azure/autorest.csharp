// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Type.Model.Inheritance.NestedDiscriminator.Models;

namespace _Type.Model.Inheritance.NestedDiscriminator.Samples
{
    public partial class Samples_NestedDiscriminatorClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NestedDiscriminator_GetModel_ShortVersion()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response response = client.GetModel(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NestedDiscriminator_GetModel_ShortVersion_Async()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response response = await client.GetModelAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NestedDiscriminator_GetModel_ShortVersion_Convenience()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response<Fish> response = client.GetModel();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NestedDiscriminator_GetModel_ShortVersion_Convenience_Async()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response<Fish> response = await client.GetModelAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NestedDiscriminator_GetModel_AllParameters()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response response = client.GetModel(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NestedDiscriminator_GetModel_AllParameters_Async()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response response = await client.GetModelAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NestedDiscriminator_GetModel_AllParameters_Convenience()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response<Fish> response = client.GetModel();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NestedDiscriminator_GetModel_AllParameters_Convenience_Async()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response<Fish> response = await client.GetModelAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NestedDiscriminator_PutModel_ShortVersion()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            using RequestContent content = RequestContent.Create(new
            {
                sharktype = "shark",
                kind = "shark",
                age = 1234,
            });
            Response response = client.PutModel(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NestedDiscriminator_PutModel_ShortVersion_Async()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            using RequestContent content = RequestContent.Create(new
            {
                sharktype = "shark",
                kind = "shark",
                age = 1234,
            });
            Response response = await client.PutModelAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NestedDiscriminator_PutModel_ShortVersion_Convenience()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Fish input = new Shark(1234);
            Response response = client.PutModel(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NestedDiscriminator_PutModel_ShortVersion_Convenience_Async()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Fish input = new Shark(1234);
            Response response = await client.PutModelAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NestedDiscriminator_PutModel_AllParameters()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            using RequestContent content = RequestContent.Create(new
            {
                sharktype = "shark",
                kind = "shark",
                age = 1234,
            });
            Response response = client.PutModel(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NestedDiscriminator_PutModel_AllParameters_Async()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            using RequestContent content = RequestContent.Create(new
            {
                sharktype = "shark",
                kind = "shark",
                age = 1234,
            });
            Response response = await client.PutModelAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NestedDiscriminator_PutModel_AllParameters_Convenience()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Fish input = new Shark(1234);
            Response response = client.PutModel(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NestedDiscriminator_PutModel_AllParameters_Convenience_Async()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Fish input = new Shark(1234);
            Response response = await client.PutModelAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NestedDiscriminator_GetRecursiveModel_ShortVersion()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response response = client.GetRecursiveModel(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NestedDiscriminator_GetRecursiveModel_ShortVersion_Async()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response response = await client.GetRecursiveModelAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NestedDiscriminator_GetRecursiveModel_ShortVersion_Convenience()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response<Fish> response = client.GetRecursiveModel();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NestedDiscriminator_GetRecursiveModel_ShortVersion_Convenience_Async()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response<Fish> response = await client.GetRecursiveModelAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NestedDiscriminator_GetRecursiveModel_AllParameters()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response response = client.GetRecursiveModel(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NestedDiscriminator_GetRecursiveModel_AllParameters_Async()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response response = await client.GetRecursiveModelAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NestedDiscriminator_GetRecursiveModel_AllParameters_Convenience()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response<Fish> response = client.GetRecursiveModel();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NestedDiscriminator_GetRecursiveModel_AllParameters_Convenience_Async()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response<Fish> response = await client.GetRecursiveModelAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NestedDiscriminator_PutRecursiveModel_ShortVersion()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            using RequestContent content = RequestContent.Create(new
            {
                sharktype = "shark",
                kind = "shark",
                age = 1234,
            });
            Response response = client.PutRecursiveModel(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NestedDiscriminator_PutRecursiveModel_ShortVersion_Async()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            using RequestContent content = RequestContent.Create(new
            {
                sharktype = "shark",
                kind = "shark",
                age = 1234,
            });
            Response response = await client.PutRecursiveModelAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NestedDiscriminator_PutRecursiveModel_ShortVersion_Convenience()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Fish input = new Shark(1234);
            Response response = client.PutRecursiveModel(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NestedDiscriminator_PutRecursiveModel_ShortVersion_Convenience_Async()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Fish input = new Shark(1234);
            Response response = await client.PutRecursiveModelAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NestedDiscriminator_PutRecursiveModel_AllParameters()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            using RequestContent content = RequestContent.Create(new
            {
                sharktype = "shark",
                kind = "shark",
                age = 1234,
            });
            Response response = client.PutRecursiveModel(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NestedDiscriminator_PutRecursiveModel_AllParameters_Async()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            using RequestContent content = RequestContent.Create(new
            {
                sharktype = "shark",
                kind = "shark",
                age = 1234,
            });
            Response response = await client.PutRecursiveModelAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NestedDiscriminator_PutRecursiveModel_AllParameters_Convenience()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Fish input = new Shark(1234);
            Response response = client.PutRecursiveModel(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NestedDiscriminator_PutRecursiveModel_AllParameters_Convenience_Async()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Fish input = new Shark(1234);
            Response response = await client.PutRecursiveModelAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NestedDiscriminator_GetMissingDiscriminator_ShortVersion()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response response = client.GetMissingDiscriminator(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NestedDiscriminator_GetMissingDiscriminator_ShortVersion_Async()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response response = await client.GetMissingDiscriminatorAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NestedDiscriminator_GetMissingDiscriminator_ShortVersion_Convenience()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response<Fish> response = client.GetMissingDiscriminator();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NestedDiscriminator_GetMissingDiscriminator_ShortVersion_Convenience_Async()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response<Fish> response = await client.GetMissingDiscriminatorAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NestedDiscriminator_GetMissingDiscriminator_AllParameters()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response response = client.GetMissingDiscriminator(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NestedDiscriminator_GetMissingDiscriminator_AllParameters_Async()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response response = await client.GetMissingDiscriminatorAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NestedDiscriminator_GetMissingDiscriminator_AllParameters_Convenience()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response<Fish> response = client.GetMissingDiscriminator();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NestedDiscriminator_GetMissingDiscriminator_AllParameters_Convenience_Async()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response<Fish> response = await client.GetMissingDiscriminatorAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NestedDiscriminator_GetWrongDiscriminator_ShortVersion()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response response = client.GetWrongDiscriminator(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NestedDiscriminator_GetWrongDiscriminator_ShortVersion_Async()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response response = await client.GetWrongDiscriminatorAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NestedDiscriminator_GetWrongDiscriminator_ShortVersion_Convenience()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response<Fish> response = client.GetWrongDiscriminator();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NestedDiscriminator_GetWrongDiscriminator_ShortVersion_Convenience_Async()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response<Fish> response = await client.GetWrongDiscriminatorAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NestedDiscriminator_GetWrongDiscriminator_AllParameters()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response response = client.GetWrongDiscriminator(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NestedDiscriminator_GetWrongDiscriminator_AllParameters_Async()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response response = await client.GetWrongDiscriminatorAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("age").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NestedDiscriminator_GetWrongDiscriminator_AllParameters_Convenience()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response<Fish> response = client.GetWrongDiscriminator();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NestedDiscriminator_GetWrongDiscriminator_AllParameters_Convenience_Async()
        {
            NestedDiscriminatorClient client = new NestedDiscriminatorClient();

            Response<Fish> response = await client.GetWrongDiscriminatorAsync();
        }
    }
}
