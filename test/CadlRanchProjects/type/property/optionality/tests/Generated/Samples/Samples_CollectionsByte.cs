// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Type.Property.Optionality;
using _Type.Property.Optionality.Models;

namespace _Type.Property.Optionality.Samples
{
    internal class Samples_CollectionsByte
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAll()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            Response response = client.GetAll(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAll_Async()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            Response response = await client.GetAllAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAll_Convenience()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            Response<CollectionsByteProperty> response = client.GetAll();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAll_Convenience_Async()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            Response<CollectionsByteProperty> response = await client.GetAllAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAll_AllParameters()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            Response response = client.GetAll(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("property")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAll_AllParameters_Async()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            Response response = await client.GetAllAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("property")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAll_AllParameters_Convenience()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            Response<CollectionsByteProperty> response = client.GetAll();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAll_AllParameters_Convenience_Async()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            Response<CollectionsByteProperty> response = await client.GetAllAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDefault()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            Response response = client.GetDefault(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDefault_Async()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            Response response = await client.GetDefaultAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDefault_Convenience()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            Response<CollectionsByteProperty> response = client.GetDefault();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDefault_Convenience_Async()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            Response<CollectionsByteProperty> response = await client.GetDefaultAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDefault_AllParameters()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            Response response = client.GetDefault(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("property")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDefault_AllParameters_Async()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            Response response = await client.GetDefaultAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("property")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDefault_AllParameters_Convenience()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            Response<CollectionsByteProperty> response = client.GetDefault();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDefault_AllParameters_Convenience_Async()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            Response<CollectionsByteProperty> response = await client.GetDefaultAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutAll()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            RequestContent content = RequestContent.Create(new object());
            Response response = client.PutAll(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutAll_Async()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.PutAllAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutAll_Convenience()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            CollectionsByteProperty body = new CollectionsByteProperty();
            Response response = client.PutAll(body);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutAll_Convenience_Async()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            CollectionsByteProperty body = new CollectionsByteProperty();
            Response response = await client.PutAllAsync(body);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutAll_AllParameters()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            RequestContent content = RequestContent.Create(new
            {
                property = new List<object>()
{
new object()
},
            });
            Response response = client.PutAll(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutAll_AllParameters_Async()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            RequestContent content = RequestContent.Create(new
            {
                property = new List<object>()
{
new object()
},
            });
            Response response = await client.PutAllAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutAll_AllParameters_Convenience()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            CollectionsByteProperty body = new CollectionsByteProperty()
            {
                Property =
{
BinaryData.FromObjectAsJson(new object())
},
            };
            Response response = client.PutAll(body);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutAll_AllParameters_Convenience_Async()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            CollectionsByteProperty body = new CollectionsByteProperty()
            {
                Property =
{
BinaryData.FromObjectAsJson(new object())
},
            };
            Response response = await client.PutAllAsync(body);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutDefault()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            RequestContent content = RequestContent.Create(new object());
            Response response = client.PutDefault(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutDefault_Async()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.PutDefaultAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutDefault_Convenience()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            CollectionsByteProperty body = new CollectionsByteProperty();
            Response response = client.PutDefault(body);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutDefault_Convenience_Async()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            CollectionsByteProperty body = new CollectionsByteProperty();
            Response response = await client.PutDefaultAsync(body);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutDefault_AllParameters()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            RequestContent content = RequestContent.Create(new
            {
                property = new List<object>()
{
new object()
},
            });
            Response response = client.PutDefault(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutDefault_AllParameters_Async()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            RequestContent content = RequestContent.Create(new
            {
                property = new List<object>()
{
new object()
},
            });
            Response response = await client.PutDefaultAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PutDefault_AllParameters_Convenience()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            CollectionsByteProperty body = new CollectionsByteProperty()
            {
                Property =
{
BinaryData.FromObjectAsJson(new object())
},
            };
            Response response = client.PutDefault(body);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PutDefault_AllParameters_Convenience_Async()
        {
            CollectionsByte client = new OptionalClient().GetCollectionsByteClient(apiVersion: "1.0.0");

            CollectionsByteProperty body = new CollectionsByteProperty()
            {
                Property =
{
BinaryData.FromObjectAsJson(new object())
},
            };
            Response response = await client.PutDefaultAsync(body);
            Console.WriteLine(response.Status);
        }
    }
}
