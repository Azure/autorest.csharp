// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Type.Property.Optionality;
using _Type.Property.Optionality.Models;

namespace _Type.Property.Optionality.Tests
{
    public partial class RequiredAndOptionalTests : _TypePropertyOptionalityTestBase
    {
        public RequiredAndOptionalTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RequiredAndOptional_GetAll_ShortVersion()
        {
            Uri endpoint = null;
            RequiredAndOptional client = CreateOptionalClient(endpoint).GetRequiredAndOptionalClient(apiVersion: "1.0.0");

            Response response = await client.GetAllAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RequiredAndOptional_GetAll_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            RequiredAndOptional client = CreateOptionalClient(endpoint).GetRequiredAndOptionalClient(apiVersion: "1.0.0");

            Response<RequiredAndOptionalProperty> response = await client.GetAllAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RequiredAndOptional_GetAll_AllParameters()
        {
            Uri endpoint = null;
            RequiredAndOptional client = CreateOptionalClient(endpoint).GetRequiredAndOptionalClient(apiVersion: "1.0.0");

            Response response = await client.GetAllAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RequiredAndOptional_GetAll_AllParameters_Convenience()
        {
            Uri endpoint = null;
            RequiredAndOptional client = CreateOptionalClient(endpoint).GetRequiredAndOptionalClient(apiVersion: "1.0.0");

            Response<RequiredAndOptionalProperty> response = await client.GetAllAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RequiredAndOptional_GetRequiredOnly_ShortVersion()
        {
            Uri endpoint = null;
            RequiredAndOptional client = CreateOptionalClient(endpoint).GetRequiredAndOptionalClient(apiVersion: "1.0.0");

            Response response = await client.GetRequiredOnlyAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RequiredAndOptional_GetRequiredOnly_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            RequiredAndOptional client = CreateOptionalClient(endpoint).GetRequiredAndOptionalClient(apiVersion: "1.0.0");

            Response<RequiredAndOptionalProperty> response = await client.GetRequiredOnlyAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RequiredAndOptional_GetRequiredOnly_AllParameters()
        {
            Uri endpoint = null;
            RequiredAndOptional client = CreateOptionalClient(endpoint).GetRequiredAndOptionalClient(apiVersion: "1.0.0");

            Response response = await client.GetRequiredOnlyAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RequiredAndOptional_GetRequiredOnly_AllParameters_Convenience()
        {
            Uri endpoint = null;
            RequiredAndOptional client = CreateOptionalClient(endpoint).GetRequiredAndOptionalClient(apiVersion: "1.0.0");

            Response<RequiredAndOptionalProperty> response = await client.GetRequiredOnlyAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RequiredAndOptional_PutAll_ShortVersion()
        {
            Uri endpoint = null;
            RequiredAndOptional client = CreateOptionalClient(endpoint).GetRequiredAndOptionalClient(apiVersion: "1.0.0");

            using RequestContent content = RequestContent.Create(new
            {
                requiredProperty = 1234,
            });
            Response response = await client.PutAllAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RequiredAndOptional_PutAll_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            RequiredAndOptional client = CreateOptionalClient(endpoint).GetRequiredAndOptionalClient(apiVersion: "1.0.0");

            RequiredAndOptionalProperty body = new RequiredAndOptionalProperty(1234);
            Response response = await client.PutAllAsync(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RequiredAndOptional_PutAll_AllParameters()
        {
            Uri endpoint = null;
            RequiredAndOptional client = CreateOptionalClient(endpoint).GetRequiredAndOptionalClient(apiVersion: "1.0.0");

            using RequestContent content = RequestContent.Create(new
            {
                optionalProperty = "<optionalProperty>",
                requiredProperty = 1234,
            });
            Response response = await client.PutAllAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RequiredAndOptional_PutAll_AllParameters_Convenience()
        {
            Uri endpoint = null;
            RequiredAndOptional client = CreateOptionalClient(endpoint).GetRequiredAndOptionalClient(apiVersion: "1.0.0");

            RequiredAndOptionalProperty body = new RequiredAndOptionalProperty(1234)
            {
                OptionalProperty = "<optionalProperty>",
            };
            Response response = await client.PutAllAsync(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RequiredAndOptional_PutRequiredOnly_ShortVersion()
        {
            Uri endpoint = null;
            RequiredAndOptional client = CreateOptionalClient(endpoint).GetRequiredAndOptionalClient(apiVersion: "1.0.0");

            using RequestContent content = RequestContent.Create(new
            {
                requiredProperty = 1234,
            });
            Response response = await client.PutRequiredOnlyAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RequiredAndOptional_PutRequiredOnly_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            RequiredAndOptional client = CreateOptionalClient(endpoint).GetRequiredAndOptionalClient(apiVersion: "1.0.0");

            RequiredAndOptionalProperty body = new RequiredAndOptionalProperty(1234);
            Response response = await client.PutRequiredOnlyAsync(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RequiredAndOptional_PutRequiredOnly_AllParameters()
        {
            Uri endpoint = null;
            RequiredAndOptional client = CreateOptionalClient(endpoint).GetRequiredAndOptionalClient(apiVersion: "1.0.0");

            using RequestContent content = RequestContent.Create(new
            {
                optionalProperty = "<optionalProperty>",
                requiredProperty = 1234,
            });
            Response response = await client.PutRequiredOnlyAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RequiredAndOptional_PutRequiredOnly_AllParameters_Convenience()
        {
            Uri endpoint = null;
            RequiredAndOptional client = CreateOptionalClient(endpoint).GetRequiredAndOptionalClient(apiVersion: "1.0.0");

            RequiredAndOptionalProperty body = new RequiredAndOptionalProperty(1234)
            {
                OptionalProperty = "<optionalProperty>",
            };
            Response response = await client.PutRequiredOnlyAsync(body);
        }
    }
}
