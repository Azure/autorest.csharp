// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Type.Property.AdditionalProperties.Models;

namespace _Type.Property.AdditionalProperties.Tests
{
    public partial class MultipleSpreadTests : _TypePropertyAdditionalPropertiesTestBase
    {
        public MultipleSpreadTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task MultipleSpread_GetMultipleSpread_ShortVersion()
        {
            Uri endpoint = null;
            MultipleSpread client = CreateAdditionalPropertiesClient(endpoint).GetMultipleSpreadClient();

            Response response = await client.GetMultipleSpreadAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task MultipleSpread_GetMultipleSpread_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            MultipleSpread client = CreateAdditionalPropertiesClient(endpoint).GetMultipleSpreadClient();

            Response<MultipleSpreadRecord> response = await client.GetMultipleSpreadAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task MultipleSpread_GetMultipleSpread_AllParameters()
        {
            Uri endpoint = null;
            MultipleSpread client = CreateAdditionalPropertiesClient(endpoint).GetMultipleSpreadClient();

            Response response = await client.GetMultipleSpreadAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task MultipleSpread_GetMultipleSpread_AllParameters_Convenience()
        {
            Uri endpoint = null;
            MultipleSpread client = CreateAdditionalPropertiesClient(endpoint).GetMultipleSpreadClient();

            Response<MultipleSpreadRecord> response = await client.GetMultipleSpreadAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task MultipleSpread_Put_ShortVersion()
        {
            Uri endpoint = null;
            MultipleSpread client = CreateAdditionalPropertiesClient(endpoint).GetMultipleSpreadClient();

            using RequestContent content = RequestContent.Create(new
            {
                flag = true,
            });
            Response response = await client.PutAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task MultipleSpread_Put_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            MultipleSpread client = CreateAdditionalPropertiesClient(endpoint).GetMultipleSpreadClient();

            MultipleSpreadRecord body = new MultipleSpreadRecord(true);
            Response response = await client.PutAsync(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task MultipleSpread_Put_AllParameters()
        {
            Uri endpoint = null;
            MultipleSpread client = CreateAdditionalPropertiesClient(endpoint).GetMultipleSpreadClient();

            using RequestContent content = RequestContent.Create(new
            {
                flag = true,
            });
            Response response = await client.PutAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task MultipleSpread_Put_AllParameters_Convenience()
        {
            Uri endpoint = null;
            MultipleSpread client = CreateAdditionalPropertiesClient(endpoint).GetMultipleSpreadClient();

            MultipleSpreadRecord body = new MultipleSpreadRecord(true);
            Response response = await client.PutAsync(body);
        }
    }
}
