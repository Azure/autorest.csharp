// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace _Type.Property.AdditionalProperties.Samples
{
    public partial class Samples_SpreadRecordDiscriminatedUnion
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SpreadRecordDiscriminatedUnion_GetSpreadRecordDiscriminatedUnion_ShortVersion()
        {
            SpreadRecordDiscriminatedUnion client = new AdditionalPropertiesClient().GetSpreadRecordDiscriminatedUnionClient();

            Response response = client.GetSpreadRecordDiscriminatedUnion(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SpreadRecordDiscriminatedUnion_GetSpreadRecordDiscriminatedUnion_ShortVersion_Async()
        {
            SpreadRecordDiscriminatedUnion client = new AdditionalPropertiesClient().GetSpreadRecordDiscriminatedUnionClient();

            Response response = await client.GetSpreadRecordDiscriminatedUnionAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SpreadRecordDiscriminatedUnion_GetSpreadRecordDiscriminatedUnion_ShortVersion_Convenience()
        {
            SpreadRecordDiscriminatedUnion client = new AdditionalPropertiesClient().GetSpreadRecordDiscriminatedUnionClient();

            Response<IReadOnlyDictionary<string, BinaryData>> response = client.GetSpreadRecordDiscriminatedUnion();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SpreadRecordDiscriminatedUnion_GetSpreadRecordDiscriminatedUnion_ShortVersion_Convenience_Async()
        {
            SpreadRecordDiscriminatedUnion client = new AdditionalPropertiesClient().GetSpreadRecordDiscriminatedUnionClient();

            Response<IReadOnlyDictionary<string, BinaryData>> response = await client.GetSpreadRecordDiscriminatedUnionAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SpreadRecordDiscriminatedUnion_GetSpreadRecordDiscriminatedUnion_AllParameters()
        {
            SpreadRecordDiscriminatedUnion client = new AdditionalPropertiesClient().GetSpreadRecordDiscriminatedUnionClient();

            Response response = client.GetSpreadRecordDiscriminatedUnion(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SpreadRecordDiscriminatedUnion_GetSpreadRecordDiscriminatedUnion_AllParameters_Async()
        {
            SpreadRecordDiscriminatedUnion client = new AdditionalPropertiesClient().GetSpreadRecordDiscriminatedUnionClient();

            Response response = await client.GetSpreadRecordDiscriminatedUnionAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SpreadRecordDiscriminatedUnion_GetSpreadRecordDiscriminatedUnion_AllParameters_Convenience()
        {
            SpreadRecordDiscriminatedUnion client = new AdditionalPropertiesClient().GetSpreadRecordDiscriminatedUnionClient();

            Response<IReadOnlyDictionary<string, BinaryData>> response = client.GetSpreadRecordDiscriminatedUnion();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SpreadRecordDiscriminatedUnion_GetSpreadRecordDiscriminatedUnion_AllParameters_Convenience_Async()
        {
            SpreadRecordDiscriminatedUnion client = new AdditionalPropertiesClient().GetSpreadRecordDiscriminatedUnionClient();

            Response<IReadOnlyDictionary<string, BinaryData>> response = await client.GetSpreadRecordDiscriminatedUnionAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SpreadRecordDiscriminatedUnion_Put_ShortVersion()
        {
            SpreadRecordDiscriminatedUnion client = new AdditionalPropertiesClient().GetSpreadRecordDiscriminatedUnionClient();

            using RequestContent content = RequestContent.Create(new
            {
                key = new
                {
                    kind = "kind0",
                    fooProp = "<fooProp>",
                },
            });
            Response response = client.Put(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SpreadRecordDiscriminatedUnion_Put_ShortVersion_Async()
        {
            SpreadRecordDiscriminatedUnion client = new AdditionalPropertiesClient().GetSpreadRecordDiscriminatedUnionClient();

            using RequestContent content = RequestContent.Create(new
            {
                key = new
                {
                    kind = "kind0",
                    fooProp = "<fooProp>",
                },
            });
            Response response = await client.PutAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SpreadRecordDiscriminatedUnion_Put_ShortVersion_Convenience()
        {
            SpreadRecordDiscriminatedUnion client = new AdditionalPropertiesClient().GetSpreadRecordDiscriminatedUnionClient();

            Response response = client.Put(new Dictionary<string, BinaryData>
            {
                ["key"] = BinaryData.FromObjectAsJson(new
                {
                    kind = "kind0",
                    fooProp = "<fooProp>",
                })
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SpreadRecordDiscriminatedUnion_Put_ShortVersion_Convenience_Async()
        {
            SpreadRecordDiscriminatedUnion client = new AdditionalPropertiesClient().GetSpreadRecordDiscriminatedUnionClient();

            Response response = await client.PutAsync(new Dictionary<string, BinaryData>
            {
                ["key"] = BinaryData.FromObjectAsJson(new
                {
                    kind = "kind0",
                    fooProp = "<fooProp>",
                })
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SpreadRecordDiscriminatedUnion_Put_AllParameters()
        {
            SpreadRecordDiscriminatedUnion client = new AdditionalPropertiesClient().GetSpreadRecordDiscriminatedUnionClient();

            using RequestContent content = RequestContent.Create(new
            {
                key = new
                {
                    kind = "kind0",
                    fooProp = "<fooProp>",
                },
            });
            Response response = client.Put(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SpreadRecordDiscriminatedUnion_Put_AllParameters_Async()
        {
            SpreadRecordDiscriminatedUnion client = new AdditionalPropertiesClient().GetSpreadRecordDiscriminatedUnionClient();

            using RequestContent content = RequestContent.Create(new
            {
                key = new
                {
                    kind = "kind0",
                    fooProp = "<fooProp>",
                },
            });
            Response response = await client.PutAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SpreadRecordDiscriminatedUnion_Put_AllParameters_Convenience()
        {
            SpreadRecordDiscriminatedUnion client = new AdditionalPropertiesClient().GetSpreadRecordDiscriminatedUnionClient();

            Response response = client.Put(new Dictionary<string, BinaryData>
            {
                ["key"] = BinaryData.FromObjectAsJson(new
                {
                    kind = "kind0",
                    fooProp = "<fooProp>",
                })
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SpreadRecordDiscriminatedUnion_Put_AllParameters_Convenience_Async()
        {
            SpreadRecordDiscriminatedUnion client = new AdditionalPropertiesClient().GetSpreadRecordDiscriminatedUnionClient();

            Response response = await client.PutAsync(new Dictionary<string, BinaryData>
            {
                ["key"] = BinaryData.FromObjectAsJson(new
                {
                    kind = "kind0",
                    fooProp = "<fooProp>",
                })
            });
        }
    }
}
