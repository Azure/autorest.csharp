// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Type.Property.ValueTypes.Models;

namespace _Type.Property.ValueTypes.Tests
{
    public partial class DictionaryStringTests : _TypePropertyValueTypesTestBase
    {
        public DictionaryStringTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DictionaryString_GetDictionaryString_ShortVersion()
        {
            Uri endpoint = null;
            DictionaryString client = CreateValueTypesClient(endpoint).GetDictionaryStringClient();

            Response response = await client.GetDictionaryStringAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DictionaryString_GetDictionaryString_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            DictionaryString client = CreateValueTypesClient(endpoint).GetDictionaryStringClient();

            Response<DictionaryStringProperty> response = await client.GetDictionaryStringAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DictionaryString_GetDictionaryString_AllParameters()
        {
            Uri endpoint = null;
            DictionaryString client = CreateValueTypesClient(endpoint).GetDictionaryStringClient();

            Response response = await client.GetDictionaryStringAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DictionaryString_GetDictionaryString_AllParameters_Convenience()
        {
            Uri endpoint = null;
            DictionaryString client = CreateValueTypesClient(endpoint).GetDictionaryStringClient();

            Response<DictionaryStringProperty> response = await client.GetDictionaryStringAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DictionaryString_Put_ShortVersion()
        {
            Uri endpoint = null;
            DictionaryString client = CreateValueTypesClient(endpoint).GetDictionaryStringClient();

            using RequestContent content = RequestContent.Create(new
            {
                property = new
                {
                    key = "<property>",
                },
            });
            Response response = await client.PutAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DictionaryString_Put_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            DictionaryString client = CreateValueTypesClient(endpoint).GetDictionaryStringClient();

            DictionaryStringProperty body = new DictionaryStringProperty(new Dictionary<string, string>
            {
                ["key"] = "<property>"
            });
            Response response = await client.PutAsync(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DictionaryString_Put_AllParameters()
        {
            Uri endpoint = null;
            DictionaryString client = CreateValueTypesClient(endpoint).GetDictionaryStringClient();

            using RequestContent content = RequestContent.Create(new
            {
                property = new
                {
                    key = "<property>",
                },
            });
            Response response = await client.PutAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DictionaryString_Put_AllParameters_Convenience()
        {
            Uri endpoint = null;
            DictionaryString client = CreateValueTypesClient(endpoint).GetDictionaryStringClient();

            DictionaryStringProperty body = new DictionaryStringProperty(new Dictionary<string, string>
            {
                ["key"] = "<property>"
            });
            Response response = await client.PutAsync(body);
        }
    }
}
