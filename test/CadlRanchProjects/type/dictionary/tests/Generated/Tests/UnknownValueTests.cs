// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace _Type._Dictionary.Tests
{
    public partial class UnknownValueTests : _Type_DictionaryTestBase
    {
        public UnknownValueTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UnknownValue_GetUnknownValue_ShortVersion()
        {
            Uri endpoint = null;
            UnknownValue client = CreateDictionaryClient(endpoint).GetUnknownValueClient();

            Response response = await client.GetUnknownValueAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UnknownValue_GetUnknownValue_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            UnknownValue client = CreateDictionaryClient(endpoint).GetUnknownValueClient();

            Response<IReadOnlyDictionary<string, BinaryData>> response = await client.GetUnknownValueAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UnknownValue_GetUnknownValue_AllParameters()
        {
            Uri endpoint = null;
            UnknownValue client = CreateDictionaryClient(endpoint).GetUnknownValueClient();

            Response response = await client.GetUnknownValueAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UnknownValue_GetUnknownValue_AllParameters_Convenience()
        {
            Uri endpoint = null;
            UnknownValue client = CreateDictionaryClient(endpoint).GetUnknownValueClient();

            Response<IReadOnlyDictionary<string, BinaryData>> response = await client.GetUnknownValueAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UnknownValue_Put_ShortVersion()
        {
            Uri endpoint = null;
            UnknownValue client = CreateDictionaryClient(endpoint).GetUnknownValueClient();

            using RequestContent content = RequestContent.Create(new
            {
                key = new object(),
            });
            Response response = await client.PutAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UnknownValue_Put_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            UnknownValue client = CreateDictionaryClient(endpoint).GetUnknownValueClient();

            Response response = await client.PutAsync(new Dictionary<string, BinaryData>
            {
                ["key"] = BinaryData.FromObjectAsJson(new object())
            });
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UnknownValue_Put_AllParameters()
        {
            Uri endpoint = null;
            UnknownValue client = CreateDictionaryClient(endpoint).GetUnknownValueClient();

            using RequestContent content = RequestContent.Create(new
            {
                key = new object(),
            });
            Response response = await client.PutAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UnknownValue_Put_AllParameters_Convenience()
        {
            Uri endpoint = null;
            UnknownValue client = CreateDictionaryClient(endpoint).GetUnknownValueClient();

            Response response = await client.PutAsync(new Dictionary<string, BinaryData>
            {
                ["key"] = BinaryData.FromObjectAsJson(new object())
            });
        }
    }
}
