// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Type._Dictionary;

namespace _Type._Dictionary.Tests
{
    public class Int64ValueTests : _Type_DictionaryTestBase
    {
        public Int64ValueTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        public async Task GetInt64Value_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Int64Value client = CreateDictionaryClient(endpoint).GetInt64ValueClient(apiVersion: "1.0.0");

            Response response = await client.GetInt64ValueAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<key>").ToString());
        }

        [Test]
        public async Task GetInt64Value_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Int64Value client = CreateDictionaryClient(endpoint).GetInt64ValueClient(apiVersion: "1.0.0");

            Response<IReadOnlyDictionary<string, long>> response = await client.GetInt64ValueAsync();
        }

        [Test]
        public async Task GetInt64Value_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Int64Value client = CreateDictionaryClient(endpoint).GetInt64ValueClient(apiVersion: "1.0.0");

            Response response = await client.GetInt64ValueAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("<key>").ToString());
        }

        [Test]
        public async Task GetInt64Value_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Int64Value client = CreateDictionaryClient(endpoint).GetInt64ValueClient(apiVersion: "1.0.0");

            Response<IReadOnlyDictionary<string, long>> response = await client.GetInt64ValueAsync();
        }

        [Test]
        public async Task Put_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Int64Value client = CreateDictionaryClient(endpoint).GetInt64ValueClient(apiVersion: "1.0.0");

            RequestContent content = RequestContent.Create(new
            {
                key = 1234L,
            });
            Response response = await client.PutAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Put_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Int64Value client = CreateDictionaryClient(endpoint).GetInt64ValueClient(apiVersion: "1.0.0");

            Response response = await client.PutAsync(new Dictionary<string, long>()
            {
                ["key"] = 1234L,
            });
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Put_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Int64Value client = CreateDictionaryClient(endpoint).GetInt64ValueClient(apiVersion: "1.0.0");

            RequestContent content = RequestContent.Create(new
            {
                key = 1234L,
            });
            Response response = await client.PutAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Put_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Int64Value client = CreateDictionaryClient(endpoint).GetInt64ValueClient(apiVersion: "1.0.0");

            Response response = await client.PutAsync(new Dictionary<string, long>()
            {
                ["key"] = 1234L,
            });
            Console.WriteLine(response.Status);
        }
    }
}
