// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Type.Union;
using _Type.Union.Models;

namespace _Type.Union.Tests
{
    public partial class EnumsOnlyTests : _TypeUnionTestBase
    {
        public EnumsOnlyTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumsOnly_GetEnumsOnly_ShortVersion()
        {
            Uri endpoint = null;
            EnumsOnly client = CreateUnionClient(endpoint).GetEnumsOnlyClient(apiVersion: "1.0.0");

            Response response = await client.GetEnumsOnlyAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumsOnly_GetEnumsOnly_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            EnumsOnly client = CreateUnionClient(endpoint).GetEnumsOnlyClient(apiVersion: "1.0.0");

            Response<object> response = await client.GetEnumsOnlyAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumsOnly_GetEnumsOnly_AllParameters()
        {
            Uri endpoint = null;
            EnumsOnly client = CreateUnionClient(endpoint).GetEnumsOnlyClient(apiVersion: "1.0.0");

            Response response = await client.GetEnumsOnlyAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumsOnly_GetEnumsOnly_AllParameters_Convenience()
        {
            Uri endpoint = null;
            EnumsOnly client = CreateUnionClient(endpoint).GetEnumsOnlyClient(apiVersion: "1.0.0");

            Response<object> response = await client.GetEnumsOnlyAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumsOnly_Send_ShortVersion()
        {
            Uri endpoint = null;
            EnumsOnly client = CreateUnionClient(endpoint).GetEnumsOnlyClient(apiVersion: "1.0.0");

            using RequestContent content = RequestContent.Create(new
            {
                prop = "a",
            });
            Response response = await client.SendAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumsOnly_Send_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            EnumsOnly client = CreateUnionClient(endpoint).GetEnumsOnlyClient(apiVersion: "1.0.0");

            Response response = await client.SendAsync(SendRequestProp.A);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumsOnly_Send_AllParameters()
        {
            Uri endpoint = null;
            EnumsOnly client = CreateUnionClient(endpoint).GetEnumsOnlyClient(apiVersion: "1.0.0");

            using RequestContent content = RequestContent.Create(new
            {
                prop = "a",
            });
            Response response = await client.SendAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task EnumsOnly_Send_AllParameters_Convenience()
        {
            Uri endpoint = null;
            EnumsOnly client = CreateUnionClient(endpoint).GetEnumsOnlyClient(apiVersion: "1.0.0");

            Response response = await client.SendAsync(SendRequestProp.A);
        }
    }
}
