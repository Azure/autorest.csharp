// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace _Type.Union.Models
{
    /// <summary> Enum for prop in SendRequest9. </summary>
    public readonly partial struct SendRequest9Prop : IEquatable<SendRequest9Prop>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SendRequest9Prop"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SendRequest9Prop(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AValue = "a";
        private const string BValue = "b";
        private const string CValue = "c";

        /// <summary> a. </summary>
        public static SendRequest9Prop A { get; } = new SendRequest9Prop(AValue);
        /// <summary> b. </summary>
        public static SendRequest9Prop B { get; } = new SendRequest9Prop(BValue);
        /// <summary> c. </summary>
        public static SendRequest9Prop C { get; } = new SendRequest9Prop(CValue);
        /// <summary> Determines if two <see cref="SendRequest9Prop"/> values are the same. </summary>
        public static bool operator ==(SendRequest9Prop left, SendRequest9Prop right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SendRequest9Prop"/> values are not the same. </summary>
        public static bool operator !=(SendRequest9Prop left, SendRequest9Prop right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SendRequest9Prop"/>. </summary>
        public static implicit operator SendRequest9Prop(string value) => new SendRequest9Prop(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SendRequest9Prop other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SendRequest9Prop other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
