// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace _Type.Union.Models
{
    public partial class EnumsOnlyCases : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("lr"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(Lr);
#else
            using (JsonDocument document = JsonDocument.Parse(Lr))
            {
                JsonSerializer.Serialize(writer, document.RootElement);
            }
#endif
            writer.WritePropertyName("ud"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(Ud);
#else
            using (JsonDocument document = JsonDocument.Parse(Ud))
            {
                JsonSerializer.Serialize(writer, document.RootElement);
            }
#endif
            writer.WriteEndObject();
        }

        internal static EnumsOnlyCases DeserializeEnumsOnlyCases(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            BinaryData lr = default;
            BinaryData ud = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("lr"u8))
                {
                    lr = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("ud"u8))
                {
                    ud = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
            }
            return new EnumsOnlyCases(lr, ud);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static EnumsOnlyCases FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeEnumsOnlyCases(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
