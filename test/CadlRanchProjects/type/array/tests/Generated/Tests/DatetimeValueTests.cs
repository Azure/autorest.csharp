// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace _Type._Array.Tests
{
    public partial class DatetimeValueTests : _Type_ArrayTestBase
    {
        public DatetimeValueTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DatetimeValue_GetDatetimeValue_ShortVersion()
        {
            Uri endpoint = null;
            DatetimeValue client = CreateArrayClient(endpoint).GetDatetimeValueClient();

            Response response = await client.GetDatetimeValueAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DatetimeValue_GetDatetimeValue_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            DatetimeValue client = CreateArrayClient(endpoint).GetDatetimeValueClient();

            Response<IReadOnlyList<DateTimeOffset>> response = await client.GetDatetimeValueAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DatetimeValue_GetDatetimeValue_AllParameters()
        {
            Uri endpoint = null;
            DatetimeValue client = CreateArrayClient(endpoint).GetDatetimeValueClient();

            Response response = await client.GetDatetimeValueAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DatetimeValue_GetDatetimeValue_AllParameters_Convenience()
        {
            Uri endpoint = null;
            DatetimeValue client = CreateArrayClient(endpoint).GetDatetimeValueClient();

            Response<IReadOnlyList<DateTimeOffset>> response = await client.GetDatetimeValueAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DatetimeValue_Put_ShortVersion()
        {
            Uri endpoint = null;
            DatetimeValue client = CreateArrayClient(endpoint).GetDatetimeValueClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
"2022-05-10T18:57:31.2311892Z"
            });
            Response response = await client.PutAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DatetimeValue_Put_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            DatetimeValue client = CreateArrayClient(endpoint).GetDatetimeValueClient();

            Response response = await client.PutAsync(new DateTimeOffset[] { DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z") });
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DatetimeValue_Put_AllParameters()
        {
            Uri endpoint = null;
            DatetimeValue client = CreateArrayClient(endpoint).GetDatetimeValueClient();

            using RequestContent content = RequestContent.Create(new object[]
            {
"2022-05-10T18:57:31.2311892Z"
            });
            Response response = await client.PutAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DatetimeValue_Put_AllParameters_Convenience()
        {
            Uri endpoint = null;
            DatetimeValue client = CreateArrayClient(endpoint).GetDatetimeValueClient();

            Response response = await client.PutAsync(new DateTimeOffset[] { DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z") });
        }
    }
}
