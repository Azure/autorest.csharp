// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Resiliency.ServiceDriven.Old
{
    // Data plane generated client.
    /// <summary> The ResiliencyServiceDriven service client. </summary>
    public partial class ResiliencyServiceDrivenClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly string _serviceDeploymentVersion;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ResiliencyServiceDrivenClient for mocking. </summary>
        protected ResiliencyServiceDrivenClient()
        {
        }

        /// <summary> Initializes a new instance of ResiliencyServiceDrivenClient. </summary>
        /// <param name="serviceDeploymentVersion"> Pass in either 'v1' or 'v2'. This represents a version of the service deployment in history. 'v1' is for the deployment when the service had only one api version. 'v2' is for the deployment when the service had api-versions 'v1' and 'v2'. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceDeploymentVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="serviceDeploymentVersion"/> is an empty string, and was expected to be non-empty. </exception>
        public ResiliencyServiceDrivenClient(string serviceDeploymentVersion) : this(serviceDeploymentVersion, new ResiliencyServiceDrivenClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ResiliencyServiceDrivenClient. </summary>
        /// <param name="serviceDeploymentVersion"> Pass in either 'v1' or 'v2'. This represents a version of the service deployment in history. 'v1' is for the deployment when the service had only one api version. 'v2' is for the deployment when the service had api-versions 'v1' and 'v2'. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceDeploymentVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="serviceDeploymentVersion"/> is an empty string, and was expected to be non-empty. </exception>
        public ResiliencyServiceDrivenClient(string serviceDeploymentVersion, ResiliencyServiceDrivenClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(serviceDeploymentVersion, nameof(serviceDeploymentVersion));
            options ??= new ResiliencyServiceDrivenClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _serviceDeploymentVersion = serviceDeploymentVersion;
            _apiVersion = options.Version;
        }

        /// <summary>
        /// [Protocol Method] Test that currently accepts no parameters, will be updated in next spec to accept a new optional parameter as well
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ResiliencyServiceDrivenClient.xml" path="doc/members/member[@name='FromNoneAsync(RequestContext)']/*" />
        public virtual async Task<Response> FromNoneAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ResiliencyServiceDrivenClient.FromNone");
            scope.Start();
            try
            {
                using HttpMessage message = CreateFromNoneRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Test that currently accepts no parameters, will be updated in next spec to accept a new optional parameter as well
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ResiliencyServiceDrivenClient.xml" path="doc/members/member[@name='FromNone(RequestContext)']/*" />
        public virtual Response FromNone(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ResiliencyServiceDrivenClient.FromNone");
            scope.Start();
            try
            {
                using HttpMessage message = CreateFromNoneRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Test that currently accepts one required parameter, will be updated in next spec to accept a new optional parameter as well
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="parameter"> I am a required parameter. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameter"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ResiliencyServiceDrivenClient.xml" path="doc/members/member[@name='FromOneRequiredAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> FromOneRequiredAsync(string parameter, RequestContext context = null)
        {
            Argument.AssertNotNull(parameter, nameof(parameter));

            using var scope = ClientDiagnostics.CreateScope("ResiliencyServiceDrivenClient.FromOneRequired");
            scope.Start();
            try
            {
                using HttpMessage message = CreateFromOneRequiredRequest(parameter, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Test that currently accepts one required parameter, will be updated in next spec to accept a new optional parameter as well
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="parameter"> I am a required parameter. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameter"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ResiliencyServiceDrivenClient.xml" path="doc/members/member[@name='FromOneRequired(string,RequestContext)']/*" />
        public virtual Response FromOneRequired(string parameter, RequestContext context = null)
        {
            Argument.AssertNotNull(parameter, nameof(parameter));

            using var scope = ClientDiagnostics.CreateScope("ResiliencyServiceDrivenClient.FromOneRequired");
            scope.Start();
            try
            {
                using HttpMessage message = CreateFromOneRequiredRequest(parameter, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Test that currently accepts one optional parameter, will be updated in next spec to accept a new optional parameter as well
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="parameter"> I am an optional parameter. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ResiliencyServiceDrivenClient.xml" path="doc/members/member[@name='FromOneOptionalAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> FromOneOptionalAsync(string parameter = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ResiliencyServiceDrivenClient.FromOneOptional");
            scope.Start();
            try
            {
                using HttpMessage message = CreateFromOneOptionalRequest(parameter, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Test that currently accepts one optional parameter, will be updated in next spec to accept a new optional parameter as well
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="parameter"> I am an optional parameter. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ResiliencyServiceDrivenClient.xml" path="doc/members/member[@name='FromOneOptional(string,RequestContext)']/*" />
        public virtual Response FromOneOptional(string parameter = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ResiliencyServiceDrivenClient.FromOneOptional");
            scope.Start();
            try
            {
                using HttpMessage message = CreateFromOneOptionalRequest(parameter, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateFromNoneRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("http://localhost:3000/resiliency/service-driven/client:v1/service:", false);
            uri.AppendRaw(_serviceDeploymentVersion, true);
            uri.AppendRaw("/api-version:", false);
            uri.AppendRaw(_apiVersion, true);
            uri.AppendPath("/add-optional-param/from-none", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateFromOneRequiredRequest(string parameter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("http://localhost:3000/resiliency/service-driven/client:v1/service:", false);
            uri.AppendRaw(_serviceDeploymentVersion, true);
            uri.AppendRaw("/api-version:", false);
            uri.AppendRaw(_apiVersion, true);
            uri.AppendPath("/add-optional-param/from-one-required", false);
            uri.AppendQuery("parameter", parameter, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateFromOneOptionalRequest(string parameter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("http://localhost:3000/resiliency/service-driven/client:v1/service:", false);
            uri.AppendRaw(_serviceDeploymentVersion, true);
            uri.AppendRaw("/api-version:", false);
            uri.AppendRaw(_apiVersion, true);
            uri.AppendPath("/add-optional-param/from-one-optional", false);
            if (parameter != null)
            {
                uri.AppendQuery("parameter", parameter, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
