// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Parameters.Spread.Samples
{
    public partial class Samples_Alias
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Alias_SpreadAsRequestBody_ShortVersion()
        {
            Alias client = new SpreadClient().GetAliasClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.SpreadAsRequestBody(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Alias_SpreadAsRequestBody_ShortVersion_Async()
        {
            Alias client = new SpreadClient().GetAliasClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.SpreadAsRequestBodyAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Alias_SpreadAsRequestBody_ShortVersion_Convenience()
        {
            Alias client = new SpreadClient().GetAliasClient();

            Response response = client.SpreadAsRequestBody("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Alias_SpreadAsRequestBody_ShortVersion_Convenience_Async()
        {
            Alias client = new SpreadClient().GetAliasClient();

            Response response = await client.SpreadAsRequestBodyAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Alias_SpreadAsRequestBody_AllParameters()
        {
            Alias client = new SpreadClient().GetAliasClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.SpreadAsRequestBody(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Alias_SpreadAsRequestBody_AllParameters_Async()
        {
            Alias client = new SpreadClient().GetAliasClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.SpreadAsRequestBodyAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Alias_SpreadAsRequestBody_AllParameters_Convenience()
        {
            Alias client = new SpreadClient().GetAliasClient();

            Response response = client.SpreadAsRequestBody("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Alias_SpreadAsRequestBody_AllParameters_Convenience_Async()
        {
            Alias client = new SpreadClient().GetAliasClient();

            Response response = await client.SpreadAsRequestBodyAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Alias_SpreadParameterWithInnerModel_ShortVersion()
        {
            Alias client = new SpreadClient().GetAliasClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.SpreadParameterWithInnerModel("<id>", "<x-ms-test-header>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Alias_SpreadParameterWithInnerModel_ShortVersion_Async()
        {
            Alias client = new SpreadClient().GetAliasClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.SpreadParameterWithInnerModelAsync("<id>", "<x-ms-test-header>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Alias_SpreadParameterWithInnerModel_ShortVersion_Convenience()
        {
            Alias client = new SpreadClient().GetAliasClient();

            Response response = client.SpreadParameterWithInnerModel("<id>", "<x-ms-test-header>", "<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Alias_SpreadParameterWithInnerModel_ShortVersion_Convenience_Async()
        {
            Alias client = new SpreadClient().GetAliasClient();

            Response response = await client.SpreadParameterWithInnerModelAsync("<id>", "<x-ms-test-header>", "<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Alias_SpreadParameterWithInnerModel_AllParameters()
        {
            Alias client = new SpreadClient().GetAliasClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.SpreadParameterWithInnerModel("<id>", "<x-ms-test-header>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Alias_SpreadParameterWithInnerModel_AllParameters_Async()
        {
            Alias client = new SpreadClient().GetAliasClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.SpreadParameterWithInnerModelAsync("<id>", "<x-ms-test-header>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Alias_SpreadParameterWithInnerModel_AllParameters_Convenience()
        {
            Alias client = new SpreadClient().GetAliasClient();

            Response response = client.SpreadParameterWithInnerModel("<id>", "<x-ms-test-header>", "<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Alias_SpreadParameterWithInnerModel_AllParameters_Convenience_Async()
        {
            Alias client = new SpreadClient().GetAliasClient();

            Response response = await client.SpreadParameterWithInnerModelAsync("<id>", "<x-ms-test-header>", "<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Alias_SpreadAsRequestParameter_ShortVersion()
        {
            Alias client = new SpreadClient().GetAliasClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.SpreadAsRequestParameter("<id>", "<x-ms-test-header>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Alias_SpreadAsRequestParameter_ShortVersion_Async()
        {
            Alias client = new SpreadClient().GetAliasClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.SpreadAsRequestParameterAsync("<id>", "<x-ms-test-header>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Alias_SpreadAsRequestParameter_ShortVersion_Convenience()
        {
            Alias client = new SpreadClient().GetAliasClient();

            Response response = client.SpreadAsRequestParameter("<id>", "<x-ms-test-header>", "<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Alias_SpreadAsRequestParameter_ShortVersion_Convenience_Async()
        {
            Alias client = new SpreadClient().GetAliasClient();

            Response response = await client.SpreadAsRequestParameterAsync("<id>", "<x-ms-test-header>", "<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Alias_SpreadAsRequestParameter_AllParameters()
        {
            Alias client = new SpreadClient().GetAliasClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.SpreadAsRequestParameter("<id>", "<x-ms-test-header>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Alias_SpreadAsRequestParameter_AllParameters_Async()
        {
            Alias client = new SpreadClient().GetAliasClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.SpreadAsRequestParameterAsync("<id>", "<x-ms-test-header>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Alias_SpreadAsRequestParameter_AllParameters_Convenience()
        {
            Alias client = new SpreadClient().GetAliasClient();

            Response response = client.SpreadAsRequestParameter("<id>", "<x-ms-test-header>", "<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Alias_SpreadAsRequestParameter_AllParameters_Convenience_Async()
        {
            Alias client = new SpreadClient().GetAliasClient();

            Response response = await client.SpreadAsRequestParameterAsync("<id>", "<x-ms-test-header>", "<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Alias_SpreadWithMultipleParameters_ShortVersion()
        {
            Alias client = new SpreadClient().GetAliasClient();

            using RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredIntList = new object[]
            {
1234
            },
            });
            Response response = client.SpreadWithMultipleParameters("<id>", "<x-ms-test-header>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Alias_SpreadWithMultipleParameters_ShortVersion_Async()
        {
            Alias client = new SpreadClient().GetAliasClient();

            using RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredIntList = new object[]
            {
1234
            },
            });
            Response response = await client.SpreadWithMultipleParametersAsync("<id>", "<x-ms-test-header>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Alias_SpreadWithMultipleParameters_ShortVersion_Convenience()
        {
            Alias client = new SpreadClient().GetAliasClient();

            Response response = client.SpreadWithMultipleParameters("<id>", "<x-ms-test-header>", "<requiredString>", new int[] { 1234 });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Alias_SpreadWithMultipleParameters_ShortVersion_Convenience_Async()
        {
            Alias client = new SpreadClient().GetAliasClient();

            Response response = await client.SpreadWithMultipleParametersAsync("<id>", "<x-ms-test-header>", "<requiredString>", new int[] { 1234 });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Alias_SpreadWithMultipleParameters_AllParameters()
        {
            Alias client = new SpreadClient().GetAliasClient();

            using RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                optionalInt = 1234,
                requiredIntList = new object[]
            {
1234
            },
                optionalStringList = new object[]
            {
"<optionalStringList>"
            },
            });
            Response response = client.SpreadWithMultipleParameters("<id>", "<x-ms-test-header>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Alias_SpreadWithMultipleParameters_AllParameters_Async()
        {
            Alias client = new SpreadClient().GetAliasClient();

            using RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                optionalInt = 1234,
                requiredIntList = new object[]
            {
1234
            },
                optionalStringList = new object[]
            {
"<optionalStringList>"
            },
            });
            Response response = await client.SpreadWithMultipleParametersAsync("<id>", "<x-ms-test-header>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Alias_SpreadWithMultipleParameters_AllParameters_Convenience()
        {
            Alias client = new SpreadClient().GetAliasClient();

            Response response = client.SpreadWithMultipleParameters("<id>", "<x-ms-test-header>", "<requiredString>", new int[] { 1234 }, optionalInt: 1234, optionalStringList: new string[] { "<optionalStringList>" });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Alias_SpreadWithMultipleParameters_AllParameters_Convenience_Async()
        {
            Alias client = new SpreadClient().GetAliasClient();

            Response response = await client.SpreadWithMultipleParametersAsync("<id>", "<x-ms-test-header>", "<requiredString>", new int[] { 1234 }, optionalInt: 1234, optionalStringList: new string[] { "<optionalStringList>" });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Alias_SpreadParameterWithInnerAlias_ShortVersion()
        {
            Alias client = new SpreadClient().GetAliasClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                age = 1234,
            });
            Response response = client.SpreadParameterWithInnerAlias("<id>", "<x-ms-test-header>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Alias_SpreadParameterWithInnerAlias_ShortVersion_Async()
        {
            Alias client = new SpreadClient().GetAliasClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                age = 1234,
            });
            Response response = await client.SpreadParameterWithInnerAliasAsync("<id>", "<x-ms-test-header>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Alias_SpreadParameterWithInnerAlias_ShortVersion_Convenience()
        {
            Alias client = new SpreadClient().GetAliasClient();

            Response response = client.SpreadParameterWithInnerAlias("<id>", "<x-ms-test-header>", "<name>", 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Alias_SpreadParameterWithInnerAlias_ShortVersion_Convenience_Async()
        {
            Alias client = new SpreadClient().GetAliasClient();

            Response response = await client.SpreadParameterWithInnerAliasAsync("<id>", "<x-ms-test-header>", "<name>", 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Alias_SpreadParameterWithInnerAlias_AllParameters()
        {
            Alias client = new SpreadClient().GetAliasClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                age = 1234,
            });
            Response response = client.SpreadParameterWithInnerAlias("<id>", "<x-ms-test-header>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Alias_SpreadParameterWithInnerAlias_AllParameters_Async()
        {
            Alias client = new SpreadClient().GetAliasClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                age = 1234,
            });
            Response response = await client.SpreadParameterWithInnerAliasAsync("<id>", "<x-ms-test-header>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Alias_SpreadParameterWithInnerAlias_AllParameters_Convenience()
        {
            Alias client = new SpreadClient().GetAliasClient();

            Response response = client.SpreadParameterWithInnerAlias("<id>", "<x-ms-test-header>", "<name>", 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Alias_SpreadParameterWithInnerAlias_AllParameters_Convenience_Async()
        {
            Alias client = new SpreadClient().GetAliasClient();

            Response response = await client.SpreadParameterWithInnerAliasAsync("<id>", "<x-ms-test-header>", "<name>", 1234);
        }
    }
}
