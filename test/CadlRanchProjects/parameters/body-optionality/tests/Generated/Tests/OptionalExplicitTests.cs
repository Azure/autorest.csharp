// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using Parameters.BodyOptionality;
using Parameters.BodyOptionality.Models;

namespace Parameters.BodyOptionality.Tests
{
    public class OptionalExplicitTests : ParametersBodyOptionalityTestBase
    {
        public OptionalExplicitTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Set_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            OptionalExplicit client = CreateBodyOptionalityClient(endpoint).GetOptionalExplicitClient();

            RequestContent content = null;
            Response response = await client.SetAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Set_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            OptionalExplicit client = CreateBodyOptionalityClient(endpoint).GetOptionalExplicitClient();

            Response response = await client.SetAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Set_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            OptionalExplicit client = CreateBodyOptionalityClient(endpoint).GetOptionalExplicitClient();

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.SetAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Set_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            OptionalExplicit client = CreateBodyOptionalityClient(endpoint).GetOptionalExplicitClient();

            BodyModel body = new BodyModel("<name>");
            Response response = await client.SetAsync(body: body);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Omit_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            OptionalExplicit client = CreateBodyOptionalityClient(endpoint).GetOptionalExplicitClient();

            RequestContent content = null;
            Response response = await client.OmitAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Omit_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            OptionalExplicit client = CreateBodyOptionalityClient(endpoint).GetOptionalExplicitClient();

            Response response = await client.OmitAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Omit_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            OptionalExplicit client = CreateBodyOptionalityClient(endpoint).GetOptionalExplicitClient();

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.OmitAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Omit_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            OptionalExplicit client = CreateBodyOptionalityClient(endpoint).GetOptionalExplicitClient();

            BodyModel body = new BodyModel("<name>");
            Response response = await client.OmitAsync(body: body);
        }
    }
}
