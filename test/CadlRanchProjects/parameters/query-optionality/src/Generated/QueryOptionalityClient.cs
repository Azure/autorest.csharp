// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Parameters.QueryOptionality
{
    // Data plane generated client.
    /// <summary> Test describing optionality of the query. </summary>
    public partial class QueryOptionalityClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of QueryOptionalityClient. </summary>
        public QueryOptionalityClient() : this(new Uri("http://localhost:3000"), new QueryOptionalityClientOptions())
        {
        }

        /// <summary> Initializes a new instance of QueryOptionalityClient. </summary>
        /// <param name="endpoint"> The <see cref="Uri"/> to use. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public QueryOptionalityClient(Uri endpoint, QueryOptionalityClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new QueryOptionalityClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] From required.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="start"> The <see cref="string"/> to use. </param>
        /// <param name="end"> The <see cref="string"/> to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="start"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/QueryOptionalityClient.xml" path="doc/members/member[@name='FromRequiredAsync(string,string,RequestContext)']/*" />
        public virtual async Task<Response> FromRequiredAsync(string start, string end = null, RequestContext context = null)
        {
            Argument.AssertNotNull(start, nameof(start));

            using var scope = ClientDiagnostics.CreateScope("QueryOptionalityClient.FromRequired");
            scope.Start();
            try
            {
                using HttpMessage message = CreateFromRequiredRequest(start, end, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] From required.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="start"> The <see cref="string"/> to use. </param>
        /// <param name="end"> The <see cref="string"/> to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="start"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/QueryOptionalityClient.xml" path="doc/members/member[@name='FromRequired(string,string,RequestContext)']/*" />
        public virtual Response FromRequired(string start, string end = null, RequestContext context = null)
        {
            Argument.AssertNotNull(start, nameof(start));

            using var scope = ClientDiagnostics.CreateScope("QueryOptionalityClient.FromRequired");
            scope.Start();
            try
            {
                using HttpMessage message = CreateFromRequiredRequest(start, end, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] From optional.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="end"> The <see cref="string"/> to use. </param>
        /// <param name="start"> The <see cref="string"/> to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="end"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/QueryOptionalityClient.xml" path="doc/members/member[@name='FromOptionalAsync(string,string,RequestContext)']/*" />
        public virtual async Task<Response> FromOptionalAsync(string end, string start = null, RequestContext context = null)
        {
            Argument.AssertNotNull(end, nameof(end));

            using var scope = ClientDiagnostics.CreateScope("QueryOptionalityClient.FromOptional");
            scope.Start();
            try
            {
                using HttpMessage message = CreateFromOptionalRequest(end, start, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] From optional.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="end"> The <see cref="string"/> to use. </param>
        /// <param name="start"> The <see cref="string"/> to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="end"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/QueryOptionalityClient.xml" path="doc/members/member[@name='FromOptional(string,string,RequestContext)']/*" />
        public virtual Response FromOptional(string end, string start = null, RequestContext context = null)
        {
            Argument.AssertNotNull(end, nameof(end));

            using var scope = ClientDiagnostics.CreateScope("QueryOptionalityClient.FromOptional");
            scope.Start();
            try
            {
                using HttpMessage message = CreateFromOptionalRequest(end, start, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateFromRequiredRequest(string start, string end, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/parameters/query-optionality/fromrequired", false);
            uri.AppendQuery("start", start, true);
            if (end != null)
            {
                uri.AppendQuery("end", end, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateFromOptionalRequest(string end, string start, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/parameters/query-optionality/fromoptional", false);
            uri.AppendQuery("end", end, true);
            if (start != null)
            {
                uri.AppendQuery("start", start, true);
            }
            request.Uri = uri;
            return message;
        }

        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
