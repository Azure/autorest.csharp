// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Identity;
using NUnit.Framework;
using Parameters.CollectionFormat;

namespace Parameters.CollectionFormat.Tests
{
    public partial class QueryTests : ParametersCollectionFormatTestBase
    {
        public QueryTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Query_Multi_ShortVersion()
        {
            Uri endpoint = null;
            Query client = CreateCollectionFormatClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.MultiAsync(new string[] { "<colors>" });
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Query_Multi_AllParameters()
        {
            Uri endpoint = null;
            Query client = CreateCollectionFormatClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.MultiAsync(new string[] { "<colors>" });
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Query_Ssv_ShortVersion()
        {
            Uri endpoint = null;
            Query client = CreateCollectionFormatClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.SsvAsync(new string[] { "<colors>" });
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Query_Ssv_AllParameters()
        {
            Uri endpoint = null;
            Query client = CreateCollectionFormatClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.SsvAsync(new string[] { "<colors>" });
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Query_Tsv_ShortVersion()
        {
            Uri endpoint = null;
            Query client = CreateCollectionFormatClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.TsvAsync(new string[] { "<colors>" });
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Query_Tsv_AllParameters()
        {
            Uri endpoint = null;
            Query client = CreateCollectionFormatClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.TsvAsync(new string[] { "<colors>" });
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Query_Pipes_ShortVersion()
        {
            Uri endpoint = null;
            Query client = CreateCollectionFormatClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.PipesAsync(new string[] { "<colors>" });
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Query_Pipes_AllParameters()
        {
            Uri endpoint = null;
            Query client = CreateCollectionFormatClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.PipesAsync(new string[] { "<colors>" });
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Query_Csv_ShortVersion()
        {
            Uri endpoint = null;
            Query client = CreateCollectionFormatClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.CsvAsync(new string[] { "<colors>" });
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Query_Csv_AllParameters()
        {
            Uri endpoint = null;
            Query client = CreateCollectionFormatClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.CsvAsync(new string[] { "<colors>" });
        }
    }
}
