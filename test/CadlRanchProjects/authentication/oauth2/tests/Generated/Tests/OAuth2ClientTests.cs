// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Authentication.OAuth2;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Authentication.OAuth2.Tests
{
    public partial class OAuth2ClientTests : AuthenticationOAuth2TestBase
    {
        public OAuth2ClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task OAuth2_Valid_ShortVersion()
        {
            Uri endpoint = null;
            TokenCredential credential = new DefaultAzureCredential();
            OAuth2Client client = CreateOAuth2Client(endpoint, credential);

            Response response = await client.ValidAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task OAuth2_Valid_AllParameters()
        {
            Uri endpoint = null;
            TokenCredential credential = new DefaultAzureCredential();
            OAuth2Client client = CreateOAuth2Client(endpoint, credential);

            Response response = await client.ValidAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task OAuth2_Invalid_ShortVersion()
        {
            Uri endpoint = null;
            TokenCredential credential = new DefaultAzureCredential();
            OAuth2Client client = CreateOAuth2Client(endpoint, credential);

            Response response = await client.InvalidAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task OAuth2_Invalid_AllParameters()
        {
            Uri endpoint = null;
            TokenCredential credential = new DefaultAzureCredential();
            OAuth2Client client = CreateOAuth2Client(endpoint, credential);

            Response response = await client.InvalidAsync();
        }
    }
}
