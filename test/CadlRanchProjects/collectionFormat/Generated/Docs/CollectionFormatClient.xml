<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="TestMultiAsync(IEnumerable,RequestContext)">
<example>
This sample shows how to call TestMultiAsync with required parameters and parse the result.
<code><![CDATA[
var client = new CollectionFormatClient();

Response response = await client.TestMultiAsync(new String[]{"<colors>"});

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("message").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>MessageResponse</c>:
<code>{
  message: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="TestMulti(IEnumerable,RequestContext)">
<example>
This sample shows how to call TestMulti with required parameters and parse the result.
<code><![CDATA[
var client = new CollectionFormatClient();

Response response = client.TestMulti(new String[]{"<colors>"});

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("message").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>MessageResponse</c>:
<code>{
  message: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="TestCsvAsync(IEnumerable,RequestContext)">
<example>
This sample shows how to call TestCsvAsync with required parameters and parse the result.
<code><![CDATA[
var client = new CollectionFormatClient();

Response response = await client.TestCsvAsync(new String[]{"<colors>"});

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("message").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>MessageResponse</c>:
<code>{
  message: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="TestCsv(IEnumerable,RequestContext)">
<example>
This sample shows how to call TestCsv with required parameters and parse the result.
<code><![CDATA[
var client = new CollectionFormatClient();

Response response = client.TestCsv(new String[]{"<colors>"});

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("message").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>MessageResponse</c>:
<code>{
  message: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="TestCsvHeaderAsync(IEnumerable,RequestContext)">
<example>
This sample shows how to call TestCsvHeaderAsync with required parameters and parse the result.
<code><![CDATA[
var client = new CollectionFormatClient();

Response response = await client.TestCsvHeaderAsync(new String[]{"<colors>"});

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("message").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>MessageResponse</c>:
<code>{
  message: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="TestCsvHeader(IEnumerable,RequestContext)">
<example>
This sample shows how to call TestCsvHeader with required parameters and parse the result.
<code><![CDATA[
var client = new CollectionFormatClient();

Response response = client.TestCsvHeader(new String[]{"<colors>"});

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("message").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>MessageResponse</c>:
<code>{
  message: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="TestDefaultHeaderAsync(IEnumerable,RequestContext)">
<example>
This sample shows how to call TestDefaultHeaderAsync with required parameters and parse the result.
<code><![CDATA[
var client = new CollectionFormatClient();

Response response = await client.TestDefaultHeaderAsync(new String[]{"<colors>"});

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("message").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>MessageResponse</c>:
<code>{
  message: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="TestDefaultHeader(IEnumerable,RequestContext)">
<example>
This sample shows how to call TestDefaultHeader with required parameters and parse the result.
<code><![CDATA[
var client = new CollectionFormatClient();

Response response = client.TestDefaultHeader(new String[]{"<colors>"});

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("message").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>MessageResponse</c>:
<code>{
  message: string, # Required.
}
</code>

</remarks>
    </member>
  </members>
</doc>