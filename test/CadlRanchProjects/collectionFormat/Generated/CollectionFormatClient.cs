// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using CollectionFormat.Models;

namespace CollectionFormat
{
    // Data plane generated client.
    /// <summary> Test for collectionFormat. </summary>
    public partial class CollectionFormatClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of CollectionFormatClient. </summary>
        public CollectionFormatClient() : this(new Uri("http://localhost:3000"), new CollectionFormatClientOptions())
        {
        }

        /// <summary> Initializes a new instance of CollectionFormatClient. </summary>
        /// <param name="endpoint"> TestServer endpoint. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public CollectionFormatClient(Uri endpoint, CollectionFormatClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new CollectionFormatClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <param name="colors"> Possible values for colors are [blue,red,green]. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="colors"/> is null. </exception>
        public virtual async Task<Response<MessageResponse>> TestMultiValueAsync(IEnumerable<string> colors, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(colors, nameof(colors));

            using var scope = ClientDiagnostics.CreateScope("CollectionFormatClient.TestMultiValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await TestMultiAsync(colors, context).ConfigureAwait(false);
                return Response.FromValue(MessageResponse.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="colors"> Possible values for colors are [blue,red,green]. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="colors"/> is null. </exception>
        public virtual Response<MessageResponse> TestMultiValue(IEnumerable<string> colors, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(colors, nameof(colors));

            using var scope = ClientDiagnostics.CreateScope("CollectionFormatClient.TestMultiValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = TestMulti(colors, context);
                return Response.FromValue(MessageResponse.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="colors"> Possible values for colors are [blue,red,green]. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="colors"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/CollectionFormatClient.xml" path="doc/members/member[@name='TestMultiAsync(IEnumerable,RequestContext)']/*" />
        public virtual async Task<Response> TestMultiAsync(IEnumerable<string> colors, RequestContext context = null)
        {
            Argument.AssertNotNull(colors, nameof(colors));

            using var scope = ClientDiagnostics.CreateScope("CollectionFormatClient.TestMulti");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTestMultiRequest(colors, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="colors"> Possible values for colors are [blue,red,green]. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="colors"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/CollectionFormatClient.xml" path="doc/members/member[@name='TestMulti(IEnumerable,RequestContext)']/*" />
        public virtual Response TestMulti(IEnumerable<string> colors, RequestContext context = null)
        {
            Argument.AssertNotNull(colors, nameof(colors));

            using var scope = ClientDiagnostics.CreateScope("CollectionFormatClient.TestMulti");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTestMultiRequest(colors, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="colors"> Possible values for colors are [blue,red,green]. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="colors"/> is null. </exception>
        public virtual async Task<Response<MessageResponse>> TestCsvValueAsync(IEnumerable<string> colors, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(colors, nameof(colors));

            using var scope = ClientDiagnostics.CreateScope("CollectionFormatClient.TestCsvValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await TestCsvAsync(colors, context).ConfigureAwait(false);
                return Response.FromValue(MessageResponse.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="colors"> Possible values for colors are [blue,red,green]. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="colors"/> is null. </exception>
        public virtual Response<MessageResponse> TestCsvValue(IEnumerable<string> colors, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(colors, nameof(colors));

            using var scope = ClientDiagnostics.CreateScope("CollectionFormatClient.TestCsvValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = TestCsv(colors, context);
                return Response.FromValue(MessageResponse.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="colors"> Possible values for colors are [blue,red,green]. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="colors"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/CollectionFormatClient.xml" path="doc/members/member[@name='TestCsvAsync(IEnumerable,RequestContext)']/*" />
        public virtual async Task<Response> TestCsvAsync(IEnumerable<string> colors, RequestContext context = null)
        {
            Argument.AssertNotNull(colors, nameof(colors));

            using var scope = ClientDiagnostics.CreateScope("CollectionFormatClient.TestCsv");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTestCsvRequest(colors, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="colors"> Possible values for colors are [blue,red,green]. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="colors"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/CollectionFormatClient.xml" path="doc/members/member[@name='TestCsv(IEnumerable,RequestContext)']/*" />
        public virtual Response TestCsv(IEnumerable<string> colors, RequestContext context = null)
        {
            Argument.AssertNotNull(colors, nameof(colors));

            using var scope = ClientDiagnostics.CreateScope("CollectionFormatClient.TestCsv");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTestCsvRequest(colors, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="colors"> Possible values for colors are [blue,red,green]. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="colors"/> is null. </exception>
        public virtual async Task<Response<MessageResponse>> TestCsvHeaderValueAsync(IEnumerable<string> colors, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(colors, nameof(colors));

            using var scope = ClientDiagnostics.CreateScope("CollectionFormatClient.TestCsvHeaderValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await TestCsvHeaderAsync(colors, context).ConfigureAwait(false);
                return Response.FromValue(MessageResponse.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="colors"> Possible values for colors are [blue,red,green]. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="colors"/> is null. </exception>
        public virtual Response<MessageResponse> TestCsvHeaderValue(IEnumerable<string> colors, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(colors, nameof(colors));

            using var scope = ClientDiagnostics.CreateScope("CollectionFormatClient.TestCsvHeaderValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = TestCsvHeader(colors, context);
                return Response.FromValue(MessageResponse.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="colors"> Possible values for colors are [blue,red,green]. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="colors"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/CollectionFormatClient.xml" path="doc/members/member[@name='TestCsvHeaderAsync(IEnumerable,RequestContext)']/*" />
        public virtual async Task<Response> TestCsvHeaderAsync(IEnumerable<string> colors, RequestContext context = null)
        {
            Argument.AssertNotNull(colors, nameof(colors));

            using var scope = ClientDiagnostics.CreateScope("CollectionFormatClient.TestCsvHeader");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTestCsvHeaderRequest(colors, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="colors"> Possible values for colors are [blue,red,green]. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="colors"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/CollectionFormatClient.xml" path="doc/members/member[@name='TestCsvHeader(IEnumerable,RequestContext)']/*" />
        public virtual Response TestCsvHeader(IEnumerable<string> colors, RequestContext context = null)
        {
            Argument.AssertNotNull(colors, nameof(colors));

            using var scope = ClientDiagnostics.CreateScope("CollectionFormatClient.TestCsvHeader");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTestCsvHeaderRequest(colors, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="colors"> Possible values for colors are [blue,red,green]. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="colors"/> is null. </exception>
        public virtual async Task<Response<MessageResponse>> TestDefaultHeaderValueAsync(IEnumerable<string> colors, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(colors, nameof(colors));

            using var scope = ClientDiagnostics.CreateScope("CollectionFormatClient.TestDefaultHeaderValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await TestDefaultHeaderAsync(colors, context).ConfigureAwait(false);
                return Response.FromValue(MessageResponse.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="colors"> Possible values for colors are [blue,red,green]. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="colors"/> is null. </exception>
        public virtual Response<MessageResponse> TestDefaultHeaderValue(IEnumerable<string> colors, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(colors, nameof(colors));

            using var scope = ClientDiagnostics.CreateScope("CollectionFormatClient.TestDefaultHeaderValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = TestDefaultHeader(colors, context);
                return Response.FromValue(MessageResponse.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="colors"> Possible values for colors are [blue,red,green]. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="colors"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/CollectionFormatClient.xml" path="doc/members/member[@name='TestDefaultHeaderAsync(IEnumerable,RequestContext)']/*" />
        public virtual async Task<Response> TestDefaultHeaderAsync(IEnumerable<string> colors, RequestContext context = null)
        {
            Argument.AssertNotNull(colors, nameof(colors));

            using var scope = ClientDiagnostics.CreateScope("CollectionFormatClient.TestDefaultHeader");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTestDefaultHeaderRequest(colors, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="colors"> Possible values for colors are [blue,red,green]. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="colors"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/CollectionFormatClient.xml" path="doc/members/member[@name='TestDefaultHeader(IEnumerable,RequestContext)']/*" />
        public virtual Response TestDefaultHeader(IEnumerable<string> colors, RequestContext context = null)
        {
            Argument.AssertNotNull(colors, nameof(colors));

            using var scope = ClientDiagnostics.CreateScope("CollectionFormatClient.TestDefaultHeader");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTestDefaultHeaderRequest(colors, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateTestMultiRequest(IEnumerable<string> colors, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/collectionFormat/multi", false);
            foreach (var param in colors)
            {
                uri.AppendQuery("colors", param, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateTestCsvRequest(IEnumerable<string> colors, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/collectionFormat/csv", false);
            uri.AppendQueryDelimited("colors", colors, ",", true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateTestCsvHeaderRequest(IEnumerable<string> colors, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/collectionFormat/csvHeader", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.AddDelimited("colors", colors, ",");
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateTestDefaultHeaderRequest(IEnumerable<string> colors, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/collectionFormat/defaultHeader", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.AddDelimited("colors", colors, ",");
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
