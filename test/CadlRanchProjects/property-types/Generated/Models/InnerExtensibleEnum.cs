// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Models.Property.Types.Models
{
    /// <summary> Extensible enum that will be used as a property for model InnerExtensibleEnum. </summary>
    public readonly partial struct InnerExtensibleEnum : IEquatable<InnerExtensibleEnum>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="InnerExtensibleEnum"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public InnerExtensibleEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ValueOneValue = "ValueOne";
        private const string ValueTwoValue = "ValueTwo";

        /// <summary> First value. </summary>
        public static InnerExtensibleEnum ValueOne { get; } = new InnerExtensibleEnum(ValueOneValue);
        /// <summary> Second value. </summary>
        public static InnerExtensibleEnum ValueTwo { get; } = new InnerExtensibleEnum(ValueTwoValue);
        /// <summary> Determines if two <see cref="InnerExtensibleEnum"/> values are the same. </summary>
        public static bool operator ==(InnerExtensibleEnum left, InnerExtensibleEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="InnerExtensibleEnum"/> values are not the same. </summary>
        public static bool operator !=(InnerExtensibleEnum left, InnerExtensibleEnum right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="InnerExtensibleEnum"/>. </summary>
        public static implicit operator InnerExtensibleEnum(string value) => new InnerExtensibleEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InnerExtensibleEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(InnerExtensibleEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
