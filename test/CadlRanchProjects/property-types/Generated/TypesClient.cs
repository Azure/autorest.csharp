// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Models.Property.Types
{
    // Data plane generated client. The Types service client.
    /// <summary> The Types service client. </summary>
    public partial class TypesClient
    {
        private readonly HttpPipeline _pipeline;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of TypesClient. </summary>
        public TypesClient() : this(new TypesClientOptions())
        {
        }

        /// <summary> Initializes a new instance of TypesClient. </summary>
        /// <param name="options"> The options for configuring the client. </param>
        public TypesClient(TypesClientOptions options)
        {
            options ??= new TypesClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
        }

        /// <summary> Initializes a new instance of Boolean. </summary>
        /// <param name="endpoint"> TestServer endpoint. </param>
        /// <param name="apiVersion"> The String to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual Boolean GetBooleanClient(Uri endpoint = null, string apiVersion = "1.0.0")
        {
            endpoint ??= new Uri("http://localhost:3000");
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            return new Boolean(ClientDiagnostics, _pipeline, endpoint, apiVersion);
        }

        /// <summary> Initializes a new instance of String. </summary>
        /// <param name="endpoint"> TestServer endpoint. </param>
        /// <param name="apiVersion"> The String to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual String GetStringClient(Uri endpoint = null, string apiVersion = "1.0.0")
        {
            endpoint ??= new Uri("http://localhost:3000");
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            return new String(ClientDiagnostics, _pipeline, endpoint, apiVersion);
        }

        /// <summary> Initializes a new instance of Bytes. </summary>
        /// <param name="endpoint"> TestServer endpoint. </param>
        /// <param name="apiVersion"> The String to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual Bytes GetBytesClient(Uri endpoint = null, string apiVersion = "1.0.0")
        {
            endpoint ??= new Uri("http://localhost:3000");
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            return new Bytes(ClientDiagnostics, _pipeline, endpoint, apiVersion);
        }

        /// <summary> Initializes a new instance of Int. </summary>
        /// <param name="endpoint"> TestServer endpoint. </param>
        /// <param name="apiVersion"> The String to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual Int GetIntClient(Uri endpoint = null, string apiVersion = "1.0.0")
        {
            endpoint ??= new Uri("http://localhost:3000");
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            return new Int(ClientDiagnostics, _pipeline, endpoint, apiVersion);
        }

        /// <summary> Initializes a new instance of Float. </summary>
        /// <param name="endpoint"> TestServer endpoint. </param>
        /// <param name="apiVersion"> The String to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual Float GetFloatClient(Uri endpoint = null, string apiVersion = "1.0.0")
        {
            endpoint ??= new Uri("http://localhost:3000");
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            return new Float(ClientDiagnostics, _pipeline, endpoint, apiVersion);
        }

        /// <summary> Initializes a new instance of Datetime. </summary>
        /// <param name="endpoint"> TestServer endpoint. </param>
        /// <param name="apiVersion"> The String to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual Datetime GetDatetimeClient(Uri endpoint = null, string apiVersion = "1.0.0")
        {
            endpoint ??= new Uri("http://localhost:3000");
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            return new Datetime(ClientDiagnostics, _pipeline, endpoint, apiVersion);
        }

        /// <summary> Initializes a new instance of Duration. </summary>
        /// <param name="endpoint"> TestServer endpoint. </param>
        /// <param name="apiVersion"> The String to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual Duration GetDurationClient(Uri endpoint = null, string apiVersion = "1.0.0")
        {
            endpoint ??= new Uri("http://localhost:3000");
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            return new Duration(ClientDiagnostics, _pipeline, endpoint, apiVersion);
        }

        /// <summary> Initializes a new instance of Enum. </summary>
        /// <param name="endpoint"> TestServer endpoint. </param>
        /// <param name="apiVersion"> The String to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual Enum GetEnumClient(Uri endpoint = null, string apiVersion = "1.0.0")
        {
            endpoint ??= new Uri("http://localhost:3000");
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            return new Enum(ClientDiagnostics, _pipeline, endpoint, apiVersion);
        }

        /// <summary> Initializes a new instance of ExtensibleEnum. </summary>
        /// <param name="endpoint"> TestServer endpoint. </param>
        /// <param name="apiVersion"> The String to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual ExtensibleEnum GetExtensibleEnumClient(Uri endpoint = null, string apiVersion = "1.0.0")
        {
            endpoint ??= new Uri("http://localhost:3000");
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            return new ExtensibleEnum(ClientDiagnostics, _pipeline, endpoint, apiVersion);
        }

        /// <summary> Initializes a new instance of Model. </summary>
        /// <param name="endpoint"> TestServer endpoint. </param>
        /// <param name="apiVersion"> The String to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual Model GetModelClient(Uri endpoint = null, string apiVersion = "1.0.0")
        {
            endpoint ??= new Uri("http://localhost:3000");
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            return new Model(ClientDiagnostics, _pipeline, endpoint, apiVersion);
        }

        /// <summary> Initializes a new instance of CollectionsString. </summary>
        /// <param name="endpoint"> TestServer endpoint. </param>
        /// <param name="apiVersion"> The String to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual CollectionsString GetCollectionsStringClient(Uri endpoint = null, string apiVersion = "1.0.0")
        {
            endpoint ??= new Uri("http://localhost:3000");
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            return new CollectionsString(ClientDiagnostics, _pipeline, endpoint, apiVersion);
        }

        /// <summary> Initializes a new instance of CollectionsInt. </summary>
        /// <param name="endpoint"> TestServer endpoint. </param>
        /// <param name="apiVersion"> The String to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual CollectionsInt GetCollectionsIntClient(Uri endpoint = null, string apiVersion = "1.0.0")
        {
            endpoint ??= new Uri("http://localhost:3000");
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            return new CollectionsInt(ClientDiagnostics, _pipeline, endpoint, apiVersion);
        }

        /// <summary> Initializes a new instance of CollectionsModel. </summary>
        /// <param name="endpoint"> TestServer endpoint. </param>
        /// <param name="apiVersion"> The String to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual CollectionsModel GetCollectionsModelClient(Uri endpoint = null, string apiVersion = "1.0.0")
        {
            endpoint ??= new Uri("http://localhost:3000");
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            return new CollectionsModel(ClientDiagnostics, _pipeline, endpoint, apiVersion);
        }

        /// <summary> Initializes a new instance of DictionaryString. </summary>
        /// <param name="endpoint"> TestServer endpoint. </param>
        /// <param name="apiVersion"> The String to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual DictionaryString GetDictionaryStringClient(Uri endpoint = null, string apiVersion = "1.0.0")
        {
            endpoint ??= new Uri("http://localhost:3000");
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            return new DictionaryString(ClientDiagnostics, _pipeline, endpoint, apiVersion);
        }
    }
}
