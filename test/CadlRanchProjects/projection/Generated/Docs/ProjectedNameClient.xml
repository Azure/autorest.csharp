<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="JsonProjectionAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call JsonProjectionAsync.
<code><![CDATA[
var client = new ProjectedNameClient();

var data = new {};

Response response = await client.JsonProjectionAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call JsonProjectionAsync with all request content.
<code><![CDATA[
var client = new ProjectedNameClient();

var data = new {
    codegen = "<codegen>",
    builtfrom = "<builtfrom>",
    wasMadeFor = "<wasMadeFor>",
};

Response response = await client.JsonProjectionAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Project</c>:
<code>{
  codegen: string, # Optional. Only valid value is &apos;DPG&apos;
  builtfrom: string, # Optional. Only valid value is &apos;DPG&apos;
  wasMadeFor: string, # Optional. Only valid value is &apos;customers&apos;
}
</code>

</remarks>
    </member>
    <member name="JsonProjection(RequestContent,RequestContext)">
<example>
This sample shows how to call JsonProjection.
<code><![CDATA[
var client = new ProjectedNameClient();

var data = new {};

Response response = client.JsonProjection(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call JsonProjection with all request content.
<code><![CDATA[
var client = new ProjectedNameClient();

var data = new {
    codegen = "<codegen>",
    builtfrom = "<builtfrom>",
    wasMadeFor = "<wasMadeFor>",
};

Response response = client.JsonProjection(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Project</c>:
<code>{
  codegen: string, # Optional. Only valid value is &apos;DPG&apos;
  builtfrom: string, # Optional. Only valid value is &apos;DPG&apos;
  wasMadeFor: string, # Optional. Only valid value is &apos;customers&apos;
}
</code>

</remarks>
    </member>
    <member name="ClientProjectionAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call ClientProjectionAsync.
<code><![CDATA[
var client = new ProjectedNameClient();

var data = new {};

Response response = await client.ClientProjectionAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call ClientProjectionAsync with all request content.
<code><![CDATA[
var client = new ProjectedNameClient();

var data = new {
    codegen = "<codegen>",
    builtfrom = "<builtfrom>",
    wasMadeFor = "<wasMadeFor>",
};

Response response = await client.ClientProjectionAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Project</c>:
<code>{
  codegen: string, # Optional. Only valid value is &apos;DPG&apos;
  builtfrom: string, # Optional. Only valid value is &apos;DPG&apos;
  wasMadeFor: string, # Optional. Only valid value is &apos;customers&apos;
}
</code>

</remarks>
    </member>
    <member name="ClientProjection(RequestContent,RequestContext)">
<example>
This sample shows how to call ClientProjection.
<code><![CDATA[
var client = new ProjectedNameClient();

var data = new {};

Response response = client.ClientProjection(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call ClientProjection with all request content.
<code><![CDATA[
var client = new ProjectedNameClient();

var data = new {
    codegen = "<codegen>",
    builtfrom = "<builtfrom>",
    wasMadeFor = "<wasMadeFor>",
};

Response response = client.ClientProjection(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Project</c>:
<code>{
  codegen: string, # Optional. Only valid value is &apos;DPG&apos;
  builtfrom: string, # Optional. Only valid value is &apos;DPG&apos;
  wasMadeFor: string, # Optional. Only valid value is &apos;customers&apos;
}
</code>

</remarks>
    </member>
    <member name="LanguageProjectionAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call LanguageProjectionAsync.
<code><![CDATA[
var client = new ProjectedNameClient();

var data = new {};

Response response = await client.LanguageProjectionAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call LanguageProjectionAsync with all request content.
<code><![CDATA[
var client = new ProjectedNameClient();

var data = new {
    codegen = "<codegen>",
    builtfrom = "<builtfrom>",
    wasMadeFor = "<wasMadeFor>",
};

Response response = await client.LanguageProjectionAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Project</c>:
<code>{
  codegen: string, # Optional. Only valid value is &apos;DPG&apos;
  builtfrom: string, # Optional. Only valid value is &apos;DPG&apos;
  wasMadeFor: string, # Optional. Only valid value is &apos;customers&apos;
}
</code>

</remarks>
    </member>
    <member name="LanguageProjection(RequestContent,RequestContext)">
<example>
This sample shows how to call LanguageProjection.
<code><![CDATA[
var client = new ProjectedNameClient();

var data = new {};

Response response = client.LanguageProjection(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call LanguageProjection with all request content.
<code><![CDATA[
var client = new ProjectedNameClient();

var data = new {
    codegen = "<codegen>",
    builtfrom = "<builtfrom>",
    wasMadeFor = "<wasMadeFor>",
};

Response response = client.LanguageProjection(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Project</c>:
<code>{
  codegen: string, # Optional. Only valid value is &apos;DPG&apos;
  builtfrom: string, # Optional. Only valid value is &apos;DPG&apos;
  wasMadeFor: string, # Optional. Only valid value is &apos;customers&apos;
}
</code>

</remarks>
    </member>
  </members>
</doc>