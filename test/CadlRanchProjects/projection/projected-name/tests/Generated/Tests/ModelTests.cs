// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using Projection.ProjectedName;
using Projection.ProjectedName.Models;

namespace Projection.ProjectedName.Tests
{
    public partial class ModelTests : ProjectionProjectedNameTestBase
    {
        public ModelTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Model_Client_ShortVersion()
        {
            Uri endpoint = null;
            Model client = CreateProjectedNameClient(endpoint).GetModelClient();

            using RequestContent content = RequestContent.Create(new
            {
                defaultName = true,
            });
            Response response = await client.ClientAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Model_Client_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            Model client = CreateProjectedNameClient(endpoint).GetModelClient();

            ClientModel clientModel = new ClientModel(true);
            Response response = await client.ClientAsync(clientModel);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Model_Client_AllParameters()
        {
            Uri endpoint = null;
            Model client = CreateProjectedNameClient(endpoint).GetModelClient();

            using RequestContent content = RequestContent.Create(new
            {
                defaultName = true,
            });
            Response response = await client.ClientAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Model_Client_AllParameters_Convenience()
        {
            Uri endpoint = null;
            Model client = CreateProjectedNameClient(endpoint).GetModelClient();

            ClientModel clientModel = new ClientModel(true);
            Response response = await client.ClientAsync(clientModel);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Model_Language_ShortVersion()
        {
            Uri endpoint = null;
            Model client = CreateProjectedNameClient(endpoint).GetModelClient();

            using RequestContent content = RequestContent.Create(new
            {
                defaultName = true,
            });
            Response response = await client.LanguageAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Model_Language_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            Model client = CreateProjectedNameClient(endpoint).GetModelClient();

            CSModel csModel = new CSModel(true);
            Response response = await client.LanguageAsync(csModel);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Model_Language_AllParameters()
        {
            Uri endpoint = null;
            Model client = CreateProjectedNameClient(endpoint).GetModelClient();

            using RequestContent content = RequestContent.Create(new
            {
                defaultName = true,
            });
            Response response = await client.LanguageAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Model_Language_AllParameters_Convenience()
        {
            Uri endpoint = null;
            Model client = CreateProjectedNameClient(endpoint).GetModelClient();

            CSModel csModel = new CSModel(true);
            Response response = await client.LanguageAsync(csModel);
        }
    }
}
