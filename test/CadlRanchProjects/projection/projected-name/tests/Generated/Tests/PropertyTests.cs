// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using Projection.ProjectedName;
using Projection.ProjectedName.Models;

namespace Projection.ProjectedName.Tests
{
    public class PropertyTests : ProjectionProjectedNameTestBase
    {
        public PropertyTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        public async Task Json_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Property client = CreateProjectedNameClient(endpoint).GetPropertyClient();

            RequestContent content = RequestContent.Create(new
            {
                wireName = true,
            });
            Response response = await client.JsonAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Json_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Property client = CreateProjectedNameClient(endpoint).GetPropertyClient();

            JsonProjectedNameModel jsonProjectedNameModel = new JsonProjectedNameModel(true);
            Response response = await client.JsonAsync(jsonProjectedNameModel);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Json_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Property client = CreateProjectedNameClient(endpoint).GetPropertyClient();

            RequestContent content = RequestContent.Create(new
            {
                wireName = true,
            });
            Response response = await client.JsonAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Json_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Property client = CreateProjectedNameClient(endpoint).GetPropertyClient();

            JsonProjectedNameModel jsonProjectedNameModel = new JsonProjectedNameModel(true);
            Response response = await client.JsonAsync(jsonProjectedNameModel);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Client_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Property client = CreateProjectedNameClient(endpoint).GetPropertyClient();

            RequestContent content = RequestContent.Create(new
            {
                defaultName = true,
            });
            Response response = await client.ClientAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Client_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Property client = CreateProjectedNameClient(endpoint).GetPropertyClient();

            ClientProjectedNameModel clientProjectedNameModel = new ClientProjectedNameModel(true);
            Response response = await client.ClientAsync(clientProjectedNameModel);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Client_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Property client = CreateProjectedNameClient(endpoint).GetPropertyClient();

            RequestContent content = RequestContent.Create(new
            {
                defaultName = true,
            });
            Response response = await client.ClientAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Client_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Property client = CreateProjectedNameClient(endpoint).GetPropertyClient();

            ClientProjectedNameModel clientProjectedNameModel = new ClientProjectedNameModel(true);
            Response response = await client.ClientAsync(clientProjectedNameModel);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Language_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Property client = CreateProjectedNameClient(endpoint).GetPropertyClient();

            RequestContent content = RequestContent.Create(new
            {
                defaultName = true,
            });
            Response response = await client.LanguageAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Language_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Property client = CreateProjectedNameClient(endpoint).GetPropertyClient();

            LanguageProjectedNameModel languageProjectedNameModel = new LanguageProjectedNameModel(true);
            Response response = await client.LanguageAsync(languageProjectedNameModel);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Language_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Property client = CreateProjectedNameClient(endpoint).GetPropertyClient();

            RequestContent content = RequestContent.Create(new
            {
                defaultName = true,
            });
            Response response = await client.LanguageAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Language_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Property client = CreateProjectedNameClient(endpoint).GetPropertyClient();

            LanguageProjectedNameModel languageProjectedNameModel = new LanguageProjectedNameModel(true);
            Response response = await client.LanguageAsync(languageProjectedNameModel);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task JsonAndClient_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Property client = CreateProjectedNameClient(endpoint).GetPropertyClient();

            RequestContent content = RequestContent.Create(new
            {
                wireName = true,
            });
            Response response = await client.JsonAndClientAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task JsonAndClient_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Property client = CreateProjectedNameClient(endpoint).GetPropertyClient();

            JsonAndClientProjectedNameModel jsonAndClientProjectedNameModel = new JsonAndClientProjectedNameModel(true);
            Response response = await client.JsonAndClientAsync(jsonAndClientProjectedNameModel);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task JsonAndClient_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Property client = CreateProjectedNameClient(endpoint).GetPropertyClient();

            RequestContent content = RequestContent.Create(new
            {
                wireName = true,
            });
            Response response = await client.JsonAndClientAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task JsonAndClient_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Property client = CreateProjectedNameClient(endpoint).GetPropertyClient();

            JsonAndClientProjectedNameModel jsonAndClientProjectedNameModel = new JsonAndClientProjectedNameModel(true);
            Response response = await client.JsonAndClientAsync(jsonAndClientProjectedNameModel);
            Console.WriteLine(response.Status);
        }
    }
}
