// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using DPGServiceDriven2;

namespace srv_driven2_cadl
{
    /// <summary> The Params service client. </summary>
    public partial class ParamsClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ParamsClient. </summary>
        public ParamsClient() : this(new Uri("http://localhost:3000"), new ParamsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ParamsClient. </summary>
        /// <param name="endpoint"> Testserver endpoint. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public ParamsClient(Uri endpoint, ParamsClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new ParamsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <summary>
        /// Head request, no params.
        ///  Initially has no query parameters. After evolution, a new optional query parameter is added
        /// </summary>
        /// <param name="newParameter"> I&apos;m a new input optional parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> HeadNoParamValuesAsync(string newParameter = null, CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ParamsClient.HeadNoParamValues");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await HeadNoParamsAsync(newParameter, context).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Head request, no params.
        ///  Initially has no query parameters. After evolution, a new optional query parameter is added
        /// </summary>
        /// <param name="newParameter"> I&apos;m a new input optional parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response HeadNoParamValues(string newParameter = null, CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ParamsClient.HeadNoParamValues");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = HeadNoParams(newParameter, context);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Head request, no params.
        ///  Initially has no query parameters. After evolution, a new optional query parameter is added
        /// </summary>
        /// <param name="newParameter"> I&apos;m a new input optional parameter. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call HeadNoParamsAsync.
        /// <code><![CDATA[
        /// var client = new ParamsClient();
        /// 
        /// Response response = await client.HeadNoParamsAsync();
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call HeadNoParamsAsync with all parameters.
        /// <code><![CDATA[
        /// var client = new ParamsClient();
        /// 
        /// Response response = await client.HeadNoParamsAsync("<newParameter>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> HeadNoParamsAsync(string newParameter = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ParamsClient.HeadNoParams");
            scope.Start();
            try
            {
                using HttpMessage message = CreateHeadNoParamsRequest(newParameter, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Head request, no params.
        ///  Initially has no query parameters. After evolution, a new optional query parameter is added
        /// </summary>
        /// <param name="newParameter"> I&apos;m a new input optional parameter. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call HeadNoParams.
        /// <code><![CDATA[
        /// var client = new ParamsClient();
        /// 
        /// Response response = client.HeadNoParams();
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call HeadNoParams with all parameters.
        /// <code><![CDATA[
        /// var client = new ParamsClient();
        /// 
        /// Response response = client.HeadNoParams("<newParameter>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response HeadNoParams(string newParameter = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ParamsClient.HeadNoParams");
            scope.Start();
            try
            {
                using HttpMessage message = CreateHeadNoParamsRequest(newParameter, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get true Boolean value on path.
        ///  Initially only has one required Query Parameter. After evolution, a new optional query parameter is added
        /// </summary>
        /// <param name="parameter"> I am a required parameter. </param>
        /// <param name="newParameter"> I&apos;m a new input optional parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameter"/> is null. </exception>
        public virtual async Task<Response<Message>> GetRequiredValueAsync(string parameter, string newParameter = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(parameter, nameof(parameter));

            using var scope = ClientDiagnostics.CreateScope("ParamsClient.GetRequiredValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await GetRequiredAsync(parameter, newParameter, context).ConfigureAwait(false);
                return Response.FromValue(Message.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get true Boolean value on path.
        ///  Initially only has one required Query Parameter. After evolution, a new optional query parameter is added
        /// </summary>
        /// <param name="parameter"> I am a required parameter. </param>
        /// <param name="newParameter"> I&apos;m a new input optional parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameter"/> is null. </exception>
        public virtual Response<Message> GetRequiredValue(string parameter, string newParameter = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(parameter, nameof(parameter));

            using var scope = ClientDiagnostics.CreateScope("ParamsClient.GetRequiredValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = GetRequired(parameter, newParameter, context);
                return Response.FromValue(Message.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get true Boolean value on path.
        ///  Initially only has one required Query Parameter. After evolution, a new optional query parameter is added
        /// </summary>
        /// <param name="parameter"> I am a required parameter. </param>
        /// <param name="newParameter"> I&apos;m a new input optional parameter. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameter"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetRequiredAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new ParamsClient();
        /// 
        /// Response response = await client.GetRequiredAsync("<parameter>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("messageProperty").ToString());
        /// ]]></code>
        /// This sample shows how to call GetRequiredAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new ParamsClient();
        /// 
        /// Response response = await client.GetRequiredAsync("<parameter>", "<newParameter>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("messageProperty").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Message</c>:
        /// <code>{
        ///   messageProperty: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetRequiredAsync(string parameter, string newParameter = null, RequestContext context = null)
        {
            Argument.AssertNotNull(parameter, nameof(parameter));

            using var scope = ClientDiagnostics.CreateScope("ParamsClient.GetRequired");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRequiredRequest(parameter, newParameter, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get true Boolean value on path.
        ///  Initially only has one required Query Parameter. After evolution, a new optional query parameter is added
        /// </summary>
        /// <param name="parameter"> I am a required parameter. </param>
        /// <param name="newParameter"> I&apos;m a new input optional parameter. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameter"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetRequired with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new ParamsClient();
        /// 
        /// Response response = client.GetRequired("<parameter>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("messageProperty").ToString());
        /// ]]></code>
        /// This sample shows how to call GetRequired with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new ParamsClient();
        /// 
        /// Response response = client.GetRequired("<parameter>", "<newParameter>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("messageProperty").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Message</c>:
        /// <code>{
        ///   messageProperty: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetRequired(string parameter, string newParameter = null, RequestContext context = null)
        {
            Argument.AssertNotNull(parameter, nameof(parameter));

            using var scope = ClientDiagnostics.CreateScope("ParamsClient.GetRequired");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRequiredRequest(parameter, newParameter, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initially has one required query parameter and one optional query parameter.  After evolution, a new optional query parameter is added. </summary>
        /// <param name="requiredParam"> I am a required parameter. </param>
        /// <param name="optionalParam"> I am an optional parameter. </param>
        /// <param name="newParameter"> I&apos;m a new input optional parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParam"/> is null. </exception>
        public virtual async Task<Response<Message>> PutRequiredOptionalValueAsync(string requiredParam, string optionalParam = null, string newParameter = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(requiredParam, nameof(requiredParam));

            using var scope = ClientDiagnostics.CreateScope("ParamsClient.PutRequiredOptionalValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await PutRequiredOptionalAsync(requiredParam, optionalParam, newParameter, context).ConfigureAwait(false);
                return Response.FromValue(Message.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initially has one required query parameter and one optional query parameter.  After evolution, a new optional query parameter is added. </summary>
        /// <param name="requiredParam"> I am a required parameter. </param>
        /// <param name="optionalParam"> I am an optional parameter. </param>
        /// <param name="newParameter"> I&apos;m a new input optional parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParam"/> is null. </exception>
        public virtual Response<Message> PutRequiredOptionalValue(string requiredParam, string optionalParam = null, string newParameter = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(requiredParam, nameof(requiredParam));

            using var scope = ClientDiagnostics.CreateScope("ParamsClient.PutRequiredOptionalValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = PutRequiredOptional(requiredParam, optionalParam, newParameter, context);
                return Response.FromValue(Message.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initially has one required query parameter and one optional query parameter.  After evolution, a new optional query parameter is added. </summary>
        /// <param name="requiredParam"> I am a required parameter. </param>
        /// <param name="optionalParam"> I am an optional parameter. </param>
        /// <param name="newParameter"> I&apos;m a new input optional parameter. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParam"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PutRequiredOptionalAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new ParamsClient();
        /// 
        /// Response response = await client.PutRequiredOptionalAsync("<requiredParam>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("messageProperty").ToString());
        /// ]]></code>
        /// This sample shows how to call PutRequiredOptionalAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new ParamsClient();
        /// 
        /// Response response = await client.PutRequiredOptionalAsync("<requiredParam>", "<optionalParam>", "<newParameter>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("messageProperty").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Message</c>:
        /// <code>{
        ///   messageProperty: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PutRequiredOptionalAsync(string requiredParam, string optionalParam = null, string newParameter = null, RequestContext context = null)
        {
            Argument.AssertNotNull(requiredParam, nameof(requiredParam));

            using var scope = ClientDiagnostics.CreateScope("ParamsClient.PutRequiredOptional");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutRequiredOptionalRequest(requiredParam, optionalParam, newParameter, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initially has one required query parameter and one optional query parameter.  After evolution, a new optional query parameter is added. </summary>
        /// <param name="requiredParam"> I am a required parameter. </param>
        /// <param name="optionalParam"> I am an optional parameter. </param>
        /// <param name="newParameter"> I&apos;m a new input optional parameter. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParam"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call PutRequiredOptional with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new ParamsClient();
        /// 
        /// Response response = client.PutRequiredOptional("<requiredParam>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("messageProperty").ToString());
        /// ]]></code>
        /// This sample shows how to call PutRequiredOptional with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new ParamsClient();
        /// 
        /// Response response = client.PutRequiredOptional("<requiredParam>", "<optionalParam>", "<newParameter>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("messageProperty").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Message</c>:
        /// <code>{
        ///   messageProperty: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PutRequiredOptional(string requiredParam, string optionalParam = null, string newParameter = null, RequestContext context = null)
        {
            Argument.AssertNotNull(requiredParam, nameof(requiredParam));

            using var scope = ClientDiagnostics.CreateScope("ParamsClient.PutRequiredOptional");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutRequiredOptionalRequest(requiredParam, optionalParam, newParameter, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete something.
        ///  Initially the path exists but there is no delete method. After evolution this is a new method in a known path
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteParameterValuesAsync(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ParamsClient.DeleteParameterValues");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await DeleteParametersAsync(context).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete something.
        ///  Initially the path exists but there is no delete method. After evolution this is a new method in a known path
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteParameterValues(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ParamsClient.DeleteParameterValues");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = DeleteParameters(context);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete something.
        ///  Initially the path exists but there is no delete method. After evolution this is a new method in a known path
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteParametersAsync.
        /// <code><![CDATA[
        /// var client = new ParamsClient();
        /// 
        /// Response response = await client.DeleteParametersAsync();
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteParametersAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ParamsClient.DeleteParameters");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteParametersRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Delete something.
        ///  Initially the path exists but there is no delete method. After evolution this is a new method in a known path
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteParameters.
        /// <code><![CDATA[
        /// var client = new ParamsClient();
        /// 
        /// Response response = client.DeleteParameters();
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteParameters(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ParamsClient.DeleteParameters");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteParametersRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get true Boolean value on path.
        ///  Initially has one optional query parameter. After evolution, a new optional query parameter is added
        /// </summary>
        /// <param name="optionalParam"> I am an optional parameter. </param>
        /// <param name="newParameter"> I&apos;m a new input optional parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Message>> GetOptionalValueAsync(string optionalParam = null, string newParameter = null, CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ParamsClient.GetOptionalValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await GetOptionalAsync(optionalParam, newParameter, context).ConfigureAwait(false);
                return Response.FromValue(Message.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get true Boolean value on path.
        ///  Initially has one optional query parameter. After evolution, a new optional query parameter is added
        /// </summary>
        /// <param name="optionalParam"> I am an optional parameter. </param>
        /// <param name="newParameter"> I&apos;m a new input optional parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Message> GetOptionalValue(string optionalParam = null, string newParameter = null, CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ParamsClient.GetOptionalValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = GetOptional(optionalParam, newParameter, context);
                return Response.FromValue(Message.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get true Boolean value on path.
        ///  Initially has one optional query parameter. After evolution, a new optional query parameter is added
        /// </summary>
        /// <param name="optionalParam"> I am an optional parameter. </param>
        /// <param name="newParameter"> I&apos;m a new input optional parameter. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetOptionalAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new ParamsClient();
        /// 
        /// Response response = await client.GetOptionalAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("messageProperty").ToString());
        /// ]]></code>
        /// This sample shows how to call GetOptionalAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new ParamsClient();
        /// 
        /// Response response = await client.GetOptionalAsync("<optionalParam>", "<newParameter>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("messageProperty").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Message</c>:
        /// <code>{
        ///   messageProperty: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetOptionalAsync(string optionalParam = null, string newParameter = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ParamsClient.GetOptional");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetOptionalRequest(optionalParam, newParameter, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get true Boolean value on path.
        ///  Initially has one optional query parameter. After evolution, a new optional query parameter is added
        /// </summary>
        /// <param name="optionalParam"> I am an optional parameter. </param>
        /// <param name="newParameter"> I&apos;m a new input optional parameter. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetOptional and parse the result.
        /// <code><![CDATA[
        /// var client = new ParamsClient();
        /// 
        /// Response response = client.GetOptional();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("messageProperty").ToString());
        /// ]]></code>
        /// This sample shows how to call GetOptional with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new ParamsClient();
        /// 
        /// Response response = client.GetOptional("<optionalParam>", "<newParameter>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("messageProperty").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Message</c>:
        /// <code>{
        ///   messageProperty: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetOptional(string optionalParam = null, string newParameter = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ParamsClient.GetOptional");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetOptionalRequest(optionalParam, newParameter, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// I&apos;m a new operation.
        ///  Initiallty neither path or method exist for this operation. After evolution, this is a new method in a new path
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Message>> GetNewOperationValueAsync(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ParamsClient.GetNewOperationValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await GetNewOperationAsync(context).ConfigureAwait(false);
                return Response.FromValue(Message.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// I&apos;m a new operation.
        ///  Initiallty neither path or method exist for this operation. After evolution, this is a new method in a new path
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Message> GetNewOperationValue(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ParamsClient.GetNewOperationValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = GetNewOperation(context);
                return Response.FromValue(Message.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// I&apos;m a new operation.
        ///  Initiallty neither path or method exist for this operation. After evolution, this is a new method in a new path
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetNewOperationAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new ParamsClient();
        /// 
        /// Response response = await client.GetNewOperationAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("messageProperty").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Message</c>:
        /// <code>{
        ///   messageProperty: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetNewOperationAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ParamsClient.GetNewOperation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetNewOperationRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// I&apos;m a new operation.
        ///  Initiallty neither path or method exist for this operation. After evolution, this is a new method in a new path
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetNewOperation and parse the result.
        /// <code><![CDATA[
        /// var client = new ParamsClient();
        /// 
        /// Response response = client.GetNewOperation();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("messageProperty").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Message</c>:
        /// <code>{
        ///   messageProperty: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetNewOperation(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ParamsClient.GetNewOperation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetNewOperationRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateHeadNoParamsRequest(string newParameter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/serviceDriven2/serviceDriven/parameters", false);
            if (newParameter != null)
            {
                uri.AppendQuery("new_parameter", newParameter, false);
            }
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateGetRequiredRequest(string parameter, string newParameter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/serviceDriven2/serviceDriven/parameters", false);
            uri.AppendQuery("parameter", parameter, false);
            if (newParameter != null)
            {
                uri.AppendQuery("new_parameter", newParameter, false);
            }
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreatePutRequiredOptionalRequest(string requiredParam, string optionalParam, string newParameter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/serviceDriven2/serviceDriven/parameters", false);
            uri.AppendQuery("requiredParam", requiredParam, false);
            if (optionalParam != null)
            {
                uri.AppendQuery("optionalParam", optionalParam, false);
            }
            if (newParameter != null)
            {
                uri.AppendQuery("new_parameter", newParameter, false);
            }
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateDeleteParametersRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/serviceDriven2/serviceDriven/parameters", false);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateGetOptionalRequest(string optionalParam, string newParameter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/serviceDriven2/serviceDriven/moreParameters", false);
            if (optionalParam != null)
            {
                uri.AppendQuery("optionalParam", optionalParam, false);
            }
            if (newParameter != null)
            {
                uri.AppendQuery("new_parameter", newParameter, false);
            }
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateGetNewOperationRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/serviceDriven2/serviceDriven/newPath", false);
            request.Uri = uri;
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
