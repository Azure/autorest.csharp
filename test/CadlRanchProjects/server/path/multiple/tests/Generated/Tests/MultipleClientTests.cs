// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Identity;
using NUnit.Framework;
using Server.Path.Multiple;

namespace Server.Path.Multiple.Tests
{
    public partial class MultipleClientTests : ServerPathMultipleTestBase
    {
        public MultipleClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Multiple_NoOperationParams_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            MultipleClient client = CreateMultipleClient(endpoint);

            Response response = await client.NoOperationParamsAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Multiple_NoOperationParams_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            MultipleClient client = CreateMultipleClient(endpoint);

            Response response = await client.NoOperationParamsAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Multiple_WithOperationPathParam_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            MultipleClient client = CreateMultipleClient(endpoint);

            Response response = await client.WithOperationPathParamAsync("<keyword>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Multiple_WithOperationPathParam_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            MultipleClient client = CreateMultipleClient(endpoint);

            Response response = await client.WithOperationPathParamAsync("<keyword>");
        }
    }
}
