// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Identity;
using NUnit.Framework;

namespace SpecialHeaders.ConditionalRequest.Tests
{
    public partial class ConditionalRequestClientTests : SpecialHeadersConditionalRequestTestBase
    {
        public ConditionalRequestClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ConditionalRequest_PostIfMatch_ShortVersion()
        {
            Uri endpoint = null;
            ConditionalRequestClient client = CreateConditionalRequestClient(endpoint);

            Response response = await client.PostIfMatchAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ConditionalRequest_PostIfMatch_AllParameters()
        {
            Uri endpoint = null;
            ConditionalRequestClient client = CreateConditionalRequestClient(endpoint);

            Response response = await client.PostIfMatchAsync(ifMatch: new ETag("<ifMatch>"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ConditionalRequest_PostIfNoneMatch_ShortVersion()
        {
            Uri endpoint = null;
            ConditionalRequestClient client = CreateConditionalRequestClient(endpoint);

            Response response = await client.PostIfNoneMatchAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ConditionalRequest_PostIfNoneMatch_AllParameters()
        {
            Uri endpoint = null;
            ConditionalRequestClient client = CreateConditionalRequestClient(endpoint);

            Response response = await client.PostIfNoneMatchAsync(ifNoneMatch: new ETag("<ifNoneMatch>"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ConditionalRequest_HeadIfModifiedSince_ShortVersion()
        {
            Uri endpoint = null;
            ConditionalRequestClient client = CreateConditionalRequestClient(endpoint);

            Response response = await client.HeadIfModifiedSinceAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ConditionalRequest_HeadIfModifiedSince_AllParameters()
        {
            Uri endpoint = null;
            ConditionalRequestClient client = CreateConditionalRequestClient(endpoint);

            Response response = await client.HeadIfModifiedSinceAsync(requestConditions: null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ConditionalRequest_PostIfUnmodifiedSince_ShortVersion()
        {
            Uri endpoint = null;
            ConditionalRequestClient client = CreateConditionalRequestClient(endpoint);

            Response response = await client.PostIfUnmodifiedSinceAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ConditionalRequest_PostIfUnmodifiedSince_AllParameters()
        {
            Uri endpoint = null;
            ConditionalRequestClient client = CreateConditionalRequestClient(endpoint);

            Response response = await client.PostIfUnmodifiedSinceAsync(requestConditions: null);
        }
    }
}
