// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Identity;
using NUnit.Framework;
using SpecialWords;

namespace SpecialWords.Tests
{
    public class ParameterTests : SpecialWordsTestBase
    {
        public ParameterTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        public async Task GetWithIf_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Parameter client = CreateSpecialWordsClient(endpoint).GetParameterClient(apiVersion: "1.0.0");

            Response response = await client.GetWithIfAsync("<if>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task GetWithIf_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Parameter client = CreateSpecialWordsClient(endpoint).GetParameterClient(apiVersion: "1.0.0");

            Response response = await client.GetWithIfAsync("<if>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task GetWithFilter_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Parameter client = CreateSpecialWordsClient(endpoint).GetParameterClient(apiVersion: "1.0.0");

            Response response = await client.GetWithFilterAsync("<filter>");
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task GetWithFilter_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Parameter client = CreateSpecialWordsClient(endpoint).GetParameterClient(apiVersion: "1.0.0");

            Response response = await client.GetWithFilterAsync("<filter>");
            Console.WriteLine(response.Status);
        }
    }
}
