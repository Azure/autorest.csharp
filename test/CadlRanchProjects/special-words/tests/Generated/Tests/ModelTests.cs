// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using SpecialWords;
using SpecialWords.Models;

namespace SpecialWords.Tests
{
    public class ModelTests : SpecialWordsTestBase
    {
        public ModelTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetModel_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Model client = CreateSpecialWordsClient(endpoint).GetModelClient(apiVersion: "1.0.0");

            Response response = await client.GetModelAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetModelValue_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Model client = CreateSpecialWordsClient(endpoint).GetModelClient(apiVersion: "1.0.0");

            Response<BaseModel> response = await client.GetModelValueAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetModel_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Model client = CreateSpecialWordsClient(endpoint).GetModelClient(apiVersion: "1.0.0");

            Response response = await client.GetModelAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetModelValue_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Model client = CreateSpecialWordsClient(endpoint).GetModelClient(apiVersion: "1.0.0");

            Response<BaseModel> response = await client.GetModelValueAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Put_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Model client = CreateSpecialWordsClient(endpoint).GetModelClient(apiVersion: "1.0.0");

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["derived.name"] = "<derived.name>",
                ["for"] = "<for>",
                ["model.kind"] = "derived",
            });
            Response response = await client.PutAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Put_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Model client = CreateSpecialWordsClient(endpoint).GetModelClient(apiVersion: "1.0.0");

            BaseModel body = new DerivedModel("<derived.name>", "<for>");
            Response response = await client.PutAsync(body);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Put_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Model client = CreateSpecialWordsClient(endpoint).GetModelClient(apiVersion: "1.0.0");

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["derived.name"] = "<derived.name>",
                ["for"] = "<for>",
                ["model.kind"] = "derived",
            });
            Response response = await client.PutAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Put_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Model client = CreateSpecialWordsClient(endpoint).GetModelClient(apiVersion: "1.0.0");

            BaseModel body = new DerivedModel("<derived.name>", "<for>");
            Response response = await client.PutAsync(body);
        }
    }
}
