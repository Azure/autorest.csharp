// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using Payload.JsonMergePatch;
using Payload.JsonMergePatch.Models;

namespace Payload.JsonMergePatch.Samples
{
    public partial class Samples_JsonMergePatchClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_JsonMergePatch_CreateResource_ShortVersion()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.CreateResource(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_JsonMergePatch_CreateResource_ShortVersion_Async()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.CreateResourceAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_JsonMergePatch_CreateResource_ShortVersion_Convenience()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            Resource body = new Resource("<name>");
            Response<Resource> response = client.CreateResource(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_JsonMergePatch_CreateResource_ShortVersion_Convenience_Async()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            Resource body = new Resource("<name>");
            Response<Resource> response = await client.CreateResourceAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_JsonMergePatch_CreateResource_AllParameters()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                description = "<description>",
                map = new
                {
                    key = new
                    {
                        name = "<name>",
                        description = "<description>",
                    },
                },
                array = new object[]
            {
null
            },
                intArray = new object[]
            {
1234
            },
            });
            Response response = client.CreateResource(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("map").GetProperty("<key>").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("map").GetProperty("<key>").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("array")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("array")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("innerModel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("innerModel").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("intArray")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_JsonMergePatch_CreateResource_AllParameters_Async()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                description = "<description>",
                map = new
                {
                    key = new
                    {
                        name = "<name>",
                        description = "<description>",
                    },
                },
                array = new object[]
            {
null
            },
                intArray = new object[]
            {
1234
            },
            });
            Response response = await client.CreateResourceAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("map").GetProperty("<key>").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("map").GetProperty("<key>").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("array")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("array")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("innerModel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("innerModel").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("intArray")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_JsonMergePatch_CreateResource_AllParameters_Convenience()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            Resource body = new Resource("<name>")
            {
                Description = "<description>",
                Map =
{
["key"] = new InnerModel("<name>")
{
Description = "<description>",
}
},
                Array = { default },
                InnerModel = default,
                IntArray = { 1234 },
            };
            Response<Resource> response = client.CreateResource(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_JsonMergePatch_CreateResource_AllParameters_Convenience_Async()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            Resource body = new Resource("<name>")
            {
                Description = "<description>",
                Map =
{
["key"] = new InnerModel("<name>")
{
Description = "<description>",
}
},
                Array = { default },
                InnerModel = default,
                IntArray = { 1234 },
            };
            Response<Resource> response = await client.CreateResourceAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_JsonMergePatch_UpdateResource_ShortVersion()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateResource(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_JsonMergePatch_UpdateResource_ShortVersion_Async()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateResourceAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_JsonMergePatch_UpdateResource_ShortVersion_Convenience()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            ResourcePatch body = new ResourcePatch();
            Response<Resource> response = client.UpdateResource(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_JsonMergePatch_UpdateResource_ShortVersion_Convenience_Async()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            ResourcePatch body = new ResourcePatch();
            Response<Resource> response = await client.UpdateResourceAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_JsonMergePatch_UpdateResource_AllParameters()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            using RequestContent content = RequestContent.Create(new
            {
                description = "<description>",
                map = new
                {
                    key = new
                    {
                        name = "<name>",
                        description = "<description>",
                    },
                },
                array = new object[]
            {
null
            },
                nestedModel = new
                {
                    name = "<name>",
                    description = "<description>",
                },
                intArray = new object[]
            {
1234
            },
            });
            Response response = client.UpdateResource(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("map").GetProperty("<key>").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("map").GetProperty("<key>").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("array")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("array")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("innerModel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("innerModel").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("intArray")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_JsonMergePatch_UpdateResource_AllParameters_Async()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            using RequestContent content = RequestContent.Create(new
            {
                description = "<description>",
                map = new
                {
                    key = new
                    {
                        name = "<name>",
                        description = "<description>",
                    },
                },
                array = new object[]
            {
null
            },
                nestedModel = new
                {
                    name = "<name>",
                    description = "<description>",
                },
                intArray = new object[]
            {
1234
            },
            });
            Response response = await client.UpdateResourceAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("map").GetProperty("<key>").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("map").GetProperty("<key>").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("array")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("array")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("innerModel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("innerModel").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("intArray")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_JsonMergePatch_UpdateResource_AllParameters_Convenience()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            ResourcePatch body = new ResourcePatch
            {
                Description = "<description>",
                Map =
{
["key"] = new InnerModel("<name>")
{
Description = "<description>",
}
},
                Array = { default },
                NestedModel = new NestedModel("<name>")
                {
                    Description = "<description>",
                    InnerModel = default,
                },
                IntArray = { 1234 },
            };
            Response<Resource> response = client.UpdateResource(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_JsonMergePatch_UpdateResource_AllParameters_Convenience_Async()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            ResourcePatch body = new ResourcePatch
            {
                Description = "<description>",
                Map =
{
["key"] = new InnerModel("<name>")
{
Description = "<description>",
}
},
                Array = { default },
                NestedModel = new NestedModel("<name>")
                {
                    Description = "<description>",
                    InnerModel = default,
                },
                IntArray = { 1234 },
            };
            Response<Resource> response = await client.UpdateResourceAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_JsonMergePatch_CreateOptionalResource_ShortVersion()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            using RequestContent content = null;
            Response response = client.CreateOptionalResource(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_JsonMergePatch_CreateOptionalResource_ShortVersion_Async()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            using RequestContent content = null;
            Response response = await client.CreateOptionalResourceAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_JsonMergePatch_CreateOptionalResource_ShortVersion_Convenience()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            Response<Resource> response = client.CreateOptionalResource();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_JsonMergePatch_CreateOptionalResource_ShortVersion_Convenience_Async()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            Response<Resource> response = await client.CreateOptionalResourceAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_JsonMergePatch_CreateOptionalResource_AllParameters()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                description = "<description>",
                map = new
                {
                    key = new
                    {
                        name = "<name>",
                        description = "<description>",
                    },
                },
                array = new object[]
            {
null
            },
                intArray = new object[]
            {
1234
            },
            });
            Response response = client.CreateOptionalResource(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("map").GetProperty("<key>").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("map").GetProperty("<key>").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("array")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("array")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("innerModel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("innerModel").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("intArray")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_JsonMergePatch_CreateOptionalResource_AllParameters_Async()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                description = "<description>",
                map = new
                {
                    key = new
                    {
                        name = "<name>",
                        description = "<description>",
                    },
                },
                array = new object[]
            {
null
            },
                intArray = new object[]
            {
1234
            },
            });
            Response response = await client.CreateOptionalResourceAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("map").GetProperty("<key>").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("map").GetProperty("<key>").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("array")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("array")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("innerModel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("innerModel").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("intArray")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_JsonMergePatch_CreateOptionalResource_AllParameters_Convenience()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            Resource body = new Resource("<name>")
            {
                Description = "<description>",
                Map =
{
["key"] = new InnerModel("<name>")
{
Description = "<description>",
}
},
                Array = { default },
                InnerModel = default,
                IntArray = { 1234 },
            };
            Response<Resource> response = client.CreateOptionalResource(body: body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_JsonMergePatch_CreateOptionalResource_AllParameters_Convenience_Async()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            Resource body = new Resource("<name>")
            {
                Description = "<description>",
                Map =
{
["key"] = new InnerModel("<name>")
{
Description = "<description>",
}
},
                Array = { default },
                InnerModel = default,
                IntArray = { 1234 },
            };
            Response<Resource> response = await client.CreateOptionalResourceAsync(body: body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_JsonMergePatch_UpdateOptionalResource_ShortVersion()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            using RequestContent content = null;
            Response response = client.UpdateOptionalResource(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_JsonMergePatch_UpdateOptionalResource_ShortVersion_Async()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            using RequestContent content = null;
            Response response = await client.UpdateOptionalResourceAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_JsonMergePatch_UpdateOptionalResource_ShortVersion_Convenience()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            Response<Resource> response = client.UpdateOptionalResource();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_JsonMergePatch_UpdateOptionalResource_ShortVersion_Convenience_Async()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            Response<Resource> response = await client.UpdateOptionalResourceAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_JsonMergePatch_UpdateOptionalResource_AllParameters()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            using RequestContent content = RequestContent.Create(new
            {
                description = "<description>",
                map = new
                {
                    key = new
                    {
                        name = "<name>",
                        description = "<description>",
                    },
                },
                array = new object[]
            {
null
            },
                nestedModel = new
                {
                    name = "<name>",
                    description = "<description>",
                },
                intArray = new object[]
            {
1234
            },
            });
            Response response = client.UpdateOptionalResource(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("map").GetProperty("<key>").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("map").GetProperty("<key>").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("array")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("array")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("innerModel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("innerModel").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("intArray")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_JsonMergePatch_UpdateOptionalResource_AllParameters_Async()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            using RequestContent content = RequestContent.Create(new
            {
                description = "<description>",
                map = new
                {
                    key = new
                    {
                        name = "<name>",
                        description = "<description>",
                    },
                },
                array = new object[]
            {
null
            },
                nestedModel = new
                {
                    name = "<name>",
                    description = "<description>",
                },
                intArray = new object[]
            {
1234
            },
            });
            Response response = await client.UpdateOptionalResourceAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("map").GetProperty("<key>").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("map").GetProperty("<key>").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("array")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("array")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("innerModel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("innerModel").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("intArray")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_JsonMergePatch_UpdateOptionalResource_AllParameters_Convenience()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            ResourcePatch body = new ResourcePatch
            {
                Description = "<description>",
                Map =
{
["key"] = new InnerModel("<name>")
{
Description = "<description>",
}
},
                Array = { default },
                NestedModel = new NestedModel("<name>")
                {
                    Description = "<description>",
                    InnerModel = default,
                },
                IntArray = { 1234 },
            };
            Response<Resource> response = client.UpdateOptionalResource(body: body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_JsonMergePatch_UpdateOptionalResource_AllParameters_Convenience_Async()
        {
            JsonMergePatchClient client = new JsonMergePatchClient();

            ResourcePatch body = new ResourcePatch
            {
                Description = "<description>",
                Map =
{
["key"] = new InnerModel("<name>")
{
Description = "<description>",
}
},
                Array = { default },
                NestedModel = new NestedModel("<name>")
                {
                    Description = "<description>",
                    InnerModel = default,
                },
                IntArray = { 1234 },
            };
            Response<Resource> response = await client.UpdateOptionalResourceAsync(body: body);
        }
    }
}
