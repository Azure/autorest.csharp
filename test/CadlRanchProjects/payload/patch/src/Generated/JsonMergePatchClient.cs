// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Payload.JsonMergePatch.Models;

namespace Payload.JsonMergePatch
{
    // Data plane generated client.
    /// <summary> Test for merge-patch+json content-type. </summary>
    public partial class JsonMergePatchClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of JsonMergePatchClient. </summary>
        public JsonMergePatchClient() : this(new Uri("http://localhost:3000"), new JsonMergePatchClientOptions())
        {
        }

        /// <summary> Initializes a new instance of JsonMergePatchClient. </summary>
        /// <param name="endpoint"> TestServer endpoint. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public JsonMergePatchClient(Uri endpoint, JsonMergePatchClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new JsonMergePatchClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <summary> Test content-type: application/merge-patch+json with required body. </summary>
        /// <param name="body"> The <see cref="Resource"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <include file="Docs/JsonMergePatchClient.xml" path="doc/members/member[@name='CreateResourceAsync(Resource,CancellationToken)']/*" />
        public virtual async Task<Response<Resource>> CreateResourceAsync(Resource body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = RequestContent.Create(body, options); // body.ToPatchRequestContent();
            Response response = await CreateResourceAsync(content, context).ConfigureAwait(false);
            return Response.FromValue(Resource.FromResponse(response), response);
        }

        /// <summary> Test content-type: application/merge-patch+json with required body. </summary>
        /// <param name="body"> The <see cref="Resource"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <include file="Docs/JsonMergePatchClient.xml" path="doc/members/member[@name='CreateResource(Resource,CancellationToken)']/*" />
        public virtual Response<Resource> CreateResource(Resource body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = body.ToRequestContent();
            Response response = CreateResource(content, context);
            return Response.FromValue(Resource.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Test content-type: application/merge-patch+json with required body
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateResourceAsync(Resource,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/JsonMergePatchClient.xml" path="doc/members/member[@name='CreateResourceAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateResourceAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("JsonMergePatchClient.CreateResource");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateResourceRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Test content-type: application/merge-patch+json with required body
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateResource(Resource,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/JsonMergePatchClient.xml" path="doc/members/member[@name='CreateResource(RequestContent,RequestContext)']/*" />
        public virtual Response CreateResource(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("JsonMergePatchClient.CreateResource");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateResourceRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Test content-type: application/merge-patch+json with required body. </summary>
        /// <param name="body"> The <see cref="ResourcePatch"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <include file="Docs/JsonMergePatchClient.xml" path="doc/members/member[@name='UpdateResourceAsync(ResourcePatch,CancellationToken)']/*" />
        public virtual async Task<Response<Resource>> UpdateResourceAsync(ResourcePatch body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = body.ToRequestContent();
            Response response = await UpdateResourceAsync(content, context).ConfigureAwait(false);
            return Response.FromValue(Resource.FromResponse(response), response);
        }

        /// <summary> Test content-type: application/merge-patch+json with required body. </summary>
        /// <param name="body"> The <see cref="ResourcePatch"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        /// <include file="Docs/JsonMergePatchClient.xml" path="doc/members/member[@name='UpdateResource(ResourcePatch,CancellationToken)']/*" />
        public virtual Response<Resource> UpdateResource(ResourcePatch body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = body.ToRequestContent();
            Response response = UpdateResource(content, context);
            return Response.FromValue(Resource.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Test content-type: application/merge-patch+json with required body
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="UpdateResourceAsync(ResourcePatch,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/JsonMergePatchClient.xml" path="doc/members/member[@name='UpdateResourceAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> UpdateResourceAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("JsonMergePatchClient.UpdateResource");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateResourceRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Test content-type: application/merge-patch+json with required body
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="UpdateResource(ResourcePatch,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/JsonMergePatchClient.xml" path="doc/members/member[@name='UpdateResource(RequestContent,RequestContext)']/*" />
        public virtual Response UpdateResource(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("JsonMergePatchClient.UpdateResource");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateResourceRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Test content-type: application/merge-patch+json with optional body. </summary>
        /// <param name="body"> The <see cref="Resource"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/JsonMergePatchClient.xml" path="doc/members/member[@name='CreateOptionalResourceAsync(Resource,CancellationToken)']/*" />
        public virtual async Task<Response<Resource>> CreateOptionalResourceAsync(Resource body = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = body?.ToRequestContent();
            Response response = await CreateOptionalResourceAsync(content, context).ConfigureAwait(false);
            return Response.FromValue(Resource.FromResponse(response), response);
        }

        /// <summary> Test content-type: application/merge-patch+json with optional body. </summary>
        /// <param name="body"> The <see cref="Resource"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/JsonMergePatchClient.xml" path="doc/members/member[@name='CreateOptionalResource(Resource,CancellationToken)']/*" />
        public virtual Response<Resource> CreateOptionalResource(Resource body = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = body?.ToRequestContent();
            Response response = CreateOptionalResource(content, context);
            return Response.FromValue(Resource.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Test content-type: application/merge-patch+json with optional body
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateOptionalResourceAsync(Resource,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/JsonMergePatchClient.xml" path="doc/members/member[@name='CreateOptionalResourceAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateOptionalResourceAsync(RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("JsonMergePatchClient.CreateOptionalResource");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOptionalResourceRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Test content-type: application/merge-patch+json with optional body
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="CreateOptionalResource(Resource,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/JsonMergePatchClient.xml" path="doc/members/member[@name='CreateOptionalResource(RequestContent,RequestContext)']/*" />
        public virtual Response CreateOptionalResource(RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("JsonMergePatchClient.CreateOptionalResource");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOptionalResourceRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Test content-type: application/merge-patch+json with optional body. </summary>
        /// <param name="body"> The <see cref="ResourcePatch"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/JsonMergePatchClient.xml" path="doc/members/member[@name='UpdateOptionalResourceAsync(ResourcePatch,CancellationToken)']/*" />
        public virtual async Task<Response<Resource>> UpdateOptionalResourceAsync(ResourcePatch body = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = body?.ToRequestContent();
            Response response = await UpdateOptionalResourceAsync(content, context).ConfigureAwait(false);
            return Response.FromValue(Resource.FromResponse(response), response);
        }

        /// <summary> Test content-type: application/merge-patch+json with optional body. </summary>
        /// <param name="body"> The <see cref="ResourcePatch"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/JsonMergePatchClient.xml" path="doc/members/member[@name='UpdateOptionalResource(ResourcePatch,CancellationToken)']/*" />
        public virtual Response<Resource> UpdateOptionalResource(ResourcePatch body = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            using RequestContent content = body?.ToRequestContent();
            Response response = UpdateOptionalResource(content, context);
            return Response.FromValue(Resource.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Test content-type: application/merge-patch+json with optional body
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="UpdateOptionalResourceAsync(ResourcePatch,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/JsonMergePatchClient.xml" path="doc/members/member[@name='UpdateOptionalResourceAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> UpdateOptionalResourceAsync(RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("JsonMergePatchClient.UpdateOptionalResource");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateOptionalResourceRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Test content-type: application/merge-patch+json with optional body
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="UpdateOptionalResource(ResourcePatch,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/JsonMergePatchClient.xml" path="doc/members/member[@name='UpdateOptionalResource(RequestContent,RequestContext)']/*" />
        public virtual Response UpdateOptionalResource(RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("JsonMergePatchClient.UpdateOptionalResource");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateOptionalResourceRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateCreateResourceRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/json-merge-patch/create/resource", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateUpdateResourceRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/json-merge-patch/update/resource", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("content-type", "application/merge-patch+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateCreateOptionalResourceRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/json-merge-patch/create/resource/optional", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("content-type", "application/merge-patch+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateUpdateOptionalResourceRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/json-merge-patch/update/resource/optional", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("content-type", "application/merge-patch+json");
            request.Content = content;
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
