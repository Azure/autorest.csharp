// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Payload.JsonMergePatch.Models
{
    public partial class ResourcePatch : IUtf8JsonSerializable, IJsonModel<ResourcePatch>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ResourcePatch>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<ResourcePatch>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" || options.Format == "JMP" ? ((IPersistableModel<ResourcePatch>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ResourcePatch)} does not support '{format}' format.");
            }

            if (options.Format == "W")
            {
                WriteJson(writer, options);
            }
            else if (options.Format == "P")
            {
                WritePatch(writer);
            }
        }

        internal void WriteJson(Utf8JsonWriter writer, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            writer.WriteStartObject();
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(Map))
            {
                writer.WritePropertyName("map"u8);
                writer.WriteStartObject();
                foreach (var item in Map)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(Array))
            {
                writer.WritePropertyName("array"u8);
                writer.WriteStartArray();
                foreach (var item in Array)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(NestedModel))
            {
                writer.WritePropertyName("nestedModel"u8);
                writer.WriteObjectValue(NestedModel);
            }
            if (Optional.IsCollectionDefined(IntArray))
            {
                writer.WritePropertyName("intArray"u8);
                writer.WriteStartArray();
                foreach (var item in IntArray)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal void WritePatch(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (_description != null)
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(_description);
            }
            else if (_descriptionChanged)
            {
                writer.WritePropertyName("description"u8);
                writer.WriteNullValue();
            }

            if (Optional.IsCollectionChanged(Map, item => item.hasChanged))
            {
                writer.WritePropertyName("map"u8);
                if (Map != null)
                {
                    writer.WriteStartObject();
                    if (Map is ChangeTrackingDictionary<string, InnerModel> changeTrackingMap)
                    {
                        foreach (var item in changeTrackingMap.ChangeDictionary)
                        {
                            writer.WritePropertyName(item.Key);
                            if (changeTrackingMap.ShouldSetNull(item.Key))
                            {
                                writer.WriteNullValue();
                            }
                            else
                            {
                                Map[item.Key].WritePatch(writer);
                            }
                        }
                        foreach (var item in changeTrackingMap)
                        {
                            if (item.Value.hasChanged)
                            {
                                item.Value.WritePatch(writer);
                            }
                        }
                    }
                    writer.WriteEndObject();
                }
            }

            if (Optional.IsCollectionChanged(IntMap))
            {
                writer.WritePropertyName("map"u8);
                if (IntMap != null)
                {
                    writer.WriteStartObject();
                    if (IntMap is ChangeTrackingDictionary<string, int> changeTackingIntMap)
                    {
                        foreach (var item in changeTackingIntMap.ChangeDictionary)
                        {
                            writer.WritePropertyName(item.Key);
                            if (changeTackingIntMap.ShouldSetNull(item.Key))
                            {
                                writer.WriteNullValue();
                            }
                            else
                            {
                                writer.WriteNumberValue(IntMap[item.Key]);
                            }
                        }
                    }
                    else
                    {
                        foreach (var item in IntMap)
                        {
                            writer.WritePropertyName(item.Key);
                            writer.WriteNumberValue(item.Value);
                        }
                    }
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNullValue();
                }
            }

            if (Optional.IsCollectionChanged(Array, item => item.hasChanged))
            {
                writer.WritePropertyName("array"u8);
                if (Array != null)
                {
                    writer.WriteStartArray();
                    foreach (var item in Array)
                    {
                        item.WriteJson(writer);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNullValue();
                }
            }

            if (_nestedModel != null)
            {
                writer.WritePropertyName("nestedModel"u8);
                _nestedModel.WritePatch(writer);
            }
            else if (_nestedModelChanged)
            {
                writer.WritePropertyName("nestedModel"u8);
                writer.WriteNullValue();
            }

            if (Optional.IsCollectionChanged(IntArray))
            {
                writer.WritePropertyName("intArray"u8);
                if (IntArray != null)
                {
                    writer.WriteStartArray();
                    foreach (var item in IntArray)
                    {
                        writer.WriteNumberValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNullValue();
                }
            }

            if (Optional.IsCollectionChanged(ArrayOfArray, item => Optional.IsCollectionChanged(item)))
            {

            }
        }

        ResourcePatch IJsonModel<ResourcePatch>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResourcePatch>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ResourcePatch)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeResourcePatch(document.RootElement, options);
        }

        internal static ResourcePatch DeserializeResourcePatch(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> description = default;
            Optional<IDictionary<string, InnerModel>> map = default;
            Optional<IDictionary<string, int>> intMap = default;
            Optional<IList<InnerModel>> array = default;
            Optional<NestedModel> nestedModel = default;
            Optional<IList<int>> intArray = default;
            Optional<IList<IList<int>>> arrayOfArray = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("map"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, InnerModel> dictionary = new Dictionary<string, InnerModel>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, InnerModel.DeserializeInnerModel(property0.Value));
                    }
                    map = dictionary;
                    continue;
                }
                if (property.NameEquals("intMap"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, int> dictionary = new Dictionary<string, int>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetInt32());
                    }
                    intMap = dictionary;
                    continue;
                }
                if (property.NameEquals("array"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<InnerModel> array0 = new List<InnerModel>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array0.Add(InnerModel.DeserializeInnerModel(item));
                    }
                    array = array0;
                    continue;
                }
                if (property.NameEquals("nestedModel"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nestedModel = NestedModel.DeserializeNestedModel(property.Value);
                    continue;
                }
                if (property.NameEquals("intArray"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<int> array0 = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array0.Add(item.GetInt32());
                    }
                    intArray = array0;
                    continue;
                }
                if (property.NameEquals("arrayOfArray"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<IList<int>> array0 = new List<IList<int>>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array0.Add(null);
                        }
                        else
                        {
                            List<int> array1 = new List<int>();
                            foreach (var item0 in item.EnumerateArray())
                            {
                                array1.Add(item0.GetInt32());
                            }
                            array0.Add(array1);
                        }
                    }
                    arrayOfArray = array0;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ResourcePatch(description.Value, map, intMap, array, arrayOfArray, nestedModel.Value, intArray, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ResourcePatch>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" || options.Format == "JMP" ? ((IPersistableModel<ResourcePatch>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(ResourcePatch)} does not support '{options.Format}' format.");
            }
        }

        ResourcePatch IPersistableModel<ResourcePatch>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ResourcePatch>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeResourcePatch(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ResourcePatch)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<ResourcePatch>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static ResourcePatch FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeResourcePatch(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
