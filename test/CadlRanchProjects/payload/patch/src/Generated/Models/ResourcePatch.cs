// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Payload.JsonMergePatch.Models
{
    /// <summary> Details about a resource for patch operation. </summary>
    public partial class ResourcePatch
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ResourcePatch"/>. </summary>
        public ResourcePatch()
        {
            _map = new ChangeTrackingDictionary<string, InnerModel>();
            _array = new ChangeTrackingList<InnerModel>();
            _intArray = new ChangeTrackingList<int>();
        }

        /// <summary> Initializes a new instance of <see cref="ResourcePatch"/>. </summary>
        /// <param name="description"></param>
        /// <param name="map"></param>
        /// <param name="array"></param>
        /// <param name="nestedModel"></param>
        /// <param name="intArray"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ResourcePatch(string description, IDictionary<string, InnerModel> map, IList<InnerModel> array, NestedModel nestedModel, IList<int> intArray, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            _description = description;
            _map = map;
            Array = array;
            NestedModel = nestedModel;
            IntArray = intArray;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        private string _description;
        private bool _descriptionChanged = false;
        /// <summary> Gets or sets the description. </summary>
        public string Description
        {
            get => _description;
            set
            {
                _descriptionChanged = true;
                _description = value;
            }
        }

        private IDictionary<string, InnerModel> _map;
        private bool _mapChanged = false;
        /// <summary> Gets the map. </summary>
        public IDictionary<string, InnerModel> Map
        {
            get => _map;
            set
            {
                _mapChanged = true;
                _map = value;
            }
        }

        private IList<InnerModel> _array;
        private bool _arrayChanged = false;
        /// <summary> Gets the array. </summary>
        public IList<InnerModel> Array
        {
            get => _array;
            set
            {
                _arrayChanged = true;
                _array = value;
            }
        }

        private NestedModel _nestedModel;
        private bool _nestedModelChanged = false;
        /// <summary> Gets or sets the nested model. </summary>
        public NestedModel NestedModel
        {
            get => _nestedModel;
            set
            {
                _nestedModel = value;
                _nestedModelChanged = true;
            }
        }

        private IList<int> _intArray;
        private bool _intArrayChanged = false;
        /// <summary> Gets the int array. </summary>
        public IList<int> IntArray { get; }
    }
}
