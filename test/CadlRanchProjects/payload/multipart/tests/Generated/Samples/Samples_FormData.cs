// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using Payload.MultiPart;
using Payload.MultiPart.Models;

namespace Payload.MultiPart.Samples
{
    public partial class Samples_FormData
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FormData_Basic_ShortVersion()
        {
            FormData client = new MultiPartClient().GetFormDataClient(apiVersion: "1.0.0");

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                profileImage = new object(),
            });
            Response response = client.Basic(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FormData_Basic_ShortVersion_Async()
        {
            FormData client = new MultiPartClient().GetFormDataClient(apiVersion: "1.0.0");

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                profileImage = new object(),
            });
            Response response = await client.BasicAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FormData_Basic_ShortVersion_Convenience()
        {
            FormData client = new MultiPartClient().GetFormDataClient(apiVersion: "1.0.0");

            MultiPartRequest body = new MultiPartRequest("<id>", BinaryData.FromObjectAsJson(new object()));
            Response response = client.Basic(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FormData_Basic_ShortVersion_Convenience_Async()
        {
            FormData client = new MultiPartClient().GetFormDataClient(apiVersion: "1.0.0");

            MultiPartRequest body = new MultiPartRequest("<id>", BinaryData.FromObjectAsJson(new object()));
            Response response = await client.BasicAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FormData_Basic_AllParameters()
        {
            FormData client = new MultiPartClient().GetFormDataClient(apiVersion: "1.0.0");

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                profileImage = new object(),
            });
            Response response = client.Basic(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FormData_Basic_AllParameters_Async()
        {
            FormData client = new MultiPartClient().GetFormDataClient(apiVersion: "1.0.0");

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                profileImage = new object(),
            });
            Response response = await client.BasicAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FormData_Basic_AllParameters_Convenience()
        {
            FormData client = new MultiPartClient().GetFormDataClient(apiVersion: "1.0.0");

            MultiPartRequest body = new MultiPartRequest("<id>", BinaryData.FromObjectAsJson(new object()));
            Response response = client.Basic(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FormData_Basic_AllParameters_Convenience_Async()
        {
            FormData client = new MultiPartClient().GetFormDataClient(apiVersion: "1.0.0");

            MultiPartRequest body = new MultiPartRequest("<id>", BinaryData.FromObjectAsJson(new object()));
            Response response = await client.BasicAsync(body);
        }
    }
}
