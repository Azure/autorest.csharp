// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using Payload.MultiPart.Models;

namespace Payload.MultiPart.Samples
{
    public partial class Samples_FormDataHttpParts
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HttpParts_JsonArrayAndFileArray_ShortVersion()
        {
            FormDataHttpParts client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                address = new
                {
                    city = "<city>",
                },
                profileImage = new
                {
                    filename = "<filename>",
                    contentType = "<contentType>",
                    contents = new object(),
                },
                previousAddresses = new object[]
            {
null
            },
                pictures = new object[]
            {
null
            },
            });
            Response response = client.JsonArrayAndFileArray(content, "multipart/form-data");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HttpParts_JsonArrayAndFileArray_ShortVersion_Async()
        {
            FormDataHttpParts client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                address = new
                {
                    city = "<city>",
                },
                profileImage = new
                {
                    filename = "<filename>",
                    contentType = "<contentType>",
                    contents = new object(),
                },
                previousAddresses = new object[]
            {
null
            },
                pictures = new object[]
            {
null
            },
            });
            Response response = await client.JsonArrayAndFileArrayAsync(content, "multipart/form-data");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HttpParts_JsonArrayAndFileArray_ShortVersion_Convenience()
        {
            FormDataHttpParts client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient();

            ComplexHttpPartsModelRequest body = new ComplexHttpPartsModelRequest("<id>", new Address("<city>"), new FileRequiredMetaData(BinaryData.FromObjectAsJson(new object()), "<filename>", "<contentType>"), new Address[]
            {
default
            }, new FileRequiredMetaData[]
            {
default
            });
            Response response = client.JsonArrayAndFileArray(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HttpParts_JsonArrayAndFileArray_ShortVersion_Convenience_Async()
        {
            FormDataHttpParts client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient();

            ComplexHttpPartsModelRequest body = new ComplexHttpPartsModelRequest("<id>", new Address("<city>"), new FileRequiredMetaData(BinaryData.FromObjectAsJson(new object()), "<filename>", "<contentType>"), new Address[]
            {
default
            }, new FileRequiredMetaData[]
            {
default
            });
            Response response = await client.JsonArrayAndFileArrayAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HttpParts_JsonArrayAndFileArray_AllParameters()
        {
            FormDataHttpParts client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                address = new
                {
                    city = "<city>",
                },
                profileImage = new
                {
                    filename = "<filename>",
                    contentType = "<contentType>",
                    contents = new object(),
                },
                previousAddresses = new object[]
            {
null
            },
                pictures = new object[]
            {
null
            },
            });
            Response response = client.JsonArrayAndFileArray(content, "multipart/form-data");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HttpParts_JsonArrayAndFileArray_AllParameters_Async()
        {
            FormDataHttpParts client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                address = new
                {
                    city = "<city>",
                },
                profileImage = new
                {
                    filename = "<filename>",
                    contentType = "<contentType>",
                    contents = new object(),
                },
                previousAddresses = new object[]
            {
null
            },
                pictures = new object[]
            {
null
            },
            });
            Response response = await client.JsonArrayAndFileArrayAsync(content, "multipart/form-data");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HttpParts_JsonArrayAndFileArray_AllParameters_Convenience()
        {
            FormDataHttpParts client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient();

            ComplexHttpPartsModelRequest body = new ComplexHttpPartsModelRequest("<id>", new Address("<city>"), new FileRequiredMetaData(BinaryData.FromObjectAsJson(new object()), "<filename>", "<contentType>"), new Address[]
            {
default
            }, new FileRequiredMetaData[]
            {
default
            });
            Response response = client.JsonArrayAndFileArray(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HttpParts_JsonArrayAndFileArray_AllParameters_Convenience_Async()
        {
            FormDataHttpParts client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient();

            ComplexHttpPartsModelRequest body = new ComplexHttpPartsModelRequest("<id>", new Address("<city>"), new FileRequiredMetaData(BinaryData.FromObjectAsJson(new object()), "<filename>", "<contentType>"), new Address[]
            {
default
            }, new FileRequiredMetaData[]
            {
default
            });
            Response response = await client.JsonArrayAndFileArrayAsync(body);
        }
    }
}
