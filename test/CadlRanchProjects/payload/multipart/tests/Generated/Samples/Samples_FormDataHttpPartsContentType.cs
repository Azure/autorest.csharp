// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using Payload.MultiPart.Models;

namespace Payload.MultiPart.Samples
{
    public partial class Samples_FormDataHttpPartsContentType
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ContentType_ImageJpegContentType_ShortVersion()
        {
            FormDataHttpPartsContentType client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient().GetFormDataHttpPartsContentTypeClient();

            using RequestContent content = RequestContent.Create(new
            {
                profileImage = new
                {
                    filename = "<filename>",
                    contentType = "image/jpg",
                    contents = new object(),
                },
            });
            Response response = client.ImageJpegContentType(content, "multipart/form-data");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ContentType_ImageJpegContentType_ShortVersion_Async()
        {
            FormDataHttpPartsContentType client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient().GetFormDataHttpPartsContentTypeClient();

            using RequestContent content = RequestContent.Create(new
            {
                profileImage = new
                {
                    filename = "<filename>",
                    contentType = "image/jpg",
                    contents = new object(),
                },
            });
            Response response = await client.ImageJpegContentTypeAsync(content, "multipart/form-data");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ContentType_ImageJpegContentType_ShortVersion_Convenience()
        {
            FormDataHttpPartsContentType client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient().GetFormDataHttpPartsContentTypeClient();

            FileWithHttpPartSpecificContentTypeRequest body = new FileWithHttpPartSpecificContentTypeRequest(new FileSpecificContentType(BinaryData.FromObjectAsJson(new object()), "<filename>")
            {
                ContentType = "image/jpg",
            });
            Response response = client.ImageJpegContentType(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ContentType_ImageJpegContentType_ShortVersion_Convenience_Async()
        {
            FormDataHttpPartsContentType client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient().GetFormDataHttpPartsContentTypeClient();

            FileWithHttpPartSpecificContentTypeRequest body = new FileWithHttpPartSpecificContentTypeRequest(new FileSpecificContentType(BinaryData.FromObjectAsJson(new object()), "<filename>")
            {
                ContentType = "image/jpg",
            });
            Response response = await client.ImageJpegContentTypeAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ContentType_ImageJpegContentType_AllParameters()
        {
            FormDataHttpPartsContentType client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient().GetFormDataHttpPartsContentTypeClient();

            using RequestContent content = RequestContent.Create(new
            {
                profileImage = new
                {
                    filename = "<filename>",
                    contentType = "image/jpg",
                    contents = new object(),
                },
            });
            Response response = client.ImageJpegContentType(content, "multipart/form-data");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ContentType_ImageJpegContentType_AllParameters_Async()
        {
            FormDataHttpPartsContentType client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient().GetFormDataHttpPartsContentTypeClient();

            using RequestContent content = RequestContent.Create(new
            {
                profileImage = new
                {
                    filename = "<filename>",
                    contentType = "image/jpg",
                    contents = new object(),
                },
            });
            Response response = await client.ImageJpegContentTypeAsync(content, "multipart/form-data");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ContentType_ImageJpegContentType_AllParameters_Convenience()
        {
            FormDataHttpPartsContentType client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient().GetFormDataHttpPartsContentTypeClient();

            FileWithHttpPartSpecificContentTypeRequest body = new FileWithHttpPartSpecificContentTypeRequest(new FileSpecificContentType(BinaryData.FromObjectAsJson(new object()), "<filename>")
            {
                ContentType = "image/jpg",
            });
            Response response = client.ImageJpegContentType(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ContentType_ImageJpegContentType_AllParameters_Convenience_Async()
        {
            FormDataHttpPartsContentType client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient().GetFormDataHttpPartsContentTypeClient();

            FileWithHttpPartSpecificContentTypeRequest body = new FileWithHttpPartSpecificContentTypeRequest(new FileSpecificContentType(BinaryData.FromObjectAsJson(new object()), "<filename>")
            {
                ContentType = "image/jpg",
            });
            Response response = await client.ImageJpegContentTypeAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ContentType_RequiredContentType_ShortVersion()
        {
            FormDataHttpPartsContentType client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient().GetFormDataHttpPartsContentTypeClient();

            using RequestContent content = RequestContent.Create(new
            {
                profileImage = new
                {
                    filename = "<filename>",
                    contentType = "<contentType>",
                    contents = new object(),
                },
            });
            Response response = client.RequiredContentType(content, "multipart/form-data");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ContentType_RequiredContentType_ShortVersion_Async()
        {
            FormDataHttpPartsContentType client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient().GetFormDataHttpPartsContentTypeClient();

            using RequestContent content = RequestContent.Create(new
            {
                profileImage = new
                {
                    filename = "<filename>",
                    contentType = "<contentType>",
                    contents = new object(),
                },
            });
            Response response = await client.RequiredContentTypeAsync(content, "multipart/form-data");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ContentType_RequiredContentType_ShortVersion_Convenience()
        {
            FormDataHttpPartsContentType client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient().GetFormDataHttpPartsContentTypeClient();

            FileWithHttpPartRequiredContentTypeRequest body = new FileWithHttpPartRequiredContentTypeRequest(new FileRequiredMetaData(BinaryData.FromObjectAsJson(new object()), "<filename>", "<contentType>"));
            Response response = client.RequiredContentType(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ContentType_RequiredContentType_ShortVersion_Convenience_Async()
        {
            FormDataHttpPartsContentType client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient().GetFormDataHttpPartsContentTypeClient();

            FileWithHttpPartRequiredContentTypeRequest body = new FileWithHttpPartRequiredContentTypeRequest(new FileRequiredMetaData(BinaryData.FromObjectAsJson(new object()), "<filename>", "<contentType>"));
            Response response = await client.RequiredContentTypeAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ContentType_RequiredContentType_AllParameters()
        {
            FormDataHttpPartsContentType client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient().GetFormDataHttpPartsContentTypeClient();

            using RequestContent content = RequestContent.Create(new
            {
                profileImage = new
                {
                    filename = "<filename>",
                    contentType = "<contentType>",
                    contents = new object(),
                },
            });
            Response response = client.RequiredContentType(content, "multipart/form-data");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ContentType_RequiredContentType_AllParameters_Async()
        {
            FormDataHttpPartsContentType client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient().GetFormDataHttpPartsContentTypeClient();

            using RequestContent content = RequestContent.Create(new
            {
                profileImage = new
                {
                    filename = "<filename>",
                    contentType = "<contentType>",
                    contents = new object(),
                },
            });
            Response response = await client.RequiredContentTypeAsync(content, "multipart/form-data");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ContentType_RequiredContentType_AllParameters_Convenience()
        {
            FormDataHttpPartsContentType client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient().GetFormDataHttpPartsContentTypeClient();

            FileWithHttpPartRequiredContentTypeRequest body = new FileWithHttpPartRequiredContentTypeRequest(new FileRequiredMetaData(BinaryData.FromObjectAsJson(new object()), "<filename>", "<contentType>"));
            Response response = client.RequiredContentType(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ContentType_RequiredContentType_AllParameters_Convenience_Async()
        {
            FormDataHttpPartsContentType client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient().GetFormDataHttpPartsContentTypeClient();

            FileWithHttpPartRequiredContentTypeRequest body = new FileWithHttpPartRequiredContentTypeRequest(new FileRequiredMetaData(BinaryData.FromObjectAsJson(new object()), "<filename>", "<contentType>"));
            Response response = await client.RequiredContentTypeAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ContentType_OptionalContentType_ShortVersion()
        {
            FormDataHttpPartsContentType client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient().GetFormDataHttpPartsContentTypeClient();

            using RequestContent content = RequestContent.Create(new
            {
                profileImage = new
                {
                    filename = "<filename>",
                    contents = new object(),
                },
            });
            Response response = client.OptionalContentType(content, "multipart/form-data");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ContentType_OptionalContentType_ShortVersion_Async()
        {
            FormDataHttpPartsContentType client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient().GetFormDataHttpPartsContentTypeClient();

            using RequestContent content = RequestContent.Create(new
            {
                profileImage = new
                {
                    filename = "<filename>",
                    contents = new object(),
                },
            });
            Response response = await client.OptionalContentTypeAsync(content, "multipart/form-data");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ContentType_OptionalContentType_ShortVersion_Convenience()
        {
            FormDataHttpPartsContentType client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient().GetFormDataHttpPartsContentTypeClient();

            FileWithHttpPartOptionalContentTypeRequest body = new FileWithHttpPartOptionalContentTypeRequest(new FileOptionalContentType(BinaryData.FromObjectAsJson(new object()), "<filename>"));
            Response response = client.OptionalContentType(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ContentType_OptionalContentType_ShortVersion_Convenience_Async()
        {
            FormDataHttpPartsContentType client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient().GetFormDataHttpPartsContentTypeClient();

            FileWithHttpPartOptionalContentTypeRequest body = new FileWithHttpPartOptionalContentTypeRequest(new FileOptionalContentType(BinaryData.FromObjectAsJson(new object()), "<filename>"));
            Response response = await client.OptionalContentTypeAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ContentType_OptionalContentType_AllParameters()
        {
            FormDataHttpPartsContentType client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient().GetFormDataHttpPartsContentTypeClient();

            using RequestContent content = RequestContent.Create(new
            {
                profileImage = new
                {
                    filename = "<filename>",
                    contentType = "<contentType>",
                    contents = new object(),
                },
            });
            Response response = client.OptionalContentType(content, "multipart/form-data");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ContentType_OptionalContentType_AllParameters_Async()
        {
            FormDataHttpPartsContentType client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient().GetFormDataHttpPartsContentTypeClient();

            using RequestContent content = RequestContent.Create(new
            {
                profileImage = new
                {
                    filename = "<filename>",
                    contentType = "<contentType>",
                    contents = new object(),
                },
            });
            Response response = await client.OptionalContentTypeAsync(content, "multipart/form-data");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ContentType_OptionalContentType_AllParameters_Convenience()
        {
            FormDataHttpPartsContentType client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient().GetFormDataHttpPartsContentTypeClient();

            FileWithHttpPartOptionalContentTypeRequest body = new FileWithHttpPartOptionalContentTypeRequest(new FileOptionalContentType(BinaryData.FromObjectAsJson(new object()), "<filename>")
            {
                ContentType = "<contentType>",
            });
            Response response = client.OptionalContentType(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ContentType_OptionalContentType_AllParameters_Convenience_Async()
        {
            FormDataHttpPartsContentType client = new MultiPartClient().GetFormDataClient().GetFormDataHttpPartsClient().GetFormDataHttpPartsContentTypeClient();

            FileWithHttpPartOptionalContentTypeRequest body = new FileWithHttpPartOptionalContentTypeRequest(new FileOptionalContentType(BinaryData.FromObjectAsJson(new object()), "<filename>")
            {
                ContentType = "<contentType>",
            });
            Response response = await client.OptionalContentTypeAsync(body);
        }
    }
}
