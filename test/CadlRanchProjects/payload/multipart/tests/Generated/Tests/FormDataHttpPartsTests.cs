// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using Payload.MultiPart.Models;

namespace Payload.MultiPart.Tests
{
    public partial class FormDataHttpPartsTests : PayloadMultiPartTestBase
    {
        public FormDataHttpPartsTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task HttpParts_JsonArrayAndFileArray_ShortVersion()
        {
            Uri endpoint = null;
            FormDataHttpParts client = CreateMultiPartClient(endpoint).GetFormDataClient().GetFormDataHttpPartsClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                address = new
                {
                    city = "<city>",
                },
                profileImage = new
                {
                    filename = "<filename>",
                    contentType = "<contentType>",
                    contents = new object(),
                },
                previousAddresses = new object[]
            {
null
            },
                pictures = new object[]
            {
null
            },
            });
            Response response = await client.JsonArrayAndFileArrayAsync(content, "multipart/form-data");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task HttpParts_JsonArrayAndFileArray_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            FormDataHttpParts client = CreateMultiPartClient(endpoint).GetFormDataClient().GetFormDataHttpPartsClient();

            ComplexHttpPartsModelRequest body = new ComplexHttpPartsModelRequest("<id>", new Address("<city>"), new FileRequiredMetaData(BinaryData.FromObjectAsJson(new object()), "<filename>", "<contentType>"), new Address[]
            {
default
            }, new FileRequiredMetaData[]
            {
default
            });
            Response response = await client.JsonArrayAndFileArrayAsync(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task HttpParts_JsonArrayAndFileArray_AllParameters()
        {
            Uri endpoint = null;
            FormDataHttpParts client = CreateMultiPartClient(endpoint).GetFormDataClient().GetFormDataHttpPartsClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                address = new
                {
                    city = "<city>",
                },
                profileImage = new
                {
                    filename = "<filename>",
                    contentType = "<contentType>",
                    contents = new object(),
                },
                previousAddresses = new object[]
            {
null
            },
                pictures = new object[]
            {
null
            },
            });
            Response response = await client.JsonArrayAndFileArrayAsync(content, "multipart/form-data");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task HttpParts_JsonArrayAndFileArray_AllParameters_Convenience()
        {
            Uri endpoint = null;
            FormDataHttpParts client = CreateMultiPartClient(endpoint).GetFormDataClient().GetFormDataHttpPartsClient();

            ComplexHttpPartsModelRequest body = new ComplexHttpPartsModelRequest("<id>", new Address("<city>"), new FileRequiredMetaData(BinaryData.FromObjectAsJson(new object()), "<filename>", "<contentType>"), new Address[]
            {
default
            }, new FileRequiredMetaData[]
            {
default
            });
            Response response = await client.JsonArrayAndFileArrayAsync(body);
        }
    }
}
