// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Payload.MultiPart.Models
{
    /// <summary> The FileOptionalContentType. </summary>
    public partial class FileOptionalContentType : File
    {
        /// <summary> Initializes a new instance of <see cref="FileOptionalContentType"/>. </summary>
        /// <param name="contents">
        /// The contents of the file.
        ///
        /// In file bodies, this value comes from the body of the request, response, or multipart payload. In JSON bodies,
        /// this value is serialized as a field in the response.
        /// </param>
        /// <param name="filename"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="contents"/> or <paramref name="filename"/> is null. </exception>
        public FileOptionalContentType(BinaryData contents, string filename) : base(contents)
        {
            Argument.AssertNotNull(contents, nameof(contents));
            Argument.AssertNotNull(filename, nameof(filename));
        }

        /// <summary> Initializes a new instance of <see cref="FileOptionalContentType"/>. </summary>
        /// <param name="contentType">
        /// The allowed media (MIME) types of the file contents.
        ///
        /// In file bodies, this value comes from the `Content-Type` header of the request or response. In JSON bodies,
        /// this value is serialized as a field in the response.
        ///
        /// NOTE: this is not _necessarily_ the same as the `Content-Type` header of the request or response, but
        /// it will be for file bodies. It may be different if the file is serialized as a JSON object. It always refers to the
        /// _contents_ of the file, and not necessarily the way the file itself is transmitted or serialized.
        /// </param>
        /// <param name="filename">
        /// The name of the file, if any.
        ///
        /// In file bodies, this value comes from the `filename` parameter of the `Content-Disposition` header of the response
        /// or multipart payload. In JSON bodies, this value is serialized as a field in the response.
        ///
        /// NOTE: By default, `filename` cannot be sent in request payloads and can only be sent in responses and multipart
        /// payloads, as the `Content-Disposition` header is not valid in requests. If you want to send the `filename` in a request,
        /// you must extend the `File` model and override the `filename` property with a different location defined by HTTP metadata
        /// decorators.
        /// </param>
        /// <param name="contents">
        /// The contents of the file.
        ///
        /// In file bodies, this value comes from the body of the request, response, or multipart payload. In JSON bodies,
        /// this value is serialized as a field in the response.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal FileOptionalContentType(string contentType, string filename, BinaryData contents, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(contentType, filename, contents, serializedAdditionalRawData)
        {
        }

        /// <summary> Initializes a new instance of <see cref="FileOptionalContentType"/> for deserialization. </summary>
        internal FileOptionalContentType()
        {
        }
    }
}
