// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;

namespace Payload.MultiPart.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class PayloadMultiPartModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.MultiBinaryPartsRequest"/>. </summary>
        /// <param name="profileImage"></param>
        /// <param name="picture"></param>
        /// <returns> A new <see cref="Models.MultiBinaryPartsRequest"/> instance for mocking. </returns>
        public static MultiBinaryPartsRequest MultiBinaryPartsRequest(Stream profileImage = null, Stream picture = null)
        {
            return new MultiBinaryPartsRequest(profileImage, picture, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FileRequiredMetaData"/>. </summary>
        /// <param name="contentType"></param>
        /// <param name="filename"></param>
        /// <param name="contents"></param>
        /// <returns> A new <see cref="Models.FileRequiredMetaData"/> instance for mocking. </returns>
        public static FileRequiredMetaData FileRequiredMetaData(string contentType = null, string filename = null, BinaryData contents = null)
        {
            return new FileRequiredMetaData(contentType, filename, contents, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.File"/>. </summary>
        /// <param name="contentType"></param>
        /// <param name="filename"></param>
        /// <param name="contents"></param>
        /// <returns> A new <see cref="Models.File"/> instance for mocking. </returns>
        public static File File(string contentType = null, string filename = null, BinaryData contents = null)
        {
            return new File(contentType, filename, contents, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FileSpecificContentType"/>. </summary>
        /// <param name="contentType"></param>
        /// <param name="filename"></param>
        /// <param name="contents"></param>
        /// <returns> A new <see cref="Models.FileSpecificContentType"/> instance for mocking. </returns>
        public static FileSpecificContentType FileSpecificContentType(string contentType = null, string filename = null, BinaryData contents = null)
        {
            return new FileSpecificContentType(contentType, filename, contents, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.FileOptionalContentType"/>. </summary>
        /// <param name="contentType"></param>
        /// <param name="filename"></param>
        /// <param name="contents"></param>
        /// <returns> A new <see cref="Models.FileOptionalContentType"/> instance for mocking. </returns>
        public static FileOptionalContentType FileOptionalContentType(string contentType = null, string filename = null, BinaryData contents = null)
        {
            return new FileOptionalContentType(contentType, filename, contents, serializedAdditionalRawData: null);
        }
    }
}
