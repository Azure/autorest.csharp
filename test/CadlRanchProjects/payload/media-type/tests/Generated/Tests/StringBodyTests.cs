// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Payload.MediaType.Tests
{
    public partial class StringBodyTests : PayloadMediaTypeTestBase
    {
        public StringBodyTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task StringBody_SendAsText_ShortVersion()
        {
            Uri endpoint = null;
            StringBody client = CreateMediaTypeClient(endpoint).GetStringBodyClient();

            using RequestContent content = RequestContent.Create("<text>");
            Response response = await client.SendAsTextAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task StringBody_SendAsText_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            StringBody client = CreateMediaTypeClient(endpoint).GetStringBodyClient();

            Response response = await client.SendAsTextAsync("<text>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task StringBody_SendAsText_AllParameters()
        {
            Uri endpoint = null;
            StringBody client = CreateMediaTypeClient(endpoint).GetStringBodyClient();

            using RequestContent content = RequestContent.Create("<text>");
            Response response = await client.SendAsTextAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task StringBody_SendAsText_AllParameters_Convenience()
        {
            Uri endpoint = null;
            StringBody client = CreateMediaTypeClient(endpoint).GetStringBodyClient();

            Response response = await client.SendAsTextAsync("<text>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task StringBody_GetAsText_ShortVersion()
        {
            Uri endpoint = null;
            StringBody client = CreateMediaTypeClient(endpoint).GetStringBodyClient();

            Response response = await client.GetAsTextAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task StringBody_GetAsText_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            StringBody client = CreateMediaTypeClient(endpoint).GetStringBodyClient();

            Response<string> response = await client.GetAsTextAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task StringBody_GetAsText_AllParameters()
        {
            Uri endpoint = null;
            StringBody client = CreateMediaTypeClient(endpoint).GetStringBodyClient();

            Response response = await client.GetAsTextAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task StringBody_GetAsText_AllParameters_Convenience()
        {
            Uri endpoint = null;
            StringBody client = CreateMediaTypeClient(endpoint).GetStringBodyClient();

            Response<string> response = await client.GetAsTextAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task StringBody_SendAsJson_ShortVersion()
        {
            Uri endpoint = null;
            StringBody client = CreateMediaTypeClient(endpoint).GetStringBodyClient();

            using RequestContent content = RequestContent.Create("<text>");
            Response response = await client.SendAsJsonAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task StringBody_SendAsJson_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            StringBody client = CreateMediaTypeClient(endpoint).GetStringBodyClient();

            Response response = await client.SendAsJsonAsync("<text>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task StringBody_SendAsJson_AllParameters()
        {
            Uri endpoint = null;
            StringBody client = CreateMediaTypeClient(endpoint).GetStringBodyClient();

            using RequestContent content = RequestContent.Create("<text>");
            Response response = await client.SendAsJsonAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task StringBody_SendAsJson_AllParameters_Convenience()
        {
            Uri endpoint = null;
            StringBody client = CreateMediaTypeClient(endpoint).GetStringBodyClient();

            Response response = await client.SendAsJsonAsync("<text>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task StringBody_GetAsJson_ShortVersion()
        {
            Uri endpoint = null;
            StringBody client = CreateMediaTypeClient(endpoint).GetStringBodyClient();

            Response response = await client.GetAsJsonAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task StringBody_GetAsJson_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            StringBody client = CreateMediaTypeClient(endpoint).GetStringBodyClient();

            Response<string> response = await client.GetAsJsonAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task StringBody_GetAsJson_AllParameters()
        {
            Uri endpoint = null;
            StringBody client = CreateMediaTypeClient(endpoint).GetStringBodyClient();

            Response response = await client.GetAsJsonAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task StringBody_GetAsJson_AllParameters_Convenience()
        {
            Uri endpoint = null;
            StringBody client = CreateMediaTypeClient(endpoint).GetStringBodyClient();

            Response<string> response = await client.GetAsJsonAsync();
        }
    }
}
