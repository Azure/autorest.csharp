// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using Versioning.ReturnTypeChangedFrom.Models;

namespace Versioning.ReturnTypeChangedFrom.Samples
{
    public partial class Samples_ReturnTypeChangedFromClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReturnTypeChangedFrom_Test_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            ReturnTypeChangedFromClient client = new ReturnTypeChangedFromClient(endpoint, default);

            using RequestContent content = RequestContent.Create("<body>");
            Response response = client.Test(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReturnTypeChangedFrom_Test_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            ReturnTypeChangedFromClient client = new ReturnTypeChangedFromClient(endpoint, default);

            using RequestContent content = RequestContent.Create("<body>");
            Response response = await client.TestAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReturnTypeChangedFrom_Test_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            ReturnTypeChangedFromClient client = new ReturnTypeChangedFromClient(endpoint, default);

            Response<string> response = client.Test("<body>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReturnTypeChangedFrom_Test_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            ReturnTypeChangedFromClient client = new ReturnTypeChangedFromClient(endpoint, default);

            Response<string> response = await client.TestAsync("<body>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReturnTypeChangedFrom_Test_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            ReturnTypeChangedFromClient client = new ReturnTypeChangedFromClient(endpoint, default);

            using RequestContent content = RequestContent.Create("<body>");
            Response response = client.Test(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReturnTypeChangedFrom_Test_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            ReturnTypeChangedFromClient client = new ReturnTypeChangedFromClient(endpoint, default);

            using RequestContent content = RequestContent.Create("<body>");
            Response response = await client.TestAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReturnTypeChangedFrom_Test_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            ReturnTypeChangedFromClient client = new ReturnTypeChangedFromClient(endpoint, default);

            Response<string> response = client.Test("<body>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReturnTypeChangedFrom_Test_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            ReturnTypeChangedFromClient client = new ReturnTypeChangedFromClient(endpoint, default);

            Response<string> response = await client.TestAsync("<body>");
        }
    }
}
