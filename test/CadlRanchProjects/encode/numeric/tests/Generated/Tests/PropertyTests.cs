// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Encode.Numeric.Models;
using NUnit.Framework;

namespace Encode.Numeric.Tests
{
    public partial class PropertyTests : EncodeNumericTestBase
    {
        public PropertyTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_SafeintAsString_ShortVersion()
        {
            Uri endpoint = null;
            Property client = CreateNumericClient(endpoint).GetPropertyClient();

            using RequestContent content = RequestContent.Create(new
            {
                value = 1234L,
            });
            Response response = await client.SafeintAsStringAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_SafeintAsString_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            Property client = CreateNumericClient(endpoint).GetPropertyClient();

            SafeintAsStringProperty value = new SafeintAsStringProperty(1234L);
            Response<SafeintAsStringProperty> response = await client.SafeintAsStringAsync(value);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_SafeintAsString_AllParameters()
        {
            Uri endpoint = null;
            Property client = CreateNumericClient(endpoint).GetPropertyClient();

            using RequestContent content = RequestContent.Create(new
            {
                value = 1234L,
            });
            Response response = await client.SafeintAsStringAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_SafeintAsString_AllParameters_Convenience()
        {
            Uri endpoint = null;
            Property client = CreateNumericClient(endpoint).GetPropertyClient();

            SafeintAsStringProperty value = new SafeintAsStringProperty(1234L);
            Response<SafeintAsStringProperty> response = await client.SafeintAsStringAsync(value);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_Uint32AsStringOptional_ShortVersion()
        {
            Uri endpoint = null;
            Property client = CreateNumericClient(endpoint).GetPropertyClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.Uint32AsStringOptionalAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_Uint32AsStringOptional_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            Property client = CreateNumericClient(endpoint).GetPropertyClient();

            Uint32AsStringProperty value = new Uint32AsStringProperty();
            Response<Uint32AsStringProperty> response = await client.Uint32AsStringOptionalAsync(value);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_Uint32AsStringOptional_AllParameters()
        {
            Uri endpoint = null;
            Property client = CreateNumericClient(endpoint).GetPropertyClient();

            using RequestContent content = RequestContent.Create(new
            {
                value = new object(),
            });
            Response response = await client.Uint32AsStringOptionalAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_Uint32AsStringOptional_AllParameters_Convenience()
        {
            Uri endpoint = null;
            Property client = CreateNumericClient(endpoint).GetPropertyClient();

            Uint32AsStringProperty value = new Uint32AsStringProperty
            {
                Value = new object(),
            };
            Response<Uint32AsStringProperty> response = await client.Uint32AsStringOptionalAsync(value);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_Uint8AsString_ShortVersion()
        {
            Uri endpoint = null;
            Property client = CreateNumericClient(endpoint).GetPropertyClient();

            using RequestContent content = RequestContent.Create(new
            {
                value = 123,
            });
            Response response = await client.Uint8AsStringAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_Uint8AsString_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            Property client = CreateNumericClient(endpoint).GetPropertyClient();

            Uint8AsStringProperty value = new Uint8AsStringProperty(123);
            Response<Uint8AsStringProperty> response = await client.Uint8AsStringAsync(value);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_Uint8AsString_AllParameters()
        {
            Uri endpoint = null;
            Property client = CreateNumericClient(endpoint).GetPropertyClient();

            using RequestContent content = RequestContent.Create(new
            {
                value = 123,
            });
            Response response = await client.Uint8AsStringAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_Uint8AsString_AllParameters_Convenience()
        {
            Uri endpoint = null;
            Property client = CreateNumericClient(endpoint).GetPropertyClient();

            Uint8AsStringProperty value = new Uint8AsStringProperty(123);
            Response<Uint8AsStringProperty> response = await client.Uint8AsStringAsync(value);
        }
    }
}
