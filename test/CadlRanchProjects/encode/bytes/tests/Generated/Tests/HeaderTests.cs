// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Identity;
using Encode.Bytes;
using NUnit.Framework;

namespace Encode.Bytes.Tests
{
    public class HeaderTests : EncodeBytesTestBase
    {
        public HeaderTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Default_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Header client = CreateBytesClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.DefaultAsync(BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Default_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Header client = CreateBytesClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.DefaultAsync(BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Base64_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Header client = CreateBytesClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.Base64Async(BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Base64_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Header client = CreateBytesClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.Base64Async(BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Base64url_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Header client = CreateBytesClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.Base64urlAsync(BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Base64url_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Header client = CreateBytesClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.Base64urlAsync(BinaryData.FromObjectAsJson(new object()));
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Base64urlArray_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Header client = CreateBytesClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.Base64urlArrayAsync(new List<BinaryData>()
{
BinaryData.FromObjectAsJson(new object())
});
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Base64urlArray_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Header client = CreateBytesClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.Base64urlArrayAsync(new List<BinaryData>()
{
BinaryData.FromObjectAsJson(new object())
});
        }
    }
}
