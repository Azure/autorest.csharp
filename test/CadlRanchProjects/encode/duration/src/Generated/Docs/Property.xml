<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="DefaultAsync(DefaultDurationProperty,CancellationToken)">
<example>
This sample shows how to call DefaultAsync with required parameters.
<code><![CDATA[
var client = new DurationClient().GetPropertyClient("1.0.0");

var body = new DefaultDurationProperty(new TimeSpan(1, 2, 3));
var result = await client.DefaultAsync(body);
]]></code>
</example>
    </member>
    <member name="Default(DefaultDurationProperty,CancellationToken)">
<example>
This sample shows how to call Default with required parameters.
<code><![CDATA[
var client = new DurationClient().GetPropertyClient("1.0.0");

var body = new DefaultDurationProperty(new TimeSpan(1, 2, 3));
var result = client.Default(body);
]]></code>
</example>
    </member>
    <member name="DefaultAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call DefaultAsync with required request content and parse the result.
<code><![CDATA[
var client = new DurationClient().GetPropertyClient("1.0.0");

var data = new {
    value = "PT1H23M45S",
};

Response response = await client.DefaultAsync(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value").ToString());
]]></code>
</example>
    </member>
    <member name="Default(RequestContent,RequestContext)">
<example>
This sample shows how to call Default with required request content and parse the result.
<code><![CDATA[
var client = new DurationClient().GetPropertyClient("1.0.0");

var data = new {
    value = "PT1H23M45S",
};

Response response = client.Default(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value").ToString());
]]></code>
</example>
    </member>
    <member name="Iso8601Async(ISO8601DurationProperty,CancellationToken)">
<example>
This sample shows how to call Iso8601Async with required parameters.
<code><![CDATA[
var client = new DurationClient().GetPropertyClient("1.0.0");

var body = new ISO8601DurationProperty(new TimeSpan(1, 2, 3));
var result = await client.Iso8601Async(body);
]]></code>
</example>
    </member>
    <member name="Iso8601(ISO8601DurationProperty,CancellationToken)">
<example>
This sample shows how to call Iso8601 with required parameters.
<code><![CDATA[
var client = new DurationClient().GetPropertyClient("1.0.0");

var body = new ISO8601DurationProperty(new TimeSpan(1, 2, 3));
var result = client.Iso8601(body);
]]></code>
</example>
    </member>
    <member name="Iso8601Async(RequestContent,RequestContext)">
<example>
This sample shows how to call Iso8601Async with required request content and parse the result.
<code><![CDATA[
var client = new DurationClient().GetPropertyClient("1.0.0");

var data = new {
    value = "PT1H23M45S",
};

Response response = await client.Iso8601Async(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value").ToString());
]]></code>
</example>
    </member>
    <member name="Iso8601(RequestContent,RequestContext)">
<example>
This sample shows how to call Iso8601 with required request content and parse the result.
<code><![CDATA[
var client = new DurationClient().GetPropertyClient("1.0.0");

var data = new {
    value = "PT1H23M45S",
};

Response response = client.Iso8601(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value").ToString());
]]></code>
</example>
    </member>
    <member name="Int32SecondsAsync(Int32SecondsDurationProperty,CancellationToken)">
<example>
This sample shows how to call Int32SecondsAsync with required parameters.
<code><![CDATA[
var client = new DurationClient().GetPropertyClient("1.0.0");

var body = new Int32SecondsDurationProperty(new TimeSpan(1, 2, 3));
var result = await client.Int32SecondsAsync(body);
]]></code>
</example>
    </member>
    <member name="Int32Seconds(Int32SecondsDurationProperty,CancellationToken)">
<example>
This sample shows how to call Int32Seconds with required parameters.
<code><![CDATA[
var client = new DurationClient().GetPropertyClient("1.0.0");

var body = new Int32SecondsDurationProperty(new TimeSpan(1, 2, 3));
var result = client.Int32Seconds(body);
]]></code>
</example>
    </member>
    <member name="Int32SecondsAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call Int32SecondsAsync with required request content and parse the result.
<code><![CDATA[
var client = new DurationClient().GetPropertyClient("1.0.0");

var data = new {
    value = new {},
};

Response response = await client.Int32SecondsAsync(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value").ToString());
]]></code>
</example>
    </member>
    <member name="Int32Seconds(RequestContent,RequestContext)">
<example>
This sample shows how to call Int32Seconds with required request content and parse the result.
<code><![CDATA[
var client = new DurationClient().GetPropertyClient("1.0.0");

var data = new {
    value = new {},
};

Response response = client.Int32Seconds(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value").ToString());
]]></code>
</example>
    </member>
    <member name="FloatSecondsAsync(FloatSecondsDurationProperty,CancellationToken)">
<example>
This sample shows how to call FloatSecondsAsync with required parameters.
<code><![CDATA[
var client = new DurationClient().GetPropertyClient("1.0.0");

var body = new FloatSecondsDurationProperty(new TimeSpan(1, 2, 3));
var result = await client.FloatSecondsAsync(body);
]]></code>
</example>
    </member>
    <member name="FloatSeconds(FloatSecondsDurationProperty,CancellationToken)">
<example>
This sample shows how to call FloatSeconds with required parameters.
<code><![CDATA[
var client = new DurationClient().GetPropertyClient("1.0.0");

var body = new FloatSecondsDurationProperty(new TimeSpan(1, 2, 3));
var result = client.FloatSeconds(body);
]]></code>
</example>
    </member>
    <member name="FloatSecondsAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call FloatSecondsAsync with required request content and parse the result.
<code><![CDATA[
var client = new DurationClient().GetPropertyClient("1.0.0");

var data = new {
    value = new {},
};

Response response = await client.FloatSecondsAsync(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value").ToString());
]]></code>
</example>
    </member>
    <member name="FloatSeconds(RequestContent,RequestContext)">
<example>
This sample shows how to call FloatSeconds with required request content and parse the result.
<code><![CDATA[
var client = new DurationClient().GetPropertyClient("1.0.0");

var data = new {
    value = new {},
};

Response response = client.FloatSeconds(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value").ToString());
]]></code>
</example>
    </member>
  </members>
</doc>