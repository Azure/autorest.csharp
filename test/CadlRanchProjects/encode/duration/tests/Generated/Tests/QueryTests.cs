// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Xml;
using Azure;
using Azure.Identity;
using Encode.Duration;
using NUnit.Framework;

namespace Encode.Duration.Tests
{
    public class QueryTests : EncodeDurationTestBase
    {
        public QueryTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Default_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Query client = CreateDurationClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.DefaultAsync(XmlConvert.ToTimeSpan("PT1H23M45S"));
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Default_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Query client = CreateDurationClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.DefaultAsync(XmlConvert.ToTimeSpan("PT1H23M45S"));
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Iso8601_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Query client = CreateDurationClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.Iso8601Async(XmlConvert.ToTimeSpan("PT1H23M45S"));
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Iso8601_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Query client = CreateDurationClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.Iso8601Async(XmlConvert.ToTimeSpan("PT1H23M45S"));
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Int32Seconds_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Query client = CreateDurationClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.Int32SecondsAsync(TimeSpan.FromSeconds(10));
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Int32Seconds_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Query client = CreateDurationClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.Int32SecondsAsync(TimeSpan.FromSeconds(10));
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task FloatSeconds_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Query client = CreateDurationClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.FloatSecondsAsync(TimeSpan.FromSeconds(10F));
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task FloatSeconds_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Query client = CreateDurationClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.FloatSecondsAsync(TimeSpan.FromSeconds(10F));
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Int32SecondsArray_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Query client = CreateDurationClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.Int32SecondsArrayAsync(new List<TimeSpan>()
{
TimeSpan.FromSeconds(10)
});
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Int32SecondsArray_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Query client = CreateDurationClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.Int32SecondsArrayAsync(new List<TimeSpan>()
{
TimeSpan.FromSeconds(10)
});
        }
    }
}
