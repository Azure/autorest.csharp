// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using System.Xml;
using Azure;
using Azure.Identity;
using Encode.Duration;
using NUnit.Framework;

namespace Encode.Duration.Tests
{
    public partial class HeaderTests : EncodeDurationTestBase
    {
        public HeaderTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Header_Default_ShortVersion()
        {
            Uri endpoint = null;
            Header client = CreateDurationClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.DefaultAsync(XmlConvert.ToTimeSpan("PT1H23M45S"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Header_Default_AllParameters()
        {
            Uri endpoint = null;
            Header client = CreateDurationClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.DefaultAsync(XmlConvert.ToTimeSpan("PT1H23M45S"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Header_Iso8601_ShortVersion()
        {
            Uri endpoint = null;
            Header client = CreateDurationClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.Iso8601Async(XmlConvert.ToTimeSpan("PT1H23M45S"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Header_Iso8601_AllParameters()
        {
            Uri endpoint = null;
            Header client = CreateDurationClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.Iso8601Async(XmlConvert.ToTimeSpan("PT1H23M45S"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Header_Iso8601Array_ShortVersion()
        {
            Uri endpoint = null;
            Header client = CreateDurationClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.Iso8601ArrayAsync(new TimeSpan[] { XmlConvert.ToTimeSpan("PT1H23M45S") });
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Header_Iso8601Array_AllParameters()
        {
            Uri endpoint = null;
            Header client = CreateDurationClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.Iso8601ArrayAsync(new TimeSpan[] { XmlConvert.ToTimeSpan("PT1H23M45S") });
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Header_Int32Seconds_ShortVersion()
        {
            Uri endpoint = null;
            Header client = CreateDurationClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.Int32SecondsAsync(TimeSpan.FromSeconds(10));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Header_Int32Seconds_AllParameters()
        {
            Uri endpoint = null;
            Header client = CreateDurationClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.Int32SecondsAsync(TimeSpan.FromSeconds(10));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Header_FloatSeconds_ShortVersion()
        {
            Uri endpoint = null;
            Header client = CreateDurationClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.FloatSecondsAsync(TimeSpan.FromSeconds(10F));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Header_FloatSeconds_AllParameters()
        {
            Uri endpoint = null;
            Header client = CreateDurationClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.FloatSecondsAsync(TimeSpan.FromSeconds(10F));
        }
    }
}
