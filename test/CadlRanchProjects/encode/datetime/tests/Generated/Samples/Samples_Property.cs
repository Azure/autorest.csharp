// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Encode.Datetime.Models;
using NUnit.Framework;

namespace Encode.Datetime.Samples
{
    internal class Samples_Property
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Default()
        {
            var client = new DatetimeClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = "2022-05-10T14:57:31.2311892-04:00",
            };

            Response response = client.Default(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Default_AllParameters()
        {
            var client = new DatetimeClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = "2022-05-10T14:57:31.2311892-04:00",
            };

            Response response = client.Default(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Default_Async()
        {
            var client = new DatetimeClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = "2022-05-10T14:57:31.2311892-04:00",
            };

            Response response = await client.DefaultAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Default_AllParameters_Async()
        {
            var client = new DatetimeClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = "2022-05-10T14:57:31.2311892-04:00",
            };

            Response response = await client.DefaultAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Default_Convenience_Async()
        {
            var client = new DatetimeClient().GetPropertyClient("1.0.0");

            var body = new DefaultDatetimeProperty(DateTimeOffset.UtcNow);
            var result = await client.DefaultAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Rfc3339()
        {
            var client = new DatetimeClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = "2022-05-10T18:57:31.2311892Z",
            };

            Response response = client.Rfc3339(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Rfc3339_AllParameters()
        {
            var client = new DatetimeClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = "2022-05-10T18:57:31.2311892Z",
            };

            Response response = client.Rfc3339(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Rfc3339_Async()
        {
            var client = new DatetimeClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = "2022-05-10T18:57:31.2311892Z",
            };

            Response response = await client.Rfc3339Async(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Rfc3339_AllParameters_Async()
        {
            var client = new DatetimeClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = "2022-05-10T18:57:31.2311892Z",
            };

            Response response = await client.Rfc3339Async(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Rfc3339_Convenience_Async()
        {
            var client = new DatetimeClient().GetPropertyClient("1.0.0");

            var body = new Rfc3339DatetimeProperty(DateTimeOffset.UtcNow);
            var result = await client.Rfc3339Async(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Rfc7231()
        {
            var client = new DatetimeClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = "Tue, 10 May 2022 18:57:31 GMT",
            };

            Response response = client.Rfc7231(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Rfc7231_AllParameters()
        {
            var client = new DatetimeClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = "Tue, 10 May 2022 18:57:31 GMT",
            };

            Response response = client.Rfc7231(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Rfc7231_Async()
        {
            var client = new DatetimeClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = "Tue, 10 May 2022 18:57:31 GMT",
            };

            Response response = await client.Rfc7231Async(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Rfc7231_AllParameters_Async()
        {
            var client = new DatetimeClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = "Tue, 10 May 2022 18:57:31 GMT",
            };

            Response response = await client.Rfc7231Async(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Rfc7231_Convenience_Async()
        {
            var client = new DatetimeClient().GetPropertyClient("1.0.0");

            var body = new Rfc7231DatetimeProperty(DateTimeOffset.UtcNow);
            var result = await client.Rfc7231Async(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnixTimestamp()
        {
            var client = new DatetimeClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = "1652209051",
            };

            Response response = client.UnixTimestamp(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnixTimestamp_AllParameters()
        {
            var client = new DatetimeClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = "1652209051",
            };

            Response response = client.UnixTimestamp(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnixTimestamp_Async()
        {
            var client = new DatetimeClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = "1652209051",
            };

            Response response = await client.UnixTimestampAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnixTimestamp_AllParameters_Async()
        {
            var client = new DatetimeClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = "1652209051",
            };

            Response response = await client.UnixTimestampAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnixTimestamp_Convenience_Async()
        {
            var client = new DatetimeClient().GetPropertyClient("1.0.0");

            var body = new UnixTimestampDatetimeProperty(DateTimeOffset.UtcNow);
            var result = await client.UnixTimestampAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnixTimestampArray()
        {
            var client = new DatetimeClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = new[] {
        "1652209051"
    },
            };

            Response response = client.UnixTimestampArray(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnixTimestampArray_AllParameters()
        {
            var client = new DatetimeClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = new[] {
        "1652209051"
    },
            };

            Response response = client.UnixTimestampArray(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnixTimestampArray_Async()
        {
            var client = new DatetimeClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = new[] {
        "1652209051"
    },
            };

            Response response = await client.UnixTimestampArrayAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnixTimestampArray_AllParameters_Async()
        {
            var client = new DatetimeClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = new[] {
        "1652209051"
    },
            };

            Response response = await client.UnixTimestampArrayAsync(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnixTimestampArray_Convenience_Async()
        {
            var client = new DatetimeClient().GetPropertyClient("1.0.0");

            var body = new UnixTimestampArrayDatetimeProperty(new DateTimeOffset[]
            {
    DateTimeOffset.UtcNow
            });
            var result = await client.UnixTimestampArrayAsync(body);
        }
    }
}
