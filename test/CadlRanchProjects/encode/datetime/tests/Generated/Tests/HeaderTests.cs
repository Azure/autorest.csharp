// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Identity;
using Encode.Datetime;
using NUnit.Framework;

namespace Encode.Datetime.Tests
{
    public partial class HeaderTests : EncodeDatetimeTestBase
    {
        public HeaderTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Header_Default_ShortVersion()
        {
            Uri endpoint = null;
            Header client = CreateDatetimeClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.DefaultAsync(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Header_Default_AllParameters()
        {
            Uri endpoint = null;
            Header client = CreateDatetimeClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.DefaultAsync(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Header_Rfc3339_ShortVersion()
        {
            Uri endpoint = null;
            Header client = CreateDatetimeClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.Rfc3339Async(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Header_Rfc3339_AllParameters()
        {
            Uri endpoint = null;
            Header client = CreateDatetimeClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.Rfc3339Async(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Header_Rfc7231_ShortVersion()
        {
            Uri endpoint = null;
            Header client = CreateDatetimeClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.Rfc7231Async(DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Header_Rfc7231_AllParameters()
        {
            Uri endpoint = null;
            Header client = CreateDatetimeClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.Rfc7231Async(DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Header_UnixTimestamp_ShortVersion()
        {
            Uri endpoint = null;
            Header client = CreateDatetimeClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.UnixTimestampAsync(DateTimeOffset.FromUnixTimeSeconds(1652209051L));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Header_UnixTimestamp_AllParameters()
        {
            Uri endpoint = null;
            Header client = CreateDatetimeClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.UnixTimestampAsync(DateTimeOffset.FromUnixTimeSeconds(1652209051L));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Header_UnixTimestampArray_ShortVersion()
        {
            Uri endpoint = null;
            Header client = CreateDatetimeClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.UnixTimestampArrayAsync(new DateTimeOffset[] { DateTimeOffset.FromUnixTimeSeconds(1652209051L) });
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Header_UnixTimestampArray_AllParameters()
        {
            Uri endpoint = null;
            Header client = CreateDatetimeClient(endpoint).GetHeaderClient(apiVersion: "1.0.0");

            Response response = await client.UnixTimestampArrayAsync(new DateTimeOffset[] { DateTimeOffset.FromUnixTimeSeconds(1652209051L) });
        }
    }
}
