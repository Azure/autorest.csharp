// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Identity;
using Encode.Datetime;
using NUnit.Framework;

namespace Encode.Datetime.Tests
{
    public class QueryTests : EncodeDatetimeTestBase
    {
        public QueryTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Default_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Query client = CreateDatetimeClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.DefaultAsync(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Default_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Query client = CreateDatetimeClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.DefaultAsync(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Rfc3339_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Query client = CreateDatetimeClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.Rfc3339Async(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Rfc3339_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Query client = CreateDatetimeClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.Rfc3339Async(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Rfc7231_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Query client = CreateDatetimeClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.Rfc7231Async(DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Rfc7231_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Query client = CreateDatetimeClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.Rfc7231Async(DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task UnixTimestamp_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Query client = CreateDatetimeClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.UnixTimestampAsync(DateTimeOffset.FromUnixTimeSeconds(1652209051));
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task UnixTimestamp_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Query client = CreateDatetimeClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.UnixTimestampAsync(DateTimeOffset.FromUnixTimeSeconds(1652209051));
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task UnixTimestampArray_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Query client = CreateDatetimeClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.UnixTimestampArrayAsync(new List<DateTimeOffset>()
{
DateTimeOffset.FromUnixTimeSeconds(1652209051)
});
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task UnixTimestampArray_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            Query client = CreateDatetimeClient(endpoint).GetQueryClient(apiVersion: "1.0.0");

            Response response = await client.UnixTimestampArrayAsync(new List<DateTimeOffset>()
{
DateTimeOffset.FromUnixTimeSeconds(1652209051)
});
        }
    }
}
