// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Encode.Datetime.Models;
using NUnit.Framework;

namespace Encode.Datetime.Tests
{
    public partial class PropertyTests : EncodeDatetimeTestBase
    {
        public PropertyTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_Default_ShortVersion()
        {
            Uri endpoint = null;
            Property client = CreateDatetimeClient(endpoint).GetPropertyClient();

            using RequestContent content = RequestContent.Create(new
            {
                value = "2022-05-10T18:57:31.2311892Z",
            });
            Response response = await client.DefaultAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_Default_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            Property client = CreateDatetimeClient(endpoint).GetPropertyClient();

            DefaultDatetimeProperty body = new DefaultDatetimeProperty(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
            Response<DefaultDatetimeProperty> response = await client.DefaultAsync(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_Default_AllParameters()
        {
            Uri endpoint = null;
            Property client = CreateDatetimeClient(endpoint).GetPropertyClient();

            using RequestContent content = RequestContent.Create(new
            {
                value = "2022-05-10T18:57:31.2311892Z",
            });
            Response response = await client.DefaultAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_Default_AllParameters_Convenience()
        {
            Uri endpoint = null;
            Property client = CreateDatetimeClient(endpoint).GetPropertyClient();

            DefaultDatetimeProperty body = new DefaultDatetimeProperty(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
            Response<DefaultDatetimeProperty> response = await client.DefaultAsync(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_Rfc3339_ShortVersion()
        {
            Uri endpoint = null;
            Property client = CreateDatetimeClient(endpoint).GetPropertyClient();

            using RequestContent content = RequestContent.Create(new
            {
                value = "2022-05-10T18:57:31.2311892Z",
            });
            Response response = await client.Rfc3339Async(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_Rfc3339_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            Property client = CreateDatetimeClient(endpoint).GetPropertyClient();

            Rfc3339DatetimeProperty body = new Rfc3339DatetimeProperty(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
            Response<Rfc3339DatetimeProperty> response = await client.Rfc3339Async(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_Rfc3339_AllParameters()
        {
            Uri endpoint = null;
            Property client = CreateDatetimeClient(endpoint).GetPropertyClient();

            using RequestContent content = RequestContent.Create(new
            {
                value = "2022-05-10T18:57:31.2311892Z",
            });
            Response response = await client.Rfc3339Async(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_Rfc3339_AllParameters_Convenience()
        {
            Uri endpoint = null;
            Property client = CreateDatetimeClient(endpoint).GetPropertyClient();

            Rfc3339DatetimeProperty body = new Rfc3339DatetimeProperty(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
            Response<Rfc3339DatetimeProperty> response = await client.Rfc3339Async(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_Rfc7231_ShortVersion()
        {
            Uri endpoint = null;
            Property client = CreateDatetimeClient(endpoint).GetPropertyClient();

            using RequestContent content = RequestContent.Create(new
            {
                value = "Tue, 10 May 2022 18:57:31 GMT",
            });
            Response response = await client.Rfc7231Async(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_Rfc7231_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            Property client = CreateDatetimeClient(endpoint).GetPropertyClient();

            Rfc7231DatetimeProperty body = new Rfc7231DatetimeProperty(DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
            Response<Rfc7231DatetimeProperty> response = await client.Rfc7231Async(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_Rfc7231_AllParameters()
        {
            Uri endpoint = null;
            Property client = CreateDatetimeClient(endpoint).GetPropertyClient();

            using RequestContent content = RequestContent.Create(new
            {
                value = "Tue, 10 May 2022 18:57:31 GMT",
            });
            Response response = await client.Rfc7231Async(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_Rfc7231_AllParameters_Convenience()
        {
            Uri endpoint = null;
            Property client = CreateDatetimeClient(endpoint).GetPropertyClient();

            Rfc7231DatetimeProperty body = new Rfc7231DatetimeProperty(DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
            Response<Rfc7231DatetimeProperty> response = await client.Rfc7231Async(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_UnixTimestamp_ShortVersion()
        {
            Uri endpoint = null;
            Property client = CreateDatetimeClient(endpoint).GetPropertyClient();

            using RequestContent content = RequestContent.Create(new
            {
                value = 1652209051,
            });
            Response response = await client.UnixTimestampAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_UnixTimestamp_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            Property client = CreateDatetimeClient(endpoint).GetPropertyClient();

            UnixTimestampDatetimeProperty body = new UnixTimestampDatetimeProperty(DateTimeOffset.FromUnixTimeSeconds(1652209051L));
            Response<UnixTimestampDatetimeProperty> response = await client.UnixTimestampAsync(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_UnixTimestamp_AllParameters()
        {
            Uri endpoint = null;
            Property client = CreateDatetimeClient(endpoint).GetPropertyClient();

            using RequestContent content = RequestContent.Create(new
            {
                value = 1652209051,
            });
            Response response = await client.UnixTimestampAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_UnixTimestamp_AllParameters_Convenience()
        {
            Uri endpoint = null;
            Property client = CreateDatetimeClient(endpoint).GetPropertyClient();

            UnixTimestampDatetimeProperty body = new UnixTimestampDatetimeProperty(DateTimeOffset.FromUnixTimeSeconds(1652209051L));
            Response<UnixTimestampDatetimeProperty> response = await client.UnixTimestampAsync(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_UnixTimestampArray_ShortVersion()
        {
            Uri endpoint = null;
            Property client = CreateDatetimeClient(endpoint).GetPropertyClient();

            using RequestContent content = RequestContent.Create(new
            {
                value = new object[]
            {
1652209051
            },
            });
            Response response = await client.UnixTimestampArrayAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_UnixTimestampArray_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            Property client = CreateDatetimeClient(endpoint).GetPropertyClient();

            UnixTimestampArrayDatetimeProperty body = new UnixTimestampArrayDatetimeProperty(new DateTimeOffset[] { DateTimeOffset.FromUnixTimeSeconds(1652209051L) });
            Response<UnixTimestampArrayDatetimeProperty> response = await client.UnixTimestampArrayAsync(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_UnixTimestampArray_AllParameters()
        {
            Uri endpoint = null;
            Property client = CreateDatetimeClient(endpoint).GetPropertyClient();

            using RequestContent content = RequestContent.Create(new
            {
                value = new object[]
            {
1652209051
            },
            });
            Response response = await client.UnixTimestampArrayAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Property_UnixTimestampArray_AllParameters_Convenience()
        {
            Uri endpoint = null;
            Property client = CreateDatetimeClient(endpoint).GetPropertyClient();

            UnixTimestampArrayDatetimeProperty body = new UnixTimestampArrayDatetimeProperty(new DateTimeOffset[] { DateTimeOffset.FromUnixTimeSeconds(1652209051L) });
            Response<UnixTimestampArrayDatetimeProperty> response = await client.UnixTimestampArrayAsync(body);
        }
    }
}
