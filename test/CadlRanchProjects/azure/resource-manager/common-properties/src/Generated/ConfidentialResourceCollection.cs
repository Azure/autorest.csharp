// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace _Azure.ResourceManager.CommonProperties
{
    /// <summary>
    /// A class representing a collection of <see cref="ConfidentialResource"/> and their operations.
    /// Each <see cref="ConfidentialResource"/> in the collection will belong to the same instance of <see cref="ResourceGroupResource"/>.
    /// To get a <see cref="ConfidentialResourceCollection"/> instance call the GetConfidentialResources method from an instance of <see cref="ResourceGroupResource"/>.
    /// </summary>
    public partial class ConfidentialResourceCollection : ArmCollection
    {
        private readonly ClientDiagnostics _confidentialResourceErrorClientDiagnostics;
        private readonly ErrorRestOperations _confidentialResourceErrorRestClient;

        /// <summary> Initializes a new instance of the <see cref="ConfidentialResourceCollection"/> class for mocking. </summary>
        protected ConfidentialResourceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ConfidentialResourceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal ConfidentialResourceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _confidentialResourceErrorClientDiagnostics = new ClientDiagnostics("_Azure.ResourceManager.CommonProperties", ConfidentialResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ConfidentialResource.ResourceType, out string confidentialResourceErrorApiVersion);
            _confidentialResourceErrorRestClient = new ErrorRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, confidentialResourceErrorApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create a ConfidentialResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.CommonProperties/confidentialResources/{confidentialResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfidentialResource_CreateForUserDefinedError</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ConfidentialResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="confidentialResourceName"> The name of the ConfidentialResource. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="confidentialResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="confidentialResourceName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<ConfidentialResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string confidentialResourceName, ConfidentialResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(confidentialResourceName, nameof(confidentialResourceName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _confidentialResourceErrorClientDiagnostics.CreateScope("ConfidentialResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _confidentialResourceErrorRestClient.CreateForUserDefinedErrorAsync(Id.SubscriptionId, Id.ResourceGroupName, confidentialResourceName, data, cancellationToken).ConfigureAwait(false);
                var uri = _confidentialResourceErrorRestClient.CreateCreateForUserDefinedErrorRequestUri(Id.SubscriptionId, Id.ResourceGroupName, confidentialResourceName, data);
                var rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Put, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                var operation = new CommonPropertiesArmOperation<ConfidentialResource>(Response.FromValue(new ConfidentialResource(Client, response), response.GetRawResponse()), rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a ConfidentialResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.CommonProperties/confidentialResources/{confidentialResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfidentialResource_CreateForUserDefinedError</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ConfidentialResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="confidentialResourceName"> The name of the ConfidentialResource. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="confidentialResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="confidentialResourceName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<ConfidentialResource> CreateOrUpdate(WaitUntil waitUntil, string confidentialResourceName, ConfidentialResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(confidentialResourceName, nameof(confidentialResourceName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _confidentialResourceErrorClientDiagnostics.CreateScope("ConfidentialResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _confidentialResourceErrorRestClient.CreateForUserDefinedError(Id.SubscriptionId, Id.ResourceGroupName, confidentialResourceName, data, cancellationToken);
                var uri = _confidentialResourceErrorRestClient.CreateCreateForUserDefinedErrorRequestUri(Id.SubscriptionId, Id.ResourceGroupName, confidentialResourceName, data);
                var rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Put, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                var operation = new CommonPropertiesArmOperation<ConfidentialResource>(Response.FromValue(new ConfidentialResource(Client, response), response.GetRawResponse()), rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a ConfidentialResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.CommonProperties/confidentialResources/{confidentialResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfidentialResource_GetForPredefinedError</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ConfidentialResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="confidentialResourceName"> The name of the ConfidentialResource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="confidentialResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="confidentialResourceName"/> is null. </exception>
        public virtual async Task<Response<ConfidentialResource>> GetAsync(string confidentialResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(confidentialResourceName, nameof(confidentialResourceName));

            using var scope = _confidentialResourceErrorClientDiagnostics.CreateScope("ConfidentialResourceCollection.Get");
            scope.Start();
            try
            {
                var response = await _confidentialResourceErrorRestClient.GetForPredefinedErrorAsync(Id.SubscriptionId, Id.ResourceGroupName, confidentialResourceName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ConfidentialResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a ConfidentialResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.CommonProperties/confidentialResources/{confidentialResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfidentialResource_GetForPredefinedError</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ConfidentialResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="confidentialResourceName"> The name of the ConfidentialResource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="confidentialResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="confidentialResourceName"/> is null. </exception>
        public virtual Response<ConfidentialResource> Get(string confidentialResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(confidentialResourceName, nameof(confidentialResourceName));

            using var scope = _confidentialResourceErrorClientDiagnostics.CreateScope("ConfidentialResourceCollection.Get");
            scope.Start();
            try
            {
                var response = _confidentialResourceErrorRestClient.GetForPredefinedError(Id.SubscriptionId, Id.ResourceGroupName, confidentialResourceName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ConfidentialResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.CommonProperties/confidentialResources/{confidentialResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfidentialResource_GetForPredefinedError</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ConfidentialResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="confidentialResourceName"> The name of the ConfidentialResource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="confidentialResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="confidentialResourceName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string confidentialResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(confidentialResourceName, nameof(confidentialResourceName));

            using var scope = _confidentialResourceErrorClientDiagnostics.CreateScope("ConfidentialResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _confidentialResourceErrorRestClient.GetForPredefinedErrorAsync(Id.SubscriptionId, Id.ResourceGroupName, confidentialResourceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.CommonProperties/confidentialResources/{confidentialResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfidentialResource_GetForPredefinedError</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ConfidentialResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="confidentialResourceName"> The name of the ConfidentialResource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="confidentialResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="confidentialResourceName"/> is null. </exception>
        public virtual Response<bool> Exists(string confidentialResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(confidentialResourceName, nameof(confidentialResourceName));

            using var scope = _confidentialResourceErrorClientDiagnostics.CreateScope("ConfidentialResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = _confidentialResourceErrorRestClient.GetForPredefinedError(Id.SubscriptionId, Id.ResourceGroupName, confidentialResourceName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.CommonProperties/confidentialResources/{confidentialResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfidentialResource_GetForPredefinedError</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ConfidentialResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="confidentialResourceName"> The name of the ConfidentialResource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="confidentialResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="confidentialResourceName"/> is null. </exception>
        public virtual async Task<NullableResponse<ConfidentialResource>> GetIfExistsAsync(string confidentialResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(confidentialResourceName, nameof(confidentialResourceName));

            using var scope = _confidentialResourceErrorClientDiagnostics.CreateScope("ConfidentialResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _confidentialResourceErrorRestClient.GetForPredefinedErrorAsync(Id.SubscriptionId, Id.ResourceGroupName, confidentialResourceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<ConfidentialResource>(response.GetRawResponse());
                return Response.FromValue(new ConfidentialResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.CommonProperties/confidentialResources/{confidentialResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ConfidentialResource_GetForPredefinedError</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ConfidentialResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="confidentialResourceName"> The name of the ConfidentialResource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="confidentialResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="confidentialResourceName"/> is null. </exception>
        public virtual NullableResponse<ConfidentialResource> GetIfExists(string confidentialResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(confidentialResourceName, nameof(confidentialResourceName));

            using var scope = _confidentialResourceErrorClientDiagnostics.CreateScope("ConfidentialResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _confidentialResourceErrorRestClient.GetForPredefinedError(Id.SubscriptionId, Id.ResourceGroupName, confidentialResourceName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<ConfidentialResource>(response.GetRawResponse());
                return Response.FromValue(new ConfidentialResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
