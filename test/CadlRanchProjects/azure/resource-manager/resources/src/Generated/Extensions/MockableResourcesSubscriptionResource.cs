// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.Resources.Mocking
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    public partial class MockableResourcesSubscriptionResource : ArmResource
    {
        private ClientDiagnostics _topLevelTrackedResourceTopLevelClientDiagnostics;
        private TopLevelRestOperations _topLevelTrackedResourceTopLevelRestClient;

        /// <summary> Initializes a new instance of the <see cref="MockableResourcesSubscriptionResource"/> class for mocking. </summary>
        protected MockableResourcesSubscriptionResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableResourcesSubscriptionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableResourcesSubscriptionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics TopLevelTrackedResourceTopLevelClientDiagnostics => _topLevelTrackedResourceTopLevelClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Resources", TopLevelTrackedResource.ResourceType.Namespace, Diagnostics);
        private TopLevelRestOperations TopLevelTrackedResourceTopLevelRestClient => _topLevelTrackedResourceTopLevelRestClient ??= new TopLevelRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(TopLevelTrackedResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// List TopLevelTrackedResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.Resources/topLevelTrackedResources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TopLevelTrackedResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="TopLevelTrackedResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="TopLevelTrackedResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<TopLevelTrackedResource> GetTopLevelTrackedResourcesAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => TopLevelTrackedResourceTopLevelRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => TopLevelTrackedResourceTopLevelRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new TopLevelTrackedResource(Client, TopLevelTrackedResourceData.DeserializeTopLevelTrackedResourceData(e)), TopLevelTrackedResourceTopLevelClientDiagnostics, Pipeline, "MockableResourcesSubscriptionResource.GetTopLevelTrackedResources", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List TopLevelTrackedResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.Resources/topLevelTrackedResources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TopLevelTrackedResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="TopLevelTrackedResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="TopLevelTrackedResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<TopLevelTrackedResource> GetTopLevelTrackedResources(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => TopLevelTrackedResourceTopLevelRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => TopLevelTrackedResourceTopLevelRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new TopLevelTrackedResource(Client, TopLevelTrackedResourceData.DeserializeTopLevelTrackedResourceData(e)), TopLevelTrackedResourceTopLevelClientDiagnostics, Pipeline, "MockableResourcesSubscriptionResource.GetTopLevelTrackedResources", "value", "nextLink", cancellationToken);
        }
    }
}
