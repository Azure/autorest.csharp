// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace _Azure.ResourceManager.Resources
{
    /// <summary>
    /// A class representing a collection of <see cref="LocationResource"/> and their operations.
    /// Each <see cref="LocationResource"/> in the collection will belong to the same instance of <see cref="SubscriptionResource"/>.
    /// To get a <see cref="LocationResourceCollection"/> instance call the GetLocationResources method from an instance of <see cref="SubscriptionResource"/>.
    /// </summary>
    public partial class LocationResourceCollection : ArmCollection, IEnumerable<LocationResource>, IAsyncEnumerable<LocationResource>
    {
        private readonly ClientDiagnostics _locationResourceClientDiagnostics;
        private readonly LocationResourcesRestOperations _locationResourceRestClient;
        private readonly AzureLocation _location;

        /// <summary> Initializes a new instance of the <see cref="LocationResourceCollection"/> class for mocking. </summary>
        protected LocationResourceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="LocationResourceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="location"> The name of the Azure region. </param>
        internal LocationResourceCollection(ArmClient client, ResourceIdentifier id, AzureLocation location) : base(client, id)
        {
            _location = location;
            _locationResourceClientDiagnostics = new ClientDiagnostics("_Azure.ResourceManager.Resources", LocationResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(LocationResource.ResourceType, out string locationResourceApiVersion);
            _locationResourceRestClient = new LocationResourcesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, locationResourceApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SubscriptionResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SubscriptionResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create a LocationResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.Resources/locations/{location}/locationResources/{locationResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LocationResource_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LocationResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="locationResourceName"> The name of the LocationResource. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationResourceName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<LocationResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string locationResourceName, LocationResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationResourceName, nameof(locationResourceName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _locationResourceClientDiagnostics.CreateScope("LocationResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _locationResourceRestClient.CreateOrUpdateAsync(Id.SubscriptionId, new AzureLocation(_location), locationResourceName, data, cancellationToken).ConfigureAwait(false);
                var uri = _locationResourceRestClient.CreateCreateOrUpdateRequestUri(Id.SubscriptionId, new AzureLocation(_location), locationResourceName, data);
                var rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Put, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                var operation = new ResourcesArmOperation<LocationResource>(Response.FromValue(new LocationResource(Client, response), response.GetRawResponse()), rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a LocationResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.Resources/locations/{location}/locationResources/{locationResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LocationResource_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LocationResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="locationResourceName"> The name of the LocationResource. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationResourceName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<LocationResource> CreateOrUpdate(WaitUntil waitUntil, string locationResourceName, LocationResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationResourceName, nameof(locationResourceName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _locationResourceClientDiagnostics.CreateScope("LocationResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _locationResourceRestClient.CreateOrUpdate(Id.SubscriptionId, new AzureLocation(_location), locationResourceName, data, cancellationToken);
                var uri = _locationResourceRestClient.CreateCreateOrUpdateRequestUri(Id.SubscriptionId, new AzureLocation(_location), locationResourceName, data);
                var rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Put, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                var operation = new ResourcesArmOperation<LocationResource>(Response.FromValue(new LocationResource(Client, response), response.GetRawResponse()), rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a LocationResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.Resources/locations/{location}/locationResources/{locationResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LocationResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LocationResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="locationResourceName"> The name of the LocationResource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationResourceName"/> is null. </exception>
        public virtual async Task<Response<LocationResource>> GetAsync(string locationResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationResourceName, nameof(locationResourceName));

            using var scope = _locationResourceClientDiagnostics.CreateScope("LocationResourceCollection.Get");
            scope.Start();
            try
            {
                var response = await _locationResourceRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(_location), locationResourceName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new LocationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a LocationResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.Resources/locations/{location}/locationResources/{locationResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LocationResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LocationResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="locationResourceName"> The name of the LocationResource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationResourceName"/> is null. </exception>
        public virtual Response<LocationResource> Get(string locationResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationResourceName, nameof(locationResourceName));

            using var scope = _locationResourceClientDiagnostics.CreateScope("LocationResourceCollection.Get");
            scope.Start();
            try
            {
                var response = _locationResourceRestClient.Get(Id.SubscriptionId, new AzureLocation(_location), locationResourceName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new LocationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List LocationResource resources by SubscriptionLocationResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.Resources/locations/{location}/locationResources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LocationResource_ListByLocation</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LocationResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="LocationResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<LocationResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _locationResourceRestClient.CreateListByLocationRequest(Id.SubscriptionId, new AzureLocation(_location));
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _locationResourceRestClient.CreateListByLocationNextPageRequest(nextLink, Id.SubscriptionId, new AzureLocation(_location));
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new LocationResource(Client, LocationResourceData.DeserializeLocationResourceData(e)), _locationResourceClientDiagnostics, Pipeline, "LocationResourceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List LocationResource resources by SubscriptionLocationResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.Resources/locations/{location}/locationResources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LocationResource_ListByLocation</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LocationResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="LocationResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<LocationResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _locationResourceRestClient.CreateListByLocationRequest(Id.SubscriptionId, new AzureLocation(_location));
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _locationResourceRestClient.CreateListByLocationNextPageRequest(nextLink, Id.SubscriptionId, new AzureLocation(_location));
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new LocationResource(Client, LocationResourceData.DeserializeLocationResourceData(e)), _locationResourceClientDiagnostics, Pipeline, "LocationResourceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.Resources/locations/{location}/locationResources/{locationResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LocationResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LocationResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="locationResourceName"> The name of the LocationResource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationResourceName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string locationResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationResourceName, nameof(locationResourceName));

            using var scope = _locationResourceClientDiagnostics.CreateScope("LocationResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _locationResourceRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(_location), locationResourceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.Resources/locations/{location}/locationResources/{locationResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LocationResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LocationResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="locationResourceName"> The name of the LocationResource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationResourceName"/> is null. </exception>
        public virtual Response<bool> Exists(string locationResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationResourceName, nameof(locationResourceName));

            using var scope = _locationResourceClientDiagnostics.CreateScope("LocationResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = _locationResourceRestClient.Get(Id.SubscriptionId, new AzureLocation(_location), locationResourceName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.Resources/locations/{location}/locationResources/{locationResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LocationResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LocationResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="locationResourceName"> The name of the LocationResource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationResourceName"/> is null. </exception>
        public virtual async Task<NullableResponse<LocationResource>> GetIfExistsAsync(string locationResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationResourceName, nameof(locationResourceName));

            using var scope = _locationResourceClientDiagnostics.CreateScope("LocationResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _locationResourceRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(_location), locationResourceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<LocationResource>(response.GetRawResponse());
                return Response.FromValue(new LocationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.Resources/locations/{location}/locationResources/{locationResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>LocationResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="LocationResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="locationResourceName"> The name of the LocationResource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locationResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="locationResourceName"/> is null. </exception>
        public virtual NullableResponse<LocationResource> GetIfExists(string locationResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(locationResourceName, nameof(locationResourceName));

            using var scope = _locationResourceClientDiagnostics.CreateScope("LocationResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _locationResourceRestClient.Get(Id.SubscriptionId, new AzureLocation(_location), locationResourceName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<LocationResource>(response.GetRawResponse());
                return Response.FromValue(new LocationResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<LocationResource> IEnumerable<LocationResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<LocationResource> IAsyncEnumerable<LocationResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
