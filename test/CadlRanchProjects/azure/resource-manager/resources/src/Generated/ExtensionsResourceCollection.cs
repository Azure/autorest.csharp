// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace _Azure.ResourceManager.Resources
{
    /// <summary>
    /// A class representing a collection of <see cref="ExtensionsResource"/> and their operations.
    /// Each <see cref="ExtensionsResource"/> in the collection will belong to the same instance of <see cref="ArmResource"/>.
    /// To get an <see cref="ExtensionsResourceCollection"/> instance call the GetExtensionsResources method from an instance of <see cref="ArmResource"/>.
    /// </summary>
    public partial class ExtensionsResourceCollection : ArmCollection, IEnumerable<ExtensionsResource>, IAsyncEnumerable<ExtensionsResource>
    {
        private readonly ClientDiagnostics _extensionsResourceClientDiagnostics;
        private readonly ExtensionsResourcesRestOperations _extensionsResourceRestClient;

        /// <summary> Initializes a new instance of the <see cref="ExtensionsResourceCollection"/> class for mocking. </summary>
        protected ExtensionsResourceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ExtensionsResourceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal ExtensionsResourceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _extensionsResourceClientDiagnostics = new ClientDiagnostics("_Azure.ResourceManager.Resources", ExtensionsResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ExtensionsResource.ResourceType, out string extensionsResourceApiVersion);
            _extensionsResourceRestClient = new ExtensionsResourcesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, extensionsResourceApiVersion);
        }

        /// <summary>
        /// Create a ExtensionsResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Azure.ResourceManager.Resources/extensionsResources/{extensionsResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ExtensionsResource_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ExtensionsResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="extensionsResourceName"> The name of the ExtensionsResource. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="extensionsResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="extensionsResourceName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<ExtensionsResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string extensionsResourceName, ExtensionsResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(extensionsResourceName, nameof(extensionsResourceName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _extensionsResourceClientDiagnostics.CreateScope("ExtensionsResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _extensionsResourceRestClient.CreateOrUpdateAsync(Id, extensionsResourceName, data, cancellationToken).ConfigureAwait(false);
                var operation = new ResourcesArmOperation<ExtensionsResource>(new ExtensionsResourceOperationSource(Client), _extensionsResourceClientDiagnostics, Pipeline, _extensionsResourceRestClient.CreateCreateOrUpdateRequest(Id, extensionsResourceName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a ExtensionsResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Azure.ResourceManager.Resources/extensionsResources/{extensionsResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ExtensionsResource_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ExtensionsResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="extensionsResourceName"> The name of the ExtensionsResource. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="extensionsResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="extensionsResourceName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<ExtensionsResource> CreateOrUpdate(WaitUntil waitUntil, string extensionsResourceName, ExtensionsResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(extensionsResourceName, nameof(extensionsResourceName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _extensionsResourceClientDiagnostics.CreateScope("ExtensionsResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _extensionsResourceRestClient.CreateOrUpdate(Id, extensionsResourceName, data, cancellationToken);
                var operation = new ResourcesArmOperation<ExtensionsResource>(new ExtensionsResourceOperationSource(Client), _extensionsResourceClientDiagnostics, Pipeline, _extensionsResourceRestClient.CreateCreateOrUpdateRequest(Id, extensionsResourceName, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a ExtensionsResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Azure.ResourceManager.Resources/extensionsResources/{extensionsResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ExtensionsResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ExtensionsResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="extensionsResourceName"> The name of the ExtensionsResource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="extensionsResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="extensionsResourceName"/> is null. </exception>
        public virtual async Task<Response<ExtensionsResource>> GetAsync(string extensionsResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(extensionsResourceName, nameof(extensionsResourceName));

            using var scope = _extensionsResourceClientDiagnostics.CreateScope("ExtensionsResourceCollection.Get");
            scope.Start();
            try
            {
                var response = await _extensionsResourceRestClient.GetAsync(Id, extensionsResourceName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ExtensionsResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a ExtensionsResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Azure.ResourceManager.Resources/extensionsResources/{extensionsResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ExtensionsResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ExtensionsResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="extensionsResourceName"> The name of the ExtensionsResource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="extensionsResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="extensionsResourceName"/> is null. </exception>
        public virtual Response<ExtensionsResource> Get(string extensionsResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(extensionsResourceName, nameof(extensionsResourceName));

            using var scope = _extensionsResourceClientDiagnostics.CreateScope("ExtensionsResourceCollection.Get");
            scope.Start();
            try
            {
                var response = _extensionsResourceRestClient.Get(Id, extensionsResourceName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ExtensionsResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List ExtensionsResource resources by parent
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Azure.ResourceManager.Resources/extensionsResources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ExtensionsResource_ListByScope</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ExtensionsResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ExtensionsResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ExtensionsResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _extensionsResourceRestClient.CreateListByScopeRequest(Id);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _extensionsResourceRestClient.CreateListByScopeNextPageRequest(nextLink, Id);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ExtensionsResource(Client, ExtensionsResourceData.DeserializeExtensionsResourceData(e)), _extensionsResourceClientDiagnostics, Pipeline, "ExtensionsResourceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List ExtensionsResource resources by parent
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Azure.ResourceManager.Resources/extensionsResources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ExtensionsResource_ListByScope</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ExtensionsResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ExtensionsResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ExtensionsResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _extensionsResourceRestClient.CreateListByScopeRequest(Id);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _extensionsResourceRestClient.CreateListByScopeNextPageRequest(nextLink, Id);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ExtensionsResource(Client, ExtensionsResourceData.DeserializeExtensionsResourceData(e)), _extensionsResourceClientDiagnostics, Pipeline, "ExtensionsResourceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Azure.ResourceManager.Resources/extensionsResources/{extensionsResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ExtensionsResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ExtensionsResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="extensionsResourceName"> The name of the ExtensionsResource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="extensionsResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="extensionsResourceName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string extensionsResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(extensionsResourceName, nameof(extensionsResourceName));

            using var scope = _extensionsResourceClientDiagnostics.CreateScope("ExtensionsResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _extensionsResourceRestClient.GetAsync(Id, extensionsResourceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Azure.ResourceManager.Resources/extensionsResources/{extensionsResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ExtensionsResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ExtensionsResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="extensionsResourceName"> The name of the ExtensionsResource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="extensionsResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="extensionsResourceName"/> is null. </exception>
        public virtual Response<bool> Exists(string extensionsResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(extensionsResourceName, nameof(extensionsResourceName));

            using var scope = _extensionsResourceClientDiagnostics.CreateScope("ExtensionsResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = _extensionsResourceRestClient.Get(Id, extensionsResourceName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Azure.ResourceManager.Resources/extensionsResources/{extensionsResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ExtensionsResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ExtensionsResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="extensionsResourceName"> The name of the ExtensionsResource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="extensionsResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="extensionsResourceName"/> is null. </exception>
        public virtual async Task<NullableResponse<ExtensionsResource>> GetIfExistsAsync(string extensionsResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(extensionsResourceName, nameof(extensionsResourceName));

            using var scope = _extensionsResourceClientDiagnostics.CreateScope("ExtensionsResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _extensionsResourceRestClient.GetAsync(Id, extensionsResourceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<ExtensionsResource>(response.GetRawResponse());
                return Response.FromValue(new ExtensionsResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Azure.ResourceManager.Resources/extensionsResources/{extensionsResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ExtensionsResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ExtensionsResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="extensionsResourceName"> The name of the ExtensionsResource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="extensionsResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="extensionsResourceName"/> is null. </exception>
        public virtual NullableResponse<ExtensionsResource> GetIfExists(string extensionsResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(extensionsResourceName, nameof(extensionsResourceName));

            using var scope = _extensionsResourceClientDiagnostics.CreateScope("ExtensionsResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _extensionsResourceRestClient.Get(Id, extensionsResourceName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<ExtensionsResource>(response.GetRawResponse());
                return Response.FromValue(new ExtensionsResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ExtensionsResource> IEnumerable<ExtensionsResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ExtensionsResource> IAsyncEnumerable<ExtensionsResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
