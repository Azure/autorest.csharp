// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using _Azure.ResourceManager.Models.Resources.Mocking;

namespace _Azure.ResourceManager.Models.Resources
{
    /// <summary> A class to add extension methods to _Azure.ResourceManager.Models.Resources. </summary>
    public static partial class _AzureResourceManagerModelsResourcesExtensions
    {
        private static Mockable_AzureResourceManagerModelsResourcesArmClient GetMockable_AzureResourceManagerModelsResourcesArmClient(ArmClient client)
        {
            return client.GetCachedClient(client0 => new Mockable_AzureResourceManagerModelsResourcesArmClient(client0));
        }

        private static Mockable_AzureResourceManagerModelsResourcesResourceGroupResource GetMockable_AzureResourceManagerModelsResourcesResourceGroupResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new Mockable_AzureResourceManagerModelsResourcesResourceGroupResource(client, resource.Id));
        }

        private static Mockable_AzureResourceManagerModelsResourcesSubscriptionResource GetMockable_AzureResourceManagerModelsResourcesSubscriptionResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new Mockable_AzureResourceManagerModelsResourcesSubscriptionResource(client, resource.Id));
        }

        /// <summary>
        /// Gets an object representing a <see cref="TopLevelTrackedResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="TopLevelTrackedResource.CreateResourceIdentifier" /> to create a <see cref="TopLevelTrackedResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="Mockable_AzureResourceManagerModelsResourcesArmClient.GetTopLevelTrackedResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="TopLevelTrackedResource"/> object. </returns>
        public static TopLevelTrackedResource GetTopLevelTrackedResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockable_AzureResourceManagerModelsResourcesArmClient(client).GetTopLevelTrackedResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="NestedProxyResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="NestedProxyResource.CreateResourceIdentifier" /> to create a <see cref="NestedProxyResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="Mockable_AzureResourceManagerModelsResourcesArmClient.GetNestedProxyResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="NestedProxyResource"/> object. </returns>
        public static NestedProxyResource GetNestedProxyResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockable_AzureResourceManagerModelsResourcesArmClient(client).GetNestedProxyResource(id);
        }

        /// <summary>
        /// Gets a collection of TopLevelTrackedResources in the ResourceGroupResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="Mockable_AzureResourceManagerModelsResourcesResourceGroupResource.GetTopLevelTrackedResources()"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of TopLevelTrackedResources and their operations over a TopLevelTrackedResource. </returns>
        public static TopLevelTrackedResourceCollection GetTopLevelTrackedResources(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockable_AzureResourceManagerModelsResourcesResourceGroupResource(resourceGroupResource).GetTopLevelTrackedResources();
        }

        /// <summary>
        /// Get a TopLevelTrackedResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.Models.Resources/topLevelTrackedResources/{topLevelTrackedResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TopLevelTrackedResources_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="TopLevelTrackedResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="Mockable_AzureResourceManagerModelsResourcesResourceGroupResource.GetTopLevelTrackedResourceAsync(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="topLevelTrackedResourceName"> arm resource name for path. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="topLevelTrackedResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="topLevelTrackedResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<TopLevelTrackedResource>> GetTopLevelTrackedResourceAsync(this ResourceGroupResource resourceGroupResource, string topLevelTrackedResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockable_AzureResourceManagerModelsResourcesResourceGroupResource(resourceGroupResource).GetTopLevelTrackedResourceAsync(topLevelTrackedResourceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a TopLevelTrackedResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.Models.Resources/topLevelTrackedResources/{topLevelTrackedResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TopLevelTrackedResources_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="TopLevelTrackedResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="Mockable_AzureResourceManagerModelsResourcesResourceGroupResource.GetTopLevelTrackedResource(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="topLevelTrackedResourceName"> arm resource name for path. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="topLevelTrackedResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="topLevelTrackedResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<TopLevelTrackedResource> GetTopLevelTrackedResource(this ResourceGroupResource resourceGroupResource, string topLevelTrackedResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockable_AzureResourceManagerModelsResourcesResourceGroupResource(resourceGroupResource).GetTopLevelTrackedResource(topLevelTrackedResourceName, cancellationToken);
        }

        /// <summary>
        /// List TopLevelTrackedResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.Models.Resources/topLevelTrackedResources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TopLevelTrackedResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="TopLevelTrackedResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="Mockable_AzureResourceManagerModelsResourcesSubscriptionResource.GetTopLevelTrackedResources(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> An async collection of <see cref="TopLevelTrackedResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<TopLevelTrackedResource> GetTopLevelTrackedResourcesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockable_AzureResourceManagerModelsResourcesSubscriptionResource(subscriptionResource).GetTopLevelTrackedResourcesAsync(cancellationToken);
        }

        /// <summary>
        /// List TopLevelTrackedResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.Models.Resources/topLevelTrackedResources</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>TopLevelTrackedResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-12-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="TopLevelTrackedResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="Mockable_AzureResourceManagerModelsResourcesSubscriptionResource.GetTopLevelTrackedResources(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="TopLevelTrackedResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<TopLevelTrackedResource> GetTopLevelTrackedResources(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockable_AzureResourceManagerModelsResourcesSubscriptionResource(subscriptionResource).GetTopLevelTrackedResources(cancellationToken);
        }
    }
}
