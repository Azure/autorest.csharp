// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using _Specs_.Azure.Example.Basic.Models;

namespace _Specs_.Azure.Example.Basic
{
    // Data plane generated client.
    /// <summary> The AzureExample service client. </summary>
    public partial class AzureExampleClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of AzureExampleClient. </summary>
        public AzureExampleClient() : this(new Uri("http://localhost:3000"), new AzureExampleClientOptions())
        {
        }

        /// <summary> Initializes a new instance of AzureExampleClient. </summary>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public AzureExampleClient(Uri endpoint, AzureExampleClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new AzureExampleClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Basic action. </summary>
        /// <param name="queryParam"> The <see cref="string"/> to use. </param>
        /// <param name="headerParam"> The <see cref="string"/> to use. </param>
        /// <param name="body"> The <see cref="ActionRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="queryParam"/>, <paramref name="headerParam"/> or <paramref name="body"/> is null. </exception>
        /// <include file="Docs/AzureExampleClient.xml" path="doc/members/member[@name='BasicActionAsync(string,string,ActionRequest,CancellationToken)']/*" />
        public virtual async Task<Response<ActionResponse>> BasicActionAsync(string queryParam, string headerParam, ActionRequest body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(queryParam, nameof(queryParam));
            Argument.AssertNotNull(headerParam, nameof(headerParam));
            Argument.AssertNotNull(body, nameof(body));

            using RequestContent content = body.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await BasicActionAsync(queryParam, headerParam, content, context).ConfigureAwait(false);
            return Response.FromValue(ActionResponse.FromResponse(response), response);
        }

        /// <summary> Basic action. </summary>
        /// <param name="queryParam"> The <see cref="string"/> to use. </param>
        /// <param name="headerParam"> The <see cref="string"/> to use. </param>
        /// <param name="body"> The <see cref="ActionRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="queryParam"/>, <paramref name="headerParam"/> or <paramref name="body"/> is null. </exception>
        /// <include file="Docs/AzureExampleClient.xml" path="doc/members/member[@name='BasicAction(string,string,ActionRequest,CancellationToken)']/*" />
        public virtual Response<ActionResponse> BasicAction(string queryParam, string headerParam, ActionRequest body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(queryParam, nameof(queryParam));
            Argument.AssertNotNull(headerParam, nameof(headerParam));
            Argument.AssertNotNull(body, nameof(body));

            using RequestContent content = body.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = BasicAction(queryParam, headerParam, content, context);
            return Response.FromValue(ActionResponse.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Basic action.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="BasicActionAsync(string,string,ActionRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="queryParam"> The <see cref="string"/> to use. </param>
        /// <param name="headerParam"> The <see cref="string"/> to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="queryParam"/>, <paramref name="headerParam"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/AzureExampleClient.xml" path="doc/members/member[@name='BasicActionAsync(string,string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> BasicActionAsync(string queryParam, string headerParam, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(queryParam, nameof(queryParam));
            Argument.AssertNotNull(headerParam, nameof(headerParam));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("AzureExampleClient.BasicAction");
            scope.Start();
            try
            {
                using HttpMessage message = CreateBasicActionRequest(queryParam, headerParam, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Basic action.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="BasicAction(string,string,ActionRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="queryParam"> The <see cref="string"/> to use. </param>
        /// <param name="headerParam"> The <see cref="string"/> to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="queryParam"/>, <paramref name="headerParam"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/AzureExampleClient.xml" path="doc/members/member[@name='BasicAction(string,string,RequestContent,RequestContext)']/*" />
        public virtual Response BasicAction(string queryParam, string headerParam, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(queryParam, nameof(queryParam));
            Argument.AssertNotNull(headerParam, nameof(headerParam));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("AzureExampleClient.BasicAction");
            scope.Start();
            try
            {
                using HttpMessage message = CreateBasicActionRequest(queryParam, headerParam, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateBasicActionRequest(string queryParam, string headerParam, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/azure/example/basic/basic", false);
            uri.AppendQuery("query-param", queryParam, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("header-param", headerParam);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
