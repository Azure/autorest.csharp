// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Specs_.Azure.Core.Lro.Standard.Models;

namespace _Specs_.Azure.Core.Lro.Standard.Samples
{
    public class Samples_StandardClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrReplace()
        {
            var client = new StandardClient();

            var data = new
            {
                role = "<role>",
            };

            var operation = client.CreateOrReplace(WaitUntil.Completed, "<name>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrReplace_AllParameters()
        {
            var client = new StandardClient();

            var data = new
            {
                role = "<role>",
            };

            var operation = client.CreateOrReplace(WaitUntil.Completed, "<name>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrReplace_Async()
        {
            var client = new StandardClient();

            var data = new
            {
                role = "<role>",
            };

            var operation = await client.CreateOrReplaceAsync(WaitUntil.Completed, "<name>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrReplace_AllParameters_Async()
        {
            var client = new StandardClient();

            var data = new
            {
                role = "<role>",
            };

            var operation = await client.CreateOrReplaceAsync(WaitUntil.Completed, "<name>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("role").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrReplace_Convenience_Async()
        {
            var client = new StandardClient();

            var resource = new User("<role>");
            var operation = await client.CreateOrReplaceAsync(WaitUntil.Completed, "<name>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete()
        {
            var client = new StandardClient();

            var operation = client.Delete(WaitUntil.Completed, "<name>");

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            var client = new StandardClient();

            var operation = client.Delete(WaitUntil.Completed, "<name>");

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_Async()
        {
            var client = new StandardClient();

            var operation = await client.DeleteAsync(WaitUntil.Completed, "<name>");

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            var client = new StandardClient();

            var operation = await client.DeleteAsync(WaitUntil.Completed, "<name>");

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Export()
        {
            var client = new StandardClient();

            var operation = client.Export(WaitUntil.Completed, "<name>", "<format>", new RequestContext());

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("resourceUri").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Export_AllParameters()
        {
            var client = new StandardClient();

            var operation = client.Export(WaitUntil.Completed, "<name>", "<format>", new RequestContext());

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("resourceUri").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Export_Async()
        {
            var client = new StandardClient();

            var operation = await client.ExportAsync(WaitUntil.Completed, "<name>", "<format>", new RequestContext());

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("resourceUri").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Export_AllParameters_Async()
        {
            var client = new StandardClient();

            var operation = await client.ExportAsync(WaitUntil.Completed, "<name>", "<format>", new RequestContext());

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("resourceUri").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Export_Convenience_Async()
        {
            var client = new StandardClient();

            var operation = await client.ExportAsync(WaitUntil.Completed, "<name>", "<format>");
        }
    }
}
