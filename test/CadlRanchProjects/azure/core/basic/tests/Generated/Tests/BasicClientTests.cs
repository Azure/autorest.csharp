// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Specs_.Azure.Core.Basic;
using _Specs_.Azure.Core.Basic.Models;

namespace _Specs_.Azure.Core.Basic.Tests
{
    public class BasicClientTests : _Specs_AzureCoreBasicTestBase
    {
        public BasicClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task CreateOrUpdate_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.CreateOrUpdateAsync(1234, content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task CreateOrUpdate_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                orders = new List<object>()
{
new
{
userId = 1234,
detail = "<detail>",
}
},
            });
            Response response = await client.CreateOrUpdateAsync(1234, content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task CreateOrReplace_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.CreateOrReplaceAsync(1234, content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task CreateOrReplace_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            User resource = new User("<name>");
            Response<User> response = await client.CreateOrReplaceAsync(1234, resource);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task CreateOrReplace_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                orders = new List<object>()
{
new
{
userId = 1234,
detail = "<detail>",
}
},
            });
            Response response = await client.CreateOrReplaceAsync(1234, content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task CreateOrReplace_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            User resource = new User("<name>")
            {
                Orders =
{
new UserOrder(1234,"<detail>")
},
            };
            Response<User> response = await client.CreateOrReplaceAsync(1234, resource);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetUser_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            Response response = await client.GetUserAsync(1234, null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetUser_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            Response<User> response = await client.GetUserAsync(1234);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetUser_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            Response response = await client.GetUserAsync(1234, null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetUser_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            Response<User> response = await client.GetUserAsync(1234);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Delete_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            Response response = await client.DeleteAsync(1234);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Delete_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            Response response = await client.DeleteAsync(1234);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Export_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            Response response = await client.ExportAsync(1234, "<format>", null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Export_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            Response<User> response = await client.ExportAsync(1234, "<format>");
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Export_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            Response response = await client.ExportAsync(1234, "<format>", null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Export_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            Response<User> response = await client.ExportAsync(1234, "<format>");
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetUsers_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            await foreach (BinaryData item in client.GetUsersAsync(null, null, null, null, null, null, null, null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetUsers_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            await foreach (User item in client.GetUsersAsync())
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetUsers_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            await foreach (BinaryData item in client.GetUsersAsync(1234, 1234, 1234, new List<string>()
{
"<orderby>"
}, "<filter>", new List<string>()
{
"<select>"
}, new List<string>()
{
"<expand>"
}, null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetUsers_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            await foreach (User item in client.GetUsersAsync(maxCount: 1234, skip: 1234, maxpagesize: 1234, orderby: new List<string>()
{
"<orderby>"
}, filter: "<filter>", select: new List<string>()
{
"<select>"
}, expand: new List<string>()
{
"<expand>"
}))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetWithPage_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            await foreach (BinaryData item in client.GetWithPageAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetWithPage_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            await foreach (User item in client.GetWithPageAsync())
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetWithPage_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            await foreach (BinaryData item in client.GetWithPageAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetWithPage_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            await foreach (User item in client.GetWithPageAsync())
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetWithCustomPageModel_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            await foreach (BinaryData item in client.GetWithCustomPageModelAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetWithCustomPageModel_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            await foreach (User item in client.GetWithCustomPageModelAsync())
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetWithCustomPageModel_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            await foreach (BinaryData item in client.GetWithCustomPageModelAsync(null))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetWithCustomPageModel_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BasicClient client = CreateBasicClient(endpoint);

            await foreach (User item in client.GetWithCustomPageModelAsync())
            {
            }
        }
    }
}
