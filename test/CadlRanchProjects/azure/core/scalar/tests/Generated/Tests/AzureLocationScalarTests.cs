// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Specs_.Azure.Core.Scalar.Models;

namespace _Specs_.Azure.Core.Scalar.Tests
{
    public partial class AzureLocationScalarTests : _Specs_AzureCoreScalarTestBase
    {
        public AzureLocationScalarTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AzureLocationScalar_GetAzureLocationScalar_ShortVersion()
        {
            Uri endpoint = null;
            AzureLocationScalar client = CreateScalarClient(endpoint).GetAzureLocationScalarClient();

            Response response = await client.GetAzureLocationScalarAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AzureLocationScalar_GetAzureLocationScalar_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            AzureLocationScalar client = CreateScalarClient(endpoint).GetAzureLocationScalarClient();

            Response<AzureLocation> response = await client.GetAzureLocationScalarAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AzureLocationScalar_GetAzureLocationScalar_AllParameters()
        {
            Uri endpoint = null;
            AzureLocationScalar client = CreateScalarClient(endpoint).GetAzureLocationScalarClient();

            Response response = await client.GetAzureLocationScalarAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AzureLocationScalar_GetAzureLocationScalar_AllParameters_Convenience()
        {
            Uri endpoint = null;
            AzureLocationScalar client = CreateScalarClient(endpoint).GetAzureLocationScalarClient();

            Response<AzureLocation> response = await client.GetAzureLocationScalarAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AzureLocationScalar_Put_ShortVersion()
        {
            Uri endpoint = null;
            AzureLocationScalar client = CreateScalarClient(endpoint).GetAzureLocationScalarClient();

            using RequestContent content = RequestContent.Create("<body>");
            Response response = await client.PutAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AzureLocationScalar_Put_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            AzureLocationScalar client = CreateScalarClient(endpoint).GetAzureLocationScalarClient();

            Response response = await client.PutAsync(new AzureLocation("<body>"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AzureLocationScalar_Put_AllParameters()
        {
            Uri endpoint = null;
            AzureLocationScalar client = CreateScalarClient(endpoint).GetAzureLocationScalarClient();

            using RequestContent content = RequestContent.Create("<body>");
            Response response = await client.PutAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AzureLocationScalar_Put_AllParameters_Convenience()
        {
            Uri endpoint = null;
            AzureLocationScalar client = CreateScalarClient(endpoint).GetAzureLocationScalarClient();

            Response response = await client.PutAsync(new AzureLocation("<body>"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AzureLocationScalar_Post_ShortVersion()
        {
            Uri endpoint = null;
            AzureLocationScalar client = CreateScalarClient(endpoint).GetAzureLocationScalarClient();

            using RequestContent content = RequestContent.Create(new
            {
                location = "<location>",
            });
            Response response = await client.PostAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AzureLocationScalar_Post_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            AzureLocationScalar client = CreateScalarClient(endpoint).GetAzureLocationScalarClient();

            AzureLocationModel body = new AzureLocationModel(new AzureLocation("<location>"));
            Response<AzureLocationModel> response = await client.PostAsync(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AzureLocationScalar_Post_AllParameters()
        {
            Uri endpoint = null;
            AzureLocationScalar client = CreateScalarClient(endpoint).GetAzureLocationScalarClient();

            using RequestContent content = RequestContent.Create(new
            {
                location = "<location>",
            });
            Response response = await client.PostAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AzureLocationScalar_Post_AllParameters_Convenience()
        {
            Uri endpoint = null;
            AzureLocationScalar client = CreateScalarClient(endpoint).GetAzureLocationScalarClient();

            AzureLocationModel body = new AzureLocationModel(new AzureLocation("<location>"));
            Response<AzureLocationModel> response = await client.PostAsync(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AzureLocationScalar_Header_ShortVersion()
        {
            Uri endpoint = null;
            AzureLocationScalar client = CreateScalarClient(endpoint).GetAzureLocationScalarClient();

            Response response = await client.HeaderAsync(new AzureLocation("<region>"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AzureLocationScalar_Header_AllParameters()
        {
            Uri endpoint = null;
            AzureLocationScalar client = CreateScalarClient(endpoint).GetAzureLocationScalarClient();

            Response response = await client.HeaderAsync(new AzureLocation("<region>"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AzureLocationScalar_Query_ShortVersion()
        {
            Uri endpoint = null;
            AzureLocationScalar client = CreateScalarClient(endpoint).GetAzureLocationScalarClient();

            Response response = await client.QueryAsync(new AzureLocation("<region>"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task AzureLocationScalar_Query_AllParameters()
        {
            Uri endpoint = null;
            AzureLocationScalar client = CreateScalarClient(endpoint).GetAzureLocationScalarClient();

            Response response = await client.QueryAsync(new AzureLocation("<region>"));
        }
    }
}
