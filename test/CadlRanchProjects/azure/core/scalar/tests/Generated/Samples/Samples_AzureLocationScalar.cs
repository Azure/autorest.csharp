// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Specs_.Azure.Core.Scalar.Models;

namespace _Specs_.Azure.Core.Scalar.Samples
{
    public partial class Samples_AzureLocationScalar
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AzureLocationScalar_GetAzureLocationScalar_ShortVersion()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            Response response = client.GetAzureLocationScalar(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AzureLocationScalar_GetAzureLocationScalar_ShortVersion_Async()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            Response response = await client.GetAzureLocationScalarAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AzureLocationScalar_GetAzureLocationScalar_ShortVersion_Convenience()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            Response<string> response = client.GetAzureLocationScalar();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AzureLocationScalar_GetAzureLocationScalar_ShortVersion_Convenience_Async()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            Response<string> response = await client.GetAzureLocationScalarAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AzureLocationScalar_GetAzureLocationScalar_AllParameters()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            Response response = client.GetAzureLocationScalar(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AzureLocationScalar_GetAzureLocationScalar_AllParameters_Async()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            Response response = await client.GetAzureLocationScalarAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AzureLocationScalar_GetAzureLocationScalar_AllParameters_Convenience()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            Response<string> response = client.GetAzureLocationScalar();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AzureLocationScalar_GetAzureLocationScalar_AllParameters_Convenience_Async()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            Response<string> response = await client.GetAzureLocationScalarAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AzureLocationScalar_Put_ShortVersion()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            using RequestContent content = RequestContent.Create("<body>");
            Response response = client.Put(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AzureLocationScalar_Put_ShortVersion_Async()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            using RequestContent content = RequestContent.Create("<body>");
            Response response = await client.PutAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AzureLocationScalar_Put_ShortVersion_Convenience()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            Response response = client.Put("<body>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AzureLocationScalar_Put_ShortVersion_Convenience_Async()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            Response response = await client.PutAsync("<body>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AzureLocationScalar_Put_AllParameters()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            using RequestContent content = RequestContent.Create("<body>");
            Response response = client.Put(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AzureLocationScalar_Put_AllParameters_Async()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            using RequestContent content = RequestContent.Create("<body>");
            Response response = await client.PutAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AzureLocationScalar_Put_AllParameters_Convenience()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            Response response = client.Put("<body>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AzureLocationScalar_Put_AllParameters_Convenience_Async()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            Response response = await client.PutAsync("<body>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AzureLocationScalar_Post_ShortVersion()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            using RequestContent content = RequestContent.Create(new
            {
                location = "<location>",
            });
            Response response = client.Post(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AzureLocationScalar_Post_ShortVersion_Async()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            using RequestContent content = RequestContent.Create(new
            {
                location = "<location>",
            });
            Response response = await client.PostAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AzureLocationScalar_Post_ShortVersion_Convenience()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            AzureLocationModel body = new AzureLocationModel("<location>");
            Response<AzureLocationModel> response = client.Post(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AzureLocationScalar_Post_ShortVersion_Convenience_Async()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            AzureLocationModel body = new AzureLocationModel("<location>");
            Response<AzureLocationModel> response = await client.PostAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AzureLocationScalar_Post_AllParameters()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            using RequestContent content = RequestContent.Create(new
            {
                location = "<location>",
            });
            Response response = client.Post(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AzureLocationScalar_Post_AllParameters_Async()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            using RequestContent content = RequestContent.Create(new
            {
                location = "<location>",
            });
            Response response = await client.PostAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("location").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AzureLocationScalar_Post_AllParameters_Convenience()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            AzureLocationModel body = new AzureLocationModel("<location>");
            Response<AzureLocationModel> response = client.Post(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AzureLocationScalar_Post_AllParameters_Convenience_Async()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            AzureLocationModel body = new AzureLocationModel("<location>");
            Response<AzureLocationModel> response = await client.PostAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AzureLocationScalar_Header_ShortVersion()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            Response response = client.Header("<region>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AzureLocationScalar_Header_ShortVersion_Async()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            Response response = await client.HeaderAsync("<region>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AzureLocationScalar_Header_AllParameters()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            Response response = client.Header("<region>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AzureLocationScalar_Header_AllParameters_Async()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            Response response = await client.HeaderAsync("<region>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AzureLocationScalar_Query_ShortVersion()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            Response response = client.Query("<region>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AzureLocationScalar_Query_ShortVersion_Async()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            Response response = await client.QueryAsync("<region>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AzureLocationScalar_Query_AllParameters()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            Response response = client.Query("<region>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AzureLocationScalar_Query_AllParameters_Async()
        {
            AzureLocationScalar client = new ScalarClient().GetAzureLocationScalarClient();

            Response response = await client.QueryAsync("<region>");

            Console.WriteLine(response.Status);
        }
    }
}
