<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="SmokeTestAsync(Int32,String,RequestConditions,RequestContext)">
<example>
This sample shows how to call SmokeTestAsync with required parameters and parse the result.
<code><![CDATA[
var client = new TraitsClient();

Response response = await client.SmokeTestAsync(1234, "<foo>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>User</c>:
<code>{
  id: number, # Required. The user&apos;s id.
  name: string, # Optional. The user&apos;s name.
}
</code>

</remarks>
    </member>
    <member name="SmokeTest(Int32,String,RequestConditions,RequestContext)">
<example>
This sample shows how to call SmokeTest with required parameters and parse the result.
<code><![CDATA[
var client = new TraitsClient();

Response response = client.SmokeTest(1234, "<foo>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>User</c>:
<code>{
  id: number, # Required. The user&apos;s id.
  name: string, # Optional. The user&apos;s name.
}
</code>

</remarks>
    </member>
  </members>
</doc>