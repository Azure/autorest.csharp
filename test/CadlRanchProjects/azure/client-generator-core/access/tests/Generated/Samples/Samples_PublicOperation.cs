// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Specs_.Azure.ClientGenerator.Core.Access.Models;

namespace _Specs_.Azure.ClientGenerator.Core.Access.Samples
{
    internal class Samples_PublicOperation
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDecoratorInPublic()
        {
            var client = new AccessClient().GetPublicOperationClient("1.0.0");

            Response response = client.NoDecoratorInPublic("<name>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDecoratorInPublic_AllParameters()
        {
            var client = new AccessClient().GetPublicOperationClient("1.0.0");

            Response response = client.NoDecoratorInPublic("<name>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDecoratorInPublic_Async()
        {
            var client = new AccessClient().GetPublicOperationClient("1.0.0");

            Response response = await client.NoDecoratorInPublicAsync("<name>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDecoratorInPublic_AllParameters_Async()
        {
            var client = new AccessClient().GetPublicOperationClient("1.0.0");

            Response response = await client.NoDecoratorInPublicAsync("<name>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDecoratorInPublic_Convenience_Async()
        {
            var client = new AccessClient().GetPublicOperationClient("1.0.0");

            var result = await client.NoDecoratorInPublicAsync("<name>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PublicDecoratorInPublic()
        {
            var client = new AccessClient().GetPublicOperationClient("1.0.0");

            Response response = client.PublicDecoratorInPublic("<name>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PublicDecoratorInPublic_AllParameters()
        {
            var client = new AccessClient().GetPublicOperationClient("1.0.0");

            Response response = client.PublicDecoratorInPublic("<name>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PublicDecoratorInPublic_Async()
        {
            var client = new AccessClient().GetPublicOperationClient("1.0.0");

            Response response = await client.PublicDecoratorInPublicAsync("<name>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PublicDecoratorInPublic_AllParameters_Async()
        {
            var client = new AccessClient().GetPublicOperationClient("1.0.0");

            Response response = await client.PublicDecoratorInPublicAsync("<name>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PublicDecoratorInPublic_Convenience_Async()
        {
            var client = new AccessClient().GetPublicOperationClient("1.0.0");

            var result = await client.PublicDecoratorInPublicAsync("<name>");
        }
    }
}
