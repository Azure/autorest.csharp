// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Specs_.Azure.ClientGenerator.Core.Usage.Models;

namespace _Specs_.Azure.ClientGenerator.Core.Usage.Tests
{
    public partial class ModelInOperationTests : _Specs_AzureClientGeneratorCoreUsageTestBase
    {
        public ModelInOperationTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ModelInOperation_InputToInputOutput_ShortVersion()
        {
            Uri endpoint = null;
            ModelInOperation client = CreateUsageClient(endpoint).GetModelInOperationClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.InputToInputOutputAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ModelInOperation_InputToInputOutput_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            ModelInOperation client = CreateUsageClient(endpoint).GetModelInOperationClient();

            InputModel body = new InputModel("<name>");
            Response response = await client.InputToInputOutputAsync(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ModelInOperation_InputToInputOutput_AllParameters()
        {
            Uri endpoint = null;
            ModelInOperation client = CreateUsageClient(endpoint).GetModelInOperationClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.InputToInputOutputAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ModelInOperation_InputToInputOutput_AllParameters_Convenience()
        {
            Uri endpoint = null;
            ModelInOperation client = CreateUsageClient(endpoint).GetModelInOperationClient();

            InputModel body = new InputModel("<name>");
            Response response = await client.InputToInputOutputAsync(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ModelInOperation_OutputToInputOutput_ShortVersion()
        {
            Uri endpoint = null;
            ModelInOperation client = CreateUsageClient(endpoint).GetModelInOperationClient();

            Response response = await client.OutputToInputOutputAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ModelInOperation_OutputToInputOutput_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            ModelInOperation client = CreateUsageClient(endpoint).GetModelInOperationClient();

            Response<OutputModel> response = await client.OutputToInputOutputAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ModelInOperation_OutputToInputOutput_AllParameters()
        {
            Uri endpoint = null;
            ModelInOperation client = CreateUsageClient(endpoint).GetModelInOperationClient();

            Response response = await client.OutputToInputOutputAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ModelInOperation_OutputToInputOutput_AllParameters_Convenience()
        {
            Uri endpoint = null;
            ModelInOperation client = CreateUsageClient(endpoint).GetModelInOperationClient();

            Response<OutputModel> response = await client.OutputToInputOutputAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ModelInOperation_ModelInReadOnlyProperty_ShortVersion()
        {
            Uri endpoint = null;
            ModelInOperation client = CreateUsageClient(endpoint).GetModelInOperationClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.ModelInReadOnlyPropertyAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ModelInOperation_ModelInReadOnlyProperty_ShortVersion_Convenience()
        {
            Uri endpoint = null;
            ModelInOperation client = CreateUsageClient(endpoint).GetModelInOperationClient();

            RoundTripModel body = new RoundTripModel();
            Response<RoundTripModel> response = await client.ModelInReadOnlyPropertyAsync(body);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ModelInOperation_ModelInReadOnlyProperty_AllParameters()
        {
            Uri endpoint = null;
            ModelInOperation client = CreateUsageClient(endpoint).GetModelInOperationClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.ModelInReadOnlyPropertyAsync(content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ModelInOperation_ModelInReadOnlyProperty_AllParameters_Convenience()
        {
            Uri endpoint = null;
            ModelInOperation client = CreateUsageClient(endpoint).GetModelInOperationClient();

            RoundTripModel body = new RoundTripModel();
            Response<RoundTripModel> response = await client.ModelInReadOnlyPropertyAsync(body);
        }
    }
}
