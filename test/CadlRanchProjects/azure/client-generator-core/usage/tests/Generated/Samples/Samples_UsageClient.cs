// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Specs_.Azure.ClientGenerator.Core.Usage.Models;

namespace _Specs_.Azure.ClientGenerator.Core.Usage.Samples
{
    public class Samples_UsageClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTrip()
        {
            var client = new UsageClient();

            var data = new
            {
                name = "<name>",
            };

            Response response = client.InputToRoundTrip(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTrip_AllParameters()
        {
            var client = new UsageClient();

            var data = new
            {
                name = "<name>",
            };

            Response response = client.InputToRoundTrip(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTrip_Async()
        {
            var client = new UsageClient();

            var data = new
            {
                name = "<name>",
            };

            Response response = await client.InputToRoundTripAsync(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTrip_AllParameters_Async()
        {
            var client = new UsageClient();

            var data = new
            {
                name = "<name>",
            };

            Response response = await client.InputToRoundTripAsync(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTrip_Convenience_Async()
        {
            var client = new UsageClient();

            var body = new InputModel("<name>");
            var result = await client.InputToRoundTripAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_OutputToRoundTrip()
        {
            var client = new UsageClient();

            Response response = client.OutputToRoundTrip(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_OutputToRoundTrip_AllParameters()
        {
            var client = new UsageClient();

            Response response = client.OutputToRoundTrip(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_OutputToRoundTrip_Async()
        {
            var client = new UsageClient();

            Response response = await client.OutputToRoundTripAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_OutputToRoundTrip_AllParameters_Async()
        {
            var client = new UsageClient();

            Response response = await client.OutputToRoundTripAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_OutputToRoundTrip_Convenience_Async()
        {
            var client = new UsageClient();

            var result = await client.OutputToRoundTripAsync();
        }
    }
}
