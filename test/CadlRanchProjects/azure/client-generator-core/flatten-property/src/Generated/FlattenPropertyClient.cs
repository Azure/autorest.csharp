// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using _Specs_.Azure.ClientGenerator.Core.FlattenProperty.Models;

namespace _Specs_.Azure.ClientGenerator.Core.FlattenProperty
{
    // Data plane generated client.
    /// <summary> Illustrates the model flatten cases. </summary>
    public partial class FlattenPropertyClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of FlattenPropertyClient. </summary>
        public FlattenPropertyClient() : this(new Uri("http://localhost:3000"), new FlattenPropertyClientOptions())
        {
        }

        /// <summary> Initializes a new instance of FlattenPropertyClient. </summary>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public FlattenPropertyClient(Uri endpoint, FlattenPropertyClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new FlattenPropertyClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <summary> Put flatten model. </summary>
        /// <param name="input"> The <see cref="FlattenModel"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        /// <include file="Docs/FlattenPropertyClient.xml" path="doc/members/member[@name='PutFlattenModelAsync(FlattenModel,CancellationToken)']/*" />
        public virtual async Task<Response<FlattenModel>> PutFlattenModelAsync(FlattenModel input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            using RequestContent content = input.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await PutFlattenModelAsync(content, context).ConfigureAwait(false);
            return Response.FromValue(FlattenModel.FromResponse(response), response);
        }

        /// <summary> Put flatten model. </summary>
        /// <param name="input"> The <see cref="FlattenModel"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        /// <include file="Docs/FlattenPropertyClient.xml" path="doc/members/member[@name='PutFlattenModel(FlattenModel,CancellationToken)']/*" />
        public virtual Response<FlattenModel> PutFlattenModel(FlattenModel input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            using RequestContent content = input.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = PutFlattenModel(content, context);
            return Response.FromValue(FlattenModel.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Put flatten model.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="PutFlattenModelAsync(FlattenModel,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/FlattenPropertyClient.xml" path="doc/members/member[@name='PutFlattenModelAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> PutFlattenModelAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("FlattenPropertyClient.PutFlattenModel");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutFlattenModelRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Put flatten model.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="PutFlattenModel(FlattenModel,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/FlattenPropertyClient.xml" path="doc/members/member[@name='PutFlattenModel(RequestContent,RequestContext)']/*" />
        public virtual Response PutFlattenModel(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("FlattenPropertyClient.PutFlattenModel");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutFlattenModelRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Put nested flatten model. </summary>
        /// <param name="input"> The <see cref="NestedFlattenModel"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        /// <include file="Docs/FlattenPropertyClient.xml" path="doc/members/member[@name='PutNestedFlattenModelAsync(NestedFlattenModel,CancellationToken)']/*" />
        public virtual async Task<Response<NestedFlattenModel>> PutNestedFlattenModelAsync(NestedFlattenModel input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            using RequestContent content = input.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await PutNestedFlattenModelAsync(content, context).ConfigureAwait(false);
            return Response.FromValue(NestedFlattenModel.FromResponse(response), response);
        }

        /// <summary> Put nested flatten model. </summary>
        /// <param name="input"> The <see cref="NestedFlattenModel"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        /// <include file="Docs/FlattenPropertyClient.xml" path="doc/members/member[@name='PutNestedFlattenModel(NestedFlattenModel,CancellationToken)']/*" />
        public virtual Response<NestedFlattenModel> PutNestedFlattenModel(NestedFlattenModel input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            using RequestContent content = input.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = PutNestedFlattenModel(content, context);
            return Response.FromValue(NestedFlattenModel.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Put nested flatten model.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="PutNestedFlattenModelAsync(NestedFlattenModel,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/FlattenPropertyClient.xml" path="doc/members/member[@name='PutNestedFlattenModelAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> PutNestedFlattenModelAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("FlattenPropertyClient.PutNestedFlattenModel");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutNestedFlattenModelRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Put nested flatten model.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="PutNestedFlattenModel(NestedFlattenModel,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/FlattenPropertyClient.xml" path="doc/members/member[@name='PutNestedFlattenModel(RequestContent,RequestContext)']/*" />
        public virtual Response PutNestedFlattenModel(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("FlattenPropertyClient.PutNestedFlattenModel");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePutNestedFlattenModelRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreatePutFlattenModelRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/azure/client-generator-core/flatten-property/flattenModel", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreatePutNestedFlattenModelRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/azure/client-generator-core/flatten-property/nestedFlattenModel", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
