// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core.Extensions;
using Models.Property.Types;

namespace Microsoft.Extensions.Azure
{
    /// <summary> Extension methods to add clients to client builder. </summary>
    public static partial class ModelsPropertyTypesClientBuilderExtensions
    {
        /// <param name="builder"></param>
        /// <param name="endpoint"> TestServer endpoint. </param>
        public static IAzureClientBuilder<TypesClient, TypesClientOptions> AddTypesClient<TBuilder>(TBuilder builder, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilder
        {
            return builder.RegisterClientFactory<TypesClient, TypesClientOptions>((options) => new TypesClient(endpoint, options));
        }

        /// <param name="builder"></param>
        /// <param name="configuration"></param>
        public static IAzureClientBuilder<TypesClient, TypesClientOptions> AddTypesClient<TBuilder, TConfiguration>(TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<TypesClient, TypesClientOptions>(configuration);
        }
        /// <param name="builder"></param>
        /// <param name="configuration"></param>
        public static IAzureClientBuilder<Models.Property.Types.Boolean, TypesClientOptions> AddBoolean<TBuilder, TConfiguration>(TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<Models.Property.Types.Boolean, TypesClientOptions>(configuration);
        }
        /// <param name="builder"></param>
        /// <param name="configuration"></param>
        public static IAzureClientBuilder<Models.Property.Types.String, TypesClientOptions> AddString<TBuilder, TConfiguration>(TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<Models.Property.Types.String, TypesClientOptions>(configuration);
        }
        /// <param name="builder"></param>
        /// <param name="configuration"></param>
        public static IAzureClientBuilder<Bytes, TypesClientOptions> AddBytes<TBuilder, TConfiguration>(TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<Bytes, TypesClientOptions>(configuration);
        }
        /// <param name="builder"></param>
        /// <param name="configuration"></param>
        public static IAzureClientBuilder<Int, TypesClientOptions> AddInt<TBuilder, TConfiguration>(TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<Int, TypesClientOptions>(configuration);
        }
        /// <param name="builder"></param>
        /// <param name="configuration"></param>
        public static IAzureClientBuilder<Float, TypesClientOptions> AddFloat<TBuilder, TConfiguration>(TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<Float, TypesClientOptions>(configuration);
        }
        /// <param name="builder"></param>
        /// <param name="configuration"></param>
        public static IAzureClientBuilder<Datetime, TypesClientOptions> AddDatetime<TBuilder, TConfiguration>(TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<Datetime, TypesClientOptions>(configuration);
        }
        /// <param name="builder"></param>
        /// <param name="configuration"></param>
        public static IAzureClientBuilder<Duration, TypesClientOptions> AddDuration<TBuilder, TConfiguration>(TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<Duration, TypesClientOptions>(configuration);
        }
        /// <param name="builder"></param>
        /// <param name="configuration"></param>
        public static IAzureClientBuilder<Models.Property.Types.Enum, TypesClientOptions> AddEnum<TBuilder, TConfiguration>(TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<Models.Property.Types.Enum, TypesClientOptions>(configuration);
        }
        /// <param name="builder"></param>
        /// <param name="configuration"></param>
        public static IAzureClientBuilder<ExtensibleEnum, TypesClientOptions> AddExtensibleEnum<TBuilder, TConfiguration>(TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<ExtensibleEnum, TypesClientOptions>(configuration);
        }
        /// <param name="builder"></param>
        /// <param name="configuration"></param>
        public static IAzureClientBuilder<Model, TypesClientOptions> AddModel<TBuilder, TConfiguration>(TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<Model, TypesClientOptions>(configuration);
        }
        /// <param name="builder"></param>
        /// <param name="configuration"></param>
        public static IAzureClientBuilder<CollectionsString, TypesClientOptions> AddCollectionsString<TBuilder, TConfiguration>(TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<CollectionsString, TypesClientOptions>(configuration);
        }
        /// <param name="builder"></param>
        /// <param name="configuration"></param>
        public static IAzureClientBuilder<CollectionsInt, TypesClientOptions> AddCollectionsInt<TBuilder, TConfiguration>(TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<CollectionsInt, TypesClientOptions>(configuration);
        }
        /// <param name="builder"></param>
        /// <param name="configuration"></param>
        public static IAzureClientBuilder<CollectionsModel, TypesClientOptions> AddCollectionsModel<TBuilder, TConfiguration>(TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<CollectionsModel, TypesClientOptions>(configuration);
        }
        /// <param name="builder"></param>
        /// <param name="configuration"></param>
        public static IAzureClientBuilder<DictionaryString, TypesClientOptions> AddDictionaryString<TBuilder, TConfiguration>(TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<DictionaryString, TypesClientOptions>(configuration);
        }
        /// <param name="builder"></param>
        /// <param name="configuration"></param>
        public static IAzureClientBuilder<Never, TypesClientOptions> AddNever<TBuilder, TConfiguration>(TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<Never, TypesClientOptions>(configuration);
        }
    }
}
