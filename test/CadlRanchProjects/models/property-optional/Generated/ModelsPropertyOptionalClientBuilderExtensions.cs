// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core.Extensions;
using Models.Property.Optional;

namespace Microsoft.Extensions.Azure
{
    /// <summary> Extension methods to add clients to client builder. </summary>
    public static partial class ModelsPropertyOptionalClientBuilderExtensions
    {
        /// <param name="builder"></param>
        /// <param name="endpoint"> TestServer endpoint. </param>
        public static IAzureClientBuilder<OptionalClient, OptionalClientOptions> AddOptionalClient<TBuilder>(this TBuilder builder, Uri endpoint)
        where TBuilder : IAzureClientFactoryBuilder
        {
            return builder.RegisterClientFactory<OptionalClient, OptionalClientOptions>((options) => new OptionalClient(endpoint, options));
        }

        /// <param name="builder"></param>
        /// <param name="configuration"></param>
        public static IAzureClientBuilder<OptionalClient, OptionalClientOptions> AddOptionalClient<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<OptionalClient, OptionalClientOptions>(configuration);
        }
        /// <param name="builder"></param>
        /// <param name="configuration"></param>
        public static IAzureClientBuilder<Models.Property.Optional.String, OptionalClientOptions> AddString<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<Models.Property.Optional.String, OptionalClientOptions>(configuration);
        }
        /// <param name="builder"></param>
        /// <param name="configuration"></param>
        public static IAzureClientBuilder<Bytes, OptionalClientOptions> AddBytes<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<Bytes, OptionalClientOptions>(configuration);
        }
        /// <param name="builder"></param>
        /// <param name="configuration"></param>
        public static IAzureClientBuilder<Datetime, OptionalClientOptions> AddDatetime<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<Datetime, OptionalClientOptions>(configuration);
        }
        /// <param name="builder"></param>
        /// <param name="configuration"></param>
        public static IAzureClientBuilder<Duration, OptionalClientOptions> AddDuration<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<Duration, OptionalClientOptions>(configuration);
        }
        /// <param name="builder"></param>
        /// <param name="configuration"></param>
        public static IAzureClientBuilder<CollectionsByte, OptionalClientOptions> AddCollectionsByte<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<CollectionsByte, OptionalClientOptions>(configuration);
        }
        /// <param name="builder"></param>
        /// <param name="configuration"></param>
        public static IAzureClientBuilder<CollectionsModel, OptionalClientOptions> AddCollectionsModel<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<CollectionsModel, OptionalClientOptions>(configuration);
        }
        /// <param name="builder"></param>
        /// <param name="configuration"></param>
        public static IAzureClientBuilder<RequiredAndOptional, OptionalClientOptions> AddRequiredAndOptional<TBuilder, TConfiguration>(this TBuilder builder, TConfiguration configuration)
        where TBuilder : IAzureClientFactoryBuilderWithConfiguration<TConfiguration>
        {
            return builder.RegisterClientFactory<RequiredAndOptional, OptionalClientOptions>(configuration);
        }
    }
}
