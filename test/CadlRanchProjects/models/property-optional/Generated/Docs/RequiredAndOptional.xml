<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetAllAsync(RequestContext)">
<example>
This sample shows how to call GetAllAsync and parse the result.
<code><![CDATA[
var client = new OptionalClient().GetRequiredAndOptionalClient(<1.0.0>);

Response response = await client.GetAllAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("optionalProperty").ToString());
Console.WriteLine(result.GetProperty("requiredProperty").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>RequiredAndOptionalProperty</c>:
<code>{
  optionalProperty: string, # Optional. optional string property
  requiredProperty: number, # Required. required int property
}
</code>

</remarks>
    </member>
    <member name="GetAll(RequestContext)">
<example>
This sample shows how to call GetAll and parse the result.
<code><![CDATA[
var client = new OptionalClient().GetRequiredAndOptionalClient(<1.0.0>);

Response response = client.GetAll();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("optionalProperty").ToString());
Console.WriteLine(result.GetProperty("requiredProperty").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>RequiredAndOptionalProperty</c>:
<code>{
  optionalProperty: string, # Optional. optional string property
  requiredProperty: number, # Required. required int property
}
</code>

</remarks>
    </member>
    <member name="GetRequiredOnlyAsync(RequestContext)">
<example>
This sample shows how to call GetRequiredOnlyAsync and parse the result.
<code><![CDATA[
var client = new OptionalClient().GetRequiredAndOptionalClient(<1.0.0>);

Response response = await client.GetRequiredOnlyAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("optionalProperty").ToString());
Console.WriteLine(result.GetProperty("requiredProperty").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>RequiredAndOptionalProperty</c>:
<code>{
  optionalProperty: string, # Optional. optional string property
  requiredProperty: number, # Required. required int property
}
</code>

</remarks>
    </member>
    <member name="GetRequiredOnly(RequestContext)">
<example>
This sample shows how to call GetRequiredOnly and parse the result.
<code><![CDATA[
var client = new OptionalClient().GetRequiredAndOptionalClient(<1.0.0>);

Response response = client.GetRequiredOnly();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("optionalProperty").ToString());
Console.WriteLine(result.GetProperty("requiredProperty").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>RequiredAndOptionalProperty</c>:
<code>{
  optionalProperty: string, # Optional. optional string property
  requiredProperty: number, # Required. required int property
}
</code>

</remarks>
    </member>
    <member name="PutAllAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call PutAllAsync with required request content.
<code><![CDATA[
var client = new OptionalClient().GetRequiredAndOptionalClient(<1.0.0>);

var data = new {
    requiredProperty = 1234,
};

Response response = await client.PutAllAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutAllAsync with all request content.
<code><![CDATA[
var client = new OptionalClient().GetRequiredAndOptionalClient(<1.0.0>);

var data = new {
    optionalProperty = "<optionalProperty>",
    requiredProperty = 1234,
};

Response response = await client.PutAllAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>RequiredAndOptionalProperty</c>:
<code>{
  optionalProperty: string, # Optional. optional string property
  requiredProperty: number, # Required. required int property
}
</code>

</remarks>
    </member>
    <member name="PutAll(RequestContent,RequestContext)">
<example>
This sample shows how to call PutAll with required request content.
<code><![CDATA[
var client = new OptionalClient().GetRequiredAndOptionalClient(<1.0.0>);

var data = new {
    requiredProperty = 1234,
};

Response response = client.PutAll(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutAll with all request content.
<code><![CDATA[
var client = new OptionalClient().GetRequiredAndOptionalClient(<1.0.0>);

var data = new {
    optionalProperty = "<optionalProperty>",
    requiredProperty = 1234,
};

Response response = client.PutAll(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>RequiredAndOptionalProperty</c>:
<code>{
  optionalProperty: string, # Optional. optional string property
  requiredProperty: number, # Required. required int property
}
</code>

</remarks>
    </member>
    <member name="PutRequiredOnlyAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call PutRequiredOnlyAsync with required request content.
<code><![CDATA[
var client = new OptionalClient().GetRequiredAndOptionalClient(<1.0.0>);

var data = new {
    requiredProperty = 1234,
};

Response response = await client.PutRequiredOnlyAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutRequiredOnlyAsync with all request content.
<code><![CDATA[
var client = new OptionalClient().GetRequiredAndOptionalClient(<1.0.0>);

var data = new {
    optionalProperty = "<optionalProperty>",
    requiredProperty = 1234,
};

Response response = await client.PutRequiredOnlyAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>RequiredAndOptionalProperty</c>:
<code>{
  optionalProperty: string, # Optional. optional string property
  requiredProperty: number, # Required. required int property
}
</code>

</remarks>
    </member>
    <member name="PutRequiredOnly(RequestContent,RequestContext)">
<example>
This sample shows how to call PutRequiredOnly with required request content.
<code><![CDATA[
var client = new OptionalClient().GetRequiredAndOptionalClient(<1.0.0>);

var data = new {
    requiredProperty = 1234,
};

Response response = client.PutRequiredOnly(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call PutRequiredOnly with all request content.
<code><![CDATA[
var client = new OptionalClient().GetRequiredAndOptionalClient(<1.0.0>);

var data = new {
    optionalProperty = "<optionalProperty>",
    requiredProperty = 1234,
};

Response response = client.PutRequiredOnly(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>RequiredAndOptionalProperty</c>:
<code>{
  optionalProperty: string, # Optional. optional string property
  requiredProperty: number, # Required. required int property
}
</code>

</remarks>
    </member>
  </members>
</doc>