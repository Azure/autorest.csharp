using System.Collections.Generic;
using AutoRest.CSharp.Common.Input;
using AutoRest.CSharp.Generation.Types;
using AutoRest.CSharp.Output.Models.Types;
using NUnit.Framework;

namespace AutoRest.CSharp.Generation.Writers.Tests
{
    public class EnumWritingTests
    {
        [TestCaseSource(nameof(ExtensibleEnumCases))]
        public void ExtensibleEnums(EnumWrapper enumType, string expectedModelCodes)
        {
            ValidateGeneratedCodes(enumType.EnumType, expectedModelCodes, "");
        }

        private void ValidateGeneratedCodes(EnumType enumType, string modelCodes, string serializationCodes)
        {
            ValidateGeneratedModelCodes(enumType, modelCodes);
            ValidateGeneratedSerializationCodes(enumType, serializationCodes);
        }

        private void ValidateGeneratedModelCodes(EnumType enumType, string expected)
        {
            var codeWriter = new CodeWriter();
            new ModelWriter().WriteModel(codeWriter, enumType);
            var codes = codeWriter.ToString();
            Assert.AreEqual(expected, codes);
        }

        private void ValidateGeneratedSerializationCodes(EnumType enumType, string expected)
        {
            var codeWriter = new CodeWriter();
            new SerializationWriter().WriteSerialization(codeWriter, enumType);
            var codes = codeWriter.ToString();
            Assert.AreEqual(expected, codes);
        }

        // Bypass the internal accessibility restriction
        public class EnumWrapper
        {
            internal EnumType EnumType;

            internal EnumWrapper(EnumType enumType) => this.EnumType = enumType;
        }

        private static readonly object[] ExtensibleEnumCases =
        {

            new object[]
            {
                new EnumWrapper(new EnumType(new InputEnumType("TranslationLanguageValues", null, null, "The supported languages to translate input text into.", InputPrimitiveType.String,
                    new List<InputEnumTypeValue>() {
                        new("English", "English", "Translate to English"),
                        new("Spanish", "Spanish", "Translate to Spanish"),
                        new("Mandarin", "Mandarin", "Translate to Mandarin"),
                        new("Undocumented", "Undocumented", null)
                    }, true),
                    "Cadl.TestServer.EnumPropertiesBasic", "public",
                    new TypeFactory(null), null
                )),
                @"// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Cadl.TestServer.EnumPropertiesBasic
{
/// <summary> The supported languages to translate input text into. </summary>
public readonly partial struct TranslationLanguageValues: global::System.IEquatable<global::Cadl.TestServer.EnumPropertiesBasic.TranslationLanguageValues>
{
private readonly string _value;

/// <summary> Initializes a new instance of <see cref=""TranslationLanguageValues""/>. </summary>
/// <exception cref=""global::System.ArgumentNullException""> <paramref name=""value""/> is null. </exception>
public TranslationLanguageValues(string value)
{
_value = value?? throw new global::System.ArgumentNullException(nameof(value));
}

private const string EnglishValue = ""English"";
private const string SpanishValue = ""Spanish"";
private const string MandarinValue = ""Mandarin"";
private const string UndocumentedValue = ""Undocumented"";

/// <summary> Translate to English. </summary>
public static global::Cadl.TestServer.EnumPropertiesBasic.TranslationLanguageValues English{ get; } = new global::Cadl.TestServer.EnumPropertiesBasic.TranslationLanguageValues(EnglishValue);
/// <summary> Translate to Spanish. </summary>
public static global::Cadl.TestServer.EnumPropertiesBasic.TranslationLanguageValues Spanish{ get; } = new global::Cadl.TestServer.EnumPropertiesBasic.TranslationLanguageValues(SpanishValue);
/// <summary> Translate to Mandarin. </summary>
public static global::Cadl.TestServer.EnumPropertiesBasic.TranslationLanguageValues Mandarin{ get; } = new global::Cadl.TestServer.EnumPropertiesBasic.TranslationLanguageValues(MandarinValue);
/// <summary> Undocumented. </summary>
public static global::Cadl.TestServer.EnumPropertiesBasic.TranslationLanguageValues Undocumented{ get; } = new global::Cadl.TestServer.EnumPropertiesBasic.TranslationLanguageValues(UndocumentedValue);
/// <summary> Determines if two <see cref=""TranslationLanguageValues""/> values are the same. </summary>
public static bool operator ==(global::Cadl.TestServer.EnumPropertiesBasic.TranslationLanguageValues left, global::Cadl.TestServer.EnumPropertiesBasic.TranslationLanguageValues right) => left.Equals(right);
/// <summary> Determines if two <see cref=""TranslationLanguageValues""/> values are not the same. </summary>
public static bool operator !=(global::Cadl.TestServer.EnumPropertiesBasic.TranslationLanguageValues left, global::Cadl.TestServer.EnumPropertiesBasic.TranslationLanguageValues right) => !left.Equals(right);
/// <summary> Converts a string to a <see cref=""TranslationLanguageValues""/>. </summary>
public static implicit operator global::Cadl.TestServer.EnumPropertiesBasic.TranslationLanguageValues(string value) => new global::Cadl.TestServer.EnumPropertiesBasic.TranslationLanguageValues(value);

/// <inheritdoc />
[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
public override bool Equals(object obj) => obj is global::Cadl.TestServer.EnumPropertiesBasic.TranslationLanguageValues other && Equals(other);
/// <inheritdoc />
public bool Equals(global::Cadl.TestServer.EnumPropertiesBasic.TranslationLanguageValues other) => string.Equals(_value, other._value, global::System.StringComparison.InvariantCultureIgnoreCase);

/// <inheritdoc />
[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
public override int GetHashCode() => _value?.GetHashCode() ?? 0;
/// <inheritdoc />
public override string ToString() => _value;
}
}
"
            },
            new object[]
            {
                new EnumWrapper(new EnumType(new InputEnumType("DayOfTheWeek", null, null, "Represents the days of the week using a standard, non-string enum.", InputPrimitiveType.String,
                    new List<InputEnumTypeValue>() {
                        new("Monday", "Monday", null),
                        new("Tuesday", "Tuesday", null),
                        new("Wednesday", "Wednesday", null),
                        new("Thursday", "Thursday", "Wednesday is documented to test this case."),
                        new("Friday", "Friday", null),
                        new("Saturday", "Saturday", null),
                        new("Sunday", "Sunday", null)
                    }, true),
                    "Cadl.TestServer.EnumPropertiesBasic", "public",
                    new TypeFactory(null), null
                )),
                @"// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Cadl.TestServer.EnumPropertiesBasic
{
/// <summary> Represents the days of the week using a standard, non-string enum. </summary>
public readonly partial struct DayOfTheWeek: global::System.IEquatable<global::Cadl.TestServer.EnumPropertiesBasic.DayOfTheWeek>
{
private readonly string _value;

/// <summary> Initializes a new instance of <see cref=""DayOfTheWeek""/>. </summary>
/// <exception cref=""global::System.ArgumentNullException""> <paramref name=""value""/> is null. </exception>
public DayOfTheWeek(string value)
{
_value = value?? throw new global::System.ArgumentNullException(nameof(value));
}

private const string MondayValue = ""Monday"";
private const string TuesdayValue = ""Tuesday"";
private const string WednesdayValue = ""Wednesday"";
private const string ThursdayValue = ""Thursday"";
private const string FridayValue = ""Friday"";
private const string SaturdayValue = ""Saturday"";
private const string SundayValue = ""Sunday"";

/// <summary> Monday. </summary>
public static global::Cadl.TestServer.EnumPropertiesBasic.DayOfTheWeek Monday{ get; } = new global::Cadl.TestServer.EnumPropertiesBasic.DayOfTheWeek(MondayValue);
/// <summary> Tuesday. </summary>
public static global::Cadl.TestServer.EnumPropertiesBasic.DayOfTheWeek Tuesday{ get; } = new global::Cadl.TestServer.EnumPropertiesBasic.DayOfTheWeek(TuesdayValue);
/// <summary> Wednesday. </summary>
public static global::Cadl.TestServer.EnumPropertiesBasic.DayOfTheWeek Wednesday{ get; } = new global::Cadl.TestServer.EnumPropertiesBasic.DayOfTheWeek(WednesdayValue);
/// <summary> Wednesday is documented to test this case. </summary>
public static global::Cadl.TestServer.EnumPropertiesBasic.DayOfTheWeek Thursday{ get; } = new global::Cadl.TestServer.EnumPropertiesBasic.DayOfTheWeek(ThursdayValue);
/// <summary> Friday. </summary>
public static global::Cadl.TestServer.EnumPropertiesBasic.DayOfTheWeek Friday{ get; } = new global::Cadl.TestServer.EnumPropertiesBasic.DayOfTheWeek(FridayValue);
/// <summary> Saturday. </summary>
public static global::Cadl.TestServer.EnumPropertiesBasic.DayOfTheWeek Saturday{ get; } = new global::Cadl.TestServer.EnumPropertiesBasic.DayOfTheWeek(SaturdayValue);
/// <summary> Sunday. </summary>
public static global::Cadl.TestServer.EnumPropertiesBasic.DayOfTheWeek Sunday{ get; } = new global::Cadl.TestServer.EnumPropertiesBasic.DayOfTheWeek(SundayValue);
/// <summary> Determines if two <see cref=""DayOfTheWeek""/> values are the same. </summary>
public static bool operator ==(global::Cadl.TestServer.EnumPropertiesBasic.DayOfTheWeek left, global::Cadl.TestServer.EnumPropertiesBasic.DayOfTheWeek right) => left.Equals(right);
/// <summary> Determines if two <see cref=""DayOfTheWeek""/> values are not the same. </summary>
public static bool operator !=(global::Cadl.TestServer.EnumPropertiesBasic.DayOfTheWeek left, global::Cadl.TestServer.EnumPropertiesBasic.DayOfTheWeek right) => !left.Equals(right);
/// <summary> Converts a string to a <see cref=""DayOfTheWeek""/>. </summary>
public static implicit operator global::Cadl.TestServer.EnumPropertiesBasic.DayOfTheWeek(string value) => new global::Cadl.TestServer.EnumPropertiesBasic.DayOfTheWeek(value);

/// <inheritdoc />
[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
public override bool Equals(object obj) => obj is global::Cadl.TestServer.EnumPropertiesBasic.DayOfTheWeek other && Equals(other);
/// <inheritdoc />
public bool Equals(global::Cadl.TestServer.EnumPropertiesBasic.DayOfTheWeek other) => string.Equals(_value, other._value, global::System.StringComparison.InvariantCultureIgnoreCase);

/// <inheritdoc />
[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
public override int GetHashCode() => _value?.GetHashCode() ?? 0;
/// <inheritdoc />
public override string ToString() => _value;
}
}
"
            }
        };
    }
}
