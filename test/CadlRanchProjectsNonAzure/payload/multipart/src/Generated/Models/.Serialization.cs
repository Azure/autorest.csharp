// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Payload.MultiPart.Models
{
    void System.ClientModel.Primitives.IJsonModel<global::Payload.MultiPart.Models.>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
    {
        var format = options.Format == "W" ? (System.ClientModel.Primitives.IPersistableModel < Models.>this).GetFormatFromOptions(options) : options.Format;
        if (format != "J")
        {
            throw new FormatException($"The model {nameof(Models.)} does not support writing '{format}' format.");
        }

        writer.WriteStartObject();
        if (options.Format != "W" && _serializedAdditionalRawData != null)
        {
            foreach (var item in _serializedAdditionalRawData)
            {
                writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                using (JsonDocument document = JsonDocument.Parse(item.Value))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
        }
        writer.WriteEndObject();
    }

    Models.global::System.ClientModel.Primitives.IJsonModel<Models.>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
{
var format = options.Format == "W" ? (System.ClientModel.Primitives.IPersistableModel < Models.>this).GetFormatFromOptions(options) : options.Format;
if ((format != "J"))
{
throw new FormatException($"The model {nameof(global::Payload.MultiPart.Models.)} does not support reading '{format}' format.");
}

using JsonDocument document = JsonDocument.ParseValue(ref reader);
return Payload.MultiPart.Models..Deserialize(document.RootElement, options);
}

internal static Payload.MultiPart.Models.Deserialize(JsonElement element, System.ClientModel.Primitives.ModelReaderWriterOptions options = (ModelReaderWriterOptions)null)
{
    options ??= Payload.MultiPart.ModelSerializationExtensions.WireOptions;

    if (element.ValueKind == global::System.Text.Json.JsonValueKind.Null)
    {
        return null;
    }
    IDictionary<string, BinaryData> serializedAdditionalRawData = default;
    Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
    foreach (var property in element.EnumerateObject())
    {
        if (options.Format != "W")
        {
            rawDataDictionary.Add(property.Name, global::System.BinaryData.FromString(property.Value.GetRawText()));
        }
    }
    serializedAdditionalRawData = rawDataDictionary;
    return new Payload.MultiPart.Models.(serializedAdditionalRawData);
}

BinaryData System.ClientModel.Primitives.IPersistableModel<global::Payload.MultiPart.Models.>.Write(ModelReaderWriterOptions options)
{
    var format = options.Format == "W" ? (System.ClientModel.Primitives.IPersistableModel < Payload.MultiPart.Models.>this).GetFormatFromOptions(options) : options.Format;

    switch (format)
    {
        case "J":
            return ModelReaderWriter.Write(this, options);
        default:
            throw new FormatException($"The model {nameof(Payload.MultiPart.Models.)} does not support writing '{options.Format}' format.");
    }
}

Payload.MultiPart.Models.global::System.ClientModel.Primitives.IPersistableModel < Payload.MultiPart.Models.>.Create(System.BinaryData data, System.ClientModel.Primitives.ModelReaderWriterOptions options)
{
    var format = options.Format == "W" ? (System.ClientModel.Primitives.IPersistableModel < Payload.MultiPart.Models.>this).GetFormatFromOptions(options) : options.Format;

    switch (format)
    {
        case "J":
            {
                using JsonDocument document = JsonDocument.Parse(data);
                return Payload.MultiPart.Models..Deserialize(document.RootElement, options);
            }
        default:
            throw new FormatException($"The model {nameof(Payload.MultiPart.Models.)} does not support reading '{options.Format}' format.");
    }
}

string System.ClientModel.Primitives.IPersistableModel<global::Payload.MultiPart.Models.>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

/// <summary> Deserializes the model from a raw response. </summary>
/// <param name="response"> The result to deserialize the model from. </param>
internal static Payload.MultiPart.Models.FromResponse(System.ClientModel.Primitives.PipelineResponse response)
{
    using var document = JsonDocument.Parse(response.Content);
    return Payload.MultiPart.Models..Deserialize(document.RootElement);
}

/// <summary> Convert into a <see cref="BinaryContent"/>. </summary>
internal virtual BinaryContent ToBinaryContent()
{
    return BinaryContent.Create < Payload.MultiPart.Models.> (this, Payload.MultiPart.ModelSerializationExtensions.WireOptions);
}
}
}
