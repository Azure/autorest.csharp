// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Threading;

namespace Scm.Payload.ContentNegotiation
{
    // Data plane generated client.
    /// <summary> Test describing optionality of the request body. </summary>
    public partial class ContentNegotiationClient
    {
        private readonly ClientPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual ClientPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ContentNegotiationClient. </summary>
        public ContentNegotiationClient() : this(new Uri("http://localhost:3000"), new ContentNegotiationClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ContentNegotiationClient. </summary>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public ContentNegotiationClient(Uri endpoint, ContentNegotiationClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new ContentNegotiationClientOptions();

            _pipeline = ClientPipeline.Create(options, Array.Empty<PipelinePolicy>(), Array.Empty<PipelinePolicy>(), Array.Empty<PipelinePolicy>());
            _endpoint = endpoint;
        }

        private SameBody _cachedSameBody;
        private DifferentBody _cachedDifferentBody;

        /// <summary> Initializes a new instance of SameBody. </summary>
        public virtual SameBody GetSameBodyClient()
        {
            return Volatile.Read(ref _cachedSameBody) ?? Interlocked.CompareExchange(ref _cachedSameBody, new SameBody(_pipeline, _endpoint), null) ?? _cachedSameBody;
        }

        /// <summary> Initializes a new instance of DifferentBody. </summary>
        public virtual DifferentBody GetDifferentBodyClient()
        {
            return Volatile.Read(ref _cachedDifferentBody) ?? Interlocked.CompareExchange(ref _cachedDifferentBody, new DifferentBody(_pipeline, _endpoint), null) ?? _cachedDifferentBody;
        }
    }
}
