// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Threading;

namespace Scm._Type.Union
{
    // Data plane generated client.
    /// <summary> Describe scenarios for various combinations of unions. </summary>
    public partial class UnionClient
    {
        private readonly ClientPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual ClientPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of UnionClient. </summary>
        public UnionClient() : this(new Uri("http://localhost:3000"), new UnionClientOptions())
        {
        }

        /// <summary> Initializes a new instance of UnionClient. </summary>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public UnionClient(Uri endpoint, UnionClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new UnionClientOptions();

            _pipeline = ClientPipeline.Create(options, Array.Empty<PipelinePolicy>(), Array.Empty<PipelinePolicy>(), Array.Empty<PipelinePolicy>());
            _endpoint = endpoint;
        }

        private StringsOnly _cachedStringsOnly;
        private StringExtensible _cachedStringExtensible;
        private StringExtensibleNamed _cachedStringExtensibleNamed;
        private IntsOnly _cachedIntsOnly;
        private FloatsOnly _cachedFloatsOnly;
        private ModelsOnly _cachedModelsOnly;
        private EnumsOnly _cachedEnumsOnly;
        private StringAndArray _cachedStringAndArray;
        private MixedLiterals _cachedMixedLiterals;
        private MixedTypes _cachedMixedTypes;

        /// <summary> Initializes a new instance of StringsOnly. </summary>
        public virtual StringsOnly GetStringsOnlyClient()
        {
            return Volatile.Read(ref _cachedStringsOnly) ?? Interlocked.CompareExchange(ref _cachedStringsOnly, new StringsOnly(_pipeline, _endpoint), null) ?? _cachedStringsOnly;
        }

        /// <summary> Initializes a new instance of StringExtensible. </summary>
        public virtual StringExtensible GetStringExtensibleClient()
        {
            return Volatile.Read(ref _cachedStringExtensible) ?? Interlocked.CompareExchange(ref _cachedStringExtensible, new StringExtensible(_pipeline, _endpoint), null) ?? _cachedStringExtensible;
        }

        /// <summary> Initializes a new instance of StringExtensibleNamed. </summary>
        public virtual StringExtensibleNamed GetStringExtensibleNamedClient()
        {
            return Volatile.Read(ref _cachedStringExtensibleNamed) ?? Interlocked.CompareExchange(ref _cachedStringExtensibleNamed, new StringExtensibleNamed(_pipeline, _endpoint), null) ?? _cachedStringExtensibleNamed;
        }

        /// <summary> Initializes a new instance of IntsOnly. </summary>
        public virtual IntsOnly GetIntsOnlyClient()
        {
            return Volatile.Read(ref _cachedIntsOnly) ?? Interlocked.CompareExchange(ref _cachedIntsOnly, new IntsOnly(_pipeline, _endpoint), null) ?? _cachedIntsOnly;
        }

        /// <summary> Initializes a new instance of FloatsOnly. </summary>
        public virtual FloatsOnly GetFloatsOnlyClient()
        {
            return Volatile.Read(ref _cachedFloatsOnly) ?? Interlocked.CompareExchange(ref _cachedFloatsOnly, new FloatsOnly(_pipeline, _endpoint), null) ?? _cachedFloatsOnly;
        }

        /// <summary> Initializes a new instance of ModelsOnly. </summary>
        public virtual ModelsOnly GetModelsOnlyClient()
        {
            return Volatile.Read(ref _cachedModelsOnly) ?? Interlocked.CompareExchange(ref _cachedModelsOnly, new ModelsOnly(_pipeline, _endpoint), null) ?? _cachedModelsOnly;
        }

        /// <summary> Initializes a new instance of EnumsOnly. </summary>
        public virtual EnumsOnly GetEnumsOnlyClient()
        {
            return Volatile.Read(ref _cachedEnumsOnly) ?? Interlocked.CompareExchange(ref _cachedEnumsOnly, new EnumsOnly(_pipeline, _endpoint), null) ?? _cachedEnumsOnly;
        }

        /// <summary> Initializes a new instance of StringAndArray. </summary>
        public virtual StringAndArray GetStringAndArrayClient()
        {
            return Volatile.Read(ref _cachedStringAndArray) ?? Interlocked.CompareExchange(ref _cachedStringAndArray, new StringAndArray(_pipeline, _endpoint), null) ?? _cachedStringAndArray;
        }

        /// <summary> Initializes a new instance of MixedLiterals. </summary>
        public virtual MixedLiterals GetMixedLiteralsClient()
        {
            return Volatile.Read(ref _cachedMixedLiterals) ?? Interlocked.CompareExchange(ref _cachedMixedLiterals, new MixedLiterals(_pipeline, _endpoint), null) ?? _cachedMixedLiterals;
        }

        /// <summary> Initializes a new instance of MixedTypes. </summary>
        public virtual MixedTypes GetMixedTypesClient()
        {
            return Volatile.Read(ref _cachedMixedTypes) ?? Interlocked.CompareExchange(ref _cachedMixedTypes, new MixedTypes(_pipeline, _endpoint), null) ?? _cachedMixedTypes;
        }
    }
}
