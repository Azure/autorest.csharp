// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Scm._Type.Property.AdditionalProperties.Models
{
    /// <summary> The WidgetData1Kind1. </summary>
    public readonly partial struct WidgetData1Kind1 : IEquatable<WidgetData1Kind1>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="WidgetData1Kind1"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public WidgetData1Kind1(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string Kind1Value = "kind1";

        /// <summary> kind1. </summary>
        public static WidgetData1Kind1 Kind1 { get; } = new WidgetData1Kind1(Kind1Value);
        /// <summary> Determines if two <see cref="WidgetData1Kind1"/> values are the same. </summary>
        public static bool operator ==(WidgetData1Kind1 left, WidgetData1Kind1 right) => left.Equals(right);
        /// <summary> Determines if two <see cref="WidgetData1Kind1"/> values are not the same. </summary>
        public static bool operator !=(WidgetData1Kind1 left, WidgetData1Kind1 right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="WidgetData1Kind1"/>. </summary>
        public static implicit operator WidgetData1Kind1(string value) => new WidgetData1Kind1(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is WidgetData1Kind1 other && Equals(other);
        /// <inheritdoc />
        public bool Equals(WidgetData1Kind1 other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
