// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Threading;

namespace Scm.Parameters.CollectionFormat
{
    // Data plane generated client.
    /// <summary> The CollectionFormat service client. </summary>
    public partial class CollectionFormatClient
    {
        private readonly ClientPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual ClientPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of CollectionFormatClient. </summary>
        public CollectionFormatClient() : this(new Uri("http://localhost:3000"), new CollectionFormatClientOptions())
        {
        }

        /// <summary> Initializes a new instance of CollectionFormatClient. </summary>
        /// <param name="endpoint"> TestServer endpoint. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public CollectionFormatClient(Uri endpoint, CollectionFormatClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new CollectionFormatClientOptions();

            _pipeline = ClientPipeline.Create(options, Array.Empty<PipelinePolicy>(), Array.Empty<PipelinePolicy>(), Array.Empty<PipelinePolicy>());
            _endpoint = endpoint;
        }

        private Query _cachedQuery;
        private Header _cachedHeader;

        /// <summary> Initializes a new instance of Query. </summary>
        public virtual Query GetQueryClient()
        {
            return Volatile.Read(ref _cachedQuery) ?? Interlocked.CompareExchange(ref _cachedQuery, new Query(_pipeline, _endpoint), null) ?? _cachedQuery;
        }

        /// <summary> Initializes a new instance of Header. </summary>
        public virtual Header GetHeaderClient()
        {
            return Volatile.Read(ref _cachedHeader) ?? Interlocked.CompareExchange(ref _cachedHeader, new Header(_pipeline, _endpoint), null) ?? _cachedHeader;
        }
    }
}
