// <auto-generated/>

#nullable disable

using System;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Net.ClientModel.Core.Pipeline;
using System.Threading;

namespace Authentication.Http.Custom
{
    // Data plane generated sub-client.
    /// <summary> The Http sub-client. </summary>
    public partial class Http
    {
        private const string AuthorizationHeader = "Authorization";
        private readonly KeyCredential _keyCredential;
        private const string AuthorizationApiKeyPrefix = "SharedAccessKey";
        private readonly MessagePipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal TelemetrySource ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual MessagePipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of Http for mocking. </summary>
        protected Http()
        {
        }

        /// <summary> Initializes a new instance of Http. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="keyCredential"> The key credential to copy. </param>
        /// <param name="endpoint"> TestServer endpoint. </param>
        internal Http(TelemetrySource clientDiagnostics, MessagePipeline pipeline, KeyCredential keyCredential, Uri endpoint)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _keyCredential = keyCredential;
            _endpoint = endpoint;
        }

        private HttpCustom _cachedHttpCustom;

        /// <summary> Initializes a new instance of HttpCustom. </summary>
        public virtual HttpCustom GetHttpCustomClient()
        {
            return Volatile.Read(ref _cachedHttpCustom) ?? Interlocked.CompareExchange(ref _cachedHttpCustom, new HttpCustom(ClientDiagnostics, _pipeline, _keyCredential, _endpoint), null) ?? _cachedHttpCustom;
        }
    }
}
