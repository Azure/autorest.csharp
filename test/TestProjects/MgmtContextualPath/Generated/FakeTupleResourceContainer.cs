// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using MgmtContextualPath.Models;

namespace MgmtContextualPath
{
    /// <summary> A class representing collection of FakeTupleResource and their operations over a RGFake. </summary>
    public partial class FakeTupleResourceContainer : ArmContainer
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly FakeTupleResourcesRestOperations _restClient;

        /// <summary> Initializes a new instance of the <see cref="FakeTupleResourceContainer"/> class for mocking. </summary>
        protected FakeTupleResourceContainer()
        {
        }

        /// <summary> Initializes a new instance of FakeTupleResourceContainer class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal FakeTupleResourceContainer(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _restClient = new FakeTupleResourcesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => RGFake.ResourceType;

        // Container level operations.

        /// <summary> Create or update an fake. </summary>
        /// <param name="version"> The version. </param>
        /// <param name="tupleName"> The name of the tuple resource. </param>
        /// <param name="parameters"> Parameters supplied to the Create Availability Set operation. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/>, <paramref name="tupleName"/>, or <paramref name="parameters"/> is null. </exception>
        public virtual FakeTupleResourceCreateOrUpdateOperation CreateOrUpdate(string version, string tupleName, FakeTupleResourceData parameters, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (tupleName == null)
            {
                throw new ArgumentNullException(nameof(tupleName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("FakeTupleResourceContainer.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _restClient.CreateOrUpdate(Id.ResourceGroupName, Id.Name, version, tupleName, parameters, cancellationToken);
                var operation = new FakeTupleResourceCreateOrUpdateOperation(Parent, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update an fake. </summary>
        /// <param name="version"> The version. </param>
        /// <param name="tupleName"> The name of the tuple resource. </param>
        /// <param name="parameters"> Parameters supplied to the Create Availability Set operation. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/>, <paramref name="tupleName"/>, or <paramref name="parameters"/> is null. </exception>
        public async virtual Task<FakeTupleResourceCreateOrUpdateOperation> CreateOrUpdateAsync(string version, string tupleName, FakeTupleResourceData parameters, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (tupleName == null)
            {
                throw new ArgumentNullException(nameof(tupleName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("FakeTupleResourceContainer.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _restClient.CreateOrUpdateAsync(Id.ResourceGroupName, Id.Name, version, tupleName, parameters, cancellationToken).ConfigureAwait(false);
                var operation = new FakeTupleResourceCreateOrUpdateOperation(Parent, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets details for this resource from the service. </summary>
        /// <param name="version"> The version. </param>
        /// <param name="tupleName"> The name of the child resource. </param>
        /// <param name="expand"> May be used to expand the participants. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public virtual Response<FakeTupleResource> Get(string version, string tupleName, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FakeTupleResourceContainer.Get");
            scope.Start();
            try
            {
                if (version == null)
                {
                    throw new ArgumentNullException(nameof(version));
                }
                if (tupleName == null)
                {
                    throw new ArgumentNullException(nameof(tupleName));
                }

                var response = _restClient.Get(Id.ResourceGroupName, Id.Name, version, tupleName, expand, cancellationToken: cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new FakeTupleResource(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets details for this resource from the service. </summary>
        /// <param name="version"> The version. </param>
        /// <param name="tupleName"> The name of the child resource. </param>
        /// <param name="expand"> May be used to expand the participants. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async virtual Task<Response<FakeTupleResource>> GetAsync(string version, string tupleName, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FakeTupleResourceContainer.Get");
            scope.Start();
            try
            {
                if (version == null)
                {
                    throw new ArgumentNullException(nameof(version));
                }
                if (tupleName == null)
                {
                    throw new ArgumentNullException(nameof(tupleName));
                }

                var response = await _restClient.GetAsync(Id.ResourceGroupName, Id.Name, version, tupleName, expand, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new FakeTupleResource(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="version"> The version. </param>
        /// <param name="tupleName"> The name of the child resource. </param>
        /// <param name="expand"> May be used to expand the participants. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public virtual Response<FakeTupleResource> GetIfExists(string version, string tupleName, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FakeTupleResourceContainer.GetIfExists");
            scope.Start();
            try
            {
                if (version == null)
                {
                    throw new ArgumentNullException(nameof(version));
                }
                if (tupleName == null)
                {
                    throw new ArgumentNullException(nameof(tupleName));
                }

                var response = _restClient.Get(Id.ResourceGroupName, Id.Name, version, tupleName, expand, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<FakeTupleResource>(null, response.GetRawResponse())
                    : Response.FromValue(new FakeTupleResource(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="version"> The version. </param>
        /// <param name="tupleName"> The name of the child resource. </param>
        /// <param name="expand"> May be used to expand the participants. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async virtual Task<Response<FakeTupleResource>> GetIfExistsAsync(string version, string tupleName, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FakeTupleResourceContainer.GetIfExists");
            scope.Start();
            try
            {
                if (version == null)
                {
                    throw new ArgumentNullException(nameof(version));
                }
                if (tupleName == null)
                {
                    throw new ArgumentNullException(nameof(tupleName));
                }

                var response = await _restClient.GetAsync(Id.ResourceGroupName, Id.Name, version, tupleName, expand, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<FakeTupleResource>(null, response.GetRawResponse())
                    : Response.FromValue(new FakeTupleResource(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="version"> The version. </param>
        /// <param name="tupleName"> The name of the child resource. </param>
        /// <param name="expand"> May be used to expand the participants. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public virtual Response<bool> CheckIfExists(string version, string tupleName, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FakeTupleResourceContainer.CheckIfExists");
            scope.Start();
            try
            {
                if (version == null)
                {
                    throw new ArgumentNullException(nameof(version));
                }
                if (tupleName == null)
                {
                    throw new ArgumentNullException(nameof(tupleName));
                }

                var response = GetIfExists(version, tupleName, expand, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="version"> The version. </param>
        /// <param name="tupleName"> The name of the child resource. </param>
        /// <param name="expand"> May be used to expand the participants. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(string version, string tupleName, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FakeTupleResourceContainer.CheckIfExists");
            scope.Start();
            try
            {
                if (version == null)
                {
                    throw new ArgumentNullException(nameof(version));
                }
                if (tupleName == null)
                {
                    throw new ArgumentNullException(nameof(tupleName));
                }

                var response = await GetIfExistsAsync(version, tupleName, expand, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // Builders.
        // public ArmBuilder<ResourceIdentifier, FakeTupleResource, FakeTupleResourceData> Construct() { }
    }
}
