// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using LroBasicTypeSpec;
using LroBasicTypeSpec.Models;
using NUnit.Framework;

namespace LroBasicTypeSpec.Tests
{
    public partial class LroBasicTypeSpecClientTests : LroBasicTypeSpecTestBase
    {
        public LroBasicTypeSpecClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Only validating compilation of test scaffoldings")]
        public async Task CreateProject_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LroBasicTypeSpecClient client = CreateLroBasicTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new object());
            Operation operation = await client.CreateProjectAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of test scaffoldings")]
        public async Task CreateProject_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LroBasicTypeSpecClient client = CreateLroBasicTypeSpecClient(endpoint);

            Project resource = new Project();
            Operation operation = await client.CreateProjectAsync(WaitUntil.Completed, resource);
        }

        [Test]
        [Ignore("Only validating compilation of test scaffoldings")]
        public async Task CreateProject_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LroBasicTypeSpecClient client = CreateLroBasicTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                description = "<description>",
                name = "<name>",
            });
            Operation operation = await client.CreateProjectAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Only validating compilation of test scaffoldings")]
        public async Task CreateProject_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LroBasicTypeSpecClient client = CreateLroBasicTypeSpecClient(endpoint);

            Project resource = new Project
            {
                Description = "<description>",
                Name = "<name>",
            };
            Operation operation = await client.CreateProjectAsync(WaitUntil.Completed, resource);
        }

        [Test]
        [Ignore("Only validating compilation of test scaffoldings")]
        public async Task UpdateProject_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LroBasicTypeSpecClient client = CreateLroBasicTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = await client.UpdateProjectAsync(WaitUntil.Completed, "<id>", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of test scaffoldings")]
        public async Task UpdateProject_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LroBasicTypeSpecClient client = CreateLroBasicTypeSpecClient(endpoint);

            Project resource = new Project();
            Operation<Project> operation = await client.UpdateProjectAsync(WaitUntil.Completed, "<id>", resource);
            Project responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of test scaffoldings")]
        public async Task UpdateProject_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LroBasicTypeSpecClient client = CreateLroBasicTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                description = "<description>",
                name = "<name>",
            });
            Operation<BinaryData> operation = await client.UpdateProjectAsync(WaitUntil.Completed, "<id>", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of test scaffoldings")]
        public async Task UpdateProject_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LroBasicTypeSpecClient client = CreateLroBasicTypeSpecClient(endpoint);

            Project resource = new Project
            {
                Description = "<description>",
                Name = "<name>",
            };
            Operation<Project> operation = await client.UpdateProjectAsync(WaitUntil.Completed, "<id>", resource);
            Project responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of test scaffoldings")]
        public async Task CreateThing_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LroBasicTypeSpecClient client = CreateLroBasicTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Operation<BinaryData> operation = await client.CreateThingAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of test scaffoldings")]
        public async Task CreateThing_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LroBasicTypeSpecClient client = CreateLroBasicTypeSpecClient(endpoint);

            Thing thing = new Thing("<name>");
            Operation<Thing> operation = await client.CreateThingAsync(WaitUntil.Completed, thing);
            Thing responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of test scaffoldings")]
        public async Task CreateThing_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LroBasicTypeSpecClient client = CreateLroBasicTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Operation<BinaryData> operation = await client.CreateThingAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of test scaffoldings")]
        public async Task CreateThing_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            LroBasicTypeSpecClient client = CreateLroBasicTypeSpecClient(endpoint);

            Thing thing = new Thing("<name>");
            Operation<Thing> operation = await client.CreateThingAsync(WaitUntil.Completed, thing);
            Thing responseData = operation.Value;
        }
    }
}
