// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace ModelsInCadl.Models
{
    /// <summary> Model used both as input and output. </summary>
    public partial class RoundTripModel : BaseModel
    {
        /// <summary> Initializes a new instance of RoundTripModel. </summary>
        /// <param name="requiredString"> Required string, illustrating a reference type property. </param>
        /// <param name="requiredInt"> Required int, illustrating a value type property. </param>
        /// <param name="requiredModel"> Required model with discriminator. </param>
        /// <param name="requiredFixedStringEnum"> Required fixed string enum. </param>
        /// <param name="requiredFixedIntEnum"> Required fixed int enum. </param>
        /// <param name="requiredExtensibleEnum"> Required extensible enum. </param>
        /// <param name="requiredCollection"> Required collection. </param>
        /// <param name="requiredIntRecord"> Required int record. </param>
        /// <param name="requiredStringRecord"> Required string record. </param>
        /// <param name="requiredModelRecord"> Required Model Record. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredString"/>, <paramref name="requiredModel"/>, <paramref name="requiredCollection"/>, <paramref name="requiredIntRecord"/>, <paramref name="requiredStringRecord"/> or <paramref name="requiredModelRecord"/> is null. </exception>
        public RoundTripModel(string requiredString, int requiredInt, BaseModelWithDiscriminator requiredModel, FixedStringEnum requiredFixedStringEnum, FixedIntEnum requiredFixedIntEnum, ExtensibleEnum requiredExtensibleEnum, IEnumerable<CollectionItem> requiredCollection, IDictionary<string, int> requiredIntRecord, IDictionary<string, string> requiredStringRecord, IDictionary<string, RecordItem> requiredModelRecord)
        {
            Argument.AssertNotNull(requiredString, nameof(requiredString));
            Argument.AssertNotNull(requiredModel, nameof(requiredModel));
            Argument.AssertNotNull(requiredCollection, nameof(requiredCollection));
            Argument.AssertNotNull(requiredIntRecord, nameof(requiredIntRecord));
            Argument.AssertNotNull(requiredStringRecord, nameof(requiredStringRecord));
            Argument.AssertNotNull(requiredModelRecord, nameof(requiredModelRecord));

            RequiredString = requiredString;
            RequiredInt = requiredInt;
            RequiredModel = requiredModel;
            RequiredFixedStringEnum = requiredFixedStringEnum;
            RequiredFixedIntEnum = requiredFixedIntEnum;
            RequiredExtensibleEnum = requiredExtensibleEnum;
            RequiredCollection = requiredCollection.ToList();
            RequiredIntRecord = requiredIntRecord;
            RequiredStringRecord = requiredStringRecord;
            RequiredModelRecord = requiredModelRecord;
        }

        /// <summary> Initializes a new instance of RoundTripModel. </summary>
        /// <param name="requiredString"> Required string, illustrating a reference type property. </param>
        /// <param name="requiredInt"> Required int, illustrating a value type property. </param>
        /// <param name="requiredModel"> Required model with discriminator. </param>
        /// <param name="requiredFixedStringEnum"> Required fixed string enum. </param>
        /// <param name="requiredFixedIntEnum"> Required fixed int enum. </param>
        /// <param name="requiredExtensibleEnum"> Required extensible enum. </param>
        /// <param name="requiredCollection"> Required collection. </param>
        /// <param name="requiredIntRecord"> Required int record. </param>
        /// <param name="requiredStringRecord"> Required string record. </param>
        /// <param name="requiredModelRecord"> Required Model Record. </param>
        internal RoundTripModel(string requiredString, int requiredInt, BaseModelWithDiscriminator requiredModel, FixedStringEnum requiredFixedStringEnum, FixedIntEnum requiredFixedIntEnum, ExtensibleEnum requiredExtensibleEnum, IList<CollectionItem> requiredCollection, IDictionary<string, int> requiredIntRecord, IDictionary<string, string> requiredStringRecord, IDictionary<string, RecordItem> requiredModelRecord)
        {
            RequiredString = requiredString;
            RequiredInt = requiredInt;
            RequiredModel = requiredModel;
            RequiredFixedStringEnum = requiredFixedStringEnum;
            RequiredFixedIntEnum = requiredFixedIntEnum;
            RequiredExtensibleEnum = requiredExtensibleEnum;
            RequiredCollection = requiredCollection;
            RequiredIntRecord = requiredIntRecord;
            RequiredStringRecord = requiredStringRecord;
            RequiredModelRecord = requiredModelRecord;
        }

        /// <summary> Required string, illustrating a reference type property. </summary>
        public string RequiredString { get; set; }
        /// <summary> Required int, illustrating a value type property. </summary>
        public int RequiredInt { get; set; }
        /// <summary>
        /// Required model with discriminator
        /// Please note <see cref="BaseModelWithDiscriminator"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DerivedModelWithDiscriminatorA"/> and <see cref="DerivedModelWithDiscriminatorB"/>.
        /// </summary>
        public BaseModelWithDiscriminator RequiredModel { get; set; }
        /// <summary> Required fixed string enum. </summary>
        public FixedStringEnum RequiredFixedStringEnum { get; set; }
        /// <summary> Required fixed int enum. </summary>
        public FixedIntEnum RequiredFixedIntEnum { get; set; }
        /// <summary> Required extensible enum. </summary>
        public ExtensibleEnum RequiredExtensibleEnum { get; set; }
        /// <summary> Required collection. </summary>
        public IList<CollectionItem> RequiredCollection { get; }
        /// <summary> Required int record. </summary>
        public IDictionary<string, int> RequiredIntRecord { get; }
        /// <summary> Required string record. </summary>
        public IDictionary<string, string> RequiredStringRecord { get; }
        /// <summary> Required Model Record. </summary>
        public IDictionary<string, RecordItem> RequiredModelRecord { get; }
    }
}
