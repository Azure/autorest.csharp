// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace ModelsInCadl.Models
{
    public partial class RoundTripReadOnlyModel
    {
        internal static RoundTripReadOnlyModel DeserializeRoundTripReadOnlyModel(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string requiredReadonlyString = default;
            int requiredReadonlyInt = default;
            Optional<string> optionalReadonlyString = default;
            Optional<int> optionalReadonlyInt = default;
            DerivedModel requiredReadonlyModel = default;
            Optional<DerivedModel> optionalReadonlyModel = default;
            FixedStringEnum requiredReadonlyFixedStringEnum = default;
            ExtensibleEnum requiredReadonlyExtensibleEnum = default;
            FixedStringEnum optionalReadonlyFixedStringEnum = default;
            ExtensibleEnum optionalReadonlyExtensibleEnum = default;
            IReadOnlyList<string> requiredReadonlyStringList = default;
            IReadOnlyList<int> requiredReadonlyIntList = default;
            IReadOnlyList<CollectionItem> requiredReadOnlyModelCollection = default;
            IReadOnlyDictionary<string, int> requiredReadOnlyIntRecord = default;
            IReadOnlyDictionary<string, string> requiredStringRecord = default;
            IReadOnlyDictionary<string, RecordItem> requiredReadOnlyModelRecord = default;
            Optional<IReadOnlyList<string>> optionalReadonlyStringList = default;
            Optional<IReadOnlyList<int>> optionalReadonlyIntList = default;
            Optional<IReadOnlyList<CollectionItem>> optionalReadOnlyModelCollection = default;
            IReadOnlyDictionary<string, int> optionalReadOnlyIntRecord = default;
            IReadOnlyDictionary<string, string> optionalReadOnlyStringRecord = default;
            Optional<IReadOnlyDictionary<string, RecordItem>> optionalModelRecord = default;
            IReadOnlyList<int?> requiredCollectionWithNullableIntElement = default;
            Optional<IReadOnlyList<bool?>> optionalCollectionWithNullableBooleanElement = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("requiredReadonlyString"u8))
                {
                    requiredReadonlyString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("requiredReadonlyInt"u8))
                {
                    requiredReadonlyInt = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("optionalReadonlyString"u8))
                {
                    optionalReadonlyString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("optionalReadonlyInt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    optionalReadonlyInt = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("requiredReadonlyModel"u8))
                {
                    requiredReadonlyModel = DerivedModel.DeserializeDerivedModel(property.Value);
                    continue;
                }
                if (property.NameEquals("optionalReadonlyModel"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    optionalReadonlyModel = DerivedModel.DeserializeDerivedModel(property.Value);
                    continue;
                }
                if (property.NameEquals("requiredReadonlyFixedStringEnum"u8))
                {
                    requiredReadonlyFixedStringEnum = property.Value.GetString().ToFixedStringEnum();
                    continue;
                }
                if (property.NameEquals("requiredReadonlyExtensibleEnum"u8))
                {
                    requiredReadonlyExtensibleEnum = new ExtensibleEnum(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("optionalReadonlyFixedStringEnum"u8))
                {
                    optionalReadonlyFixedStringEnum = property.Value.GetString().ToFixedStringEnum();
                    continue;
                }
                if (property.NameEquals("optionalReadonlyExtensibleEnum"u8))
                {
                    optionalReadonlyExtensibleEnum = new ExtensibleEnum(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("requiredReadonlyStringList"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    requiredReadonlyStringList = array;
                    continue;
                }
                if (property.NameEquals("requiredReadonlyIntList"u8))
                {
                    List<int> array = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    requiredReadonlyIntList = array;
                    continue;
                }
                if (property.NameEquals("requiredReadOnlyModelCollection"u8))
                {
                    List<CollectionItem> array = new List<CollectionItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CollectionItem.DeserializeCollectionItem(item));
                    }
                    requiredReadOnlyModelCollection = array;
                    continue;
                }
                if (property.NameEquals("requiredReadOnlyIntRecord"u8))
                {
                    Dictionary<string, int> dictionary = new Dictionary<string, int>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetInt32());
                    }
                    requiredReadOnlyIntRecord = dictionary;
                    continue;
                }
                if (property.NameEquals("requiredStringRecord"u8))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    requiredStringRecord = dictionary;
                    continue;
                }
                if (property.NameEquals("requiredReadOnlyModelRecord"u8))
                {
                    Dictionary<string, RecordItem> dictionary = new Dictionary<string, RecordItem>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, RecordItem.DeserializeRecordItem(property0.Value));
                    }
                    requiredReadOnlyModelRecord = dictionary;
                    continue;
                }
                if (property.NameEquals("optionalReadonlyStringList"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    optionalReadonlyStringList = array;
                    continue;
                }
                if (property.NameEquals("optionalReadonlyIntList"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<int> array = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    optionalReadonlyIntList = array;
                    continue;
                }
                if (property.NameEquals("optionalReadOnlyModelCollection"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CollectionItem> array = new List<CollectionItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CollectionItem.DeserializeCollectionItem(item));
                    }
                    optionalReadOnlyModelCollection = array;
                    continue;
                }
                if (property.NameEquals("optionalReadOnlyIntRecord"u8))
                {
                    Dictionary<string, int> dictionary = new Dictionary<string, int>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetInt32());
                    }
                    optionalReadOnlyIntRecord = dictionary;
                    continue;
                }
                if (property.NameEquals("optionalReadOnlyStringRecord"u8))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    optionalReadOnlyStringRecord = dictionary;
                    continue;
                }
                if (property.NameEquals("optionalModelRecord"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, RecordItem> dictionary = new Dictionary<string, RecordItem>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, RecordItem.DeserializeRecordItem(property0.Value));
                    }
                    optionalModelRecord = dictionary;
                    continue;
                }
                if (property.NameEquals("requiredCollectionWithNullableIntElement"u8))
                {
                    List<int?> array = new List<int?>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetInt32());
                        }
                    }
                    requiredCollectionWithNullableIntElement = array;
                    continue;
                }
                if (property.NameEquals("optionalCollectionWithNullableBooleanElement"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<bool?> array = new List<bool?>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetBoolean());
                        }
                    }
                    optionalCollectionWithNullableBooleanElement = array;
                    continue;
                }
            }
            return new RoundTripReadOnlyModel(requiredReadonlyString, requiredReadonlyInt, optionalReadonlyString, Optional.ToNullable(optionalReadonlyInt), requiredReadonlyModel, optionalReadonlyModel, requiredReadonlyFixedStringEnum, requiredReadonlyExtensibleEnum, optionalReadonlyFixedStringEnum, optionalReadonlyExtensibleEnum, requiredReadonlyStringList, requiredReadonlyIntList, requiredReadOnlyModelCollection, requiredReadOnlyIntRecord, requiredStringRecord, requiredReadOnlyModelRecord, Optional.ToList(optionalReadonlyStringList), Optional.ToList(optionalReadonlyIntList), Optional.ToList(optionalReadOnlyModelCollection), optionalReadOnlyIntRecord, optionalReadOnlyStringRecord, Optional.ToDictionary(optionalModelRecord), requiredCollectionWithNullableIntElement, Optional.ToList(optionalCollectionWithNullableBooleanElement));
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static RoundTripReadOnlyModel FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeRoundTripReadOnlyModel(document.RootElement);
        }
    }
}
