<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="InputToRoundTripAsync(InputModel,CancellationToken)">
<example>
This sample shows how to call InputToRoundTripAsync with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var input = new InputModel("<requiredString>", 1234, new BaseModel(), new int[] 
{
    1234
}, new string[] 
{
    "<null>"
}, new CollectionItem[] 
{
    new CollectionItem(new Dictionary<string, RecordItem>
{
        ["key"] = new RecordItem(Array.Empty<CollectionItem>()),
    })
}, new Dictionary<string, RecordItem>(), new float?[] 
{
    3.14f
}, new bool?[] 
{
    true
});
var result = await client.InputToRoundTripAsync(input);
]]></code>
</example>
    </member>
    <member name="InputToRoundTrip(InputModel,CancellationToken)">
<example>
This sample shows how to call InputToRoundTrip with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var input = new InputModel("<requiredString>", 1234, new BaseModel(), new int[] 
{
    1234
}, new string[] 
{
    "<null>"
}, new CollectionItem[] 
{
    new CollectionItem(new Dictionary<string, RecordItem>
{
        ["key"] = new RecordItem(Array.Empty<CollectionItem>()),
    })
}, new Dictionary<string, RecordItem>(), new float?[] 
{
    3.14f
}, new bool?[] 
{
    true
});
var result = client.InputToRoundTrip(input);
]]></code>
</example>
    </member>
    <member name="InputToRoundTripAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call InputToRoundTripAsync with required request content and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredModel = new {},
    requiredIntCollection = new[] {
        1234
    },
    requiredStringCollection = new[] {
        "<String>"
    },
    requiredModelCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {},
            },
        }
    },
    requiredModelRecord = new {
        key = new {},
    },
    requiredCollectionWithNullableFloatElement = new[] {
        123.45f
    },
    requiredCollectionWithNullableBooleanElement = new[] {
        true
    },
};

Response response = await client.InputToRoundTripAsync(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalPropertyOnBase").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredPropertyOnBase").ToString());
Console.WriteLine(result.GetProperty("requiredFixedStringEnum").ToString());
Console.WriteLine(result.GetProperty("requiredFixedIntEnum").ToString());
Console.WriteLine(result.GetProperty("requiredExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("requiredIntRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("requiredStringRecord").GetProperty("<test>").ToString());
]]></code>
</example>
    </member>
    <member name="InputToRoundTrip(RequestContent,RequestContext)">
<example>
This sample shows how to call InputToRoundTrip with required request content and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredModel = new {},
    requiredIntCollection = new[] {
        1234
    },
    requiredStringCollection = new[] {
        "<String>"
    },
    requiredModelCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {},
            },
        }
    },
    requiredModelRecord = new {
        key = new {},
    },
    requiredCollectionWithNullableFloatElement = new[] {
        123.45f
    },
    requiredCollectionWithNullableBooleanElement = new[] {
        true
    },
};

Response response = client.InputToRoundTrip(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalPropertyOnBase").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredPropertyOnBase").ToString());
Console.WriteLine(result.GetProperty("requiredFixedStringEnum").ToString());
Console.WriteLine(result.GetProperty("requiredFixedIntEnum").ToString());
Console.WriteLine(result.GetProperty("requiredExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("requiredIntRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("requiredStringRecord").GetProperty("<test>").ToString());
]]></code>
</example>
    </member>
    <member name="InputToRoundTripPrimitiveAsync(InputModel,CancellationToken)">
<example>
This sample shows how to call InputToRoundTripPrimitiveAsync with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var input = new InputModel("<requiredString>", 1234, new BaseModel(), new int[] 
{
    1234
}, new string[] 
{
    "<null>"
}, new CollectionItem[] 
{
    new CollectionItem(new Dictionary<string, RecordItem>
{
        ["key"] = new RecordItem(Array.Empty<CollectionItem>()),
    })
}, new Dictionary<string, RecordItem>(), new float?[] 
{
    3.14f
}, new bool?[] 
{
    true
});
var result = await client.InputToRoundTripPrimitiveAsync(input);
]]></code>
</example>
    </member>
    <member name="InputToRoundTripPrimitive(InputModel,CancellationToken)">
<example>
This sample shows how to call InputToRoundTripPrimitive with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var input = new InputModel("<requiredString>", 1234, new BaseModel(), new int[] 
{
    1234
}, new string[] 
{
    "<null>"
}, new CollectionItem[] 
{
    new CollectionItem(new Dictionary<string, RecordItem>
{
        ["key"] = new RecordItem(Array.Empty<CollectionItem>()),
    })
}, new Dictionary<string, RecordItem>(), new float?[] 
{
    3.14f
}, new bool?[] 
{
    true
});
var result = client.InputToRoundTripPrimitive(input);
]]></code>
</example>
    </member>
    <member name="InputToRoundTripPrimitiveAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call InputToRoundTripPrimitiveAsync with required request content and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredModel = new {},
    requiredIntCollection = new[] {
        1234
    },
    requiredStringCollection = new[] {
        "<String>"
    },
    requiredModelCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {},
            },
        }
    },
    requiredModelRecord = new {
        key = new {},
    },
    requiredCollectionWithNullableFloatElement = new[] {
        123.45f
    },
    requiredCollectionWithNullableBooleanElement = new[] {
        true
    },
};

Response response = await client.InputToRoundTripPrimitiveAsync(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredInt64").ToString());
Console.WriteLine(result.GetProperty("requiredSafeInt").ToString());
Console.WriteLine(result.GetProperty("requiredFloat").ToString());
Console.WriteLine(result.GetProperty("required_Double").ToString());
Console.WriteLine(result.GetProperty("requiredBoolean").ToString());
Console.WriteLine(result.GetProperty("requiredDateTimeOffset").ToString());
Console.WriteLine(result.GetProperty("requiredTimeSpan").ToString());
Console.WriteLine(result.GetProperty("requiredCollectionWithNullableFloatElement")[0].ToString());
]]></code>
</example>
    </member>
    <member name="InputToRoundTripPrimitive(RequestContent,RequestContext)">
<example>
This sample shows how to call InputToRoundTripPrimitive with required request content and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredModel = new {},
    requiredIntCollection = new[] {
        1234
    },
    requiredStringCollection = new[] {
        "<String>"
    },
    requiredModelCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {},
            },
        }
    },
    requiredModelRecord = new {
        key = new {},
    },
    requiredCollectionWithNullableFloatElement = new[] {
        123.45f
    },
    requiredCollectionWithNullableBooleanElement = new[] {
        true
    },
};

Response response = client.InputToRoundTripPrimitive(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredInt64").ToString());
Console.WriteLine(result.GetProperty("requiredSafeInt").ToString());
Console.WriteLine(result.GetProperty("requiredFloat").ToString());
Console.WriteLine(result.GetProperty("required_Double").ToString());
Console.WriteLine(result.GetProperty("requiredBoolean").ToString());
Console.WriteLine(result.GetProperty("requiredDateTimeOffset").ToString());
Console.WriteLine(result.GetProperty("requiredTimeSpan").ToString());
Console.WriteLine(result.GetProperty("requiredCollectionWithNullableFloatElement")[0].ToString());
]]></code>
</example>
    </member>
    <member name="InputToRoundTripOptionalAsync(RoundTripOptionalModel,CancellationToken)">
    </member>
    <member name="InputToRoundTripOptional(RoundTripOptionalModel,CancellationToken)">
    </member>
    <member name="InputToRoundTripOptionalAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call InputToRoundTripOptionalAsync and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {};

Response response = await client.InputToRoundTripOptionalAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call InputToRoundTripOptionalAsync with all request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    optionalString = "<optionalString>",
    optionalInt = 1234,
    optionalStringList = new[] {
        "<String>"
    },
    optionalIntList = new[] {
        1234
    },
    optionalModelCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {},
            },
        }
    },
    optionalModel = new {},
    optionalModelWithPropertiesOnBase = new {
        optionalPropertyOnBase = "<optionalPropertyOnBase>",
    },
    optionalFixedStringEnum = "1",
    optionalExtensibleEnum = "1",
    optionalIntRecord = new {
        key = 1234,
    },
    optionalStringRecord = new {
        key = "<String>",
    },
    optionalModelRecord = new {
        key = new {},
    },
    optionalPlainDate = "2022-05-10",
    optionalPlainTime = "01:23:45",
    optionalCollectionWithNullableIntElement = new[] {
        1234
    },
};

Response response = await client.InputToRoundTripOptionalAsync(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("optionalString").ToString());
Console.WriteLine(result.GetProperty("optionalInt").ToString());
Console.WriteLine(result.GetProperty("optionalStringList")[0].ToString());
Console.WriteLine(result.GetProperty("optionalIntList")[0].ToString());
Console.WriteLine(result.GetProperty("optionalModelWithPropertiesOnBase").GetProperty("optionalPropertyOnBase").ToString());
Console.WriteLine(result.GetProperty("optionalFixedStringEnum").ToString());
Console.WriteLine(result.GetProperty("optionalExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("optionalIntRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("optionalStringRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("optionalPlainDate").ToString());
Console.WriteLine(result.GetProperty("optionalPlainTime").ToString());
Console.WriteLine(result.GetProperty("optionalCollectionWithNullableIntElement")[0].ToString());
]]></code>
</example>
    </member>
    <member name="InputToRoundTripOptional(RequestContent,RequestContext)">
<example>
This sample shows how to call InputToRoundTripOptional and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {};

Response response = client.InputToRoundTripOptional(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call InputToRoundTripOptional with all request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    optionalString = "<optionalString>",
    optionalInt = 1234,
    optionalStringList = new[] {
        "<String>"
    },
    optionalIntList = new[] {
        1234
    },
    optionalModelCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {},
            },
        }
    },
    optionalModel = new {},
    optionalModelWithPropertiesOnBase = new {
        optionalPropertyOnBase = "<optionalPropertyOnBase>",
    },
    optionalFixedStringEnum = "1",
    optionalExtensibleEnum = "1",
    optionalIntRecord = new {
        key = 1234,
    },
    optionalStringRecord = new {
        key = "<String>",
    },
    optionalModelRecord = new {
        key = new {},
    },
    optionalPlainDate = "2022-05-10",
    optionalPlainTime = "01:23:45",
    optionalCollectionWithNullableIntElement = new[] {
        1234
    },
};

Response response = client.InputToRoundTripOptional(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("optionalString").ToString());
Console.WriteLine(result.GetProperty("optionalInt").ToString());
Console.WriteLine(result.GetProperty("optionalStringList")[0].ToString());
Console.WriteLine(result.GetProperty("optionalIntList")[0].ToString());
Console.WriteLine(result.GetProperty("optionalModelWithPropertiesOnBase").GetProperty("optionalPropertyOnBase").ToString());
Console.WriteLine(result.GetProperty("optionalFixedStringEnum").ToString());
Console.WriteLine(result.GetProperty("optionalExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("optionalIntRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("optionalStringRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("optionalPlainDate").ToString());
Console.WriteLine(result.GetProperty("optionalPlainTime").ToString());
Console.WriteLine(result.GetProperty("optionalCollectionWithNullableIntElement")[0].ToString());
]]></code>
</example>
    </member>
    <member name="InputToRoundTripReadOnlyAsync(InputModel,CancellationToken)">
    </member>
    <member name="InputToRoundTripReadOnly(InputModel,CancellationToken)">
    </member>
    <member name="InputToRoundTripReadOnlyAsync(RequestContent,RequestContext)">
    </member>
    <member name="InputToRoundTripReadOnly(RequestContent,RequestContext)">
    </member>
    <member name="RoundTripToOutputAsync(RoundTripModel,CancellationToken)">
    </member>
    <member name="RoundTripToOutput(RoundTripModel,CancellationToken)">
    </member>
    <member name="RoundTripToOutputAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call RoundTripToOutputAsync with required request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredModel = new {
        requiredPropertyOnBase = 1234,
    },
    requiredFixedStringEnum = "1",
    requiredFixedIntEnum = "1",
    requiredExtensibleEnum = "1",
    requiredCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {},
            },
        }
    },
    requiredIntRecord = new {
        key = 1234,
    },
    requiredStringRecord = new {
        key = "<String>",
    },
    requiredModelRecord = new {
        key = new {},
    },
};

Response response = await client.RoundTripToOutputAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
]]></code>
This sample shows how to call RoundTripToOutputAsync with all request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredModel = new {
        optionalPropertyOnBase = "<optionalPropertyOnBase>",
        requiredPropertyOnBase = 1234,
    },
    requiredFixedStringEnum = "1",
    requiredFixedIntEnum = "1",
    requiredExtensibleEnum = "1",
    requiredCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {},
            },
        }
    },
    requiredIntRecord = new {
        key = 1234,
    },
    requiredStringRecord = new {
        key = "<String>",
    },
    requiredModelRecord = new {
        key = new {},
    },
};

Response response = await client.RoundTripToOutputAsync(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
]]></code>
</example>
    </member>
    <member name="RoundTripToOutput(RequestContent,RequestContext)">
<example>
This sample shows how to call RoundTripToOutput with required request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredModel = new {
        requiredPropertyOnBase = 1234,
    },
    requiredFixedStringEnum = "1",
    requiredFixedIntEnum = "1",
    requiredExtensibleEnum = "1",
    requiredCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {},
            },
        }
    },
    requiredIntRecord = new {
        key = 1234,
    },
    requiredStringRecord = new {
        key = "<String>",
    },
    requiredModelRecord = new {
        key = new {},
    },
};

Response response = client.RoundTripToOutput(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
]]></code>
This sample shows how to call RoundTripToOutput with all request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredModel = new {
        optionalPropertyOnBase = "<optionalPropertyOnBase>",
        requiredPropertyOnBase = 1234,
    },
    requiredFixedStringEnum = "1",
    requiredFixedIntEnum = "1",
    requiredExtensibleEnum = "1",
    requiredCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {},
            },
        }
    },
    requiredIntRecord = new {
        key = 1234,
    },
    requiredStringRecord = new {
        key = "<String>",
    },
    requiredModelRecord = new {
        key = new {},
    },
};

Response response = client.RoundTripToOutput(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
]]></code>
</example>
    </member>
    <member name="InputRecursiveAsync(InputRecursiveModel,CancellationToken)">
<example>
This sample shows how to call InputRecursiveAsync with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var input = new InputRecursiveModel("<message>");
var result = await client.InputRecursiveAsync(input);
]]></code>
</example>
    </member>
    <member name="InputRecursive(InputRecursiveModel,CancellationToken)">
<example>
This sample shows how to call InputRecursive with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var input = new InputRecursiveModel("<message>");
var result = client.InputRecursive(input);
]]></code>
</example>
    </member>
    <member name="InputRecursiveAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call InputRecursiveAsync with required request content.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    message = "<message>",
};

Response response = await client.InputRecursiveAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call InputRecursiveAsync with all request content.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    message = "<message>",
};

Response response = await client.InputRecursiveAsync(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="InputRecursive(RequestContent,RequestContext)">
<example>
This sample shows how to call InputRecursive with required request content.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    message = "<message>",
};

Response response = client.InputRecursive(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call InputRecursive with all request content.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    message = "<message>",
};

Response response = client.InputRecursive(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="RoundTripRecursiveAsync(RoundTripRecursiveModel,CancellationToken)">
<example>
This sample shows how to call RoundTripRecursiveAsync with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var input = new RoundTripRecursiveModel("<message>");
var result = await client.RoundTripRecursiveAsync(input);
]]></code>
</example>
    </member>
    <member name="RoundTripRecursive(RoundTripRecursiveModel,CancellationToken)">
<example>
This sample shows how to call RoundTripRecursive with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var input = new RoundTripRecursiveModel("<message>");
var result = client.RoundTripRecursive(input);
]]></code>
</example>
    </member>
    <member name="RoundTripRecursiveAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call RoundTripRecursiveAsync with required request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    message = "<message>",
};

Response response = await client.RoundTripRecursiveAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("message").ToString());
]]></code>
This sample shows how to call RoundTripRecursiveAsync with all request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    message = "<message>",
};

Response response = await client.RoundTripRecursiveAsync(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("inner").GetProperty("message").ToString());
]]></code>
</example>
    </member>
    <member name="RoundTripRecursive(RequestContent,RequestContext)">
<example>
This sample shows how to call RoundTripRecursive with required request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    message = "<message>",
};

Response response = client.RoundTripRecursive(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("message").ToString());
]]></code>
This sample shows how to call RoundTripRecursive with all request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    message = "<message>",
};

Response response = client.RoundTripRecursive(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("inner").GetProperty("message").ToString());
]]></code>
</example>
    </member>
    <member name="SelfReferenceAsync(CancellationToken)">
<example>
This sample shows how to call SelfReferenceAsync.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var result = await client.SelfReferenceAsync();
]]></code>
</example>
    </member>
    <member name="SelfReference(CancellationToken)">
<example>
This sample shows how to call SelfReference.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var result = client.SelfReference();
]]></code>
</example>
    </member>
    <member name="SelfReferenceAsync(RequestContext)">
<example>
This sample shows how to call SelfReferenceAsync with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

Response response = await client.SelfReferenceAsync(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("innerError").GetProperty("message").ToString());
]]></code>
</example>
    </member>
    <member name="SelfReference(RequestContext)">
<example>
This sample shows how to call SelfReference with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

Response response = client.SelfReference(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("innerError").GetProperty("message").ToString());
]]></code>
</example>
    </member>
    <member name="RoundTripToOutputWithNoUseBaseAsync(RoundTripOnNoUse,CancellationToken)">
<example>
This sample shows how to call RoundTripToOutputWithNoUseBaseAsync with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var input = new RoundTripOnNoUse("<baseModelProp>", new CollectionItem[] 
{
    new CollectionItem(new Dictionary<string, RecordItem>
{
        ["key"] = new RecordItem(Array.Empty<CollectionItem>()),
    })
});
var result = await client.RoundTripToOutputWithNoUseBaseAsync(input);
]]></code>
</example>
    </member>
    <member name="RoundTripToOutputWithNoUseBase(RoundTripOnNoUse,CancellationToken)">
<example>
This sample shows how to call RoundTripToOutputWithNoUseBase with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var input = new RoundTripOnNoUse("<baseModelProp>", new CollectionItem[] 
{
    new CollectionItem(new Dictionary<string, RecordItem>
{
        ["key"] = new RecordItem(Array.Empty<CollectionItem>()),
    })
});
var result = client.RoundTripToOutputWithNoUseBase(input);
]]></code>
</example>
    </member>
    <member name="RoundTripToOutputWithNoUseBaseAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call RoundTripToOutputWithNoUseBaseAsync with required request content and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    requiredCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {},
            },
        }
    },
    baseModelProp = "<baseModelProp>",
};

Response response = await client.RoundTripToOutputWithNoUseBaseAsync(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("baseModelProp").ToString());
]]></code>
</example>
    </member>
    <member name="RoundTripToOutputWithNoUseBase(RequestContent,RequestContext)">
<example>
This sample shows how to call RoundTripToOutputWithNoUseBase with required request content and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    requiredCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {},
            },
        }
    },
    baseModelProp = "<baseModelProp>",
};

Response response = client.RoundTripToOutputWithNoUseBase(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("baseModelProp").ToString());
]]></code>
</example>
    </member>
  </members>
</doc>