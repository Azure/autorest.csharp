<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="RoundTripAsync(RootModel,CancellationToken)">
      <example>
This sample shows how to call RoundTripAsync with required parameters.
<code><![CDATA[
CustomizationsInTspClient client = new CustomizationsInTspClient();

RootModel input = new RootModel()
{
    PropertyModelToRename = new RenamedModel(1234)
    {
        OptionalInt = 1234,
    },
    PropertyModelToChangeNamespace = new ModelToChangeNamespace(1234),
    PropertyModelWithCustomizedProperties = new ModelWithCustomizedProperties(1234, 1234, 1234, (int)123.45F, TimeSpan.Parse("<propertyToMakeDuration>"), "PT1H23M45S", new JsonElement(), "<propertyToField>", new string[]
{
"<badListName>"
}, new Dictionary<string, string>()
{
    ["key"] = "<badDictionaryName>",
}, new IList<string>[]
{
new string[]
{
"<badListOfListName>"
}
}, new IDictionary<string, string>[]
{
new Dictionary<string, string>()
{
["key"] = "<badListOfDictionaryName>",
}
}),
    PropertyEnumToRename = RenamedEnum.One,
    PropertyEnumWithValueToRename = EnumWithValueToRename.One,
    PropertyEnumToBeMadeExtensible = EnumToBeMadeExtensible.ExOne,
    PropertyModelToAddAdditionalSerializableProperty = new ModelToAddAdditionalSerializableProperty(1234),
    PropertyToMoveToCustomization = NormalEnum.A,
};
Response<RootModel> response = await client.RoundTripAsync(input);
]]></code></example>
    </member>
    <member name="RoundTrip(RootModel,CancellationToken)">
      <example>
This sample shows how to call RoundTrip with required parameters.
<code><![CDATA[
CustomizationsInTspClient client = new CustomizationsInTspClient();

RootModel input = new RootModel()
{
    PropertyModelToRename = new RenamedModel(1234)
    {
        OptionalInt = 1234,
    },
    PropertyModelToChangeNamespace = new ModelToChangeNamespace(1234),
    PropertyModelWithCustomizedProperties = new ModelWithCustomizedProperties(1234, 1234, 1234, (int)123.45F, TimeSpan.Parse("<propertyToMakeDuration>"), "PT1H23M45S", new JsonElement(), "<propertyToField>", new string[]
{
"<badListName>"
}, new Dictionary<string, string>()
{
    ["key"] = "<badDictionaryName>",
}, new IList<string>[]
{
new string[]
{
"<badListOfListName>"
}
}, new IDictionary<string, string>[]
{
new Dictionary<string, string>()
{
["key"] = "<badListOfDictionaryName>",
}
}),
    PropertyEnumToRename = RenamedEnum.One,
    PropertyEnumWithValueToRename = EnumWithValueToRename.One,
    PropertyEnumToBeMadeExtensible = EnumToBeMadeExtensible.ExOne,
    PropertyModelToAddAdditionalSerializableProperty = new ModelToAddAdditionalSerializableProperty(1234),
    PropertyToMoveToCustomization = NormalEnum.A,
};
Response<RootModel> response = client.RoundTrip(input);
]]></code></example>
    </member>
    <member name="RoundTripAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call RoundTripAsync and parse the result.
<code><![CDATA[
CustomizationsInTspClient client = new CustomizationsInTspClient();

RequestContent content = RequestContent.Create(new Dictionary<string, object>());
Response response = await client.RoundTripAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call RoundTripAsync with all request content, and how to parse the result.
<code><![CDATA[
CustomizationsInTspClient client = new CustomizationsInTspClient();

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["propertyModelToMakeInternal"] = new Dictionary<string, object>()
    {
        ["requiredInt"] = 1234,
    },
    ["propertyModelToRename"] = new Dictionary<string, object>()
    {
        ["requiredInt"] = 1234,
        ["optionalInt"] = 1234,
    },
    ["propertyModelToChangeNamespace"] = new Dictionary<string, object>()
    {
        ["requiredInt"] = 1234,
    },
    ["propertyModelWithCustomizedProperties"] = new Dictionary<string, object>()
    {
        ["propertyToMakeInternal"] = 1234,
        ["propertyToRename"] = 1234,
        ["propertyToMakeFloat"] = 1234,
        ["propertyToMakeInt"] = 123.45F,
        ["propertyToMakeDuration"] = "<propertyToMakeDuration>",
        ["propertyToMakeString"] = "PT1H23M45S",
        ["propertyToMakeJsonElement"] = "<propertyToMakeJsonElement>",
        ["propertyToField"] = "<propertyToField>",
        ["badListName"] = new object[]
{
default
},
        ["badDictionaryName"] = new Dictionary<string, object>()
        {
            ["key"] = "<badDictionaryName>",
        },
        ["badListOfListName"] = new object[]
{
new object[]
{
default
}
},
        ["badListOfDictionaryName"] = new object[]
{
new Dictionary<string, object>()
{
["key"] = default,
}
},
    },
    ["propertyEnumToRename"] = "1",
    ["propertyEnumWithValueToRename"] = "1",
    ["propertyEnumToBeMadeExtensible"] = "1",
    ["propertyModelToAddAdditionalSerializableProperty"] = new Dictionary<string, object>()
    {
        ["requiredInt"] = 1234,
    },
    ["propertyToMoveToCustomization"] = "a",
});
Response response = await client.RoundTripAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("propertyModelToMakeInternal").GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("propertyModelToRename").GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("propertyModelToRename").GetProperty("optionalInt").ToString());
Console.WriteLine(result.GetProperty("propertyModelToChangeNamespace").GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeInternal").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToRename").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeFloat").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeInt").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeDuration").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeString").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeJsonElement").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToField").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("badListName")[0].ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("badDictionaryName").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("badListOfListName")[0][0].ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("badListOfDictionaryName")[0].GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("propertyEnumToRename").ToString());
Console.WriteLine(result.GetProperty("propertyEnumWithValueToRename").ToString());
Console.WriteLine(result.GetProperty("propertyEnumToBeMadeExtensible").ToString());
Console.WriteLine(result.GetProperty("propertyModelToAddAdditionalSerializableProperty").GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("propertyToMoveToCustomization").ToString());
]]></code></example>
    </member>
    <member name="RoundTrip(RequestContent,RequestContext)">
      <example>
This sample shows how to call RoundTrip and parse the result.
<code><![CDATA[
CustomizationsInTspClient client = new CustomizationsInTspClient();

RequestContent content = RequestContent.Create(new Dictionary<string, object>());
Response response = client.RoundTrip(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call RoundTrip with all request content, and how to parse the result.
<code><![CDATA[
CustomizationsInTspClient client = new CustomizationsInTspClient();

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["propertyModelToMakeInternal"] = new Dictionary<string, object>()
    {
        ["requiredInt"] = 1234,
    },
    ["propertyModelToRename"] = new Dictionary<string, object>()
    {
        ["requiredInt"] = 1234,
        ["optionalInt"] = 1234,
    },
    ["propertyModelToChangeNamespace"] = new Dictionary<string, object>()
    {
        ["requiredInt"] = 1234,
    },
    ["propertyModelWithCustomizedProperties"] = new Dictionary<string, object>()
    {
        ["propertyToMakeInternal"] = 1234,
        ["propertyToRename"] = 1234,
        ["propertyToMakeFloat"] = 1234,
        ["propertyToMakeInt"] = 123.45F,
        ["propertyToMakeDuration"] = "<propertyToMakeDuration>",
        ["propertyToMakeString"] = "PT1H23M45S",
        ["propertyToMakeJsonElement"] = "<propertyToMakeJsonElement>",
        ["propertyToField"] = "<propertyToField>",
        ["badListName"] = new object[]
{
default
},
        ["badDictionaryName"] = new Dictionary<string, object>()
        {
            ["key"] = "<badDictionaryName>",
        },
        ["badListOfListName"] = new object[]
{
new object[]
{
default
}
},
        ["badListOfDictionaryName"] = new object[]
{
new Dictionary<string, object>()
{
["key"] = default,
}
},
    },
    ["propertyEnumToRename"] = "1",
    ["propertyEnumWithValueToRename"] = "1",
    ["propertyEnumToBeMadeExtensible"] = "1",
    ["propertyModelToAddAdditionalSerializableProperty"] = new Dictionary<string, object>()
    {
        ["requiredInt"] = 1234,
    },
    ["propertyToMoveToCustomization"] = "a",
});
Response response = client.RoundTrip(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("propertyModelToMakeInternal").GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("propertyModelToRename").GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("propertyModelToRename").GetProperty("optionalInt").ToString());
Console.WriteLine(result.GetProperty("propertyModelToChangeNamespace").GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeInternal").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToRename").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeFloat").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeInt").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeDuration").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeString").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeJsonElement").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToField").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("badListName")[0].ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("badDictionaryName").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("badListOfListName")[0][0].ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("badListOfDictionaryName")[0].GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("propertyEnumToRename").ToString());
Console.WriteLine(result.GetProperty("propertyEnumWithValueToRename").ToString());
Console.WriteLine(result.GetProperty("propertyEnumToBeMadeExtensible").ToString());
Console.WriteLine(result.GetProperty("propertyModelToAddAdditionalSerializableProperty").GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("propertyToMoveToCustomization").ToString());
]]></code></example>
    </member>
  </members>
</doc>