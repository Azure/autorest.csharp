// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AgFoodPlatform.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmAgFoodPlatformModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.ArmAsyncOperation"/>. </summary>
        /// <param name="status"> Status of the async operation. </param>
        /// <param name="error">
        /// Arm async operation error class.
        /// Ref: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#azure-asyncoperation-resource-format.
        /// </param>
        /// <returns> A new <see cref="Models.ArmAsyncOperation"/> instance for mocking. </returns>
        public static ArmAsyncOperation ArmAsyncOperation(string status = null, ArmAsyncOperationError error = null)
        {
            return new ArmAsyncOperation(status, error, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ArmAsyncOperationError"/>. </summary>
        /// <param name="code"> Status of the async operation. </param>
        /// <param name="message"> Status of the async operation. </param>
        /// <returns> A new <see cref="Models.ArmAsyncOperationError"/> instance for mocking. </returns>
        public static ArmAsyncOperationError ArmAsyncOperationError(string code = null, string message = null)
        {
            return new ArmAsyncOperationError(code, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CheckNameAvailabilityResponse"/>. </summary>
        /// <param name="nameAvailable"> Indicates if the resource name is available. </param>
        /// <param name="reason"> The reason why the given name is not available. </param>
        /// <param name="message"> Detailed reason why the given name is available. </param>
        /// <returns> A new <see cref="Models.CheckNameAvailabilityResponse"/> instance for mocking. </returns>
        public static CheckNameAvailabilityResponse CheckNameAvailabilityResponse(bool? nameAvailable = null, CheckNameAvailabilityReason? reason = null, string message = null)
        {
            return new CheckNameAvailabilityResponse(nameAvailable, reason, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgFoodPlatform.DataManagerForAgricultureSolutionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> DataManagerForAgricultureSolution properties. </param>
        /// <returns> A new <see cref="AgFoodPlatform.DataManagerForAgricultureSolutionData"/> instance for mocking. </returns>
        public static DataManagerForAgricultureSolutionData DataManagerForAgricultureSolutionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DataManagerForAgricultureSolutionProperties properties = null)
        {
            return new DataManagerForAgricultureSolutionData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DataManagerForAgricultureSolutionProperties"/>. </summary>
        /// <param name="partnerId"> Solution Partner Id. </param>
        /// <param name="partnerTenantId"> Solution Partner Tenant Id. </param>
        /// <param name="dataAccessScopes">
        /// Gets scope of the Data manager For Agriculture data access that's required for processing solution request to partner.
        /// Example: For gdd they might need weatherScope and satelliteScope.
        /// </param>
        /// <param name="marketplaceOfferDetails"></param>
        /// <param name="openApiSpecsDictionary"> Gets api-version Swagger Document Dictionary to capture all api-versions of swagger exposed by partner to Data Manager For Agriculture. </param>
        /// <param name="accessFBApplicationId"> Application id of the multi tenant application to be used by partner to access Data Manager For Agriculture data. </param>
        /// <param name="saaSApplicationId"> Application id of the SaaS multi tenant application. </param>
        /// <param name="actionIds"> List of ActionIds needed to make the SaaS multi tenant application access relevant fb data. </param>
        /// <param name="roleId"> Role Id of the SaaS multi tenant application to access relevant fb data. </param>
        /// <param name="roleName"> Role Name of the SaaS multi tenant application to access relevant fb data. </param>
        /// <param name="accessFBApplicationName"> Application name of the multi tenant application to be used by partner to access Data Manager For Agriculture Data. </param>
        /// <returns> A new <see cref="Models.DataManagerForAgricultureSolutionProperties"/> instance for mocking. </returns>
        public static DataManagerForAgricultureSolutionProperties DataManagerForAgricultureSolutionProperties(string partnerId = null, string partnerTenantId = null, IEnumerable<string> dataAccessScopes = null, MarketplaceOfferDetails marketplaceOfferDetails = null, IReadOnlyDictionary<string, BinaryData> openApiSpecsDictionary = null, string accessFBApplicationId = null, string saaSApplicationId = null, IEnumerable<string> actionIds = null, string roleId = null, string roleName = null, string accessFBApplicationName = null)
        {
            dataAccessScopes ??= new List<string>();
            openApiSpecsDictionary ??= new Dictionary<string, BinaryData>();
            actionIds ??= new List<string>();

            return new DataManagerForAgricultureSolutionProperties(
                partnerId,
                partnerTenantId,
                dataAccessScopes?.ToList(),
                marketplaceOfferDetails,
                openApiSpecsDictionary,
                accessFBApplicationId,
                saaSApplicationId,
                actionIds?.ToList(),
                roleId,
                roleName,
                accessFBApplicationName,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MarketplaceOfferDetails"/>. </summary>
        /// <param name="saasOfferId"></param>
        /// <param name="publisherId"></param>
        /// <returns> A new <see cref="Models.MarketplaceOfferDetails"/> instance for mocking. </returns>
        public static MarketplaceOfferDetails MarketplaceOfferDetails(string saasOfferId = null, string publisherId = null)
        {
            return new MarketplaceOfferDetails(saasOfferId, publisherId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgFoodPlatform.SolutionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Solution resource properties. </param>
        /// <param name="etag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <returns> A new <see cref="AgFoodPlatform.SolutionData"/> instance for mocking. </returns>
        public static SolutionData SolutionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, SolutionProperties properties = null, string etag = null)
        {
            return new SolutionData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                etag,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SolutionProperties"/>. </summary>
        /// <param name="partnerId"> Partner Id of the Solution. </param>
        /// <param name="saasSubscriptionId"> SaaS subscriptionId of the installed SaaS application. </param>
        /// <param name="saasSubscriptionName"> SaaS subscription name of the installed SaaS application. </param>
        /// <param name="marketplacePublisherId"> SaaS application Marketplace Publisher Id. </param>
        /// <param name="planId"> SaaS application Plan Id. </param>
        /// <param name="roleAssignmentId"> Role Assignment Id. </param>
        /// <param name="offerId"> SaaS application Offer Id. </param>
        /// <param name="termId"> SaaS application Term Id. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.SolutionProperties"/> instance for mocking. </returns>
        public static SolutionProperties SolutionProperties(string partnerId = null, string saasSubscriptionId = null, string saasSubscriptionName = null, string marketplacePublisherId = null, string planId = null, string roleAssignmentId = null, string offerId = null, string termId = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SolutionProperties(
                partnerId,
                saasSubscriptionId,
                saasSubscriptionName,
                marketplacePublisherId,
                planId,
                roleAssignmentId,
                offerId,
                termId,
                additionalProperties);
        }

        /// <summary> Initializes a new instance of <see cref="AgFoodPlatform.AgFoodPlatformPrivateLinkResourceDataData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="groupId"> The private link resource group id. </param>
        /// <param name="requiredMembers"> The private link resource required member names. </param>
        /// <param name="requiredZoneNames"> The private link resource private link DNS zone name. </param>
        /// <returns> A new <see cref="AgFoodPlatform.AgFoodPlatformPrivateLinkResourceDataData"/> instance for mocking. </returns>
        public static AgFoodPlatformPrivateLinkResourceDataData AgFoodPlatformPrivateLinkResourceDataData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string groupId = null, IEnumerable<string> requiredMembers = null, IEnumerable<string> requiredZoneNames = null)
        {
            requiredMembers ??= new List<string>();
            requiredZoneNames ??= new List<string>();

            return new AgFoodPlatformPrivateLinkResourceDataData(
                id,
                name,
                resourceType,
                systemData,
                groupId,
                requiredMembers?.ToList(),
                requiredZoneNames?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgFoodPlatform.AgFoodPlatformPrivateEndpointConnectionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="groupIds"> The group ids for the private endpoint resource. </param>
        /// <param name="privateEndpointId"> The private endpoint resource. </param>
        /// <param name="privateLinkServiceConnectionState"> A collection of information about the state of the connection between service consumer and provider. </param>
        /// <param name="provisioningState"> The provisioning state of the private endpoint connection resource. </param>
        /// <returns> A new <see cref="AgFoodPlatform.AgFoodPlatformPrivateEndpointConnectionData"/> instance for mocking. </returns>
        public static AgFoodPlatformPrivateEndpointConnectionData AgFoodPlatformPrivateEndpointConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<string> groupIds = null, ResourceIdentifier privateEndpointId = null, AgFoodPlatformPrivateLinkServiceConnectionState privateLinkServiceConnectionState = null, AgFoodPlatformPrivateEndpointConnectionProvisioningState? provisioningState = null)
        {
            groupIds ??= new List<string>();

            return new AgFoodPlatformPrivateEndpointConnectionData(
                id,
                name,
                resourceType,
                systemData,
                groupIds?.ToList(),
                privateEndpointId != null ? ResourceManagerModelFactory.SubResource(privateEndpointId) : null,
                privateLinkServiceConnectionState,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgFoodPlatform.ExtensionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="extensionId"> Extension Id. </param>
        /// <param name="extensionCategory"> Extension category. e.g. weather/sensor/satellite. </param>
        /// <param name="installedExtensionVersion"> Installed extension version. </param>
        /// <param name="extensionAuthLink"> Extension auth link. </param>
        /// <param name="extensionApiDocsLink"> Extension api docs link. </param>
        /// <param name="additionalApiProperties"> Additional Api Properties. </param>
        /// <param name="etag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <returns> A new <see cref="AgFoodPlatform.ExtensionData"/> instance for mocking. </returns>
        public static ExtensionData ExtensionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string extensionId = null, string extensionCategory = null, string installedExtensionVersion = null, string extensionAuthLink = null, string extensionApiDocsLink = null, IReadOnlyDictionary<string, ApiProperties> additionalApiProperties = null, string etag = null)
        {
            additionalApiProperties ??= new Dictionary<string, ApiProperties>();

            return new ExtensionData(
                id,
                name,
                resourceType,
                systemData,
                extensionId,
                extensionCategory,
                installedExtensionVersion,
                extensionAuthLink,
                extensionApiDocsLink,
                additionalApiProperties,
                etag,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ApiProperties"/>. </summary>
        /// <param name="apiFreshnessTimeInMinutes"> Interval in minutes for which the weather data for the api needs to be refreshed. </param>
        /// <returns> A new <see cref="Models.ApiProperties"/> instance for mocking. </returns>
        public static ApiProperties ApiProperties(int? apiFreshnessTimeInMinutes = null)
        {
            return new ApiProperties(apiFreshnessTimeInMinutes, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgFoodPlatform.DataManagerForAgricultureExtensionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> DataManagerForAgricultureExtension properties. </param>
        /// <returns> A new <see cref="AgFoodPlatform.DataManagerForAgricultureExtensionData"/> instance for mocking. </returns>
        public static DataManagerForAgricultureExtensionData DataManagerForAgricultureExtensionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DataManagerForAgricultureExtensionProperties properties = null)
        {
            return new DataManagerForAgricultureExtensionData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DataManagerForAgricultureExtensionProperties"/>. </summary>
        /// <param name="targetResourceType"> Target ResourceType of the Data Manager For Agriculture Extension. </param>
        /// <param name="farmBeatsExtensionId"> Data Manager For Agriculture Extension ID. </param>
        /// <param name="farmBeatsExtensionName"> Data Manager For Agriculture Extension name. </param>
        /// <param name="farmBeatsExtensionVersion"> Data Manager For Agriculture Extension version. </param>
        /// <param name="publisherId"> Publisher ID. </param>
        /// <param name="description"> Textual description. </param>
        /// <param name="extensionCategory"> Category of the extension. e.g. weather/sensor/satellite. </param>
        /// <param name="extensionAuthLink"> Data Manager For Agriculture Extension auth link. </param>
        /// <param name="extensionApiDocsLink"> Data Manager For Agriculture Extension api docs link. </param>
        /// <param name="detailedInformation">
        /// Detailed information which shows summary of requested data.
        /// Used in descriptive get extension metadata call.
        /// Information for weather category per api included are apisSupported,
        /// customParameters, PlatformParameters and Units supported.
        /// </param>
        /// <returns> A new <see cref="Models.DataManagerForAgricultureExtensionProperties"/> instance for mocking. </returns>
        public static DataManagerForAgricultureExtensionProperties DataManagerForAgricultureExtensionProperties(string targetResourceType = null, string farmBeatsExtensionId = null, string farmBeatsExtensionName = null, string farmBeatsExtensionVersion = null, string publisherId = null, string description = null, string extensionCategory = null, string extensionAuthLink = null, string extensionApiDocsLink = null, IEnumerable<DetailedInformation> detailedInformation = null)
        {
            detailedInformation ??= new List<DetailedInformation>();

            return new DataManagerForAgricultureExtensionProperties(
                targetResourceType,
                farmBeatsExtensionId,
                farmBeatsExtensionName,
                farmBeatsExtensionVersion,
                publisherId,
                description,
                extensionCategory,
                extensionAuthLink,
                extensionApiDocsLink,
                detailedInformation?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DetailedInformation"/>. </summary>
        /// <param name="apiName"> ApiName available for the Data Manager For Agriculture Extension. </param>
        /// <param name="apiDocsLink"> Extension provider's API documentation link. </param>
        /// <param name="apiType"> Type of Api in Extension. </param>
        /// <param name="customParameters"> List of customParameters. </param>
        /// <param name="platformParameters"> List of platformParameters. </param>
        /// <param name="apiDefaultInputParameters"> List of defaultParameters. </param>
        /// <param name="unitsSupported"> Unit systems info for the data provider. </param>
        /// <param name="apiInputParameters"> List of apiInputParameters. </param>
        /// <returns> A new <see cref="Models.DetailedInformation"/> instance for mocking. </returns>
        public static DetailedInformation DetailedInformation(string apiName = null, string apiDocsLink = null, string apiType = null, IEnumerable<string> customParameters = null, IEnumerable<string> platformParameters = null, IEnumerable<string> apiDefaultInputParameters = null, UnitSystemsInfo unitsSupported = null, IEnumerable<string> apiInputParameters = null)
        {
            customParameters ??= new List<string>();
            platformParameters ??= new List<string>();
            apiDefaultInputParameters ??= new List<string>();
            apiInputParameters ??= new List<string>();

            return new DetailedInformation(
                apiName,
                apiDocsLink,
                apiType,
                customParameters?.ToList(),
                platformParameters?.ToList(),
                apiDefaultInputParameters?.ToList(),
                unitsSupported,
                apiInputParameters?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.UnitSystemsInfo"/>. </summary>
        /// <param name="key"> UnitSystem key sent as part of ProviderInput. </param>
        /// <param name="values"> List of unit systems supported by this data provider. </param>
        /// <returns> A new <see cref="Models.UnitSystemsInfo"/> instance for mocking. </returns>
        public static UnitSystemsInfo UnitSystemsInfo(string key = null, IEnumerable<string> values = null)
        {
            values ??= new List<string>();

            return new UnitSystemsInfo(key, values?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgFoodPlatform.DataManagerForAgricultureData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="instanceUri"> Uri of the Data Manager For Agriculture instance. </param>
        /// <param name="provisioningState"> Data Manager For Agriculture instance provisioning state. </param>
        /// <param name="sensorIntegration"> Sensor integration request model. </param>
        /// <param name="publicNetworkAccess"> Property to allow or block public traffic for an Azure Data Manager For Agriculture resource. </param>
        /// <param name="privateEndpointConnections"> Private endpoints. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <returns> A new <see cref="AgFoodPlatform.DataManagerForAgricultureData"/> instance for mocking. </returns>
        public static DataManagerForAgricultureData DataManagerForAgricultureData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, Uri instanceUri = null, ProvisioningState? provisioningState = null, SensorIntegration sensorIntegration = null, PublicNetworkAccess? publicNetworkAccess = null, IEnumerable<AgFoodPlatformPrivateEndpointConnectionData> privateEndpointConnections = null, ManagedServiceIdentity identity = null)
        {
            tags ??= new Dictionary<string, string>();
            privateEndpointConnections ??= new List<AgFoodPlatformPrivateEndpointConnectionData>();

            return new DataManagerForAgricultureData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                instanceUri,
                provisioningState,
                sensorIntegration,
                publicNetworkAccess,
                privateEndpointConnections?.ToList(),
                identity,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SensorIntegration"/>. </summary>
        /// <param name="enabled"> Sensor integration enable state. </param>
        /// <param name="provisioningState"> Sensor integration instance provisioning state. </param>
        /// <param name="provisioningInfoError"> Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). </param>
        /// <returns> A new <see cref="Models.SensorIntegration"/> instance for mocking. </returns>
        public static SensorIntegration SensorIntegration(string enabled = null, ProvisioningState? provisioningState = null, ResponseError provisioningInfoError = null)
        {
            return new SensorIntegration(enabled, provisioningState, provisioningInfoError != null ? new ErrorResponse(provisioningInfoError, serializedAdditionalRawData: null) : null, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="AgFoodPlatform.DataConnectorData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="dataConnectorCredentials"> DataConnector Properties. </param>
        /// <param name="etag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <returns> A new <see cref="AgFoodPlatform.DataConnectorData"/> instance for mocking. </returns>
        public static DataConnectorData DataConnectorData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AuthCredentials dataConnectorCredentials = null, string etag = null)
        {
            return new DataConnectorData(
                id,
                name,
                resourceType,
                systemData,
                dataConnectorCredentials != null ? new DataConnectorProperties(dataConnectorCredentials, serializedAdditionalRawData: null) : null,
                etag,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Operation"/>. </summary>
        /// <param name="name"> The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action". </param>
        /// <param name="isDataAction"> Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for Azure Resource Manager/control-plane operations. </param>
        /// <param name="display"> Localized display information for this particular operation. </param>
        /// <param name="origin"> The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system". </param>
        /// <param name="actionType"> Extensible enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs. </param>
        /// <returns> A new <see cref="Models.Operation"/> instance for mocking. </returns>
        public static Operation Operation(string name = null, bool? isDataAction = null, OperationDisplay display = null, Origin? origin = null, ActionType? actionType = null)
        {
            return new Operation(
                name,
                isDataAction,
                display,
                origin,
                actionType,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OperationDisplay"/>. </summary>
        /// <param name="provider"> The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute". </param>
        /// <param name="resource"> The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections". </param>
        /// <param name="operation"> The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine". </param>
        /// <param name="description"> The short, localized friendly description of the operation; suitable for tool tips and detailed views. </param>
        /// <returns> A new <see cref="Models.OperationDisplay"/> instance for mocking. </returns>
        public static OperationDisplay OperationDisplay(string provider = null, string resource = null, string operation = null, string description = null)
        {
            return new OperationDisplay(provider, resource, operation, description, serializedAdditionalRawData: null);
        }
    }
}
