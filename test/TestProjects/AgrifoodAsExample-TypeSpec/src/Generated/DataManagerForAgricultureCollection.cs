// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.AgFoodPlatform
{
    /// <summary>
    /// A class representing a collection of <see cref="DataManagerForAgricultureResource"/> and their operations.
    /// Each <see cref="DataManagerForAgricultureResource"/> in the collection will belong to the same instance of <see cref="ResourceGroupResource"/>.
    /// To get a <see cref="DataManagerForAgricultureCollection"/> instance call the GetDataManagerForAgricultures method from an instance of <see cref="ResourceGroupResource"/>.
    /// </summary>
    public partial class DataManagerForAgricultureCollection : ArmCollection, IEnumerable<DataManagerForAgricultureResource>, IAsyncEnumerable<DataManagerForAgricultureResource>
    {
        private readonly ClientDiagnostics _dataManagerForAgricultureClientDiagnostics;
        private readonly DataManagerForAgriculturesRestOperations _dataManagerForAgricultureRestClient;

        /// <summary> Initializes a new instance of the <see cref="DataManagerForAgricultureCollection"/> class for mocking. </summary>
        protected DataManagerForAgricultureCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="DataManagerForAgricultureCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal DataManagerForAgricultureCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _dataManagerForAgricultureClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.AgFoodPlatform", DataManagerForAgricultureResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(DataManagerForAgricultureResource.ResourceType, out string dataManagerForAgricultureApiVersion);
            _dataManagerForAgricultureRestClient = new DataManagerForAgriculturesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, dataManagerForAgricultureApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create or update Data Manager For Agriculture resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgricultures_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="dataManagerForAgricultureResourceName"> DataManagerForAgriculture resource name. </param>
        /// <param name="data"> Data Manager For Agriculture resource create or update request object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataManagerForAgricultureResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataManagerForAgricultureResourceName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<DataManagerForAgricultureResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string dataManagerForAgricultureResourceName, DataManagerForAgricultureData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataManagerForAgricultureResourceName, nameof(dataManagerForAgricultureResourceName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _dataManagerForAgricultureClientDiagnostics.CreateScope("DataManagerForAgricultureCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _dataManagerForAgricultureRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, dataManagerForAgricultureResourceName, data, cancellationToken).ConfigureAwait(false);
                var uri = _dataManagerForAgricultureRestClient.CreateCreateOrUpdateRequestUri(Id.SubscriptionId, Id.ResourceGroupName, dataManagerForAgricultureResourceName, data);
                var rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Put, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                var operation = new AgFoodPlatformArmOperation<DataManagerForAgricultureResource>(Response.FromValue(new DataManagerForAgricultureResource(Client, response), response.GetRawResponse()), rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update Data Manager For Agriculture resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgricultures_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="dataManagerForAgricultureResourceName"> DataManagerForAgriculture resource name. </param>
        /// <param name="data"> Data Manager For Agriculture resource create or update request object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataManagerForAgricultureResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataManagerForAgricultureResourceName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<DataManagerForAgricultureResource> CreateOrUpdate(WaitUntil waitUntil, string dataManagerForAgricultureResourceName, DataManagerForAgricultureData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataManagerForAgricultureResourceName, nameof(dataManagerForAgricultureResourceName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _dataManagerForAgricultureClientDiagnostics.CreateScope("DataManagerForAgricultureCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _dataManagerForAgricultureRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, dataManagerForAgricultureResourceName, data, cancellationToken);
                var uri = _dataManagerForAgricultureRestClient.CreateCreateOrUpdateRequestUri(Id.SubscriptionId, Id.ResourceGroupName, dataManagerForAgricultureResourceName, data);
                var rehydrationToken = NextLinkOperationImplementation.GetRehydrationToken(RequestMethod.Put, uri.ToUri(), uri.ToString(), "None", null, OperationFinalStateVia.OriginalUri.ToString());
                var operation = new AgFoodPlatformArmOperation<DataManagerForAgricultureResource>(Response.FromValue(new DataManagerForAgricultureResource(Client, response), response.GetRawResponse()), rehydrationToken);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get DataManagerForAgriculture resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgricultures_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dataManagerForAgricultureResourceName"> DataManagerForAgriculture resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataManagerForAgricultureResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataManagerForAgricultureResourceName"/> is null. </exception>
        public virtual async Task<Response<DataManagerForAgricultureResource>> GetAsync(string dataManagerForAgricultureResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataManagerForAgricultureResourceName, nameof(dataManagerForAgricultureResourceName));

            using var scope = _dataManagerForAgricultureClientDiagnostics.CreateScope("DataManagerForAgricultureCollection.Get");
            scope.Start();
            try
            {
                var response = await _dataManagerForAgricultureRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, dataManagerForAgricultureResourceName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DataManagerForAgricultureResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get DataManagerForAgriculture resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgricultures_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dataManagerForAgricultureResourceName"> DataManagerForAgriculture resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataManagerForAgricultureResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataManagerForAgricultureResourceName"/> is null. </exception>
        public virtual Response<DataManagerForAgricultureResource> Get(string dataManagerForAgricultureResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataManagerForAgricultureResourceName, nameof(dataManagerForAgricultureResourceName));

            using var scope = _dataManagerForAgricultureClientDiagnostics.CreateScope("DataManagerForAgricultureCollection.Get");
            scope.Start();
            try
            {
                var response = _dataManagerForAgricultureRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, dataManagerForAgricultureResourceName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DataManagerForAgricultureResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists the DataManagerForAgriculture instances for a resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.AgFoodPlatform/farmBeats</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgriculture_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Continuation token for getting next set of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DataManagerForAgricultureResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DataManagerForAgricultureResource> GetAllAsync(int? maxPageSize = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _dataManagerForAgricultureRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName, pageSizeHint, skipToken);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _dataManagerForAgricultureRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, pageSizeHint, skipToken);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new DataManagerForAgricultureResource(Client, DataManagerForAgricultureData.DeserializeDataManagerForAgricultureData(e)), _dataManagerForAgricultureClientDiagnostics, Pipeline, "DataManagerForAgricultureCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists the DataManagerForAgriculture instances for a resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.AgFoodPlatform/farmBeats</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgriculture_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Continuation token for getting next set of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DataManagerForAgricultureResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DataManagerForAgricultureResource> GetAll(int? maxPageSize = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _dataManagerForAgricultureRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName, pageSizeHint, skipToken);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _dataManagerForAgricultureRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, pageSizeHint, skipToken);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new DataManagerForAgricultureResource(Client, DataManagerForAgricultureData.DeserializeDataManagerForAgricultureData(e)), _dataManagerForAgricultureClientDiagnostics, Pipeline, "DataManagerForAgricultureCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgricultures_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dataManagerForAgricultureResourceName"> DataManagerForAgriculture resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataManagerForAgricultureResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataManagerForAgricultureResourceName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string dataManagerForAgricultureResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataManagerForAgricultureResourceName, nameof(dataManagerForAgricultureResourceName));

            using var scope = _dataManagerForAgricultureClientDiagnostics.CreateScope("DataManagerForAgricultureCollection.Exists");
            scope.Start();
            try
            {
                var response = await _dataManagerForAgricultureRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, dataManagerForAgricultureResourceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgricultures_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dataManagerForAgricultureResourceName"> DataManagerForAgriculture resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataManagerForAgricultureResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataManagerForAgricultureResourceName"/> is null. </exception>
        public virtual Response<bool> Exists(string dataManagerForAgricultureResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataManagerForAgricultureResourceName, nameof(dataManagerForAgricultureResourceName));

            using var scope = _dataManagerForAgricultureClientDiagnostics.CreateScope("DataManagerForAgricultureCollection.Exists");
            scope.Start();
            try
            {
                var response = _dataManagerForAgricultureRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, dataManagerForAgricultureResourceName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgricultures_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dataManagerForAgricultureResourceName"> DataManagerForAgriculture resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataManagerForAgricultureResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataManagerForAgricultureResourceName"/> is null. </exception>
        public virtual async Task<NullableResponse<DataManagerForAgricultureResource>> GetIfExistsAsync(string dataManagerForAgricultureResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataManagerForAgricultureResourceName, nameof(dataManagerForAgricultureResourceName));

            using var scope = _dataManagerForAgricultureClientDiagnostics.CreateScope("DataManagerForAgricultureCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _dataManagerForAgricultureRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, dataManagerForAgricultureResourceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<DataManagerForAgricultureResource>(response.GetRawResponse());
                return Response.FromValue(new DataManagerForAgricultureResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgricultures_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dataManagerForAgricultureResourceName"> DataManagerForAgriculture resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataManagerForAgricultureResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataManagerForAgricultureResourceName"/> is null. </exception>
        public virtual NullableResponse<DataManagerForAgricultureResource> GetIfExists(string dataManagerForAgricultureResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataManagerForAgricultureResourceName, nameof(dataManagerForAgricultureResourceName));

            using var scope = _dataManagerForAgricultureClientDiagnostics.CreateScope("DataManagerForAgricultureCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _dataManagerForAgricultureRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, dataManagerForAgricultureResourceName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<DataManagerForAgricultureResource>(response.GetRawResponse());
                return Response.FromValue(new DataManagerForAgricultureResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<DataManagerForAgricultureResource> IEnumerable<DataManagerForAgricultureResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<DataManagerForAgricultureResource> IAsyncEnumerable<DataManagerForAgricultureResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
