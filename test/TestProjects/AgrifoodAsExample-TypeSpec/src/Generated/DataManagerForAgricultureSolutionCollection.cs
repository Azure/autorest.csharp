// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.AgFoodPlatform
{
    /// <summary>
    /// A class representing a collection of <see cref="DataManagerForAgricultureSolutionResource"/> and their operations.
    /// Each <see cref="DataManagerForAgricultureSolutionResource"/> in the collection will belong to the same instance of <see cref="TenantResource"/>.
    /// To get a <see cref="DataManagerForAgricultureSolutionCollection"/> instance call the GetDataManagerForAgricultureSolutions method from an instance of <see cref="TenantResource"/>.
    /// </summary>
    public partial class DataManagerForAgricultureSolutionCollection : ArmCollection, IEnumerable<DataManagerForAgricultureSolutionResource>, IAsyncEnumerable<DataManagerForAgricultureSolutionResource>
    {
        private readonly ClientDiagnostics _dataManagerForAgricultureSolutionClientDiagnostics;
        private readonly DataManagerForAgricultureSolutionsRestOperations _dataManagerForAgricultureSolutionRestClient;

        /// <summary> Initializes a new instance of the <see cref="DataManagerForAgricultureSolutionCollection"/> class for mocking. </summary>
        protected DataManagerForAgricultureSolutionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="DataManagerForAgricultureSolutionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal DataManagerForAgricultureSolutionCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _dataManagerForAgricultureSolutionClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.AgFoodPlatform", DataManagerForAgricultureSolutionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(DataManagerForAgricultureSolutionResource.ResourceType, out string dataManagerForAgricultureSolutionApiVersion);
            _dataManagerForAgricultureSolutionRestClient = new DataManagerForAgricultureSolutionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, dataManagerForAgricultureSolutionApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != TenantResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, TenantResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get Data Manager For Agriculture solution by id.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Azure.ResourceManager.AgFoodPlatform/farmBeatsSolutionDefinitions/{dataManagerForAgricultureSolutionId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgricultureSolutions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureSolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dataManagerForAgricultureSolutionId"> dataManagerForAgricultureSolutionId to be queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataManagerForAgricultureSolutionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataManagerForAgricultureSolutionId"/> is null. </exception>
        public virtual async Task<Response<DataManagerForAgricultureSolutionResource>> GetAsync(string dataManagerForAgricultureSolutionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataManagerForAgricultureSolutionId, nameof(dataManagerForAgricultureSolutionId));

            using var scope = _dataManagerForAgricultureSolutionClientDiagnostics.CreateScope("DataManagerForAgricultureSolutionCollection.Get");
            scope.Start();
            try
            {
                var response = await _dataManagerForAgricultureSolutionRestClient.GetAsync(dataManagerForAgricultureSolutionId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DataManagerForAgricultureSolutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Data Manager For Agriculture solution by id.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Azure.ResourceManager.AgFoodPlatform/farmBeatsSolutionDefinitions/{dataManagerForAgricultureSolutionId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgricultureSolutions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureSolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dataManagerForAgricultureSolutionId"> dataManagerForAgricultureSolutionId to be queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataManagerForAgricultureSolutionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataManagerForAgricultureSolutionId"/> is null. </exception>
        public virtual Response<DataManagerForAgricultureSolutionResource> Get(string dataManagerForAgricultureSolutionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataManagerForAgricultureSolutionId, nameof(dataManagerForAgricultureSolutionId));

            using var scope = _dataManagerForAgricultureSolutionClientDiagnostics.CreateScope("DataManagerForAgricultureSolutionCollection.Get");
            scope.Start();
            try
            {
                var response = _dataManagerForAgricultureSolutionRestClient.Get(dataManagerForAgricultureSolutionId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DataManagerForAgricultureSolutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get list of Data Manager For Agriculture solutions.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Azure.ResourceManager.AgFoodPlatform/farmBeatsSolutionDefinitions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgricultureSolution_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureSolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="farmBeatsSolutionIds"> Ids of Data Manager For Agriculture Solutions which the customer requests to fetch. </param>
        /// <param name="farmBeatsSolutionNames"> Names of Data Manager For Agriculture Solutions which the customer requests to fetch. </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DataManagerForAgricultureSolutionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DataManagerForAgricultureSolutionResource> GetAllAsync(IEnumerable<string> farmBeatsSolutionIds = null, IEnumerable<string> farmBeatsSolutionNames = null, int? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _dataManagerForAgricultureSolutionRestClient.CreateListRequest(farmBeatsSolutionIds, farmBeatsSolutionNames, pageSizeHint);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _dataManagerForAgricultureSolutionRestClient.CreateListNextPageRequest(nextLink, farmBeatsSolutionIds, farmBeatsSolutionNames, pageSizeHint);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new DataManagerForAgricultureSolutionResource(Client, DataManagerForAgricultureSolutionData.DeserializeDataManagerForAgricultureSolutionData(e)), _dataManagerForAgricultureSolutionClientDiagnostics, Pipeline, "DataManagerForAgricultureSolutionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Get list of Data Manager For Agriculture solutions.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Azure.ResourceManager.AgFoodPlatform/farmBeatsSolutionDefinitions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgricultureSolution_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureSolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="farmBeatsSolutionIds"> Ids of Data Manager For Agriculture Solutions which the customer requests to fetch. </param>
        /// <param name="farmBeatsSolutionNames"> Names of Data Manager For Agriculture Solutions which the customer requests to fetch. </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DataManagerForAgricultureSolutionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DataManagerForAgricultureSolutionResource> GetAll(IEnumerable<string> farmBeatsSolutionIds = null, IEnumerable<string> farmBeatsSolutionNames = null, int? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _dataManagerForAgricultureSolutionRestClient.CreateListRequest(farmBeatsSolutionIds, farmBeatsSolutionNames, pageSizeHint);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _dataManagerForAgricultureSolutionRestClient.CreateListNextPageRequest(nextLink, farmBeatsSolutionIds, farmBeatsSolutionNames, pageSizeHint);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new DataManagerForAgricultureSolutionResource(Client, DataManagerForAgricultureSolutionData.DeserializeDataManagerForAgricultureSolutionData(e)), _dataManagerForAgricultureSolutionClientDiagnostics, Pipeline, "DataManagerForAgricultureSolutionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Azure.ResourceManager.AgFoodPlatform/farmBeatsSolutionDefinitions/{dataManagerForAgricultureSolutionId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgricultureSolutions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureSolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dataManagerForAgricultureSolutionId"> dataManagerForAgricultureSolutionId to be queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataManagerForAgricultureSolutionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataManagerForAgricultureSolutionId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string dataManagerForAgricultureSolutionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataManagerForAgricultureSolutionId, nameof(dataManagerForAgricultureSolutionId));

            using var scope = _dataManagerForAgricultureSolutionClientDiagnostics.CreateScope("DataManagerForAgricultureSolutionCollection.Exists");
            scope.Start();
            try
            {
                var response = await _dataManagerForAgricultureSolutionRestClient.GetAsync(dataManagerForAgricultureSolutionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Azure.ResourceManager.AgFoodPlatform/farmBeatsSolutionDefinitions/{dataManagerForAgricultureSolutionId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgricultureSolutions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureSolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dataManagerForAgricultureSolutionId"> dataManagerForAgricultureSolutionId to be queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataManagerForAgricultureSolutionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataManagerForAgricultureSolutionId"/> is null. </exception>
        public virtual Response<bool> Exists(string dataManagerForAgricultureSolutionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataManagerForAgricultureSolutionId, nameof(dataManagerForAgricultureSolutionId));

            using var scope = _dataManagerForAgricultureSolutionClientDiagnostics.CreateScope("DataManagerForAgricultureSolutionCollection.Exists");
            scope.Start();
            try
            {
                var response = _dataManagerForAgricultureSolutionRestClient.Get(dataManagerForAgricultureSolutionId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Azure.ResourceManager.AgFoodPlatform/farmBeatsSolutionDefinitions/{dataManagerForAgricultureSolutionId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgricultureSolutions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureSolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dataManagerForAgricultureSolutionId"> dataManagerForAgricultureSolutionId to be queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataManagerForAgricultureSolutionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataManagerForAgricultureSolutionId"/> is null. </exception>
        public virtual async Task<NullableResponse<DataManagerForAgricultureSolutionResource>> GetIfExistsAsync(string dataManagerForAgricultureSolutionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataManagerForAgricultureSolutionId, nameof(dataManagerForAgricultureSolutionId));

            using var scope = _dataManagerForAgricultureSolutionClientDiagnostics.CreateScope("DataManagerForAgricultureSolutionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _dataManagerForAgricultureSolutionRestClient.GetAsync(dataManagerForAgricultureSolutionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<DataManagerForAgricultureSolutionResource>(response.GetRawResponse());
                return Response.FromValue(new DataManagerForAgricultureSolutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Azure.ResourceManager.AgFoodPlatform/farmBeatsSolutionDefinitions/{dataManagerForAgricultureSolutionId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgricultureSolutions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureSolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dataManagerForAgricultureSolutionId"> dataManagerForAgricultureSolutionId to be queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dataManagerForAgricultureSolutionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dataManagerForAgricultureSolutionId"/> is null. </exception>
        public virtual NullableResponse<DataManagerForAgricultureSolutionResource> GetIfExists(string dataManagerForAgricultureSolutionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dataManagerForAgricultureSolutionId, nameof(dataManagerForAgricultureSolutionId));

            using var scope = _dataManagerForAgricultureSolutionClientDiagnostics.CreateScope("DataManagerForAgricultureSolutionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _dataManagerForAgricultureSolutionRestClient.Get(dataManagerForAgricultureSolutionId, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<DataManagerForAgricultureSolutionResource>(response.GetRawResponse());
                return Response.FromValue(new DataManagerForAgricultureSolutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<DataManagerForAgricultureSolutionResource> IEnumerable<DataManagerForAgricultureSolutionResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<DataManagerForAgricultureSolutionResource> IAsyncEnumerable<DataManagerForAgricultureSolutionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
