// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.ResourceManager.AgFoodPlatform.Mocking;
using Azure.ResourceManager.AgFoodPlatform.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.AgFoodPlatform
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.AgFoodPlatform. </summary>
    public static partial class AgFoodPlatformExtensions
    {
        private static MockableAgFoodPlatformArmClient GetMockableAgFoodPlatformArmClient(ArmClient client)
        {
            return client.GetCachedClient(client0 => new MockableAgFoodPlatformArmClient(client0));
        }

        private static MockableAgFoodPlatformResourceGroupResource GetMockableAgFoodPlatformResourceGroupResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableAgFoodPlatformResourceGroupResource(client, resource.Id));
        }

        private static MockableAgFoodPlatformSubscriptionResource GetMockableAgFoodPlatformSubscriptionResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableAgFoodPlatformSubscriptionResource(client, resource.Id));
        }

        private static MockableAgFoodPlatformTenantResource GetMockableAgFoodPlatformTenantResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableAgFoodPlatformTenantResource(client, resource.Id));
        }

        /// <summary>
        /// Gets an object representing a <see cref="DataConnectorResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DataConnectorResource.CreateResourceIdentifier" /> to create a <see cref="DataConnectorResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableAgFoodPlatformArmClient.GetDataConnectorResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="DataConnectorResource"/> object. </returns>
        public static DataConnectorResource GetDataConnectorResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableAgFoodPlatformArmClient(client).GetDataConnectorResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="DataManagerForAgricultureResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DataManagerForAgricultureResource.CreateResourceIdentifier" /> to create a <see cref="DataManagerForAgricultureResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableAgFoodPlatformArmClient.GetDataManagerForAgricultureResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="DataManagerForAgricultureResource"/> object. </returns>
        public static DataManagerForAgricultureResource GetDataManagerForAgricultureResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableAgFoodPlatformArmClient(client).GetDataManagerForAgricultureResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="DataManagerForAgricultureExtensionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DataManagerForAgricultureExtensionResource.CreateResourceIdentifier" /> to create a <see cref="DataManagerForAgricultureExtensionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableAgFoodPlatformArmClient.GetDataManagerForAgricultureExtensionResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="DataManagerForAgricultureExtensionResource"/> object. </returns>
        public static DataManagerForAgricultureExtensionResource GetDataManagerForAgricultureExtensionResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableAgFoodPlatformArmClient(client).GetDataManagerForAgricultureExtensionResource(id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="ExtensionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ExtensionResource.CreateResourceIdentifier" /> to create an <see cref="ExtensionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableAgFoodPlatformArmClient.GetExtensionResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="ExtensionResource"/> object. </returns>
        public static ExtensionResource GetExtensionResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableAgFoodPlatformArmClient(client).GetExtensionResource(id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="AgFoodPlatformPrivateEndpointConnectionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AgFoodPlatformPrivateEndpointConnectionResource.CreateResourceIdentifier" /> to create an <see cref="AgFoodPlatformPrivateEndpointConnectionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableAgFoodPlatformArmClient.GetAgFoodPlatformPrivateEndpointConnectionResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="AgFoodPlatformPrivateEndpointConnectionResource"/> object. </returns>
        public static AgFoodPlatformPrivateEndpointConnectionResource GetAgFoodPlatformPrivateEndpointConnectionResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableAgFoodPlatformArmClient(client).GetAgFoodPlatformPrivateEndpointConnectionResource(id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="AgFoodPlatformPrivateLinkResourceDataResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AgFoodPlatformPrivateLinkResourceDataResource.CreateResourceIdentifier" /> to create an <see cref="AgFoodPlatformPrivateLinkResourceDataResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableAgFoodPlatformArmClient.GetAgFoodPlatformPrivateLinkResourceDataResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="AgFoodPlatformPrivateLinkResourceDataResource"/> object. </returns>
        public static AgFoodPlatformPrivateLinkResourceDataResource GetAgFoodPlatformPrivateLinkResourceDataResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableAgFoodPlatformArmClient(client).GetAgFoodPlatformPrivateLinkResourceDataResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="SolutionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SolutionResource.CreateResourceIdentifier" /> to create a <see cref="SolutionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableAgFoodPlatformArmClient.GetSolutionResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="SolutionResource"/> object. </returns>
        public static SolutionResource GetSolutionResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableAgFoodPlatformArmClient(client).GetSolutionResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="DataManagerForAgricultureSolutionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DataManagerForAgricultureSolutionResource.CreateResourceIdentifier" /> to create a <see cref="DataManagerForAgricultureSolutionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableAgFoodPlatformArmClient.GetDataManagerForAgricultureSolutionResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="DataManagerForAgricultureSolutionResource"/> object. </returns>
        public static DataManagerForAgricultureSolutionResource GetDataManagerForAgricultureSolutionResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableAgFoodPlatformArmClient(client).GetDataManagerForAgricultureSolutionResource(id);
        }

        /// <summary>
        /// Gets a collection of DataManagerForAgricultureResources in the ResourceGroupResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableAgFoodPlatformResourceGroupResource.GetDataManagerForAgricultures()"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of DataManagerForAgricultureResources and their operations over a DataManagerForAgricultureResource. </returns>
        public static DataManagerForAgricultureCollection GetDataManagerForAgricultures(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableAgFoodPlatformResourceGroupResource(resourceGroupResource).GetDataManagerForAgricultures();
        }

        /// <summary>
        /// Get DataManagerForAgriculture resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgricultures_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableAgFoodPlatformResourceGroupResource.GetDataManagerForAgricultureAsync(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="dataManagerForAgricultureResourceName"> DataManagerForAgriculture resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="dataManagerForAgricultureResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataManagerForAgricultureResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<DataManagerForAgricultureResource>> GetDataManagerForAgricultureAsync(this ResourceGroupResource resourceGroupResource, string dataManagerForAgricultureResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableAgFoodPlatformResourceGroupResource(resourceGroupResource).GetDataManagerForAgricultureAsync(dataManagerForAgricultureResourceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get DataManagerForAgriculture resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Azure.ResourceManager.AgFoodPlatform/farmBeats/{dataManagerForAgricultureResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgricultures_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableAgFoodPlatformResourceGroupResource.GetDataManagerForAgriculture(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="dataManagerForAgricultureResourceName"> DataManagerForAgriculture resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="dataManagerForAgricultureResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataManagerForAgricultureResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<DataManagerForAgricultureResource> GetDataManagerForAgriculture(this ResourceGroupResource resourceGroupResource, string dataManagerForAgricultureResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableAgFoodPlatformResourceGroupResource(resourceGroupResource).GetDataManagerForAgriculture(dataManagerForAgricultureResourceName, cancellationToken);
        }

        /// <summary>
        /// Lists the DataManagerForAgriculture instances for a subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.AgFoodPlatform/farmBeats</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgriculture_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableAgFoodPlatformSubscriptionResource.GetDataManagerForAgricultures(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> An async collection of <see cref="DataManagerForAgricultureResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<DataManagerForAgricultureResource> GetDataManagerForAgriculturesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableAgFoodPlatformSubscriptionResource(subscriptionResource).GetDataManagerForAgriculturesAsync(cancellationToken);
        }

        /// <summary>
        /// Lists the DataManagerForAgriculture instances for a subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Azure.ResourceManager.AgFoodPlatform/farmBeats</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgriculture_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableAgFoodPlatformSubscriptionResource.GetDataManagerForAgricultures(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="DataManagerForAgricultureResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<DataManagerForAgricultureResource> GetDataManagerForAgricultures(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableAgFoodPlatformSubscriptionResource(subscriptionResource).GetDataManagerForAgricultures(cancellationToken);
        }

        /// <summary>
        /// Checks the name availability of the resource with requested resource name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.AgFoodPlatform/checkNameAvailability</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CheckNameAvailabilityOperations_CheckNameAvailability</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableAgFoodPlatformSubscriptionResource.CheckNameAvailabilityCheckNameAvailabilityOperation(CheckNameAvailabilityContent,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="content"> NameAvailabilityRequest object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="content"/> is null. </exception>
        public static async Task<Response<CheckNameAvailabilityResponse>> CheckNameAvailabilityCheckNameAvailabilityOperationAsync(this SubscriptionResource subscriptionResource, CheckNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return await GetMockableAgFoodPlatformSubscriptionResource(subscriptionResource).CheckNameAvailabilityCheckNameAvailabilityOperationAsync(content, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Checks the name availability of the resource with requested resource name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.AgFoodPlatform/checkNameAvailability</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CheckNameAvailabilityOperations_CheckNameAvailability</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableAgFoodPlatformSubscriptionResource.CheckNameAvailabilityCheckNameAvailabilityOperation(CheckNameAvailabilityContent,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="content"> NameAvailabilityRequest object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> or <paramref name="content"/> is null. </exception>
        public static Response<CheckNameAvailabilityResponse> CheckNameAvailabilityCheckNameAvailabilityOperation(this SubscriptionResource subscriptionResource, CheckNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableAgFoodPlatformSubscriptionResource(subscriptionResource).CheckNameAvailabilityCheckNameAvailabilityOperation(content, cancellationToken);
        }

        /// <summary>
        /// Get operationResults for a Data Manager For Agriculture resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.AgFoodPlatform/locations/{locations}/operationResults/{operationResultsId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OperationResultsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableAgFoodPlatformSubscriptionResource.GetOperationResultsOperation(string,string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="locations"> Location. </param>
        /// <param name="operationResultsId"> operationResultsId for a specific location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locations"/> or <paramref name="operationResultsId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/>, <paramref name="locations"/> or <paramref name="operationResultsId"/> is null. </exception>
        public static async Task<Response<ArmAsyncOperation>> GetOperationResultsOperationAsync(this SubscriptionResource subscriptionResource, string locations, string operationResultsId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return await GetMockableAgFoodPlatformSubscriptionResource(subscriptionResource).GetOperationResultsOperationAsync(locations, operationResultsId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get operationResults for a Data Manager For Agriculture resource.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.AgFoodPlatform/locations/{locations}/operationResults/{operationResultsId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>OperationResultsOperations_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableAgFoodPlatformSubscriptionResource.GetOperationResultsOperation(string,string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="locations"> Location. </param>
        /// <param name="operationResultsId"> operationResultsId for a specific location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="locations"/> or <paramref name="operationResultsId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/>, <paramref name="locations"/> or <paramref name="operationResultsId"/> is null. </exception>
        public static Response<ArmAsyncOperation> GetOperationResultsOperation(this SubscriptionResource subscriptionResource, string locations, string operationResultsId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableAgFoodPlatformSubscriptionResource(subscriptionResource).GetOperationResultsOperation(locations, operationResultsId, cancellationToken);
        }

        /// <summary>
        /// Gets a collection of DataManagerForAgricultureExtensionResources in the TenantResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableAgFoodPlatformTenantResource.GetDataManagerForAgricultureExtensions()"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> is null. </exception>
        /// <returns> An object representing collection of DataManagerForAgricultureExtensionResources and their operations over a DataManagerForAgricultureExtensionResource. </returns>
        public static DataManagerForAgricultureExtensionCollection GetDataManagerForAgricultureExtensions(this TenantResource tenantResource)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return GetMockableAgFoodPlatformTenantResource(tenantResource).GetDataManagerForAgricultureExtensions();
        }

        /// <summary>
        /// Get Data Manager For Agriculture extension.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Azure.ResourceManager.AgFoodPlatform/farmBeatsExtensionDefinitions/{dataManagerForAgricultureExtensionId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgricultureExtensions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureExtensionResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableAgFoodPlatformTenantResource.GetDataManagerForAgricultureExtensionAsync(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="dataManagerForAgricultureExtensionId"> dataManagerForAgricultureExtensionId to be queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> or <paramref name="dataManagerForAgricultureExtensionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataManagerForAgricultureExtensionId"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<DataManagerForAgricultureExtensionResource>> GetDataManagerForAgricultureExtensionAsync(this TenantResource tenantResource, string dataManagerForAgricultureExtensionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return await GetMockableAgFoodPlatformTenantResource(tenantResource).GetDataManagerForAgricultureExtensionAsync(dataManagerForAgricultureExtensionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get Data Manager For Agriculture extension.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Azure.ResourceManager.AgFoodPlatform/farmBeatsExtensionDefinitions/{dataManagerForAgricultureExtensionId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgricultureExtensions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureExtensionResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableAgFoodPlatformTenantResource.GetDataManagerForAgricultureExtension(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="dataManagerForAgricultureExtensionId"> dataManagerForAgricultureExtensionId to be queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> or <paramref name="dataManagerForAgricultureExtensionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataManagerForAgricultureExtensionId"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<DataManagerForAgricultureExtensionResource> GetDataManagerForAgricultureExtension(this TenantResource tenantResource, string dataManagerForAgricultureExtensionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return GetMockableAgFoodPlatformTenantResource(tenantResource).GetDataManagerForAgricultureExtension(dataManagerForAgricultureExtensionId, cancellationToken);
        }

        /// <summary>
        /// Gets a collection of DataManagerForAgricultureSolutionResources in the TenantResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableAgFoodPlatformTenantResource.GetDataManagerForAgricultureSolutions()"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> is null. </exception>
        /// <returns> An object representing collection of DataManagerForAgricultureSolutionResources and their operations over a DataManagerForAgricultureSolutionResource. </returns>
        public static DataManagerForAgricultureSolutionCollection GetDataManagerForAgricultureSolutions(this TenantResource tenantResource)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return GetMockableAgFoodPlatformTenantResource(tenantResource).GetDataManagerForAgricultureSolutions();
        }

        /// <summary>
        /// Get Data Manager For Agriculture solution by id.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Azure.ResourceManager.AgFoodPlatform/farmBeatsSolutionDefinitions/{dataManagerForAgricultureSolutionId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgricultureSolutions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureSolutionResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableAgFoodPlatformTenantResource.GetDataManagerForAgricultureSolutionAsync(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="dataManagerForAgricultureSolutionId"> dataManagerForAgricultureSolutionId to be queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> or <paramref name="dataManagerForAgricultureSolutionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataManagerForAgricultureSolutionId"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<DataManagerForAgricultureSolutionResource>> GetDataManagerForAgricultureSolutionAsync(this TenantResource tenantResource, string dataManagerForAgricultureSolutionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return await GetMockableAgFoodPlatformTenantResource(tenantResource).GetDataManagerForAgricultureSolutionAsync(dataManagerForAgricultureSolutionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get Data Manager For Agriculture solution by id.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Azure.ResourceManager.AgFoodPlatform/farmBeatsSolutionDefinitions/{dataManagerForAgricultureSolutionId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgricultureSolutions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureSolutionResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableAgFoodPlatformTenantResource.GetDataManagerForAgricultureSolution(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="dataManagerForAgricultureSolutionId"> dataManagerForAgricultureSolutionId to be queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> or <paramref name="dataManagerForAgricultureSolutionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataManagerForAgricultureSolutionId"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<DataManagerForAgricultureSolutionResource> GetDataManagerForAgricultureSolution(this TenantResource tenantResource, string dataManagerForAgricultureSolutionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return GetMockableAgFoodPlatformTenantResource(tenantResource).GetDataManagerForAgricultureSolution(dataManagerForAgricultureSolutionId, cancellationToken);
        }

        /// <summary>
        /// List the operations for the provider
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Azure.ResourceManager.AgFoodPlatform/operations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Operations_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableAgFoodPlatformTenantResource.GetOperations(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> is null. </exception>
        /// <returns> An async collection of <see cref="Models.Operation"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<Models.Operation> GetOperationsAsync(this TenantResource tenantResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return GetMockableAgFoodPlatformTenantResource(tenantResource).GetOperationsAsync(cancellationToken);
        }

        /// <summary>
        /// List the operations for the provider
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Azure.ResourceManager.AgFoodPlatform/operations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Operations_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableAgFoodPlatformTenantResource.GetOperations(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> is null. </exception>
        /// <returns> A collection of <see cref="Models.Operation"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<Models.Operation> GetOperations(this TenantResource tenantResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return GetMockableAgFoodPlatformTenantResource(tenantResource).GetOperations(cancellationToken);
        }
    }
}
