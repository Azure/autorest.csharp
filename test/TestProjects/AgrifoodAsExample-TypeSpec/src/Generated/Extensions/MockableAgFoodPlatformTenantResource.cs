// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.AgFoodPlatform.Models;

namespace Azure.ResourceManager.AgFoodPlatform.Mocking
{
    /// <summary> A class to add extension methods to TenantResource. </summary>
    public partial class MockableAgFoodPlatformTenantResource : ArmResource
    {
        private ClientDiagnostics _operationsClientDiagnostics;
        private OperationsRestOperations _operationsRestClient;

        /// <summary> Initializes a new instance of the <see cref="MockableAgFoodPlatformTenantResource"/> class for mocking. </summary>
        protected MockableAgFoodPlatformTenantResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableAgFoodPlatformTenantResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableAgFoodPlatformTenantResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics OperationsClientDiagnostics => _operationsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.AgFoodPlatform", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private OperationsRestOperations OperationsRestClient => _operationsRestClient ??= new OperationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of DataManagerForAgricultureExtensionResources in the TenantResource. </summary>
        /// <returns> An object representing collection of DataManagerForAgricultureExtensionResources and their operations over a DataManagerForAgricultureExtensionResource. </returns>
        public virtual DataManagerForAgricultureExtensionCollection GetDataManagerForAgricultureExtensions()
        {
            return GetCachedClient(client => new DataManagerForAgricultureExtensionCollection(client, Id));
        }

        /// <summary>
        /// Get Data Manager For Agriculture extension.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Azure.ResourceManager.AgFoodPlatform/farmBeatsExtensionDefinitions/{dataManagerForAgricultureExtensionId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgricultureExtensions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureExtensionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dataManagerForAgricultureExtensionId"> dataManagerForAgricultureExtensionId to be queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataManagerForAgricultureExtensionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataManagerForAgricultureExtensionId"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<DataManagerForAgricultureExtensionResource>> GetDataManagerForAgricultureExtensionAsync(string dataManagerForAgricultureExtensionId, CancellationToken cancellationToken = default)
        {
            return await GetDataManagerForAgricultureExtensions().GetAsync(dataManagerForAgricultureExtensionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get Data Manager For Agriculture extension.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Azure.ResourceManager.AgFoodPlatform/farmBeatsExtensionDefinitions/{dataManagerForAgricultureExtensionId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgricultureExtensions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureExtensionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dataManagerForAgricultureExtensionId"> dataManagerForAgricultureExtensionId to be queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataManagerForAgricultureExtensionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataManagerForAgricultureExtensionId"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<DataManagerForAgricultureExtensionResource> GetDataManagerForAgricultureExtension(string dataManagerForAgricultureExtensionId, CancellationToken cancellationToken = default)
        {
            return GetDataManagerForAgricultureExtensions().Get(dataManagerForAgricultureExtensionId, cancellationToken);
        }

        /// <summary> Gets a collection of DataManagerForAgricultureSolutionResources in the TenantResource. </summary>
        /// <returns> An object representing collection of DataManagerForAgricultureSolutionResources and their operations over a DataManagerForAgricultureSolutionResource. </returns>
        public virtual DataManagerForAgricultureSolutionCollection GetDataManagerForAgricultureSolutions()
        {
            return GetCachedClient(client => new DataManagerForAgricultureSolutionCollection(client, Id));
        }

        /// <summary>
        /// Get Data Manager For Agriculture solution by id.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Azure.ResourceManager.AgFoodPlatform/farmBeatsSolutionDefinitions/{dataManagerForAgricultureSolutionId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgricultureSolutions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureSolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dataManagerForAgricultureSolutionId"> dataManagerForAgricultureSolutionId to be queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataManagerForAgricultureSolutionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataManagerForAgricultureSolutionId"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<DataManagerForAgricultureSolutionResource>> GetDataManagerForAgricultureSolutionAsync(string dataManagerForAgricultureSolutionId, CancellationToken cancellationToken = default)
        {
            return await GetDataManagerForAgricultureSolutions().GetAsync(dataManagerForAgricultureSolutionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get Data Manager For Agriculture solution by id.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Azure.ResourceManager.AgFoodPlatform/farmBeatsSolutionDefinitions/{dataManagerForAgricultureSolutionId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DataManagerForAgricultureSolutions_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DataManagerForAgricultureSolutionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dataManagerForAgricultureSolutionId"> dataManagerForAgricultureSolutionId to be queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataManagerForAgricultureSolutionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="dataManagerForAgricultureSolutionId"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<DataManagerForAgricultureSolutionResource> GetDataManagerForAgricultureSolution(string dataManagerForAgricultureSolutionId, CancellationToken cancellationToken = default)
        {
            return GetDataManagerForAgricultureSolutions().Get(dataManagerForAgricultureSolutionId, cancellationToken);
        }

        /// <summary>
        /// List the operations for the provider
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Azure.ResourceManager.AgFoodPlatform/operations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Operations_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Models.Operation"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Models.Operation> GetOperationsAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => OperationsRestClient.CreateListRequest();
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => OperationsRestClient.CreateListNextPageRequest(nextLink);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => Models.Operation.DeserializeOperation(e), OperationsClientDiagnostics, Pipeline, "MockableAgFoodPlatformTenantResource.GetOperations", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List the operations for the provider
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Azure.ResourceManager.AgFoodPlatform/operations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Operations_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-06-01-preview</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Models.Operation"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Models.Operation> GetOperations(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => OperationsRestClient.CreateListRequest();
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => OperationsRestClient.CreateListNextPageRequest(nextLink);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => Models.Operation.DeserializeOperation(e), OperationsClientDiagnostics, Pipeline, "MockableAgFoodPlatformTenantResource.GetOperations", "value", "nextLink", cancellationToken);
        }
    }
}
