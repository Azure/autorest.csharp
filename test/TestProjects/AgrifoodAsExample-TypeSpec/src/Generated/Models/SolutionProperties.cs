// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.AgFoodPlatform.Models
{
    /// <summary> Solution resource properties. </summary>
    public partial class SolutionProperties
    {
        /// <summary> Initializes a new instance of <see cref="SolutionProperties"/>. </summary>
        /// <param name="saasSubscriptionId"> SaaS subscriptionId of the installed SaaS application. </param>
        /// <param name="saasSubscriptionName"> SaaS subscription name of the installed SaaS application. </param>
        /// <param name="marketplacePublisherId"> SaaS application Marketplace Publisher Id. </param>
        /// <param name="planId"> SaaS application Plan Id. </param>
        /// <param name="offerId"> SaaS application Offer Id. </param>
        /// <param name="termId"> SaaS application Term Id. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="saasSubscriptionId"/>, <paramref name="saasSubscriptionName"/>, <paramref name="marketplacePublisherId"/>, <paramref name="planId"/>, <paramref name="offerId"/> or <paramref name="termId"/> is null. </exception>
        public SolutionProperties(string saasSubscriptionId, string saasSubscriptionName, string marketplacePublisherId, string planId, string offerId, string termId)
        {
            Argument.AssertNotNull(saasSubscriptionId, nameof(saasSubscriptionId));
            Argument.AssertNotNull(saasSubscriptionName, nameof(saasSubscriptionName));
            Argument.AssertNotNull(marketplacePublisherId, nameof(marketplacePublisherId));
            Argument.AssertNotNull(planId, nameof(planId));
            Argument.AssertNotNull(offerId, nameof(offerId));
            Argument.AssertNotNull(termId, nameof(termId));

            SaasSubscriptionId = saasSubscriptionId;
            SaasSubscriptionName = saasSubscriptionName;
            MarketplacePublisherId = marketplacePublisherId;
            PlanId = planId;
            OfferId = offerId;
            TermId = termId;
            AdditionalProperties = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of <see cref="SolutionProperties"/>. </summary>
        /// <param name="partnerId"> Partner Id of the Solution. </param>
        /// <param name="saasSubscriptionId"> SaaS subscriptionId of the installed SaaS application. </param>
        /// <param name="saasSubscriptionName"> SaaS subscription name of the installed SaaS application. </param>
        /// <param name="marketplacePublisherId"> SaaS application Marketplace Publisher Id. </param>
        /// <param name="planId"> SaaS application Plan Id. </param>
        /// <param name="roleAssignmentId"> Role Assignment Id. </param>
        /// <param name="offerId"> SaaS application Offer Id. </param>
        /// <param name="termId"> SaaS application Term Id. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        internal SolutionProperties(string partnerId, string saasSubscriptionId, string saasSubscriptionName, string marketplacePublisherId, string planId, string roleAssignmentId, string offerId, string termId, IDictionary<string, BinaryData> additionalProperties)
        {
            PartnerId = partnerId;
            SaasSubscriptionId = saasSubscriptionId;
            SaasSubscriptionName = saasSubscriptionName;
            MarketplacePublisherId = marketplacePublisherId;
            PlanId = planId;
            RoleAssignmentId = roleAssignmentId;
            OfferId = offerId;
            TermId = termId;
            AdditionalProperties = additionalProperties;
        }

        /// <summary> Initializes a new instance of <see cref="SolutionProperties"/> for deserialization. </summary>
        internal SolutionProperties()
        {
        }

        /// <summary> Partner Id of the Solution. </summary>
        public string PartnerId { get; }
        /// <summary> SaaS subscriptionId of the installed SaaS application. </summary>
        public string SaasSubscriptionId { get; set; }
        /// <summary> SaaS subscription name of the installed SaaS application. </summary>
        public string SaasSubscriptionName { get; set; }
        /// <summary> SaaS application Marketplace Publisher Id. </summary>
        public string MarketplacePublisherId { get; set; }
        /// <summary> SaaS application Plan Id. </summary>
        public string PlanId { get; set; }
        /// <summary> Role Assignment Id. </summary>
        public string RoleAssignmentId { get; set; }
        /// <summary> SaaS application Offer Id. </summary>
        public string OfferId { get; set; }
        /// <summary> SaaS application Term Id. </summary>
        public string TermId { get; set; }
        /// <summary>
        /// Additional Properties
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IDictionary<string, BinaryData> AdditionalProperties { get; }
    }
}
