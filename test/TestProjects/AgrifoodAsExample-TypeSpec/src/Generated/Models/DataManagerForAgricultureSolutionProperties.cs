// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.AgFoodPlatform.Models
{
    /// <summary> DataManagerForAgricultureSolution properties. </summary>
    public partial class DataManagerForAgricultureSolutionProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DataManagerForAgricultureSolutionProperties"/>. </summary>
        internal DataManagerForAgricultureSolutionProperties()
        {
            DataAccessScopes = new ChangeTrackingList<string>();
            OpenApiSpecsDictionary = new ChangeTrackingDictionary<string, BinaryData>();
            ActionIds = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="DataManagerForAgricultureSolutionProperties"/>. </summary>
        /// <param name="partnerId"> Solution Partner Id. </param>
        /// <param name="partnerTenantId"> Solution Partner Tenant Id. </param>
        /// <param name="dataAccessScopes">
        /// Gets scope of the Data manager For Agriculture data access that's required for processing solution request to partner.
        /// Example: For gdd they might need weatherScope and satelliteScope.
        /// </param>
        /// <param name="marketplaceOfferDetails"></param>
        /// <param name="openApiSpecsDictionary"> Gets api-version Swagger Document Dictionary to capture all api-versions of swagger exposed by partner to Data Manager For Agriculture. </param>
        /// <param name="accessFBApplicationId"> Application id of the multi tenant application to be used by partner to access Data Manager For Agriculture data. </param>
        /// <param name="saaSApplicationId"> Application id of the SaaS multi tenant application. </param>
        /// <param name="actionIds"> List of ActionIds needed to make the SaaS multi tenant application access relevant fb data. </param>
        /// <param name="roleId"> Role Id of the SaaS multi tenant application to access relevant fb data. </param>
        /// <param name="roleName"> Role Name of the SaaS multi tenant application to access relevant fb data. </param>
        /// <param name="accessFBApplicationName"> Application name of the multi tenant application to be used by partner to access Data Manager For Agriculture Data. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DataManagerForAgricultureSolutionProperties(string partnerId, string partnerTenantId, IReadOnlyList<string> dataAccessScopes, MarketplaceOfferDetails marketplaceOfferDetails, IReadOnlyDictionary<string, BinaryData> openApiSpecsDictionary, string accessFBApplicationId, string saaSApplicationId, IReadOnlyList<string> actionIds, string roleId, string roleName, string accessFBApplicationName, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            PartnerId = partnerId;
            PartnerTenantId = partnerTenantId;
            DataAccessScopes = dataAccessScopes;
            MarketplaceOfferDetails = marketplaceOfferDetails;
            OpenApiSpecsDictionary = openApiSpecsDictionary;
            AccessFBApplicationId = accessFBApplicationId;
            SaaSApplicationId = saaSApplicationId;
            ActionIds = actionIds;
            RoleId = roleId;
            RoleName = roleName;
            AccessFBApplicationName = accessFBApplicationName;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Solution Partner Id. </summary>
        public string PartnerId { get; }
        /// <summary> Solution Partner Tenant Id. </summary>
        public string PartnerTenantId { get; }
        /// <summary>
        /// Gets scope of the Data manager For Agriculture data access that's required for processing solution request to partner.
        /// Example: For gdd they might need weatherScope and satelliteScope.
        /// </summary>
        public IReadOnlyList<string> DataAccessScopes { get; }
        /// <summary> Gets the marketplace offer details. </summary>
        public MarketplaceOfferDetails MarketplaceOfferDetails { get; }
        /// <summary>
        /// Gets api-version Swagger Document Dictionary to capture all api-versions of swagger exposed by partner to Data Manager For Agriculture.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyDictionary<string, BinaryData> OpenApiSpecsDictionary { get; }
        /// <summary> Application id of the multi tenant application to be used by partner to access Data Manager For Agriculture data. </summary>
        public string AccessFBApplicationId { get; }
        /// <summary> Application id of the SaaS multi tenant application. </summary>
        public string SaaSApplicationId { get; }
        /// <summary> List of ActionIds needed to make the SaaS multi tenant application access relevant fb data. </summary>
        public IReadOnlyList<string> ActionIds { get; }
        /// <summary> Role Id of the SaaS multi tenant application to access relevant fb data. </summary>
        public string RoleId { get; }
        /// <summary> Role Name of the SaaS multi tenant application to access relevant fb data. </summary>
        public string RoleName { get; }
        /// <summary> Application name of the multi tenant application to be used by partner to access Data Manager For Agriculture Data. </summary>
        public string AccessFBApplicationName { get; }
    }
}
