// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AgFoodPlatform.Models
{
    public partial class DataManagerForAgricultureSolutionProperties : IUtf8JsonSerializable, IJsonModel<DataManagerForAgricultureSolutionProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<DataManagerForAgricultureSolutionProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<DataManagerForAgricultureSolutionProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DataManagerForAgricultureSolutionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DataManagerForAgricultureSolutionProperties)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(PartnerId))
            {
                writer.WritePropertyName("partnerId"u8);
                writer.WriteStringValue(PartnerId);
            }
            if (options.Format != "W" && Optional.IsDefined(PartnerTenantId))
            {
                writer.WritePropertyName("partnerTenantId"u8);
                writer.WriteStringValue(PartnerTenantId);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(DataAccessScopes))
            {
                writer.WritePropertyName("dataAccessScopes"u8);
                writer.WriteStartArray();
                foreach (var item in DataAccessScopes)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(MarketplaceOfferDetails))
            {
                writer.WritePropertyName("marketplaceOfferDetails"u8);
                writer.WriteObjectValue(MarketplaceOfferDetails, options);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(OpenApiSpecsDictionary))
            {
                writer.WritePropertyName("openApiSpecsDictionary"u8);
                writer.WriteStartObject();
                foreach (var item in OpenApiSpecsDictionary)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && Optional.IsDefined(AccessFBApplicationId))
            {
                writer.WritePropertyName("accessFBApplicationId"u8);
                writer.WriteStringValue(AccessFBApplicationId);
            }
            if (options.Format != "W" && Optional.IsDefined(SaaSApplicationId))
            {
                writer.WritePropertyName("saaSApplicationId"u8);
                writer.WriteStringValue(SaaSApplicationId);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(ActionIds))
            {
                writer.WritePropertyName("actionIds"u8);
                writer.WriteStartArray();
                foreach (var item in ActionIds)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(RoleId))
            {
                writer.WritePropertyName("roleId"u8);
                writer.WriteStringValue(RoleId);
            }
            if (options.Format != "W" && Optional.IsDefined(RoleName))
            {
                writer.WritePropertyName("roleName"u8);
                writer.WriteStringValue(RoleName);
            }
            if (options.Format != "W" && Optional.IsDefined(AccessFBApplicationName))
            {
                writer.WritePropertyName("accessFBApplicationName"u8);
                writer.WriteStringValue(AccessFBApplicationName);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        DataManagerForAgricultureSolutionProperties IJsonModel<DataManagerForAgricultureSolutionProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DataManagerForAgricultureSolutionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DataManagerForAgricultureSolutionProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDataManagerForAgricultureSolutionProperties(document.RootElement, options);
        }

        internal static DataManagerForAgricultureSolutionProperties DeserializeDataManagerForAgricultureSolutionProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string partnerId = default;
            string partnerTenantId = default;
            IReadOnlyList<string> dataAccessScopes = default;
            MarketplaceOfferDetails marketplaceOfferDetails = default;
            IReadOnlyDictionary<string, BinaryData> openApiSpecsDictionary = default;
            string accessFBApplicationId = default;
            string saaSApplicationId = default;
            IReadOnlyList<string> actionIds = default;
            string roleId = default;
            string roleName = default;
            string accessFBApplicationName = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("partnerId"u8))
                {
                    partnerId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("partnerTenantId"u8))
                {
                    partnerTenantId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dataAccessScopes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    dataAccessScopes = array;
                    continue;
                }
                if (property.NameEquals("marketplaceOfferDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    marketplaceOfferDetails = MarketplaceOfferDetails.DeserializeMarketplaceOfferDetails(property.Value, options);
                    continue;
                }
                if (property.NameEquals("openApiSpecsDictionary"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, BinaryData.FromString(property0.Value.GetRawText()));
                        }
                    }
                    openApiSpecsDictionary = dictionary;
                    continue;
                }
                if (property.NameEquals("accessFBApplicationId"u8))
                {
                    accessFBApplicationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("saaSApplicationId"u8))
                {
                    saaSApplicationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("actionIds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    actionIds = array;
                    continue;
                }
                if (property.NameEquals("roleId"u8))
                {
                    roleId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("roleName"u8))
                {
                    roleName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("accessFBApplicationName"u8))
                {
                    accessFBApplicationName = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new DataManagerForAgricultureSolutionProperties(
                partnerId,
                partnerTenantId,
                dataAccessScopes ?? new ChangeTrackingList<string>(),
                marketplaceOfferDetails,
                openApiSpecsDictionary ?? new ChangeTrackingDictionary<string, BinaryData>(),
                accessFBApplicationId,
                saaSApplicationId,
                actionIds ?? new ChangeTrackingList<string>(),
                roleId,
                roleName,
                accessFBApplicationName,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<DataManagerForAgricultureSolutionProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DataManagerForAgricultureSolutionProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(DataManagerForAgricultureSolutionProperties)} does not support writing '{options.Format}' format.");
            }
        }

        DataManagerForAgricultureSolutionProperties IPersistableModel<DataManagerForAgricultureSolutionProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DataManagerForAgricultureSolutionProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeDataManagerForAgricultureSolutionProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DataManagerForAgricultureSolutionProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<DataManagerForAgricultureSolutionProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
