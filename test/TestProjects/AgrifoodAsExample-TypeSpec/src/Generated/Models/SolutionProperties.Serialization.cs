// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AgFoodPlatform.Models
{
    public partial class SolutionProperties : IUtf8JsonSerializable, IJsonModel<SolutionProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SolutionProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<SolutionProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SolutionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SolutionProperties)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(PartnerId))
            {
                writer.WritePropertyName("partnerId"u8);
                writer.WriteStringValue(PartnerId);
            }
            writer.WritePropertyName("saasSubscriptionId"u8);
            writer.WriteStringValue(SaasSubscriptionId);
            writer.WritePropertyName("saasSubscriptionName"u8);
            writer.WriteStringValue(SaasSubscriptionName);
            writer.WritePropertyName("marketplacePublisherId"u8);
            writer.WriteStringValue(MarketplacePublisherId);
            writer.WritePropertyName("planId"u8);
            writer.WriteStringValue(PlanId);
            if (Optional.IsDefined(RoleAssignmentId))
            {
                writer.WritePropertyName("roleAssignmentId"u8);
                writer.WriteStringValue(RoleAssignmentId);
            }
            writer.WritePropertyName("offerId"u8);
            writer.WriteStringValue(OfferId);
            writer.WritePropertyName("termId"u8);
            writer.WriteStringValue(TermId);
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                using (JsonDocument document = JsonDocument.Parse(item.Value))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            writer.WriteEndObject();
        }

        SolutionProperties IJsonModel<SolutionProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SolutionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SolutionProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSolutionProperties(document.RootElement, options);
        }

        internal static SolutionProperties DeserializeSolutionProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string partnerId = default;
            string saasSubscriptionId = default;
            string saasSubscriptionName = default;
            string marketplacePublisherId = default;
            string planId = default;
            string roleAssignmentId = default;
            string offerId = default;
            string termId = default;
            IDictionary<string, BinaryData> additionalProperties = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("partnerId"u8))
                {
                    partnerId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("saasSubscriptionId"u8))
                {
                    saasSubscriptionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("saasSubscriptionName"u8))
                {
                    saasSubscriptionName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("marketplacePublisherId"u8))
                {
                    marketplacePublisherId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("planId"u8))
                {
                    planId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("roleAssignmentId"u8))
                {
                    roleAssignmentId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("offerId"u8))
                {
                    offerId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("termId"u8))
                {
                    termId = property.Value.GetString();
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new SolutionProperties(
                partnerId,
                saasSubscriptionId,
                saasSubscriptionName,
                marketplacePublisherId,
                planId,
                roleAssignmentId,
                offerId,
                termId,
                additionalProperties);
        }

        BinaryData IPersistableModel<SolutionProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SolutionProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(SolutionProperties)} does not support writing '{options.Format}' format.");
            }
        }

        SolutionProperties IPersistableModel<SolutionProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SolutionProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeSolutionProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SolutionProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<SolutionProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
