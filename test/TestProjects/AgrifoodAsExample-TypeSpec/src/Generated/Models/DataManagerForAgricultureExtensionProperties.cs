// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.AgFoodPlatform.Models
{
    /// <summary> DataManagerForAgricultureExtension properties. </summary>
    public partial class DataManagerForAgricultureExtensionProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DataManagerForAgricultureExtensionProperties"/>. </summary>
        internal DataManagerForAgricultureExtensionProperties()
        {
            DetailedInformation = new ChangeTrackingList<DetailedInformation>();
        }

        /// <summary> Initializes a new instance of <see cref="DataManagerForAgricultureExtensionProperties"/>. </summary>
        /// <param name="targetResourceType"> Target ResourceType of the Data Manager For Agriculture Extension. </param>
        /// <param name="farmBeatsExtensionId"> Data Manager For Agriculture Extension ID. </param>
        /// <param name="farmBeatsExtensionName"> Data Manager For Agriculture Extension name. </param>
        /// <param name="farmBeatsExtensionVersion"> Data Manager For Agriculture Extension version. </param>
        /// <param name="publisherId"> Publisher ID. </param>
        /// <param name="description"> Textual description. </param>
        /// <param name="extensionCategory"> Category of the extension. e.g. weather/sensor/satellite. </param>
        /// <param name="extensionAuthLink"> Data Manager For Agriculture Extension auth link. </param>
        /// <param name="extensionApiDocsLink"> Data Manager For Agriculture Extension api docs link. </param>
        /// <param name="detailedInformation">
        /// Detailed information which shows summary of requested data.
        /// Used in descriptive get extension metadata call.
        /// Information for weather category per api included are apisSupported,
        /// customParameters, PlatformParameters and Units supported.
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DataManagerForAgricultureExtensionProperties(string targetResourceType, string farmBeatsExtensionId, string farmBeatsExtensionName, string farmBeatsExtensionVersion, string publisherId, string description, string extensionCategory, string extensionAuthLink, string extensionApiDocsLink, IReadOnlyList<DetailedInformation> detailedInformation, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            TargetResourceType = targetResourceType;
            FarmBeatsExtensionId = farmBeatsExtensionId;
            FarmBeatsExtensionName = farmBeatsExtensionName;
            FarmBeatsExtensionVersion = farmBeatsExtensionVersion;
            PublisherId = publisherId;
            Description = description;
            ExtensionCategory = extensionCategory;
            ExtensionAuthLink = extensionAuthLink;
            ExtensionApiDocsLink = extensionApiDocsLink;
            DetailedInformation = detailedInformation;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Target ResourceType of the Data Manager For Agriculture Extension. </summary>
        public string TargetResourceType { get; }
        /// <summary> Data Manager For Agriculture Extension ID. </summary>
        public string FarmBeatsExtensionId { get; }
        /// <summary> Data Manager For Agriculture Extension name. </summary>
        public string FarmBeatsExtensionName { get; }
        /// <summary> Data Manager For Agriculture Extension version. </summary>
        public string FarmBeatsExtensionVersion { get; }
        /// <summary> Publisher ID. </summary>
        public string PublisherId { get; }
        /// <summary> Textual description. </summary>
        public string Description { get; }
        /// <summary> Category of the extension. e.g. weather/sensor/satellite. </summary>
        public string ExtensionCategory { get; }
        /// <summary> Data Manager For Agriculture Extension auth link. </summary>
        public string ExtensionAuthLink { get; }
        /// <summary> Data Manager For Agriculture Extension api docs link. </summary>
        public string ExtensionApiDocsLink { get; }
        /// <summary>
        /// Detailed information which shows summary of requested data.
        /// Used in descriptive get extension metadata call.
        /// Information for weather category per api included are apisSupported,
        /// customParameters, PlatformParameters and Units supported.
        /// </summary>
        public IReadOnlyList<DetailedInformation> DetailedInformation { get; }
    }
}
