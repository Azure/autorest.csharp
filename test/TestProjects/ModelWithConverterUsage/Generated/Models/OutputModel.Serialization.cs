// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;
using Azure.Core.Serialization;

namespace ModelWithConverterUsage.Models
{
    [JsonConverter(typeof(OutputModelConverter))]
    public partial class OutputModel : IUtf8JsonSerializable, IJsonModelSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModelSerializable)this).Serialize(writer, ModelSerializerOptions.AzureServiceDefault);

        void IJsonModelSerializable.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(OutputModelProperty))
            {
                writer.WritePropertyName("Output_Model_Property"u8);
                writer.WriteStringValue(OutputModelProperty);
            }
            writer.WriteEndObject();
        }

        object IModelSerializable.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            using var doc = JsonDocument.Parse(data);
            return DeserializeOutputModel(doc.RootElement, options);
        }

        internal static OutputModel DeserializeOutputModel(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.AzureServiceDefault;
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> outputModelProperty = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("Output_Model_Property"u8))
                {
                    outputModelProperty = property.Value.GetString();
                    continue;
                }
            }
            return new OutputModel(outputModelProperty.Value);
        }

        object IJsonModelSerializable.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeOutputModel(doc.RootElement, options);
        }

        internal partial class OutputModelConverter : JsonConverter<OutputModel>
        {
            public override void Write(Utf8JsonWriter writer, OutputModel model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override OutputModel Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeOutputModel(document.RootElement);
            }
        }
    }
}
