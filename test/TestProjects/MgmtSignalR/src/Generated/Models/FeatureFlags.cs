// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace MgmtSignalR.Models
{
    /// <summary>
    /// FeatureFlags is the supported features of Azure SignalR service.
    /// - ServiceMode: Flag for backend server for SignalR service. Values allowed: &quot;Default&quot;: have your own backend server; &quot;Serverless&quot;: your application doesn&apos;t have a backend server; &quot;Classic&quot;: for backward compatibility. Support both Default and Serverless mode but not recommended; &quot;PredefinedOnly&quot;: for future use.
    /// - EnableConnectivityLogs: &quot;true&quot;/&quot;false&quot;, to enable/disable the connectivity log category respectively.
    /// </summary>
    public readonly partial struct FeatureFlags : IEquatable<FeatureFlags>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FeatureFlags"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FeatureFlags(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ServiceModeValue = "ServiceMode";
        private const string EnableConnectivityLogsValue = "EnableConnectivityLogs";
        private const string EnableMessagingLogsValue = "EnableMessagingLogs";

        /// <summary> ServiceMode. </summary>
        public static FeatureFlags ServiceMode { get; } = new FeatureFlags(ServiceModeValue);
        /// <summary> EnableConnectivityLogs. </summary>
        public static FeatureFlags EnableConnectivityLogs { get; } = new FeatureFlags(EnableConnectivityLogsValue);
        /// <summary> EnableMessagingLogs. </summary>
        public static FeatureFlags EnableMessagingLogs { get; } = new FeatureFlags(EnableMessagingLogsValue);
        /// <summary> Determines if two <see cref="FeatureFlags"/> values are the same. </summary>
        public static bool operator ==(FeatureFlags left, FeatureFlags right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FeatureFlags"/> values are not the same. </summary>
        public static bool operator !=(FeatureFlags left, FeatureFlags right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FeatureFlags"/>. </summary>
        public static implicit operator FeatureFlags(string value) => new FeatureFlags(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FeatureFlags other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FeatureFlags other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
