// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;
using MgmtSignalR;

namespace MgmtSignalR.Models
{
    /// <summary> A class that describes the properties of the resource. </summary>
    internal partial class SignalRProperties : SignalRCreateOrUpdateProperties
    {
        /// <summary> Initializes a new instance of SignalRProperties. </summary>
        internal SignalRProperties()
        {
            PrivateEndpointConnections = new ChangeTrackingList<PrivateEndpointConnectionData>();
        }

        /// <summary> Provisioning state of the resource. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary> The publicly accessible IP of the resource. </summary>
        public string ExternalIP { get; }
        /// <summary> FQDN of the service instance. </summary>
        public string HostName { get; }
        /// <summary> The publicly accessible port of the resource which is designed for browser/client side usage. </summary>
        public int? PublicPort { get; }
        /// <summary> The publicly accessible port of the resource which is designed for customer server side usage. </summary>
        public int? ServerPort { get; }
        /// <summary> Version of the resource. Probably you need the same or higher version of client SDKs. </summary>
        public string Version { get; }
        /// <summary> Private endpoint connections to the resource. </summary>
        public IReadOnlyList<PrivateEndpointConnectionData> PrivateEndpointConnections { get; }
        /// <summary> TLS settings. </summary>
        internal SignalRTlsSettings Tls { get; }
        /// <summary> Request client certificate during TLS handshake if enabled. </summary>
        public bool? ClientCertEnabled
        {
            get => Tls.ClientCertEnabled;
            set => Tls.ClientCertEnabled = value;
        }
    }
}
