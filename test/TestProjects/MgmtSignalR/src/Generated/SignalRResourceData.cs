// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using MgmtSignalR.Models;

namespace MgmtSignalR
{
    /// <summary> A class representing the SignalRResource data model. </summary>
    public partial class SignalRResourceData : TrackedResourceData
    {
        /// <summary> Initializes a new instance of SignalRResourceData. </summary>
        /// <param name="location"> The location. </param>
        public SignalRResourceData(AzureLocation location) : base(location)
        {
            Features = new ChangeTrackingList<SignalRFeature>();
            PrivateEndpointConnections = new ChangeTrackingList<PrivateEndpointConnectionData>();
        }

        /// <summary> Initializes a new instance of SignalRResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sku"> The billing information of the resource.(e.g. Free, Standard). </param>
        /// <param name="kind"> The kind of the service - e.g. &quot;SignalR&quot; for &quot;Microsoft.SignalRService/SignalR&quot;. </param>
        /// <param name="identity"> The managed identity response. </param>
        /// <param name="features">
        /// List of SignalR featureFlags. e.g. ServiceMode.
        /// 
        /// FeatureFlags that are not included in the parameters for the update operation will not be modified.
        /// And the response will only include featureFlags that are explicitly set. 
        /// When a featureFlag is not explicitly set, SignalR service will use its globally default value. 
        /// But keep in mind, the default value doesn&apos;t mean &quot;false&quot;. It varies in terms of different FeatureFlags.
        /// </param>
        /// <param name="cors"> Cross-Origin Resource Sharing (CORS) settings. </param>
        /// <param name="upstream"> Upstream settings when the Azure SignalR is in server-less mode. </param>
        /// <param name="networkACLs"> Network ACLs. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <param name="externalIP"> The publicly accessible IP of the resource. </param>
        /// <param name="hostName"> FQDN of the service instance. </param>
        /// <param name="publicPort"> The publicly accessible port of the resource which is designed for browser/client side usage. </param>
        /// <param name="serverPort"> The publicly accessible port of the resource which is designed for customer server side usage. </param>
        /// <param name="version"> Version of the resource. Probably you need the same or higher version of client SDKs. </param>
        /// <param name="privateEndpointConnections"> Private endpoint connections to the resource. </param>
        /// <param name="tls"> TLS settings. </param>
        internal SignalRResourceData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, ResourceSku sku, ServiceKind? kind, ManagedIdentity identity, IList<SignalRFeature> features, SignalRCorsSettings cors, ServerlessUpstreamSettings upstream, SignalRNetworkACLs networkACLs, ProvisioningState? provisioningState, string externalIP, string hostName, int? publicPort, int? serverPort, string version, IReadOnlyList<PrivateEndpointConnectionData> privateEndpointConnections, SignalRTlsSettings tls) : base(id, name, resourceType, systemData, tags, location)
        {
            Sku = sku;
            Kind = kind;
            Identity = identity;
            Features = features;
            Cors = cors;
            Upstream = upstream;
            NetworkACLs = networkACLs;
            ProvisioningState = provisioningState;
            ExternalIP = externalIP;
            HostName = hostName;
            PublicPort = publicPort;
            ServerPort = serverPort;
            Version = version;
            PrivateEndpointConnections = privateEndpointConnections;
            Tls = tls;
        }

        /// <summary> The billing information of the resource.(e.g. Free, Standard). </summary>
        public ResourceSku Sku { get; set; }
        /// <summary> The kind of the service - e.g. &quot;SignalR&quot; for &quot;Microsoft.SignalRService/SignalR&quot;. </summary>
        public ServiceKind? Kind { get; set; }
        /// <summary> The managed identity response. </summary>
        public ManagedIdentity Identity { get; set; }
        /// <summary>
        /// List of SignalR featureFlags. e.g. ServiceMode.
        /// 
        /// FeatureFlags that are not included in the parameters for the update operation will not be modified.
        /// And the response will only include featureFlags that are explicitly set. 
        /// When a featureFlag is not explicitly set, SignalR service will use its globally default value. 
        /// But keep in mind, the default value doesn&apos;t mean &quot;false&quot;. It varies in terms of different FeatureFlags.
        /// </summary>
        public IList<SignalRFeature> Features { get; }
        /// <summary> Cross-Origin Resource Sharing (CORS) settings. </summary>
        internal SignalRCorsSettings Cors { get; set; }
        /// <summary> Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use &quot;*&quot; to allow all. If omitted, allow all by default. </summary>
        public IList<string> CorsAllowedOrigins
        {
            get
            {
                if (Cors is null)
                    Cors = new SignalRCorsSettings();
                return Cors.AllowedOrigins;
            }
        }

        /// <summary> Upstream settings when the Azure SignalR is in server-less mode. </summary>
        internal ServerlessUpstreamSettings Upstream { get; set; }
        /// <summary> Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects. </summary>
        public IList<UpstreamTemplate> UpstreamTemplates
        {
            get
            {
                if (Upstream is null)
                    Upstream = new ServerlessUpstreamSettings();
                return Upstream.Templates;
            }
        }

        /// <summary> Network ACLs. </summary>
        public SignalRNetworkACLs NetworkACLs { get; set; }
        /// <summary> Provisioning state of the resource. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary> The publicly accessible IP of the resource. </summary>
        public string ExternalIP { get; }
        /// <summary> FQDN of the service instance. </summary>
        public string HostName { get; }
        /// <summary> The publicly accessible port of the resource which is designed for browser/client side usage. </summary>
        public int? PublicPort { get; }
        /// <summary> The publicly accessible port of the resource which is designed for customer server side usage. </summary>
        public int? ServerPort { get; }
        /// <summary> Version of the resource. Probably you need the same or higher version of client SDKs. </summary>
        public string Version { get; }
        /// <summary> Private endpoint connections to the resource. </summary>
        public IReadOnlyList<PrivateEndpointConnectionData> PrivateEndpointConnections { get; }
        /// <summary> TLS settings. </summary>
        internal SignalRTlsSettings Tls { get; set; }
        /// <summary> Request client certificate during TLS handshake if enabled. </summary>
        public bool? ClientCertEnabled
        {
            get => Tls is null ? default : Tls.ClientCertEnabled;
            set
            {
                if (Tls is null)
                    Tls = new SignalRTlsSettings();
                Tls.ClientCertEnabled = value;
            }
        }
    }
}
