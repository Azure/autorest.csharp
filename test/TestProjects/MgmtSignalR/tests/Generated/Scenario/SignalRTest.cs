// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;
using MgmtSignalR;
using MgmtSignalR.Models;

namespace MgmtSignalR.Tests.Scenario
{
    /// <summary> Test generated from Api Scenario scenarios\signalR.yaml. </summary>
    public partial class SignalR : ManagementRecordedTestBase<KeyVaultTestEnvironment>
    {
        ResourceGroupResource resourceGroup;
        string subscriptionId = Environment.GetEnvironmentVariable("SUBSCRIPTION_ID") ?? "00000000-00000000-00000000-00000000";
        string location = Environment.GetEnvironmentVariable("LOCATION") ?? "westus";
        string resourceGroupName = Environment.GetEnvironmentVariable("RESOURCE_GROUP_NAME") ?? "scenarioTestTempGroup";
        string resourceName = "signalrswaggertest4";

        public SignalR(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
        }

        [RecordedTest]
        public async Task MicrosoftSignalRServiceBasicCRUD()
        {
            // API Scenario: Microsoft.SignalRService/Basic_CRUD
            string resourceNameBackup = resourceName;
            string name = "$(name)";
            resourceName = $"{resourceName}";
            Console.WriteLine($"Scenario variables: name -> $\"{name}\", resourceName -> $\"{resourceName}\", ");

            resourceGroupName = Recording.GenerateAssetName(resourceGroupName);
            resourceGroup = (await GetArmClient().GetSubscriptionResource(new ResourceIdentifier($"/subscriptions/{subscriptionId}")).GetResourceGroups().CreateOrUpdateAsync(WaitUntil.Completed, resourceGroupName, new ResourceGroupData(new AzureLocation(location)))).Value;
            {
                // Step: Generate_Unique_Name

                var templatePayload = $@"{{
    ""$schema"": ""https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"",
    ""contentVersion"": ""1.0.0.0"",
    ""variables"": {{
        ""name"": {{
            ""value"": ""[concat('sw',uniqueString(resourceGroup().id))]"",
            ""metadata"": {{
                ""description"": ""Name of the SignalR service.""
            }},
            ""type"": ""string""
        }}
    }},
    ""resources"": [],
    ""outputs"": {{
        ""name"": {{
            ""type"": ""string"",
            ""value"": ""[variables('name').value]""
        }},
        ""resourceName"": {{
            ""type"": ""string"",
            ""value"": ""[variables('name').value]""
        }}
    }}
}}";
                var deploymentOperation = await resourceGroup.GetArmDeployments().CreateOrUpdateAsync(WaitUntil.Completed, "Generate_Unique_Name", new ArmDeploymentInput(new ArmDeploymentProperties(ArmDeploymentMode.Complete)
                {
                    Template = BinaryData.FromString(templatePayload),
                }));
                var deployOutputs = deploymentOperation.Value.Data.Properties.Outputs.ToObjectFromJson<Dictionary<string, object>>();
                if (deployOutputs.ContainsKey("name") && deployOutputs["name"] is Dictionary<string, object> nameOutput)
                {
                    name = nameOutput["value"].ToString();
                }
                if (deployOutputs.ContainsKey("resourceName") && deployOutputs["resourceName"] is Dictionary<string, object> resourceNameOutput)
                {
                    resourceName = resourceNameOutput["value"].ToString();
                }
            }

            {
                // Step: SignalR_CheckNameAvailability

                var subscriptionResource = GetArmClient().GetSubscriptionResource(SubscriptionResource.CreateResourceIdentifier($"{subscriptionId}"));
                string location0 = $"{location}";
                MgmtSignalR.Models.NameAvailabilityParameters nameAvailabilityParameters = new MgmtSignalR.Models.NameAvailabilityParameters(resourceType: "Microsoft.SignalRService/SignalR", name: "my-signalr-service");

                await subscriptionResource.CheckNameAvailabilitySignalRAsync(location0, nameAvailabilityParameters);
            }

            {
                // Step: SignalR_CreateOrUpdate

                string resourceName0 = $"{resourceName}";
                MgmtSignalR.SignalRResourceData data = new MgmtSignalR.SignalRResourceData(location: new AzureLocation($"{location}"))
                {
                    Sku = new MgmtSignalR.Models.ResourceSku(name: "Standard_S1")
                    {
                        Tier = new MgmtSignalR.Models.SignalRSkuTier("Standard"),
                        Capacity = 1,
                    },
                    Kind = new MgmtSignalR.Models.ServiceKind("SignalR"),
                    Identity = new MgmtSignalR.Models.ManagedIdentity()
                    {
                        ManagedIdentityType = new MgmtSignalR.Models.ManagedIdentityType("SystemAssigned"),
                    },
                    NetworkACLs = new MgmtSignalR.Models.SignalRNetworkACLs()
                    {
                        DefaultAction = new MgmtSignalR.Models.ACLAction("Deny"),
                        PublicNetwork = new MgmtSignalR.Models.NetworkACL(),
                    },
                };
                data.NetworkACLs.PublicNetwork.Allow.Add(new MgmtSignalR.Models.SignalRRequestType("ClientConnection"));
                data.NetworkACLs.PrivateEndpoints.Add(new MgmtSignalR.Models.PrivateEndpointACL(name: $"{resourceName}.1fa229cd-bf3f-47f0-8c49-afb36723997e"));
                data.Tags.ReplaceWith(new Dictionary<string, string>()
                {
                    ["key1"] = "value1",
                });
                data.Features.Add(new MgmtSignalR.Models.SignalRFeature(flag: new MgmtSignalR.Models.FeatureFlags("ServiceMode"), value: "Serverless"));
                data.Features.Add(new MgmtSignalR.Models.SignalRFeature(flag: new MgmtSignalR.Models.FeatureFlags("EnableConnectivityLogs"), value: "True"));
                data.Features.Add(new MgmtSignalR.Models.SignalRFeature(flag: new MgmtSignalR.Models.FeatureFlags("EnableMessagingLogs"), value: "False"));
                data.NetworkACLs.PrivateEndpoints[0].Allow.Add(new MgmtSignalR.Models.SignalRRequestType("ServerConnection"));

                var collection = GetArmClient().GetResourceGroupResource(ResourceGroupResource.CreateResourceIdentifier($"{subscriptionId}", $"{resourceGroupName}")).GetSignalRResources();
                await collection.CreateOrUpdateAsync(WaitUntil.Completed, resourceName0, data);
            }

            {
                // Step: SignalR_Get

                var signalRResourceId = MgmtSignalR.SignalRResource.CreateResourceIdentifier($"{subscriptionId}", $"{resourceGroupName}", $"{resourceName}");
                var signalRResource = GetArmClient().GetSignalRResource(signalRResourceId);

                await signalRResource.GetAsync();
            }

            {
                // Step: SignalR_Update

                var signalRResourceId = MgmtSignalR.SignalRResource.CreateResourceIdentifier($"{subscriptionId}", $"{resourceGroupName}", $"{resourceName}");
                var signalRResource = GetArmClient().GetSignalRResource(signalRResourceId);
                MgmtSignalR.SignalRResourceData data = new MgmtSignalR.SignalRResourceData(location: new AzureLocation($"{location}"))
                {
                    Sku = new MgmtSignalR.Models.ResourceSku(name: "Standard_S1")
                    {
                        Tier = new MgmtSignalR.Models.SignalRSkuTier("Standard"),
                        Capacity = 1,
                    },
                    Kind = new MgmtSignalR.Models.ServiceKind("SignalR"),
                    Identity = new MgmtSignalR.Models.ManagedIdentity()
                    {
                        ManagedIdentityType = new MgmtSignalR.Models.ManagedIdentityType("SystemAssigned"),
                    },
                    NetworkACLs = new MgmtSignalR.Models.SignalRNetworkACLs()
                    {
                        DefaultAction = new MgmtSignalR.Models.ACLAction("Deny"),
                        PublicNetwork = new MgmtSignalR.Models.NetworkACL(),
                    },
                };
                data.NetworkACLs.PublicNetwork.Allow.Add(new MgmtSignalR.Models.SignalRRequestType("ClientConnection"));
                data.NetworkACLs.PrivateEndpoints.Add(new MgmtSignalR.Models.PrivateEndpointACL(name: $"{resourceName}.1fa229cd-bf3f-47f0-8c49-afb36723997e"));
                data.Tags.ReplaceWith(new Dictionary<string, string>()
                {
                    ["key1"] = "value1",
                });
                data.Features.Add(new MgmtSignalR.Models.SignalRFeature(flag: new MgmtSignalR.Models.FeatureFlags("ServiceMode"), value: "Serverless"));
                data.Features.Add(new MgmtSignalR.Models.SignalRFeature(flag: new MgmtSignalR.Models.FeatureFlags("EnableConnectivityLogs"), value: "True"));
                data.Features.Add(new MgmtSignalR.Models.SignalRFeature(flag: new MgmtSignalR.Models.FeatureFlags("EnableMessagingLogs"), value: "False"));
                data.NetworkACLs.PrivateEndpoints[0].Allow.Add(new MgmtSignalR.Models.SignalRRequestType("ServerConnection"));

                await signalRResource.UpdateAsync(WaitUntil.Completed, data);
            }

            {
                // Step: SignalR_ListKeys

                var signalRResourceId = MgmtSignalR.SignalRResource.CreateResourceIdentifier($"{subscriptionId}", $"{resourceGroupName}", $"{resourceName}");
                var signalRResource = GetArmClient().GetSignalRResource(signalRResourceId);

                await signalRResource.GetKeysAsync();
            }

            {
                // Step: SignalR_RegenerateKey

                var signalRResourceId = MgmtSignalR.SignalRResource.CreateResourceIdentifier($"{subscriptionId}", $"{resourceGroupName}", $"{resourceName}");
                var signalRResource = GetArmClient().GetSignalRResource(signalRResourceId);
                MgmtSignalR.Models.RegenerateKeyParameters regenerateKeyParameters = new MgmtSignalR.Models.RegenerateKeyParameters()
                {
                    KeyType = new MgmtSignalR.Models.KeyType("Primary"),
                };

                await signalRResource.RegenerateKeyAsync(WaitUntil.Completed, regenerateKeyParameters);
            }

            {
                // Step: SignalR_Restart

                var signalRResourceId = MgmtSignalR.SignalRResource.CreateResourceIdentifier($"{subscriptionId}", $"{resourceGroupName}", $"{resourceName}");
                var signalRResource = GetArmClient().GetSignalRResource(signalRResourceId);

                await signalRResource.RestartAsync(WaitUntil.Completed);
            }

            {
                // Step: Usages_List

                var subscriptionResource = GetArmClient().GetSubscriptionResource(SubscriptionResource.CreateResourceIdentifier($"{subscriptionId}"));
                string location0 = $"{location}";

                await foreach (var _ in subscriptionResource.GetUsagesAsync(location0))
                {
                }
            }

            {
                // Step: SignalR_ListByResourceGroup

                var collection = GetArmClient().GetResourceGroupResource(ResourceGroupResource.CreateResourceIdentifier($"{subscriptionId}", $"{resourceGroupName}")).GetSignalRResources();
                await foreach (var _ in collection.GetAllAsync())
                {
                }
            }

            {
                // Step: SignalR_ListBySubscription

                var subscriptionResource = GetArmClient().GetSubscriptionResource(SubscriptionResource.CreateResourceIdentifier($"{subscriptionId}"));

                await foreach (var _ in subscriptionResource.GetSignalRResourcesAsync())
                {
                }
            }

            {
                // Step: Operations_List

                // Operation is not implemented for this Step!
            }

            {
                // Step: SignalR_Delete

                var signalRResourceId = MgmtSignalR.SignalRResource.CreateResourceIdentifier($"{subscriptionId}", $"{resourceGroupName}", $"{resourceName}");
                var signalRResource = GetArmClient().GetSignalRResource(signalRResourceId);

                await signalRResource.DeleteAsync(WaitUntil.Completed);
            }

            resourceName = resourceNameBackup;
        }
    }
}
