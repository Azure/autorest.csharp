// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TestFramework;
using MgmtSignalR;
using MgmtSignalR.Models;

namespace MgmtSignalR.Tests.Scenario
{
    /// <summary> Test generated from Api Scenario scenarios\signalR.yaml. </summary>
    public partial class SignalR : ManagementRecordedTestBase<KeyVaultTestEnvironment>
    {
        ResourceGroup resourceGroup;
        string subscriptionId = Environment.GetEnvironmentVariable("SUBSCRIPTION_ID") ?? "00000000-00000000-00000000-00000000";
        string location = Environment.GetEnvironmentVariable("LOCATION") ?? "westus";
        string resourceGroupName = Environment.GetEnvironmentVariable("RESOURCE_GROUP_NAME") ?? "scenarioTestTempGroup";
        string resourceName = $"signalrswaggertest4";

        public SignalR(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
        }

        [RecordedTest]
        public async Task MicrosoftSignalRServiceBasicCRUD()
        {
            // API Scenario: Microsoft.SignalRService/Basic_CRUD
            string resourceNameBackup = resourceName;
            string name = $"$(name)";
            resourceName = $"{resourceName}";
            Console.WriteLine($"Scenario variables: name -> $\"{name}\", resourceName -> $\"{resourceName}\", ");

            resourceGroupName = Recording.GenerateAssetName(resourceGroupName);
            resourceGroup = (await GetArmClient().GetSubscription(new ResourceIdentifier($"/subscriptions/{subscriptionId}")).GetResourceGroups().CreateOrUpdateAsync(true, resourceGroupName, new ResourceGroupData(new AzureLocation(location)))).Value;
            {
                // Step: Generate_Unique_Name

                var templatePayload = $"{{\"$schema\":\"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\"contentVersion\":\"1.0.0.0\",\"outputs\":{{\"name\":{{\"type\":\"string\",\"value\":\"[variables('name').value]\"}},\"resourceName\":{{\"type\":\"string\",\"value\":\"[variables('name').value]\"}}}},\"resources\":[],\"variables\":{{\"name\":{{\"type\":\"string\",\"metadata\":{{\"description\":\"Name of the SignalR service.\"}},\"value\":\"[concat('sw',uniqueString(resourceGroup().id))]\"}}}}}}";
                var deploymentOperation = await resourceGroup.GetDeployments().CreateOrUpdateAsync(true, "Generate_Unique_Name", new Resources.Models.DeploymentInput(new Resources.Models.DeploymentProperties(Resources.Models.DeploymentMode.Complete)
                {
                    Template = JsonDocument.Parse(templatePayload).RootElement,
                }));
                if (deploymentOperation.Value.Data.Properties.Outputs is Dictionary<string, object> deployOutputs)
                {
                    if (deployOutputs.ContainsKey("resourceName") && deployOutputs["resourceName"] is Dictionary<string, object> outputVariable)
                    {
                        resourceName = outputVariable["value"].ToString();
                    }
                }
            }

            {
                // Step: SignalR_CheckNameAvailability

                var subscriptionExtensions = GetArmClient().GetSubscription(new ResourceIdentifier($"/subscriptions/{subscriptionId}"));
                string location0 = $"{location}";
                MgmtSignalR.Models.NameAvailabilityParameters parameters = new MgmtSignalR.Models.NameAvailabilityParameters(type: $"Microsoft.SignalRService/SignalR", name: $"my-signalr-service");

                await subscriptionExtensions.CheckNameAvailabilitySignalRAsync(location0, parameters);
            }

            {
                // Step: SignalR_CreateOrUpdate

                string resourceName0 = $"{resourceName}";
                MgmtSignalR.SignalRResourceData parameters = new MgmtSignalR.SignalRResourceData(location: $"{location}")
                {
                    Sku = new MgmtSignalR.Models.ResourceSku(name: $"Standard_S1")
                    {
                        Tier = new MgmtSignalR.Models.SignalRSkuTier($"Standard"),
                        Capacity = 1,
                    },
                    Kind = new MgmtSignalR.Models.ServiceKind($"SignalR"),
                    Identity = new MgmtSignalR.Models.ManagedIdentity()
                    {
                        Type = new MgmtSignalR.Models.ManagedIdentityType($"SystemAssigned"),
                    },
                    Cors = new MgmtSignalR.Models.SignalRCorsSettings(),
                    Upstream = new MgmtSignalR.Models.ServerlessUpstreamSettings(),
                    NetworkACLs = new MgmtSignalR.Models.SignalRNetworkACLs()
                    {
                        DefaultAction = new MgmtSignalR.Models.ACLAction($"Deny"),
                        PublicNetwork = new MgmtSignalR.Models.NetworkACL(),
                    },
                    Tls = new MgmtSignalR.Models.SignalRTlsSettings()
                    {
                        ClientCertEnabled = false,
                    },
                };
                parameters.Cors.AllowedOrigins.Add($"https://foo.com");
                parameters.Cors.AllowedOrigins.Add($"https://bar.com");
                parameters.Upstream.Templates.Add(new MgmtSignalR.Models.UpstreamTemplate(urlTemplate: $"https://example.com/chat/api/connect")
                {
                    HubPattern = $"*",
                    EventPattern = $"connect,disconnect",
                    CategoryPattern = $"*",
                    Auth = new MgmtSignalR.Models.UpstreamAuthSettings()
                    {
                        Type = new MgmtSignalR.Models.UpstreamAuthType($"ManagedIdentity"),
                        ManagedIdentity = new MgmtSignalR.Models.ManagedIdentitySettings()
                        {
                            Resource = $"api://example",
                        },
                    },
                });
                parameters.NetworkACLs.PublicNetwork.Allow.Add(new MgmtSignalR.Models.SignalRRequestType($"ClientConnection"));
                parameters.NetworkACLs.PrivateEndpoints.Add(new MgmtSignalR.Models.PrivateEndpointACL(name: $"{resourceName}.1fa229cd-bf3f-47f0-8c49-afb36723997e"));
                parameters.Tags.ReplaceWith(new Dictionary<string, string>()
                {
                    [$"key1"] = $"value1",
                });
                parameters.Features.Add(new MgmtSignalR.Models.SignalRFeature(flag: new MgmtSignalR.Models.FeatureFlags($"ServiceMode"), value: $"Serverless"));
                parameters.Features.Add(new MgmtSignalR.Models.SignalRFeature(flag: new MgmtSignalR.Models.FeatureFlags($"EnableConnectivityLogs"), value: $"True"));
                parameters.Features.Add(new MgmtSignalR.Models.SignalRFeature(flag: new MgmtSignalR.Models.FeatureFlags($"EnableMessagingLogs"), value: $"False"));
                parameters.NetworkACLs.PrivateEndpoints[0].Allow.Add(new MgmtSignalR.Models.SignalRRequestType($"ServerConnection"));

                var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier($"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}")).GetSignalRResources();
                await collection.CreateOrUpdateAsync(true, resourceName0, parameters);
            }

            {
                // Step: SignalR_Get

                var signalRResourceId = MgmtSignalR.SignalRResource.CreateResourceIdentifier($"{subscriptionId}", $"{resourceGroupName}", $"{resourceName}");
                var signalRResource = GetArmClient().GetSignalRResource(signalRResourceId);

                await signalRResource.GetAsync();
            }

            {
                // Step: SignalR_Update

                var signalRResourceId = MgmtSignalR.SignalRResource.CreateResourceIdentifier($"{subscriptionId}", $"{resourceGroupName}", $"{resourceName}");
                var signalRResource = GetArmClient().GetSignalRResource(signalRResourceId);
                MgmtSignalR.SignalRResourceData parameters = new MgmtSignalR.SignalRResourceData(location: $"{location}")
                {
                    Sku = new MgmtSignalR.Models.ResourceSku(name: $"Standard_S1")
                    {
                        Tier = new MgmtSignalR.Models.SignalRSkuTier($"Standard"),
                        Capacity = 1,
                    },
                    Kind = new MgmtSignalR.Models.ServiceKind($"SignalR"),
                    Identity = new MgmtSignalR.Models.ManagedIdentity()
                    {
                        Type = new MgmtSignalR.Models.ManagedIdentityType($"SystemAssigned"),
                    },
                    Cors = new MgmtSignalR.Models.SignalRCorsSettings(),
                    Upstream = new MgmtSignalR.Models.ServerlessUpstreamSettings(),
                    NetworkACLs = new MgmtSignalR.Models.SignalRNetworkACLs()
                    {
                        DefaultAction = new MgmtSignalR.Models.ACLAction($"Deny"),
                        PublicNetwork = new MgmtSignalR.Models.NetworkACL(),
                    },
                    Tls = new MgmtSignalR.Models.SignalRTlsSettings()
                    {
                        ClientCertEnabled = false,
                    },
                };
                parameters.Cors.AllowedOrigins.Add($"https://foo.com");
                parameters.Cors.AllowedOrigins.Add($"https://bar.com");
                parameters.Upstream.Templates.Add(new MgmtSignalR.Models.UpstreamTemplate(urlTemplate: $"https://example.com/chat/api/connect")
                {
                    HubPattern = $"*",
                    EventPattern = $"connect,disconnect",
                    CategoryPattern = $"*",
                    Auth = new MgmtSignalR.Models.UpstreamAuthSettings()
                    {
                        Type = new MgmtSignalR.Models.UpstreamAuthType($"ManagedIdentity"),
                        ManagedIdentity = new MgmtSignalR.Models.ManagedIdentitySettings()
                        {
                            Resource = $"api://example",
                        },
                    },
                });
                parameters.NetworkACLs.PublicNetwork.Allow.Add(new MgmtSignalR.Models.SignalRRequestType($"ClientConnection"));
                parameters.NetworkACLs.PrivateEndpoints.Add(new MgmtSignalR.Models.PrivateEndpointACL(name: $"{resourceName}.1fa229cd-bf3f-47f0-8c49-afb36723997e"));
                parameters.Tags.ReplaceWith(new Dictionary<string, string>()
                {
                    [$"key1"] = $"value1",
                });
                parameters.Features.Add(new MgmtSignalR.Models.SignalRFeature(flag: new MgmtSignalR.Models.FeatureFlags($"ServiceMode"), value: $"Serverless"));
                parameters.Features.Add(new MgmtSignalR.Models.SignalRFeature(flag: new MgmtSignalR.Models.FeatureFlags($"EnableConnectivityLogs"), value: $"True"));
                parameters.Features.Add(new MgmtSignalR.Models.SignalRFeature(flag: new MgmtSignalR.Models.FeatureFlags($"EnableMessagingLogs"), value: $"False"));
                parameters.NetworkACLs.PrivateEndpoints[0].Allow.Add(new MgmtSignalR.Models.SignalRRequestType($"ServerConnection"));

                await signalRResource.UpdateAsync(true, parameters);
            }

            {
                // Step: SignalR_ListKeys

                var signalRResourceId = MgmtSignalR.SignalRResource.CreateResourceIdentifier($"{subscriptionId}", $"{resourceGroupName}", $"{resourceName}");
                var signalRResource = GetArmClient().GetSignalRResource(signalRResourceId);

                await signalRResource.GetKeysAsync();
            }

            {
                // Step: SignalR_RegenerateKey

                var signalRResourceId = MgmtSignalR.SignalRResource.CreateResourceIdentifier($"{subscriptionId}", $"{resourceGroupName}", $"{resourceName}");
                var signalRResource = GetArmClient().GetSignalRResource(signalRResourceId);
                MgmtSignalR.Models.RegenerateKeyParameters parameters = new MgmtSignalR.Models.RegenerateKeyParameters()
                {
                    KeyType = new MgmtSignalR.Models.KeyType($"Primary"),
                };

                await signalRResource.RegenerateKeyAsync(true, parameters);
            }

            {
                // Step: SignalR_Restart

                var signalRResourceId = MgmtSignalR.SignalRResource.CreateResourceIdentifier($"{subscriptionId}", $"{resourceGroupName}", $"{resourceName}");
                var signalRResource = GetArmClient().GetSignalRResource(signalRResourceId);

                await signalRResource.RestartAsync(true);
            }

            {
                // Step: Usages_List

                var subscriptionExtensions = GetArmClient().GetSubscription(new ResourceIdentifier($"/subscriptions/{subscriptionId}"));
                string location0 = $"{location}";

                await foreach (var _ in subscriptionExtensions.GetUsagesAsync(location0))
                {
                }
            }

            {
                // Step: SignalR_ListByResourceGroup

                var collection = GetArmClient().GetResourceGroup(new ResourceIdentifier($"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}")).GetSignalRResources();
                await foreach (var _ in collection.GetAllAsync())
                {
                }
            }

            {
                // Step: SignalR_ListBySubscription

                var subscriptionExtensions = GetArmClient().GetSubscription(new ResourceIdentifier($"/subscriptions/{subscriptionId}"));

                await foreach (var _ in subscriptionExtensions.GetSignalRResourcesAsync())
                {
                }
            }

            {
                // Step: Operations_List

                // Operation is not implemented for this Step!
            }

            {
                // Step: SignalR_Delete

                var signalRResourceId = MgmtSignalR.SignalRResource.CreateResourceIdentifier($"{subscriptionId}", $"{resourceGroupName}", $"{resourceName}");
                var signalRResource = GetArmClient().GetSignalRResource(signalRResourceId);

                await signalRResource.DeleteAsync(true);
            }

            resourceName = resourceNameBackup;
        }
    }
}
