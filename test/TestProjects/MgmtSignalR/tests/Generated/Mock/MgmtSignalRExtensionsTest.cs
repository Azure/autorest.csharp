// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TestFramework;
using MgmtSignalR.Models;

namespace MgmtSignalR.Tests.Mock
{
    /// <summary> Test for MgmtSignalRExtensions. </summary>
    public partial class MgmtSignalRExtensionsMockTests : MockTestBase
    {
        public MgmtSignalRExtensionsMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task CheckNameAvailabilitySignalR()
        {
            // Example: SignalR_CheckNameAvailability
            var subscriptionResource = GetArmClient().GetSubscriptionResource(SubscriptionResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000"));
            string location = "eastus";
            MgmtSignalR.Models.NameAvailabilityContent content = new MgmtSignalR.Models.NameAvailabilityContent(resourceType: "Microsoft.SignalRService/SignalR", name: "my-signalr-service");

            await subscriptionResource.CheckNameAvailabilitySignalRAsync(location, content);
        }

        [RecordedTest]
        public async Task GetSignalRResources()
        {
            // Example: SignalR_ListBySubscription
            var subscriptionResource = GetArmClient().GetSubscriptionResource(SubscriptionResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000"));

            await foreach (var _ in subscriptionResource.GetSignalRResourcesAsync())
            {
            }
        }

        [RecordedTest]
        public async Task GetUsages()
        {
            // Example: Usages_List
            var subscriptionResource = GetArmClient().GetSubscriptionResource(SubscriptionResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000"));
            string location = "eastus";

            await foreach (var _ in subscriptionResource.GetUsagesAsync(location))
            {
            }
        }
    }
}
