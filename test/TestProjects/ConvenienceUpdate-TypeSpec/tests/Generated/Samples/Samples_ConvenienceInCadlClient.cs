// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using ConvenienceInCadl;
using ConvenienceInCadl.Models;
using NUnit.Framework;

namespace ConvenienceInCadl.Samples
{
    public class Samples_ConvenienceInCadlClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateConvenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.UpdateConvenience(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateConvenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.UpdateConvenienceAsync(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateConvenience_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.UpdateConvenience();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateConvenience_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.UpdateConvenienceAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateConvenience_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.UpdateConvenience(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateConvenience_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.UpdateConvenienceAsync(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateConvenience_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.UpdateConvenience();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateConvenience_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.UpdateConvenienceAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceOptionalBeforeRequired()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.ConvenienceOptionalBeforeRequired(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceOptionalBeforeRequired_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.ConvenienceOptionalBeforeRequiredAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceOptionalBeforeRequired_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = client.ConvenienceOptionalBeforeRequired(required);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceOptionalBeforeRequired_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = await client.ConvenienceOptionalBeforeRequiredAsync(required);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceOptionalBeforeRequired_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.ConvenienceOptionalBeforeRequired(content, 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceOptionalBeforeRequired_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.ConvenienceOptionalBeforeRequiredAsync(content, 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceOptionalBeforeRequired_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = client.ConvenienceOptionalBeforeRequired(required, 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceOptionalBeforeRequired_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = await client.ConvenienceOptionalBeforeRequiredAsync(required, 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoConvenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.NoConvenience(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoConvenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.NoConvenienceAsync(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoConvenience_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.NoConvenience(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoConvenience_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.NoConvenienceAsync(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoConvenienceRequiredBody()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.NoConvenienceRequiredBody(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoConvenienceRequiredBody_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.NoConvenienceRequiredBodyAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoConvenienceRequiredBody_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.NoConvenienceRequiredBody(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoConvenienceRequiredBody_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.NoConvenienceRequiredBodyAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoConvenienceOptionalBody()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = null;
            Response response = client.NoConvenienceOptionalBody(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoConvenienceOptionalBody_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = null;
            Response response = await client.NoConvenienceOptionalBodyAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoConvenienceOptionalBody_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.NoConvenienceOptionalBody(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoConvenienceOptionalBody_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.NoConvenienceOptionalBodyAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Protocol()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.Protocol();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Protocol_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ProtocolAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolValue_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ProtocolValue();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProtocolValue_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ProtocolValueAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Protocol_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.Protocol();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Protocol_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ProtocolAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolValue_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ProtocolValue();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProtocolValue_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ProtocolValueAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceWithOptional()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceWithOptional();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceWithOptional_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceWithOptionalAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceWithOptionalValue_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ConvenienceWithOptionalValue();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceWithOptionalValue_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ConvenienceWithOptionalValueAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceWithOptional_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceWithOptional();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceWithOptional_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceWithOptionalAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceWithOptionalValue_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ConvenienceWithOptionalValue();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceWithOptionalValue_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ConvenienceWithOptionalValueAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceWithRequired()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceWithRequired(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceWithRequired_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceWithRequiredAsync(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceWithRequired_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ConvenienceWithRequired();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceWithRequired_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ConvenienceWithRequiredAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceWithRequired_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceWithRequired(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceWithRequired_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceWithRequiredAsync(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceWithRequired_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ConvenienceWithRequired();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceWithRequired_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ConvenienceWithRequiredAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceShouldNotGenerate()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceShouldNotGenerate();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceShouldNotGenerate_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceShouldNotGenerateAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceShouldNotGenerate_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceShouldNotGenerate();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceShouldNotGenerate_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceShouldNotGenerateAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolShouldNotGenerateConvenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ProtocolShouldNotGenerateConvenience();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProtocolShouldNotGenerateConvenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ProtocolShouldNotGenerateConvenienceAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolShouldNotGenerateConvenience_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ProtocolShouldNotGenerateConvenience();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProtocolShouldNotGenerateConvenience_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ProtocolShouldNotGenerateConvenienceAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolOptionalQuery()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ProtocolOptionalQuery();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProtocolOptionalQuery_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ProtocolOptionalQueryAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolOptionalQueryValue_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ProtocolOptionalQueryValue();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProtocolOptionalQueryValue_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ProtocolOptionalQueryValueAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolOptionalQuery_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ProtocolOptionalQuery(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProtocolOptionalQuery_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ProtocolOptionalQueryAsync(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolOptionalQueryValue_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ProtocolOptionalQueryValue(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProtocolOptionalQueryValue_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ProtocolOptionalQueryValueAsync(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolRequiredQuery()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ProtocolRequiredQuery(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProtocolRequiredQuery_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ProtocolRequiredQueryAsync(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolRequiredQueryValue_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ProtocolRequiredQueryValue(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProtocolRequiredQueryValue_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ProtocolRequiredQueryValueAsync(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolRequiredQuery_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ProtocolRequiredQuery(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProtocolRequiredQuery_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ProtocolRequiredQueryAsync(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolRequiredQueryValue_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ProtocolRequiredQueryValue(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProtocolRequiredQueryValue_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ProtocolRequiredQueryValueAsync(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolOptionalModel()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = null;
            Response response = client.ProtocolOptionalModel(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProtocolOptionalModel_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = null;
            Response response = await client.ProtocolOptionalModelAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolOptionalModel_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ProtocolOptionalModel();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProtocolOptionalModel_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ProtocolOptionalModelAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolOptionalModel_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.ProtocolOptionalModel(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProtocolOptionalModel_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.ProtocolOptionalModelAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolOptionalModel_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model optional = new Model("<id>");
            Response response = client.ProtocolOptionalModel(optional);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProtocolOptionalModel_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model optional = new Model("<id>");
            Response response = await client.ProtocolOptionalModelAsync(optional);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolRequiredModel()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.ProtocolRequiredModel(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProtocolRequiredModel_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.ProtocolRequiredModelAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolRequiredModel_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = client.ProtocolRequiredModel(required);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProtocolRequiredModel_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = await client.ProtocolRequiredModelAsync(required);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolRequiredModel_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.ProtocolRequiredModel(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProtocolRequiredModel_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.ProtocolRequiredModelAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolRequiredModel_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = client.ProtocolRequiredModel(required);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProtocolRequiredModel_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = await client.ProtocolRequiredModelAsync(required);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceOptionalQueryWithOptional()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceOptionalQueryWithOptional();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceOptionalQueryWithOptional_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceOptionalQueryWithOptionalAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceOptionalQueryWithOptionalValue_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ConvenienceOptionalQueryWithOptionalValue();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceOptionalQueryWithOptionalValue_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ConvenienceOptionalQueryWithOptionalValueAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceOptionalQueryWithOptional_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceOptionalQueryWithOptional(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceOptionalQueryWithOptional_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceOptionalQueryWithOptionalAsync(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceOptionalQueryWithOptionalValue_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ConvenienceOptionalQueryWithOptionalValue(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceOptionalQueryWithOptionalValue_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ConvenienceOptionalQueryWithOptionalValueAsync(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceRequiredQueryWithOptional()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceRequiredQueryWithOptional(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceRequiredQueryWithOptional_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceRequiredQueryWithOptionalAsync(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceRequiredQueryWithOptionalValue_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ConvenienceRequiredQueryWithOptionalValue(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceRequiredQueryWithOptionalValue_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ConvenienceRequiredQueryWithOptionalValueAsync(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceRequiredQueryWithOptional_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceRequiredQueryWithOptional(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceRequiredQueryWithOptional_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceRequiredQueryWithOptionalAsync(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceRequiredQueryWithOptionalValue_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ConvenienceRequiredQueryWithOptionalValue(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceRequiredQueryWithOptionalValue_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ConvenienceRequiredQueryWithOptionalValueAsync(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceOptionalQueryWithRequired()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceOptionalQueryWithRequired(null, null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceOptionalQueryWithRequired_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceOptionalQueryWithRequiredAsync(null, null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceOptionalQueryWithRequired_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ConvenienceOptionalQueryWithRequired();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceOptionalQueryWithRequired_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ConvenienceOptionalQueryWithRequiredAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceOptionalQueryWithRequired_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceOptionalQueryWithRequired(1234, null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceOptionalQueryWithRequired_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceOptionalQueryWithRequiredAsync(1234, null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceOptionalQueryWithRequired_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ConvenienceOptionalQueryWithRequired(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceOptionalQueryWithRequired_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ConvenienceOptionalQueryWithRequiredAsync(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceRequiredQueryWithRequired()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceRequiredQueryWithRequired(1234, null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceRequiredQueryWithRequired_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceRequiredQueryWithRequiredAsync(1234, null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceRequiredQueryWithRequired_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ConvenienceRequiredQueryWithRequired(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceRequiredQueryWithRequired_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ConvenienceRequiredQueryWithRequiredAsync(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceRequiredQueryWithRequired_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceRequiredQueryWithRequired(1234, null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceRequiredQueryWithRequired_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceRequiredQueryWithRequiredAsync(1234, null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceRequiredQueryWithRequired_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = client.ConvenienceRequiredQueryWithRequired(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceRequiredQueryWithRequired_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response<Model> response = await client.ConvenienceRequiredQueryWithRequiredAsync(1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceOptionalModelWithOptional()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = null;
            Response response = client.ConvenienceOptionalModelWithOptional(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceOptionalModelWithOptional_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = null;
            Response response = await client.ConvenienceOptionalModelWithOptionalAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceOptionalModelWithOptional_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceOptionalModelWithOptional();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceOptionalModelWithOptional_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceOptionalModelWithOptionalAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceOptionalModelWithOptional_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.ConvenienceOptionalModelWithOptional(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceOptionalModelWithOptional_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.ConvenienceOptionalModelWithOptionalAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceOptionalModelWithOptional_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model optional = new Model("<id>");
            Response response = client.ConvenienceOptionalModelWithOptional(optional);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceOptionalModelWithOptional_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model optional = new Model("<id>");
            Response response = await client.ConvenienceOptionalModelWithOptionalAsync(optional);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceRequiredModelWithOptional()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.ConvenienceRequiredModelWithOptional(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceRequiredModelWithOptional_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.ConvenienceRequiredModelWithOptionalAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceRequiredModelWithOptional_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = client.ConvenienceRequiredModelWithOptional(required);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceRequiredModelWithOptional_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = await client.ConvenienceRequiredModelWithOptionalAsync(required);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceRequiredModelWithOptional_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.ConvenienceRequiredModelWithOptional(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceRequiredModelWithOptional_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.ConvenienceRequiredModelWithOptionalAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceRequiredModelWithOptional_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = client.ConvenienceRequiredModelWithOptional(required);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceRequiredModelWithOptional_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = await client.ConvenienceRequiredModelWithOptionalAsync(required);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceOptionalModelWithRequired()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = null;
            Response response = client.ConvenienceOptionalModelWithRequired(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceOptionalModelWithRequired_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = null;
            Response response = await client.ConvenienceOptionalModelWithRequiredAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceOptionalModelWithRequired_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceOptionalModelWithRequired();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceOptionalModelWithRequired_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Response response = await client.ConvenienceOptionalModelWithRequiredAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceOptionalModelWithRequired_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.ConvenienceOptionalModelWithRequired(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceOptionalModelWithRequired_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.ConvenienceOptionalModelWithRequiredAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceOptionalModelWithRequired_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model optional = new Model("<id>");
            Response response = client.ConvenienceOptionalModelWithRequired(optional);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConvenienceOptionalModelWithRequired_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model optional = new Model("<id>");
            Response response = await client.ConvenienceOptionalModelWithRequiredAsync(optional);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolOptionalBeforeRequired()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.ProtocolOptionalBeforeRequired(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProtocolOptionalBeforeRequired_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.ProtocolOptionalBeforeRequiredAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolOptionalBeforeRequired_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = client.ProtocolOptionalBeforeRequired(required);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProtocolOptionalBeforeRequired_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = await client.ProtocolOptionalBeforeRequiredAsync(required);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolOptionalBeforeRequired_AllParameters()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = client.ProtocolOptionalBeforeRequired(content, 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProtocolOptionalBeforeRequired_AllParameters_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
            });
            Response response = await client.ProtocolOptionalBeforeRequiredAsync(content, 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolOptionalBeforeRequired_AllParameters_Convenience()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = client.ProtocolOptionalBeforeRequired(required, 1234);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProtocolOptionalBeforeRequired_AllParameters_Convenience_Async()
        {
            ConvenienceInCadlClient client = new ConvenienceInCadlClient();

            Model required = new Model("<id>");
            Response response = await client.ProtocolOptionalBeforeRequiredAsync(required, 1234);
        }
    }
}
