// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.ServiceModel.Rest;
using System.ServiceModel.Rest.Core;
using System.Text.Json;
using System.Threading.Tasks;
using NUnit.Framework;
using OpenAI;
using OpenAI.Models;

namespace OpenAI.Samples
{
    public class Samples_OpenAIClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateChatCompletion()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                model = "gpt4",
                messages = new List<object>()
{
new
{
role = "system",
content = "<content>",
}
},
            }).ToStream());
            Result result = client.CreateChatCompletion(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("index").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("message").GetProperty("role").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("message").GetProperty("content").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("finish_reason").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateChatCompletion_Async()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                model = "gpt4",
                messages = new List<object>()
{
new
{
role = "system",
content = "<content>",
}
},
            }).ToStream());
            Result result = await client.CreateChatCompletionAsync(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("index").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("message").GetProperty("role").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("message").GetProperty("content").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("finish_reason").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateChatCompletion_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            CreateChatCompletionRequest body = new CreateChatCompletionRequest(ChatCompletionModels.Gpt4, new List<ChatCompletionRequestMessage>()
{
new ChatCompletionRequestMessage(MessageRole.System,"<content>")
});
            Result<CreateChatCompletionResponse> result = client.CreateChatCompletion(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateChatCompletion_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            CreateChatCompletionRequest body = new CreateChatCompletionRequest(ChatCompletionModels.Gpt4, new List<ChatCompletionRequestMessage>()
{
new ChatCompletionRequestMessage(MessageRole.System,"<content>")
});
            Result<CreateChatCompletionResponse> result = await client.CreateChatCompletionAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateChatCompletion_AllParameters()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                model = "gpt4",
                messages = new List<object>()
{
new
{
role = "system",
content = "<content>",
name = "<name>",
function_call = new
{
name = "<name>",
arguments = "<arguments>",
},
}
},
                functions = new List<object>()
{
new
{
name = "<name>",
description = "<description>",
parameters = new
{
key = new object(),
},
}
},
                function_call = new
                {
                    name = "<name>",
                },
                temperature = 123.45,
                top_p = 123.45,
                n = 1234L,
                max_tokens = 1234L,
                stop = new List<object>()
{
"<stop>"
},
                presence_penalty = 123.45,
                frequency_penalty = 123.45,
                logit_bias = new
                {
                    key = 1234L,
                },
                user = "<user>",
                stream = true,
            }).ToStream());
            Result result = client.CreateChatCompletion(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("index").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("message").GetProperty("role").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("message").GetProperty("content").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("message").GetProperty("function_call").GetProperty("name").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("message").GetProperty("function_call").GetProperty("arguments").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("finish_reason").ToString());
            Console.WriteLine(result0.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result0.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result0.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateChatCompletion_AllParameters_Async()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                model = "gpt4",
                messages = new List<object>()
{
new
{
role = "system",
content = "<content>",
name = "<name>",
function_call = new
{
name = "<name>",
arguments = "<arguments>",
},
}
},
                functions = new List<object>()
{
new
{
name = "<name>",
description = "<description>",
parameters = new
{
key = new object(),
},
}
},
                function_call = new
                {
                    name = "<name>",
                },
                temperature = 123.45,
                top_p = 123.45,
                n = 1234L,
                max_tokens = 1234L,
                stop = new List<object>()
{
"<stop>"
},
                presence_penalty = 123.45,
                frequency_penalty = 123.45,
                logit_bias = new
                {
                    key = 1234L,
                },
                user = "<user>",
                stream = true,
            }).ToStream());
            Result result = await client.CreateChatCompletionAsync(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("index").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("message").GetProperty("role").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("message").GetProperty("content").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("message").GetProperty("function_call").GetProperty("name").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("message").GetProperty("function_call").GetProperty("arguments").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("finish_reason").ToString());
            Console.WriteLine(result0.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result0.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result0.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateChatCompletion_AllParameters_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            CreateChatCompletionRequest body = new CreateChatCompletionRequest(ChatCompletionModels.Gpt4, new List<ChatCompletionRequestMessage>()
{
new ChatCompletionRequestMessage(MessageRole.System,"<content>")
{
Name = "<name>",
FunctionCall = new FunctionCall("<name>","<arguments>"),
}
})
            {
                Functions =
{
new ChatCompletionFunctions("<name>",new Dictionary<string, BinaryData>()
{
["key"] = BinaryData.FromObjectAsJson(new object()),
})
{
Description = "<description>",
}
},
                FunctionCall = new ChatCompletionFunctionCallOption("<name>"),
                Temperature = 123.45,
                TopP = 123.45,
                N = 1234L,
                MaxTokens = 1234L,
                Stop =
{
"<stop>"
},
                PresencePenalty = 123.45,
                FrequencyPenalty = 123.45,
                LogitBias =
{
["key"] = 1234L,
},
                User = "<user>",
                Stream = true,
            };
            Result<CreateChatCompletionResponse> result = client.CreateChatCompletion(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateChatCompletion_AllParameters_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            CreateChatCompletionRequest body = new CreateChatCompletionRequest(ChatCompletionModels.Gpt4, new List<ChatCompletionRequestMessage>()
{
new ChatCompletionRequestMessage(MessageRole.System,"<content>")
{
Name = "<name>",
FunctionCall = new FunctionCall("<name>","<arguments>"),
}
})
            {
                Functions =
{
new ChatCompletionFunctions("<name>",new Dictionary<string, BinaryData>()
{
["key"] = BinaryData.FromObjectAsJson(new object()),
})
{
Description = "<description>",
}
},
                FunctionCall = new ChatCompletionFunctionCallOption("<name>"),
                Temperature = 123.45,
                TopP = 123.45,
                N = 1234L,
                MaxTokens = 1234L,
                Stop =
{
"<stop>"
},
                PresencePenalty = 123.45,
                FrequencyPenalty = 123.45,
                LogitBias =
{
["key"] = 1234L,
},
                User = "<user>",
                Stream = true,
            };
            Result<CreateChatCompletionResponse> result = await client.CreateChatCompletionAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateTranscription()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                file = new object(),
                model = "whisper-1",
            }).ToStream());
            Result result = client.CreateTranscription(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateTranscription_Async()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                file = new object(),
                model = "whisper-1",
            }).ToStream());
            Result result = await client.CreateTranscriptionAsync(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateTranscription_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            CreateTranscriptionRequest audio = new CreateTranscriptionRequest(BinaryData.FromObjectAsJson(new object()), AudioModels.Whisper1);
            Result<CreateTranscriptionResponse> result = client.CreateTranscription(audio);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateTranscription_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            CreateTranscriptionRequest audio = new CreateTranscriptionRequest(BinaryData.FromObjectAsJson(new object()), AudioModels.Whisper1);
            Result<CreateTranscriptionResponse> result = await client.CreateTranscriptionAsync(audio);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateTranscription_AllParameters()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                file = new object(),
                model = "whisper-1",
                prompt = "<prompt>",
                response_format = "json",
                temperature = 123.45,
                language = "<language>",
            }).ToStream());
            Result result = client.CreateTranscription(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateTranscription_AllParameters_Async()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                file = new object(),
                model = "whisper-1",
                prompt = "<prompt>",
                response_format = "json",
                temperature = 123.45,
                language = "<language>",
            }).ToStream());
            Result result = await client.CreateTranscriptionAsync(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateTranscription_AllParameters_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            CreateTranscriptionRequest audio = new CreateTranscriptionRequest(BinaryData.FromObjectAsJson(new object()), AudioModels.Whisper1)
            {
                Prompt = "<prompt>",
                ResponseFormat = AudioResponseFormat.Json,
                Temperature = 123.45,
                Language = "<language>",
            };
            Result<CreateTranscriptionResponse> result = client.CreateTranscription(audio);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateTranscription_AllParameters_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            CreateTranscriptionRequest audio = new CreateTranscriptionRequest(BinaryData.FromObjectAsJson(new object()), AudioModels.Whisper1)
            {
                Prompt = "<prompt>",
                ResponseFormat = AudioResponseFormat.Json,
                Temperature = 123.45,
                Language = "<language>",
            };
            Result<CreateTranscriptionResponse> result = await client.CreateTranscriptionAsync(audio);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateTranslation()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                file = new object(),
                model = "whisper-1",
            }).ToStream());
            Result result = client.CreateTranslation(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateTranslation_Async()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                file = new object(),
                model = "whisper-1",
            }).ToStream());
            Result result = await client.CreateTranslationAsync(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateTranslation_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            CreateTranslationRequest audio = new CreateTranslationRequest(BinaryData.FromObjectAsJson(new object()), AudioModels.Whisper1);
            Result<CreateTranslationResponse> result = client.CreateTranslation(audio);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateTranslation_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            CreateTranslationRequest audio = new CreateTranslationRequest(BinaryData.FromObjectAsJson(new object()), AudioModels.Whisper1);
            Result<CreateTranslationResponse> result = await client.CreateTranslationAsync(audio);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateTranslation_AllParameters()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                file = new object(),
                model = "whisper-1",
                prompt = "<prompt>",
                response_format = "json",
                temperature = 123.45,
            }).ToStream());
            Result result = client.CreateTranslation(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateTranslation_AllParameters_Async()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                file = new object(),
                model = "whisper-1",
                prompt = "<prompt>",
                response_format = "json",
                temperature = 123.45,
            }).ToStream());
            Result result = await client.CreateTranslationAsync(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("text").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateTranslation_AllParameters_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            CreateTranslationRequest audio = new CreateTranslationRequest(BinaryData.FromObjectAsJson(new object()), AudioModels.Whisper1)
            {
                Prompt = "<prompt>",
                ResponseFormat = AudioResponseFormat.Json,
                Temperature = 123.45,
            };
            Result<CreateTranslationResponse> result = client.CreateTranslation(audio);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateTranslation_AllParameters_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            CreateTranslationRequest audio = new CreateTranslationRequest(BinaryData.FromObjectAsJson(new object()), AudioModels.Whisper1)
            {
                Prompt = "<prompt>",
                ResponseFormat = AudioResponseFormat.Json,
                Temperature = 123.45,
            };
            Result<CreateTranslationResponse> result = await client.CreateTranslationAsync(audio);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateFineTuningJob()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                training_file = "<training_file>",
                model = "babbage-002",
            }).ToStream());
            Result result = client.CreateFineTuningJob(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("created_at").ToString());
            Console.WriteLine(result0.GetProperty("finished_at").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("fine_tuned_model").ToString());
            Console.WriteLine(result0.GetProperty("organization_id").ToString());
            Console.WriteLine(result0.GetProperty("status").ToString());
            Console.WriteLine(result0.GetProperty("hyperparameters").ToString());
            Console.WriteLine(result0.GetProperty("training_file").ToString());
            Console.WriteLine(result0.GetProperty("validation_file").ToString());
            Console.WriteLine(result0.GetProperty("result_files")[0].ToString());
            Console.WriteLine(result0.GetProperty("trained_tokens").ToString());
            Console.WriteLine(result0.GetProperty("error").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateFineTuningJob_Async()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                training_file = "<training_file>",
                model = "babbage-002",
            }).ToStream());
            Result result = await client.CreateFineTuningJobAsync(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("created_at").ToString());
            Console.WriteLine(result0.GetProperty("finished_at").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("fine_tuned_model").ToString());
            Console.WriteLine(result0.GetProperty("organization_id").ToString());
            Console.WriteLine(result0.GetProperty("status").ToString());
            Console.WriteLine(result0.GetProperty("hyperparameters").ToString());
            Console.WriteLine(result0.GetProperty("training_file").ToString());
            Console.WriteLine(result0.GetProperty("validation_file").ToString());
            Console.WriteLine(result0.GetProperty("result_files")[0].ToString());
            Console.WriteLine(result0.GetProperty("trained_tokens").ToString());
            Console.WriteLine(result0.GetProperty("error").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateFineTuningJob_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            CreateFineTuningJobRequest job = new CreateFineTuningJobRequest("<training_file>", FineTuningJobModels.Babbage002);
            Result<FineTuningJob> result = client.CreateFineTuningJob(job);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateFineTuningJob_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            CreateFineTuningJobRequest job = new CreateFineTuningJobRequest("<training_file>", FineTuningJobModels.Babbage002);
            Result<FineTuningJob> result = await client.CreateFineTuningJobAsync(job);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateFineTuningJob_AllParameters()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                training_file = "<training_file>",
                validation_file = "<validation_file>",
                model = "babbage-002",
                hyperparameters = new
                {
                    n_epochs = new object(),
                },
                suffix = "<suffix>",
            }).ToStream());
            Result result = client.CreateFineTuningJob(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("created_at").ToString());
            Console.WriteLine(result0.GetProperty("finished_at").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("fine_tuned_model").ToString());
            Console.WriteLine(result0.GetProperty("organization_id").ToString());
            Console.WriteLine(result0.GetProperty("status").ToString());
            Console.WriteLine(result0.GetProperty("hyperparameters").GetProperty("n_epochs").ToString());
            Console.WriteLine(result0.GetProperty("training_file").ToString());
            Console.WriteLine(result0.GetProperty("validation_file").ToString());
            Console.WriteLine(result0.GetProperty("result_files")[0].ToString());
            Console.WriteLine(result0.GetProperty("trained_tokens").ToString());
            Console.WriteLine(result0.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result0.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result0.GetProperty("error").GetProperty("param").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateFineTuningJob_AllParameters_Async()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                training_file = "<training_file>",
                validation_file = "<validation_file>",
                model = "babbage-002",
                hyperparameters = new
                {
                    n_epochs = new object(),
                },
                suffix = "<suffix>",
            }).ToStream());
            Result result = await client.CreateFineTuningJobAsync(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("created_at").ToString());
            Console.WriteLine(result0.GetProperty("finished_at").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("fine_tuned_model").ToString());
            Console.WriteLine(result0.GetProperty("organization_id").ToString());
            Console.WriteLine(result0.GetProperty("status").ToString());
            Console.WriteLine(result0.GetProperty("hyperparameters").GetProperty("n_epochs").ToString());
            Console.WriteLine(result0.GetProperty("training_file").ToString());
            Console.WriteLine(result0.GetProperty("validation_file").ToString());
            Console.WriteLine(result0.GetProperty("result_files")[0].ToString());
            Console.WriteLine(result0.GetProperty("trained_tokens").ToString());
            Console.WriteLine(result0.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result0.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result0.GetProperty("error").GetProperty("param").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateFineTuningJob_AllParameters_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            CreateFineTuningJobRequest job = new CreateFineTuningJobRequest("<training_file>", FineTuningJobModels.Babbage002)
            {
                ValidationFile = "<validation_file>",
                Hyperparameters = new HyperParameters()
                {
                    NEpochs = BinaryData.FromObjectAsJson(new object()),
                },
                Suffix = "<suffix>",
            };
            Result<FineTuningJob> result = client.CreateFineTuningJob(job);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateFineTuningJob_AllParameters_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            CreateFineTuningJobRequest job = new CreateFineTuningJobRequest("<training_file>", FineTuningJobModels.Babbage002)
            {
                ValidationFile = "<validation_file>",
                Hyperparameters = new HyperParameters()
                {
                    NEpochs = BinaryData.FromObjectAsJson(new object()),
                },
                Suffix = "<suffix>",
            };
            Result<FineTuningJob> result = await client.CreateFineTuningJobAsync(job);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPaginatedFineTuningJobs()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = client.GetPaginatedFineTuningJobs(null, null, null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("finished_at").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("fine_tuned_model").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("organization_id").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("hyperparameters").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("training_file").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("validation_file").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("result_files")[0].ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("trained_tokens").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("error").ToString());
            Console.WriteLine(result0.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPaginatedFineTuningJobs_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = await client.GetPaginatedFineTuningJobsAsync(null, null, null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("finished_at").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("fine_tuned_model").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("organization_id").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("hyperparameters").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("training_file").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("validation_file").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("result_files")[0].ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("trained_tokens").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("error").ToString());
            Console.WriteLine(result0.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPaginatedFineTuningJobs_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            Result<ListPaginatedFineTuningJobsResponse> result = client.GetPaginatedFineTuningJobs();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPaginatedFineTuningJobs_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result<ListPaginatedFineTuningJobsResponse> result = await client.GetPaginatedFineTuningJobsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPaginatedFineTuningJobs_AllParameters()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = client.GetPaginatedFineTuningJobs("<after>", 1234L, null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("finished_at").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("fine_tuned_model").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("organization_id").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("hyperparameters").GetProperty("n_epochs").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("training_file").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("validation_file").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("result_files")[0].ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("trained_tokens").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("error").GetProperty("param").ToString());
            Console.WriteLine(result0.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPaginatedFineTuningJobs_AllParameters_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = await client.GetPaginatedFineTuningJobsAsync("<after>", 1234L, null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("finished_at").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("fine_tuned_model").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("organization_id").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("hyperparameters").GetProperty("n_epochs").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("training_file").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("validation_file").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("result_files")[0].ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("trained_tokens").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("error").GetProperty("param").ToString());
            Console.WriteLine(result0.GetProperty("has_more").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPaginatedFineTuningJobs_AllParameters_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            Result<ListPaginatedFineTuningJobsResponse> result = client.GetPaginatedFineTuningJobs(after: "<after>", limit: 1234L);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPaginatedFineTuningJobs_AllParameters_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result<ListPaginatedFineTuningJobsResponse> result = await client.GetPaginatedFineTuningJobsAsync(after: "<after>", limit: 1234L);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RetrieveFineTuningJob()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = client.RetrieveFineTuningJob("<fine_tuning_job_id>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("created_at").ToString());
            Console.WriteLine(result0.GetProperty("finished_at").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("fine_tuned_model").ToString());
            Console.WriteLine(result0.GetProperty("organization_id").ToString());
            Console.WriteLine(result0.GetProperty("status").ToString());
            Console.WriteLine(result0.GetProperty("hyperparameters").ToString());
            Console.WriteLine(result0.GetProperty("training_file").ToString());
            Console.WriteLine(result0.GetProperty("validation_file").ToString());
            Console.WriteLine(result0.GetProperty("result_files")[0].ToString());
            Console.WriteLine(result0.GetProperty("trained_tokens").ToString());
            Console.WriteLine(result0.GetProperty("error").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RetrieveFineTuningJob_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = await client.RetrieveFineTuningJobAsync("<fine_tuning_job_id>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("created_at").ToString());
            Console.WriteLine(result0.GetProperty("finished_at").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("fine_tuned_model").ToString());
            Console.WriteLine(result0.GetProperty("organization_id").ToString());
            Console.WriteLine(result0.GetProperty("status").ToString());
            Console.WriteLine(result0.GetProperty("hyperparameters").ToString());
            Console.WriteLine(result0.GetProperty("training_file").ToString());
            Console.WriteLine(result0.GetProperty("validation_file").ToString());
            Console.WriteLine(result0.GetProperty("result_files")[0].ToString());
            Console.WriteLine(result0.GetProperty("trained_tokens").ToString());
            Console.WriteLine(result0.GetProperty("error").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RetrieveFineTuningJob_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            Result<FineTuningJob> result = client.RetrieveFineTuningJob("<fine_tuning_job_id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RetrieveFineTuningJob_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result<FineTuningJob> result = await client.RetrieveFineTuningJobAsync("<fine_tuning_job_id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RetrieveFineTuningJob_AllParameters()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = client.RetrieveFineTuningJob("<fine_tuning_job_id>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("created_at").ToString());
            Console.WriteLine(result0.GetProperty("finished_at").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("fine_tuned_model").ToString());
            Console.WriteLine(result0.GetProperty("organization_id").ToString());
            Console.WriteLine(result0.GetProperty("status").ToString());
            Console.WriteLine(result0.GetProperty("hyperparameters").GetProperty("n_epochs").ToString());
            Console.WriteLine(result0.GetProperty("training_file").ToString());
            Console.WriteLine(result0.GetProperty("validation_file").ToString());
            Console.WriteLine(result0.GetProperty("result_files")[0].ToString());
            Console.WriteLine(result0.GetProperty("trained_tokens").ToString());
            Console.WriteLine(result0.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result0.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result0.GetProperty("error").GetProperty("param").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RetrieveFineTuningJob_AllParameters_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = await client.RetrieveFineTuningJobAsync("<fine_tuning_job_id>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("created_at").ToString());
            Console.WriteLine(result0.GetProperty("finished_at").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("fine_tuned_model").ToString());
            Console.WriteLine(result0.GetProperty("organization_id").ToString());
            Console.WriteLine(result0.GetProperty("status").ToString());
            Console.WriteLine(result0.GetProperty("hyperparameters").GetProperty("n_epochs").ToString());
            Console.WriteLine(result0.GetProperty("training_file").ToString());
            Console.WriteLine(result0.GetProperty("validation_file").ToString());
            Console.WriteLine(result0.GetProperty("result_files")[0].ToString());
            Console.WriteLine(result0.GetProperty("trained_tokens").ToString());
            Console.WriteLine(result0.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result0.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result0.GetProperty("error").GetProperty("param").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RetrieveFineTuningJob_AllParameters_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            Result<FineTuningJob> result = client.RetrieveFineTuningJob("<fine_tuning_job_id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RetrieveFineTuningJob_AllParameters_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result<FineTuningJob> result = await client.RetrieveFineTuningJobAsync("<fine_tuning_job_id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetFineTuningEvents()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = client.GetFineTuningEvents("<fine_tuning_job_id>", null, null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("level").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetFineTuningEvents_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = await client.GetFineTuningEventsAsync("<fine_tuning_job_id>", null, null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("level").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetFineTuningEvents_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            Result<ListFineTuningJobEventsResponse> result = client.GetFineTuningEvents("<fine_tuning_job_id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetFineTuningEvents_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result<ListFineTuningJobEventsResponse> result = await client.GetFineTuningEventsAsync("<fine_tuning_job_id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetFineTuningEvents_AllParameters()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = client.GetFineTuningEvents("<fine_tuning_job_id>", "<after>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("level").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetFineTuningEvents_AllParameters_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = await client.GetFineTuningEventsAsync("<fine_tuning_job_id>", "<after>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("created_at").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("level").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetFineTuningEvents_AllParameters_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            Result<ListFineTuningJobEventsResponse> result = client.GetFineTuningEvents("<fine_tuning_job_id>", after: "<after>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetFineTuningEvents_AllParameters_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result<ListFineTuningJobEventsResponse> result = await client.GetFineTuningEventsAsync("<fine_tuning_job_id>", after: "<after>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CancelFineTuningJob()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = client.CancelFineTuningJob("<fine_tuning_job_id>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("created_at").ToString());
            Console.WriteLine(result0.GetProperty("finished_at").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("fine_tuned_model").ToString());
            Console.WriteLine(result0.GetProperty("organization_id").ToString());
            Console.WriteLine(result0.GetProperty("status").ToString());
            Console.WriteLine(result0.GetProperty("hyperparameters").ToString());
            Console.WriteLine(result0.GetProperty("training_file").ToString());
            Console.WriteLine(result0.GetProperty("validation_file").ToString());
            Console.WriteLine(result0.GetProperty("result_files")[0].ToString());
            Console.WriteLine(result0.GetProperty("trained_tokens").ToString());
            Console.WriteLine(result0.GetProperty("error").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CancelFineTuningJob_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = await client.CancelFineTuningJobAsync("<fine_tuning_job_id>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("created_at").ToString());
            Console.WriteLine(result0.GetProperty("finished_at").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("fine_tuned_model").ToString());
            Console.WriteLine(result0.GetProperty("organization_id").ToString());
            Console.WriteLine(result0.GetProperty("status").ToString());
            Console.WriteLine(result0.GetProperty("hyperparameters").ToString());
            Console.WriteLine(result0.GetProperty("training_file").ToString());
            Console.WriteLine(result0.GetProperty("validation_file").ToString());
            Console.WriteLine(result0.GetProperty("result_files")[0].ToString());
            Console.WriteLine(result0.GetProperty("trained_tokens").ToString());
            Console.WriteLine(result0.GetProperty("error").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CancelFineTuningJob_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            Result<FineTuningJob> result = client.CancelFineTuningJob("<fine_tuning_job_id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CancelFineTuningJob_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result<FineTuningJob> result = await client.CancelFineTuningJobAsync("<fine_tuning_job_id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CancelFineTuningJob_AllParameters()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = client.CancelFineTuningJob("<fine_tuning_job_id>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("created_at").ToString());
            Console.WriteLine(result0.GetProperty("finished_at").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("fine_tuned_model").ToString());
            Console.WriteLine(result0.GetProperty("organization_id").ToString());
            Console.WriteLine(result0.GetProperty("status").ToString());
            Console.WriteLine(result0.GetProperty("hyperparameters").GetProperty("n_epochs").ToString());
            Console.WriteLine(result0.GetProperty("training_file").ToString());
            Console.WriteLine(result0.GetProperty("validation_file").ToString());
            Console.WriteLine(result0.GetProperty("result_files")[0].ToString());
            Console.WriteLine(result0.GetProperty("trained_tokens").ToString());
            Console.WriteLine(result0.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result0.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result0.GetProperty("error").GetProperty("param").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CancelFineTuningJob_AllParameters_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = await client.CancelFineTuningJobAsync("<fine_tuning_job_id>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("created_at").ToString());
            Console.WriteLine(result0.GetProperty("finished_at").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("fine_tuned_model").ToString());
            Console.WriteLine(result0.GetProperty("organization_id").ToString());
            Console.WriteLine(result0.GetProperty("status").ToString());
            Console.WriteLine(result0.GetProperty("hyperparameters").GetProperty("n_epochs").ToString());
            Console.WriteLine(result0.GetProperty("training_file").ToString());
            Console.WriteLine(result0.GetProperty("validation_file").ToString());
            Console.WriteLine(result0.GetProperty("result_files")[0].ToString());
            Console.WriteLine(result0.GetProperty("trained_tokens").ToString());
            Console.WriteLine(result0.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result0.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result0.GetProperty("error").GetProperty("param").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CancelFineTuningJob_AllParameters_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            Result<FineTuningJob> result = client.CancelFineTuningJob("<fine_tuning_job_id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CancelFineTuningJob_AllParameters_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result<FineTuningJob> result = await client.CancelFineTuningJobAsync("<fine_tuning_job_id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateCompletion()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                model = "babbage-002",
                prompt = new object(),
                best_of = 1234L,
            }).ToStream());
            Result result = client.CreateCompletion(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("index").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("text").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("tokens")[0].ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("token_logprobs")[0].ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("top_logprobs")[0].GetProperty("<key>").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("text_offset")[0].ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("finish_reason").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateCompletion_Async()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                model = "babbage-002",
                prompt = new object(),
                best_of = 1234L,
            }).ToStream());
            Result result = await client.CreateCompletionAsync(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("index").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("text").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("tokens")[0].ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("token_logprobs")[0].ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("top_logprobs")[0].GetProperty("<key>").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("text_offset")[0].ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("finish_reason").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateCompletion_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            CreateCompletionRequest body = new CreateCompletionRequest(CompletionModels.Babbage002, BinaryData.FromObjectAsJson(new object()), 1234L);
            Result<CreateCompletionResponse> result = client.CreateCompletion(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateCompletion_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            CreateCompletionRequest body = new CreateCompletionRequest(CompletionModels.Babbage002, BinaryData.FromObjectAsJson(new object()), 1234L);
            Result<CreateCompletionResponse> result = await client.CreateCompletionAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateCompletion_AllParameters()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                model = "babbage-002",
                prompt = new object(),
                suffix = "<suffix>",
                temperature = 123.45,
                top_p = 123.45,
                n = 1234L,
                max_tokens = 1234L,
                stop = new List<object>()
{
"<stop>"
},
                presence_penalty = 123.45,
                frequency_penalty = 123.45,
                logit_bias = new
                {
                    key = 1234L,
                },
                user = "<user>",
                stream = true,
                logprobs = 1234L,
                echo = true,
                best_of = 1234L,
            }).ToStream());
            Result result = client.CreateCompletion(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("index").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("text").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("tokens")[0].ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("token_logprobs")[0].ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("top_logprobs")[0].GetProperty("<key>").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("text_offset")[0].ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("finish_reason").ToString());
            Console.WriteLine(result0.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result0.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result0.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateCompletion_AllParameters_Async()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                model = "babbage-002",
                prompt = new object(),
                suffix = "<suffix>",
                temperature = 123.45,
                top_p = 123.45,
                n = 1234L,
                max_tokens = 1234L,
                stop = new List<object>()
{
"<stop>"
},
                presence_penalty = 123.45,
                frequency_penalty = 123.45,
                logit_bias = new
                {
                    key = 1234L,
                },
                user = "<user>",
                stream = true,
                logprobs = 1234L,
                echo = true,
                best_of = 1234L,
            }).ToStream());
            Result result = await client.CreateCompletionAsync(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("index").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("text").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("tokens")[0].ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("token_logprobs")[0].ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("top_logprobs")[0].GetProperty("<key>").ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("logprobs").GetProperty("text_offset")[0].ToString());
            Console.WriteLine(result0.GetProperty("choices")[0].GetProperty("finish_reason").ToString());
            Console.WriteLine(result0.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result0.GetProperty("usage").GetProperty("completion_tokens").ToString());
            Console.WriteLine(result0.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateCompletion_AllParameters_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            CreateCompletionRequest body = new CreateCompletionRequest(CompletionModels.Babbage002, BinaryData.FromObjectAsJson(new object()), 1234L)
            {
                Suffix = "<suffix>",
                Temperature = 123.45,
                TopP = 123.45,
                N = 1234L,
                MaxTokens = 1234L,
                Stop =
{
"<stop>"
},
                PresencePenalty = 123.45,
                FrequencyPenalty = 123.45,
                LogitBias =
{
["key"] = 1234L,
},
                User = "<user>",
                Stream = true,
                Logprobs = 1234L,
                Echo = true,
            };
            Result<CreateCompletionResponse> result = client.CreateCompletion(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateCompletion_AllParameters_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            CreateCompletionRequest body = new CreateCompletionRequest(CompletionModels.Babbage002, BinaryData.FromObjectAsJson(new object()), 1234L)
            {
                Suffix = "<suffix>",
                Temperature = 123.45,
                TopP = 123.45,
                N = 1234L,
                MaxTokens = 1234L,
                Stop =
{
"<stop>"
},
                PresencePenalty = 123.45,
                FrequencyPenalty = 123.45,
                LogitBias =
{
["key"] = 1234L,
},
                User = "<user>",
                Stream = true,
                Logprobs = 1234L,
                Echo = true,
            };
            Result<CreateCompletionResponse> result = await client.CreateCompletionAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateImage()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                prompt = "<prompt>",
            }).ToStream());
            Result result = client.CreateImage(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateImage_Async()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                prompt = "<prompt>",
            }).ToStream());
            Result result = await client.CreateImageAsync(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateImage_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            CreateImageRequest image = new CreateImageRequest("<prompt>");
            Result<ImagesResponse> result = client.CreateImage(image);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateImage_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            CreateImageRequest image = new CreateImageRequest("<prompt>");
            Result<ImagesResponse> result = await client.CreateImageAsync(image);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateImage_AllParameters()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                prompt = "<prompt>",
                n = 1234L,
                size = "256x256",
                response_format = "url",
                user = "<user>",
            }).ToStream());
            Result result = client.CreateImage(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("url").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("b64_json").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateImage_AllParameters_Async()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                prompt = "<prompt>",
                n = 1234L,
                size = "256x256",
                response_format = "url",
                user = "<user>",
            }).ToStream());
            Result result = await client.CreateImageAsync(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("url").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("b64_json").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateImage_AllParameters_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            CreateImageRequest image = new CreateImageRequest("<prompt>")
            {
                N = 1234L,
                Size = ImageSizes._256x256,
                ResponseFormat = ImageResponseFormat.Url,
                User = "<user>",
            };
            Result<ImagesResponse> result = client.CreateImage(image);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateImage_AllParameters_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            CreateImageRequest image = new CreateImageRequest("<prompt>")
            {
                N = 1234L,
                Size = ImageSizes._256x256,
                ResponseFormat = ImageResponseFormat.Url,
                User = "<user>",
            };
            Result<ImagesResponse> result = await client.CreateImageAsync(image);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateImageEdit()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                prompt = "<prompt>",
                image = new object(),
            }).ToStream());
            Result result = client.CreateImageEdit(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateImageEdit_Async()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                prompt = "<prompt>",
                image = new object(),
            }).ToStream());
            Result result = await client.CreateImageEditAsync(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateImageEdit_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            CreateImageEditRequest image = new CreateImageEditRequest("<prompt>", BinaryData.FromObjectAsJson(new object()));
            Result<ImagesResponse> result = client.CreateImageEdit(image);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateImageEdit_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            CreateImageEditRequest image = new CreateImageEditRequest("<prompt>", BinaryData.FromObjectAsJson(new object()));
            Result<ImagesResponse> result = await client.CreateImageEditAsync(image);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateImageEdit_AllParameters()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                prompt = "<prompt>",
                image = new object(),
                mask = new object(),
                n = 1234L,
                size = "256x256",
                response_format = "url",
                user = "<user>",
            }).ToStream());
            Result result = client.CreateImageEdit(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("url").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("b64_json").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateImageEdit_AllParameters_Async()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                prompt = "<prompt>",
                image = new object(),
                mask = new object(),
                n = 1234L,
                size = "256x256",
                response_format = "url",
                user = "<user>",
            }).ToStream());
            Result result = await client.CreateImageEditAsync(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("url").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("b64_json").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateImageEdit_AllParameters_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            CreateImageEditRequest image = new CreateImageEditRequest("<prompt>", BinaryData.FromObjectAsJson(new object()))
            {
                Mask = BinaryData.FromObjectAsJson(new object()),
                N = 1234L,
                Size = ImageSizes._256x256,
                ResponseFormat = ImageResponseFormat.Url,
                User = "<user>",
            };
            Result<ImagesResponse> result = client.CreateImageEdit(image);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateImageEdit_AllParameters_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            CreateImageEditRequest image = new CreateImageEditRequest("<prompt>", BinaryData.FromObjectAsJson(new object()))
            {
                Mask = BinaryData.FromObjectAsJson(new object()),
                N = 1234L,
                Size = ImageSizes._256x256,
                ResponseFormat = ImageResponseFormat.Url,
                User = "<user>",
            };
            Result<ImagesResponse> result = await client.CreateImageEditAsync(image);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateImageVariation()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                image = new object(),
            }).ToStream());
            Result result = client.CreateImageVariation(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateImageVariation_Async()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                image = new object(),
            }).ToStream());
            Result result = await client.CreateImageVariationAsync(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateImageVariation_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            CreateImageVariationRequest image = new CreateImageVariationRequest(BinaryData.FromObjectAsJson(new object()));
            Result<ImagesResponse> result = client.CreateImageVariation(image);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateImageVariation_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            CreateImageVariationRequest image = new CreateImageVariationRequest(BinaryData.FromObjectAsJson(new object()));
            Result<ImagesResponse> result = await client.CreateImageVariationAsync(image);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateImageVariation_AllParameters()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                image = new object(),
                n = 1234L,
                size = "256x256",
                response_format = "url",
                user = "<user>",
            }).ToStream());
            Result result = client.CreateImageVariation(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("url").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("b64_json").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateImageVariation_AllParameters_Async()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                image = new object(),
                n = 1234L,
                size = "256x256",
                response_format = "url",
                user = "<user>",
            }).ToStream());
            Result result = await client.CreateImageVariationAsync(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("url").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("b64_json").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateImageVariation_AllParameters_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            CreateImageVariationRequest image = new CreateImageVariationRequest(BinaryData.FromObjectAsJson(new object()))
            {
                N = 1234L,
                Size = ImageSizes._256x256,
                ResponseFormat = ImageResponseFormat.Url,
                User = "<user>",
            };
            Result<ImagesResponse> result = client.CreateImageVariation(image);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateImageVariation_AllParameters_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            CreateImageVariationRequest image = new CreateImageVariationRequest(BinaryData.FromObjectAsJson(new object()))
            {
                N = 1234L,
                Size = ImageSizes._256x256,
                ResponseFormat = ImageResponseFormat.Url,
                User = "<user>",
            };
            Result<ImagesResponse> result = await client.CreateImageVariationAsync(image);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateEmbedding()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                model = "text-embedding-ada-002",
                input = new object(),
            }).ToStream());
            Result result = client.CreateEmbedding(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("index").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("embeddings")[0].ToString());
            Console.WriteLine(result0.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result0.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateEmbedding_Async()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                model = "text-embedding-ada-002",
                input = new object(),
            }).ToStream());
            Result result = await client.CreateEmbeddingAsync(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("index").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("embeddings")[0].ToString());
            Console.WriteLine(result0.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result0.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateEmbedding_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            CreateEmbeddingRequest embedding = new CreateEmbeddingRequest(EmbeddingsModels.TextEmbeddingAda002, BinaryData.FromObjectAsJson(new object()));
            Result<CreateEmbeddingResponse> result = client.CreateEmbedding(embedding);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateEmbedding_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            CreateEmbeddingRequest embedding = new CreateEmbeddingRequest(EmbeddingsModels.TextEmbeddingAda002, BinaryData.FromObjectAsJson(new object()));
            Result<CreateEmbeddingResponse> result = await client.CreateEmbeddingAsync(embedding);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateEmbedding_AllParameters()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                model = "text-embedding-ada-002",
                input = new object(),
                user = "<user>",
            }).ToStream());
            Result result = client.CreateEmbedding(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("index").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("embeddings")[0].ToString());
            Console.WriteLine(result0.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result0.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateEmbedding_AllParameters_Async()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                model = "text-embedding-ada-002",
                input = new object(),
                user = "<user>",
            }).ToStream());
            Result result = await client.CreateEmbeddingAsync(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("index").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("embeddings")[0].ToString());
            Console.WriteLine(result0.GetProperty("usage").GetProperty("prompt_tokens").ToString());
            Console.WriteLine(result0.GetProperty("usage").GetProperty("total_tokens").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateEmbedding_AllParameters_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            CreateEmbeddingRequest embedding = new CreateEmbeddingRequest(EmbeddingsModels.TextEmbeddingAda002, BinaryData.FromObjectAsJson(new object()))
            {
                User = "<user>",
            };
            Result<CreateEmbeddingResponse> result = client.CreateEmbedding(embedding);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateEmbedding_AllParameters_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            CreateEmbeddingRequest embedding = new CreateEmbeddingRequest(EmbeddingsModels.TextEmbeddingAda002, BinaryData.FromObjectAsJson(new object()))
            {
                User = "<user>",
            };
            Result<CreateEmbeddingResponse> result = await client.CreateEmbeddingAsync(embedding);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetFiles()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = client.GetFiles(null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("bytes").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("filename").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("purpose").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetFiles_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = await client.GetFilesAsync(null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("bytes").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("filename").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("purpose").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetFiles_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            Result<ListFilesResponse> result = client.GetFiles();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetFiles_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result<ListFilesResponse> result = await client.GetFilesAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetFiles_AllParameters()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = client.GetFiles(null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("bytes").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("filename").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("purpose").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("status_details").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetFiles_AllParameters_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = await client.GetFilesAsync(null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("bytes").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("createdAt").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("filename").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("purpose").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("status").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("status_details").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetFiles_AllParameters_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            Result<ListFilesResponse> result = client.GetFiles();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetFiles_AllParameters_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result<ListFilesResponse> result = await client.GetFilesAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateFile()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                file = new object(),
                purpose = "<purpose>",
            }).ToStream());
            Result result = client.CreateFile(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("bytes").ToString());
            Console.WriteLine(result0.GetProperty("createdAt").ToString());
            Console.WriteLine(result0.GetProperty("filename").ToString());
            Console.WriteLine(result0.GetProperty("purpose").ToString());
            Console.WriteLine(result0.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateFile_Async()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                file = new object(),
                purpose = "<purpose>",
            }).ToStream());
            Result result = await client.CreateFileAsync(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("bytes").ToString());
            Console.WriteLine(result0.GetProperty("createdAt").ToString());
            Console.WriteLine(result0.GetProperty("filename").ToString());
            Console.WriteLine(result0.GetProperty("purpose").ToString());
            Console.WriteLine(result0.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateFile_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            CreateFileRequest file = new CreateFileRequest(BinaryData.FromObjectAsJson(new object()), "<purpose>");
            Result<OpenAIFile> result = client.CreateFile(file);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateFile_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            CreateFileRequest file = new CreateFileRequest(BinaryData.FromObjectAsJson(new object()), "<purpose>");
            Result<OpenAIFile> result = await client.CreateFileAsync(file);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateFile_AllParameters()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                file = new object(),
                purpose = "<purpose>",
            }).ToStream());
            Result result = client.CreateFile(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("bytes").ToString());
            Console.WriteLine(result0.GetProperty("createdAt").ToString());
            Console.WriteLine(result0.GetProperty("filename").ToString());
            Console.WriteLine(result0.GetProperty("purpose").ToString());
            Console.WriteLine(result0.GetProperty("status").ToString());
            Console.WriteLine(result0.GetProperty("status_details").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateFile_AllParameters_Async()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                file = new object(),
                purpose = "<purpose>",
            }).ToStream());
            Result result = await client.CreateFileAsync(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("bytes").ToString());
            Console.WriteLine(result0.GetProperty("createdAt").ToString());
            Console.WriteLine(result0.GetProperty("filename").ToString());
            Console.WriteLine(result0.GetProperty("purpose").ToString());
            Console.WriteLine(result0.GetProperty("status").ToString());
            Console.WriteLine(result0.GetProperty("status_details").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateFile_AllParameters_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            CreateFileRequest file = new CreateFileRequest(BinaryData.FromObjectAsJson(new object()), "<purpose>");
            Result<OpenAIFile> result = client.CreateFile(file);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateFile_AllParameters_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            CreateFileRequest file = new CreateFileRequest(BinaryData.FromObjectAsJson(new object()), "<purpose>");
            Result<OpenAIFile> result = await client.CreateFileAsync(file);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RetrieveFile()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = client.RetrieveFile("<file_id>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("bytes").ToString());
            Console.WriteLine(result0.GetProperty("createdAt").ToString());
            Console.WriteLine(result0.GetProperty("filename").ToString());
            Console.WriteLine(result0.GetProperty("purpose").ToString());
            Console.WriteLine(result0.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RetrieveFile_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = await client.RetrieveFileAsync("<file_id>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("bytes").ToString());
            Console.WriteLine(result0.GetProperty("createdAt").ToString());
            Console.WriteLine(result0.GetProperty("filename").ToString());
            Console.WriteLine(result0.GetProperty("purpose").ToString());
            Console.WriteLine(result0.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RetrieveFile_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            Result<OpenAIFile> result = client.RetrieveFile("<file_id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RetrieveFile_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result<OpenAIFile> result = await client.RetrieveFileAsync("<file_id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RetrieveFile_AllParameters()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = client.RetrieveFile("<file_id>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("bytes").ToString());
            Console.WriteLine(result0.GetProperty("createdAt").ToString());
            Console.WriteLine(result0.GetProperty("filename").ToString());
            Console.WriteLine(result0.GetProperty("purpose").ToString());
            Console.WriteLine(result0.GetProperty("status").ToString());
            Console.WriteLine(result0.GetProperty("status_details").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RetrieveFile_AllParameters_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = await client.RetrieveFileAsync("<file_id>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("bytes").ToString());
            Console.WriteLine(result0.GetProperty("createdAt").ToString());
            Console.WriteLine(result0.GetProperty("filename").ToString());
            Console.WriteLine(result0.GetProperty("purpose").ToString());
            Console.WriteLine(result0.GetProperty("status").ToString());
            Console.WriteLine(result0.GetProperty("status_details").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RetrieveFile_AllParameters_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            Result<OpenAIFile> result = client.RetrieveFile("<file_id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RetrieveFile_AllParameters_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result<OpenAIFile> result = await client.RetrieveFileAsync("<file_id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteFile()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = client.DeleteFile("<file_id>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("deleted").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteFile_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = await client.DeleteFileAsync("<file_id>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("deleted").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteFile_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            Result<DeleteFileResponse> result = client.DeleteFile("<file_id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteFile_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result<DeleteFileResponse> result = await client.DeleteFileAsync("<file_id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteFile_AllParameters()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = client.DeleteFile("<file_id>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("deleted").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteFile_AllParameters_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = await client.DeleteFileAsync("<file_id>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("deleted").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteFile_AllParameters_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            Result<DeleteFileResponse> result = client.DeleteFile("<file_id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteFile_AllParameters_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result<DeleteFileResponse> result = await client.DeleteFileAsync("<file_id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DownloadFile()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = client.DownloadFile("<file_id>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DownloadFile_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = await client.DownloadFileAsync("<file_id>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DownloadFile_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            Result<string> result = client.DownloadFile("<file_id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DownloadFile_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result<string> result = await client.DownloadFileAsync("<file_id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DownloadFile_AllParameters()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = client.DownloadFile("<file_id>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DownloadFile_AllParameters_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = await client.DownloadFileAsync("<file_id>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DownloadFile_AllParameters_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            Result<string> result = client.DownloadFile("<file_id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DownloadFile_AllParameters_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result<string> result = await client.DownloadFileAsync("<file_id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetModels()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = client.GetModels(null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("owned_by").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetModels_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = await client.GetModelsAsync(null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("owned_by").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetModels_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            Result<ListModelsResponse> result = client.GetModels();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetModels_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result<ListModelsResponse> result = await client.GetModelsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetModels_AllParameters()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = client.GetModels(null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("owned_by").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetModels_AllParameters_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = await client.GetModelsAsync(null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("data")[0].GetProperty("owned_by").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetModels_AllParameters_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            Result<ListModelsResponse> result = client.GetModels();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetModels_AllParameters_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result<ListModelsResponse> result = await client.GetModelsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RetrieveModel()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = client.RetrieveModel("<model>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("owned_by").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RetrieveModel_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = await client.RetrieveModelAsync("<model>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("owned_by").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RetrieveModel_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            Result<Model> result = client.RetrieveModel("<model>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RetrieveModel_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result<Model> result = await client.RetrieveModelAsync("<model>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RetrieveModel_AllParameters()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = client.RetrieveModel("<model>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("owned_by").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RetrieveModel_AllParameters_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = await client.RetrieveModelAsync("<model>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("created").ToString());
            Console.WriteLine(result0.GetProperty("owned_by").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RetrieveModel_AllParameters_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            Result<Model> result = client.RetrieveModel("<model>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RetrieveModel_AllParameters_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result<Model> result = await client.RetrieveModelAsync("<model>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteModel()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = client.DeleteModel("<model>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("deleted").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteModel_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = await client.DeleteModelAsync("<model>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("deleted").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteModel_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            Result<DeleteModelResponse> result = client.DeleteModel("<model>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteModel_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result<DeleteModelResponse> result = await client.DeleteModelAsync("<model>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteModel_AllParameters()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = client.DeleteModel("<model>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("deleted").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteModel_AllParameters_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result result = await client.DeleteModelAsync("<model>", null);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("object").ToString());
            Console.WriteLine(result0.GetProperty("deleted").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteModel_AllParameters_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            Result<DeleteModelResponse> result = client.DeleteModel("<model>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteModel_AllParameters_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            Result<DeleteModelResponse> result = await client.DeleteModelAsync("<model>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateModeration()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                input = new List<object>()
{
"<input>"
},
            }).ToStream());
            Result result = client.CreateModeration(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("flagged").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("hate").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("hate/threatening").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("harassment").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("harassment/threatening").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("self-harm").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("self-harm/intent").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("self-harm/instructive").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("sexual").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("sexual/minors").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("violence").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("violence/graphic").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("hate").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("hate/threatening").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("harassment").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("harassment/threatening").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("self-harm").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("self-harm/intent").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("self-harm/instructive").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("sexual").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("sexual/minors").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("violence").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("violence/graphic").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateModeration_Async()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                input = new List<object>()
{
"<input>"
},
            }).ToStream());
            Result result = await client.CreateModerationAsync(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("flagged").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("hate").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("hate/threatening").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("harassment").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("harassment/threatening").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("self-harm").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("self-harm/intent").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("self-harm/instructive").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("sexual").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("sexual/minors").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("violence").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("violence/graphic").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("hate").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("hate/threatening").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("harassment").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("harassment/threatening").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("self-harm").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("self-harm/intent").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("self-harm/instructive").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("sexual").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("sexual/minors").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("violence").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("violence/graphic").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateModeration_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            CreateModerationRequest content = new CreateModerationRequest(new List<string>()
{
"<input>"
});
            Result<CreateModerationResponse> result = client.CreateModeration(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateModeration_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            CreateModerationRequest content = new CreateModerationRequest(new List<string>()
{
"<input>"
});
            Result<CreateModerationResponse> result = await client.CreateModerationAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateModeration_AllParameters()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                input = new List<object>()
{
"<input>"
},
                model = "text-moderation-latest",
            }).ToStream());
            Result result = client.CreateModeration(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("flagged").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("hate").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("hate/threatening").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("harassment").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("harassment/threatening").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("self-harm").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("self-harm/intent").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("self-harm/instructive").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("sexual").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("sexual/minors").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("violence").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("violence/graphic").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("hate").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("hate/threatening").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("harassment").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("harassment/threatening").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("self-harm").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("self-harm/intent").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("self-harm/instructive").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("sexual").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("sexual/minors").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("violence").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("violence/graphic").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateModeration_AllParameters_Async()
        {
            OpenAIClient client = new OpenAIClient();

            RequestBody content = RequestBody.CreateFromStream(BinaryData.FromObjectAsJson(new
            {
                input = new List<object>()
{
"<input>"
},
                model = "text-moderation-latest",
            }).ToStream());
            Result result = await client.CreateModerationAsync(content);

            JsonElement result0 = JsonDocument.Parse(result.GetRawResponse().ContentStream).RootElement;
            Console.WriteLine(result0.GetProperty("id").ToString());
            Console.WriteLine(result0.GetProperty("model").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("flagged").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("hate").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("hate/threatening").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("harassment").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("harassment/threatening").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("self-harm").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("self-harm/intent").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("self-harm/instructive").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("sexual").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("sexual/minors").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("violence").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("categories").GetProperty("violence/graphic").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("hate").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("hate/threatening").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("harassment").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("harassment/threatening").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("self-harm").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("self-harm/intent").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("self-harm/instructive").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("sexual").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("sexual/minors").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("violence").ToString());
            Console.WriteLine(result0.GetProperty("results")[0].GetProperty("category_scores").GetProperty("violence/graphic").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateModeration_AllParameters_Convenience()
        {
            OpenAIClient client = new OpenAIClient();

            CreateModerationRequest content = new CreateModerationRequest(new List<string>()
{
"<input>"
})
            {
                Model = ModerationModels.TextModerationLatest,
            };
            Result<CreateModerationResponse> result = client.CreateModeration(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateModeration_AllParameters_Convenience_Async()
        {
            OpenAIClient client = new OpenAIClient();

            CreateModerationRequest content = new CreateModerationRequest(new List<string>()
{
"<input>"
})
            {
                Model = ModerationModels.TextModerationLatest,
            };
            Result<CreateModerationResponse> result = await client.CreateModerationAsync(content);
        }
    }
}
