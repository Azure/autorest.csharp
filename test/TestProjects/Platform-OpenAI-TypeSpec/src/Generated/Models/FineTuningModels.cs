// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace OpenAI.Models
{
    /// <summary> fine tuning models. </summary>
    public readonly partial struct FineTuningModels : IEquatable<FineTuningModels>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FineTuningModels"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FineTuningModels(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AdaValue = "ada";
        private const string BabbageValue = "babbage";
        private const string CurieValue = "curie";
        private const string DavinciValue = "davinci";

        /// <summary> ada. </summary>
        public static FineTuningModels Ada { get; } = new FineTuningModels(AdaValue);
        /// <summary> babbage. </summary>
        public static FineTuningModels Babbage { get; } = new FineTuningModels(BabbageValue);
        /// <summary> curie. </summary>
        public static FineTuningModels Curie { get; } = new FineTuningModels(CurieValue);
        /// <summary> davinci. </summary>
        public static FineTuningModels Davinci { get; } = new FineTuningModels(DavinciValue);
        /// <summary> Determines if two <see cref="FineTuningModels"/> values are the same. </summary>
        public static bool operator ==(FineTuningModels left, FineTuningModels right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FineTuningModels"/> values are not the same. </summary>
        public static bool operator !=(FineTuningModels left, FineTuningModels right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FineTuningModels"/>. </summary>
        public static implicit operator FineTuningModels(string value) => new FineTuningModels(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FineTuningModels other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FineTuningModels other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
