// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;

namespace SupersetFlattenInheritance
{
    /// <summary> A class to add extension methods to ResourceGroup. </summary>
    public static partial class ResourceGroupExtensions
    {
        #region CustomModel1s
        /// <summary> Gets an object representing a CustomModel1Container along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="CustomModel1Container" /> object. </returns>
        public static CustomModel1Container GetCustomModel1s(this ResourceGroupOperations resourceGroup)
        {
            return new CustomModel1Container(resourceGroup);
        }
        #endregion

        #region CustomModel2s
        /// <summary> Gets an object representing a CustomModel2Container along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="CustomModel2Container" /> object. </returns>
        public static CustomModel2Container GetCustomModel2s(this ResourceGroupOperations resourceGroup)
        {
            return new CustomModel2Container(resourceGroup);
        }
        #endregion

        #region SubResourceModel1s
        /// <summary> Gets an object representing a SubResourceModel1Container along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="SubResourceModel1Container" /> object. </returns>
        public static SubResourceModel1Container GetSubResourceModel1s(this ResourceGroupOperations resourceGroup)
        {
            return new SubResourceModel1Container(resourceGroup);
        }
        #endregion

        #region SubResourceModel2s
        /// <summary> Gets an object representing a SubResourceModel2Container along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="SubResourceModel2Container" /> object. </returns>
        public static SubResourceModel2Container GetSubResourceModel2s(this ResourceGroupOperations resourceGroup)
        {
            return new SubResourceModel2Container(resourceGroup);
        }
        #endregion

        #region WritableSubResourceModel1s
        /// <summary> Gets an object representing a WritableSubResourceModel1Container along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="WritableSubResourceModel1Container" /> object. </returns>
        public static WritableSubResourceModel1Container GetWritableSubResourceModel1s(this ResourceGroupOperations resourceGroup)
        {
            return new WritableSubResourceModel1Container(resourceGroup);
        }
        #endregion

        #region WritableSubResourceModel2s
        /// <summary> Gets an object representing a WritableSubResourceModel2Container along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="WritableSubResourceModel2Container" /> object. </returns>
        public static WritableSubResourceModel2Container GetWritableSubResourceModel2s(this ResourceGroupOperations resourceGroup)
        {
            return new WritableSubResourceModel2Container(resourceGroup);
        }
        #endregion

        #region ResourceModel1s
        /// <summary> Gets an object representing a ResourceModel1Container along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="ResourceModel1Container" /> object. </returns>
        public static ResourceModel1Container GetResourceModel1s(this ResourceGroupOperations resourceGroup)
        {
            return new ResourceModel1Container(resourceGroup);
        }
        #endregion

        #region ResourceModel2s
        /// <summary> Gets an object representing a ResourceModel2Container along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="ResourceModel2Container" /> object. </returns>
        public static ResourceModel2Container GetResourceModel2s(this ResourceGroupOperations resourceGroup)
        {
            return new ResourceModel2Container(resourceGroup);
        }
        #endregion

        #region TrackedResourceModel1s
        /// <summary> Gets an object representing a TrackedResourceModel1Container along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="TrackedResourceModel1Container" /> object. </returns>
        public static TrackedResourceModel1Container GetTrackedResourceModel1s(this ResourceGroupOperations resourceGroup)
        {
            return new TrackedResourceModel1Container(resourceGroup);
        }
        #endregion

        #region TrackedResourceModel2s
        /// <summary> Gets an object representing a TrackedResourceModel2Container along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="TrackedResourceModel2Container" /> object. </returns>
        public static TrackedResourceModel2Container GetTrackedResourceModel2s(this ResourceGroupOperations resourceGroup)
        {
            return new TrackedResourceModel2Container(resourceGroup);
        }
        #endregion

        #region NonResourceModel1
        private static NonResourceModel1SRestOperations GetNonResourceModel1SRestOperations(ClientDiagnostics clientDiagnostics, TokenCredential credential, ArmClientOptions clientOptions, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null)
        {
            return new NonResourceModel1SRestOperations(clientDiagnostics, pipeline, subscriptionId, endpoint);
        }

        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <param name="nonResourceModel1SName"> The String to use. </param>
        /// <param name="parameters"> The NonResourceModel1 to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nonResourceModel1SName"/> or <paramref name="parameters"/> is null. </exception>
        public static async Task<Response<NonResourceModel1>> PutNonResourceModel1Async(this ResourceGroupOperations resourceGroup, string nonResourceModel1SName, NonResourceModel1 parameters, CancellationToken cancellationToken = default)
        {
            if (nonResourceModel1SName == null)
            {
                throw new ArgumentNullException(nameof(nonResourceModel1SName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            return await resourceGroup.UseClientContext(async (baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                var restOperations = GetNonResourceModel1SRestOperations(clientDiagnostics, credential, options, pipeline, resourceGroup.Id.SubscriptionId, baseUri);
                using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.PutNonResourceModel1");
                scope.Start();
                try
                {
                    var response = await restOperations.PutAsync(resourceGroup.Id.Name, nonResourceModel1SName, parameters, cancellationToken).ConfigureAwait(false);
                    return response;
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            );
        }

        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <param name="nonResourceModel1SName"> The String to use. </param>
        /// <param name="parameters"> The NonResourceModel1 to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nonResourceModel1SName"/> or <paramref name="parameters"/> is null. </exception>
        public static Response<NonResourceModel1> PutNonResourceModel1(this ResourceGroupOperations resourceGroup, string nonResourceModel1SName, NonResourceModel1 parameters, CancellationToken cancellationToken = default)
        {
            if (nonResourceModel1SName == null)
            {
                throw new ArgumentNullException(nameof(nonResourceModel1SName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            return resourceGroup.UseClientContext((baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                var restOperations = GetNonResourceModel1SRestOperations(clientDiagnostics, credential, options, pipeline, resourceGroup.Id.SubscriptionId, baseUri);
                using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.PutNonResourceModel1");
                scope.Start();
                try
                {
                    var response = restOperations.Put(resourceGroup.Id.Name, nonResourceModel1SName, parameters, cancellationToken);
                    return response;
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            );
        }

        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <param name="nonResourceModel1SName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nonResourceModel1SName"/> is null. </exception>
        public static async Task<Response<NonResourceModel1>> GetNonResourceModel1Async(this ResourceGroupOperations resourceGroup, string nonResourceModel1SName, CancellationToken cancellationToken = default)
        {
            if (nonResourceModel1SName == null)
            {
                throw new ArgumentNullException(nameof(nonResourceModel1SName));
            }

            return await resourceGroup.UseClientContext(async (baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                var restOperations = GetNonResourceModel1SRestOperations(clientDiagnostics, credential, options, pipeline, resourceGroup.Id.SubscriptionId, baseUri);
                using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.GetNonResourceModel1");
                scope.Start();
                try
                {
                    var response = await restOperations.GetAsync(resourceGroup.Id.Name, nonResourceModel1SName, cancellationToken).ConfigureAwait(false);
                    return response;
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            );
        }

        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <param name="nonResourceModel1SName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nonResourceModel1SName"/> is null. </exception>
        public static Response<NonResourceModel1> GetNonResourceModel1(this ResourceGroupOperations resourceGroup, string nonResourceModel1SName, CancellationToken cancellationToken = default)
        {
            if (nonResourceModel1SName == null)
            {
                throw new ArgumentNullException(nameof(nonResourceModel1SName));
            }

            return resourceGroup.UseClientContext((baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                var restOperations = GetNonResourceModel1SRestOperations(clientDiagnostics, credential, options, pipeline, resourceGroup.Id.SubscriptionId, baseUri);
                using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.GetNonResourceModel1");
                scope.Start();
                try
                {
                    var response = restOperations.Get(resourceGroup.Id.Name, nonResourceModel1SName, cancellationToken);
                    return response;
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            );
        }

        #endregion
    }
}
