// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using SupersetFlattenInheritance.Models;

namespace SupersetFlattenInheritance
{
    /// <summary> A class to add extension methods to ResourceGroup. </summary>
    public static partial class ResourceGroupExtensions
    {
        #region CustomModel1
        /// <summary> Gets an object representing a CustomModel1Collection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="CustomModel1Collection" /> object. </returns>
        public static CustomModel1Collection GetCustomModel1s(this ResourceGroup resourceGroup)
        {
            return new CustomModel1Collection(resourceGroup);
        }
        #endregion

        #region CustomModel2
        /// <summary> Gets an object representing a CustomModel2Collection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="CustomModel2Collection" /> object. </returns>
        public static CustomModel2Collection GetCustomModel2s(this ResourceGroup resourceGroup)
        {
            return new CustomModel2Collection(resourceGroup);
        }
        #endregion

        #region SubResourceModel1
        /// <summary> Gets an object representing a SubResourceModel1Collection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="SubResourceModel1Collection" /> object. </returns>
        public static SubResourceModel1Collection GetSubResourceModel1s(this ResourceGroup resourceGroup)
        {
            return new SubResourceModel1Collection(resourceGroup);
        }
        #endregion

        #region SubResourceModel2
        /// <summary> Gets an object representing a SubResourceModel2Collection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="SubResourceModel2Collection" /> object. </returns>
        public static SubResourceModel2Collection GetSubResourceModel2s(this ResourceGroup resourceGroup)
        {
            return new SubResourceModel2Collection(resourceGroup);
        }
        #endregion

        #region WritableSubResourceModel1
        /// <summary> Gets an object representing a WritableSubResourceModel1Collection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="WritableSubResourceModel1Collection" /> object. </returns>
        public static WritableSubResourceModel1Collection GetWritableSubResourceModel1s(this ResourceGroup resourceGroup)
        {
            return new WritableSubResourceModel1Collection(resourceGroup);
        }
        #endregion

        #region WritableSubResourceModel2
        /// <summary> Gets an object representing a WritableSubResourceModel2Collection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="WritableSubResourceModel2Collection" /> object. </returns>
        public static WritableSubResourceModel2Collection GetWritableSubResourceModel2s(this ResourceGroup resourceGroup)
        {
            return new WritableSubResourceModel2Collection(resourceGroup);
        }
        #endregion

        #region ResourceModel1
        /// <summary> Gets an object representing a ResourceModel1Collection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="ResourceModel1Collection" /> object. </returns>
        public static ResourceModel1Collection GetResourceModel1s(this ResourceGroup resourceGroup)
        {
            return new ResourceModel1Collection(resourceGroup);
        }
        #endregion

        #region ResourceModel2
        /// <summary> Gets an object representing a ResourceModel2Collection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="ResourceModel2Collection" /> object. </returns>
        public static ResourceModel2Collection GetResourceModel2s(this ResourceGroup resourceGroup)
        {
            return new ResourceModel2Collection(resourceGroup);
        }
        #endregion

        #region TrackedResourceModel1
        /// <summary> Gets an object representing a TrackedResourceModel1Collection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="TrackedResourceModel1Collection" /> object. </returns>
        public static TrackedResourceModel1Collection GetTrackedResourceModel1s(this ResourceGroup resourceGroup)
        {
            return new TrackedResourceModel1Collection(resourceGroup);
        }
        #endregion

        #region TrackedResourceModel2
        /// <summary> Gets an object representing a TrackedResourceModel2Collection along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="TrackedResourceModel2Collection" /> object. </returns>
        public static TrackedResourceModel2Collection GetTrackedResourceModel2s(this ResourceGroup resourceGroup)
        {
            return new TrackedResourceModel2Collection(resourceGroup);
        }
        #endregion

        #region NonResourceModel1
        private static NonResourceModel1SRestOperations GetNonResourceModel1SRestOperations(ClientDiagnostics clientDiagnostics, TokenCredential credential, ArmClientOptions clientOptions, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null)
        {
            return new NonResourceModel1SRestOperations(clientDiagnostics, pipeline, clientOptions, subscriptionId, endpoint);
        }

        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="nonResourceModel1SName"> The String to use. </param>
        /// <param name="parameters"> The NonResourceModel1 to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nonResourceModel1SName"/> or <paramref name="parameters"/> is null. </exception>
        public static async Task<Response<NonResourceModel1>> PutNonResourceModel1Async(this ResourceGroup resourceGroup, string nonResourceModel1SName, NonResourceModel1 parameters, CancellationToken cancellationToken = default)
        {
            if (nonResourceModel1SName == null)
            {
                throw new ArgumentNullException(nameof(nonResourceModel1SName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            return await resourceGroup.UseClientContext(async (baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                var restOperations = GetNonResourceModel1SRestOperations(clientDiagnostics, credential, options, pipeline, resourceGroup.Id.SubscriptionId, baseUri);
                using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.PutNonResourceModel1");
                scope.Start();
                try
                {
                    var response = await restOperations.PutAsync(resourceGroup.Id.Name, nonResourceModel1SName, parameters, cancellationToken).ConfigureAwait(false);
                    return response;
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            ).ConfigureAwait(false);
        }

        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="nonResourceModel1SName"> The String to use. </param>
        /// <param name="parameters"> The NonResourceModel1 to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nonResourceModel1SName"/> or <paramref name="parameters"/> is null. </exception>
        public static Response<NonResourceModel1> PutNonResourceModel1(this ResourceGroup resourceGroup, string nonResourceModel1SName, NonResourceModel1 parameters, CancellationToken cancellationToken = default)
        {
            if (nonResourceModel1SName == null)
            {
                throw new ArgumentNullException(nameof(nonResourceModel1SName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            return resourceGroup.UseClientContext((baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                var restOperations = GetNonResourceModel1SRestOperations(clientDiagnostics, credential, options, pipeline, resourceGroup.Id.SubscriptionId, baseUri);
                using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.PutNonResourceModel1");
                scope.Start();
                try
                {
                    var response = restOperations.Put(resourceGroup.Id.Name, nonResourceModel1SName, parameters, cancellationToken);
                    return response;
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            );
        }

        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="nonResourceModel1SName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nonResourceModel1SName"/> is null. </exception>
        public static async Task<Response<NonResourceModel1>> GetNonResourceModel1Async(this ResourceGroup resourceGroup, string nonResourceModel1SName, CancellationToken cancellationToken = default)
        {
            if (nonResourceModel1SName == null)
            {
                throw new ArgumentNullException(nameof(nonResourceModel1SName));
            }

            return await resourceGroup.UseClientContext(async (baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                var restOperations = GetNonResourceModel1SRestOperations(clientDiagnostics, credential, options, pipeline, resourceGroup.Id.SubscriptionId, baseUri);
                using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.GetNonResourceModel1");
                scope.Start();
                try
                {
                    var response = await restOperations.GetAsync(resourceGroup.Id.Name, nonResourceModel1SName, cancellationToken).ConfigureAwait(false);
                    return response;
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            ).ConfigureAwait(false);
        }

        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="nonResourceModel1SName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nonResourceModel1SName"/> is null. </exception>
        public static Response<NonResourceModel1> GetNonResourceModel1(this ResourceGroup resourceGroup, string nonResourceModel1SName, CancellationToken cancellationToken = default)
        {
            if (nonResourceModel1SName == null)
            {
                throw new ArgumentNullException(nameof(nonResourceModel1SName));
            }

            return resourceGroup.UseClientContext((baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                var restOperations = GetNonResourceModel1SRestOperations(clientDiagnostics, credential, options, pipeline, resourceGroup.Id.SubscriptionId, baseUri);
                using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.GetNonResourceModel1");
                scope.Start();
                try
                {
                    var response = restOperations.Get(resourceGroup.Id.Name, nonResourceModel1SName, cancellationToken);
                    return response;
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            );
        }

        #endregion
    }
}
