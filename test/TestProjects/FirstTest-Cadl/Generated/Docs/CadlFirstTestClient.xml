<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="TopActionAsync(String,RequestContext)">
<example>
This sample shows how to call TopActionAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new CadlFirstTestClient(credential);

Response response = await client.TopActionAsync("<action>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="TopAction(String,RequestContext)">
<example>
This sample shows how to call TopAction with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new CadlFirstTestClient(credential);

Response response = client.TopAction("<action>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="TopAction2Async(RequestContext)">
<example>
This sample shows how to call TopAction2Async and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new CadlFirstTestClient(credential);

Response response = await client.TopAction2Async();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="TopAction2(RequestContext)">
<example>
This sample shows how to call TopAction2 and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new CadlFirstTestClient(credential);

Response response = client.TopAction2();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="PatchActionAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call PatchActionAsync with required request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new CadlFirstTestClient(credential);

var data = new {
    name = "<name>",
};

Response response = await client.PatchActionAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required.
}
</code>

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="PatchAction(RequestContent,RequestContext)">
<example>
This sample shows how to call PatchAction with required request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new CadlFirstTestClient(credential);

var data = new {
    name = "<name>",
};

Response response = client.PatchAction(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required.
}
</code>

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="AnonymousBodyAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call AnonymousBodyAsync with required request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new CadlFirstTestClient(credential);

var data = new {
    name = "<name>",
};

Response response = await client.AnonymousBodyAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required.
}
</code>

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="AnonymousBody(RequestContent,RequestContext)">
<example>
This sample shows how to call AnonymousBody with required request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new CadlFirstTestClient(credential);

var data = new {
    name = "<name>",
};

Response response = client.AnonymousBody(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required.
}
</code>

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required.
}
</code>

</remarks>
    </member>
  </members>
</doc>