// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure;
using Azure.Core;

namespace CadlFirstTest.Models
{
    public partial class Thing : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("name");
            writer.WriteStringValue(Name);
            writer.WritePropertyName("requiredUnion");
            writer.WriteStringValue(RequiredUnion);
            writer.WritePropertyName("requiredLiteralString");
            writer.WriteStringValue(RequiredLiteralString);
            writer.WritePropertyName("requiredLiteralInt");
            writer.WriteNumberValue(RequiredLiteralInt);
            writer.WritePropertyName("requiredLiteralDouble");
            writer.WriteNumberValue(RequiredLiteralDouble);
            writer.WritePropertyName("requiredLiteralBool");
            writer.WriteBooleanValue(RequiredLiteralBool);
            writer.WriteEndObject();
        }

        internal static Thing DeserializeThing(JsonElement element)
        {
            string name = default;
            string requiredUnion = default;
            string requiredLiteralString = default;
            int requiredLiteralInt = default;
            double requiredLiteralDouble = default;
            bool requiredLiteralBool = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("requiredUnion"))
                {
                    requiredUnion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("requiredLiteralString"))
                {
                    requiredLiteralString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("requiredLiteralInt"))
                {
                    requiredLiteralInt = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("requiredLiteralDouble"))
                {
                    requiredLiteralDouble = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("requiredLiteralBool"))
                {
                    requiredLiteralBool = property.Value.GetBoolean();
                    continue;
                }
            }
            return new Thing(name, requiredUnion);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static Thing FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeThing(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
