// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace CadlFirstTest.Models
{
    /// <summary> The Thing. </summary>
    public partial class Thing
    {
        /// <summary> Initializes a new instance of Thing. </summary>
        /// <param name="name"></param>
        /// <param name="requiredUnion"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="requiredUnion"/> is null. </exception>
        public Thing(string name, string requiredUnion)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(requiredUnion, nameof(requiredUnion));

            Name = name;
            RequiredUnion = requiredUnion;
        }

        /// <summary> Gets or sets the name. </summary>
        public string Name { get; set; }
        /// <summary> Gets or sets the required union. </summary>
        public string RequiredUnion { get; set; }
        /// <summary> Gets the required literal string. </summary>
        internal string RequiredLiteralString { get; } = "accept";

        /// <summary> Gets the required literal int. </summary>
        internal int RequiredLiteralInt { get; } = 123;

        /// <summary> Gets the required literal double. </summary>
        internal double RequiredLiteralDouble { get; } = 1.23;

        /// <summary> Gets the required literal bool. </summary>
        internal bool RequiredLiteralBool { get; } = false;

        /// <summary> Gets the optional literal string. </summary>
        internal string OptionalLiteralString { get; } = "reject";

        /// <summary> Gets the optional literal int. </summary>
        internal int OptionalLiteralInt { get; } = 456;

        /// <summary> Gets the optional literal double. </summary>
        internal double OptionalLiteralDouble { get; } = 4.56;

        /// <summary> Gets the optional literal bool. </summary>
        internal bool OptionalLiteralBool { get; } = true;
    }
}
