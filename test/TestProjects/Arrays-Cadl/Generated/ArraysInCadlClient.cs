// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace ArraysInCadl
{
    // Data plane generated client. CADL project to test various types of arrays.
    /// <summary> CADL project to test various types of arrays. </summary>
    public partial class ArraysInCadlClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ArraysInCadlClient. </summary>
        public ArraysInCadlClient() : this(new ArraysInCadlClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ArraysInCadlClient. </summary>
        /// <param name="options"> The options for configuring the client. </param>
        public ArraysInCadlClient(ArraysInCadlClientOptions options)
        {
            options ??= new ArraysInCadlClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _apiVersion = options.Version;
        }

        /// <summary> Output string array. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<string>>> OutputStringArrayValueAsync(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputStringArrayValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await OutputStringArrayAsync(context).ConfigureAwait(false);
                IReadOnlyList<string> value = default;
                using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                List<string> array = new List<string>();
                foreach (var item in document.RootElement.EnumerateArray())
                {
                    array.Add(item.GetString());
                }
                value = array;
                return Response.FromValue(value, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output string array. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<string>> OutputStringArrayValue(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputStringArrayValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = OutputStringArray(context);
                IReadOnlyList<string> value = default;
                using var document = JsonDocument.Parse(response.ContentStream);
                List<string> array = new List<string>();
                foreach (var item in document.RootElement.EnumerateArray())
                {
                    array.Add(item.GetString());
                }
                value = array;
                return Response.FromValue(value, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output string array. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call OutputStringArrayAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new ArraysInCadlClient();
        /// 
        /// Response response = await client.OutputStringArrayAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> OutputStringArrayAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputStringArray");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOutputStringArrayRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output string array. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call OutputStringArray and parse the result.
        /// <code><![CDATA[
        /// var client = new ArraysInCadlClient();
        /// 
        /// Response response = client.OutputStringArray();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// </example>
        public virtual Response OutputStringArray(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputStringArray");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOutputStringArrayRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output int32 array. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<int>>> OutputInt32ArrayValueAsync(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputInt32ArrayValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await OutputInt32ArrayAsync(context).ConfigureAwait(false);
                IReadOnlyList<int> value = default;
                using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                List<int> array = new List<int>();
                foreach (var item in document.RootElement.EnumerateArray())
                {
                    array.Add(item.GetInt32());
                }
                value = array;
                return Response.FromValue(value, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output int32 array. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<int>> OutputInt32ArrayValue(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputInt32ArrayValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = OutputInt32Array(context);
                IReadOnlyList<int> value = default;
                using var document = JsonDocument.Parse(response.ContentStream);
                List<int> array = new List<int>();
                foreach (var item in document.RootElement.EnumerateArray())
                {
                    array.Add(item.GetInt32());
                }
                value = array;
                return Response.FromValue(value, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output int32 array. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call OutputInt32ArrayAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new ArraysInCadlClient();
        /// 
        /// Response response = await client.OutputInt32ArrayAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> OutputInt32ArrayAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputInt32Array");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOutputInt32ArrayRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output int32 array. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call OutputInt32Array and parse the result.
        /// <code><![CDATA[
        /// var client = new ArraysInCadlClient();
        /// 
        /// Response response = client.OutputInt32Array();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// </example>
        public virtual Response OutputInt32Array(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputInt32Array");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOutputInt32ArrayRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output int64 array. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<long>>> OutputInt64ArrayValueAsync(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputInt64ArrayValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await OutputInt64ArrayAsync(context).ConfigureAwait(false);
                IReadOnlyList<long> value = default;
                using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                List<long> array = new List<long>();
                foreach (var item in document.RootElement.EnumerateArray())
                {
                    array.Add(item.GetInt64());
                }
                value = array;
                return Response.FromValue(value, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output int64 array. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<long>> OutputInt64ArrayValue(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputInt64ArrayValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = OutputInt64Array(context);
                IReadOnlyList<long> value = default;
                using var document = JsonDocument.Parse(response.ContentStream);
                List<long> array = new List<long>();
                foreach (var item in document.RootElement.EnumerateArray())
                {
                    array.Add(item.GetInt64());
                }
                value = array;
                return Response.FromValue(value, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output int64 array. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call OutputInt64ArrayAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new ArraysInCadlClient();
        /// 
        /// Response response = await client.OutputInt64ArrayAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> OutputInt64ArrayAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputInt64Array");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOutputInt64ArrayRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output int64 array. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call OutputInt64Array and parse the result.
        /// <code><![CDATA[
        /// var client = new ArraysInCadlClient();
        /// 
        /// Response response = client.OutputInt64Array();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// </example>
        public virtual Response OutputInt64Array(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputInt64Array");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOutputInt64ArrayRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output safeint array. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<long>>> OutputSafeIntArrayValueAsync(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputSafeIntArrayValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await OutputSafeIntArrayAsync(context).ConfigureAwait(false);
                IReadOnlyList<long> value = default;
                using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                List<long> array = new List<long>();
                foreach (var item in document.RootElement.EnumerateArray())
                {
                    array.Add(item.GetInt64());
                }
                value = array;
                return Response.FromValue(value, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output safeint array. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<long>> OutputSafeIntArrayValue(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputSafeIntArrayValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = OutputSafeIntArray(context);
                IReadOnlyList<long> value = default;
                using var document = JsonDocument.Parse(response.ContentStream);
                List<long> array = new List<long>();
                foreach (var item in document.RootElement.EnumerateArray())
                {
                    array.Add(item.GetInt64());
                }
                value = array;
                return Response.FromValue(value, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output safeint array. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call OutputSafeIntArrayAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new ArraysInCadlClient();
        /// 
        /// Response response = await client.OutputSafeIntArrayAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> OutputSafeIntArrayAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputSafeIntArray");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOutputSafeIntArrayRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output safeint array. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call OutputSafeIntArray and parse the result.
        /// <code><![CDATA[
        /// var client = new ArraysInCadlClient();
        /// 
        /// Response response = client.OutputSafeIntArray();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// </example>
        public virtual Response OutputSafeIntArray(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputSafeIntArray");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOutputSafeIntArrayRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output float32 array. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<float>>> OutputFloat32ArrayValueAsync(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputFloat32ArrayValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await OutputFloat32ArrayAsync(context).ConfigureAwait(false);
                IReadOnlyList<float> value = default;
                using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                List<float> array = new List<float>();
                foreach (var item in document.RootElement.EnumerateArray())
                {
                    array.Add(item.GetSingle());
                }
                value = array;
                return Response.FromValue(value, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output float32 array. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<float>> OutputFloat32ArrayValue(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputFloat32ArrayValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = OutputFloat32Array(context);
                IReadOnlyList<float> value = default;
                using var document = JsonDocument.Parse(response.ContentStream);
                List<float> array = new List<float>();
                foreach (var item in document.RootElement.EnumerateArray())
                {
                    array.Add(item.GetSingle());
                }
                value = array;
                return Response.FromValue(value, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output float32 array. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call OutputFloat32ArrayAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new ArraysInCadlClient();
        /// 
        /// Response response = await client.OutputFloat32ArrayAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> OutputFloat32ArrayAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputFloat32Array");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOutputFloat32ArrayRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output float32 array. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call OutputFloat32Array and parse the result.
        /// <code><![CDATA[
        /// var client = new ArraysInCadlClient();
        /// 
        /// Response response = client.OutputFloat32Array();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// </example>
        public virtual Response OutputFloat32Array(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputFloat32Array");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOutputFloat32ArrayRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output float64 array. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<double>>> OutputFloat64ArrayValueAsync(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputFloat64ArrayValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await OutputFloat64ArrayAsync(context).ConfigureAwait(false);
                IReadOnlyList<double> value = default;
                using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                List<double> array = new List<double>();
                foreach (var item in document.RootElement.EnumerateArray())
                {
                    array.Add(item.GetDouble());
                }
                value = array;
                return Response.FromValue(value, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output float64 array. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<double>> OutputFloat64ArrayValue(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputFloat64ArrayValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = OutputFloat64Array(context);
                IReadOnlyList<double> value = default;
                using var document = JsonDocument.Parse(response.ContentStream);
                List<double> array = new List<double>();
                foreach (var item in document.RootElement.EnumerateArray())
                {
                    array.Add(item.GetDouble());
                }
                value = array;
                return Response.FromValue(value, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output float64 array. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call OutputFloat64ArrayAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new ArraysInCadlClient();
        /// 
        /// Response response = await client.OutputFloat64ArrayAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> OutputFloat64ArrayAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputFloat64Array");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOutputFloat64ArrayRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output float64 array. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call OutputFloat64Array and parse the result.
        /// <code><![CDATA[
        /// var client = new ArraysInCadlClient();
        /// 
        /// Response response = client.OutputFloat64Array();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// </example>
        public virtual Response OutputFloat64Array(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputFloat64Array");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOutputFloat64ArrayRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output boolean array. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<bool>>> OutputBooleanArrayValueAsync(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputBooleanArrayValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await OutputBooleanArrayAsync(context).ConfigureAwait(false);
                IReadOnlyList<bool> value = default;
                using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                List<bool> array = new List<bool>();
                foreach (var item in document.RootElement.EnumerateArray())
                {
                    array.Add(item.GetBoolean());
                }
                value = array;
                return Response.FromValue(value, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output boolean array. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<bool>> OutputBooleanArrayValue(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputBooleanArrayValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = OutputBooleanArray(context);
                IReadOnlyList<bool> value = default;
                using var document = JsonDocument.Parse(response.ContentStream);
                List<bool> array = new List<bool>();
                foreach (var item in document.RootElement.EnumerateArray())
                {
                    array.Add(item.GetBoolean());
                }
                value = array;
                return Response.FromValue(value, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output boolean array. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call OutputBooleanArrayAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new ArraysInCadlClient();
        /// 
        /// Response response = await client.OutputBooleanArrayAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> OutputBooleanArrayAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputBooleanArray");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOutputBooleanArrayRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output boolean array. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call OutputBooleanArray and parse the result.
        /// <code><![CDATA[
        /// var client = new ArraysInCadlClient();
        /// 
        /// Response response = client.OutputBooleanArray();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// </example>
        public virtual Response OutputBooleanArray(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputBooleanArray");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOutputBooleanArrayRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output zonedDateTime array. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<DateTimeOffset>>> OutputZonedDateTimeArrayValueAsync(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputZonedDateTimeArrayValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await OutputZonedDateTimeArrayAsync(context).ConfigureAwait(false);
                IReadOnlyList<DateTimeOffset> value = default;
                using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                List<DateTimeOffset> array = new List<DateTimeOffset>();
                foreach (var item in document.RootElement.EnumerateArray())
                {
                    array.Add(item.GetDateTimeOffset("O"));
                }
                value = array;
                return Response.FromValue(value, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output zonedDateTime array. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<DateTimeOffset>> OutputZonedDateTimeArrayValue(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputZonedDateTimeArrayValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = OutputZonedDateTimeArray(context);
                IReadOnlyList<DateTimeOffset> value = default;
                using var document = JsonDocument.Parse(response.ContentStream);
                List<DateTimeOffset> array = new List<DateTimeOffset>();
                foreach (var item in document.RootElement.EnumerateArray())
                {
                    array.Add(item.GetDateTimeOffset("O"));
                }
                value = array;
                return Response.FromValue(value, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output zonedDateTime array. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call OutputZonedDateTimeArrayAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new ArraysInCadlClient();
        /// 
        /// Response response = await client.OutputZonedDateTimeArrayAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> OutputZonedDateTimeArrayAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputZonedDateTimeArray");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOutputZonedDateTimeArrayRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output zonedDateTime array. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call OutputZonedDateTimeArray and parse the result.
        /// <code><![CDATA[
        /// var client = new ArraysInCadlClient();
        /// 
        /// Response response = client.OutputZonedDateTimeArray();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// </example>
        public virtual Response OutputZonedDateTimeArray(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputZonedDateTimeArray");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOutputZonedDateTimeArrayRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output duration array. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<TimeSpan>>> OutputDurationArrayValueAsync(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputDurationArrayValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await OutputDurationArrayAsync(context).ConfigureAwait(false);
                IReadOnlyList<TimeSpan> value = default;
                using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                List<TimeSpan> array = new List<TimeSpan>();
                foreach (var item in document.RootElement.EnumerateArray())
                {
                    array.Add(item.GetTimeSpan("P"));
                }
                value = array;
                return Response.FromValue(value, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output duration array. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<TimeSpan>> OutputDurationArrayValue(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputDurationArrayValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = OutputDurationArray(context);
                IReadOnlyList<TimeSpan> value = default;
                using var document = JsonDocument.Parse(response.ContentStream);
                List<TimeSpan> array = new List<TimeSpan>();
                foreach (var item in document.RootElement.EnumerateArray())
                {
                    array.Add(item.GetTimeSpan("P"));
                }
                value = array;
                return Response.FromValue(value, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output duration array. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call OutputDurationArrayAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new ArraysInCadlClient();
        /// 
        /// Response response = await client.OutputDurationArrayAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> OutputDurationArrayAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputDurationArray");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOutputDurationArrayRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output duration array. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call OutputDurationArray and parse the result.
        /// <code><![CDATA[
        /// var client = new ArraysInCadlClient();
        /// 
        /// Response response = client.OutputDurationArray();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].ToString());
        /// ]]></code>
        /// </example>
        public virtual Response OutputDurationArray(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputDurationArray");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOutputDurationArrayRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output model array. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<BaseModel>>> OutputBaseModeleArrayValueAsync(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputBaseModeleArrayValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await OutputBaseModeleArrayAsync(context).ConfigureAwait(false);
                IReadOnlyList<BaseModel> value = default;
                using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                List<BaseModel> array = new List<BaseModel>();
                foreach (var item in document.RootElement.EnumerateArray())
                {
                    array.Add(BaseModel.DeserializeBaseModel(item));
                }
                value = array;
                return Response.FromValue(value, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output model array. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<BaseModel>> OutputBaseModeleArrayValue(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputBaseModeleArrayValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = OutputBaseModeleArray(context);
                IReadOnlyList<BaseModel> value = default;
                using var document = JsonDocument.Parse(response.ContentStream);
                List<BaseModel> array = new List<BaseModel>();
                foreach (var item in document.RootElement.EnumerateArray())
                {
                    array.Add(BaseModel.DeserializeBaseModel(item));
                }
                value = array;
                return Response.FromValue(value, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output model array. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call OutputBaseModeleArrayAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new ArraysInCadlClient();
        /// 
        /// Response response = await client.OutputBaseModeleArrayAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("property").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>BaseModel</c>:
        /// <code>{
        ///   property: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> OutputBaseModeleArrayAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputBaseModeleArray");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOutputBaseModeleArrayRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Output model array. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call OutputBaseModeleArray and parse the result.
        /// <code><![CDATA[
        /// var client = new ArraysInCadlClient();
        /// 
        /// Response response = client.OutputBaseModeleArray();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("property").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>BaseModel</c>:
        /// <code>{
        ///   property: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response OutputBaseModeleArray(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArraysInCadlClient.OutputBaseModeleArray");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOutputBaseModeleArrayRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateOutputStringArrayRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/outputStringArray", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateOutputInt32ArrayRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/outputInt32Array", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateOutputInt64ArrayRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/outputInt64Array", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateOutputSafeIntArrayRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/outputSafeIntArray", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateOutputFloat32ArrayRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/outputFloat32Array", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateOutputFloat64ArrayRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/outputFloat64Array", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateOutputBooleanArrayRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/outputBooleanArray", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateOutputZonedDateTimeArrayRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/outputZonedDateTimeArray", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateOutputDurationArrayRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/outputDurationArray", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateOutputBaseModeleArrayRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/outputBaseModelArray", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
