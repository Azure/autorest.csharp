// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace TypeSpecFirstTest.Samples
{
    public class Samples_TypeSpecFirstTestClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TopAction()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TypeSpecFirstTestClient(endpoint, credential);

            Response response = client.TopAction("<action>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TopAction2()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TypeSpecFirstTestClient(endpoint, credential);

            Response response = client.TopAction2();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PatchAction()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TypeSpecFirstTestClient(endpoint, credential);

            var data = new
            {
                name = "<name>",
                requiredUnion = new { },
                requiredLiteralString = new { },
                requiredLiteralInt = new { },
                requiredLiteralDouble = new { },
                requiredLiteralBool = new { },
                requiredBadDescription = "<requiredBadDescription>",
            };

            Response response = client.PatchAction(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnonymousBody()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TypeSpecFirstTestClient(endpoint, credential);

            var data = new
            {
                name = "<name>",
                requiredUnion = new { },
                requiredLiteralString = new { },
                requiredLiteralInt = new { },
                requiredLiteralDouble = new { },
                requiredLiteralBool = new { },
                requiredBadDescription = "<requiredBadDescription>",
            };

            Response response = client.AnonymousBody(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FriendlyModel()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TypeSpecFirstTestClient(endpoint, credential);

            var data = new
            {
                name = "<name>",
            };

            Response response = client.FriendlyModel(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AddTimeHeader()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TypeSpecFirstTestClient(endpoint, credential);

            Response response = client.AddTimeHeader();
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SayHi()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TypeSpecFirstTestClient(endpoint, credential);

            Response response = client.SayHi("<headParameter>", "<queryParameter>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HelloAgain()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TypeSpecFirstTestClient(endpoint, credential);

            var data = new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredCollection = new[] {
        "1"
    },
                requiredDictionary = new
                {
                    key = "1",
                },
                requiredModel = new
                {
                    name = "<name>",
                    requiredUnion = new { },
                    requiredLiteralString = new { },
                    requiredLiteralInt = new { },
                    requiredLiteralDouble = new { },
                    requiredLiteralBool = new { },
                    requiredBadDescription = "<requiredBadDescription>",
                },
                requiredUnknown = new { },
                requiredRecordUnknown = new
                {
                    key = new { },
                },
            };

            Response response = client.HelloAgain("<p2>", "<p1>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoContentType()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TypeSpecFirstTestClient(endpoint, credential);

            var data = new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredCollection = new[] {
        "1"
    },
                requiredDictionary = new
                {
                    key = "1",
                },
                requiredModel = new
                {
                    name = "<name>",
                    requiredUnion = new { },
                    requiredLiteralString = new { },
                    requiredLiteralInt = new { },
                    requiredLiteralDouble = new { },
                    requiredLiteralBool = new { },
                    requiredBadDescription = "<requiredBadDescription>",
                },
                requiredUnknown = new { },
                requiredRecordUnknown = new
                {
                    key = new { },
                },
            };

            Response response = client.NoContentType("<p2>", "<p1>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HelloDemo2()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TypeSpecFirstTestClient(endpoint, credential);

            Response response = client.HelloDemo2(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateLiteral()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TypeSpecFirstTestClient(endpoint, credential);

            var data = new
            {
                name = "<name>",
                requiredUnion = new { },
                requiredLiteralString = new { },
                requiredLiteralInt = new { },
                requiredLiteralDouble = new { },
                requiredLiteralBool = new { },
                requiredBadDescription = "<requiredBadDescription>",
            };

            Response response = client.CreateLiteral(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HelloLiteral()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TypeSpecFirstTestClient(endpoint, credential);

            Response response = client.HelloLiteral(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUnknownValue()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TypeSpecFirstTestClient(endpoint, credential);

            Response response = client.GetUnknownValue();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InternalProtocol()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TypeSpecFirstTestClient(endpoint, credential);

            var data = new
            {
                name = "<name>",
                requiredUnion = new { },
                requiredLiteralString = new { },
                requiredLiteralInt = new { },
                requiredLiteralDouble = new { },
                requiredLiteralBool = new { },
                requiredBadDescription = "<requiredBadDescription>",
            };

            Response response = client.InternalProtocol(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StillConvenient()
        {
            var credential = new AzureKeyCredential("<key>");
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new TypeSpecFirstTestClient(endpoint, credential);

            Response response = client.StillConvenient(new RequestContext());
            Console.WriteLine(response.Status);
        }
    }
}
