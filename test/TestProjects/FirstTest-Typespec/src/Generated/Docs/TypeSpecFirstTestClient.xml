<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="TopActionAsync(DateTimeOffset,CancellationToken)">
<example>
This sample shows how to call TopActionAsync with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var result = await client.TopActionAsync(DateTimeOffset.UtcNow);
]]></code>
</example>
    </member>
    <member name="TopAction(DateTimeOffset,CancellationToken)">
<example>
This sample shows how to call TopAction with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var result = client.TopAction(DateTimeOffset.UtcNow);
]]></code>
</example>
    </member>
    <member name="TopActionAsync(DateTimeOffset,RequestContext)">
<example>
This sample shows how to call TopActionAsync with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = await client.TopActionAsync(DateTimeOffset.UtcNow, new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="TopAction(DateTimeOffset,RequestContext)">
<example>
This sample shows how to call TopAction with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = client.TopAction(DateTimeOffset.UtcNow, new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="TopAction2Async(RequestContext)">
<example>
This sample shows how to call TopAction2Async and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = await client.TopAction2Async(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="TopAction2(RequestContext)">
<example>
This sample shows how to call TopAction2 and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = client.TopAction2(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="PatchActionAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call PatchActionAsync with required request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralDouble = 1.23,
    requiredLiteralBool = false,
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = await client.PatchActionAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call PatchActionAsync with all request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralDouble = 1.23,
    requiredLiteralBool = false,
    optionalLiteralString = "reject",
    optionalLiteralInt = 456,
    optionalLiteralDouble = 4.56,
    optionalLiteralBool = true,
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = await client.PatchActionAsync(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="PatchAction(RequestContent,RequestContext)">
<example>
This sample shows how to call PatchAction with required request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralDouble = 1.23,
    requiredLiteralBool = false,
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = client.PatchAction(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call PatchAction with all request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralDouble = 1.23,
    requiredLiteralBool = false,
    optionalLiteralString = "reject",
    optionalLiteralInt = 456,
    optionalLiteralDouble = 4.56,
    optionalLiteralBool = true,
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = client.PatchAction(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="AnonymousBodyAsync(Thing,CancellationToken)">
<example>
This sample shows how to call AnonymousBodyAsync with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var thing = new Thing("<name>", "<requiredUnion>", "<requiredBadDescription>");
var result = await client.AnonymousBodyAsync(thing);
]]></code>
</example>
    </member>
    <member name="AnonymousBody(Thing,CancellationToken)">
<example>
This sample shows how to call AnonymousBody with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var thing = new Thing("<name>", "<requiredUnion>", "<requiredBadDescription>");
var result = client.AnonymousBody(thing);
]]></code>
</example>
    </member>
    <member name="AnonymousBodyAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call AnonymousBodyAsync with required request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralDouble = 1.23,
    requiredLiteralBool = false,
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = await client.AnonymousBodyAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call AnonymousBodyAsync with all request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralDouble = 1.23,
    requiredLiteralBool = false,
    optionalLiteralString = "reject",
    optionalLiteralInt = 456,
    optionalLiteralDouble = 4.56,
    optionalLiteralBool = true,
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = await client.AnonymousBodyAsync(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="AnonymousBody(RequestContent,RequestContext)">
<example>
This sample shows how to call AnonymousBody with required request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralDouble = 1.23,
    requiredLiteralBool = false,
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = client.AnonymousBody(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call AnonymousBody with all request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralDouble = 1.23,
    requiredLiteralBool = false,
    optionalLiteralString = "reject",
    optionalLiteralInt = 456,
    optionalLiteralDouble = 4.56,
    optionalLiteralBool = true,
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = client.AnonymousBody(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="FriendlyModelAsync(Friend,CancellationToken)">
<example>
This sample shows how to call FriendlyModelAsync with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var notFriend = new Friend("<name>");
var result = await client.FriendlyModelAsync(notFriend);
]]></code>
</example>
    </member>
    <member name="FriendlyModel(Friend,CancellationToken)">
<example>
This sample shows how to call FriendlyModel with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var notFriend = new Friend("<name>");
var result = client.FriendlyModel(notFriend);
]]></code>
</example>
    </member>
    <member name="FriendlyModelAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call FriendlyModelAsync with required request content and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
};

Response response = await client.FriendlyModelAsync(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
    </member>
    <member name="FriendlyModel(RequestContent,RequestContext)">
<example>
This sample shows how to call FriendlyModel with required request content and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
};

Response response = client.FriendlyModel(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
    </member>
    <member name="AddTimeHeaderAsync(DateTimeOffset?,RequestContext)">
<example>
This sample shows how to call AddTimeHeaderAsync.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = await client.AddTimeHeaderAsync();
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AddTimeHeaderAsync with all parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = await client.AddTimeHeaderAsync(DateTimeOffset.UtcNow, new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="AddTimeHeader(DateTimeOffset?,RequestContext)">
<example>
This sample shows how to call AddTimeHeader.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = client.AddTimeHeader();
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AddTimeHeader with all parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = client.AddTimeHeader(DateTimeOffset.UtcNow, new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="StringFormatAsync(Guid,ModelWithFormat,CancellationToken)">
<example>
This sample shows how to call StringFormatAsync with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var body = new ModelWithFormat(new Uri("http://localhost:3000"), Guid.NewGuid());
var result = await client.StringFormatAsync(Guid.NewGuid(), body);
]]></code>
</example>
    </member>
    <member name="StringFormat(Guid,ModelWithFormat,CancellationToken)">
<example>
This sample shows how to call StringFormat with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var body = new ModelWithFormat(new Uri("http://localhost:3000"), Guid.NewGuid());
var result = client.StringFormat(Guid.NewGuid(), body);
]]></code>
</example>
    </member>
    <member name="StringFormatAsync(Guid,RequestContent,RequestContext)">
<example>
This sample shows how to call StringFormatAsync with required parameters and request content.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    sourceUrl = "http://localhost:3000",
    guid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
};

Response response = await client.StringFormatAsync(Guid.NewGuid(), RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="StringFormat(Guid,RequestContent,RequestContext)">
<example>
This sample shows how to call StringFormat with required parameters and request content.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    sourceUrl = "http://localhost:3000",
    guid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
};

Response response = client.StringFormat(Guid.NewGuid(), RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="SayHiAsync(string,string,string,RequestContext)">
<example>
This sample shows how to call SayHiAsync with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = await client.SayHiAsync("<headParameter>", "<queryParameter>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call SayHiAsync with all parameters, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = await client.SayHiAsync("<headParameter>", "<queryParameter>", "<optionalQuery>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="SayHi(string,string,string,RequestContext)">
<example>
This sample shows how to call SayHi with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = client.SayHi("<headParameter>", "<queryParameter>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call SayHi with all parameters, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = client.SayHi("<headParameter>", "<queryParameter>", "<optionalQuery>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="HelloAgainAsync(string,string,RoundTripModel,CancellationToken)">
<example>
This sample shows how to call HelloAgainAsync with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var action = new RoundTripModel("<requiredString>", 1234, new StringFixedEnum[] 
{
    StringFixedEnum.One
}, new Dictionary<string, StringExtensibleEnum>
{
    ["key"] = StringExtensibleEnum.One,
}, new Thing("<name>", "<requiredUnion>", "<requiredBadDescription>"), BinaryData.FromString("<your binary data content>"), new Dictionary<string, BinaryData>
{
    ["key"] = BinaryData.FromString("<your binary data content>"),
})
{
    IntExtensibleEnum = IntExtensibleEnum.One,
    IntExtensibleEnumCollection = 
{
        IntExtensibleEnum.One
    },
    FloatExtensibleEnum = FloatExtensibleEnum.One,
    FloatExtensibleEnumCollection = 
{
        FloatExtensibleEnum.One
    },
    FloatFixedEnum = FloatFixedEnum.One,
    FloatFixedEnumCollection = 
{
        FloatFixedEnum.One
    },
    IntFixedEnum = IntFixedEnum.One,
    IntFixedEnumCollection = 
{
        IntFixedEnum.One
    },
    StringFixedEnum = StringFixedEnum.One,
    OptionalUnknown = BinaryData.FromString("<your binary data content>"),
    OptionalRecordUnknown = 
{
        ["key"] = BinaryData.FromString("<your binary data content>"),
    },
};
var result = await client.HelloAgainAsync("<p2>", "<p1>", action);
]]></code>
</example>
    </member>
    <member name="HelloAgain(string,string,RoundTripModel,CancellationToken)">
<example>
This sample shows how to call HelloAgain with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var action = new RoundTripModel("<requiredString>", 1234, new StringFixedEnum[] 
{
    StringFixedEnum.One
}, new Dictionary<string, StringExtensibleEnum>
{
    ["key"] = StringExtensibleEnum.One,
}, new Thing("<name>", "<requiredUnion>", "<requiredBadDescription>"), BinaryData.FromString("<your binary data content>"), new Dictionary<string, BinaryData>
{
    ["key"] = BinaryData.FromString("<your binary data content>"),
})
{
    IntExtensibleEnum = IntExtensibleEnum.One,
    IntExtensibleEnumCollection = 
{
        IntExtensibleEnum.One
    },
    FloatExtensibleEnum = FloatExtensibleEnum.One,
    FloatExtensibleEnumCollection = 
{
        FloatExtensibleEnum.One
    },
    FloatFixedEnum = FloatFixedEnum.One,
    FloatFixedEnumCollection = 
{
        FloatFixedEnum.One
    },
    IntFixedEnum = IntFixedEnum.One,
    IntFixedEnumCollection = 
{
        IntFixedEnum.One
    },
    StringFixedEnum = StringFixedEnum.One,
    OptionalUnknown = BinaryData.FromString("<your binary data content>"),
    OptionalRecordUnknown = 
{
        ["key"] = BinaryData.FromString("<your binary data content>"),
    },
};
var result = client.HelloAgain("<p2>", "<p1>", action);
]]></code>
</example>
    </member>
    <member name="HelloAgainAsync(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call HelloAgainAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new[] {
        "1"
    },
    requiredDictionary = new {
        key = "1",
    },
    requiredModel = new {
        name = "<name>",
        requiredUnion = new {},
        requiredLiteralString = "accept",
        requiredLiteralInt = 123,
        requiredLiteralDouble = 1.23,
        requiredLiteralBool = false,
        requiredBadDescription = "<requiredBadDescription>",
    },
    requiredUnknown = new {},
    requiredRecordUnknown = new {
        key = new {},
    },
};

Response response = await client.HelloAgainAsync("<p2>", "<p1>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call HelloAgainAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new[] {
        "1"
    },
    requiredDictionary = new {
        key = "1",
    },
    requiredModel = new {
        name = "<name>",
        requiredUnion = new {},
        requiredLiteralString = "accept",
        requiredLiteralInt = 123,
        requiredLiteralDouble = 1.23,
        requiredLiteralBool = false,
        optionalLiteralString = "reject",
        optionalLiteralInt = 456,
        optionalLiteralDouble = 4.56,
        optionalLiteralBool = true,
        requiredBadDescription = "<requiredBadDescription>",
    },
    intExtensibleEnum = "1",
    intExtensibleEnumCollection = new[] {
        "1"
    },
    floatExtensibleEnum = "1",
    floatExtensibleEnumCollection = new[] {
        "1"
    },
    floatFixedEnum = "1.1",
    floatFixedEnumCollection = new[] {
        "1.1"
    },
    intFixedEnum = "1",
    intFixedEnumCollection = new[] {
        "1"
    },
    stringFixedEnum = "1",
    requiredUnknown = new {},
    optionalUnknown = new {},
    requiredRecordUnknown = new {
        key = new {},
    },
    optionalRecordUnknown = new {
        key = new {},
    },
};

Response response = await client.HelloAgainAsync("<p2>", "<p1>", RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="HelloAgain(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call HelloAgain with required parameters and request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new[] {
        "1"
    },
    requiredDictionary = new {
        key = "1",
    },
    requiredModel = new {
        name = "<name>",
        requiredUnion = new {},
        requiredLiteralString = "accept",
        requiredLiteralInt = 123,
        requiredLiteralDouble = 1.23,
        requiredLiteralBool = false,
        requiredBadDescription = "<requiredBadDescription>",
    },
    requiredUnknown = new {},
    requiredRecordUnknown = new {
        key = new {},
    },
};

Response response = client.HelloAgain("<p2>", "<p1>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call HelloAgain with all parameters and request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new[] {
        "1"
    },
    requiredDictionary = new {
        key = "1",
    },
    requiredModel = new {
        name = "<name>",
        requiredUnion = new {},
        requiredLiteralString = "accept",
        requiredLiteralInt = 123,
        requiredLiteralDouble = 1.23,
        requiredLiteralBool = false,
        optionalLiteralString = "reject",
        optionalLiteralInt = 456,
        optionalLiteralDouble = 4.56,
        optionalLiteralBool = true,
        requiredBadDescription = "<requiredBadDescription>",
    },
    intExtensibleEnum = "1",
    intExtensibleEnumCollection = new[] {
        "1"
    },
    floatExtensibleEnum = "1",
    floatExtensibleEnumCollection = new[] {
        "1"
    },
    floatFixedEnum = "1.1",
    floatFixedEnumCollection = new[] {
        "1.1"
    },
    intFixedEnum = "1",
    intFixedEnumCollection = new[] {
        "1"
    },
    stringFixedEnum = "1",
    requiredUnknown = new {},
    optionalUnknown = new {},
    requiredRecordUnknown = new {
        key = new {},
    },
    optionalRecordUnknown = new {
        key = new {},
    },
};

Response response = client.HelloAgain("<p2>", "<p1>", RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="NoContentTypeAsync(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call NoContentTypeAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new[] {
        "1"
    },
    requiredDictionary = new {
        key = "1",
    },
    requiredModel = new {
        name = "<name>",
        requiredUnion = new {},
        requiredLiteralString = "accept",
        requiredLiteralInt = 123,
        requiredLiteralDouble = 1.23,
        requiredLiteralBool = false,
        requiredBadDescription = "<requiredBadDescription>",
    },
    requiredUnknown = new {},
    requiredRecordUnknown = new {
        key = new {},
    },
};

Response response = await client.NoContentTypeAsync("<p2>", "<p1>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call NoContentTypeAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new[] {
        "1"
    },
    requiredDictionary = new {
        key = "1",
    },
    requiredModel = new {
        name = "<name>",
        requiredUnion = new {},
        requiredLiteralString = "accept",
        requiredLiteralInt = 123,
        requiredLiteralDouble = 1.23,
        requiredLiteralBool = false,
        optionalLiteralString = "reject",
        optionalLiteralInt = 456,
        optionalLiteralDouble = 4.56,
        optionalLiteralBool = true,
        requiredBadDescription = "<requiredBadDescription>",
    },
    intExtensibleEnum = "1",
    intExtensibleEnumCollection = new[] {
        "1"
    },
    floatExtensibleEnum = "1",
    floatExtensibleEnumCollection = new[] {
        "1"
    },
    floatFixedEnum = "1.1",
    floatFixedEnumCollection = new[] {
        "1.1"
    },
    intFixedEnum = "1",
    intFixedEnumCollection = new[] {
        "1"
    },
    stringFixedEnum = "1",
    requiredUnknown = new {},
    optionalUnknown = new {},
    requiredRecordUnknown = new {
        key = new {},
    },
    optionalRecordUnknown = new {
        key = new {},
    },
};

Response response = await client.NoContentTypeAsync("<p2>", "<p1>", RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="NoContentType(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call NoContentType with required parameters and request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new[] {
        "1"
    },
    requiredDictionary = new {
        key = "1",
    },
    requiredModel = new {
        name = "<name>",
        requiredUnion = new {},
        requiredLiteralString = "accept",
        requiredLiteralInt = 123,
        requiredLiteralDouble = 1.23,
        requiredLiteralBool = false,
        requiredBadDescription = "<requiredBadDescription>",
    },
    requiredUnknown = new {},
    requiredRecordUnknown = new {
        key = new {},
    },
};

Response response = client.NoContentType("<p2>", "<p1>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call NoContentType with all parameters and request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new[] {
        "1"
    },
    requiredDictionary = new {
        key = "1",
    },
    requiredModel = new {
        name = "<name>",
        requiredUnion = new {},
        requiredLiteralString = "accept",
        requiredLiteralInt = 123,
        requiredLiteralDouble = 1.23,
        requiredLiteralBool = false,
        optionalLiteralString = "reject",
        optionalLiteralInt = 456,
        optionalLiteralDouble = 4.56,
        optionalLiteralBool = true,
        requiredBadDescription = "<requiredBadDescription>",
    },
    intExtensibleEnum = "1",
    intExtensibleEnumCollection = new[] {
        "1"
    },
    floatExtensibleEnum = "1",
    floatExtensibleEnumCollection = new[] {
        "1"
    },
    floatFixedEnum = "1.1",
    floatFixedEnumCollection = new[] {
        "1.1"
    },
    intFixedEnum = "1",
    intFixedEnumCollection = new[] {
        "1"
    },
    stringFixedEnum = "1",
    requiredUnknown = new {},
    optionalUnknown = new {},
    requiredRecordUnknown = new {
        key = new {},
    },
    optionalRecordUnknown = new {
        key = new {},
    },
};

Response response = client.NoContentType("<p2>", "<p1>", RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="HelloDemo2Async(CancellationToken)">
<example>
This sample shows how to call HelloDemo2Async.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var result = await client.HelloDemo2Async();
]]></code>
</example>
    </member>
    <member name="HelloDemo2(CancellationToken)">
<example>
This sample shows how to call HelloDemo2.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var result = client.HelloDemo2();
]]></code>
</example>
    </member>
    <member name="HelloDemo2Async(RequestContext)">
<example>
This sample shows how to call HelloDemo2Async with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = await client.HelloDemo2Async(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="HelloDemo2(RequestContext)">
<example>
This sample shows how to call HelloDemo2 with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = client.HelloDemo2(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="CreateLiteralAsync(Thing,CancellationToken)">
<example>
This sample shows how to call CreateLiteralAsync with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var body = new Thing("<name>", "<requiredUnion>", "<requiredBadDescription>");
var result = await client.CreateLiteralAsync(body);
]]></code>
</example>
    </member>
    <member name="CreateLiteral(Thing,CancellationToken)">
<example>
This sample shows how to call CreateLiteral with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var body = new Thing("<name>", "<requiredUnion>", "<requiredBadDescription>");
var result = client.CreateLiteral(body);
]]></code>
</example>
    </member>
    <member name="CreateLiteralAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call CreateLiteralAsync with required request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralDouble = 1.23,
    requiredLiteralBool = false,
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = await client.CreateLiteralAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call CreateLiteralAsync with all request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralDouble = 1.23,
    requiredLiteralBool = false,
    optionalLiteralString = "reject",
    optionalLiteralInt = 456,
    optionalLiteralDouble = 4.56,
    optionalLiteralBool = true,
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = await client.CreateLiteralAsync(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="CreateLiteral(RequestContent,RequestContext)">
<example>
This sample shows how to call CreateLiteral with required request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralDouble = 1.23,
    requiredLiteralBool = false,
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = client.CreateLiteral(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call CreateLiteral with all request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralDouble = 1.23,
    requiredLiteralBool = false,
    optionalLiteralString = "reject",
    optionalLiteralInt = 456,
    optionalLiteralDouble = 4.56,
    optionalLiteralBool = true,
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = client.CreateLiteral(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="HelloLiteralAsync(CancellationToken)">
<example>
This sample shows how to call HelloLiteralAsync.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var result = await client.HelloLiteralAsync();
]]></code>
</example>
    </member>
    <member name="HelloLiteral(CancellationToken)">
<example>
This sample shows how to call HelloLiteral.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var result = client.HelloLiteral();
]]></code>
</example>
    </member>
    <member name="HelloLiteralAsync(RequestContext)">
<example>
This sample shows how to call HelloLiteralAsync with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = await client.HelloLiteralAsync(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="HelloLiteral(RequestContext)">
<example>
This sample shows how to call HelloLiteral with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = client.HelloLiteral(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="GetUnknownValueAsync(RequestContext)">
<example>
This sample shows how to call GetUnknownValueAsync and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = await client.GetUnknownValueAsync(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
</example>
    </member>
    <member name="GetUnknownValue(RequestContext)">
<example>
This sample shows how to call GetUnknownValue and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = client.GetUnknownValue(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
</example>
    </member>
    <member name="InternalProtocolAsync(Thing,CancellationToken)">
<example>
This sample shows how to call InternalProtocolAsync with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var body = new Thing("<name>", "<requiredUnion>", "<requiredBadDescription>");
var result = await client.InternalProtocolAsync(body);
]]></code>
</example>
    </member>
    <member name="InternalProtocol(Thing,CancellationToken)">
<example>
This sample shows how to call InternalProtocol with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var body = new Thing("<name>", "<requiredUnion>", "<requiredBadDescription>");
var result = client.InternalProtocol(body);
]]></code>
</example>
    </member>
    <member name="InternalProtocolAsync(RequestContent,RequestContext)">
    </member>
    <member name="InternalProtocol(RequestContent,RequestContext)">
    </member>
    <member name="StillConvenientAsync(CancellationToken)">
<example>
This sample shows how to call StillConvenientAsync.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var result = await client.StillConvenientAsync();
]]></code>
</example>
    </member>
    <member name="StillConvenient(CancellationToken)">
<example>
This sample shows how to call StillConvenient.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var result = client.StillConvenient();
]]></code>
</example>
    </member>
    <member name="StillConvenientAsync(RequestContext)">
    </member>
    <member name="StillConvenient(RequestContext)">
    </member>
  </members>
</doc>