<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="TopActionAsync(string,RequestContext)">
<example>
This sample shows how to call TopActionAsync with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = await client.TopActionAsync("<action>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="TopAction(string,RequestContext)">
<example>
This sample shows how to call TopAction with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = client.TopAction("<action>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="TopAction2Async(RequestContext)">
<example>
This sample shows how to call TopAction2Async and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = await client.TopAction2Async(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="TopAction2(RequestContext)">
<example>
This sample shows how to call TopAction2 and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = client.TopAction2(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="PatchActionAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call PatchActionAsync with required request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = await client.PatchActionAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call PatchActionAsync with all request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    optionalLiteralString = new {},
    optionalLiteralInt = new {},
    optionalLiteralDouble = new {},
    optionalLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = await client.PatchActionAsync(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="PatchAction(RequestContent,RequestContext)">
<example>
This sample shows how to call PatchAction with required request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = client.PatchAction(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call PatchAction with all request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    optionalLiteralString = new {},
    optionalLiteralInt = new {},
    optionalLiteralDouble = new {},
    optionalLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = client.PatchAction(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="AnonymousBodyAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call AnonymousBodyAsync with required request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = await client.AnonymousBodyAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call AnonymousBodyAsync with all request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    optionalLiteralString = new {},
    optionalLiteralInt = new {},
    optionalLiteralDouble = new {},
    optionalLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = await client.AnonymousBodyAsync(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="AnonymousBody(RequestContent,RequestContext)">
<example>
This sample shows how to call AnonymousBody with required request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = client.AnonymousBody(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call AnonymousBody with all request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    optionalLiteralString = new {},
    optionalLiteralInt = new {},
    optionalLiteralDouble = new {},
    optionalLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = client.AnonymousBody(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="FriendlyModelAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call FriendlyModelAsync with required request content and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
};

Response response = await client.FriendlyModelAsync(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
    </member>
    <member name="FriendlyModel(RequestContent,RequestContext)">
<example>
This sample shows how to call FriendlyModel with required request content and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
};

Response response = client.FriendlyModel(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
    </member>
    <member name="AddTimeHeaderAsync(DateTimeOffset?,RequestContext)">
<example>
This sample shows how to call AddTimeHeaderAsync.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = await client.AddTimeHeaderAsync();
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AddTimeHeaderAsync with all parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = await client.AddTimeHeaderAsync(DateTimeOffset.UtcNow, new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="AddTimeHeader(DateTimeOffset?,RequestContext)">
<example>
This sample shows how to call AddTimeHeader.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = client.AddTimeHeader();
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AddTimeHeader with all parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = client.AddTimeHeader(DateTimeOffset.UtcNow, new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="SayHiAsync(string,string,string,RequestContext)">
<example>
This sample shows how to call SayHiAsync with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = await client.SayHiAsync("<headParameter>", "<queryParameter>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call SayHiAsync with all parameters, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = await client.SayHiAsync("<headParameter>", "<queryParameter>", "<optionalQuery>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="SayHi(string,string,string,RequestContext)">
<example>
This sample shows how to call SayHi with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = client.SayHi("<headParameter>", "<queryParameter>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call SayHi with all parameters, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = client.SayHi("<headParameter>", "<queryParameter>", "<optionalQuery>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="HelloAgainAsync(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call HelloAgainAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new[] {
        "1"
    },
    requiredDictionary = new {
        key = "1",
    },
    requiredModel = new {
        name = "<name>",
        requiredUnion = new {},
        requiredLiteralString = new {},
        requiredLiteralInt = new {},
        requiredLiteralDouble = new {},
        requiredLiteralBool = new {},
        requiredBadDescription = "<requiredBadDescription>",
    },
    requiredUnknown = new {},
    requiredRecordUnknown = new {
        key = new {},
    },
};

Response response = await client.HelloAgainAsync("<p2>", "<p1>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call HelloAgainAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new[] {
        "1"
    },
    requiredDictionary = new {
        key = "1",
    },
    requiredModel = new {
        name = "<name>",
        requiredUnion = new {},
        requiredLiteralString = new {},
        requiredLiteralInt = new {},
        requiredLiteralDouble = new {},
        requiredLiteralBool = new {},
        optionalLiteralString = new {},
        optionalLiteralInt = new {},
        optionalLiteralDouble = new {},
        optionalLiteralBool = new {},
        requiredBadDescription = "<requiredBadDescription>",
    },
    intExtensibleEnum = "1",
    intExtensibleEnumCollection = new[] {
        "1"
    },
    floatExtensibleEnum = "1",
    floatExtensibleEnumCollection = new[] {
        "1"
    },
    floatFixedEnum = "1.1",
    floatFixedEnumCollection = new[] {
        "1.1"
    },
    intFixedEnum = "1",
    intFixedEnumCollection = new[] {
        "1"
    },
    stringFixedEnum = "1",
    requiredUnknown = new {},
    optionalUnknown = new {},
    requiredRecordUnknown = new {
        key = new {},
    },
    optionalRecordUnknown = new {
        key = new {},
    },
};

Response response = await client.HelloAgainAsync("<p2>", "<p1>", RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="HelloAgain(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call HelloAgain with required parameters and request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new[] {
        "1"
    },
    requiredDictionary = new {
        key = "1",
    },
    requiredModel = new {
        name = "<name>",
        requiredUnion = new {},
        requiredLiteralString = new {},
        requiredLiteralInt = new {},
        requiredLiteralDouble = new {},
        requiredLiteralBool = new {},
        requiredBadDescription = "<requiredBadDescription>",
    },
    requiredUnknown = new {},
    requiredRecordUnknown = new {
        key = new {},
    },
};

Response response = client.HelloAgain("<p2>", "<p1>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call HelloAgain with all parameters and request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new[] {
        "1"
    },
    requiredDictionary = new {
        key = "1",
    },
    requiredModel = new {
        name = "<name>",
        requiredUnion = new {},
        requiredLiteralString = new {},
        requiredLiteralInt = new {},
        requiredLiteralDouble = new {},
        requiredLiteralBool = new {},
        optionalLiteralString = new {},
        optionalLiteralInt = new {},
        optionalLiteralDouble = new {},
        optionalLiteralBool = new {},
        requiredBadDescription = "<requiredBadDescription>",
    },
    intExtensibleEnum = "1",
    intExtensibleEnumCollection = new[] {
        "1"
    },
    floatExtensibleEnum = "1",
    floatExtensibleEnumCollection = new[] {
        "1"
    },
    floatFixedEnum = "1.1",
    floatFixedEnumCollection = new[] {
        "1.1"
    },
    intFixedEnum = "1",
    intFixedEnumCollection = new[] {
        "1"
    },
    stringFixedEnum = "1",
    requiredUnknown = new {},
    optionalUnknown = new {},
    requiredRecordUnknown = new {
        key = new {},
    },
    optionalRecordUnknown = new {
        key = new {},
    },
};

Response response = client.HelloAgain("<p2>", "<p1>", RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="NoContentTypeAsync(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call NoContentTypeAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new[] {
        "1"
    },
    requiredDictionary = new {
        key = "1",
    },
    requiredModel = new {
        name = "<name>",
        requiredUnion = new {},
        requiredLiteralString = new {},
        requiredLiteralInt = new {},
        requiredLiteralDouble = new {},
        requiredLiteralBool = new {},
        requiredBadDescription = "<requiredBadDescription>",
    },
    requiredUnknown = new {},
    requiredRecordUnknown = new {
        key = new {},
    },
};

Response response = await client.NoContentTypeAsync("<p2>", "<p1>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call NoContentTypeAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new[] {
        "1"
    },
    requiredDictionary = new {
        key = "1",
    },
    requiredModel = new {
        name = "<name>",
        requiredUnion = new {},
        requiredLiteralString = new {},
        requiredLiteralInt = new {},
        requiredLiteralDouble = new {},
        requiredLiteralBool = new {},
        optionalLiteralString = new {},
        optionalLiteralInt = new {},
        optionalLiteralDouble = new {},
        optionalLiteralBool = new {},
        requiredBadDescription = "<requiredBadDescription>",
    },
    intExtensibleEnum = "1",
    intExtensibleEnumCollection = new[] {
        "1"
    },
    floatExtensibleEnum = "1",
    floatExtensibleEnumCollection = new[] {
        "1"
    },
    floatFixedEnum = "1.1",
    floatFixedEnumCollection = new[] {
        "1.1"
    },
    intFixedEnum = "1",
    intFixedEnumCollection = new[] {
        "1"
    },
    stringFixedEnum = "1",
    requiredUnknown = new {},
    optionalUnknown = new {},
    requiredRecordUnknown = new {
        key = new {},
    },
    optionalRecordUnknown = new {
        key = new {},
    },
};

Response response = await client.NoContentTypeAsync("<p2>", "<p1>", RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="NoContentType(string,string,RequestContent,RequestContext)">
<example>
This sample shows how to call NoContentType with required parameters and request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new[] {
        "1"
    },
    requiredDictionary = new {
        key = "1",
    },
    requiredModel = new {
        name = "<name>",
        requiredUnion = new {},
        requiredLiteralString = new {},
        requiredLiteralInt = new {},
        requiredLiteralDouble = new {},
        requiredLiteralBool = new {},
        requiredBadDescription = "<requiredBadDescription>",
    },
    requiredUnknown = new {},
    requiredRecordUnknown = new {
        key = new {},
    },
};

Response response = client.NoContentType("<p2>", "<p1>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call NoContentType with all parameters and request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new[] {
        "1"
    },
    requiredDictionary = new {
        key = "1",
    },
    requiredModel = new {
        name = "<name>",
        requiredUnion = new {},
        requiredLiteralString = new {},
        requiredLiteralInt = new {},
        requiredLiteralDouble = new {},
        requiredLiteralBool = new {},
        optionalLiteralString = new {},
        optionalLiteralInt = new {},
        optionalLiteralDouble = new {},
        optionalLiteralBool = new {},
        requiredBadDescription = "<requiredBadDescription>",
    },
    intExtensibleEnum = "1",
    intExtensibleEnumCollection = new[] {
        "1"
    },
    floatExtensibleEnum = "1",
    floatExtensibleEnumCollection = new[] {
        "1"
    },
    floatFixedEnum = "1.1",
    floatFixedEnumCollection = new[] {
        "1.1"
    },
    intFixedEnum = "1",
    intFixedEnumCollection = new[] {
        "1"
    },
    stringFixedEnum = "1",
    requiredUnknown = new {},
    optionalUnknown = new {},
    requiredRecordUnknown = new {
        key = new {},
    },
    optionalRecordUnknown = new {
        key = new {},
    },
};

Response response = client.NoContentType("<p2>", "<p1>", RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="HelloDemo2Async(RequestContext)">
<example>
This sample shows how to call HelloDemo2Async with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = await client.HelloDemo2Async(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="HelloDemo2(RequestContext)">
<example>
This sample shows how to call HelloDemo2 with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = client.HelloDemo2(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="CreateLiteralAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call CreateLiteralAsync with required request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = await client.CreateLiteralAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call CreateLiteralAsync with all request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    optionalLiteralString = new {},
    optionalLiteralInt = new {},
    optionalLiteralDouble = new {},
    optionalLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = await client.CreateLiteralAsync(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="CreateLiteral(RequestContent,RequestContext)">
<example>
This sample shows how to call CreateLiteral with required request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = client.CreateLiteral(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call CreateLiteral with all request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    optionalLiteralString = new {},
    optionalLiteralInt = new {},
    optionalLiteralDouble = new {},
    optionalLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = client.CreateLiteral(RequestContent.Create(data), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="HelloLiteralAsync(RequestContext)">
<example>
This sample shows how to call HelloLiteralAsync with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = await client.HelloLiteralAsync(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="HelloLiteral(RequestContext)">
<example>
This sample shows how to call HelloLiteral with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = client.HelloLiteral(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
    </member>
    <member name="GetUnknownValueAsync(RequestContext)">
<example>
This sample shows how to call GetUnknownValueAsync and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = await client.GetUnknownValueAsync(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
</example>
    </member>
    <member name="GetUnknownValue(RequestContext)">
<example>
This sample shows how to call GetUnknownValue and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new TypeSpecFirstTestClient(endpoint);

Response response = client.GetUnknownValue(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
</example>
    </member>
    <member name="InternalProtocolAsync(RequestContent,RequestContext)">
    </member>
    <member name="InternalProtocol(RequestContent,RequestContext)">
    </member>
    <member name="StillConvenientAsync(RequestContext)">
    </member>
    <member name="StillConvenient(RequestContext)">
    </member>
  </members>
</doc>