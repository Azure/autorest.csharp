<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="TopActionAsync(String,RequestContext)">
<example>
This sample shows how to call TopActionAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

Response response = await client.TopActionAsync("<action>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

</remarks>
    </member>
    <member name="TopAction(String,RequestContext)">
<example>
This sample shows how to call TopAction with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

Response response = client.TopAction("<action>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

</remarks>
    </member>
    <member name="TopAction2Async(RequestContext)">
<example>
This sample shows how to call TopAction2Async and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

Response response = await client.TopAction2Async();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

</remarks>
    </member>
    <member name="TopAction2(RequestContext)">
<example>
This sample shows how to call TopAction2 and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

Response response = client.TopAction2();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

</remarks>
    </member>
    <member name="PatchActionAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call PatchActionAsync with required request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = await client.PatchActionAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call PatchActionAsync with all request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    optionalLiteralString = new {},
    optionalLiteralInt = new {},
    optionalLiteralDouble = new {},
    optionalLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = await client.PatchActionAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

</remarks>
    </member>
    <member name="PatchAction(RequestContent,RequestContext)">
<example>
This sample shows how to call PatchAction with required request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = client.PatchAction(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call PatchAction with all request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    optionalLiteralString = new {},
    optionalLiteralInt = new {},
    optionalLiteralDouble = new {},
    optionalLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = client.PatchAction(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

</remarks>
    </member>
    <member name="AnonymousBodyAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call AnonymousBodyAsync with required request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = await client.AnonymousBodyAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call AnonymousBodyAsync with all request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    optionalLiteralString = new {},
    optionalLiteralInt = new {},
    optionalLiteralDouble = new {},
    optionalLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = await client.AnonymousBodyAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

</remarks>
    </member>
    <member name="AnonymousBody(RequestContent,RequestContext)">
<example>
This sample shows how to call AnonymousBody with required request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = client.AnonymousBody(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call AnonymousBody with all request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    optionalLiteralString = new {},
    optionalLiteralInt = new {},
    optionalLiteralDouble = new {},
    optionalLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = client.AnonymousBody(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

</remarks>
    </member>
    <member name="FriendlyModelAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call FriendlyModelAsync with required request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

var data = new {
    name = "<name>",
};

Response response = await client.FriendlyModelAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Friend</c>:
<code>{
  name: string, # Required. name of the NotFriend
}
</code>

Response Body:

Schema for <c>Friend</c>:
<code>{
  name: string, # Required. name of the NotFriend
}
</code>

</remarks>
    </member>
    <member name="FriendlyModel(RequestContent,RequestContext)">
<example>
This sample shows how to call FriendlyModel with required request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

var data = new {
    name = "<name>",
};

Response response = client.FriendlyModel(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Friend</c>:
<code>{
  name: string, # Required. name of the NotFriend
}
</code>

Response Body:

Schema for <c>Friend</c>:
<code>{
  name: string, # Required. name of the NotFriend
}
</code>

</remarks>
    </member>
    <member name="AddTimeHeaderAsync(DateTimeOffset,RequestContext)">
<example>
This sample shows how to call AddTimeHeaderAsync.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

Response response = await client.AddTimeHeaderAsync();
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AddTimeHeaderAsync with all parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

Response response = await client.AddTimeHeaderAsync(DateTimeOffset.UtcNow);
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="AddTimeHeader(DateTimeOffset,RequestContext)">
<example>
This sample shows how to call AddTimeHeader.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

Response response = client.AddTimeHeader();
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AddTimeHeader with all parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

Response response = client.AddTimeHeader(DateTimeOffset.UtcNow);
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="SayHiAsync(String,String,String,RequestContext)">
<example>
This sample shows how to call SayHiAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

Response response = await client.SayHiAsync("<headParameter>", "<queryParameter>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call SayHiAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

Response response = await client.SayHiAsync("<headParameter>", "<queryParameter>", "<optionalQuery>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

</remarks>
    </member>
    <member name="SayHi(String,String,String,RequestContext)">
<example>
This sample shows how to call SayHi with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

Response response = client.SayHi("<headParameter>", "<queryParameter>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call SayHi with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

Response response = client.SayHi("<headParameter>", "<queryParameter>", "<optionalQuery>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

</remarks>
    </member>
    <member name="HelloAgainAsync(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call HelloAgainAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new[] {
        "1"
    },
    requiredDictionary = new {
        key = "1",
    },
    requiredModel = new {
        name = "<name>",
        requiredUnion = new {},
        requiredLiteralString = new {},
        requiredLiteralInt = new {},
        requiredLiteralDouble = new {},
        requiredLiteralBool = new {},
        requiredBadDescription = "<requiredBadDescription>",
    },
};

Response response = await client.HelloAgainAsync("<p2>", "<p1>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call HelloAgainAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new[] {
        "1"
    },
    requiredDictionary = new {
        key = "1",
    },
    requiredModel = new {
        name = "<name>",
        requiredUnion = new {},
        requiredLiteralString = new {},
        requiredLiteralInt = new {},
        requiredLiteralDouble = new {},
        requiredLiteralBool = new {},
        optionalLiteralString = new {},
        optionalLiteralInt = new {},
        optionalLiteralDouble = new {},
        optionalLiteralBool = new {},
        requiredBadDescription = "<requiredBadDescription>",
    },
    intExtensibleEnum = "1",
    intExtensibleEnumCollection = new[] {
        "1"
    },
    floatExtensibleEnum = "1",
    floatExtensibleEnumCollection = new[] {
        "1"
    },
    floatFixedEnum = "1",
    floatFixedEnumCollection = new[] {
        "1"
    },
    intFixedEnum = "1",
    intFixedEnumCollection = new[] {
        "1"
    },
    stringFixedEnum = "1",
};

Response response = await client.HelloAgainAsync("<p2>", "<p1>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>RoundTripModel</c>:
<code>{
  requiredString: string, # Required. Required string, illustrating a reference type property.
  requiredInt: number, # Required. Required int, illustrating a value type property.
  requiredCollection: [&quot;1&quot; | &quot;2&quot; | &quot;4&quot;], # Required. Required collection of enums
  requiredDictionary: Dictionary&lt;string, &quot;1&quot; | &quot;2&quot; | &quot;4&quot;&gt;, # Required. Required dictionary of enums
  requiredModel: {
    name: string, # Required. name of the Thing
    requiredUnion: Union, # Required. required Union
    requiredLiteralString: Literal, # Required. required literal string
    requiredLiteralInt: Literal, # Required. required literal int
    requiredLiteralDouble: Literal, # Required. required literal double
    requiredLiteralBool: Literal, # Required. required literal bool
    optionalLiteralString: Literal, # Optional. optional literal string
    optionalLiteralInt: Literal, # Optional. optional literal int
    optionalLiteralDouble: Literal, # Optional. optional literal double
    optionalLiteralBool: Literal, # Optional. optional literal bool
    requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
  }, # Required. Required model
  intExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. this is an int based extensible enum
  intExtensibleEnumCollection: [&quot;1&quot; | &quot;2&quot; | &quot;4&quot;], # Optional. this is a collection of int based extensible enum
  floatExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. this is a float based extensible enum
  floatExtensibleEnumCollection: [&quot;1&quot; | &quot;2&quot; | &quot;4&quot;], # Optional. this is a collection of float based extensible enum
  floatFixedEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. this is a float based fixed enum
  floatFixedEnumCollection: [&quot;1&quot; | &quot;2&quot; | &quot;4&quot;], # Optional. this is a collection of float based fixed enum
  intFixedEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. this is a int based fixed enum
  intFixedEnumCollection: [&quot;1&quot; | &quot;2&quot; | &quot;4&quot;], # Optional. this is a collection of int based fixed enum
  stringFixedEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. this is a string based fixed enum
}
</code>

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

</remarks>
    </member>
    <member name="HelloAgain(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call HelloAgain with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new[] {
        "1"
    },
    requiredDictionary = new {
        key = "1",
    },
    requiredModel = new {
        name = "<name>",
        requiredUnion = new {},
        requiredLiteralString = new {},
        requiredLiteralInt = new {},
        requiredLiteralDouble = new {},
        requiredLiteralBool = new {},
        requiredBadDescription = "<requiredBadDescription>",
    },
};

Response response = client.HelloAgain("<p2>", "<p1>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call HelloAgain with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new[] {
        "1"
    },
    requiredDictionary = new {
        key = "1",
    },
    requiredModel = new {
        name = "<name>",
        requiredUnion = new {},
        requiredLiteralString = new {},
        requiredLiteralInt = new {},
        requiredLiteralDouble = new {},
        requiredLiteralBool = new {},
        optionalLiteralString = new {},
        optionalLiteralInt = new {},
        optionalLiteralDouble = new {},
        optionalLiteralBool = new {},
        requiredBadDescription = "<requiredBadDescription>",
    },
    intExtensibleEnum = "1",
    intExtensibleEnumCollection = new[] {
        "1"
    },
    floatExtensibleEnum = "1",
    floatExtensibleEnumCollection = new[] {
        "1"
    },
    floatFixedEnum = "1",
    floatFixedEnumCollection = new[] {
        "1"
    },
    intFixedEnum = "1",
    intFixedEnumCollection = new[] {
        "1"
    },
    stringFixedEnum = "1",
};

Response response = client.HelloAgain("<p2>", "<p1>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>RoundTripModel</c>:
<code>{
  requiredString: string, # Required. Required string, illustrating a reference type property.
  requiredInt: number, # Required. Required int, illustrating a value type property.
  requiredCollection: [&quot;1&quot; | &quot;2&quot; | &quot;4&quot;], # Required. Required collection of enums
  requiredDictionary: Dictionary&lt;string, &quot;1&quot; | &quot;2&quot; | &quot;4&quot;&gt;, # Required. Required dictionary of enums
  requiredModel: {
    name: string, # Required. name of the Thing
    requiredUnion: Union, # Required. required Union
    requiredLiteralString: Literal, # Required. required literal string
    requiredLiteralInt: Literal, # Required. required literal int
    requiredLiteralDouble: Literal, # Required. required literal double
    requiredLiteralBool: Literal, # Required. required literal bool
    optionalLiteralString: Literal, # Optional. optional literal string
    optionalLiteralInt: Literal, # Optional. optional literal int
    optionalLiteralDouble: Literal, # Optional. optional literal double
    optionalLiteralBool: Literal, # Optional. optional literal bool
    requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
  }, # Required. Required model
  intExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. this is an int based extensible enum
  intExtensibleEnumCollection: [&quot;1&quot; | &quot;2&quot; | &quot;4&quot;], # Optional. this is a collection of int based extensible enum
  floatExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. this is a float based extensible enum
  floatExtensibleEnumCollection: [&quot;1&quot; | &quot;2&quot; | &quot;4&quot;], # Optional. this is a collection of float based extensible enum
  floatFixedEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. this is a float based fixed enum
  floatFixedEnumCollection: [&quot;1&quot; | &quot;2&quot; | &quot;4&quot;], # Optional. this is a collection of float based fixed enum
  intFixedEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. this is a int based fixed enum
  intFixedEnumCollection: [&quot;1&quot; | &quot;2&quot; | &quot;4&quot;], # Optional. this is a collection of int based fixed enum
  stringFixedEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. this is a string based fixed enum
}
</code>

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

</remarks>
    </member>
    <member name="NoContentTypeAsync(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call NoContentTypeAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new[] {
        "1"
    },
    requiredDictionary = new {
        key = "1",
    },
    requiredModel = new {
        name = "<name>",
        requiredUnion = new {},
        requiredLiteralString = new {},
        requiredLiteralInt = new {},
        requiredLiteralDouble = new {},
        requiredLiteralBool = new {},
        requiredBadDescription = "<requiredBadDescription>",
    },
};

Response response = await client.NoContentTypeAsync("<p2>", "<p1>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call NoContentTypeAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new[] {
        "1"
    },
    requiredDictionary = new {
        key = "1",
    },
    requiredModel = new {
        name = "<name>",
        requiredUnion = new {},
        requiredLiteralString = new {},
        requiredLiteralInt = new {},
        requiredLiteralDouble = new {},
        requiredLiteralBool = new {},
        optionalLiteralString = new {},
        optionalLiteralInt = new {},
        optionalLiteralDouble = new {},
        optionalLiteralBool = new {},
        requiredBadDescription = "<requiredBadDescription>",
    },
    intExtensibleEnum = "1",
    intExtensibleEnumCollection = new[] {
        "1"
    },
    floatExtensibleEnum = "1",
    floatExtensibleEnumCollection = new[] {
        "1"
    },
    floatFixedEnum = "1",
    floatFixedEnumCollection = new[] {
        "1"
    },
    intFixedEnum = "1",
    intFixedEnumCollection = new[] {
        "1"
    },
    stringFixedEnum = "1",
};

Response response = await client.NoContentTypeAsync("<p2>", "<p1>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>RoundTripModel</c>:
<code>{
  requiredString: string, # Required. Required string, illustrating a reference type property.
  requiredInt: number, # Required. Required int, illustrating a value type property.
  requiredCollection: [&quot;1&quot; | &quot;2&quot; | &quot;4&quot;], # Required. Required collection of enums
  requiredDictionary: Dictionary&lt;string, &quot;1&quot; | &quot;2&quot; | &quot;4&quot;&gt;, # Required. Required dictionary of enums
  requiredModel: {
    name: string, # Required. name of the Thing
    requiredUnion: Union, # Required. required Union
    requiredLiteralString: Literal, # Required. required literal string
    requiredLiteralInt: Literal, # Required. required literal int
    requiredLiteralDouble: Literal, # Required. required literal double
    requiredLiteralBool: Literal, # Required. required literal bool
    optionalLiteralString: Literal, # Optional. optional literal string
    optionalLiteralInt: Literal, # Optional. optional literal int
    optionalLiteralDouble: Literal, # Optional. optional literal double
    optionalLiteralBool: Literal, # Optional. optional literal bool
    requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
  }, # Required. Required model
  intExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. this is an int based extensible enum
  intExtensibleEnumCollection: [&quot;1&quot; | &quot;2&quot; | &quot;4&quot;], # Optional. this is a collection of int based extensible enum
  floatExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. this is a float based extensible enum
  floatExtensibleEnumCollection: [&quot;1&quot; | &quot;2&quot; | &quot;4&quot;], # Optional. this is a collection of float based extensible enum
  floatFixedEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. this is a float based fixed enum
  floatFixedEnumCollection: [&quot;1&quot; | &quot;2&quot; | &quot;4&quot;], # Optional. this is a collection of float based fixed enum
  intFixedEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. this is a int based fixed enum
  intFixedEnumCollection: [&quot;1&quot; | &quot;2&quot; | &quot;4&quot;], # Optional. this is a collection of int based fixed enum
  stringFixedEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. this is a string based fixed enum
}
</code>

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

</remarks>
    </member>
    <member name="NoContentType(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call NoContentType with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new[] {
        "1"
    },
    requiredDictionary = new {
        key = "1",
    },
    requiredModel = new {
        name = "<name>",
        requiredUnion = new {},
        requiredLiteralString = new {},
        requiredLiteralInt = new {},
        requiredLiteralDouble = new {},
        requiredLiteralBool = new {},
        requiredBadDescription = "<requiredBadDescription>",
    },
};

Response response = client.NoContentType("<p2>", "<p1>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call NoContentType with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new[] {
        "1"
    },
    requiredDictionary = new {
        key = "1",
    },
    requiredModel = new {
        name = "<name>",
        requiredUnion = new {},
        requiredLiteralString = new {},
        requiredLiteralInt = new {},
        requiredLiteralDouble = new {},
        requiredLiteralBool = new {},
        optionalLiteralString = new {},
        optionalLiteralInt = new {},
        optionalLiteralDouble = new {},
        optionalLiteralBool = new {},
        requiredBadDescription = "<requiredBadDescription>",
    },
    intExtensibleEnum = "1",
    intExtensibleEnumCollection = new[] {
        "1"
    },
    floatExtensibleEnum = "1",
    floatExtensibleEnumCollection = new[] {
        "1"
    },
    floatFixedEnum = "1",
    floatFixedEnumCollection = new[] {
        "1"
    },
    intFixedEnum = "1",
    intFixedEnumCollection = new[] {
        "1"
    },
    stringFixedEnum = "1",
};

Response response = client.NoContentType("<p2>", "<p1>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>RoundTripModel</c>:
<code>{
  requiredString: string, # Required. Required string, illustrating a reference type property.
  requiredInt: number, # Required. Required int, illustrating a value type property.
  requiredCollection: [&quot;1&quot; | &quot;2&quot; | &quot;4&quot;], # Required. Required collection of enums
  requiredDictionary: Dictionary&lt;string, &quot;1&quot; | &quot;2&quot; | &quot;4&quot;&gt;, # Required. Required dictionary of enums
  requiredModel: {
    name: string, # Required. name of the Thing
    requiredUnion: Union, # Required. required Union
    requiredLiteralString: Literal, # Required. required literal string
    requiredLiteralInt: Literal, # Required. required literal int
    requiredLiteralDouble: Literal, # Required. required literal double
    requiredLiteralBool: Literal, # Required. required literal bool
    optionalLiteralString: Literal, # Optional. optional literal string
    optionalLiteralInt: Literal, # Optional. optional literal int
    optionalLiteralDouble: Literal, # Optional. optional literal double
    optionalLiteralBool: Literal, # Optional. optional literal bool
    requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
  }, # Required. Required model
  intExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. this is an int based extensible enum
  intExtensibleEnumCollection: [&quot;1&quot; | &quot;2&quot; | &quot;4&quot;], # Optional. this is a collection of int based extensible enum
  floatExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. this is a float based extensible enum
  floatExtensibleEnumCollection: [&quot;1&quot; | &quot;2&quot; | &quot;4&quot;], # Optional. this is a collection of float based extensible enum
  floatFixedEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. this is a float based fixed enum
  floatFixedEnumCollection: [&quot;1&quot; | &quot;2&quot; | &quot;4&quot;], # Optional. this is a collection of float based fixed enum
  intFixedEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. this is a int based fixed enum
  intFixedEnumCollection: [&quot;1&quot; | &quot;2&quot; | &quot;4&quot;], # Optional. this is a collection of int based fixed enum
  stringFixedEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. this is a string based fixed enum
}
</code>

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

</remarks>
    </member>
    <member name="HelloDemo2Async(RequestContext)">
<example>
This sample shows how to call HelloDemo2Async and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

Response response = await client.HelloDemo2Async();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

</remarks>
    </member>
    <member name="HelloDemo2(RequestContext)">
<example>
This sample shows how to call HelloDemo2 and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

Response response = client.HelloDemo2();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

</remarks>
    </member>
    <member name="CreateLiteralAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call CreateLiteralAsync with required request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = await client.CreateLiteralAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call CreateLiteralAsync with all request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    optionalLiteralString = new {},
    optionalLiteralInt = new {},
    optionalLiteralDouble = new {},
    optionalLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = await client.CreateLiteralAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

</remarks>
    </member>
    <member name="CreateLiteral(RequestContent,RequestContext)">
<example>
This sample shows how to call CreateLiteral with required request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = client.CreateLiteral(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call CreateLiteral with all request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    optionalLiteralString = new {},
    optionalLiteralInt = new {},
    optionalLiteralDouble = new {},
    optionalLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = client.CreateLiteral(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

</remarks>
    </member>
    <member name="HelloLiteralAsync(RequestContext)">
<example>
This sample shows how to call HelloLiteralAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

Response response = await client.HelloLiteralAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

</remarks>
    </member>
    <member name="HelloLiteral(RequestContext)">
<example>
This sample shows how to call HelloLiteral and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

Response response = client.HelloLiteral();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

</remarks>
    </member>
    <member name="GetUnknownValueAsync(RequestContext)">
<example>
This sample shows how to call GetUnknownValueAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

Response response = await client.GetUnknownValueAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
</example>
    </member>
    <member name="GetUnknownValue(RequestContext)">
<example>
This sample shows how to call GetUnknownValue and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

Response response = client.GetUnknownValue();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
</example>
    </member>
    <member name="InternalProtocolAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call InternalProtocolAsync with required request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = await client.InternalProtocolAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call InternalProtocolAsync with all request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    optionalLiteralString = new {},
    optionalLiteralInt = new {},
    optionalLiteralDouble = new {},
    optionalLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = await client.InternalProtocolAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

</remarks>
    </member>
    <member name="InternalProtocol(RequestContent,RequestContext)">
<example>
This sample shows how to call InternalProtocol with required request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = client.InternalProtocol(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call InternalProtocol with all request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

var data = new {
    name = "<name>",
    requiredUnion = new {},
    requiredLiteralString = new {},
    requiredLiteralInt = new {},
    requiredLiteralDouble = new {},
    requiredLiteralBool = new {},
    optionalLiteralString = new {},
    optionalLiteralInt = new {},
    optionalLiteralDouble = new {},
    optionalLiteralBool = new {},
    requiredBadDescription = "<requiredBadDescription>",
};

Response response = client.InternalProtocol(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralDouble").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

Response Body:

Schema for <c>Thing</c>:
<code>{
  name: string, # Required. name of the Thing
  requiredUnion: Union, # Required. required Union
  requiredLiteralString: Literal, # Required. required literal string
  requiredLiteralInt: Literal, # Required. required literal int
  requiredLiteralDouble: Literal, # Required. required literal double
  requiredLiteralBool: Literal, # Required. required literal bool
  optionalLiteralString: Literal, # Optional. optional literal string
  optionalLiteralInt: Literal, # Optional. optional literal int
  optionalLiteralDouble: Literal, # Optional. optional literal double
  optionalLiteralBool: Literal, # Optional. optional literal bool
  requiredBadDescription: string, # Required. description with xml &amp;lt;|endoftext|&amp;gt;
}
</code>

</remarks>
    </member>
    <member name="StillConvenientAsync(RequestContext)">
<example>
This sample shows how to call StillConvenientAsync.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

Response response = await client.StillConvenientAsync();
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="StillConvenient(RequestContext)">
<example>
This sample shows how to call StillConvenient.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new CadlFirstTestClient(endpoint, credential);

Response response = client.StillConvenient();
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
  </members>
</doc>