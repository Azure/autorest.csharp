// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.ResourceManager.Resources;

namespace MgmtResourceName
{
    /// <summary> A class to add extension methods to ResourceGroup. </summary>
    public static partial class ResourceGroupExtensions
    {
        private static ResourceGroupExtensionClient GetExtensionClient(ResourceGroup resourceGroup)
        {
            return resourceGroup.GetCachedClient((client) =>
            {
                return new ResourceGroupExtensionClient(client, resourceGroup.Id);
            }
            );
        }

        /// <summary> Gets a collection of MachineResources in the MachineResource. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of MachineResources and their operations over a MachineResource. </returns>
        public static MachineCollection GetMachineResources(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetMachineResources();
        }

        /// <summary>
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/machines/{machineName}
        /// Operation Id: Machines_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="machineName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="machineName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="machineName"/> is null. </exception>
        public static async Task<Response<MachineResource>> GetMachineResourceAsync(this ResourceGroup resourceGroup, string machineName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetMachineResources().GetAsync(machineName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/machines/{machineName}
        /// Operation Id: Machines_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="machineName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="machineName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="machineName"/> is null. </exception>
        public static Response<MachineResource> GetMachineResource(this ResourceGroup resourceGroup, string machineName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetMachineResources().Get(machineName, cancellationToken);
        }

        /// <summary> Gets a collection of DiskResources in the DiskResource. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of DiskResources and their operations over a DiskResource. </returns>
        public static DiskCollection GetDiskResources(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetDiskResources();
        }

        /// <summary>
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskResources/{diskResourceName}
        /// Operation Id: DiskResources_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="diskResourceName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="diskResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="diskResourceName"/> is null. </exception>
        public static async Task<Response<DiskResource>> GetDiskResourceAsync(this ResourceGroup resourceGroup, string diskResourceName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetDiskResources().GetAsync(diskResourceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskResources/{diskResourceName}
        /// Operation Id: DiskResources_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="diskResourceName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="diskResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="diskResourceName"/> is null. </exception>
        public static Response<DiskResource> GetDiskResource(this ResourceGroup resourceGroup, string diskResourceName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetDiskResources().Get(diskResourceName, cancellationToken);
        }

        /// <summary> Gets a collection of MemoryResources in the MemoryResource. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of MemoryResources and their operations over a MemoryResource. </returns>
        public static MemoryResourceCollection GetMemoryResources(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetMemoryResources();
        }

        /// <summary>
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/memoryResources/{memoryResourceName}
        /// Operation Id: MemoryResources_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="memoryResourceName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="memoryResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="memoryResourceName"/> is null. </exception>
        public static async Task<Response<MemoryResource>> GetMemoryResourceAsync(this ResourceGroup resourceGroup, string memoryResourceName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetMemoryResources().GetAsync(memoryResourceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/memoryResources/{memoryResourceName}
        /// Operation Id: MemoryResources_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="memoryResourceName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="memoryResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="memoryResourceName"/> is null. </exception>
        public static Response<MemoryResource> GetMemoryResource(this ResourceGroup resourceGroup, string memoryResourceName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetMemoryResources().Get(memoryResourceName, cancellationToken);
        }

        /// <summary> Gets a collection of NetworkResources in the NetworkResource. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of NetworkResources and their operations over a NetworkResource. </returns>
        public static NetworkCollection GetNetworkResources(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetNetworkResources();
        }

        /// <summary>
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/networkResources/{networkResourceName}
        /// Operation Id: NetworkResources_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="networkResourceName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkResourceName"/> is null. </exception>
        public static async Task<Response<NetworkResource>> GetNetworkResourceAsync(this ResourceGroup resourceGroup, string networkResourceName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetNetworkResources().GetAsync(networkResourceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/networkResources/{networkResourceName}
        /// Operation Id: NetworkResources_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="networkResourceName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkResourceName"/> is null. </exception>
        public static Response<NetworkResource> GetNetworkResource(this ResourceGroup resourceGroup, string networkResourceName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetNetworkResources().Get(networkResourceName, cancellationToken);
        }
    }
}
