// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace MgmtPropertyChooser.Models
{
    /// <summary> The type of identity used for the virtual machine. The type &apos;SystemAssigned, UserAssigned&apos; includes both an implicitly created identity and a set of user assigned identities. The type &apos;None&apos; will remove any identities from the virtual machine. </summary>
    public readonly partial struct ResourceIdentityTypeV3 : IEquatable<ResourceIdentityTypeV3>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ResourceIdentityTypeV3"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ResourceIdentityTypeV3(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SystemAssignedValue = "SystemAssigned";
        private const string UserAssignedValue = "UserAssigned";
        private const string SystemAssignedUserAssignedValue = "SystemAssigned,UserAssigned";
        private const string NoneValue = "None";

        /// <summary> SystemAssigned. </summary>
        public static ResourceIdentityTypeV3 SystemAssigned { get; } = new ResourceIdentityTypeV3(SystemAssignedValue);
        /// <summary> UserAssigned. </summary>
        public static ResourceIdentityTypeV3 UserAssigned { get; } = new ResourceIdentityTypeV3(UserAssignedValue);
        /// <summary> SystemAssigned,UserAssigned. </summary>
        public static ResourceIdentityTypeV3 SystemAssignedUserAssigned { get; } = new ResourceIdentityTypeV3(SystemAssignedUserAssignedValue);
        /// <summary> None. </summary>
        public static ResourceIdentityTypeV3 None { get; } = new ResourceIdentityTypeV3(NoneValue);
        /// <summary> Determines if two <see cref="ResourceIdentityTypeV3"/> values are the same. </summary>
        public static bool operator ==(ResourceIdentityTypeV3 left, ResourceIdentityTypeV3 right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ResourceIdentityTypeV3"/> values are not the same. </summary>
        public static bool operator !=(ResourceIdentityTypeV3 left, ResourceIdentityTypeV3 right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ResourceIdentityTypeV3"/>. </summary>
        public static implicit operator ResourceIdentityTypeV3(string value) => new ResourceIdentityTypeV3(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ResourceIdentityTypeV3 other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ResourceIdentityTypeV3 other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
