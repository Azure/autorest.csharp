<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="DeleteAsync(String,RequestContext)">
<example>
This sample shows how to call DeleteAsync with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new MixApiVersionClient(endpoint);

Response response = await client.DeleteAsync("<name>");
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Delete a pet.
</remarks>
    </member>
    <member name="Delete(String,RequestContext)">
<example>
This sample shows how to call Delete with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new MixApiVersionClient(endpoint);

Response response = client.Delete("<name>");
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Delete a pet.
</remarks>
    </member>
    <member name="ReadAsync(Int32,RequestContext)">
<example>
This sample shows how to call ReadAsync with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new MixApiVersionClient(endpoint);

Response response = await client.ReadAsync(1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("tag").ToString());
Console.WriteLine(result.GetProperty("age").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Pet</c>:
<code>{
  name: string, # Required. pet name
  tag: string, # Optional.
  age: number, # Required.
}
</code>

</remarks>
    </member>
    <member name="Read(Int32,RequestContext)">
<example>
This sample shows how to call Read with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new MixApiVersionClient(endpoint);

Response response = client.Read(1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("tag").ToString());
Console.WriteLine(result.GetProperty("age").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Pet</c>:
<code>{
  name: string, # Required. pet name
  tag: string, # Optional.
  age: number, # Required.
}
</code>

</remarks>
    </member>
    <member name="CreateAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call CreateAsync with required request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new MixApiVersionClient(endpoint);

var data = new {
    age = 1234,
};

Response response = await client.CreateAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("age").ToString());
]]></code>
This sample shows how to call CreateAsync with all request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new MixApiVersionClient(endpoint);

var data = new {
    tag = "<tag>",
    age = 1234,
};

Response response = await client.CreateAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("tag").ToString());
Console.WriteLine(result.GetProperty("age").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Pet</c>:
<code>{
  name: string, # Required. pet name
  tag: string, # Optional.
  age: number, # Required.
}
</code>

Response Body:

Schema for <c>Pet</c>:
<code>{
  name: string, # Required. pet name
  tag: string, # Optional.
  age: number, # Required.
}
</code>

</remarks>
    </member>
    <member name="Create(RequestContent,RequestContext)">
<example>
This sample shows how to call Create with required request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new MixApiVersionClient(endpoint);

var data = new {
    age = 1234,
};

Response response = client.Create(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("age").ToString());
]]></code>
This sample shows how to call Create with all request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new MixApiVersionClient(endpoint);

var data = new {
    tag = "<tag>",
    age = 1234,
};

Response response = client.Create(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("tag").ToString());
Console.WriteLine(result.GetProperty("age").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Pet</c>:
<code>{
  name: string, # Required. pet name
  tag: string, # Optional.
  age: number, # Required.
}
</code>

Response Body:

Schema for <c>Pet</c>:
<code>{
  name: string, # Required. pet name
  tag: string, # Optional.
  age: number, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetPetsAsync(RequestContext)">
<example>
This sample shows how to call GetPetsAsync and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new MixApiVersionClient(endpoint);

await foreach (var data in client.GetPetsAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("petId").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
}
]]></code>
</example>
<remarks>
A collection id may optionally be specified. Only entries in the specified (or default) collection will be returned.

Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>Array</c>:
<code>{
  id: number, # Required.
  petId: number, # Required.
  name: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetPets(RequestContext)">
<example>
This sample shows how to call GetPets and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new MixApiVersionClient(endpoint);

foreach (var data in client.GetPets())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("petId").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
}
]]></code>
</example>
<remarks>
A collection id may optionally be specified. Only entries in the specified (or default) collection will be returned.

Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>Array</c>:
<code>{
  id: number, # Required.
  petId: number, # Required.
  name: string, # Required.
}
</code>

</remarks>
    </member>
  </members>
</doc>