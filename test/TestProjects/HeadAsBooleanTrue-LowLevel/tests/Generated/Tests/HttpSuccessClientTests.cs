// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Identity;
using HeadAsBooleanTrue_LowLevel;
using NUnit.Framework;

namespace HeadAsBooleanTrue_LowLevel.Tests
{
    public class HttpSuccessClientTests : HeadAsBooleanTrue_LowLevelTestBase
    {
        public HttpSuccessClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        public async Task Head200_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            Response<bool> response = await client.Head200Async();
            Console.WriteLine(response.GetRawResponse().Status);
        }

        [Test]
        public async Task Head200_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            Response<bool> response = await client.Head200Async();
            Console.WriteLine(response.GetRawResponse().Status);
        }

        [Test]
        public async Task Head204_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            Response<bool> response = await client.Head204Async();
            Console.WriteLine(response.GetRawResponse().Status);
        }

        [Test]
        public async Task Head204_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            Response<bool> response = await client.Head204Async();
            Console.WriteLine(response.GetRawResponse().Status);
        }

        [Test]
        public async Task Head404_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            Response<bool> response = await client.Head404Async();
            Console.WriteLine(response.GetRawResponse().Status);
        }

        [Test]
        public async Task Head404_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            HttpSuccessClient client = CreateHttpSuccessClient(credential, endpoint);

            Response<bool> response = await client.Head404Async();
            Console.WriteLine(response.GetRawResponse().Status);
        }
    }
}
