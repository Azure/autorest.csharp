// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace MgmtVirtualResource
{
    /// <summary>
    /// A Class representing a VirtualMachineScaleSet along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="VirtualMachineScaleSetMgmtVirtualResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetVirtualMachineScaleSetMgmtVirtualResource method.
    /// Otherwise you can get one from its parent resource <see cref="ResourceGroupResource" /> using the GetVirtualMachineScaleSet method.
    /// </summary>
    public partial class VirtualMachineScaleSetMgmtVirtualResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="VirtualMachineScaleSetMgmtVirtualResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string virtualMachineScaleSetName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _publicIPAddressClientDiagnostics;
        private readonly PublicIPAddressesRestOperations _publicIPAddressRestClient;

        /// <summary> Initializes a new instance of the <see cref="VirtualMachineScaleSetMgmtVirtualResource"/> class for mocking. </summary>
        protected VirtualMachineScaleSetMgmtVirtualResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="VirtualMachineScaleSetMgmtVirtualResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal VirtualMachineScaleSetMgmtVirtualResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _publicIPAddressClientDiagnostics = new ClientDiagnostics("MgmtVirtualResource", PublicIPAddressResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(PublicIPAddressResource.ResourceType, out string publicIPAddressApiVersion);
            _publicIPAddressRestClient = new PublicIPAddressesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, publicIPAddressApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Compute/virtualMachineScaleSets";

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets information about all public IP addresses on a virtual machine scale set level.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/publicipaddresses
        /// Operation Id: PublicIPAddresses_ListVirtualMachineScaleSetPublicIPAddresses
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PublicIPAddressResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PublicIPAddressResource> GetVirtualMachineScaleSetPublicIPAddressesPublicIPAddressesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<PublicIPAddressResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _publicIPAddressClientDiagnostics.CreateScope("VirtualMachineScaleSetMgmtVirtualResource.GetVirtualMachineScaleSetPublicIPAddressesPublicIPAddresses");
                scope.Start();
                try
                {
                    var response = await _publicIPAddressRestClient.ListVirtualMachineScaleSetPublicIPAddressesAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new PublicIPAddressResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PublicIPAddressResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _publicIPAddressClientDiagnostics.CreateScope("VirtualMachineScaleSetMgmtVirtualResource.GetVirtualMachineScaleSetPublicIPAddressesPublicIPAddresses");
                scope.Start();
                try
                {
                    var response = await _publicIPAddressRestClient.ListVirtualMachineScaleSetPublicIPAddressesNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new PublicIPAddressResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets information about all public IP addresses on a virtual machine scale set level.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/publicipaddresses
        /// Operation Id: PublicIPAddresses_ListVirtualMachineScaleSetPublicIPAddresses
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PublicIPAddressResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PublicIPAddressResource> GetVirtualMachineScaleSetPublicIPAddressesPublicIPAddresses(CancellationToken cancellationToken = default)
        {
            Page<PublicIPAddressResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _publicIPAddressClientDiagnostics.CreateScope("VirtualMachineScaleSetMgmtVirtualResource.GetVirtualMachineScaleSetPublicIPAddressesPublicIPAddresses");
                scope.Start();
                try
                {
                    var response = _publicIPAddressRestClient.ListVirtualMachineScaleSetPublicIPAddresses(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new PublicIPAddressResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PublicIPAddressResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _publicIPAddressClientDiagnostics.CreateScope("VirtualMachineScaleSetMgmtVirtualResource.GetVirtualMachineScaleSetPublicIPAddressesPublicIPAddresses");
                scope.Start();
                try
                {
                    var response = _publicIPAddressRestClient.ListVirtualMachineScaleSetPublicIPAddressesNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new PublicIPAddressResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
