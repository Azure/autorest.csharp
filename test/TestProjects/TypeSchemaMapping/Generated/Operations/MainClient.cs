// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using TypeSchemaMapping;
using TypeSchemaMapping.Models;

namespace CustomNamespace
{
    /// <summary> The Main service client. </summary>
    internal partial class MainClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal MainRestClient RestClient { get; }
        /// <summary> Initializes a new instance of MainClient for mocking. </summary>
        protected MainClient()
        {
        }
        /// <summary> Initializes a new instance of MainClient. </summary>
        internal MainClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string host = "http://localhost:3000")
        {
            RestClient = new MainRestClient(clientDiagnostics, pipeline, host);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <param name="body"> The Model to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CustomizedModel>> OperationAsync(CustomizedModel body = null, CancellationToken cancellationToken = default)
        {
            return await RestClient.OperationAsync(body, cancellationToken).ConfigureAwait(false);
        }

        /// <param name="body"> The Model to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CustomizedModel> Operation(CustomizedModel body = null, CancellationToken cancellationToken = default)
        {
            return RestClient.Operation(body, cancellationToken);
        }

        /// <param name="body"> The ModelStruct to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<RenamedModelStruct>> OperationStructAsync(RenamedModelStruct? body = null, CancellationToken cancellationToken = default)
        {
            return await RestClient.OperationStructAsync(body, cancellationToken).ConfigureAwait(false);
        }

        /// <param name="body"> The ModelStruct to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<RenamedModelStruct> OperationStruct(RenamedModelStruct? body = null, CancellationToken cancellationToken = default)
        {
            return RestClient.OperationStruct(body, cancellationToken);
        }

        /// <param name="body"> The SecondModel to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SecondModel>> OperationSecondModelAsync(SecondModel body = null, CancellationToken cancellationToken = default)
        {
            return await RestClient.OperationSecondModelAsync(body, cancellationToken).ConfigureAwait(false);
        }

        /// <param name="body"> The SecondModel to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SecondModel> OperationSecondModel(SecondModel body = null, CancellationToken cancellationToken = default)
        {
            return RestClient.OperationSecondModel(body, cancellationToken);
        }
    }
}
