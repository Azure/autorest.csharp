// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;
using NamespaceForEnums;

namespace CustomNamespace
{
    internal partial struct RenamedModelStruct : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("ModelProperty");
            writer.WriteStartObject();
            if (CustomizedFlattenedStringProperty != null)
            {
                writer.WritePropertyName("ModelProperty");
                writer.WriteStringValue(CustomizedFlattenedStringProperty);
            }
            if (Fruit != null)
            {
                writer.WritePropertyName("Fruit");
                writer.WriteStringValue(Fruit.Value.ToSerialString());
            }
            if (DaysOfWeek != null)
            {
                writer.WritePropertyName("DaysOfWeek");
                writer.WriteStringValue(DaysOfWeek.Value.ToString());
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static RenamedModelStruct DeserializeRenamedModelStruct(JsonElement element)
        {
            string modelProperty = default;
            CustomFruitEnum? fruit = default;
            CustomDaysOfWeek? daysOfWeek = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ModelProperty"))
                {
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("ModelProperty"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            modelProperty = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("Fruit"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            fruit = property0.Value.GetString().ToCustomFruitEnum();
                            continue;
                        }
                        if (property0.NameEquals("DaysOfWeek"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            daysOfWeek = new CustomDaysOfWeek(property0.Value.GetString());
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new RenamedModelStruct(modelProperty, fruit, daysOfWeek);
        }
    }
}
