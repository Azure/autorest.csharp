// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace TypeSchemaMapping.Models
{
    /// <summary> Letters. </summary>
    public readonly partial struct Letters : IEquatable<Letters>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="Letters"/> values are the same. </summary>
        public Letters(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AValue = "A";
        private const string BValue = "B";
        private const string CValue = "C";

        /// <summary> A. </summary>
        public static Letters A { get; } = new Letters(AValue);
        /// <summary> B. </summary>
        public static Letters B { get; } = new Letters(BValue);
        /// <summary> C. </summary>
        public static Letters C { get; } = new Letters(CValue);
        /// <summary> Determines if two <see cref="Letters"/> values are the same. </summary>
        public static bool operator ==(Letters left, Letters right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Letters"/> values are not the same. </summary>
        public static bool operator !=(Letters left, Letters right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Letters"/>. </summary>
        public static implicit operator Letters(string value) => new Letters(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Letters other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Letters other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
