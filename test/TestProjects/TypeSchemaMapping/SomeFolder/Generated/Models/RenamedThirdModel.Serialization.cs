// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace CustomNamespace
{
    internal partial class RenamedThirdModel : IUtf8JsonSerializable, IModelJsonSerializable<RenamedThirdModel>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<RenamedThirdModel>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<RenamedThirdModel>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(CustomizedETagProperty))
            {
                writer.WritePropertyName("ETag"u8);
                writer.WriteStringValue(CustomizedETagProperty.ToString());
            }
            if (Optional.IsDefined(CustomizedCreatedAtProperty))
            {
                writer.WritePropertyName("CreatedAt"u8);
                writer.WriteStringValue(CustomizedCreatedAtProperty);
            }
            writer.WriteEndObject();
        }

        RenamedThirdModel IModelJsonSerializable<RenamedThirdModel>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeRenamedThirdModel(document.RootElement, options);
        }

        BinaryData IModelSerializable<RenamedThirdModel>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);
            return ModelSerializer.SerializeCore(this, options);
        }

        RenamedThirdModel IModelSerializable<RenamedThirdModel>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeRenamedThirdModel(document.RootElement, options);
        }

        internal static RenamedThirdModel DeserializeRenamedThirdModel(JsonElement element, ModelSerializerOptions options = null)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ETag> eTag = default;
            Optional<DateTime> createdAt = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ETag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    eTag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("CreatedAt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createdAt = property.Value.GetDateTime();
                    continue;
                }
            }
            return new RenamedThirdModel(eTag, createdAt);
        }
    }
}
