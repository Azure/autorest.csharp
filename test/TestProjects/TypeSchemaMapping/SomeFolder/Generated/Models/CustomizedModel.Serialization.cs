// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;
using Azure.Core;
using NamespaceForEnums;

namespace CustomNamespace
{
    internal partial class CustomizedModel : IUtf8JsonSerializable, IJsonModel<CustomizedModel>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<CustomizedModel>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<CustomizedModel>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CustomizedModel>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CustomizedModel)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(PropertyRenamedAndTypeChanged))
            {
                writer.WritePropertyName("ModelProperty"u8);
                writer.WriteNumberValue(PropertyRenamedAndTypeChanged.Value);
            }
            if (Optional.IsDefined(_field))
            {
                writer.WritePropertyName("PropertyToField"u8);
                writer.WriteStringValue(_field);
            }
            writer.WritePropertyName("Fruit"u8);
            writer.WriteStringValue(CustomizedFancyField.ToSerialString());
            writer.WritePropertyName("DaysOfWeek"u8);
            writer.WriteStringValue(DaysOfWeek.ToString());
            writer.WriteEndObject();
        }

        CustomizedModel IJsonModel<CustomizedModel>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CustomizedModel>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CustomizedModel)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeCustomizedModel(document.RootElement, options);
        }

        BinaryData IPersistableModel<CustomizedModel>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CustomizedModel>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(CustomizedModel)} does not support '{options.Format}' format.");
            }
        }

        CustomizedModel IPersistableModel<CustomizedModel>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CustomizedModel>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeCustomizedModel(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(CustomizedModel)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<CustomizedModel>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
