// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Parameters_LowLevel.Samples
{
    public class Samples_ParametersLowlevelClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoRequestBodyResponseBody()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new ParametersLowlevelClient(credential);

            Response response = client.NoRequestBodyResponseBody(1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RequestBodyResponseBody()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new ParametersLowlevelClient(credential);

            var data = new { };

            Response response = client.RequestBodyResponseBody(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteNoRequestBodyResponseBody()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new ParametersLowlevelClient(credential);

            Response response = client.DeleteNoRequestBodyResponseBody("<resourceName>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoRequestBodyNoResponseBody()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new ParametersLowlevelClient(credential);

            Response response = client.NoRequestBodyNoResponseBody();
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RequestBodyNoResponseBody()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new ParametersLowlevelClient(credential);

            var data = "<String>";

            Response response = client.RequestBodyNoResponseBody(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_OptionalPathParameters()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new ParametersLowlevelClient(credential);

            Response response = client.OptionalPathParameters(1234, 1234);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_OptionalPathParametersWithMixedSequence()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new ParametersLowlevelClient(credential);

            Response response = client.OptionalPathParametersWithMixedSequence(1234);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_OptionalPathBodyParametersWithMixedSequence()
        {
            var credential = new AzureKeyCredential("<key>");
            var client = new ParametersLowlevelClient(credential);

            var data = new { };

            Response response = client.OptionalPathBodyParametersWithMixedSequence("<name>", 1234, RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }
    }
}
