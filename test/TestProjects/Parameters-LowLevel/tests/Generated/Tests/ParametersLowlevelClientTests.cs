// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using Parameters_LowLevel;

namespace Parameters_LowLevel.Tests
{
    public class ParametersLowlevelClientTests : Parameters_LowLevelTestBase
    {
        public ParametersLowlevelClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        public async Task NoRequestBodyResponseBody_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(credential, endpoint);

            Response response = await client.NoRequestBodyResponseBodyAsync(1234, default, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        public async Task NoRequestBodyResponseBody_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(credential, endpoint);

            Response response = await client.NoRequestBodyResponseBodyAsync(1234, default, 1234, "start", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        public async Task RequestBodyResponseBody_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(credential, endpoint);

            RequestContent content = null;
            Response response = await client.RequestBodyResponseBodyAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        public async Task RequestBodyResponseBody_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                Code = "<Code>",
                Status = "<Status>",
            });
            Response response = await client.RequestBodyResponseBodyAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("Code").ToString());
            Console.WriteLine(result.GetProperty("Status").ToString());
        }

        [Test]
        public async Task DeleteNoRequestBodyResponseBody_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(credential, endpoint);

            Response response = await client.DeleteNoRequestBodyResponseBodyAsync("<resourceName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        public async Task DeleteNoRequestBodyResponseBody_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(credential, endpoint);

            Response response = await client.DeleteNoRequestBodyResponseBodyAsync("<resourceName>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        public async Task NoRequestBodyNoResponseBody_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(credential, endpoint);

            Response response = await client.NoRequestBodyNoResponseBodyAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task NoRequestBodyNoResponseBody_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(credential, endpoint);

            Response response = await client.NoRequestBodyNoResponseBodyAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task RequestBodyNoResponseBody_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(credential, endpoint);

            RequestContent content = null;
            Response response = await client.RequestBodyNoResponseBodyAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task RequestBodyNoResponseBody_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(credential, endpoint);

            RequestContent content = RequestContent.Create("<stringBody>");
            Response response = await client.RequestBodyNoResponseBodyAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task OptionalPathParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(credential, endpoint);

            Response response = await client.OptionalPathParametersAsync(1234, "start", 1234);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task OptionalPathParameters_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(credential, endpoint);

            Response response = await client.OptionalPathParametersAsync(1234, "start", 1234);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task OptionalPathParametersWithMixedSequence_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(credential, endpoint);

            Response response = await client.OptionalPathParametersWithMixedSequenceAsync(1234, "start", default);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task OptionalPathParametersWithMixedSequence_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(credential, endpoint);

            Response response = await client.OptionalPathParametersWithMixedSequenceAsync(1234, "start", default);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task OptionalPathBodyParametersWithMixedSequence_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(credential, endpoint);

            RequestContent content = null;
            Response response = await client.OptionalPathBodyParametersWithMixedSequenceAsync(default, "<name>", 1234, default, content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task OptionalPathBodyParametersWithMixedSequence_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                Code = "<Code>",
                Status = "<Status>",
            });
            Response response = await client.OptionalPathBodyParametersWithMixedSequenceAsync(default, "<name>", 1234, default, content, top: 1234);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task RepeatableAction_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(credential, endpoint);

            RequestContent content = null;
            Response response = await client.RepeatableActionAsync(default, "<name>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task RepeatableAction_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ParametersLowlevelClient client = CreateParametersLowlevelClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new
            {
                Code = "<Code>",
                Status = "<Status>",
            });
            Response response = await client.RepeatableActionAsync(default, "<name>", content);
            Console.WriteLine(response.Status);
        }
    }
}
