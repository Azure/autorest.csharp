<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="InitialProtocolAsync(RequestContext)">
<example>
This sample shows how to call InitialProtocolAsync and parse the result.
<code><![CDATA[
var client = new ConvenienceUpdateInCadlClient();

Response response = await client.InitialProtocolAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="InitialProtocol(RequestContext)">
<example>
This sample shows how to call InitialProtocol and parse the result.
<code><![CDATA[
var client = new ConvenienceUpdateInCadlClient();

Response response = client.InitialProtocol();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="InitialConvenienceWithOptionalAsync(RequestContext)">
<example>
This sample shows how to call InitialConvenienceWithOptionalAsync and parse the result.
<code><![CDATA[
var client = new ConvenienceUpdateInCadlClient();

Response response = await client.InitialConvenienceWithOptionalAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="InitialConvenienceWithOptional(RequestContext)">
<example>
This sample shows how to call InitialConvenienceWithOptional and parse the result.
<code><![CDATA[
var client = new ConvenienceUpdateInCadlClient();

Response response = client.InitialConvenienceWithOptional();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="InitialConvenienceWithRequiredAsync(RequestContext)">
<example>
This sample shows how to call InitialConvenienceWithRequiredAsync with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceUpdateInCadlClient();

Response response = await client.InitialConvenienceWithRequiredAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="InitialConvenienceWithRequired(RequestContext)">
<example>
This sample shows how to call InitialConvenienceWithRequired with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceUpdateInCadlClient();

Response response = client.InitialConvenienceWithRequired();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="InitialConvenienceShouldNotGenerateAsync(RequestContext)">
<example>
This sample shows how to call InitialConvenienceShouldNotGenerateAsync.
<code><![CDATA[
var client = new ConvenienceUpdateInCadlClient();

Response response = await client.InitialConvenienceShouldNotGenerateAsync();
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="InitialConvenienceShouldNotGenerate(RequestContext)">
<example>
This sample shows how to call InitialConvenienceShouldNotGenerate.
<code><![CDATA[
var client = new ConvenienceUpdateInCadlClient();

Response response = client.InitialConvenienceShouldNotGenerate();
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="InitialProtocolShouldNotGenerateConvenienceAsync(RequestContext)">
<example>
This sample shows how to call InitialProtocolShouldNotGenerateConvenienceAsync.
<code><![CDATA[
var client = new ConvenienceUpdateInCadlClient();

Response response = await client.InitialProtocolShouldNotGenerateConvenienceAsync();
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="InitialProtocolShouldNotGenerateConvenience(RequestContext)">
<example>
This sample shows how to call InitialProtocolShouldNotGenerateConvenience.
<code><![CDATA[
var client = new ConvenienceUpdateInCadlClient();

Response response = client.InitialProtocolShouldNotGenerateConvenience();
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="UpdateConvenienceAsync(RequestContext)">
<example>
This sample shows how to call UpdateConvenienceAsync with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceUpdateInCadlClient();

Response response = await client.UpdateConvenienceAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="UpdateConvenience(RequestContext)">
<example>
This sample shows how to call UpdateConvenience with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceUpdateInCadlClient();

Response response = client.UpdateConvenience();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
  </members>
</doc>