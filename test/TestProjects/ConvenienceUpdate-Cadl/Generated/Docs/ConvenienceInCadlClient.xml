<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="ProtocolAsync(RequestContext)">
<example>
This sample shows how to call ProtocolAsync and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ProtocolAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="Protocol(RequestContext)">
<example>
This sample shows how to call Protocol and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.Protocol();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceWithOptionalAsync(RequestContext)">
<example>
This sample shows how to call ConvenienceWithOptionalAsync and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ConvenienceWithOptionalAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceWithOptional(RequestContext)">
<example>
This sample shows how to call ConvenienceWithOptional and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ConvenienceWithOptional();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceWithRequiredAsync(RequestContext)">
<example>
This sample shows how to call ConvenienceWithRequiredAsync with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ConvenienceWithRequiredAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceWithRequired(RequestContext)">
<example>
This sample shows how to call ConvenienceWithRequired with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ConvenienceWithRequired();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceShouldNotGenerateAsync(RequestContext)">
<example>
This sample shows how to call ConvenienceShouldNotGenerateAsync.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ConvenienceShouldNotGenerateAsync();
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="ConvenienceShouldNotGenerate(RequestContext)">
<example>
This sample shows how to call ConvenienceShouldNotGenerate.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ConvenienceShouldNotGenerate();
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="ProtocolShouldNotGenerateConvenienceAsync(RequestContext)">
<example>
This sample shows how to call ProtocolShouldNotGenerateConvenienceAsync.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ProtocolShouldNotGenerateConvenienceAsync();
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="ProtocolShouldNotGenerateConvenience(RequestContext)">
<example>
This sample shows how to call ProtocolShouldNotGenerateConvenience.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ProtocolShouldNotGenerateConvenience();
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="UpdateConvenienceAsync(RequestContext)">
<example>
This sample shows how to call UpdateConvenienceAsync with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.UpdateConvenienceAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="UpdateConvenience(RequestContext)">
<example>
This sample shows how to call UpdateConvenience with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.UpdateConvenience();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
  </members>
</doc>