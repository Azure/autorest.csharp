// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using ConvenienceUpdateInCadl.Models;

namespace ConvenienceUpdateInCadl
{
    // Data plane generated client. CADL project to test convenience method.
    /// <summary> CADL project to test convenience method. </summary>
    public partial class ConvenienceUpdateInCadlClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ConvenienceUpdateInCadlClient. </summary>
        public ConvenienceUpdateInCadlClient() : this(new ConvenienceUpdateInCadlClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ConvenienceUpdateInCadlClient. </summary>
        /// <param name="options"> The options for configuring the client. </param>
        public ConvenienceUpdateInCadlClient(ConvenienceUpdateInCadlClientOptions options)
        {
            options ??= new ConvenienceUpdateInCadlClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _apiVersion = options.Version;
        }

        /// <summary> Initial operation only has protocol method. In the updated version, we add the convenience method. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Model>> InitialProtocolValueAsync(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ConvenienceUpdateInCadlClient.InitialProtocolValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await InitialProtocolAsync(context).ConfigureAwait(false);
                return Response.FromValue(Model.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initial operation only has protocol method. In the updated version, we add the convenience method. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Model> InitialProtocolValue(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ConvenienceUpdateInCadlClient.InitialProtocolValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = InitialProtocol(context);
                return Response.FromValue(Model.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initial operation only has protocol method. In the updated version, we add the convenience method. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/ConvenienceUpdateInCadlClient.xml" path="doc/members/member[@name='InitialProtocolAsync(RequestContext)']/*" />
        public virtual async Task<Response> InitialProtocolAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ConvenienceUpdateInCadlClient.InitialProtocol");
            scope.Start();
            try
            {
                using HttpMessage message = CreateInitialProtocolRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initial operation only has protocol method. In the updated version, we add the convenience method. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/ConvenienceUpdateInCadlClient.xml" path="doc/members/member[@name='InitialProtocol(RequestContext)']/*" />
        public virtual Response InitialProtocol(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ConvenienceUpdateInCadlClient.InitialProtocol");
            scope.Start();
            try
            {
                using HttpMessage message = CreateInitialProtocolRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initial operation has protocol method with optional RequestContext and convenience method. In the updated version, the method signature should not change. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Model>> InitialConvenienceWithOptionalValueAsync(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ConvenienceUpdateInCadlClient.InitialConvenienceWithOptionalValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await InitialConvenienceWithOptionalAsync(context).ConfigureAwait(false);
                return Response.FromValue(Model.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initial operation has protocol method with optional RequestContext and convenience method. In the updated version, the method signature should not change. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Model> InitialConvenienceWithOptionalValue(CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ConvenienceUpdateInCadlClient.InitialConvenienceWithOptionalValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = InitialConvenienceWithOptional(context);
                return Response.FromValue(Model.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initial operation has protocol method with optional RequestContext and convenience method. In the updated version, the method signature should not change. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/ConvenienceUpdateInCadlClient.xml" path="doc/members/member[@name='InitialConvenienceWithOptionalAsync(RequestContext)']/*" />
        public virtual async Task<Response> InitialConvenienceWithOptionalAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ConvenienceUpdateInCadlClient.InitialConvenienceWithOptional");
            scope.Start();
            try
            {
                using HttpMessage message = CreateInitialConvenienceWithOptionalRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initial operation has protocol method with optional RequestContext and convenience method. In the updated version, the method signature should not change. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/ConvenienceUpdateInCadlClient.xml" path="doc/members/member[@name='InitialConvenienceWithOptional(RequestContext)']/*" />
        public virtual Response InitialConvenienceWithOptional(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ConvenienceUpdateInCadlClient.InitialConvenienceWithOptional");
            scope.Start();
            try
            {
                using HttpMessage message = CreateInitialConvenienceWithOptionalRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initial operation has protocol method with required RequestContext and convenience method. In the updated version, the method signature should not change. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Model>> InitialConvenienceWithRequiredAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await InitialConvenienceWithRequiredAsync(context).ConfigureAwait(false);
            return Response.FromValue(Model.FromResponse(response), response);
        }

        /// <summary> Initial operation has protocol method with required RequestContext and convenience method. In the updated version, the method signature should not change. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Model> InitialConvenienceWithRequired(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = InitialConvenienceWithRequired(context);
            return Response.FromValue(Model.FromResponse(response), response);
        }

        /// <summary> Initial operation has protocol method with required RequestContext and convenience method. In the updated version, the method signature should not change. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="context"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/ConvenienceUpdateInCadlClient.xml" path="doc/members/member[@name='InitialConvenienceWithRequiredAsync(RequestContext)']/*" />
        public virtual async Task<Response> InitialConvenienceWithRequiredAsync(RequestContext context)
        {
            Argument.AssertNotNull(context, nameof(context));

            using var scope = ClientDiagnostics.CreateScope("ConvenienceUpdateInCadlClient.InitialConvenienceWithRequired");
            scope.Start();
            try
            {
                using HttpMessage message = CreateInitialConvenienceWithRequiredRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initial operation has protocol method with required RequestContext and convenience method. In the updated version, the method signature should not change. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="context"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/ConvenienceUpdateInCadlClient.xml" path="doc/members/member[@name='InitialConvenienceWithRequired(RequestContext)']/*" />
        public virtual Response InitialConvenienceWithRequired(RequestContext context)
        {
            Argument.AssertNotNull(context, nameof(context));

            using var scope = ClientDiagnostics.CreateScope("ConvenienceUpdateInCadlClient.InitialConvenienceWithRequired");
            scope.Start();
            try
            {
                using HttpMessage message = CreateInitialConvenienceWithRequiredRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initial operation has protocol method marked with convenience method, but the convenience method should not be generated. In the updated version, the method signature should not change. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ConvenienceUpdateInCadlClient.xml" path="doc/members/member[@name='InitialConvenienceShouldNotGenerateAsync(RequestContext)']/*" />
        public virtual async Task<Response> InitialConvenienceShouldNotGenerateAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ConvenienceUpdateInCadlClient.InitialConvenienceShouldNotGenerate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateInitialConvenienceShouldNotGenerateRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initial operation has protocol method marked with convenience method, but the convenience method should not be generated. In the updated version, the method signature should not change. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ConvenienceUpdateInCadlClient.xml" path="doc/members/member[@name='InitialConvenienceShouldNotGenerate(RequestContext)']/*" />
        public virtual Response InitialConvenienceShouldNotGenerate(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ConvenienceUpdateInCadlClient.InitialConvenienceShouldNotGenerate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateInitialConvenienceShouldNotGenerateRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initial operation only has protocol method, but the convenience method should not be generated even it marks the convenience decorator. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ConvenienceUpdateInCadlClient.xml" path="doc/members/member[@name='InitialProtocolShouldNotGenerateConvenienceAsync(RequestContext)']/*" />
        public virtual async Task<Response> InitialProtocolShouldNotGenerateConvenienceAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ConvenienceUpdateInCadlClient.InitialProtocolShouldNotGenerateConvenience");
            scope.Start();
            try
            {
                using HttpMessage message = CreateInitialProtocolShouldNotGenerateConvenienceRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initial operation only has protocol method, but the convenience method should not be generated even it marks the convenience decorator. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ConvenienceUpdateInCadlClient.xml" path="doc/members/member[@name='InitialProtocolShouldNotGenerateConvenience(RequestContext)']/*" />
        public virtual Response InitialProtocolShouldNotGenerateConvenience(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ConvenienceUpdateInCadlClient.InitialProtocolShouldNotGenerateConvenience");
            scope.Start();
            try
            {
                using HttpMessage message = CreateInitialProtocolShouldNotGenerateConvenienceRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> No initial operation methods. In the updated version, we add the protocol method and convenience method. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Model>> UpdateConvenienceAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await UpdateConvenienceAsync(context).ConfigureAwait(false);
            return Response.FromValue(Model.FromResponse(response), response);
        }

        /// <summary> No initial operation methods. In the updated version, we add the protocol method and convenience method. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Model> UpdateConvenience(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = UpdateConvenience(context);
            return Response.FromValue(Model.FromResponse(response), response);
        }

        /// <summary> No initial operation methods. In the updated version, we add the protocol method and convenience method. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="context"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/ConvenienceUpdateInCadlClient.xml" path="doc/members/member[@name='UpdateConvenienceAsync(RequestContext)']/*" />
        public virtual async Task<Response> UpdateConvenienceAsync(RequestContext context)
        {
            Argument.AssertNotNull(context, nameof(context));

            using var scope = ClientDiagnostics.CreateScope("ConvenienceUpdateInCadlClient.UpdateConvenience");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateConvenienceRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> No initial operation methods. In the updated version, we add the protocol method and convenience method. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="context"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/ConvenienceUpdateInCadlClient.xml" path="doc/members/member[@name='UpdateConvenience(RequestContext)']/*" />
        public virtual Response UpdateConvenience(RequestContext context)
        {
            Argument.AssertNotNull(context, nameof(context));

            using var scope = ClientDiagnostics.CreateScope("ConvenienceUpdateInCadlClient.UpdateConvenience");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateConvenienceRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateInitialProtocolRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/initialProtocol", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateInitialConvenienceWithOptionalRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/initialConvenienceWithOptional", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateInitialConvenienceWithRequiredRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/initialConvenienceWithRequired", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateInitialConvenienceShouldNotGenerateRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/initialConvenienceShouldNotGenerate", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateInitialProtocolShouldNotGenerateConvenienceRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/initialProtocolShouldNotGenerateConvenience", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdateConvenienceRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/updateConvenience", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
