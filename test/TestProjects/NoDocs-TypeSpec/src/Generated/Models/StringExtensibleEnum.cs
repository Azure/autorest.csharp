// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace NoDocsTypeSpec.Models
{
    public readonly partial struct StringExtensibleEnum : IEquatable<StringExtensibleEnum>
    {
        private readonly string _value;

        public StringExtensibleEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OneValue = "1";
        private const string TwoValue = "2";
        private const string FourValue = "4";

        public static StringExtensibleEnum One { get; } = new StringExtensibleEnum(OneValue);
        public static StringExtensibleEnum Two { get; } = new StringExtensibleEnum(TwoValue);
        public static StringExtensibleEnum Four { get; } = new StringExtensibleEnum(FourValue);
        public static bool operator ==(StringExtensibleEnum left, StringExtensibleEnum right) => left.Equals(right);
        public static bool operator !=(StringExtensibleEnum left, StringExtensibleEnum right) => !left.Equals(right);
        public static implicit operator StringExtensibleEnum(string value) => new StringExtensibleEnum(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is StringExtensibleEnum other && Equals(other);
        public bool Equals(StringExtensibleEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        public override string ToString() => _value;
    }
}
