// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Globalization;

namespace NoDocsTypeSpec.Models
{
    public readonly partial struct FloatExtensibleEnum : IEquatable<FloatExtensibleEnum>
    {
        private readonly float _value;

        public FloatExtensibleEnum(float value)
        {
            _value = value;
        }

        private const float OneValue = 1F;
        private const float TwoValue = 2F;
        private const float FourValue = 4F;

        public static FloatExtensibleEnum One { get; } = new FloatExtensibleEnum(OneValue);
        public static FloatExtensibleEnum Two { get; } = new FloatExtensibleEnum(TwoValue);
        public static FloatExtensibleEnum Four { get; } = new FloatExtensibleEnum(FourValue);

        internal float ToSerialSingle() => _value;

        public static bool operator ==(FloatExtensibleEnum left, FloatExtensibleEnum right) => left.Equals(right);
        public static bool operator !=(FloatExtensibleEnum left, FloatExtensibleEnum right) => !left.Equals(right);
        public static implicit operator FloatExtensibleEnum(float value) => new FloatExtensibleEnum(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FloatExtensibleEnum other && Equals(other);
        public bool Equals(FloatExtensibleEnum other) => Equals(_value, other._value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value.GetHashCode();
        public override string ToString() => _value.ToString(CultureInfo.InvariantCulture);
    }
}
