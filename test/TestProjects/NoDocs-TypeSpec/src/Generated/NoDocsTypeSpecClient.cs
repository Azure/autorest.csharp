// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using NoDocsTypeSpec.Models;

namespace NoDocsTypeSpec
{
    // Data plane generated client.
    public partial class NoDocsTypeSpecClient
    {
        private const string AuthorizationHeader = "x-ms-api-key";
        private readonly AzureKeyCredential _keyCredential;
        private static readonly string[] AuthorizationScopes = new string[] { "https://api.example.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        internal ClientDiagnostics ClientDiagnostics { get; }

        public virtual HttpPipeline Pipeline => _pipeline;

        protected NoDocsTypeSpecClient()
        {
        }

        public NoDocsTypeSpecClient(Uri endpoint, AzureKeyCredential credential) : this(endpoint, credential, new NoDocsTypeSpecClientOptions())
        {
        }

        public NoDocsTypeSpecClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new NoDocsTypeSpecClientOptions())
        {
        }

        public NoDocsTypeSpecClient(Uri endpoint, AzureKeyCredential credential, NoDocsTypeSpecClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new NoDocsTypeSpecClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _keyCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new AzureKeyCredentialPolicy(_keyCredential, AuthorizationHeader) }, new ResponseClassifier());
            _endpoint = endpoint;
        }

        public NoDocsTypeSpecClient(Uri endpoint, TokenCredential credential, NoDocsTypeSpecClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new NoDocsTypeSpecClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
        }

        public virtual async Task<Response<Thing>> TopActionAsync(DateTimeOffset action, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await TopActionAsync(action, context).ConfigureAwait(false);
            return Response.FromValue(Thing.FromResponse(response), response);
        }

        public virtual Response<Thing> TopAction(DateTimeOffset action, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = TopAction(action, context);
            return Response.FromValue(Thing.FromResponse(response), response);
        }

        public virtual async Task<Response> TopActionAsync(DateTimeOffset action, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.TopAction");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTopActionRequest(action, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual Response TopAction(DateTimeOffset action, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.TopAction");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTopActionRequest(action, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual async Task<Response> TopAction2Async(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.TopAction2");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTopAction2Request(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual Response TopAction2(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.TopAction2");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTopAction2Request(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual async Task<Response> PatchActionAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.PatchAction");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePatchActionRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual Response PatchAction(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.PatchAction");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePatchActionRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual async Task<Response<Thing>> AnonymousBodyAsync(Thing thing, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(thing, nameof(thing));

            using RequestContent content = thing.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await AnonymousBodyAsync(content, context).ConfigureAwait(false);
            return Response.FromValue(Thing.FromResponse(response), response);
        }

        public virtual Response<Thing> AnonymousBody(Thing thing, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(thing, nameof(thing));

            using RequestContent content = thing.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = AnonymousBody(content, context);
            return Response.FromValue(Thing.FromResponse(response), response);
        }

        public virtual async Task<Response> AnonymousBodyAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.AnonymousBody");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAnonymousBodyRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual Response AnonymousBody(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.AnonymousBody");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAnonymousBodyRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual async Task<Response<Friend>> FriendlyModelAsync(Friend friend, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(friend, nameof(friend));

            using RequestContent content = friend.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await FriendlyModelAsync(content, context).ConfigureAwait(false);
            return Response.FromValue(Friend.FromResponse(response), response);
        }

        public virtual Response<Friend> FriendlyModel(Friend friend, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(friend, nameof(friend));

            using RequestContent content = friend.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = FriendlyModel(content, context);
            return Response.FromValue(Friend.FromResponse(response), response);
        }

        public virtual async Task<Response> FriendlyModelAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.FriendlyModel");
            scope.Start();
            try
            {
                using HttpMessage message = CreateFriendlyModelRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual Response FriendlyModel(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.FriendlyModel");
            scope.Start();
            try
            {
                using HttpMessage message = CreateFriendlyModelRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual async Task<Response> AddTimeHeaderAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.AddTimeHeader");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddTimeHeaderRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual Response AddTimeHeader(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.AddTimeHeader");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddTimeHeaderRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual async Task<Response> StringFormatAsync(Guid subscriptionId, ModelWithFormat body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            using RequestContent content = body.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await StringFormatAsync(subscriptionId, content, context).ConfigureAwait(false);
            return response;
        }

        public virtual Response StringFormat(Guid subscriptionId, ModelWithFormat body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            using RequestContent content = body.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = StringFormat(subscriptionId, content, context);
            return response;
        }

        public virtual async Task<Response> StringFormatAsync(Guid subscriptionId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.StringFormat");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStringFormatRequest(subscriptionId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual Response StringFormat(Guid subscriptionId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.StringFormat");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStringFormatRequest(subscriptionId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual async Task<Response<ProjectedModel>> ProjectedNameModelAsync(ProjectedModel projectedModel, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectedModel, nameof(projectedModel));

            using RequestContent content = projectedModel.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await ProjectedNameModelAsync(content, context).ConfigureAwait(false);
            return Response.FromValue(ProjectedModel.FromResponse(response), response);
        }

        public virtual Response<ProjectedModel> ProjectedNameModel(ProjectedModel projectedModel, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectedModel, nameof(projectedModel));

            using RequestContent content = projectedModel.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = ProjectedNameModel(content, context);
            return Response.FromValue(ProjectedModel.FromResponse(response), response);
        }

        public virtual async Task<Response> ProjectedNameModelAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.ProjectedNameModel");
            scope.Start();
            try
            {
                using HttpMessage message = CreateProjectedNameModelRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual Response ProjectedNameModel(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.ProjectedNameModel");
            scope.Start();
            try
            {
                using HttpMessage message = CreateProjectedNameModelRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual async Task<Response<ReturnsAnonymousModelResponse>> ReturnsAnonymousModelAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await ReturnsAnonymousModelAsync(context).ConfigureAwait(false);
            return Response.FromValue(ReturnsAnonymousModelResponse.FromResponse(response), response);
        }

        public virtual Response<ReturnsAnonymousModelResponse> ReturnsAnonymousModel(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = ReturnsAnonymousModel(context);
            return Response.FromValue(ReturnsAnonymousModelResponse.FromResponse(response), response);
        }

        public virtual async Task<Response> ReturnsAnonymousModelAsync(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.ReturnsAnonymousModel");
            scope.Start();
            try
            {
                using HttpMessage message = CreateReturnsAnonymousModelRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual Response ReturnsAnonymousModel(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.ReturnsAnonymousModel");
            scope.Start();
            try
            {
                using HttpMessage message = CreateReturnsAnonymousModelRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        public virtual async Task<Response<bool>> HeadAsBooleanAsync(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.HeadAsBoolean");
            scope.Start();
            try
            {
                using HttpMessage message = CreateHeadAsBooleanRequest(id, context);
                return await _pipeline.ProcessHeadAsBoolMessageAsync(message, ClientDiagnostics, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        public virtual Response<bool> HeadAsBoolean(string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.HeadAsBoolean");
            scope.Start();
            try
            {
                using HttpMessage message = CreateHeadAsBooleanRequest(id, context);
                return _pipeline.ProcessHeadAsBoolMessage(message, ClientDiagnostics, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual async Task<Response> StringBodyAsync(string body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(body, nameof(body));

            using RequestContent content = RequestContentHelper.FromObject(body);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await StringBodyAsync(content, context).ConfigureAwait(false);
            return response;
        }

        public virtual Response StringBody(string body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(body, nameof(body));

            using RequestContent content = RequestContentHelper.FromObject(body);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = StringBody(content, context);
            return response;
        }

        public virtual async Task<Response> StringBodyAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.StringBody");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStringBodyRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual Response StringBody(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.StringBody");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStringBodyRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual async Task<Response> BoolBodyAsync(bool body, CancellationToken cancellationToken = default)
        {
            using RequestContent content = RequestContentHelper.FromObject(body);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await BoolBodyAsync(content, context).ConfigureAwait(false);
            return response;
        }

        public virtual Response BoolBody(bool body, CancellationToken cancellationToken = default)
        {
            using RequestContent content = RequestContentHelper.FromObject(body);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = BoolBody(content, context);
            return response;
        }

        public virtual async Task<Response> BoolBodyAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.BoolBody");
            scope.Start();
            try
            {
                using HttpMessage message = CreateBoolBodyRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual Response BoolBody(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.BoolBody");
            scope.Start();
            try
            {
                using HttpMessage message = CreateBoolBodyRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual async Task<Response> DateTimeBodyAsync(DateTimeOffset body, CancellationToken cancellationToken = default)
        {
            using RequestContent content = RequestContentHelper.FromObject(body);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await DateTimeBodyAsync(content, context).ConfigureAwait(false);
            return response;
        }

        public virtual Response DateTimeBody(DateTimeOffset body, CancellationToken cancellationToken = default)
        {
            using RequestContent content = RequestContentHelper.FromObject(body);
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = DateTimeBody(content, context);
            return response;
        }

        public virtual async Task<Response> DateTimeBodyAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.DateTimeBody");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDateTimeBodyRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual Response DateTimeBody(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.DateTimeBody");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDateTimeBodyRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual async Task<Response<string>> ReturnStringAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await ReturnStringAsync(context).ConfigureAwait(false);
            return Response.FromValue(response.Content.ToObjectFromJson<string>(), response);
        }

        public virtual Response<string> ReturnString(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = ReturnString(context);
            return Response.FromValue(response.Content.ToObjectFromJson<string>(), response);
        }

        public virtual async Task<Response> ReturnStringAsync(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.ReturnString");
            scope.Start();
            try
            {
                using HttpMessage message = CreateReturnStringRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual Response ReturnString(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.ReturnString");
            scope.Start();
            try
            {
                using HttpMessage message = CreateReturnStringRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual async Task<Response<BinaryData>> ReturnUnknownAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await ReturnUnknownAsync(context).ConfigureAwait(false);
            return Response.FromValue(response.Content, response);
        }

        public virtual Response<BinaryData> ReturnUnknown(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = ReturnUnknown(context);
            return Response.FromValue(response.Content, response);
        }

        public virtual async Task<Response> ReturnUnknownAsync(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.ReturnUnknown");
            scope.Start();
            try
            {
                using HttpMessage message = CreateReturnUnknownRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual Response ReturnUnknown(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.ReturnUnknown");
            scope.Start();
            try
            {
                using HttpMessage message = CreateReturnUnknownRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual async Task<Response> RecursiveExtensionAsync(Extension input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            using RequestContent content = input.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await RecursiveExtensionAsync(content, context).ConfigureAwait(false);
            return response;
        }

        public virtual Response RecursiveExtension(Extension input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            using RequestContent content = input.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = RecursiveExtension(content, context);
            return response;
        }

        public virtual async Task<Response> RecursiveExtensionAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.RecursiveExtension");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRecursiveExtensionRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual Response RecursiveExtension(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.RecursiveExtension");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRecursiveExtensionRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual async Task<Response> ThreeLevelRecursiveAsync(Extendible input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            using RequestContent content = input.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await ThreeLevelRecursiveAsync(content, context).ConfigureAwait(false);
            return response;
        }

        public virtual Response ThreeLevelRecursive(Extendible input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            using RequestContent content = input.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = ThreeLevelRecursive(content, context);
            return response;
        }

        public virtual async Task<Response> ThreeLevelRecursiveAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.ThreeLevelRecursive");
            scope.Start();
            try
            {
                using HttpMessage message = CreateThreeLevelRecursiveRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual Response ThreeLevelRecursive(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.ThreeLevelRecursive");
            scope.Start();
            try
            {
                using HttpMessage message = CreateThreeLevelRecursiveRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual async Task<Response> RecursiveModelsAsync(ChildModel input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            using RequestContent content = input.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await RecursiveModelsAsync(content, context).ConfigureAwait(false);
            return response;
        }

        public virtual Response RecursiveModels(ChildModel input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            using RequestContent content = input.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = RecursiveModels(content, context);
            return response;
        }

        public virtual async Task<Response> RecursiveModelsAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.RecursiveModels");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRecursiveModelsRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual Response RecursiveModels(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.RecursiveModels");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRecursiveModelsRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual async Task<Response> ContainSelfModelsAsync(ContainSelf input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            using RequestContent content = input.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await ContainSelfModelsAsync(content, context).ConfigureAwait(false);
            return response;
        }

        public virtual Response ContainSelfModels(ContainSelf input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            using RequestContent content = input.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = ContainSelfModels(content, context);
            return response;
        }

        public virtual async Task<Response> ContainSelfModelsAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.ContainSelfModels");
            scope.Start();
            try
            {
                using HttpMessage message = CreateContainSelfModelsRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual Response ContainSelfModels(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.ContainSelfModels");
            scope.Start();
            try
            {
                using HttpMessage message = CreateContainSelfModelsRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual async Task<Response> EnumParameterAsync(CsProjectedEnum p1, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await EnumParameterAsync(p1.ToSerialSingle(), context).ConfigureAwait(false);
            return response;
        }

        public virtual Response EnumParameter(CsProjectedEnum p1, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = EnumParameter(p1.ToSerialSingle(), context);
            return response;
        }

        public virtual async Task<Response> EnumParameterAsync(float p1, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.EnumParameter");
            scope.Start();
            try
            {
                using HttpMessage message = CreateEnumParameterRequest(p1, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual Response EnumParameter(float p1, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.EnumParameter");
            scope.Start();
            try
            {
                using HttpMessage message = CreateEnumParameterRequest(p1, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual async Task<Response> BodyIsModelWithProjectedEnumAsync(ModelWithProjectedEnum body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            using RequestContent content = body.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await BodyIsModelWithProjectedEnumAsync(content, context).ConfigureAwait(false);
            return response;
        }

        public virtual Response BodyIsModelWithProjectedEnum(ModelWithProjectedEnum body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(body, nameof(body));

            using RequestContent content = body.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = BodyIsModelWithProjectedEnum(content, context);
            return response;
        }

        public virtual async Task<Response> BodyIsModelWithProjectedEnumAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.BodyIsModelWithProjectedEnum");
            scope.Start();
            try
            {
                using HttpMessage message = CreateBodyIsModelWithProjectedEnumRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual Response BodyIsModelWithProjectedEnum(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.BodyIsModelWithProjectedEnum");
            scope.Start();
            try
            {
                using HttpMessage message = CreateBodyIsModelWithProjectedEnumRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual async Task<Response> OptionalDictionaryAsync(IDictionary<string, int> body = null, CancellationToken cancellationToken = default)
        {
            using RequestContent content = body != null ? RequestContentHelper.FromDictionary(body) : null;
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await OptionalDictionaryAsync(content, context).ConfigureAwait(false);
            return response;
        }

        public virtual Response OptionalDictionary(IDictionary<string, int> body = null, CancellationToken cancellationToken = default)
        {
            using RequestContent content = body != null ? RequestContentHelper.FromDictionary(body) : null;
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = OptionalDictionary(content, context);
            return response;
        }

        public virtual async Task<Response> OptionalDictionaryAsync(RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.OptionalDictionary");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOptionalDictionaryRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual Response OptionalDictionary(RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.OptionalDictionary");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOptionalDictionaryRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual async Task<Response> AzureLocationOpAsync(AzureLocation location, AzureLocation regenLocation, AzureLocationModel body = null, CancellationToken cancellationToken = default)
        {
            using RequestContent content = body?.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await AzureLocationOpAsync(location, regenLocation, content, context).ConfigureAwait(false);
            return response;
        }

        public virtual Response AzureLocationOp(AzureLocation location, AzureLocation regenLocation, AzureLocationModel body = null, CancellationToken cancellationToken = default)
        {
            using RequestContent content = body?.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = AzureLocationOp(location, regenLocation, content, context);
            return response;
        }

        public virtual async Task<Response> AzureLocationOpAsync(AzureLocation location, AzureLocation regenLocation, RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.AzureLocationOp");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAzureLocationOpRequest(location, regenLocation, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        public virtual Response AzureLocationOp(AzureLocation location, AzureLocation regenLocation, RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("NoDocsTypeSpecClient.AzureLocationOp");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAzureLocationOpRequest(location, regenLocation, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private Hello _cachedHello;
        private EnumTest _cachedEnumTest;
        private ProtocolAndConvenient _cachedProtocolAndConvenient;
        private Entity _cachedEntity;
        private Glossary _cachedGlossary;

        public virtual Hello GetHelloClient()
        {
            return Volatile.Read(ref _cachedHello) ?? Interlocked.CompareExchange(ref _cachedHello, new Hello(ClientDiagnostics, _pipeline, _keyCredential, _tokenCredential, _endpoint), null) ?? _cachedHello;
        }

        public virtual EnumTest GetEnumTestClient()
        {
            return Volatile.Read(ref _cachedEnumTest) ?? Interlocked.CompareExchange(ref _cachedEnumTest, new EnumTest(ClientDiagnostics, _pipeline, _keyCredential, _tokenCredential, _endpoint), null) ?? _cachedEnumTest;
        }

        public virtual ProtocolAndConvenient GetProtocolAndConvenientClient()
        {
            return Volatile.Read(ref _cachedProtocolAndConvenient) ?? Interlocked.CompareExchange(ref _cachedProtocolAndConvenient, new ProtocolAndConvenient(ClientDiagnostics, _pipeline, _keyCredential, _tokenCredential, _endpoint), null) ?? _cachedProtocolAndConvenient;
        }

        public virtual Entity GetEntityClient()
        {
            return Volatile.Read(ref _cachedEntity) ?? Interlocked.CompareExchange(ref _cachedEntity, new Entity(ClientDiagnostics, _pipeline, _keyCredential, _tokenCredential, _endpoint), null) ?? _cachedEntity;
        }

        public virtual Glossary GetGlossaryClient()
        {
            return Volatile.Read(ref _cachedGlossary) ?? Interlocked.CompareExchange(ref _cachedGlossary, new Glossary(ClientDiagnostics, _pipeline, _keyCredential, _tokenCredential, _endpoint), null) ?? _cachedGlossary;
        }

        internal HttpMessage CreateTopActionRequest(DateTimeOffset action, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/top/", false);
            uri.AppendPath(action, "O", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateTopAction2Request(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/top2", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreatePatchActionRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/patch", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateAnonymousBodyRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/anonymousBody", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateFriendlyModelRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/friendlyName", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateAddTimeHeaderRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Repeatability-First-Sent", DateTimeOffset.Now, "R");
            return message;
        }

        internal HttpMessage CreateStringFormatRequest(Guid subscriptionId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/stringFormat/", false);
            uri.AppendPath(subscriptionId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateProjectedNameModelRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/projectedName", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateReturnsAnonymousModelRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/retunsAnonymousModel", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateHeadAsBooleanRequest(string id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200To300400To500);
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/headAsBoolean/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateStringBodyRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/stringBody", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateBoolBodyRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/boolBody", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDateTimeBodyRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/dateTimeBody", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateReturnStringRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/returnString", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateReturnUnknownRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/returnUnknown", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateRecursiveExtensionRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/recursiveExtension", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateThreeLevelRecursiveRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/threeLevelRecursive", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateRecursiveModelsRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/recursiveModels", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateContainSelfModelsRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/containSelfModels", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateEnumParameterRequest(float p1, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/enumParameter/", false);
            uri.AppendPath(p1, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateBodyIsModelWithProjectedEnumRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/bodyIsModelWithProjectedEnum", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateOptionalDictionaryRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/optionalDictionary", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateAzureLocationOpRequest(AzureLocation location, AzureLocation regenLocation, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/azureLocation", false);
            uri.AppendQuery("location", location, true);
            request.Uri = uri;
            request.Headers.Add("regen-location", regenLocation);
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
        private sealed class ResponseClassifier200To300400To500Override : ResponseClassifier
        {
            public override bool IsErrorResponse(HttpMessage message)
            {
                return message.Response.Status switch
                {
                    >= 200 and < 300 => false,
                    >= 400 and < 500 => false,
                    _ => true
                };
            }
        }

        private static ResponseClassifier _responseClassifier200To300400To500;
        private static ResponseClassifier ResponseClassifier200To300400To500 => _responseClassifier200To300400To500 ??= new ResponseClassifier200To300400To500Override();
    }
}
