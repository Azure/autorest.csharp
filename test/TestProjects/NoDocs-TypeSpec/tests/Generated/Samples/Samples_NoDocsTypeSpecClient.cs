// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using NoDocsTypeSpec.Models;

namespace NoDocsTypeSpec.Samples
{
    public partial class Samples_NoDocsTypeSpecClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_TopAction_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = client.TopAction(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_TopAction_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = await client.TopActionAsync(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_TopAction_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response<Thing> response = client.TopAction(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_TopAction_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response<Thing> response = await client.TopActionAsync(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_TopAction_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = client.TopAction(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_TopAction_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = await client.TopActionAsync(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_TopAction_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response<Thing> response = client.TopAction(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_TopAction_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response<Thing> response = await client.TopActionAsync(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_TopAction2_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = client.TopAction2(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_TopAction2_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = await client.TopAction2Async(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_TopAction2_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = client.TopAction2(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_TopAction2_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = await client.TopAction2Async(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_PatchAction_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                requiredUnion = "<requiredUnion>",
                requiredLiteralString = "accept",
                requiredLiteralInt = 123,
                requiredLiteralFloat = 1.23F,
                requiredLiteralBool = false,
                requiredBadDescription = "<requiredBadDescription>",
                requiredNullableList = new object[]
            {
1234
            },
            });
            Response response = client.PatchAction(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_PatchAction_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                requiredUnion = "<requiredUnion>",
                requiredLiteralString = "accept",
                requiredLiteralInt = 123,
                requiredLiteralFloat = 1.23F,
                requiredLiteralBool = false,
                requiredBadDescription = "<requiredBadDescription>",
                requiredNullableList = new object[]
            {
1234
            },
            });
            Response response = await client.PatchActionAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_PatchAction_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                requiredUnion = "<requiredUnion>",
                requiredLiteralString = "accept",
                requiredLiteralInt = 123,
                requiredLiteralFloat = 1.23F,
                requiredLiteralBool = false,
                optionalLiteralString = "reject",
                optionalLiteralInt = 456,
                optionalLiteralFloat = 4.56F,
                optionalLiteralBool = true,
                requiredBadDescription = "<requiredBadDescription>",
                optionalNullableList = new object[]
            {
1234
            },
                requiredNullableList = new object[]
            {
1234
            },
            });
            Response response = client.PatchAction(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_PatchAction_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                requiredUnion = "<requiredUnion>",
                requiredLiteralString = "accept",
                requiredLiteralInt = 123,
                requiredLiteralFloat = 1.23F,
                requiredLiteralBool = false,
                optionalLiteralString = "reject",
                optionalLiteralInt = 456,
                optionalLiteralFloat = 4.56F,
                optionalLiteralBool = true,
                requiredBadDescription = "<requiredBadDescription>",
                optionalNullableList = new object[]
            {
1234
            },
                requiredNullableList = new object[]
            {
1234
            },
            });
            Response response = await client.PatchActionAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_AnonymousBody_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                requiredUnion = "<requiredUnion>",
                requiredLiteralString = "accept",
                requiredLiteralInt = 123,
                requiredLiteralFloat = 1.23F,
                requiredLiteralBool = false,
                requiredBadDescription = "<requiredBadDescription>",
                requiredNullableList = new object[]
            {
1234
            },
            });
            Response response = client.AnonymousBody(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_AnonymousBody_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                requiredUnion = "<requiredUnion>",
                requiredLiteralString = "accept",
                requiredLiteralInt = 123,
                requiredLiteralFloat = 1.23F,
                requiredLiteralBool = false,
                requiredBadDescription = "<requiredBadDescription>",
                requiredNullableList = new object[]
            {
1234
            },
            });
            Response response = await client.AnonymousBodyAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_AnonymousBody_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Thing thing = new Thing("<name>", BinaryData.FromObjectAsJson("<requiredUnion>"), "<requiredBadDescription>", new int[] { 1234 });
            Response<Thing> response = client.AnonymousBody(thing);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_AnonymousBody_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Thing thing = new Thing("<name>", BinaryData.FromObjectAsJson("<requiredUnion>"), "<requiredBadDescription>", new int[] { 1234 });
            Response<Thing> response = await client.AnonymousBodyAsync(thing);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_AnonymousBody_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                requiredUnion = "<requiredUnion>",
                requiredLiteralString = "accept",
                requiredLiteralInt = 123,
                requiredLiteralFloat = 1.23F,
                requiredLiteralBool = false,
                optionalLiteralString = "reject",
                optionalLiteralInt = 456,
                optionalLiteralFloat = 4.56F,
                optionalLiteralBool = true,
                requiredBadDescription = "<requiredBadDescription>",
                optionalNullableList = new object[]
            {
1234
            },
                requiredNullableList = new object[]
            {
1234
            },
            });
            Response response = client.AnonymousBody(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_AnonymousBody_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                requiredUnion = "<requiredUnion>",
                requiredLiteralString = "accept",
                requiredLiteralInt = 123,
                requiredLiteralFloat = 1.23F,
                requiredLiteralBool = false,
                optionalLiteralString = "reject",
                optionalLiteralInt = 456,
                optionalLiteralFloat = 4.56F,
                optionalLiteralBool = true,
                requiredBadDescription = "<requiredBadDescription>",
                optionalNullableList = new object[]
            {
1234
            },
                requiredNullableList = new object[]
            {
1234
            },
            });
            Response response = await client.AnonymousBodyAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_AnonymousBody_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Thing thing = new Thing("<name>", BinaryData.FromObjectAsJson("<requiredUnion>"), "<requiredBadDescription>", new int[] { 1234 })
            {
                OptionalLiteralString = ThingOptionalLiteralString.Reject,
                OptionalLiteralInt = ThingOptionalLiteralInt._456,
                OptionalLiteralFloat = ThingOptionalLiteralFloat._456,
                OptionalLiteralBool = true,
                OptionalNullableList = { 1234 },
            };
            Response<Thing> response = client.AnonymousBody(thing);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_AnonymousBody_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Thing thing = new Thing("<name>", BinaryData.FromObjectAsJson("<requiredUnion>"), "<requiredBadDescription>", new int[] { 1234 })
            {
                OptionalLiteralString = ThingOptionalLiteralString.Reject,
                OptionalLiteralInt = ThingOptionalLiteralInt._456,
                OptionalLiteralFloat = ThingOptionalLiteralFloat._456,
                OptionalLiteralBool = true,
                OptionalNullableList = { 1234 },
            };
            Response<Thing> response = await client.AnonymousBodyAsync(thing);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_FriendlyModel_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.FriendlyModel(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_FriendlyModel_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.FriendlyModelAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_FriendlyModel_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Friend friend = new Friend("<name>");
            Response<Friend> response = client.FriendlyModel(friend);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_FriendlyModel_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Friend friend = new Friend("<name>");
            Response<Friend> response = await client.FriendlyModelAsync(friend);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_FriendlyModel_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.FriendlyModel(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_FriendlyModel_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.FriendlyModelAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_FriendlyModel_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Friend friend = new Friend("<name>");
            Response<Friend> response = client.FriendlyModel(friend);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_FriendlyModel_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Friend friend = new Friend("<name>");
            Response<Friend> response = await client.FriendlyModelAsync(friend);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_AddTimeHeader_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = client.AddTimeHeader();

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_AddTimeHeader_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = await client.AddTimeHeaderAsync();

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_AddTimeHeader_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = client.AddTimeHeader();

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_AddTimeHeader_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = await client.AddTimeHeaderAsync();

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_ProjectedNameModel_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.ProjectedNameModel(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_ProjectedNameModel_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.ProjectedNameModelAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_ProjectedNameModel_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            ProjectedModel projectedModel = new ProjectedModel("<name>");
            Response<ProjectedModel> response = client.ProjectedNameModel(projectedModel);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_ProjectedNameModel_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            ProjectedModel projectedModel = new ProjectedModel("<name>");
            Response<ProjectedModel> response = await client.ProjectedNameModelAsync(projectedModel);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_ProjectedNameModel_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.ProjectedNameModel(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_ProjectedNameModel_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.ProjectedNameModelAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_ProjectedNameModel_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            ProjectedModel projectedModel = new ProjectedModel("<name>");
            Response<ProjectedModel> response = client.ProjectedNameModel(projectedModel);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_ProjectedNameModel_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            ProjectedModel projectedModel = new ProjectedModel("<name>");
            Response<ProjectedModel> response = await client.ProjectedNameModelAsync(projectedModel);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_ReturnsAnonymousModel_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = client.ReturnsAnonymousModel(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_ReturnsAnonymousModel_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = await client.ReturnsAnonymousModelAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_ReturnsAnonymousModel_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response<ReturnsAnonymousModelResponse> response = client.ReturnsAnonymousModel();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_ReturnsAnonymousModel_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response<ReturnsAnonymousModelResponse> response = await client.ReturnsAnonymousModelAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_ReturnsAnonymousModel_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = client.ReturnsAnonymousModel(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_ReturnsAnonymousModel_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = await client.ReturnsAnonymousModelAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_ReturnsAnonymousModel_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response<ReturnsAnonymousModelResponse> response = client.ReturnsAnonymousModel();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_ReturnsAnonymousModel_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response<ReturnsAnonymousModelResponse> response = await client.ReturnsAnonymousModelAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_HeadAsBoolean_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response<bool> response = client.HeadAsBoolean("<id>");

            Console.WriteLine(response.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_HeadAsBoolean_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response<bool> response = await client.HeadAsBooleanAsync("<id>");

            Console.WriteLine(response.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_HeadAsBoolean_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response<bool> response = client.HeadAsBoolean("<id>");

            Console.WriteLine(response.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_HeadAsBoolean_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response<bool> response = await client.HeadAsBooleanAsync("<id>");

            Console.WriteLine(response.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_StringBody_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create("<body>");
            Response response = client.StringBody(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_StringBody_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create("<body>");
            Response response = await client.StringBodyAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_StringBody_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = client.StringBody("<body>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_StringBody_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = await client.StringBodyAsync("<body>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_StringBody_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create("<body>");
            Response response = client.StringBody(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_StringBody_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create("<body>");
            Response response = await client.StringBodyAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_StringBody_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = client.StringBody("<body>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_StringBody_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = await client.StringBodyAsync("<body>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_BoolBody_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(true);
            Response response = client.BoolBody(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_BoolBody_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(true);
            Response response = await client.BoolBodyAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_BoolBody_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = client.BoolBody(true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_BoolBody_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = await client.BoolBodyAsync(true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_BoolBody_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(true);
            Response response = client.BoolBody(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_BoolBody_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(true);
            Response response = await client.BoolBodyAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_BoolBody_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = client.BoolBody(true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_BoolBody_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = await client.BoolBodyAsync(true);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_DateTimeBody_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create("2022-05-10T18:57:31.2311892Z");
            Response response = client.DateTimeBody(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_DateTimeBody_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create("2022-05-10T18:57:31.2311892Z");
            Response response = await client.DateTimeBodyAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_DateTimeBody_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = client.DateTimeBody(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_DateTimeBody_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = await client.DateTimeBodyAsync(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_DateTimeBody_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create("2022-05-10T18:57:31.2311892Z");
            Response response = client.DateTimeBody(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_DateTimeBody_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create("2022-05-10T18:57:31.2311892Z");
            Response response = await client.DateTimeBodyAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_DateTimeBody_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = client.DateTimeBody(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_DateTimeBody_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = await client.DateTimeBodyAsync(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_ReturnString_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = client.ReturnString(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_ReturnString_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = await client.ReturnStringAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_ReturnString_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response<string> response = client.ReturnString();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_ReturnString_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response<string> response = await client.ReturnStringAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_ReturnString_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = client.ReturnString(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_ReturnString_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = await client.ReturnStringAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_ReturnString_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response<string> response = client.ReturnString();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_ReturnString_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response<string> response = await client.ReturnStringAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_ReturnUnknown_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = client.ReturnUnknown(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_ReturnUnknown_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = await client.ReturnUnknownAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_ReturnUnknown_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response<BinaryData> response = client.ReturnUnknown();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_ReturnUnknown_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response<BinaryData> response = await client.ReturnUnknownAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_ReturnUnknown_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = client.ReturnUnknown(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_ReturnUnknown_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = await client.ReturnUnknownAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_ReturnUnknown_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response<BinaryData> response = client.ReturnUnknown();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_ReturnUnknown_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response<BinaryData> response = await client.ReturnUnknownAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_RecursiveExtension_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                level = 123,
            });
            Response response = client.RecursiveExtension(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_RecursiveExtension_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                level = 123,
            });
            Response response = await client.RecursiveExtensionAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_RecursiveExtension_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Extension input = new Extension(123);
            Response response = client.RecursiveExtension(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_RecursiveExtension_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Extension input = new Extension(123);
            Response response = await client.RecursiveExtensionAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_RecursiveExtension_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                level = 123,
                extension = new object[]
            {
null
            },
            });
            Response response = client.RecursiveExtension(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_RecursiveExtension_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                level = 123,
                extension = new object[]
            {
null
            },
            });
            Response response = await client.RecursiveExtensionAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_RecursiveExtension_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Extension input = new Extension(123)
            {
                Extension = { default },
            };
            Response response = client.RecursiveExtension(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_RecursiveExtension_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Extension input = new Extension(123)
            {
                Extension = { default },
            };
            Response response = await client.RecursiveExtensionAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_ThreeLevelRecursive_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.ThreeLevelRecursive(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_ThreeLevelRecursive_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.ThreeLevelRecursiveAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_ThreeLevelRecursive_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Extendible input = new Extendible();
            Response response = client.ThreeLevelRecursive(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_ThreeLevelRecursive_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Extendible input = new Extendible();
            Response response = await client.ThreeLevelRecursiveAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_ThreeLevelRecursive_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                extension = new object[]
            {
new
{
level = 123,
extension = new object[]
{
null
},
}
            },
            });
            Response response = client.ThreeLevelRecursive(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_ThreeLevelRecursive_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                extension = new object[]
            {
new
{
level = 123,
extension = new object[]
{
null
},
}
            },
            });
            Response response = await client.ThreeLevelRecursiveAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_ThreeLevelRecursive_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Extendible input = new Extendible
            {
                Extension = {new ThereLevelExtension(123)
{
Extension = {default},
}},
            };
            Response response = client.ThreeLevelRecursive(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_ThreeLevelRecursive_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Extendible input = new Extendible
            {
                Extension = {new ThereLevelExtension(123)
{
Extension = {default},
}},
            };
            Response response = await client.ThreeLevelRecursiveAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_RecursiveModels_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                parent = new object[]
            {
new
{
level = 123,
}
            },
                level = 123,
            });
            Response response = client.RecursiveModels(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_RecursiveModels_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                parent = new object[]
            {
new
{
level = 123,
}
            },
                level = 123,
            });
            Response response = await client.RecursiveModelsAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_RecursiveModels_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            ChildModel input = new ChildModel(123, new BaseModel[]
            {
new BaseModel(123)
            });
            Response response = client.RecursiveModels(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_RecursiveModels_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            ChildModel input = new ChildModel(123, new BaseModel[]
            {
new BaseModel(123)
            });
            Response response = await client.RecursiveModelsAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_RecursiveModels_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                parent = new object[]
            {
new
{
level = 123,
}
            },
                level = 123,
            });
            Response response = client.RecursiveModels(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_RecursiveModels_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                parent = new object[]
            {
new
{
level = 123,
}
            },
                level = 123,
            });
            Response response = await client.RecursiveModelsAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_RecursiveModels_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            ChildModel input = new ChildModel(123, new BaseModel[]
            {
new BaseModel(123)
            });
            Response response = client.RecursiveModels(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_RecursiveModels_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            ChildModel input = new ChildModel(123, new BaseModel[]
            {
new BaseModel(123)
            });
            Response response = await client.RecursiveModelsAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_ContainSelfModels_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new { });
            Response response = client.ContainSelfModels(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_ContainSelfModels_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new { });
            Response response = await client.ContainSelfModelsAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_ContainSelfModels_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            ContainSelf input = new ContainSelf(default);
            Response response = client.ContainSelfModels(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_ContainSelfModels_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            ContainSelf input = new ContainSelf(default);
            Response response = await client.ContainSelfModelsAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_ContainSelfModels_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new { });
            Response response = client.ContainSelfModels(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_ContainSelfModels_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new { });
            Response response = await client.ContainSelfModelsAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_ContainSelfModels_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            ContainSelf input = new ContainSelf(default);
            Response response = client.ContainSelfModels(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_ContainSelfModels_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            ContainSelf input = new ContainSelf(default);
            Response response = await client.ContainSelfModelsAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_EnumParameter_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = client.EnumParameter(1.1F);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_EnumParameter_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = await client.EnumParameterAsync(1.1F);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_EnumParameter_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = client.EnumParameter(CsProjectedEnum.CsOne);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_EnumParameter_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = await client.EnumParameterAsync(CsProjectedEnum.CsOne);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_EnumParameter_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = client.EnumParameter(1.1F);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_EnumParameter_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = await client.EnumParameterAsync(1.1F);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_EnumParameter_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = client.EnumParameter(CsProjectedEnum.CsOne);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_EnumParameter_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = await client.EnumParameterAsync(CsProjectedEnum.CsOne);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_BodyIsModelWithProjectedEnum_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                enumProperty = 1.1F,
            });
            Response response = client.BodyIsModelWithProjectedEnum(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_BodyIsModelWithProjectedEnum_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                enumProperty = 1.1F,
            });
            Response response = await client.BodyIsModelWithProjectedEnumAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_BodyIsModelWithProjectedEnum_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            ModelWithProjectedEnum body = new ModelWithProjectedEnum(CsProjectedEnumInModel.CsOne);
            Response response = client.BodyIsModelWithProjectedEnum(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_BodyIsModelWithProjectedEnum_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            ModelWithProjectedEnum body = new ModelWithProjectedEnum(CsProjectedEnumInModel.CsOne);
            Response response = await client.BodyIsModelWithProjectedEnumAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_BodyIsModelWithProjectedEnum_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                enumProperty = 1.1F,
            });
            Response response = client.BodyIsModelWithProjectedEnum(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_BodyIsModelWithProjectedEnum_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                enumProperty = 1.1F,
            });
            Response response = await client.BodyIsModelWithProjectedEnumAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_BodyIsModelWithProjectedEnum_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            ModelWithProjectedEnum body = new ModelWithProjectedEnum(CsProjectedEnumInModel.CsOne);
            Response response = client.BodyIsModelWithProjectedEnum(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_BodyIsModelWithProjectedEnum_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            ModelWithProjectedEnum body = new ModelWithProjectedEnum(CsProjectedEnumInModel.CsOne);
            Response response = await client.BodyIsModelWithProjectedEnumAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_OptionalDictionary_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = null;
            Response response = client.OptionalDictionary(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_OptionalDictionary_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = null;
            Response response = await client.OptionalDictionaryAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_OptionalDictionary_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = client.OptionalDictionary();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_OptionalDictionary_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = await client.OptionalDictionaryAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_OptionalDictionary_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                key = 1234,
            });
            Response response = client.OptionalDictionary(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_OptionalDictionary_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                key = 1234,
            });
            Response response = await client.OptionalDictionaryAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_OptionalDictionary_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = client.OptionalDictionary(body: new Dictionary<string, int>
            {
                ["key"] = 1234
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_OptionalDictionary_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = await client.OptionalDictionaryAsync(body: new Dictionary<string, int>
            {
                ["key"] = 1234
            });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_AzureLocationOp_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = null;
            Response response = client.AzureLocationOp(default, default, content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_AzureLocationOp_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = null;
            Response response = await client.AzureLocationOpAsync(default, default, content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_AzureLocationOp_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = client.AzureLocationOp(default, default);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_AzureLocationOp_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            Response response = await client.AzureLocationOpAsync(default, default);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_AzureLocationOp_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                location = new object(),
            });
            Response response = client.AzureLocationOp(default, default, content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_AzureLocationOp_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                location = new object(),
            });
            Response response = await client.AzureLocationOpAsync(default, default, content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoDocsTypeSpec_AzureLocationOp_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            AzureLocationModel body = new AzureLocationModel(default);
            Response response = client.AzureLocationOp(default, default, body: body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoDocsTypeSpec_AzureLocationOp_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            NoDocsTypeSpecClient client = new NoDocsTypeSpecClient(endpoint, credential);

            AzureLocationModel body = new AzureLocationModel(default);
            Response response = await client.AzureLocationOpAsync(default, default, body: body);
        }
    }
}
