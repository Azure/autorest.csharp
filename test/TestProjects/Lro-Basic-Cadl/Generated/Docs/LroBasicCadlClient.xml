<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="CreateProjectAsync(WaitUntil,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateProjectAsync with required parameters.
<code><![CDATA[
var client = new LroBasicCadlClient();

var data = new {};

var operation = await client.CreateProjectAsync(WaitUntil.Completed, RequestContent.Create(data));

var response = await operation.WaitForCompletionResponseAsync();
Console.WriteLine(response.Status)
]]></code>
This sample shows how to call CreateProjectAsync with all parameters and request content.
<code><![CDATA[
var client = new LroBasicCadlClient();

var data = new {
    description = "<description>",
    name = "<name>",
};

var operation = await client.CreateProjectAsync(WaitUntil.Completed, RequestContent.Create(data));

var response = await operation.WaitForCompletionResponseAsync();
Console.WriteLine(response.Status)
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Project</c>:
<code>{
  id: string, # Required.
  description: string, # Optional.
  name: string, # Optional.
}
</code>

</remarks>
    </member>
    <member name="CreateProject(WaitUntil,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateProject with required parameters.
<code><![CDATA[
var client = new LroBasicCadlClient();

var data = new {};

var operation = client.CreateProject(WaitUntil.Completed, RequestContent.Create(data));

var response = operation.WaitForCompletionResponse();
Console.WriteLine(response.Status)
]]></code>
This sample shows how to call CreateProject with all parameters and request content.
<code><![CDATA[
var client = new LroBasicCadlClient();

var data = new {
    description = "<description>",
    name = "<name>",
};

var operation = client.CreateProject(WaitUntil.Completed, RequestContent.Create(data));

var response = operation.WaitForCompletionResponse();
Console.WriteLine(response.Status)
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Project</c>:
<code>{
  id: string, # Required.
  description: string, # Optional.
  name: string, # Optional.
}
</code>

</remarks>
    </member>
    <member name="UpdateProjectAsync(WaitUntil,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateProjectAsync with required parameters and parse the result.
<code><![CDATA[
var client = new LroBasicCadlClient();

var data = new {};

var operation = await client.UpdateProjectAsync(WaitUntil.Completed, RequestContent.Create(data));

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
This sample shows how to call UpdateProjectAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var client = new LroBasicCadlClient();

var data = new {
    description = "<description>",
    name = "<name>",
};

var operation = await client.UpdateProjectAsync(WaitUntil.Completed, RequestContent.Create(data));

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Project</c>:
<code>{
  id: string, # Required.
  description: string, # Optional.
  name: string, # Optional.
}
</code>

Response Body:

Schema for <c>Project</c>:
<code>{
  id: string, # Required.
  description: string, # Optional.
  name: string, # Optional.
}
</code>

</remarks>
    </member>
    <member name="UpdateProject(WaitUntil,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateProject with required parameters and parse the result.
<code><![CDATA[
var client = new LroBasicCadlClient();

var data = new {};

var operation = client.UpdateProject(WaitUntil.Completed, RequestContent.Create(data));

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
This sample shows how to call UpdateProject with all parameters and request content, and how to parse the result.
<code><![CDATA[
var client = new LroBasicCadlClient();

var data = new {
    description = "<description>",
    name = "<name>",
};

var operation = client.UpdateProject(WaitUntil.Completed, RequestContent.Create(data));

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Project</c>:
<code>{
  id: string, # Required.
  description: string, # Optional.
  name: string, # Optional.
}
</code>

Response Body:

Schema for <c>Project</c>:
<code>{
  id: string, # Required.
  description: string, # Optional.
  name: string, # Optional.
}
</code>

</remarks>
    </member>
  </members>
</doc>