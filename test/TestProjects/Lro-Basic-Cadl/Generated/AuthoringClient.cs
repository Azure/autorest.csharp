// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace LroBasicCadl
{
    // Data plane generated client. The Authoring service client.
    /// <summary> The Authoring service client. </summary>
    public partial class AuthoringClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of AuthoringClient. </summary>
        public AuthoringClient() : this(new AuthoringClientOptions())
        {
        }

        /// <summary> Initializes a new instance of AuthoringClient. </summary>
        /// <param name="options"> The options for configuring the client. </param>
        public AuthoringClient(AuthoringClientOptions options)
        {
            options ??= new AuthoringClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _apiVersion = options.Version;
        }

        /// <summary> Get a OperationStatusResource. </summary>
        /// <param name="id"> The String to use. </param>
        /// <param name="operationId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="operationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> or <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateProjectStatusMonitorAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new AuthoringClient();
        /// 
        /// Response response = await client.CreateProjectStatusMonitorAsync("<id>", "<operationId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("operationId").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>OperationStatusResource</c>:
        /// <code>{
        ///   id: string, # Required.
        ///   status: &quot;InProgress&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot;, # Required.
        ///   error: {
        ///     code: string, # Required.
        ///     message: string, # Required.
        ///     target: string, # Optional.
        ///     details: [Error], # Required.
        ///     innererror: {
        ///       code: string, # Required.
        ///       innererror: InnerError, # Optional.
        ///     }, # Optional.
        ///   }, # Optional.
        ///   operationId: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateProjectStatusMonitorAsync(string id, string operationId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            using var scope = ClientDiagnostics.CreateScope("AuthoringClient.CreateProjectStatusMonitor");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateProjectStatusMonitorRequest(id, operationId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a OperationStatusResource. </summary>
        /// <param name="id"> The String to use. </param>
        /// <param name="operationId"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="operationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="id"/> or <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateProjectStatusMonitor with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new AuthoringClient();
        /// 
        /// Response response = client.CreateProjectStatusMonitor("<id>", "<operationId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("operationId").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>OperationStatusResource</c>:
        /// <code>{
        ///   id: string, # Required.
        ///   status: &quot;InProgress&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot;, # Required.
        ///   error: {
        ///     code: string, # Required.
        ///     message: string, # Required.
        ///     target: string, # Optional.
        ///     details: [Error], # Required.
        ///     innererror: {
        ///       code: string, # Required.
        ///       innererror: InnerError, # Optional.
        ///     }, # Optional.
        ///   }, # Optional.
        ///   operationId: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateProjectStatusMonitor(string id, string operationId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(id, nameof(id));
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            using var scope = ClientDiagnostics.CreateScope("AuthoringClient.CreateProjectStatusMonitor");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateProjectStatusMonitorRequest(id, operationId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a Project. </summary>
        /// <param name="project"> The Project to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="project"/> is null. </exception>
        public virtual async Task<Response> CreateProjectAsync(Project project, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(project, nameof(project));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await CreateProjectAsync(project.ToRequestContent(), context).ConfigureAwait(false);
            return response;
        }

        /// <summary> Creates a Project. </summary>
        /// <param name="project"> The Project to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="project"/> is null. </exception>
        public virtual Response CreateProject(Project project, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(project, nameof(project));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = CreateProject(project.ToRequestContent(), context);
            return response;
        }

        /// <summary> Creates a Project. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CreateProjectAsync.
        /// <code><![CDATA[
        /// var client = new AuthoringClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.CreateProjectAsync(RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call CreateProjectAsync with all request content.
        /// <code><![CDATA[
        /// var client = new AuthoringClient();
        /// 
        /// var data = new {
        ///     description = "<description>",
        ///     name = "<name>",
        /// };
        /// 
        /// Response response = await client.CreateProjectAsync(RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Project</c>:
        /// <code>{
        ///   id: string, # Required.
        ///   description: string, # Optional.
        ///   name: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateProjectAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("AuthoringClient.CreateProject");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateProjectRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a Project. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CreateProject.
        /// <code><![CDATA[
        /// var client = new AuthoringClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.CreateProject(RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call CreateProject with all request content.
        /// <code><![CDATA[
        /// var client = new AuthoringClient();
        /// 
        /// var data = new {
        ///     description = "<description>",
        ///     name = "<name>",
        /// };
        /// 
        /// Response response = client.CreateProject(RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Project</c>:
        /// <code>{
        ///   id: string, # Required.
        ///   description: string, # Optional.
        ///   name: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateProject(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("AuthoringClient.CreateProject");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateProjectRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="project"> The Project to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="project"/> is null. </exception>
        public virtual async Task<Response<Project>> UpdateProjectAsync(Project project, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(project, nameof(project));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await UpdateProjectAsync(project.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(Project.FromResponse(response), response);
        }

        /// <param name="project"> The Project to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="project"/> is null. </exception>
        public virtual Response<Project> UpdateProject(Project project, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(project, nameof(project));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = UpdateProject(project.ToRequestContent(), context);
            return Response.FromValue(Project.FromResponse(response), response);
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call UpdateProjectAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new AuthoringClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.UpdateProjectAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// ]]></code>
        /// This sample shows how to call UpdateProjectAsync with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new AuthoringClient();
        /// 
        /// var data = new {
        ///     description = "<description>",
        ///     name = "<name>",
        /// };
        /// 
        /// Response response = await client.UpdateProjectAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Project</c>:
        /// <code>{
        ///   id: string, # Required.
        ///   description: string, # Optional.
        ///   name: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Project</c>:
        /// <code>{
        ///   id: string, # Required.
        ///   description: string, # Optional.
        ///   name: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> UpdateProjectAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("AuthoringClient.UpdateProject");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateProjectRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call UpdateProject and parse the result.
        /// <code><![CDATA[
        /// var client = new AuthoringClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.UpdateProject(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// ]]></code>
        /// This sample shows how to call UpdateProject with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new AuthoringClient();
        /// 
        /// var data = new {
        ///     description = "<description>",
        ///     name = "<name>",
        /// };
        /// 
        /// Response response = client.UpdateProject(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Project</c>:
        /// <code>{
        ///   id: string, # Required.
        ///   description: string, # Optional.
        ///   name: string, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Project</c>:
        /// <code>{
        ///   id: string, # Required.
        ///   description: string, # Optional.
        ///   name: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response UpdateProject(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("AuthoringClient.UpdateProject");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateProjectRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateCreateProjectStatusMonitorRequest(string id, string operationId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/projects/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/operations/", false);
            uri.AppendPath(operationId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateProjectRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier201);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/projects", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateUpdateProjectRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier201;
        private static ResponseClassifier ResponseClassifier201 => _responseClassifier201 ??= new StatusCodeClassifier(stackalloc ushort[] { 201 });
    }
}
