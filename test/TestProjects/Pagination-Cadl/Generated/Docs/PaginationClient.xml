<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetPaginationLedgerEntriesAsync(RequestContext)">
<example>
This sample shows how to call GetPaginationLedgerEntriesAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PaginationClient(endpoint, credential);

await foreach (var data in client.GetPaginationLedgerEntriesAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("contents").ToString());
    Console.WriteLine(result.GetProperty("collectionId").ToString());
    Console.WriteLine(result.GetProperty("transactionId").ToString());
}
]]></code>
</example>
<remarks>
A collection id may optionally be specified. Only entries in the specified (or default) collection will be returned.

Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>Array</c>:
<code>{
  contents: string, # Required.
  collectionId: string, # Required.
  transactionId: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetPaginationLedgerEntries(RequestContext)">
<example>
This sample shows how to call GetPaginationLedgerEntries and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PaginationClient(endpoint, credential);

foreach (var data in client.GetPaginationLedgerEntries())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("contents").ToString());
    Console.WriteLine(result.GetProperty("collectionId").ToString());
    Console.WriteLine(result.GetProperty("transactionId").ToString());
}
]]></code>
</example>
<remarks>
A collection id may optionally be specified. Only entries in the specified (or default) collection will be returned.

Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>Array</c>:
<code>{
  contents: string, # Required.
  collectionId: string, # Required.
  transactionId: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetLedgerEntriesAsync(RequestContext)">
<example>
This sample shows how to call GetLedgerEntriesAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PaginationClient(endpoint, credential);

await foreach (var data in client.GetLedgerEntriesAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("contents").ToString());
    Console.WriteLine(result.GetProperty("collectionId").ToString());
    Console.WriteLine(result.GetProperty("transactionId").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>Array</c>:
<code>{
  contents: string, # Required.
  collectionId: string, # Required.
  transactionId: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetLedgerEntries(RequestContext)">
<example>
This sample shows how to call GetLedgerEntries and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PaginationClient(endpoint, credential);

foreach (var data in client.GetLedgerEntries())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("contents").ToString());
    Console.WriteLine(result.GetProperty("collectionId").ToString());
    Console.WriteLine(result.GetProperty("transactionId").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>Array</c>:
<code>{
  contents: string, # Required.
  collectionId: string, # Required.
  transactionId: string, # Required.
}
</code>

</remarks>
    </member>
  </members>
</doc>