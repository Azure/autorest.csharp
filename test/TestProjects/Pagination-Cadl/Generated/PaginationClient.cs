// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Pagination.Models;

namespace Pagination
{
    // Data plane generated client.
    /// <summary> The Pagination service client. </summary>
    public partial class PaginationClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://pagination.azure.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of PaginationClient for mocking. </summary>
        protected PaginationClient()
        {
        }

        /// <summary> Initializes a new instance of PaginationClient. </summary>
        /// <param name="endpoint"> The Uri to use. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public PaginationClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new PaginationClientOptions())
        {
        }

        /// <summary> Initializes a new instance of PaginationClient. </summary>
        /// <param name="endpoint"> The Uri to use. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public PaginationClient(Uri endpoint, TokenCredential credential, PaginationClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new PaginationClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Gets ledger entries from a collection corresponding to a range. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> A collection id may optionally be specified. Only entries in the specified (or default) collection will be returned. </remarks>
        public virtual AsyncPageable<LedgerEntry> GetPaginationLedgerEntryValuesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<LedgerEntry>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ClientDiagnostics.CreateScope("PaginationClient.GetPaginationLedgerEntryValues");
                scope.Start();
                try
                {
                    var response = await GetPaginationLedgerEntriesFirstPageAsync(cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<LedgerEntry>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ClientDiagnostics.CreateScope("PaginationClient.GetPaginationLedgerEntryValues");
                scope.Start();
                try
                {
                    var response = await GetPaginationLedgerEntriesNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets ledger entries from a collection corresponding to a range. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> A collection id may optionally be specified. Only entries in the specified (or default) collection will be returned. </remarks>
        public virtual Pageable<LedgerEntry> GetPaginationLedgerEntryValues(CancellationToken cancellationToken = default)
        {
            Page<LedgerEntry> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ClientDiagnostics.CreateScope("PaginationClient.GetPaginationLedgerEntryValues");
                scope.Start();
                try
                {
                    var response = GetPaginationLedgerEntriesFirstPage(cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<LedgerEntry> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ClientDiagnostics.CreateScope("PaginationClient.GetPaginationLedgerEntryValues");
                scope.Start();
                try
                {
                    var response = GetPaginationLedgerEntriesNextPage(nextLink, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets ledger entries from a collection corresponding to a range. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> A collection id may optionally be specified. Only entries in the specified (or default) collection will be returned. </remarks>
        private async Task<Response<CustomPage>> GetPaginationLedgerEntriesFirstPageAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            using var message = CreateGetPaginationLedgerEntriesRequest(context);
            Response response = await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            return Response.FromValue(CustomPage.FromResponse(response), response);
        }

        /// <summary> Gets ledger entries from a collection corresponding to a range. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> A collection id may optionally be specified. Only entries in the specified (or default) collection will be returned. </remarks>
        private Response<CustomPage> GetPaginationLedgerEntriesFirstPage(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            using var message = CreateGetPaginationLedgerEntriesRequest(context);
            Response response = _pipeline.ProcessMessage(message, context);
            return Response.FromValue(CustomPage.FromResponse(response), response);
        }

        /// <summary> Gets ledger entries from a collection corresponding to a range. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        /// <remarks> A collection id may optionally be specified. Only entries in the specified (or default) collection will be returned. </remarks>
        private async Task<Response<CustomPage>> GetPaginationLedgerEntriesNextPageAsync(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            using var message = CreateGetPaginationLedgerEntriesNextPageRequest(nextLink, context);
            Response response = await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            return Response.FromValue(CustomPage.FromResponse(response), response);
        }

        /// <summary> Gets ledger entries from a collection corresponding to a range. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        /// <remarks> A collection id may optionally be specified. Only entries in the specified (or default) collection will be returned. </remarks>
        private Response<CustomPage> GetPaginationLedgerEntriesNextPage(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            using var message = CreateGetPaginationLedgerEntriesNextPageRequest(nextLink, context);
            Response response = _pipeline.ProcessMessage(message, context);
            return Response.FromValue(CustomPage.FromResponse(response), response);
        }

        /// <summary> List upload detail for the discovery resource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<LedgerEntry> GetLedgerEntryValuesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<LedgerEntry>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ClientDiagnostics.CreateScope("PaginationClient.GetLedgerEntryValues");
                scope.Start();
                try
                {
                    var response = await GetLedgerEntriesFirstPageAsync(cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<LedgerEntry>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ClientDiagnostics.CreateScope("PaginationClient.GetLedgerEntryValues");
                scope.Start();
                try
                {
                    var response = await GetLedgerEntriesNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List upload detail for the discovery resource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<LedgerEntry> GetLedgerEntryValues(CancellationToken cancellationToken = default)
        {
            Page<LedgerEntry> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ClientDiagnostics.CreateScope("PaginationClient.GetLedgerEntryValues");
                scope.Start();
                try
                {
                    var response = GetLedgerEntriesFirstPage(cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<LedgerEntry> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ClientDiagnostics.CreateScope("PaginationClient.GetLedgerEntryValues");
                scope.Start();
                try
                {
                    var response = GetLedgerEntriesNextPage(nextLink, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List upload detail for the discovery resource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        private async Task<Response<PagedLedgerEntry>> GetLedgerEntriesFirstPageAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            using var message = CreateGetLedgerEntriesRequest(context);
            Response response = await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            return Response.FromValue(PagedLedgerEntry.FromResponse(response), response);
        }

        /// <summary> List upload detail for the discovery resource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        private Response<PagedLedgerEntry> GetLedgerEntriesFirstPage(CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            using var message = CreateGetLedgerEntriesRequest(context);
            Response response = _pipeline.ProcessMessage(message, context);
            return Response.FromValue(PagedLedgerEntry.FromResponse(response), response);
        }

        /// <summary> List upload detail for the discovery resource. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        private async Task<Response<PagedLedgerEntry>> GetLedgerEntriesNextPageAsync(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            using var message = CreateGetLedgerEntriesNextPageRequest(nextLink, context);
            Response response = await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            return Response.FromValue(PagedLedgerEntry.FromResponse(response), response);
        }

        /// <summary> List upload detail for the discovery resource. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        private Response<PagedLedgerEntry> GetLedgerEntriesNextPage(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            RequestContext context = FromCancellationToken(cancellationToken);
            using var message = CreateGetLedgerEntriesNextPageRequest(nextLink, context);
            Response response = _pipeline.ProcessMessage(message, context);
            return Response.FromValue(PagedLedgerEntry.FromResponse(response), response);
        }

        /// <summary> Gets ledger entries from a collection corresponding to a range. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/PaginationClient.xml" path="doc/members/member[@name='GetPaginationLedgerEntriesAsync(RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetPaginationLedgerEntriesAsync(RequestContext context = null)
        {
            return GetPaginationLedgerEntriesImplementationAsync("PaginationClient.GetPaginationLedgerEntries", context);
        }

        private AsyncPageable<BinaryData> GetPaginationLedgerEntriesImplementationAsync(string diagnosticsScopeName, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetPaginationLedgerEntriesRequest(context)
                        : CreateGetPaginationLedgerEntriesNextPageRequest(nextLink, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Gets ledger entries from a collection corresponding to a range. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/PaginationClient.xml" path="doc/members/member[@name='GetPaginationLedgerEntries(RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetPaginationLedgerEntries(RequestContext context = null)
        {
            return GetPaginationLedgerEntriesImplementation("PaginationClient.GetPaginationLedgerEntries", context);
        }

        private Pageable<BinaryData> GetPaginationLedgerEntriesImplementation(string diagnosticsScopeName, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetPaginationLedgerEntriesRequest(context)
                        : CreateGetPaginationLedgerEntriesNextPageRequest(nextLink, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> List upload detail for the discovery resource. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/PaginationClient.xml" path="doc/members/member[@name='GetLedgerEntriesAsync(RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetLedgerEntriesAsync(RequestContext context = null)
        {
            return GetLedgerEntriesImplementationAsync("PaginationClient.GetLedgerEntries", context);
        }

        private AsyncPageable<BinaryData> GetLedgerEntriesImplementationAsync(string diagnosticsScopeName, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetLedgerEntriesRequest(context)
                        : CreateGetLedgerEntriesNextPageRequest(nextLink, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> List upload detail for the discovery resource. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/PaginationClient.xml" path="doc/members/member[@name='GetLedgerEntries(RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetLedgerEntries(RequestContext context = null)
        {
            return GetLedgerEntriesImplementation("PaginationClient.GetLedgerEntries", context);
        }

        private Pageable<BinaryData> GetLedgerEntriesImplementation(string diagnosticsScopeName, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetLedgerEntriesRequest(context)
                        : CreateGetLedgerEntriesNextPageRequest(nextLink, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Gets ledger entries from a collection corresponding to a range. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> A collection id may optionally be specified. Only entries in the specified (or default) collection will be returned. </remarks>
        public virtual async Task<Operation<AsyncPageable<LedgerEntry>>> GetLroPaginationLedgerEntryValuesAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            using var scope = ClientDiagnostics.CreateScope("PaginationClient.GetLroPaginationLedgerEntryValues");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetLroPaginationLedgerEntriesRequest(context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "PaginationClient.GetLroPaginationLedgerEntryValues", OperationFinalStateVia.Location, context, waitUntil, CreateEnumerableAsync).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }

            async IAsyncEnumerable<Page<LedgerEntry>> CreateEnumerableAsync(Response response, string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                if (nextLink == null)
                {
                    var result = CustomPage.FromResponse(response);
                    var page = Page.FromValues(result.Value, result.NextLink, response);
                    nextLink = page.ContinuationToken;
                    yield return page;
                }
                while (!string.IsNullOrEmpty(nextLink))
                {
                    var message = CreateGetLroPaginationLedgerEntriesNextPageRequest(nextLink, context);
                    response = await _pipeline.ProcessMessageAsync(message, context, cancellationToken).ConfigureAwait(false);
                    var result = CustomPage.FromResponse(response);
                    var page = Page.FromValues(result.Value, result.NextLink, response);
                    nextLink = page.ContinuationToken;
                    yield return page;
                }
            }
        }
        /// <summary> Gets ledger entries from a collection corresponding to a range. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="AsyncPageable{T}"/> containing a list of <see cref="BinaryData"/> objects once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <include file="Docs/PaginationClient.xml" path="doc/members/member[@name='GetLroPaginationLedgerEntriesAsync(WaitUntil,RequestContext)']/*" />
        public virtual async Task<Operation<AsyncPageable<BinaryData>>> GetLroPaginationLedgerEntriesAsync(WaitUntil waitUntil, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PaginationClient.GetLroPaginationLedgerEntries");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetLroPaginationLedgerEntriesRequest(context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "PaginationClient.GetLroPaginationLedgerEntries", OperationFinalStateVia.Location, context, waitUntil, CreateEnumerableAsync).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }

            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(Response response, string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                Page<BinaryData> page;
                if (nextLink == null)
                {
                    page = LowLevelPageableHelpers.BuildPageForResponse(response, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                }
                while (!string.IsNullOrEmpty(nextLink))
                {
                    var message = CreateGetLroPaginationLedgerEntriesNextPageRequest(nextLink, context);
                    page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                }
            }
        }

        /// <summary> Gets ledger entries from a collection corresponding to a range. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> A collection id may optionally be specified. Only entries in the specified (or default) collection will be returned. </remarks>
        public virtual Operation<Pageable<LedgerEntry>> GetLroPaginationLedgerEntryValues(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            using var scope = ClientDiagnostics.CreateScope("PaginationClient.GetLroPaginationLedgerEntryValues");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetLroPaginationLedgerEntriesRequest(context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "PaginationClient.GetLroPaginationLedgerEntryValues", OperationFinalStateVia.Location, context, waitUntil, CreateEnumerable);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }

            IEnumerable<Page<LedgerEntry>> CreateEnumerable(Response response, string nextLink, int? pageSizeHint)
            {
                if (nextLink == null)
                {
                    var result = CustomPage.FromResponse(response);
                    var page = Page.FromValues(result.Value, result.NextLink, response);
                    nextLink = page.ContinuationToken;
                    yield return page;
                }
                while (!string.IsNullOrEmpty(nextLink))
                {
                    var message = CreateGetLroPaginationLedgerEntriesNextPageRequest(nextLink, context);
                    response = _pipeline.ProcessMessage(message, context);
                    var result = CustomPage.FromResponse(response);
                    var page = Page.FromValues(result.Value, result.NextLink, response);
                    nextLink = page.ContinuationToken;
                    yield return page;
                }
            }
        }
        /// <summary> Gets ledger entries from a collection corresponding to a range. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="Pageable{T}"/> containing a list of <see cref="BinaryData"/> objects once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <include file="Docs/PaginationClient.xml" path="doc/members/member[@name='GetLroPaginationLedgerEntries(WaitUntil,RequestContext)']/*" />
        public virtual Operation<Pageable<BinaryData>> GetLroPaginationLedgerEntries(WaitUntil waitUntil, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PaginationClient.GetLroPaginationLedgerEntries");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetLroPaginationLedgerEntriesRequest(context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "PaginationClient.GetLroPaginationLedgerEntries", OperationFinalStateVia.Location, context, waitUntil, CreateEnumerable);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }

            IEnumerable<Page<BinaryData>> CreateEnumerable(Response response, string nextLink, int? pageSizeHint)
            {
                Page<BinaryData> page;
                if (nextLink == null)
                {
                    page = LowLevelPageableHelpers.BuildPageForResponse(response, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                }
                while (!string.IsNullOrEmpty(nextLink))
                {
                    var message = CreateGetLroPaginationLedgerEntriesNextPageRequest(nextLink, context);
                    page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                }
            }
        }

        internal HttpMessage CreateGetPaginationLedgerEntriesRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/app/transactions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetLedgerEntriesRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/app/adp/transactions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetLroPaginationLedgerEntriesRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/app/lro/transactions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetPaginationLedgerEntriesNextPageRequest(string nextLink, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetLedgerEntriesNextPageRequest(string nextLink, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetLroPaginationLedgerEntriesNextPageRequest(string nextLink, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
