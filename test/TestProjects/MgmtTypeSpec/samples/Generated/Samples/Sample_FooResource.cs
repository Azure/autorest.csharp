// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using MgmtTypeSpec.Models;

namespace MgmtTypeSpec.Samples
{
    public partial class Sample_FooResource
    {
        // Create a foo
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateAFoo()
        {
            // Generated from example definition: 2024-05-01/Foos_CreateOrUpdate.json
            // this example is just showing the usage of "Foo_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FooResource created on azure
            // for more information of creating FooResource, please refer to the document of FooResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myRg";
            string fooName = "myFoo";
            ResourceIdentifier fooResourceId = FooResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fooName);
            FooResource foo = client.GetFooResource(fooResourceId);

            // invoke the operation
            FooData data = new FooData(new AzureLocation("placeholder"))
            {
                Properties = new FooProperties()
                {
                    ServiceUri = new Uri("https://myService.com"),
                    Something = "for test only",
                    BoolValue = true,
                    FloatValue = 1.2F,
                    DoubleValue = 1.2,
                },
            };
            ArmOperation<FooResource> lro = await foo.UpdateAsync(WaitUntil.Completed, data);
            FooResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FooData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get a foo
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetAFoo()
        {
            // Generated from example definition: 2024-05-01/Foos_Get.json
            // this example is just showing the usage of "Foo_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FooResource created on azure
            // for more information of creating FooResource, please refer to the document of FooResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myRg";
            string fooName = "myFoo";
            ResourceIdentifier fooResourceId = FooResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fooName);
            FooResource foo = client.GetFooResource(fooResourceId);

            // invoke the operation
            FooResource result = await foo.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FooData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
