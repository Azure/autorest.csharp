// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure;
using Azure.Core;

namespace ConfidentialLedger
{
    public partial class TransactionReceipt : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("receipt");
            writer.WriteObjectValue(Receipt);
            writer.WritePropertyName("state");
            writer.WriteStringValue(State.ToString());
            writer.WritePropertyName("transactionId");
            writer.WriteStringValue(TransactionId);
            writer.WriteEndObject();
        }

        internal static TransactionReceipt DeserializeTransactionReceipt(JsonElement element)
        {
            ReceiptContents receipt = default;
            LedgerQueryState state = default;
            string transactionId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("receipt"))
                {
                    receipt = ReceiptContents.DeserializeReceiptContents(property.Value);
                    continue;
                }
                if (property.NameEquals("state"))
                {
                    state = new LedgerQueryState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("transactionId"))
                {
                    transactionId = property.Value.GetString();
                    continue;
                }
            }
            return new TransactionReceipt(receipt, state, transactionId);
        }

        internal RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }

        internal static TransactionReceipt FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeTransactionReceipt(document.RootElement);
        }
    }
}
