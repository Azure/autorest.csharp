import "@cadl-lang/rest";
import "@cadl-lang/versioning";
import "@azure-tools/cadl-azure-core";
import "@azure-tools/cadl-autorest";
import "@cadl-lang/openapi";

using Cadl.Http;
using Cadl.Rest;
using Cadl.Versioning;
using Azure.Core;
using OpenAPI;

//
// ** Service description **
//

// TODO: Use `Uri` type when available: https://github.com/microsoft/cadl/issues/654
@serviceTitle("Confidential Ledger Service")
@serviceVersion("2022-05-13")
@versionedDependency(Azure.Core.Versions.v1_0_Preview_1)
@server(
  "{ledgerUri}",
  "Confidential Ledger Service",
  {
    ledgerUri: string,
  }
)
@useAuth(OAuth2Auth<[AuthFlow]>)
namespace Azure.Security.ConfidentialLedger;

model AuthFlow {
    type: OAuth2FlowType.clientCredentials;
    tokenUrl: "https://confidential-ledger.azure.com/token";
    refreshUrl: "https://confidential-ledger.azure.com/refresh";
    scopes: [
        "https://confidential-ledger.azure.com/.default"
    ]
}

//
// ** Parameter descriptions **
//

@doc("A unique identifier for the state of the ledger. If returned as part of a LedgerEntry, it indicates the state from which the entry was read.")
model TransactionId is string;

model CollectionIdParameter {
  @query
  @doc("The collection id.")
  collectionId?: string;
}

//
// ** Model descriptions **
//

@resource("collections")
@doc("Identifier for collections.")
model Collection {
  @key
  collectionId: string;
}

@resource("transactions")
model LedgerEntry {
  @doc("Contents of the ledger entry.")
  contents: string;

  @visibility("read")
  collectionId: string;

  @key
  @visibility("read")
  // @doc("A unique identifier for the state of the ledger. If returned as part of a LedgerEntry, it indicates the state from which the entry was read.")
  transactionId: string;
}

// TODO: No way to set "x-ms-enum.name" right now
@doc("Represents an assignable role.")
@knownValues(LedgerUserRoleKV)
model LedgerUserRole is string {};

enum LedgerUserRoleKV {
  Administrator,
  Contributor,
  Reader,
}

@resource("users")
@doc("Details about a Confidential ledger user.")
model LedgerUser {
  @key
  @doc("The user id, either an AAD object ID or certificate fingerprint.")
  @extension("x-ms-skip-url-encoding", true)
  userId: string;

  @doc("The user's assigned role.")
  assignedRole: LedgerUserRole;
}

model ReceiptContents {
  // Elided for now
}

// TODO: No way to set "x-ms-enum.name" right now
@doc("State of a ledger query.")
@knownValues(LedgerQueryStateKV)
model LedgerQueryState is string {};

enum LedgerQueryStateKV {
  Loading,
  Ready,
}

@doc("A receipt certifying the transaction at the specified id.")
model TransactionReceipt {
  receipt: ReceiptContents;
  state: LedgerQueryState;
  transactionId: string;
}

// TODO: No way to set "x-ms-enum.name" right now
@doc("Represents the state of the transaction.")
@knownValues(TransactionStateKV)
model TransactionState is string {};

enum TransactionStateKV {
  Committed,
  Pending,
}

@doc("Response returned to a query for the transaction status.")
model TransactionStatus {
  state: TransactionState;
  transactionId: string;
}

//
// ** Operations **
//

@route("/app")
namespace ConfidentialLedger {
  @summary("Retrieves a list of collection ids present in the Confidential Ledger")
  @doc("Collection ids are user-created collections of ledger entries")
  op listCollections is Azure.Core.NonPagedResourceList<Collection>;

  // TODO: add return model
  @route("/enclaveQuotes")
  @summary("Gets quotes for all nodes of the Confidential Ledger.")
  @doc("A quote is an SGX enclave measurement that can be used to verify the validity of a node and its enclave.")
  @get
  @OpenAPI.extension("x-ms-convenient-api", true)
  op getEnclaveQuotes(...Foundations.ApiVersionParameter): OkResponse | Foundations.ErrorResponse;

  // TODO: add return model
  @route("/governance/constitution")
  @summary("Gets the constitution used for governance.")
  @doc("The constitution is a script that assesses and applies proposals from consortium members.")
  @get
  @OpenAPI.extension("x-ms-convenient-api", true)
  op getConstitution(...Foundations.ApiVersionParameter): OkResponse | Foundations.ErrorResponse;

  @route("/governance/members")
  @summary("Gets the consortium members.")
  @doc("Consortium members can manage the Confidential Ledger.")
  @get
  @OpenAPI.extension("x-ms-convenient-api", true)
  op getConsortiumMembers(
    ...Foundations.ApiVersionParameter
  ): OkResponse | Foundations.ErrorResponse; // TODO: add return model

  @summary("Gets ledger entries from a collection corresponding to a range.")
  @doc("A collection id may optionally be specified. Only entries in the specified (or default) collection will be returned.")
  @OpenAPI.extension("x-ms-convenient-api", true)
  op ListLedgerEntries is Azure.Core.ResourceList<LedgerEntry>;

  @route("transactions")
  @summary("Writes a ledger entry.")
  @doc("A collection id may optionally be specified.")
  @post
  @OpenAPI.extension("x-ms-convenient-api", true)
  op createLedgerEntry is Azure.Core.ResourceCreateWithServiceProvidedName<
    LedgerEntry,
    {
      parameters: CollectionIdParameter;
    }
  >;

  @summary("Gets the ledger entry at the specified transaction id. A collection id may optionally be specified to indicate the collection from which to fetch the value.")
  op getLedgerEntry is Azure.Core.ResourceRead<
    LedgerEntry,
    {
      parameters: CollectionIdParameter;
    }
  >;

  @get
  @action("receipt")
  @summary("Gets a receipt certifying ledger contents at a particular transaction id.")
  @segmentSeparator("/")
  @OpenAPI.extension("x-ms-convenient-api", true)
  op getReceipt is Azure.Core.ResourceAction<LedgerEntry, {}, TransactionReceipt>;

  @get
  @action("status")
  @summary("Gets a receipt certifying ledger contents at a particular transaction id.")
  @segmentSeparator("/")
  @OpenAPI.extension("x-ms-convenient-api", true)
  op getTransactionStatus is Azure.Core.ResourceAction<LedgerEntry, {}, TransactionStatus>;

  // TODO: There isn't a way to customize the action name at the moment
  @get
  @summary("Gets the current value available in the ledger.")
  @segmentSeparator("/")
  op getCurrentLedgerEntry is Azure.Core.ResourceCollectionAction<
    LedgerEntry,
    CollectionIdParameter,
    LedgerEntry
  >;

  @summary("Deletes a user from the Confidential Ledger.")
  op deleteUser is Azure.Core.ResourceDelete<LedgerUser>;

  @summary("Gets a user.")
  op getUser is Azure.Core.ResourceRead<LedgerUser>;

  @summary("Adds a user or updates a user's fields.")
  op createOrUpdateUser is Azure.Core.ResourceCreateOrUpdate<LedgerUser>;
}

@resource("ledgerIdentity")
@doc("Contains the information about a Confidential Ledger.")
model LedgerIdentityInformation {
  @key
  @doc("Id for the ledger.")
  ledgerId: string;

  @doc("PEM-encoded certificate used for TLS by the Confidential Ledger.")
  ledgerTlsCertificate: string;
}

namespace ConfidentialLedgerCertificate{
  @get
  @summary("Gets identity information for a Confidential Ledger instance.")
  op getLedgerIdentity is Azure.Core.ResourceRead<LedgerIdentityInformation>;
}