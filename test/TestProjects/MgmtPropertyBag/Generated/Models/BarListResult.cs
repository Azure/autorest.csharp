// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using MgmtPropertyBag;

namespace MgmtPropertyBag.Models
{
    /// <summary> The List bar with subscription response. </summary>
    internal partial class BarListResult
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private Dictionary<string, BinaryData> _rawData;

        /// <summary> Initializes a new instance of <see cref="BarListResult"/>. </summary>
        /// <param name="value"> The list of bar. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        internal BarListResult(IEnumerable<BarData> value)
        {
            Argument.AssertNotNull(value, nameof(value));

            Value = value.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="BarListResult"/>. </summary>
        /// <param name="value"> The list of bar. </param>
        /// <param name="nextLink"> The uri to fetch the next page of bar. Call ListNext() with this to fetch the next page. </param>
        /// <param name="rawData"> Keeps track of any properties unknown to the library. </param>
        internal BarListResult(IReadOnlyList<BarData> value, string nextLink, Dictionary<string, BinaryData> rawData)
        {
            Value = value;
            NextLink = nextLink;
            _rawData = rawData;
        }

        /// <summary> Initializes a new instance of <see cref="BarListResult"/> for deserialization. </summary>
        internal BarListResult()
        {
        }

        /// <summary> The list of bar. </summary>
        public IReadOnlyList<BarData> Value { get; }
        /// <summary> The uri to fetch the next page of bar. Call ListNext() with this to fetch the next page. </summary>
        public string NextLink { get; }
    }
}
