// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using Azure;
using Azure.ResourceManager.Resources;
using MgmtPropertyBag.Models;

namespace MgmtPropertyBag
{
    /// <summary> A class to add extension methods to MgmtPropertyBag. </summary>
    public static partial class MgmtPropertyBagExtensions
    {
        private static SubscriptionResourceExtensionClient GetExtensionClient(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient((client) =>
            {
                return new SubscriptionResourceExtensionClient(client, subscriptionResource.Id);
            }
            );
        }

        /// <summary>
        /// Gets a list of bar with four optional query parameters.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Fake/bars
        /// Operation Id: Bars_ListWithSubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="options"> A class representing the optional parameters in this method. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Bar" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<Bar> GetWithSubscriptionBarsAsync(this SubscriptionResource subscriptionResource, BarListWithSubscriptionOptions options, CancellationToken cancellationToken = default)
        {
            options ??= new BarListWithSubscriptionOptions();

            return GetExtensionClient(subscriptionResource).GetWithSubscriptionBarsAsync(options, cancellationToken);
        }

        /// <summary>
        /// Gets a list of bar with four optional query parameters.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Fake/bars
        /// Operation Id: Bars_ListWithSubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="options"> A class representing the optional parameters in this method. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Bar" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<Bar> GetWithSubscriptionBars(this SubscriptionResource subscriptionResource, BarListWithSubscriptionOptions options, CancellationToken cancellationToken = default)
        {
            options ??= new BarListWithSubscriptionOptions();

            return GetExtensionClient(subscriptionResource).GetWithSubscriptionBars(options, cancellationToken);
        }

        private static ResourceGroupResourceExtensionClient GetExtensionClient(ResourceGroupResource resourceGroupResource)
        {
            return resourceGroupResource.GetCachedClient((client) =>
            {
                return new ResourceGroupResourceExtensionClient(client, resourceGroupResource.Id);
            }
            );
        }

        /// <summary>
        /// Gets a list of foo with three optional query parameters.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fake/foos
        /// Operation Id: Foos_List
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="options"> A class representing the optional parameters in this method. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Foo" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<Foo> GetFoosAsync(this ResourceGroupResource resourceGroupResource, FooGetAllOptions options, CancellationToken cancellationToken = default)
        {
            options ??= new FooGetAllOptions();

            return GetExtensionClient(resourceGroupResource).GetFoosAsync(options, cancellationToken);
        }

        /// <summary>
        /// Gets a list of foo with three optional query parameters.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fake/foos
        /// Operation Id: Foos_List
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="options"> A class representing the optional parameters in this method. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Foo" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<Foo> GetFoos(this ResourceGroupResource resourceGroupResource, FooGetAllOptions options, CancellationToken cancellationToken = default)
        {
            options ??= new FooGetAllOptions();

            return GetExtensionClient(resourceGroupResource).GetFoos(options, cancellationToken);
        }

        /// <summary>
        /// Gets a list of bar with two optional query parameters.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fake/bars
        /// Operation Id: Bars_List
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Bar" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<Bar> GetBarsAsync(this ResourceGroupResource resourceGroupResource, string filter = null, int? top = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(resourceGroupResource).GetBarsAsync(filter, top, cancellationToken);
        }

        /// <summary>
        /// Gets a list of bar with two optional query parameters.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fake/bars
        /// Operation Id: Bars_List
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Bar" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<Bar> GetBars(this ResourceGroupResource resourceGroupResource, string filter = null, int? top = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(resourceGroupResource).GetBars(filter, top, cancellationToken);
        }
    }
}
