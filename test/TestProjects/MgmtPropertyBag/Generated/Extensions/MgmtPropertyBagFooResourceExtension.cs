// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using MgmtPropertyBag;

namespace MgmtPropertyBag.Mock
{
    /// <summary> A class to add extension methods to FooResource. </summary>
    public partial class MgmtPropertyBagFooResourceExtension : ArmResource
    {
        private ClientDiagnostics _fooClientDiagnostics;
        private FoosRestOperations _fooRestClient;

        /// <summary> Initializes a new instance of the <see cref="MgmtPropertyBagFooResourceExtension"/> class for mocking. </summary>
        protected MgmtPropertyBagFooResourceExtension()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MgmtPropertyBagFooResourceExtension"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MgmtPropertyBagFooResourceExtension(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics FooClientDiagnostics => _fooClientDiagnostics ??= new ClientDiagnostics("MgmtPropertyBag.Mock", FooResource.ResourceType.Namespace, Diagnostics);
        private FoosRestOperations FooRestClient => _fooRestClient ??= new FoosRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(FooResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Gets a list of foo with two optional query parameters.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Fake/foos</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Foos_ListWithSubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="FooResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<FooResource> GetFoosAsync(string filter = null, int? top = 10, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => FooRestClient.CreateListWithSubscriptionRequest(Id.SubscriptionId, filter, top);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, null, e => new FooResource(Client, FooData.DeserializeFooData(e)), FooClientDiagnostics, Pipeline, "MgmtPropertyBagFooResourceExtension.GetFoos", "", null, cancellationToken);
        }

        /// <summary>
        /// Gets a list of foo with two optional query parameters.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Fake/foos</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Foos_ListWithSubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="filter"> The filter to apply on the operation. </param>
        /// <param name="top"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="FooResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<FooResource> GetFoos(string filter = null, int? top = 10, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => FooRestClient.CreateListWithSubscriptionRequest(Id.SubscriptionId, filter, top);
            return PageableHelpers.CreatePageable(FirstPageRequest, null, e => new FooResource(Client, FooData.DeserializeFooData(e)), FooClientDiagnostics, Pipeline, "MgmtPropertyBagFooResourceExtension.GetFoos", "", null, cancellationToken);
        }
    }
}
