// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using MgmtPropertyBag.Models;

namespace MgmtPropertyBag
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _barsClientDiagnostics;
        private BarsRestOperations _barsRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics BarsClientDiagnostics => _barsClientDiagnostics ??= new ClientDiagnostics("MgmtPropertyBag", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private BarsRestOperations BarsRestClient => _barsRestClient ??= new BarsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Gets a list of bar with four optional query parameters.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Fake/bars
        /// Operation Id: Bars_ListWithSubscription
        /// </summary>
        /// <param name="options"> A class representing the optional parameters in this method. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Bar" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Bar> GetWithSubscriptionBarsAsync(BarListWithSubscriptionOptions options, CancellationToken cancellationToken = default)
        {
            async Task<Page<Bar>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = BarsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetWithSubscriptionBars");
                scope.Start();
                try
                {
                    var response = await BarsRestClient.ListWithSubscriptionAsync(Id.SubscriptionId, options.Filter, options.Select, options.Expand, options.Top, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Bar>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = BarsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetWithSubscriptionBars");
                scope.Start();
                try
                {
                    var response = await BarsRestClient.ListWithSubscriptionNextPageAsync(nextLink, Id.SubscriptionId, options.Filter, options.Select, options.Expand, options.Top, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list of bar with four optional query parameters.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Fake/bars
        /// Operation Id: Bars_ListWithSubscription
        /// </summary>
        /// <param name="options"> A class representing the optional parameters in this method. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Bar" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Bar> GetWithSubscriptionBars(BarListWithSubscriptionOptions options, CancellationToken cancellationToken = default)
        {
            Page<Bar> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = BarsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetWithSubscriptionBars");
                scope.Start();
                try
                {
                    var response = BarsRestClient.ListWithSubscription(Id.SubscriptionId, options.Filter, options.Select, options.Expand, options.Top, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Bar> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = BarsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetWithSubscriptionBars");
                scope.Start();
                try
                {
                    var response = BarsRestClient.ListWithSubscriptionNextPage(nextLink, Id.SubscriptionId, options.Filter, options.Select, options.Expand, options.Top, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
