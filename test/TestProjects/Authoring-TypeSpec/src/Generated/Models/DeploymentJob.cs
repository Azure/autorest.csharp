// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;

namespace AuthoringTypeSpec.Models
{
    /// <summary> The DeploymentJob. </summary>
    public partial class DeploymentJob
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DeploymentJob"/>. </summary>
        /// <param name="jobId"></param>
        /// <param name="status"></param>
        /// <param name="warnings"></param>
        /// <param name="errors"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/>, <paramref name="warnings"/> or <paramref name="errors"/> is null. </exception>
        internal DeploymentJob(string jobId, JobStatus status, IEnumerable<JobWarning> warnings, ResponseError errors)
        {
            Argument.AssertNotNull(jobId, nameof(jobId));
            Argument.AssertNotNull(warnings, nameof(warnings));
            Argument.AssertNotNull(errors, nameof(errors));

            JobId = jobId;
            Status = status;
            Warnings = warnings.ToList();
            Errors = errors;
        }

        /// <summary> Initializes a new instance of <see cref="DeploymentJob"/>. </summary>
        /// <param name="jobId"></param>
        /// <param name="createdDateTime"></param>
        /// <param name="lastUpdatedDateTime"></param>
        /// <param name="expirationDateTime"></param>
        /// <param name="status"></param>
        /// <param name="warnings"></param>
        /// <param name="errors"></param>
        /// <param name="id"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DeploymentJob(string jobId, DateTimeOffset createdDateTime, DateTimeOffset lastUpdatedDateTime, DateTimeOffset expirationDateTime, JobStatus status, IReadOnlyList<JobWarning> warnings, ResponseError errors, string id, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            JobId = jobId;
            CreatedDateTime = createdDateTime;
            LastUpdatedDateTime = lastUpdatedDateTime;
            ExpirationDateTime = expirationDateTime;
            Status = status;
            Warnings = warnings;
            Errors = errors;
            Id = id;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DeploymentJob"/> for deserialization. </summary>
        internal DeploymentJob()
        {
        }

        /// <summary> Gets the job id. </summary>
        public string JobId { get; }
        /// <summary> Gets the created date time. </summary>
        public DateTimeOffset CreatedDateTime { get; }
        /// <summary> Gets the last updated date time. </summary>
        public DateTimeOffset LastUpdatedDateTime { get; }
        /// <summary> Gets the expiration date time. </summary>
        public DateTimeOffset ExpirationDateTime { get; }
        /// <summary> Gets the status. </summary>
        public JobStatus Status { get; }
        /// <summary> Gets the warnings. </summary>
        public IReadOnlyList<JobWarning> Warnings { get; }
        /// <summary> Gets the errors. </summary>
        public ResponseError Errors { get; }
        /// <summary> Gets the id. </summary>
        public string Id { get; }
    }
}
