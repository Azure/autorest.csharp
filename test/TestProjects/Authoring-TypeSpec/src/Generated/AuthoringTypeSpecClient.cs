// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using Azure.Core;
using Azure.Core.Pipeline;

namespace AuthoringTypeSpec
{
    // Data plane generated client.
    /// <summary> The AuthoringTypeSpec service client. </summary>
    public partial class AuthoringTypeSpecClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of AuthoringTypeSpecClient for mocking. </summary>
        protected AuthoringTypeSpecClient()
        {
        }

        /// <summary> Initializes a new instance of AuthoringTypeSpecClient. </summary>
        /// <param name="endpoint"> The <see cref="Uri"/> to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public AuthoringTypeSpecClient(Uri endpoint) : this(endpoint, new AuthoringTypeSpecClientOptions())
        {
        }

        /// <summary> Initializes a new instance of AuthoringTypeSpecClient. </summary>
        /// <param name="endpoint"> The <see cref="Uri"/> to use. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public AuthoringTypeSpecClient(Uri endpoint, AuthoringTypeSpecClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new AuthoringTypeSpecClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        private Projects _cachedProjects;
        private Deployments _cachedDeployments;
        private Jobs _cachedJobs;
        private Global _cachedGlobal;

        /// <summary> Initializes a new instance of Projects. </summary>
        public virtual Projects GetProjectsClient()
        {
            return Volatile.Read(ref _cachedProjects) ?? Interlocked.CompareExchange(ref _cachedProjects, new Projects(ClientDiagnostics, _pipeline, _endpoint, _apiVersion), null) ?? _cachedProjects;
        }

        /// <summary> Initializes a new instance of Deployments. </summary>
        public virtual Deployments GetDeploymentsClient()
        {
            return Volatile.Read(ref _cachedDeployments) ?? Interlocked.CompareExchange(ref _cachedDeployments, new Deployments(ClientDiagnostics, _pipeline, _endpoint, _apiVersion), null) ?? _cachedDeployments;
        }

        /// <summary> Initializes a new instance of Jobs. </summary>
        public virtual Jobs GetJobsClient()
        {
            return Volatile.Read(ref _cachedJobs) ?? Interlocked.CompareExchange(ref _cachedJobs, new Jobs(ClientDiagnostics, _pipeline, _endpoint, _apiVersion), null) ?? _cachedJobs;
        }

        /// <summary> Initializes a new instance of Global. </summary>
        public virtual Global GetGlobalClient()
        {
            return Volatile.Read(ref _cachedGlobal) ?? Interlocked.CompareExchange(ref _cachedGlobal, new Global(ClientDiagnostics, _pipeline, _endpoint, _apiVersion), null) ?? _cachedGlobal;
        }
    }
}
