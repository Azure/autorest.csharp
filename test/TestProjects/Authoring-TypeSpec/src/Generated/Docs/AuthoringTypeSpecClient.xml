<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="CreateOrUpdateAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new
{
    projectKind = "CustomSingleLabelClassification",
    storageInputContainerName = "<storageInputContainerName>",
    language = "<language>",
});
Response response = await client.CreateOrUpdateAsync("<projectName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
This sample shows how to call CreateOrUpdateAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new
{
    projectKind = "CustomSingleLabelClassification",
    storageInputContainerName = "<storageInputContainerName>",
    settings = new
    {
        key = "<settings>",
    },
    multilingual = true,
    description = "<description>",
    language = "<language>",
});
Response response = await client.CreateOrUpdateAsync("<projectName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("multilingual").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdate(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdate and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new
{
    projectKind = "CustomSingleLabelClassification",
    storageInputContainerName = "<storageInputContainerName>",
    language = "<language>",
});
Response response = client.CreateOrUpdate("<projectName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
This sample shows how to call CreateOrUpdate with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new
{
    projectKind = "CustomSingleLabelClassification",
    storageInputContainerName = "<storageInputContainerName>",
    settings = new
    {
        key = "<settings>",
    },
    multilingual = true,
    description = "<description>",
    language = "<language>",
});
Response response = client.CreateOrUpdate("<projectName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("multilingual").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code></example>
    </member>
    <member name="GetProjectAsync(string,RequestContext)">
      <example>
This sample shows how to call GetProjectAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = await client.GetProjectAsync("<projectName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
This sample shows how to call GetProjectAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = await client.GetProjectAsync("<projectName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("multilingual").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code></example>
    </member>
    <member name="GetProject(string,RequestContext)">
      <example>
This sample shows how to call GetProject and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = client.GetProject("<projectName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
This sample shows how to call GetProject with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = client.GetProject("<projectName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("multilingual").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code></example>
    </member>
    <member name="DeleteAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = await client.DeleteAsync("<projectName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
This sample shows how to call DeleteAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = await client.DeleteAsync("<projectName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("multilingual").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code></example>
    </member>
    <member name="Delete(string,RequestContext)">
      <example>
This sample shows how to call Delete and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = client.Delete("<projectName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
This sample shows how to call Delete with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = client.Delete("<projectName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("multilingual").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code></example>
    </member>
    <member name="ExportAsync(string,string,RequestContext)">
      <example>
This sample shows how to call ExportAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = await client.ExportAsync("<projectName>", "<projectFileVersion>");
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call ExportAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = await client.ExportAsync("<projectName>", "<projectFileVersion>");
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="Export(string,string,RequestContext)">
      <example>
This sample shows how to call Export.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = client.Export("<projectName>", "<projectFileVersion>");
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call Export with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = client.Export("<projectName>", "<projectFileVersion>");
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="ImportxAsync(string,RequestContext)">
      <example>
This sample shows how to call ImportxAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = await client.ImportxAsync("<projectName>");
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call ImportxAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = await client.ImportxAsync("<projectName>");
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="Importx(string,RequestContext)">
      <example>
This sample shows how to call Importx.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = client.Importx("<projectName>");
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call Importx with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = client.Importx("<projectName>");
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="TrainAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call TrainAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new
{
    modelLabel = "<modelLabel>",
});
Response response = await client.TrainAsync("<projectName>", content);
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call TrainAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new
{
    modelLabel = "<modelLabel>",
});
Response response = await client.TrainAsync("<projectName>", content);
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="Train(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call Train.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new
{
    modelLabel = "<modelLabel>",
});
Response response = client.Train("<projectName>", content);
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call Train with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new
{
    modelLabel = "<modelLabel>",
});
Response response = client.Train("<projectName>", content);
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetDeploymentAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = await client.GetDeploymentAsync("<projectName>", "<deploymentName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call GetDeploymentAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = await client.GetDeploymentAsync("<projectName>", "<deploymentName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="GetDeployment(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeployment and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = client.GetDeployment("<projectName>", "<deploymentName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call GetDeployment with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = client.GetDeployment("<projectName>", "<deploymentName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="DeployProjectAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call DeployProjectAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new object());
Response response = await client.DeployProjectAsync("<projectName>", "<deploymentName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call DeployProjectAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new object());
Response response = await client.DeployProjectAsync("<projectName>", "<deploymentName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="DeployProject(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call DeployProject and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new object());
Response response = client.DeployProject("<projectName>", "<deploymentName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call DeployProject with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new object());
Response response = client.DeployProject("<projectName>", "<deploymentName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="DeleteDeploymentAsync(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteDeploymentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = await client.DeleteDeploymentAsync("<projectName>", "<deploymentName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call DeleteDeploymentAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = await client.DeleteDeploymentAsync("<projectName>", "<deploymentName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="DeleteDeployment(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteDeployment and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = client.DeleteDeployment("<projectName>", "<deploymentName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call DeleteDeployment with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = client.DeleteDeployment("<projectName>", "<deploymentName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="SwapDeploymentsAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call SwapDeploymentsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new
{
    firstDeploymentName = "<firstDeploymentName>",
    secondDeploymentName = "<secondDeploymentName>",
});
Response response = await client.SwapDeploymentsAsync("<projectName>", content);
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call SwapDeploymentsAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new
{
    firstDeploymentName = "<firstDeploymentName>",
    secondDeploymentName = "<secondDeploymentName>",
});
Response response = await client.SwapDeploymentsAsync("<projectName>", content);
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="SwapDeployments(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call SwapDeployments.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new
{
    firstDeploymentName = "<firstDeploymentName>",
    secondDeploymentName = "<secondDeploymentName>",
});
Response response = client.SwapDeployments("<projectName>", content);
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call SwapDeployments with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new
{
    firstDeploymentName = "<firstDeploymentName>",
    secondDeploymentName = "<secondDeploymentName>",
});
Response response = client.SwapDeployments("<projectName>", content);
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetDeploymentStatusValueAsync(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeploymentStatusValueAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response<DeploymentJob> response = await client.GetDeploymentStatusValueAsync("<projectName>", "<deploymentName>", "<jobId>");
]]></code>
This sample shows how to call GetDeploymentStatusValueAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response<DeploymentJob> response = await client.GetDeploymentStatusValueAsync("<projectName>", "<deploymentName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetDeploymentStatusValue(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeploymentStatusValue.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response<DeploymentJob> response = client.GetDeploymentStatusValue("<projectName>", "<deploymentName>", "<jobId>");
]]></code>
This sample shows how to call GetDeploymentStatusValue with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response<DeploymentJob> response = client.GetDeploymentStatusValue("<projectName>", "<deploymentName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetDeploymentStatusAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = await client.GetDeploymentStatusAsync("<projectName>", "<deploymentName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
This sample shows how to call GetDeploymentStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = await client.GetDeploymentStatusAsync("<projectName>", "<deploymentName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="GetDeploymentStatus(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = client.GetDeploymentStatus("<projectName>", "<deploymentName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
This sample shows how to call GetDeploymentStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = client.GetDeploymentStatus("<projectName>", "<deploymentName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="GetSwapDeploymentsStatusValueAsync(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetSwapDeploymentsStatusValueAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response<SwapDeploymentsJob> response = await client.GetSwapDeploymentsStatusValueAsync("<projectName>", "<deploymentName>", "<jobId>");
]]></code>
This sample shows how to call GetSwapDeploymentsStatusValueAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response<SwapDeploymentsJob> response = await client.GetSwapDeploymentsStatusValueAsync("<projectName>", "<deploymentName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetSwapDeploymentsStatusValue(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetSwapDeploymentsStatusValue.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response<SwapDeploymentsJob> response = client.GetSwapDeploymentsStatusValue("<projectName>", "<deploymentName>", "<jobId>");
]]></code>
This sample shows how to call GetSwapDeploymentsStatusValue with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response<SwapDeploymentsJob> response = client.GetSwapDeploymentsStatusValue("<projectName>", "<deploymentName>", "<jobId>");
]]></code></example>
    </member>
    <member name="GetSwapDeploymentsStatusAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetSwapDeploymentsStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = await client.GetSwapDeploymentsStatusAsync("<projectName>", "<deploymentName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
This sample shows how to call GetSwapDeploymentsStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = await client.GetSwapDeploymentsStatusAsync("<projectName>", "<deploymentName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="GetSwapDeploymentsStatus(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetSwapDeploymentsStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = client.GetSwapDeploymentsStatus("<projectName>", "<deploymentName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
This sample shows how to call GetSwapDeploymentsStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

Response response = client.GetSwapDeploymentsStatus("<projectName>", "<deploymentName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code></example>
    </member>
    <member name="GetProjectsAsync(RequestContext)">
      <example>
This sample shows how to call GetProjectsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

await foreach (BinaryData item in client.GetProjectsAsync())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].GetProperty("projectName").ToString());
    Console.WriteLine(result[0].GetProperty("projectKind").ToString());
    Console.WriteLine(result[0].GetProperty("storageInputContainerName").ToString());
    Console.WriteLine(result[0].GetProperty("language").ToString());
    Console.WriteLine(result[0].GetProperty("createdDateTime").ToString());
    Console.WriteLine(result[0].GetProperty("lastModifiedDateTime").ToString());
    Console.WriteLine(result[0].GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result[0].GetProperty("lastDeployedDateTime").ToString());
}
]]></code>
This sample shows how to call GetProjectsAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

await foreach (BinaryData item in client.GetProjectsAsync())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].GetProperty("projectName").ToString());
    Console.WriteLine(result[0].GetProperty("projectKind").ToString());
    Console.WriteLine(result[0].GetProperty("storageInputContainerName").ToString());
    Console.WriteLine(result[0].GetProperty("settings").GetProperty("<key>").ToString());
    Console.WriteLine(result[0].GetProperty("multilingual").ToString());
    Console.WriteLine(result[0].GetProperty("description").ToString());
    Console.WriteLine(result[0].GetProperty("language").ToString());
    Console.WriteLine(result[0].GetProperty("createdDateTime").ToString());
    Console.WriteLine(result[0].GetProperty("lastModifiedDateTime").ToString());
    Console.WriteLine(result[0].GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result[0].GetProperty("lastDeployedDateTime").ToString());
}
]]></code></example>
    </member>
    <member name="GetProjects(RequestContext)">
      <example>
This sample shows how to call GetProjects and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

foreach (BinaryData item in client.GetProjects())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].GetProperty("projectName").ToString());
    Console.WriteLine(result[0].GetProperty("projectKind").ToString());
    Console.WriteLine(result[0].GetProperty("storageInputContainerName").ToString());
    Console.WriteLine(result[0].GetProperty("language").ToString());
    Console.WriteLine(result[0].GetProperty("createdDateTime").ToString());
    Console.WriteLine(result[0].GetProperty("lastModifiedDateTime").ToString());
    Console.WriteLine(result[0].GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result[0].GetProperty("lastDeployedDateTime").ToString());
}
]]></code>
This sample shows how to call GetProjects with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

foreach (BinaryData item in client.GetProjects())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].GetProperty("projectName").ToString());
    Console.WriteLine(result[0].GetProperty("projectKind").ToString());
    Console.WriteLine(result[0].GetProperty("storageInputContainerName").ToString());
    Console.WriteLine(result[0].GetProperty("settings").GetProperty("<key>").ToString());
    Console.WriteLine(result[0].GetProperty("multilingual").ToString());
    Console.WriteLine(result[0].GetProperty("description").ToString());
    Console.WriteLine(result[0].GetProperty("language").ToString());
    Console.WriteLine(result[0].GetProperty("createdDateTime").ToString());
    Console.WriteLine(result[0].GetProperty("lastModifiedDateTime").ToString());
    Console.WriteLine(result[0].GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result[0].GetProperty("lastDeployedDateTime").ToString());
}
]]></code></example>
    </member>
    <member name="GetDeploymentsAsync(string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

await foreach (BinaryData item in client.GetDeploymentsAsync("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].GetProperty("name").ToString());
}
]]></code>
This sample shows how to call GetDeploymentsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

await foreach (BinaryData item in client.GetDeploymentsAsync("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].GetProperty("name").ToString());
}
]]></code></example>
    </member>
    <member name="GetDeployments(string,RequestContext)">
      <example>
This sample shows how to call GetDeployments and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

foreach (BinaryData item in client.GetDeployments("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].GetProperty("name").ToString());
}
]]></code>
This sample shows how to call GetDeployments with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

foreach (BinaryData item in client.GetDeployments("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].GetProperty("name").ToString());
}
]]></code></example>
    </member>
    <member name="GetSupportedLanguagesAsync(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetSupportedLanguagesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

await foreach (BinaryData item in client.GetSupportedLanguagesAsync())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].GetProperty("languageName").ToString());
    Console.WriteLine(result[0].GetProperty("languageCode").ToString());
}
]]></code>
This sample shows how to call GetSupportedLanguagesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

await foreach (BinaryData item in client.GetSupportedLanguagesAsync(maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].GetProperty("languageName").ToString());
    Console.WriteLine(result[0].GetProperty("languageCode").ToString());
}
]]></code></example>
    </member>
    <member name="GetSupportedLanguages(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetSupportedLanguages and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

foreach (BinaryData item in client.GetSupportedLanguages())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].GetProperty("languageName").ToString());
    Console.WriteLine(result[0].GetProperty("languageCode").ToString());
}
]]></code>
This sample shows how to call GetSupportedLanguages with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

foreach (BinaryData item in client.GetSupportedLanguages(maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].GetProperty("languageName").ToString());
    Console.WriteLine(result[0].GetProperty("languageCode").ToString());
}
]]></code></example>
    </member>
    <member name="GetTrainingConfigVersionsAsync(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetTrainingConfigVersionsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

await foreach (BinaryData item in client.GetTrainingConfigVersionsAsync())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].GetProperty("trainingConfigVersionStr").ToString());
    Console.WriteLine(result[0].GetProperty("modelExpirationDate").ToString());
}
]]></code>
This sample shows how to call GetTrainingConfigVersionsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

await foreach (BinaryData item in client.GetTrainingConfigVersionsAsync(maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].GetProperty("trainingConfigVersionStr").ToString());
    Console.WriteLine(result[0].GetProperty("modelExpirationDate").ToString());
}
]]></code></example>
    </member>
    <member name="GetTrainingConfigVersions(int?,int?,int?,RequestContext)">
      <example>
This sample shows how to call GetTrainingConfigVersions and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

foreach (BinaryData item in client.GetTrainingConfigVersions())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].GetProperty("trainingConfigVersionStr").ToString());
    Console.WriteLine(result[0].GetProperty("modelExpirationDate").ToString());
}
]]></code>
This sample shows how to call GetTrainingConfigVersions with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AuthoringTypeSpecClient client = new AuthoringTypeSpecClient(endpoint);

foreach (BinaryData item in client.GetTrainingConfigVersions(maxCount: 1234, skip: 1234, maxpagesize: 1234))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result[0].GetProperty("trainingConfigVersionStr").ToString());
    Console.WriteLine(result[0].GetProperty("modelExpirationDate").ToString());
}
]]></code></example>
    </member>
  </members>
</doc>