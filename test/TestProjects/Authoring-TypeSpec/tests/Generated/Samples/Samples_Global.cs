// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Identity;
using NUnit.Framework;

namespace AuthoringTypeSpec.Samples
{
    public partial class Samples_Global
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Global_GetSupportedLanguages_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            Global client = new AuthoringTypeSpecClient(endpoint).GetGlobalClient(apiVersion: "2022-05-15-preview");

            Response response = client.GetSupportedLanguages();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageCode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Global_GetSupportedLanguages_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            Global client = new AuthoringTypeSpecClient(endpoint).GetGlobalClient(apiVersion: "2022-05-15-preview");

            Response response = await client.GetSupportedLanguagesAsync();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageCode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Global_GetSupportedLanguages_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            Global client = new AuthoringTypeSpecClient(endpoint).GetGlobalClient(apiVersion: "2022-05-15-preview");

            Response response = client.GetSupportedLanguages(top: 1234, skip: 1234, maxpagesize: 1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageCode").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Global_GetSupportedLanguages_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            Global client = new AuthoringTypeSpecClient(endpoint).GetGlobalClient(apiVersion: "2022-05-15-preview");

            Response response = await client.GetSupportedLanguagesAsync(top: 1234, skip: 1234, maxpagesize: 1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageName").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageCode").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Global_GetTrainingConfigVersions_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            Global client = new AuthoringTypeSpecClient(endpoint).GetGlobalClient(apiVersion: "2022-05-15-preview");

            Response response = client.GetTrainingConfigVersions();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("trainingConfigVersionStr").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("modelExpirationDate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Global_GetTrainingConfigVersions_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            Global client = new AuthoringTypeSpecClient(endpoint).GetGlobalClient(apiVersion: "2022-05-15-preview");

            Response response = await client.GetTrainingConfigVersionsAsync();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("trainingConfigVersionStr").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("modelExpirationDate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Global_GetTrainingConfigVersions_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            Global client = new AuthoringTypeSpecClient(endpoint).GetGlobalClient(apiVersion: "2022-05-15-preview");

            Response response = client.GetTrainingConfigVersions(top: 1234, skip: 1234, maxpagesize: 1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("trainingConfigVersionStr").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("modelExpirationDate").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Global_GetTrainingConfigVersions_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            Global client = new AuthoringTypeSpecClient(endpoint).GetGlobalClient(apiVersion: "2022-05-15-preview");

            Response response = await client.GetTrainingConfigVersionsAsync(top: 1234, skip: 1234, maxpagesize: 1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("trainingConfigVersionStr").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("modelExpirationDate").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }
    }
}
