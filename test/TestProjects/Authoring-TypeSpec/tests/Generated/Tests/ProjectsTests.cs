// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace AuthoringTypeSpec.Tests
{
    public partial class ProjectsTests : AuthoringTypeSpecTestBase
    {
        public ProjectsTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Project_GetProject_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            Projects client = CreateAuthoringTypeSpecClient(endpoint).GetProjectsClient(apiVersion: "2022-05-15-preview");

            Response response = await client.GetProjectAsync("<projectName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Project_GetProject_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            Projects client = CreateAuthoringTypeSpecClient(endpoint).GetProjectsClient(apiVersion: "2022-05-15-preview");

            Response response = await client.GetProjectAsync("<projectName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Project_GetProjects_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            Projects client = CreateAuthoringTypeSpecClient(endpoint).GetProjectsClient(apiVersion: "2022-05-15-preview");

            await foreach (BinaryData item in client.GetProjectsAsync())
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Project_GetProjects_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            Projects client = CreateAuthoringTypeSpecClient(endpoint).GetProjectsClient(apiVersion: "2022-05-15-preview");

            await foreach (BinaryData item in client.GetProjectsAsync())
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Project_CreateOrUpdate_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            Projects client = CreateAuthoringTypeSpecClient(endpoint).GetProjectsClient(apiVersion: "2022-05-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "CustomSingleLabelClassification",
                storageInputContainerName = "<storageInputContainerName>",
                language = "<language>",
            });
            Operation<BinaryData> operation = await client.CreateOrUpdateAsync(WaitUntil.Completed, "<projectName>", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Project_CreateOrUpdate_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            Projects client = CreateAuthoringTypeSpecClient(endpoint).GetProjectsClient(apiVersion: "2022-05-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "CustomSingleLabelClassification",
                storageInputContainerName = "<storageInputContainerName>",
                settings = new object(),
                multilingual = true,
                description = "<description>",
                language = "<language>",
            });
            Operation<BinaryData> operation = await client.CreateOrUpdateAsync(WaitUntil.Completed, "<projectName>", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Project_Delete_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            Projects client = CreateAuthoringTypeSpecClient(endpoint).GetProjectsClient(apiVersion: "2022-05-15-preview");

            Operation operation = await client.DeleteAsync(WaitUntil.Completed, "<projectName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Project_Delete_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            Projects client = CreateAuthoringTypeSpecClient(endpoint).GetProjectsClient(apiVersion: "2022-05-15-preview");

            Operation operation = await client.DeleteAsync(WaitUntil.Completed, "<projectName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Projects_Export_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            Projects client = CreateAuthoringTypeSpecClient(endpoint).GetProjectsClient(apiVersion: "2022-05-15-preview");

            Operation operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>", "<projectFileVersion>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Projects_Export_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            Projects client = CreateAuthoringTypeSpecClient(endpoint).GetProjectsClient(apiVersion: "2022-05-15-preview");

            Operation operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>", "<projectFileVersion>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Projects_Importx_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            Projects client = CreateAuthoringTypeSpecClient(endpoint).GetProjectsClient(apiVersion: "2022-05-15-preview");

            Operation operation = await client.ImportxAsync(WaitUntil.Completed, "<projectName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Projects_Importx_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            Projects client = CreateAuthoringTypeSpecClient(endpoint).GetProjectsClient(apiVersion: "2022-05-15-preview");

            Operation operation = await client.ImportxAsync(WaitUntil.Completed, "<projectName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Projects_Train_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            Projects client = CreateAuthoringTypeSpecClient(endpoint).GetProjectsClient(apiVersion: "2022-05-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                modelLabel = "<modelLabel>",
            });
            Operation operation = await client.TrainAsync(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Projects_Train_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            Projects client = CreateAuthoringTypeSpecClient(endpoint).GetProjectsClient(apiVersion: "2022-05-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                modelLabel = "<modelLabel>",
            });
            Operation operation = await client.TrainAsync(WaitUntil.Completed, "<projectName>", content);
        }
    }
}
