// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using AuthoringTypeSpec;
using AuthoringTypeSpec.Models;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace AuthoringTypeSpec.Tests
{
    public partial class AuthoringTypeSpecClientTests : AuthoringTypeSpecTestBase
    {
        public AuthoringTypeSpecClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Project_GetProject_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response response = await client.GetProjectAsync("<projectName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Project_GetProject_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response response = await client.GetProjectAsync("<projectName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Deployment_GetDeployment_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response response = await client.GetDeploymentAsync("<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Deployment_GetDeployment_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response response = await client.GetDeploymentAsync("<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeploymentJob_GetDeploymentStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response response = await client.GetDeploymentStatusAsync("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeploymentJob_GetDeploymentStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response<DeploymentJob> response = await client.GetDeploymentStatusValueAsync("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeploymentJob_GetDeploymentStatus_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response response = await client.GetDeploymentStatusAsync("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeploymentJob_GetDeploymentStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response<DeploymentJob> response = await client.GetDeploymentStatusValueAsync("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SwapDeploymentsJob_GetSwapDeploymentsStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response response = await client.GetSwapDeploymentsStatusAsync("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SwapDeploymentsJob_GetSwapDeploymentsStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response<SwapDeploymentsJob> response = await client.GetSwapDeploymentsStatusValueAsync("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SwapDeploymentsJob_GetSwapDeploymentsStatus_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response response = await client.GetSwapDeploymentsStatusAsync("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SwapDeploymentsJob_GetSwapDeploymentsStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response<SwapDeploymentsJob> response = await client.GetSwapDeploymentsStatusValueAsync("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Project_GetProjects_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            await foreach (BinaryData item in client.GetProjectsAsync())
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Project_GetProjects_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            await foreach (BinaryData item in client.GetProjectsAsync())
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Deployment_GetDeployments_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            await foreach (BinaryData item in client.GetDeploymentsAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Deployment_GetDeployments_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            await foreach (BinaryData item in client.GetDeploymentsAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Global_GetSupportedLanguages_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            await foreach (BinaryData item in client.GetSupportedLanguagesAsync())
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Global_GetSupportedLanguages_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            await foreach (BinaryData item in client.GetSupportedLanguagesAsync(maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Global_GetTrainingConfigVersions_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            await foreach (BinaryData item in client.GetTrainingConfigVersionsAsync())
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Global_GetTrainingConfigVersions_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            await foreach (BinaryData item in client.GetTrainingConfigVersionsAsync(maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Project_CreateOrUpdate_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "CustomSingleLabelClassification",
                storageInputContainerName = "<storageInputContainerName>",
                language = "<language>",
            });
            Operation<BinaryData> operation = await client.CreateOrUpdateAsync(WaitUntil.Completed, "<projectName>", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Project_CreateOrUpdate_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                projectKind = "CustomSingleLabelClassification",
                storageInputContainerName = "<storageInputContainerName>",
                settings = new
                {
                    key = "<settings>",
                },
                multilingual = true,
                description = "<description>",
                language = "<language>",
            });
            Operation<BinaryData> operation = await client.CreateOrUpdateAsync(WaitUntil.Completed, "<projectName>", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Project_Delete_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Operation operation = await client.DeleteAsync(WaitUntil.Completed, "<projectName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Project_Delete_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Operation operation = await client.DeleteAsync(WaitUntil.Completed, "<projectName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Projects_Export_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Operation<BinaryData> operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>", "<projectFileVersion>");
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Projects_Export_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Operation<BinaryData> operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>", "<projectFileVersion>");
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Projects_Importx_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Operation<BinaryData> operation = await client.ImportxAsync(WaitUntil.Completed, "<projectName>");
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Projects_Importx_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Operation<BinaryData> operation = await client.ImportxAsync(WaitUntil.Completed, "<projectName>");
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Projects_Train_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                modelLabel = "<modelLabel>",
            });
            Operation<BinaryData> operation = await client.TrainAsync(WaitUntil.Completed, "<projectName>", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Projects_Train_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                modelLabel = "<modelLabel>",
            });
            Operation<BinaryData> operation = await client.TrainAsync(WaitUntil.Completed, "<projectName>", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Deployment_DeployProject_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = await client.DeployProjectAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Deployment_DeployProject_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = await client.DeployProjectAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Deployment_DeleteDeployment_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Operation operation = await client.DeleteDeploymentAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Deployment_DeleteDeployment_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Operation operation = await client.DeleteDeploymentAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Deployments_SwapDeployments_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                firstDeploymentName = "<firstDeploymentName>",
                secondDeploymentName = "<secondDeploymentName>",
            });
            Operation<BinaryData> operation = await client.SwapDeploymentsAsync(WaitUntil.Completed, "<projectName>", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Deployments_SwapDeployments_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                firstDeploymentName = "<firstDeploymentName>",
                secondDeploymentName = "<secondDeploymentName>",
            });
            Operation<BinaryData> operation = await client.SwapDeploymentsAsync(WaitUntil.Completed, "<projectName>", content);
            BinaryData responseData = operation.Value;
        }
    }
}
