// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using AuthoringTypeSpec;
using AuthoringTypeSpec.Models;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace AuthoringTypeSpec.Tests
{
    public class AuthoringTypeSpecClientTests : AuthoringTypeSpecTestBase
    {
        public AuthoringTypeSpecClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task CreateOrUpdate_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                projectKind = "CustomSingleLabelClassification",
                storageInputContainerName = "<storageInputContainerName>",
                language = "<language>",
            });
            Response response = await client.CreateOrUpdateAsync("<projectName>", content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task CreateOrUpdate_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                projectKind = "CustomSingleLabelClassification",
                storageInputContainerName = "<storageInputContainerName>",
                settings = new
                {
                    key = "<settings>",
                },
                multilingual = true,
                description = "<description>",
                language = "<language>",
            });
            Response response = await client.CreateOrUpdateAsync("<projectName>", content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetProject_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response response = await client.GetProjectAsync("<projectName>");
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetProject_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response response = await client.GetProjectAsync("<projectName>");
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Delete_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response response = await client.DeleteAsync("<projectName>");
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Delete_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response response = await client.DeleteAsync("<projectName>");
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Export_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response response = await client.ExportAsync("<projectName>", "<projectFileVersion>");
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Export_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response response = await client.ExportAsync("<projectName>", "<projectFileVersion>");
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Importx_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response response = await client.ImportxAsync("<projectName>");
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Importx_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response response = await client.ImportxAsync("<projectName>");
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Train_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                modelLabel = "<modelLabel>",
            });
            Response response = await client.TrainAsync("<projectName>", content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task Train_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                modelLabel = "<modelLabel>",
            });
            Response response = await client.TrainAsync("<projectName>", content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetDeployment_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response response = await client.GetDeploymentAsync("<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetDeployment_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response response = await client.GetDeploymentAsync("<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DeployProject_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.DeployProjectAsync("<projectName>", "<deploymentName>", content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DeployProject_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.DeployProjectAsync("<projectName>", "<deploymentName>", content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DeleteDeployment_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response response = await client.DeleteDeploymentAsync("<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task DeleteDeployment_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response response = await client.DeleteDeploymentAsync("<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task SwapDeployments_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                firstDeploymentName = "<firstDeploymentName>",
                secondDeploymentName = "<secondDeploymentName>",
            });
            Response response = await client.SwapDeploymentsAsync("<projectName>", content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task SwapDeployments_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                firstDeploymentName = "<firstDeploymentName>",
                secondDeploymentName = "<secondDeploymentName>",
            });
            Response response = await client.SwapDeploymentsAsync("<projectName>", content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetDeploymentStatus_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response response = await client.GetDeploymentStatusAsync("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetDeploymentStatusValue_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response<DeploymentJob> response = await client.GetDeploymentStatusValueAsync("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetDeploymentStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response response = await client.GetDeploymentStatusAsync("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetDeploymentStatusValue_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response<DeploymentJob> response = await client.GetDeploymentStatusValueAsync("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetSwapDeploymentsStatus_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response response = await client.GetSwapDeploymentsStatusAsync("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetSwapDeploymentsStatusValue_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response<SwapDeploymentsJob> response = await client.GetSwapDeploymentsStatusValueAsync("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetSwapDeploymentsStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response response = await client.GetSwapDeploymentsStatusAsync("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetSwapDeploymentsStatusValue_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            Response<SwapDeploymentsJob> response = await client.GetSwapDeploymentsStatusValueAsync("<projectName>", "<deploymentName>", "<jobId>");
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetProjects_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            await foreach (BinaryData item in client.GetProjectsAsync())
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetProjects_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            await foreach (BinaryData item in client.GetProjectsAsync())
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetDeployments_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            await foreach (BinaryData item in client.GetDeploymentsAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetDeployments_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            await foreach (BinaryData item in client.GetDeploymentsAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetSupportedLanguages_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            await foreach (BinaryData item in client.GetSupportedLanguagesAsync())
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetSupportedLanguages_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            await foreach (BinaryData item in client.GetSupportedLanguagesAsync(maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetTrainingConfigVersions_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            await foreach (BinaryData item in client.GetTrainingConfigVersionsAsync())
            {
            }
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetTrainingConfigVersions_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AuthoringTypeSpecClient client = CreateAuthoringTypeSpecClient(endpoint);

            await foreach (BinaryData item in client.GetTrainingConfigVersionsAsync(maxCount: 1234, skip: 1234, maxpagesize: 1234))
            {
            }
        }
    }
}
