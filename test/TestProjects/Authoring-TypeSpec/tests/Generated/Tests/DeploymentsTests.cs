// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace AuthoringTypeSpec.Tests
{
    public partial class DeploymentsTests : AuthoringTypeSpecTestBase
    {
        public DeploymentsTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Deployment_GetDeployment_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            Deployments client = CreateAuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            Response response = await client.GetDeploymentAsync("<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Deployment_GetDeployment_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            Deployments client = CreateAuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            Response response = await client.GetDeploymentAsync("<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Deployment_GetDeployments_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            Deployments client = CreateAuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            await foreach (BinaryData item in client.GetDeploymentsAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Deployment_GetDeployments_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            Deployments client = CreateAuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            await foreach (BinaryData item in client.GetDeploymentsAsync("<projectName>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Deployment_DeployProject_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            Deployments client = CreateAuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = await client.DeployProjectAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Deployment_DeployProject_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            Deployments client = CreateAuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            using RequestContent content = RequestContent.Create(new object());
            Operation<BinaryData> operation = await client.DeployProjectAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Deployment_DeleteDeployment_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            Deployments client = CreateAuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            Operation operation = await client.DeleteDeploymentAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Deployment_DeleteDeployment_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            Deployments client = CreateAuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            Operation operation = await client.DeleteDeploymentAsync(WaitUntil.Completed, "<projectName>", "<deploymentName>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Deployments_SwapDeployments_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            Deployments client = CreateAuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                firstDeploymentName = "<firstDeploymentName>",
                secondDeploymentName = "<secondDeploymentName>",
            });
            Operation operation = await client.SwapDeploymentsAsync(WaitUntil.Completed, "<projectName>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Deployments_SwapDeployments_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            Deployments client = CreateAuthoringTypeSpecClient(endpoint).GetDeploymentsClient(apiVersion: "2022-05-15-preview");

            using RequestContent content = RequestContent.Create(new
            {
                firstDeploymentName = "<firstDeploymentName>",
                secondDeploymentName = "<secondDeploymentName>",
            });
            Operation operation = await client.SwapDeploymentsAsync(WaitUntil.Completed, "<projectName>", content);
        }
    }
}
