// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace CadlGenerateAllModels.Models
{
    /// <summary> NotReference enum. </summary>
    public readonly partial struct NotReferenceEnum : IEquatable<NotReferenceEnum>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="NotReferenceEnum"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public NotReferenceEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OneValue = "1";
        private const string TwoValue = "2";
        private const string FourValue = "4";

        /// <summary> 1. </summary>
        public static NotReferenceEnum One { get; } = new NotReferenceEnum(OneValue);
        /// <summary> 2. </summary>
        public static NotReferenceEnum Two { get; } = new NotReferenceEnum(TwoValue);
        /// <summary> 4. </summary>
        public static NotReferenceEnum Four { get; } = new NotReferenceEnum(FourValue);
        /// <summary> Determines if two <see cref="NotReferenceEnum"/> values are the same. </summary>
        public static bool operator ==(NotReferenceEnum left, NotReferenceEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="NotReferenceEnum"/> values are not the same. </summary>
        public static bool operator !=(NotReferenceEnum left, NotReferenceEnum right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="NotReferenceEnum"/>. </summary>
        public static implicit operator NotReferenceEnum(string value) => new NotReferenceEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is NotReferenceEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(NotReferenceEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
