<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="TopActionAsync(DateTimeOffset,CancellationToken)" />
    <member name="TopAction(DateTimeOffset,CancellationToken)" />
    <member name="TopActionAsync(DateTimeOffset,PipelineOptions)">
      <example>
This sample shows how to call TopActionAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = await client.TopActionAsync(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call TopActionAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = await client.TopActionAsync(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="TopAction(DateTimeOffset,PipelineOptions)">
      <example>
This sample shows how to call TopAction and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = client.TopAction(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call TopAction with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = client.TopAction(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="TopAction2Async(PipelineOptions)">
      <example>
This sample shows how to call TopAction2Async and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = await client.TopAction2Async(null);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call TopAction2Async with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = await client.TopAction2Async(null);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="TopAction2(PipelineOptions)">
      <example>
This sample shows how to call TopAction2 and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = client.TopAction2(null);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call TopAction2 with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = client.TopAction2(null);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="PatchActionAsync(RequestContent,PipelineOptions)">
      <example>
This sample shows how to call PatchActionAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    requiredBadDescription = "<requiredBadDescription>",
    requiredNullableList = new List<object>()
    {
        1234
    },
});
Result result = await client.PatchActionAsync(content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call PatchActionAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    optionalLiteralString = "reject",
    optionalLiteralInt = 456,
    optionalLiteralFloat = 4.56F,
    optionalLiteralBool = true,
    requiredBadDescription = "<requiredBadDescription>",
    optionalNullableList = new List<object>()
    {
        1234
    },
    requiredNullableList = new List<object>()
    {
        1234
    },
});
Result result = await client.PatchActionAsync(content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="PatchAction(RequestContent,PipelineOptions)">
      <example>
This sample shows how to call PatchAction and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    requiredBadDescription = "<requiredBadDescription>",
    requiredNullableList = new List<object>()
    {
        1234
    },
});
Result result = client.PatchAction(content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call PatchAction with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    optionalLiteralString = "reject",
    optionalLiteralInt = 456,
    optionalLiteralFloat = 4.56F,
    optionalLiteralBool = true,
    requiredBadDescription = "<requiredBadDescription>",
    optionalNullableList = new List<object>()
    {
        1234
    },
    requiredNullableList = new List<object>()
    {
        1234
    },
});
Result result = client.PatchAction(content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="AnonymousBodyAsync(Thing,CancellationToken)" />
    <member name="AnonymousBody(Thing,CancellationToken)" />
    <member name="AnonymousBodyAsync(RequestContent,PipelineOptions)">
      <example>
This sample shows how to call AnonymousBodyAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    requiredBadDescription = "<requiredBadDescription>",
    requiredNullableList = new List<object>()
    {
        1234
    },
});
Result result = await client.AnonymousBodyAsync(content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call AnonymousBodyAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    optionalLiteralString = "reject",
    optionalLiteralInt = 456,
    optionalLiteralFloat = 4.56F,
    optionalLiteralBool = true,
    requiredBadDescription = "<requiredBadDescription>",
    optionalNullableList = new List<object>()
    {
        1234
    },
    requiredNullableList = new List<object>()
    {
        1234
    },
});
Result result = await client.AnonymousBodyAsync(content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="AnonymousBody(RequestContent,PipelineOptions)">
      <example>
This sample shows how to call AnonymousBody and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    requiredBadDescription = "<requiredBadDescription>",
    requiredNullableList = new List<object>()
    {
        1234
    },
});
Result result = client.AnonymousBody(content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call AnonymousBody with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    optionalLiteralString = "reject",
    optionalLiteralInt = 456,
    optionalLiteralFloat = 4.56F,
    optionalLiteralBool = true,
    requiredBadDescription = "<requiredBadDescription>",
    optionalNullableList = new List<object>()
    {
        1234
    },
    requiredNullableList = new List<object>()
    {
        1234
    },
});
Result result = client.AnonymousBody(content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="FriendlyModelAsync(Friend,CancellationToken)">
      <example>
This sample shows how to call FriendlyModelAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Friend notFriend = new Friend("<name>");
Result<Friend> result = await client.FriendlyModelAsync(notFriend);
]]></code>
This sample shows how to call FriendlyModelAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Friend notFriend = new Friend("<name>");
Result<Friend> result = await client.FriendlyModelAsync(notFriend);
]]></code></example>
    </member>
    <member name="FriendlyModel(Friend,CancellationToken)">
      <example>
This sample shows how to call FriendlyModel.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Friend notFriend = new Friend("<name>");
Result<Friend> result = client.FriendlyModel(notFriend);
]]></code>
This sample shows how to call FriendlyModel with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Friend notFriend = new Friend("<name>");
Result<Friend> result = client.FriendlyModel(notFriend);
]]></code></example>
    </member>
    <member name="FriendlyModelAsync(RequestContent,PipelineOptions)">
      <example>
This sample shows how to call FriendlyModelAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Result result = await client.FriendlyModelAsync(content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
]]></code>
This sample shows how to call FriendlyModelAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Result result = await client.FriendlyModelAsync(content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="FriendlyModel(RequestContent,PipelineOptions)">
      <example>
This sample shows how to call FriendlyModel and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Result result = client.FriendlyModel(content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
]]></code>
This sample shows how to call FriendlyModel with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Result result = client.FriendlyModel(content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="AddTimeHeaderAsync(PipelineOptions)">
      <example>
This sample shows how to call AddTimeHeaderAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = await client.AddTimeHeaderAsync();
Console.WriteLine(result.Status);
]]></code>
This sample shows how to call AddTimeHeaderAsync with all request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = await client.AddTimeHeaderAsync();
Console.WriteLine(result.Status);
]]></code></example>
    </member>
    <member name="AddTimeHeader(PipelineOptions)">
      <example>
This sample shows how to call AddTimeHeader.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = client.AddTimeHeader();
Console.WriteLine(result.Status);
]]></code>
This sample shows how to call AddTimeHeader with all request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = client.AddTimeHeader();
Console.WriteLine(result.Status);
]]></code></example>
    </member>
    <member name="StringFormatAsync(Guid,ModelWithFormat,CancellationToken)">
      <example>
This sample shows how to call StringFormatAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

ModelWithFormat body = new ModelWithFormat(new Uri("http://localhost:3000"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
Result result = await client.StringFormatAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), body);
Console.WriteLine(result.Status);
]]></code>
This sample shows how to call StringFormatAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

ModelWithFormat body = new ModelWithFormat(new Uri("http://localhost:3000"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
Result result = await client.StringFormatAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), body);
Console.WriteLine(result.Status);
]]></code></example>
    </member>
    <member name="StringFormat(Guid,ModelWithFormat,CancellationToken)">
      <example>
This sample shows how to call StringFormat.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

ModelWithFormat body = new ModelWithFormat(new Uri("http://localhost:3000"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
Result result = client.StringFormat(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), body);
Console.WriteLine(result.Status);
]]></code>
This sample shows how to call StringFormat with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

ModelWithFormat body = new ModelWithFormat(new Uri("http://localhost:3000"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
Result result = client.StringFormat(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), body);
Console.WriteLine(result.Status);
]]></code></example>
    </member>
    <member name="StringFormatAsync(Guid,RequestContent,PipelineOptions)">
      <example>
This sample shows how to call StringFormatAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    sourceUrl = "http://localhost:3000",
    guid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
});
Result result = await client.StringFormatAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);
Console.WriteLine(result.Status);
]]></code>
This sample shows how to call StringFormatAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    sourceUrl = "http://localhost:3000",
    guid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
});
Result result = await client.StringFormatAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);
Console.WriteLine(result.Status);
]]></code></example>
    </member>
    <member name="StringFormat(Guid,RequestContent,PipelineOptions)">
      <example>
This sample shows how to call StringFormat.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    sourceUrl = "http://localhost:3000",
    guid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
});
Result result = client.StringFormat(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);
Console.WriteLine(result.Status);
]]></code>
This sample shows how to call StringFormat with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    sourceUrl = "http://localhost:3000",
    guid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
});
Result result = client.StringFormat(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);
Console.WriteLine(result.Status);
]]></code></example>
    </member>
    <member name="ProjectedNameModelAsync(ProjectedModel,CancellationToken)">
      <example>
This sample shows how to call ProjectedNameModelAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

ProjectedModel modelWithProjectedName = new ProjectedModel("<name>");
Result<ProjectedModel> result = await client.ProjectedNameModelAsync(modelWithProjectedName);
]]></code>
This sample shows how to call ProjectedNameModelAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

ProjectedModel modelWithProjectedName = new ProjectedModel("<name>");
Result<ProjectedModel> result = await client.ProjectedNameModelAsync(modelWithProjectedName);
]]></code></example>
    </member>
    <member name="ProjectedNameModel(ProjectedModel,CancellationToken)">
      <example>
This sample shows how to call ProjectedNameModel.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

ProjectedModel modelWithProjectedName = new ProjectedModel("<name>");
Result<ProjectedModel> result = client.ProjectedNameModel(modelWithProjectedName);
]]></code>
This sample shows how to call ProjectedNameModel with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

ProjectedModel modelWithProjectedName = new ProjectedModel("<name>");
Result<ProjectedModel> result = client.ProjectedNameModel(modelWithProjectedName);
]]></code></example>
    </member>
    <member name="ProjectedNameModelAsync(RequestContent,PipelineOptions)">
      <example>
This sample shows how to call ProjectedNameModelAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Result result = await client.ProjectedNameModelAsync(content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
]]></code>
This sample shows how to call ProjectedNameModelAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Result result = await client.ProjectedNameModelAsync(content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="ProjectedNameModel(RequestContent,PipelineOptions)">
      <example>
This sample shows how to call ProjectedNameModel and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Result result = client.ProjectedNameModel(content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
]]></code>
This sample shows how to call ProjectedNameModel with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Result result = client.ProjectedNameModel(content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="ReturnsAnonymousModelAsync(PipelineOptions)">
      <example>
This sample shows how to call ReturnsAnonymousModelAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = await client.ReturnsAnonymousModelAsync(null);

Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ReturnsAnonymousModelAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = await client.ReturnsAnonymousModelAsync(null);

Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="ReturnsAnonymousModel(PipelineOptions)">
      <example>
This sample shows how to call ReturnsAnonymousModel and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = client.ReturnsAnonymousModel(null);

Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ReturnsAnonymousModel with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = client.ReturnsAnonymousModel(null);

Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="HeadAsBooleanAsync(string,PipelineOptions)">
      <example>
This sample shows how to call HeadAsBooleanAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result<bool> result = await client.HeadAsBooleanAsync("<id>");
Console.WriteLine(result.GetRawResult().Status);
]]></code>
This sample shows how to call HeadAsBooleanAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result<bool> result = await client.HeadAsBooleanAsync("<id>");
Console.WriteLine(result.GetRawResult().Status);
]]></code></example>
    </member>
    <member name="HeadAsBoolean(string,PipelineOptions)">
      <example>
This sample shows how to call HeadAsBoolean.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result<bool> result = client.HeadAsBoolean("<id>");
Console.WriteLine(result.GetRawResult().Status);
]]></code>
This sample shows how to call HeadAsBoolean with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result<bool> result = client.HeadAsBoolean("<id>");
Console.WriteLine(result.GetRawResult().Status);
]]></code></example>
    </member>
    <member name="SayHiAsync(string,string,string,PipelineOptions)">
      <example>
This sample shows how to call SayHiAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = await client.SayHiAsync("<headParameter>", "<queryParameter>", null, null);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call SayHiAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = await client.SayHiAsync("<headParameter>", "<queryParameter>", "<optionalQuery>", null);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="SayHi(string,string,string,PipelineOptions)">
      <example>
This sample shows how to call SayHi and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = client.SayHi("<headParameter>", "<queryParameter>", null, null);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call SayHi with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = client.SayHi("<headParameter>", "<queryParameter>", "<optionalQuery>", null);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="HelloAgainAsync(string,string,RoundTripModel,CancellationToken)" />
    <member name="HelloAgain(string,string,RoundTripModel,CancellationToken)" />
    <member name="HelloAgainAsync(string,string,RequestContent,PipelineOptions)">
      <example>
This sample shows how to call HelloAgainAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new List<object>()
    {
        "1"
    },
    requiredDictionary = new
    {
        key = "1",
    },
    requiredModel = new
    {
        name = "<name>",
        requiredUnion = "<requiredUnion>",
        requiredLiteralString = "accept",
        requiredLiteralInt = 123,
        requiredLiteralFloat = 1.23F,
        requiredLiteralBool = false,
        requiredBadDescription = "<requiredBadDescription>",
        requiredNullableList = new List<object>()
        {
            1234
        },
    },
    requiredUnknown = new object(),
    requiredRecordUnknown = new
    {
        key = new object(),
    },
    modelWithRequiredNullable = new
    {
        requiredNullablePrimitive = 1234,
        requiredExtensibleEnum = "1",
        requiredFixedEnum = "1",
    },
});
Result result = await client.HelloAgainAsync("<p2>", "<p1>", content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("requiredString").ToString());
Console.WriteLine(result0.GetProperty("requiredInt").ToString());
Console.WriteLine(result0.GetProperty("requiredCollection")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result0.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("modelWithRequiredNullable").GetProperty("requiredNullablePrimitive").ToString());
Console.WriteLine(result0.GetProperty("modelWithRequiredNullable").GetProperty("requiredExtensibleEnum").ToString());
Console.WriteLine(result0.GetProperty("modelWithRequiredNullable").GetProperty("requiredFixedEnum").ToString());
]]></code>
This sample shows how to call HelloAgainAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new List<object>()
    {
        "1"
    },
    requiredDictionary = new
    {
        key = "1",
    },
    requiredModel = new
    {
        name = "<name>",
        requiredUnion = "<requiredUnion>",
        requiredLiteralString = "accept",
        requiredLiteralInt = 123,
        requiredLiteralFloat = 1.23F,
        requiredLiteralBool = false,
        optionalLiteralString = "reject",
        optionalLiteralInt = 456,
        optionalLiteralFloat = 4.56F,
        optionalLiteralBool = true,
        requiredBadDescription = "<requiredBadDescription>",
        optionalNullableList = new List<object>()
        {
            1234
        },
        requiredNullableList = new List<object>()
        {
            1234
        },
    },
    intExtensibleEnum = 1,
    intExtensibleEnumCollection = new List<object>()
    {
        1
    },
    floatExtensibleEnum = 1,
    floatExtensibleEnumCollection = new List<object>()
    {
        1
    },
    floatFixedEnum = 1.1F,
    floatFixedEnumCollection = new List<object>()
    {
        1.1F
    },
    intFixedEnum = 1,
    intFixedEnumCollection = new List<object>()
    {
        1
    },
    stringFixedEnum = "1",
    requiredUnknown = new object(),
    optionalUnknown = new object(),
    requiredRecordUnknown = new
    {
        key = new object(),
    },
    optionalRecordUnknown = new
    {
        key = new object(),
    },
    modelWithRequiredNullable = new
    {
        requiredNullablePrimitive = 1234,
        requiredExtensibleEnum = "1",
        requiredFixedEnum = "1",
    },
});
Result result = await client.HelloAgainAsync("<p2>", "<p1>", content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("requiredString").ToString());
Console.WriteLine(result0.GetProperty("requiredInt").ToString());
Console.WriteLine(result0.GetProperty("requiredCollection")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("intExtensibleEnum").ToString());
Console.WriteLine(result0.GetProperty("intExtensibleEnumCollection")[0].ToString());
Console.WriteLine(result0.GetProperty("floatExtensibleEnum").ToString());
Console.WriteLine(result0.GetProperty("floatExtensibleEnumCollection")[0].ToString());
Console.WriteLine(result0.GetProperty("floatFixedEnum").ToString());
Console.WriteLine(result0.GetProperty("floatFixedEnumCollection")[0].ToString());
Console.WriteLine(result0.GetProperty("intFixedEnum").ToString());
Console.WriteLine(result0.GetProperty("intFixedEnumCollection")[0].ToString());
Console.WriteLine(result0.GetProperty("stringFixedEnum").ToString());
Console.WriteLine(result0.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result0.GetProperty("optionalUnknown").ToString());
Console.WriteLine(result0.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("optionalRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("readOnlyOptionalRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("modelWithRequiredNullable").GetProperty("requiredNullablePrimitive").ToString());
Console.WriteLine(result0.GetProperty("modelWithRequiredNullable").GetProperty("requiredExtensibleEnum").ToString());
Console.WriteLine(result0.GetProperty("modelWithRequiredNullable").GetProperty("requiredFixedEnum").ToString());
]]></code></example>
    </member>
    <member name="HelloAgain(string,string,RequestContent,PipelineOptions)">
      <example>
This sample shows how to call HelloAgain and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new List<object>()
    {
        "1"
    },
    requiredDictionary = new
    {
        key = "1",
    },
    requiredModel = new
    {
        name = "<name>",
        requiredUnion = "<requiredUnion>",
        requiredLiteralString = "accept",
        requiredLiteralInt = 123,
        requiredLiteralFloat = 1.23F,
        requiredLiteralBool = false,
        requiredBadDescription = "<requiredBadDescription>",
        requiredNullableList = new List<object>()
        {
            1234
        },
    },
    requiredUnknown = new object(),
    requiredRecordUnknown = new
    {
        key = new object(),
    },
    modelWithRequiredNullable = new
    {
        requiredNullablePrimitive = 1234,
        requiredExtensibleEnum = "1",
        requiredFixedEnum = "1",
    },
});
Result result = client.HelloAgain("<p2>", "<p1>", content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("requiredString").ToString());
Console.WriteLine(result0.GetProperty("requiredInt").ToString());
Console.WriteLine(result0.GetProperty("requiredCollection")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result0.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("modelWithRequiredNullable").GetProperty("requiredNullablePrimitive").ToString());
Console.WriteLine(result0.GetProperty("modelWithRequiredNullable").GetProperty("requiredExtensibleEnum").ToString());
Console.WriteLine(result0.GetProperty("modelWithRequiredNullable").GetProperty("requiredFixedEnum").ToString());
]]></code>
This sample shows how to call HelloAgain with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new List<object>()
    {
        "1"
    },
    requiredDictionary = new
    {
        key = "1",
    },
    requiredModel = new
    {
        name = "<name>",
        requiredUnion = "<requiredUnion>",
        requiredLiteralString = "accept",
        requiredLiteralInt = 123,
        requiredLiteralFloat = 1.23F,
        requiredLiteralBool = false,
        optionalLiteralString = "reject",
        optionalLiteralInt = 456,
        optionalLiteralFloat = 4.56F,
        optionalLiteralBool = true,
        requiredBadDescription = "<requiredBadDescription>",
        optionalNullableList = new List<object>()
        {
            1234
        },
        requiredNullableList = new List<object>()
        {
            1234
        },
    },
    intExtensibleEnum = 1,
    intExtensibleEnumCollection = new List<object>()
    {
        1
    },
    floatExtensibleEnum = 1,
    floatExtensibleEnumCollection = new List<object>()
    {
        1
    },
    floatFixedEnum = 1.1F,
    floatFixedEnumCollection = new List<object>()
    {
        1.1F
    },
    intFixedEnum = 1,
    intFixedEnumCollection = new List<object>()
    {
        1
    },
    stringFixedEnum = "1",
    requiredUnknown = new object(),
    optionalUnknown = new object(),
    requiredRecordUnknown = new
    {
        key = new object(),
    },
    optionalRecordUnknown = new
    {
        key = new object(),
    },
    modelWithRequiredNullable = new
    {
        requiredNullablePrimitive = 1234,
        requiredExtensibleEnum = "1",
        requiredFixedEnum = "1",
    },
});
Result result = client.HelloAgain("<p2>", "<p1>", content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("requiredString").ToString());
Console.WriteLine(result0.GetProperty("requiredInt").ToString());
Console.WriteLine(result0.GetProperty("requiredCollection")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("intExtensibleEnum").ToString());
Console.WriteLine(result0.GetProperty("intExtensibleEnumCollection")[0].ToString());
Console.WriteLine(result0.GetProperty("floatExtensibleEnum").ToString());
Console.WriteLine(result0.GetProperty("floatExtensibleEnumCollection")[0].ToString());
Console.WriteLine(result0.GetProperty("floatFixedEnum").ToString());
Console.WriteLine(result0.GetProperty("floatFixedEnumCollection")[0].ToString());
Console.WriteLine(result0.GetProperty("intFixedEnum").ToString());
Console.WriteLine(result0.GetProperty("intFixedEnumCollection")[0].ToString());
Console.WriteLine(result0.GetProperty("stringFixedEnum").ToString());
Console.WriteLine(result0.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result0.GetProperty("optionalUnknown").ToString());
Console.WriteLine(result0.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("optionalRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("readOnlyOptionalRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("modelWithRequiredNullable").GetProperty("requiredNullablePrimitive").ToString());
Console.WriteLine(result0.GetProperty("modelWithRequiredNullable").GetProperty("requiredExtensibleEnum").ToString());
Console.WriteLine(result0.GetProperty("modelWithRequiredNullable").GetProperty("requiredFixedEnum").ToString());
]]></code></example>
    </member>
    <member name="NoContentTypeAsync(string,string,RequestContent,PipelineOptions)">
      <example>
This sample shows how to call NoContentTypeAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new List<object>()
    {
        "1"
    },
    requiredDictionary = new
    {
        key = "1",
    },
    requiredModel = new
    {
        name = "<name>",
        requiredUnion = "<requiredUnion>",
        requiredLiteralString = "accept",
        requiredLiteralInt = 123,
        requiredLiteralFloat = 1.23F,
        requiredLiteralBool = false,
        requiredBadDescription = "<requiredBadDescription>",
        requiredNullableList = new List<object>()
        {
            1234
        },
    },
    requiredUnknown = new object(),
    requiredRecordUnknown = new
    {
        key = new object(),
    },
    modelWithRequiredNullable = new
    {
        requiredNullablePrimitive = 1234,
        requiredExtensibleEnum = "1",
        requiredFixedEnum = "1",
    },
});
Result result = await client.NoContentTypeAsync("<p2>", "<p1>", content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("requiredString").ToString());
Console.WriteLine(result0.GetProperty("requiredInt").ToString());
Console.WriteLine(result0.GetProperty("requiredCollection")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result0.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("modelWithRequiredNullable").GetProperty("requiredNullablePrimitive").ToString());
Console.WriteLine(result0.GetProperty("modelWithRequiredNullable").GetProperty("requiredExtensibleEnum").ToString());
Console.WriteLine(result0.GetProperty("modelWithRequiredNullable").GetProperty("requiredFixedEnum").ToString());
]]></code>
This sample shows how to call NoContentTypeAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new List<object>()
    {
        "1"
    },
    requiredDictionary = new
    {
        key = "1",
    },
    requiredModel = new
    {
        name = "<name>",
        requiredUnion = "<requiredUnion>",
        requiredLiteralString = "accept",
        requiredLiteralInt = 123,
        requiredLiteralFloat = 1.23F,
        requiredLiteralBool = false,
        optionalLiteralString = "reject",
        optionalLiteralInt = 456,
        optionalLiteralFloat = 4.56F,
        optionalLiteralBool = true,
        requiredBadDescription = "<requiredBadDescription>",
        optionalNullableList = new List<object>()
        {
            1234
        },
        requiredNullableList = new List<object>()
        {
            1234
        },
    },
    intExtensibleEnum = 1,
    intExtensibleEnumCollection = new List<object>()
    {
        1
    },
    floatExtensibleEnum = 1,
    floatExtensibleEnumCollection = new List<object>()
    {
        1
    },
    floatFixedEnum = 1.1F,
    floatFixedEnumCollection = new List<object>()
    {
        1.1F
    },
    intFixedEnum = 1,
    intFixedEnumCollection = new List<object>()
    {
        1
    },
    stringFixedEnum = "1",
    requiredUnknown = new object(),
    optionalUnknown = new object(),
    requiredRecordUnknown = new
    {
        key = new object(),
    },
    optionalRecordUnknown = new
    {
        key = new object(),
    },
    modelWithRequiredNullable = new
    {
        requiredNullablePrimitive = 1234,
        requiredExtensibleEnum = "1",
        requiredFixedEnum = "1",
    },
});
Result result = await client.NoContentTypeAsync("<p2>", "<p1>", content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("requiredString").ToString());
Console.WriteLine(result0.GetProperty("requiredInt").ToString());
Console.WriteLine(result0.GetProperty("requiredCollection")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("intExtensibleEnum").ToString());
Console.WriteLine(result0.GetProperty("intExtensibleEnumCollection")[0].ToString());
Console.WriteLine(result0.GetProperty("floatExtensibleEnum").ToString());
Console.WriteLine(result0.GetProperty("floatExtensibleEnumCollection")[0].ToString());
Console.WriteLine(result0.GetProperty("floatFixedEnum").ToString());
Console.WriteLine(result0.GetProperty("floatFixedEnumCollection")[0].ToString());
Console.WriteLine(result0.GetProperty("intFixedEnum").ToString());
Console.WriteLine(result0.GetProperty("intFixedEnumCollection")[0].ToString());
Console.WriteLine(result0.GetProperty("stringFixedEnum").ToString());
Console.WriteLine(result0.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result0.GetProperty("optionalUnknown").ToString());
Console.WriteLine(result0.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("optionalRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("readOnlyOptionalRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("modelWithRequiredNullable").GetProperty("requiredNullablePrimitive").ToString());
Console.WriteLine(result0.GetProperty("modelWithRequiredNullable").GetProperty("requiredExtensibleEnum").ToString());
Console.WriteLine(result0.GetProperty("modelWithRequiredNullable").GetProperty("requiredFixedEnum").ToString());
]]></code></example>
    </member>
    <member name="NoContentType(string,string,RequestContent,PipelineOptions)">
      <example>
This sample shows how to call NoContentType and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new List<object>()
    {
        "1"
    },
    requiredDictionary = new
    {
        key = "1",
    },
    requiredModel = new
    {
        name = "<name>",
        requiredUnion = "<requiredUnion>",
        requiredLiteralString = "accept",
        requiredLiteralInt = 123,
        requiredLiteralFloat = 1.23F,
        requiredLiteralBool = false,
        requiredBadDescription = "<requiredBadDescription>",
        requiredNullableList = new List<object>()
        {
            1234
        },
    },
    requiredUnknown = new object(),
    requiredRecordUnknown = new
    {
        key = new object(),
    },
    modelWithRequiredNullable = new
    {
        requiredNullablePrimitive = 1234,
        requiredExtensibleEnum = "1",
        requiredFixedEnum = "1",
    },
});
Result result = client.NoContentType("<p2>", "<p1>", content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("requiredString").ToString());
Console.WriteLine(result0.GetProperty("requiredInt").ToString());
Console.WriteLine(result0.GetProperty("requiredCollection")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result0.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("modelWithRequiredNullable").GetProperty("requiredNullablePrimitive").ToString());
Console.WriteLine(result0.GetProperty("modelWithRequiredNullable").GetProperty("requiredExtensibleEnum").ToString());
Console.WriteLine(result0.GetProperty("modelWithRequiredNullable").GetProperty("requiredFixedEnum").ToString());
]]></code>
This sample shows how to call NoContentType with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new List<object>()
    {
        "1"
    },
    requiredDictionary = new
    {
        key = "1",
    },
    requiredModel = new
    {
        name = "<name>",
        requiredUnion = "<requiredUnion>",
        requiredLiteralString = "accept",
        requiredLiteralInt = 123,
        requiredLiteralFloat = 1.23F,
        requiredLiteralBool = false,
        optionalLiteralString = "reject",
        optionalLiteralInt = 456,
        optionalLiteralFloat = 4.56F,
        optionalLiteralBool = true,
        requiredBadDescription = "<requiredBadDescription>",
        optionalNullableList = new List<object>()
        {
            1234
        },
        requiredNullableList = new List<object>()
        {
            1234
        },
    },
    intExtensibleEnum = 1,
    intExtensibleEnumCollection = new List<object>()
    {
        1
    },
    floatExtensibleEnum = 1,
    floatExtensibleEnumCollection = new List<object>()
    {
        1
    },
    floatFixedEnum = 1.1F,
    floatFixedEnumCollection = new List<object>()
    {
        1.1F
    },
    intFixedEnum = 1,
    intFixedEnumCollection = new List<object>()
    {
        1
    },
    stringFixedEnum = "1",
    requiredUnknown = new object(),
    optionalUnknown = new object(),
    requiredRecordUnknown = new
    {
        key = new object(),
    },
    optionalRecordUnknown = new
    {
        key = new object(),
    },
    modelWithRequiredNullable = new
    {
        requiredNullablePrimitive = 1234,
        requiredExtensibleEnum = "1",
        requiredFixedEnum = "1",
    },
});
Result result = client.NoContentType("<p2>", "<p1>", content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("requiredString").ToString());
Console.WriteLine(result0.GetProperty("requiredInt").ToString());
Console.WriteLine(result0.GetProperty("requiredCollection")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredModel").GetProperty("requiredNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("intExtensibleEnum").ToString());
Console.WriteLine(result0.GetProperty("intExtensibleEnumCollection")[0].ToString());
Console.WriteLine(result0.GetProperty("floatExtensibleEnum").ToString());
Console.WriteLine(result0.GetProperty("floatExtensibleEnumCollection")[0].ToString());
Console.WriteLine(result0.GetProperty("floatFixedEnum").ToString());
Console.WriteLine(result0.GetProperty("floatFixedEnumCollection")[0].ToString());
Console.WriteLine(result0.GetProperty("intFixedEnum").ToString());
Console.WriteLine(result0.GetProperty("intFixedEnumCollection")[0].ToString());
Console.WriteLine(result0.GetProperty("stringFixedEnum").ToString());
Console.WriteLine(result0.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result0.GetProperty("optionalUnknown").ToString());
Console.WriteLine(result0.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("optionalRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("readOnlyOptionalRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result0.GetProperty("modelWithRequiredNullable").GetProperty("requiredNullablePrimitive").ToString());
Console.WriteLine(result0.GetProperty("modelWithRequiredNullable").GetProperty("requiredExtensibleEnum").ToString());
Console.WriteLine(result0.GetProperty("modelWithRequiredNullable").GetProperty("requiredFixedEnum").ToString());
]]></code></example>
    </member>
    <member name="HelloDemo2Async(CancellationToken)" />
    <member name="HelloDemo2(CancellationToken)" />
    <member name="HelloDemo2Async(PipelineOptions)">
      <example>
This sample shows how to call HelloDemo2Async and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = await client.HelloDemo2Async(null);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call HelloDemo2Async with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = await client.HelloDemo2Async(null);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="HelloDemo2(PipelineOptions)">
      <example>
This sample shows how to call HelloDemo2 and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = client.HelloDemo2(null);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call HelloDemo2 with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = client.HelloDemo2(null);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="CreateLiteralAsync(Thing,CancellationToken)" />
    <member name="CreateLiteral(Thing,CancellationToken)" />
    <member name="CreateLiteralAsync(RequestContent,PipelineOptions)">
      <example>
This sample shows how to call CreateLiteralAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    requiredBadDescription = "<requiredBadDescription>",
    requiredNullableList = new List<object>()
    {
        1234
    },
});
Result result = await client.CreateLiteralAsync(content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call CreateLiteralAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    optionalLiteralString = "reject",
    optionalLiteralInt = 456,
    optionalLiteralFloat = 4.56F,
    optionalLiteralBool = true,
    requiredBadDescription = "<requiredBadDescription>",
    optionalNullableList = new List<object>()
    {
        1234
    },
    requiredNullableList = new List<object>()
    {
        1234
    },
});
Result result = await client.CreateLiteralAsync(content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="CreateLiteral(RequestContent,PipelineOptions)">
      <example>
This sample shows how to call CreateLiteral and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    requiredBadDescription = "<requiredBadDescription>",
    requiredNullableList = new List<object>()
    {
        1234
    },
});
Result result = client.CreateLiteral(content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call CreateLiteral with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    optionalLiteralString = "reject",
    optionalLiteralInt = 456,
    optionalLiteralFloat = 4.56F,
    optionalLiteralBool = true,
    requiredBadDescription = "<requiredBadDescription>",
    optionalNullableList = new List<object>()
    {
        1234
    },
    requiredNullableList = new List<object>()
    {
        1234
    },
});
Result result = client.CreateLiteral(content);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="HelloLiteralAsync(CancellationToken)" />
    <member name="HelloLiteral(CancellationToken)" />
    <member name="HelloLiteralAsync(PipelineOptions)">
      <example>
This sample shows how to call HelloLiteralAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = await client.HelloLiteralAsync(null);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call HelloLiteralAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = await client.HelloLiteralAsync(null);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="HelloLiteral(PipelineOptions)">
      <example>
This sample shows how to call HelloLiteral and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = client.HelloLiteral(null);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call HelloLiteral with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = client.HelloLiteral(null);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.GetProperty("name").ToString());
Console.WriteLine(result0.GetProperty("requiredUnion").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result0.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result0.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result0.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result0.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="GetUnknownValueAsync(PipelineOptions)">
      <example>
This sample shows how to call GetUnknownValueAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = await client.GetUnknownValueAsync(null);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.ToString());
]]></code>
This sample shows how to call GetUnknownValueAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = await client.GetUnknownValueAsync(null);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.ToString());
]]></code></example>
    </member>
    <member name="GetUnknownValue(PipelineOptions)">
      <example>
This sample shows how to call GetUnknownValue and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = client.GetUnknownValue(null);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.ToString());
]]></code>
This sample shows how to call GetUnknownValue with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
UnbrandedTypeSpecClient client = new UnbrandedTypeSpecClient(endpoint, credential);

Result result = client.GetUnknownValue(null);

JsonElement result0 = JsonDocument.Parse(result.ContentStream).RootElement;
Console.WriteLine(result0.ToString());
]]></code></example>
    </member>
    <member name="InternalProtocolAsync(Thing,CancellationToken)" />
    <member name="InternalProtocol(Thing,CancellationToken)" />
    <member name="InternalProtocolAsync(RequestContent,PipelineOptions)" />
    <member name="InternalProtocol(RequestContent,PipelineOptions)" />
    <member name="StillConvenientValueAsync(CancellationToken)" />
    <member name="StillConvenientValue(CancellationToken)" />
    <member name="StillConvenientAsync(PipelineOptions)" />
    <member name="StillConvenient(PipelineOptions)" />
  </members>
</doc>