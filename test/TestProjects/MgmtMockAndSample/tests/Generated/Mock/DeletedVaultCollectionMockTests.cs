// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TestFramework;

namespace MgmtMockAndSample.Tests.Mock
{
    /// <summary> Test for DeletedVaultCollection. </summary>
    public partial class DeletedVaultCollectionMockTests : MockTestBase
    {
        public DeletedVaultCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        [RecordedTest]
        public async Task Exists()
        {
            // Example: Retrieve a deleted vault

            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000");
            SubscriptionResource subscriptionResource = GetArmClient().GetSubscriptionResource(subscriptionResourceId);
            var collection = subscriptionResource.GetDeletedVaults();
            await collection.ExistsAsync(new AzureLocation("westus"), "sample-vault");
        }

        [RecordedTest]
        public async Task Get()
        {
            // Example: Retrieve a deleted vault

            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier("00000000-0000-0000-0000-000000000000");
            SubscriptionResource subscriptionResource = GetArmClient().GetSubscriptionResource(subscriptionResourceId);
            var collection = subscriptionResource.GetDeletedVaults();
            await collection.GetAsync(new AzureLocation("westus"), "sample-vault");
        }
    }
}
