// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace MgmtMockAndSample.Models
{
    internal partial class UnknownFirewallPolicyRule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            writer.WritePropertyName("ruleType"u8);
            writer.WriteStringValue(RuleType.ToString());
            if (Optional.IsDefined(NewStringSerializeProperty))
            {
                writer.WritePropertyName("newStringSerializeProperty"u8);
                writer.WriteStringValue(NewStringSerializeProperty);
            }
            if (Optional.IsCollectionDefined(NewArraySerializedProperty))
            {
                writer.WritePropertyName("newArraySerializedProperty"u8);
                writer.WriteStartArray();
                foreach (var item in NewArraySerializedProperty)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("fakeParent"u8);
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(NewDictionarySerializedProperty))
            {
                writer.WritePropertyName("newDictionarySerializedProperty"u8);
                SerializeNameValue(writer);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static UnknownFirewallPolicyRule DeserializeUnknownFirewallPolicyRule(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            string description = default;
            FirewallPolicyRuleType ruleType = "Unknown";
            string newStringSerializeProperty = default;
            IList<string> newArraySerializedProperty = default;
            IDictionary<string, string> newDictionarySerializedProperty = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ruleType"u8))
                {
                    ruleType = new FirewallPolicyRuleType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("newStringSerializeProperty"u8))
                {
                    newStringSerializeProperty = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("newArraySerializedProperty"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    newArraySerializedProperty = array;
                    continue;
                }
                if (property.NameEquals("fakeParent"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("newDictionarySerializedProperty"u8))
                        {
                            DeserializeNameValue(property0, ref newDictionarySerializedProperty);
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new UnknownFirewallPolicyRule(
                name,
                description,
                ruleType,
                newStringSerializeProperty,
                newArraySerializedProperty ?? new ChangeTrackingList<string>(),
                newDictionarySerializedProperty ?? new ChangeTrackingDictionary<string, string>());
        }
    }
}
