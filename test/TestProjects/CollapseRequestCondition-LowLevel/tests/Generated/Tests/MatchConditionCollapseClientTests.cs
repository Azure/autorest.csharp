// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using CollapseRequestCondition_LowLevel;
using NUnit.Framework;

namespace CollapseRequestCondition_LowLevel.Tests
{
    public class MatchConditionCollapseClientTests : CollapseRequestCondition_LowLevelTestBase
    {
        public MatchConditionCollapseClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task CollapseGetWithHead_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            MatchConditionCollapseClient client = CreateMatchConditionCollapseClient(endpoint, credential);

            Response response = await client.CollapseGetWithHeadAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task CollapseGetWithHead_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            MatchConditionCollapseClient client = CreateMatchConditionCollapseClient(endpoint, credential);

            Response response = await client.CollapseGetWithHeadAsync(otherHeader: "<otherHeader>", matchConditions: null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task CollapsePut_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            MatchConditionCollapseClient client = CreateMatchConditionCollapseClient(endpoint, credential);

            RequestContent content = null;
            Response response = await client.CollapsePutAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task CollapsePut_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            MatchConditionCollapseClient client = CreateMatchConditionCollapseClient(endpoint, credential);

            RequestContent content = RequestContent.Create("<body>");
            Response response = await client.CollapsePutAsync(content, matchConditions: null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task CollapseGet_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            MatchConditionCollapseClient client = CreateMatchConditionCollapseClient(endpoint, credential);

            Response response = await client.CollapseGetAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task CollapseGet_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            MatchConditionCollapseClient client = CreateMatchConditionCollapseClient(endpoint, credential);

            Response response = await client.CollapseGetAsync(matchConditions: null);
        }
    }
}
