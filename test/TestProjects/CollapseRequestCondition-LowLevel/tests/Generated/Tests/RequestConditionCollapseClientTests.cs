// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using CollapseRequestCondition_LowLevel;
using NUnit.Framework;

namespace CollapseRequestCondition_LowLevel.Tests
{
    public class RequestConditionCollapseClientTests : CollapseRequestCondition_LowLevelTestBase
    {
        public RequestConditionCollapseClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task CollapsePut_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            RequestConditionCollapseClient client = CreateRequestConditionCollapseClient(credential, endpoint);

            RequestContent content = null;
            Response response = await client.CollapsePutAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task CollapsePut_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            RequestConditionCollapseClient client = CreateRequestConditionCollapseClient(credential, endpoint);

            RequestContent content = RequestContent.Create("<body>");
            Response response = await client.CollapsePutAsync(content, requestConditions: null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task CollapseGet_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            RequestConditionCollapseClient client = CreateRequestConditionCollapseClient(credential, endpoint);

            Response response = await client.CollapseGetAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task CollapseGet_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            RequestConditionCollapseClient client = CreateRequestConditionCollapseClient(credential, endpoint);

            Response response = await client.CollapseGetAsync(requestConditions: null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task MissIfNoneMatchGet_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            RequestConditionCollapseClient client = CreateRequestConditionCollapseClient(credential, endpoint);

            Response response = await client.MissIfNoneMatchGetAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task MissIfNoneMatchGet_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            RequestConditionCollapseClient client = CreateRequestConditionCollapseClient(credential, endpoint);

            Response response = await client.MissIfNoneMatchGetAsync(requestConditions: null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task MissIfMatchGet_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            RequestConditionCollapseClient client = CreateRequestConditionCollapseClient(credential, endpoint);

            Response response = await client.MissIfMatchGetAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task MissIfMatchGet_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            RequestConditionCollapseClient client = CreateRequestConditionCollapseClient(credential, endpoint);

            Response response = await client.MissIfMatchGetAsync(requestConditions: null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task MissIfModifiedSinceGet_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            RequestConditionCollapseClient client = CreateRequestConditionCollapseClient(credential, endpoint);

            Response response = await client.MissIfModifiedSinceGetAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task MissIfModifiedSinceGet_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            RequestConditionCollapseClient client = CreateRequestConditionCollapseClient(credential, endpoint);

            Response response = await client.MissIfModifiedSinceGetAsync(requestConditions: null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task MissIfUnmodifiedSinceGet_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            RequestConditionCollapseClient client = CreateRequestConditionCollapseClient(credential, endpoint);

            Response response = await client.MissIfUnmodifiedSinceGetAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task MissIfUnmodifiedSinceGet_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            RequestConditionCollapseClient client = CreateRequestConditionCollapseClient(credential, endpoint);

            Response response = await client.MissIfUnmodifiedSinceGetAsync(requestConditions: null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task MissIfMatchIfNoneMatchGet_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            RequestConditionCollapseClient client = CreateRequestConditionCollapseClient(credential, endpoint);

            Response response = await client.MissIfMatchIfNoneMatchGetAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task MissIfMatchIfNoneMatchGet_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            RequestConditionCollapseClient client = CreateRequestConditionCollapseClient(credential, endpoint);

            Response response = await client.MissIfMatchIfNoneMatchGetAsync(requestConditions: null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task IfModifiedSinceGet_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            RequestConditionCollapseClient client = CreateRequestConditionCollapseClient(credential, endpoint);

            Response response = await client.IfModifiedSinceGetAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task IfModifiedSinceGet_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            RequestConditionCollapseClient client = CreateRequestConditionCollapseClient(credential, endpoint);

            Response response = await client.IfModifiedSinceGetAsync(requestConditions: null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task IfUnmodifiedSinceGet_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            RequestConditionCollapseClient client = CreateRequestConditionCollapseClient(credential, endpoint);

            Response response = await client.IfUnmodifiedSinceGetAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task IfUnmodifiedSinceGet_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            RequestConditionCollapseClient client = CreateRequestConditionCollapseClient(credential, endpoint);

            Response response = await client.IfUnmodifiedSinceGetAsync(requestConditions: null);
        }
    }
}
