// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace CollapseRequestCondition_LowLevel
{
    // Data plane generated sub-client. The MatchConditionCollapse sub-client.
    /// <summary> The MatchConditionCollapse sub-client. </summary>
    public partial class MatchConditionCollapse
    {
        private const string AuthorizationHeader = "Fake-Subscription-Key";
        private readonly AzureKeyCredential _keyCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of MatchConditionCollapse for mocking. </summary>
        protected MatchConditionCollapse()
        {
        }

        /// <summary> Initializes a new instance of MatchConditionCollapse. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="keyCredential"> The key credential to copy. </param>
        /// <param name="endpoint"> server parameter. </param>
        internal MatchConditionCollapse(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, AzureKeyCredential keyCredential, Uri endpoint)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _keyCredential = keyCredential;
            _endpoint = endpoint;
        }

        /// <param name="otherHeader"> other header. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CollapseGetWithHeadAsync.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new CollapseRequestConditionsClient(credential).GetMatchConditionCollapseClient();
        /// 
        /// Response response = await client.CollapseGetWithHeadAsync();
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call CollapseGetWithHeadAsync with all parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new CollapseRequestConditionsClient(credential).GetMatchConditionCollapseClient();
        /// 
        /// Response response = await client.CollapseGetWithHeadAsync("<otherHeader>", new MatchConditions { IfMatch = "<YOUR_ETAG>" });
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> CollapseGetWithHeadAsync(string otherHeader = null, MatchConditions matchConditions = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("MatchConditionCollapse.CollapseGetWithHead");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCollapseGetWithHeadRequest(otherHeader, matchConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="otherHeader"> other header. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CollapseGetWithHead.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new CollapseRequestConditionsClient(credential).GetMatchConditionCollapseClient();
        /// 
        /// Response response = client.CollapseGetWithHead();
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call CollapseGetWithHead with all parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new CollapseRequestConditionsClient(credential).GetMatchConditionCollapseClient();
        /// 
        /// Response response = client.CollapseGetWithHead("<otherHeader>", new MatchConditions { IfMatch = "<YOUR_ETAG>" });
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response CollapseGetWithHead(string otherHeader = null, MatchConditions matchConditions = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("MatchConditionCollapse.CollapseGetWithHead");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCollapseGetWithHeadRequest(otherHeader, matchConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CollapsePutAsync with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new CollapseRequestConditionsClient(credential).GetMatchConditionCollapseClient();
        /// 
        /// var data = "<String>";
        /// 
        /// Response response = await client.CollapsePutAsync(RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call CollapsePutAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new CollapseRequestConditionsClient(credential).GetMatchConditionCollapseClient();
        /// 
        /// var data = "<String>";
        /// 
        /// Response response = await client.CollapsePutAsync(RequestContent.Create(data), new MatchConditions { IfMatch = "<YOUR_ETAG>" });
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> CollapsePutAsync(RequestContent content, MatchConditions matchConditions = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("MatchConditionCollapse.CollapsePut");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCollapsePutRequest(content, matchConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CollapsePut with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new CollapseRequestConditionsClient(credential).GetMatchConditionCollapseClient();
        /// 
        /// var data = "<String>";
        /// 
        /// Response response = client.CollapsePut(RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call CollapsePut with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new CollapseRequestConditionsClient(credential).GetMatchConditionCollapseClient();
        /// 
        /// var data = "<String>";
        /// 
        /// Response response = client.CollapsePut(RequestContent.Create(data), new MatchConditions { IfMatch = "<YOUR_ETAG>" });
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response CollapsePut(RequestContent content, MatchConditions matchConditions = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("MatchConditionCollapse.CollapsePut");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCollapsePutRequest(content, matchConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CollapseGetAsync.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new CollapseRequestConditionsClient(credential).GetMatchConditionCollapseClient();
        /// 
        /// Response response = await client.CollapseGetAsync();
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call CollapseGetAsync with all parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new CollapseRequestConditionsClient(credential).GetMatchConditionCollapseClient();
        /// 
        /// Response response = await client.CollapseGetAsync(new MatchConditions { IfMatch = "<YOUR_ETAG>" });
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> CollapseGetAsync(MatchConditions matchConditions = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("MatchConditionCollapse.CollapseGet");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCollapseGetRequest(matchConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="matchConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CollapseGet.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new CollapseRequestConditionsClient(credential).GetMatchConditionCollapseClient();
        /// 
        /// Response response = client.CollapseGet();
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call CollapseGet with all parameters.
        /// <code><![CDATA[
        /// var credential = new AzureKeyCredential("<key>");
        /// var client = new CollapseRequestConditionsClient(credential).GetMatchConditionCollapseClient();
        /// 
        /// Response response = client.CollapseGet(new MatchConditions { IfMatch = "<YOUR_ETAG>" });
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response CollapseGet(MatchConditions matchConditions = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("MatchConditionCollapse.CollapseGet");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCollapseGetRequest(matchConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateCollapseGetWithHeadRequest(string otherHeader, MatchConditions matchConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/MatchConditionCollapse/withHead", false);
            request.Uri = uri;
            if (otherHeader != null)
            {
                request.Headers.Add("otherHeader", otherHeader);
            }
            if (matchConditions != null)
            {
                request.Headers.Add(matchConditions);
            }
            return message;
        }

        internal HttpMessage CreateCollapsePutRequest(RequestContent content, MatchConditions matchConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/MatchConditionCollapse/", false);
            request.Uri = uri;
            if (matchConditions != null)
            {
                request.Headers.Add(matchConditions);
            }
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateCollapseGetRequest(MatchConditions matchConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/MatchConditionCollapse/", false);
            request.Uri = uri;
            if (matchConditions != null)
            {
                request.Headers.Add(matchConditions);
            }
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
