// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;
using ModelShapes.Models;

namespace ModelShapes
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class SchemaMappingModelFactory
    {
        /// <summary> Initializes new instance of MixedModel class. </summary>
        /// <param name="requiredString"> . </param>
        /// <param name="requiredInt"> . </param>
        /// <param name="requiredStringList"> . </param>
        /// <param name="requiredIntList"> . </param>
        /// <param name="nonRequiredString"> . </param>
        /// <param name="nonRequiredInt"> . </param>
        /// <param name="nonRequiredStringList"> . </param>
        /// <param name="nonRequiredIntList"> . </param>
        /// <param name="requiredNullableString"> . </param>
        /// <param name="requiredNullableInt"> . </param>
        /// <param name="requiredNullableStringList"> . </param>
        /// <param name="requiredNullableIntList"> . </param>
        /// <param name="nonRequiredNullableString"> . </param>
        /// <param name="nonRequiredNullableInt"> . </param>
        /// <param name="nonRequiredNullableStringList"> . </param>
        /// <param name="nonRequiredNullableIntList"> . </param>
        /// <param name="requiredReadonlyInt"> . </param>
        /// <param name="nonRequiredReadonlyInt"> . </param>
        /// <returns> A new <see cref="Models.MixedModel"/> instance for mocking. </returns>
        public static MixedModel MixedModel(string requiredString = default, int requiredInt = default, IEnumerable<string> requiredStringList = default, IEnumerable<int> requiredIntList = default, string nonRequiredString = default, int? nonRequiredInt = default, IEnumerable<string> nonRequiredStringList = default, IEnumerable<int> nonRequiredIntList = default, string requiredNullableString = default, int? requiredNullableInt = default, IEnumerable<string> requiredNullableStringList = default, IEnumerable<int> requiredNullableIntList = default, string nonRequiredNullableString = default, int? nonRequiredNullableInt = default, IEnumerable<string> nonRequiredNullableStringList = default, IEnumerable<int> nonRequiredNullableIntList = default, int requiredReadonlyInt = default, int? nonRequiredReadonlyInt = default)
        {
            var requiredStringListList = requiredStringList?.ToList() ?? new List<string>();
            var requiredIntListList = requiredIntList?.ToList() ?? new List<int>();
            var nonRequiredStringListList = nonRequiredStringList?.ToList() ?? new List<string>();
            var nonRequiredIntListList = nonRequiredIntList?.ToList() ?? new List<int>();
            var requiredNullableStringListList = requiredNullableStringList?.ToList() ?? new List<string>();
            var requiredNullableIntListList = requiredNullableIntList?.ToList() ?? new List<int>();
            var nonRequiredNullableStringListList = nonRequiredNullableStringList?.ToList() ?? new List<string>();
            var nonRequiredNullableIntListList = nonRequiredNullableIntList?.ToList() ?? new List<int>();
            return new MixedModel(requiredString, requiredInt, requiredStringListList, requiredIntListList, nonRequiredString, nonRequiredInt, nonRequiredStringListList, nonRequiredIntListList, requiredNullableString, requiredNullableInt, requiredNullableStringListList, requiredNullableIntListList, nonRequiredNullableString, nonRequiredNullableInt, nonRequiredNullableStringListList, nonRequiredNullableIntListList, requiredReadonlyInt, nonRequiredReadonlyInt);
        }

        /// <summary> Initializes new instance of OutputModel class. </summary>
        /// <param name="requiredString"> . </param>
        /// <param name="requiredInt"> . </param>
        /// <param name="requiredStringList"> . </param>
        /// <param name="requiredIntList"> . </param>
        /// <param name="nonRequiredString"> . </param>
        /// <param name="nonRequiredInt"> . </param>
        /// <param name="nonRequiredStringList"> . </param>
        /// <param name="nonRequiredIntList"> . </param>
        /// <param name="requiredNullableString"> . </param>
        /// <param name="requiredNullableInt"> . </param>
        /// <param name="requiredNullableStringList"> . </param>
        /// <param name="requiredNullableIntList"> . </param>
        /// <param name="nonRequiredNullableString"> . </param>
        /// <param name="nonRequiredNullableInt"> . </param>
        /// <param name="nonRequiredNullableStringList"> . </param>
        /// <param name="nonRequiredNullableIntList"> . </param>
        /// <param name="requiredReadonlyInt"> . </param>
        /// <param name="nonRequiredReadonlyInt"> . </param>
        /// <returns> A new <see cref="Models.OutputModel"/> instance for mocking. </returns>
        public static OutputModel OutputModel(string requiredString = default, int requiredInt = default, IEnumerable<string> requiredStringList = default, IEnumerable<int> requiredIntList = default, string nonRequiredString = default, int? nonRequiredInt = default, IEnumerable<string> nonRequiredStringList = default, IEnumerable<int> nonRequiredIntList = default, string requiredNullableString = default, int? requiredNullableInt = default, IEnumerable<string> requiredNullableStringList = default, IEnumerable<int> requiredNullableIntList = default, string nonRequiredNullableString = default, int? nonRequiredNullableInt = default, IEnumerable<string> nonRequiredNullableStringList = default, IEnumerable<int> nonRequiredNullableIntList = default, int requiredReadonlyInt = default, int? nonRequiredReadonlyInt = default)
        {
            var requiredStringListList = requiredStringList?.ToList() ?? new List<string>();
            var requiredIntListList = requiredIntList?.ToList() ?? new List<int>();
            var nonRequiredStringListList = nonRequiredStringList?.ToList() ?? new List<string>();
            var nonRequiredIntListList = nonRequiredIntList?.ToList() ?? new List<int>();
            var requiredNullableStringListList = requiredNullableStringList?.ToList() ?? new List<string>();
            var requiredNullableIntListList = requiredNullableIntList?.ToList() ?? new List<int>();
            var nonRequiredNullableStringListList = nonRequiredNullableStringList?.ToList() ?? new List<string>();
            var nonRequiredNullableIntListList = nonRequiredNullableIntList?.ToList() ?? new List<int>();
            return new OutputModel(requiredString, requiredInt, requiredStringListList, requiredIntListList, nonRequiredString, nonRequiredInt, nonRequiredStringListList, nonRequiredIntListList, requiredNullableString, requiredNullableInt, requiredNullableStringListList, requiredNullableIntListList, nonRequiredNullableString, nonRequiredNullableInt, nonRequiredNullableStringListList, nonRequiredNullableIntListList, requiredReadonlyInt, nonRequiredReadonlyInt);
        }

        /// <summary> Initializes new instance of MixedModelWithReadonlyProperty class. </summary>
        /// <param name="readonlyProperty"> . </param>
        /// <param name="readonlyListProperty"> . </param>
        /// <returns> A new <see cref="Models.MixedModelWithReadonlyProperty"/> instance for mocking. </returns>
        public static MixedModelWithReadonlyProperty MixedModelWithReadonlyProperty(ReadonlyModel readonlyProperty = default, IEnumerable<ReadonlyModel> readonlyListProperty = default)
        {
            var readonlyListPropertyList = readonlyListProperty?.ToList() ?? new List<ReadonlyModel>();
            return new MixedModelWithReadonlyProperty(readonlyProperty, readonlyListPropertyList);
        }

        /// <summary> Initializes new instance of ReadonlyModel class. </summary>
        /// <param name="name"> . </param>
        /// <returns> A new <see cref="Models.ReadonlyModel"/> instance for mocking. </returns>
        public static ReadonlyModel ReadonlyModel(string name = default)
        {
            return new ReadonlyModel(name);
        }
    }
}
