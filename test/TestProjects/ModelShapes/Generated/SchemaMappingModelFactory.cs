// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;

namespace ModelShapes.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class SchemaMappingModelFactory
    {
        /// <summary> Initializes a new instance of MixedModel. </summary>
        /// <param name="requiredString"> The RequiredString. </param>
        /// <param name="requiredInt"> The RequiredInt. </param>
        /// <param name="requiredStringList"> The RequiredStringList. </param>
        /// <param name="requiredIntList"> The RequiredIntList. </param>
        /// <param name="nonRequiredString"> The NonRequiredString. </param>
        /// <param name="nonRequiredInt"> The NonRequiredInt. </param>
        /// <param name="nonRequiredStringList"> The NonRequiredStringList. </param>
        /// <param name="nonRequiredIntList"> The NonRequiredIntList. </param>
        /// <param name="requiredNullableString"> The RequiredNullableString. </param>
        /// <param name="requiredNullableInt"> The RequiredNullableInt. </param>
        /// <param name="requiredNullableStringList"> The RequiredNullableStringList. </param>
        /// <param name="requiredNullableIntList"> The RequiredNullableIntList. </param>
        /// <param name="nonRequiredNullableString"> The NonRequiredNullableString. </param>
        /// <param name="nonRequiredNullableInt"> The NonRequiredNullableInt. </param>
        /// <param name="nonRequiredNullableStringList"> The NonRequiredNullableStringList. </param>
        /// <param name="nonRequiredNullableIntList"> The NonRequiredNullableIntList. </param>
        /// <param name="requiredReadonlyInt"> The RequiredReadonlyInt. </param>
        /// <param name="nonRequiredReadonlyInt"> The NonRequiredReadonlyInt. </param>
        /// <returns> A new <see cref="Models.MixedModel"/> instance for mocking. </returns>
        public static MixedModel MixedModel(string requiredString = null, int requiredInt = default, IEnumerable<string> requiredStringList = null, IEnumerable<int> requiredIntList = null, string nonRequiredString = null, int? nonRequiredInt = null, IEnumerable<string> nonRequiredStringList = null, IEnumerable<int> nonRequiredIntList = null, string requiredNullableString = null, int? requiredNullableInt = null, IEnumerable<string> requiredNullableStringList = null, IEnumerable<int> requiredNullableIntList = null, string nonRequiredNullableString = null, int? nonRequiredNullableInt = null, IEnumerable<string> nonRequiredNullableStringList = null, IEnumerable<int> nonRequiredNullableIntList = null, int requiredReadonlyInt = default, int? nonRequiredReadonlyInt = null)
        {
            requiredStringList ??= new List<string>();
            requiredIntList ??= new List<int>();
            nonRequiredStringList ??= new List<string>();
            nonRequiredIntList ??= new List<int>();
            requiredNullableStringList ??= new List<string>();
            requiredNullableIntList ??= new List<int>();
            nonRequiredNullableStringList ??= new List<string>();
            nonRequiredNullableIntList ??= new List<int>();

            return new MixedModel(requiredString, requiredInt, requiredStringList?.ToList(), requiredIntList?.ToList(), nonRequiredString, nonRequiredInt, nonRequiredStringList?.ToList(), nonRequiredIntList?.ToList(), requiredNullableString, requiredNullableInt, requiredNullableStringList?.ToList(), requiredNullableIntList?.ToList(), nonRequiredNullableString, nonRequiredNullableInt, nonRequiredNullableStringList?.ToList(), nonRequiredNullableIntList?.ToList(), requiredReadonlyInt, nonRequiredReadonlyInt);
        }

        /// <summary> Initializes a new instance of OutputModel. </summary>
        /// <param name="requiredString"> The RequiredString. </param>
        /// <param name="requiredInt"> The RequiredInt. </param>
        /// <param name="requiredStringList"> The RequiredStringList. </param>
        /// <param name="requiredIntList"> The RequiredIntList. </param>
        /// <param name="nonRequiredString"> The NonRequiredString. </param>
        /// <param name="nonRequiredInt"> The NonRequiredInt. </param>
        /// <param name="nonRequiredStringList"> The NonRequiredStringList. </param>
        /// <param name="nonRequiredIntList"> The NonRequiredIntList. </param>
        /// <param name="requiredNullableString"> The RequiredNullableString. </param>
        /// <param name="requiredNullableInt"> The RequiredNullableInt. </param>
        /// <param name="requiredNullableStringList"> The RequiredNullableStringList. </param>
        /// <param name="requiredNullableIntList"> The RequiredNullableIntList. </param>
        /// <param name="nonRequiredNullableString"> The NonRequiredNullableString. </param>
        /// <param name="nonRequiredNullableInt"> The NonRequiredNullableInt. </param>
        /// <param name="nonRequiredNullableStringList"> The NonRequiredNullableStringList. </param>
        /// <param name="nonRequiredNullableIntList"> The NonRequiredNullableIntList. </param>
        /// <param name="requiredReadonlyInt"> The RequiredReadonlyInt. </param>
        /// <param name="nonRequiredReadonlyInt"> The NonRequiredReadonlyInt. </param>
        /// <returns> A new <see cref="Models.OutputModel"/> instance for mocking. </returns>
        public static OutputModel OutputModel(string requiredString = null, int requiredInt = default, IEnumerable<string> requiredStringList = null, IEnumerable<int> requiredIntList = null, string nonRequiredString = null, int? nonRequiredInt = null, IEnumerable<string> nonRequiredStringList = null, IEnumerable<int> nonRequiredIntList = null, string requiredNullableString = null, int? requiredNullableInt = null, IEnumerable<string> requiredNullableStringList = null, IEnumerable<int> requiredNullableIntList = null, string nonRequiredNullableString = null, int? nonRequiredNullableInt = null, IEnumerable<string> nonRequiredNullableStringList = null, IEnumerable<int> nonRequiredNullableIntList = null, int requiredReadonlyInt = default, int? nonRequiredReadonlyInt = null)
        {
            requiredStringList ??= new List<string>();
            requiredIntList ??= new List<int>();
            nonRequiredStringList ??= new List<string>();
            nonRequiredIntList ??= new List<int>();
            requiredNullableStringList ??= new List<string>();
            requiredNullableIntList ??= new List<int>();
            nonRequiredNullableStringList ??= new List<string>();
            nonRequiredNullableIntList ??= new List<int>();

            return new OutputModel(requiredString, requiredInt, requiredStringList?.ToList(), requiredIntList?.ToList(), nonRequiredString, nonRequiredInt, nonRequiredStringList?.ToList(), nonRequiredIntList?.ToList(), requiredNullableString, requiredNullableInt, requiredNullableStringList?.ToList(), requiredNullableIntList?.ToList(), nonRequiredNullableString, nonRequiredNullableInt, nonRequiredNullableStringList?.ToList(), nonRequiredNullableIntList?.ToList(), requiredReadonlyInt, nonRequiredReadonlyInt);
        }

        /// <summary> Initializes a new instance of MixedModelWithReadonlyProperty. </summary>
        /// <param name="readonlyProperty"> The ReadonlyProperty. </param>
        /// <param name="readonlyListProperty"> The ReadonlyListProperty. </param>
        /// <returns> A new <see cref="Models.MixedModelWithReadonlyProperty"/> instance for mocking. </returns>
        public static MixedModelWithReadonlyProperty MixedModelWithReadonlyProperty(ReadonlyModel readonlyProperty = null, IEnumerable<ReadonlyModel> readonlyListProperty = null)
        {
            readonlyListProperty ??= new List<ReadonlyModel>();

            return new MixedModelWithReadonlyProperty(readonlyProperty, readonlyListProperty?.ToList());
        }

        /// <summary> Initializes a new instance of ReadonlyModel. </summary>
        /// <param name="name"> The Name. </param>
        /// <returns> A new <see cref="Models.ReadonlyModel"/> instance for mocking. </returns>
        public static ReadonlyModel ReadonlyModel(string name = null)
        {
            return new ReadonlyModel(name);
        }
    }
}
