// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using ModelShapes.Models;

namespace ModelShapes
{
    /// <summary> The Service service client. </summary>
    public partial class ServiceClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal ServiceRestClient RestClient { get; }
        /// <summary> Initializes a new instance of ServiceClient for mocking. </summary>
        protected ServiceClient()
        {
        }
        /// <summary> Initializes a new instance of ServiceClient. </summary>
        internal ServiceClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string host = "http://localhost:3000")
        {
            RestClient = new ServiceRestClient(clientDiagnostics, pipeline, host);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <param name="value"> The InputModel to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> InputAsync(InputModel value, CancellationToken cancellationToken = default)
        {
            return await RestClient.InputAsync(value, cancellationToken).ConfigureAwait(false);
        }

        /// <param name="value"> The InputModel to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Input(InputModel value, CancellationToken cancellationToken = default)
        {
            return RestClient.Input(value, cancellationToken);
        }

        /// <param name="value"> The MixedModel to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<MixedModel>> MixedAsync(MixedModel value, CancellationToken cancellationToken = default)
        {
            return await RestClient.MixedAsync(value, cancellationToken).ConfigureAwait(false);
        }

        /// <param name="value"> The MixedModel to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<MixedModel> Mixed(MixedModel value, CancellationToken cancellationToken = default)
        {
            return RestClient.Mixed(value, cancellationToken);
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<OutputModel>> OutputAsync(CancellationToken cancellationToken = default)
        {
            return await RestClient.OutputAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<OutputModel> Output(CancellationToken cancellationToken = default)
        {
            return RestClient.Output(cancellationToken);
        }
    }
}
