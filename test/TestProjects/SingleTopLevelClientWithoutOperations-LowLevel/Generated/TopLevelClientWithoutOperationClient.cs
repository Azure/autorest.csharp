// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace SingleTopLevelClientWithoutOperations_LowLevel
{
    /// <summary> The TopLevelClientWithoutOperation service client. </summary>
    public partial class TopLevelClientWithoutOperationClient
    {
        private const string AuthorizationHeader = "Fake-Subscription-Key";
        private readonly AzureKeyCredential _keyCredential;
        private readonly HttpPipeline _pipeline;
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly Uri _endpoint;

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of TopLevelClientWithoutOperationClient for mocking. </summary>
        protected TopLevelClientWithoutOperationClient()
        {
        }

        /// <summary> Initializes a new instance of TopLevelClientWithoutOperationClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public TopLevelClientWithoutOperationClient(AzureKeyCredential credential, Uri endpoint = null, TopLevelClientWithoutOperationClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            endpoint ??= new Uri("http://localhost:3000");
            options ??= new TopLevelClientWithoutOperationClientOptions();

            _clientDiagnostics = new ClientDiagnostics(options);
            _keyCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new LowLevelCallbackPolicy() }, new HttpPipelinePolicy[] { new AzureKeyCredentialPolicy(_keyCredential, AuthorizationHeader) }, new ResponseClassifier());
            _endpoint = endpoint;
        }

        private volatile Client1Client _cachedClient1Client;
        private volatile Client2Client _cachedClient2Client;
        private volatile Client3Client _cachedClient3Client;

        /// <summary> Initializes a new instance of Client1Client. </summary>
        public virtual Client1Client GetClient1ClientClient()
        {
            return _cachedClient1Client ??= new Client1Client(_clientDiagnostics, _pipeline, _keyCredential, _endpoint);
        }

        /// <summary> Initializes a new instance of Client2Client. </summary>
        public virtual Client2Client GetClient2ClientClient()
        {
            return _cachedClient2Client ??= new Client2Client(_clientDiagnostics, _pipeline, _keyCredential, _endpoint);
        }

        /// <summary> Initializes a new instance of Client3Client. </summary>
        public virtual Client3Client GetClient3ClientClient()
        {
            return _cachedClient3Client ??= new Client3Client(_clientDiagnostics, _pipeline, _keyCredential, _endpoint);
        }
    }
}
