// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace CustomizationsInCadl.Models
{
    public partial class ModelWithCustomizedProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("propertyToMakeInternal");
            writer.WriteNumberValue(PropertyToMakeInternal);
            writer.WritePropertyName("propertyToRename");
            writer.WriteNumberValue(RenamedProperty);
            writer.WritePropertyName("propertyToMakeFloat");
            writer.WriteNumberValue(PropertyToMakeFloat);
            writer.WritePropertyName("propertyToMakeInt");
            writer.WriteNumberValue(PropertyToMakeInt);
            writer.WritePropertyName("propertyToMakeDuration");
            writer.WriteStringValue(PropertyToMakeDuration, "P");
            writer.WritePropertyName("propertyToMakeString");
            writer.WriteStringValue(PropertyToMakeString);
            writer.WritePropertyName("propertyToMakeJsonElement");
            PropertyToMakeJsonElement.WriteTo(writer);
            writer.WritePropertyName("propertyToField");
            writer.WriteStringValue(_propertyToField);
            writer.WritePropertyName("badListName");
            writer.WriteStartArray();
            foreach (var item in GoodListName)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("badDictionaryName");
            writer.WriteStartObject();
            foreach (var item in GoodDictionaryName)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("badListOfListName");
            writer.WriteStartArray();
            foreach (var item in GoodListOfListName)
            {
                writer.WriteStartArray();
                foreach (var item0 in item)
                {
                    writer.WriteStringValue(item0);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndArray();
            writer.WritePropertyName("badListOfDictionaryName");
            writer.WriteStartArray();
            foreach (var item in GoodListOfDictionaryName)
            {
                writer.WriteStartObject();
                foreach (var item0 in item)
                {
                    writer.WritePropertyName(item0.Key);
                    writer.WriteStringValue(item0.Value);
                }
                writer.WriteEndObject();
            }
            writer.WriteEndArray();
            writer.WriteEndObject();
        }

        internal static ModelWithCustomizedProperties DeserializeModelWithCustomizedProperties(JsonElement element)
        {
            int propertyToMakeInternal = default;
            int propertyToRename = default;
            float propertyToMakeFloat = default;
            int propertyToMakeInt = default;
            TimeSpan propertyToMakeDuration = default;
            string propertyToMakeString = default;
            JsonElement propertyToMakeJsonElement = default;
            string propertyToField = default;
            IList<string> badListName = default;
            IDictionary<string, string> badDictionaryName = default;
            IList<IList<string>> badListOfListName = default;
            IList<IDictionary<string, string>> badListOfDictionaryName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("propertyToMakeInternal"))
                {
                    propertyToMakeInternal = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("propertyToRename"))
                {
                    propertyToRename = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("propertyToMakeFloat"))
                {
                    propertyToMakeFloat = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("propertyToMakeInt"))
                {
                    propertyToMakeInt = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("propertyToMakeDuration"))
                {
                    propertyToMakeDuration = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("propertyToMakeString"))
                {
                    propertyToMakeString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("propertyToMakeJsonElement"))
                {
                    propertyToMakeJsonElement = property.Value.Clone();
                    continue;
                }
                if (property.NameEquals("propertyToField"))
                {
                    propertyToField = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("badListName"))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    badListName = array;
                    continue;
                }
                if (property.NameEquals("badDictionaryName"))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    badDictionaryName = dictionary;
                    continue;
                }
                if (property.NameEquals("badListOfListName"))
                {
                    List<IList<string>> array = new List<IList<string>>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        List<string> array0 = new List<string>();
                        foreach (var item0 in item.EnumerateArray())
                        {
                            array0.Add(item0.GetString());
                        }
                        array.Add(array0);
                    }
                    badListOfListName = array;
                    continue;
                }
                if (property.NameEquals("badListOfDictionaryName"))
                {
                    List<IDictionary<string, string>> array = new List<IDictionary<string, string>>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        Dictionary<string, string> dictionary = new Dictionary<string, string>();
                        foreach (var property0 in item.EnumerateObject())
                        {
                            dictionary.Add(property0.Name, property0.Value.GetString());
                        }
                        array.Add(dictionary);
                    }
                    badListOfDictionaryName = array;
                    continue;
                }
            }
            return new ModelWithCustomizedProperties(propertyToMakeInternal, propertyToRename, propertyToMakeFloat, propertyToMakeInt, propertyToMakeDuration, propertyToMakeString, propertyToMakeJsonElement, propertyToField, badListName, badDictionaryName, badListOfListName, badListOfDictionaryName);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static ModelWithCustomizedProperties FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeModelWithCustomizedProperties(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
