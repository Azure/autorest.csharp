<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="RoundTripAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call RoundTripAsync and parse the result.
<code><![CDATA[
var client = new CustomizationsInCadlClient();

var data = new {};

Response response = await client.RoundTripAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call RoundTripAsync with all request content, and how to parse the result.
<code><![CDATA[
var client = new CustomizationsInCadlClient();

var data = new {
    propertyModelToMakeInternal = new {
        requiredInt = 1234,
    },
    propertyModelToRename = new {
        requiredInt = 1234,
    },
    propertyModelToChangeNamespace = new {
        requiredInt = 1234,
    },
    propertyModelWithCustomizedProperties = new {
        propertyToMakeInternal = 1234,
        propertyToRename = 1234,
        propertyToMakeFloat = 1234,
        propertyToMakeInt = 123.45f,
        propertyToMakeDuration = "<propertyToMakeDuration>",
        propertyToMakeString = PT1H23M45S,
        propertyToMakeJsonElement = "<propertyToMakeJsonElement>",
        propertyToField = "<propertyToField>",
    },
    propertyEnumToRename = "1",
    propertyEnumWithValueToRename = "1",
    propertyEnumToBeMadeExtensible = "1",
};

Response response = await client.RoundTripAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("propertyModelToMakeInternal").GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("propertyModelToRename").GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("propertyModelToChangeNamespace").GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeInternal").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToRename").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeFloat").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeInt").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeDuration").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeString").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeJsonElement").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToField").ToString());
Console.WriteLine(result.GetProperty("propertyEnumToRename").ToString());
Console.WriteLine(result.GetProperty("propertyEnumWithValueToRename").ToString());
Console.WriteLine(result.GetProperty("propertyEnumToBeMadeExtensible").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>RootModel</c>:
<code>{
  propertyModelToMakeInternal: {
    requiredInt: number, # Required.
  }, # Optional.
  propertyModelToRename: {
    requiredInt: number, # Required.
  }, # Optional.
  propertyModelToChangeNamespace: {
    requiredInt: number, # Required.
  }, # Optional.
  propertyModelWithCustomizedProperties: {
    propertyToMakeInternal: number, # Required.
    propertyToRename: number, # Required.
    propertyToMakeFloat: number, # Required.
    propertyToMakeInt: number, # Required.
    propertyToMakeDuration: string, # Required.
    propertyToMakeString: string (duration ISO 8601 Format), # Required.
    propertyToMakeJsonElement: string, # Required.
    propertyToField: string, # Required.
  }, # Optional.
  propertyEnumToRename: &quot;1&quot; | &quot;2&quot; | &quot;3&quot;, # Optional.
  propertyEnumWithValueToRename: &quot;1&quot; | &quot;2&quot; | &quot;3&quot;, # Optional.
  propertyEnumToBeMadeExtensible: &quot;1&quot; | &quot;2&quot; | &quot;3&quot;, # Optional.
}
</code>

Response Body:

Schema for <c>RootModel</c>:
<code>{
  propertyModelToMakeInternal: {
    requiredInt: number, # Required.
  }, # Optional.
  propertyModelToRename: {
    requiredInt: number, # Required.
  }, # Optional.
  propertyModelToChangeNamespace: {
    requiredInt: number, # Required.
  }, # Optional.
  propertyModelWithCustomizedProperties: {
    propertyToMakeInternal: number, # Required.
    propertyToRename: number, # Required.
    propertyToMakeFloat: number, # Required.
    propertyToMakeInt: number, # Required.
    propertyToMakeDuration: string, # Required.
    propertyToMakeString: string (duration ISO 8601 Format), # Required.
    propertyToMakeJsonElement: string, # Required.
    propertyToField: string, # Required.
  }, # Optional.
  propertyEnumToRename: &quot;1&quot; | &quot;2&quot; | &quot;3&quot;, # Optional.
  propertyEnumWithValueToRename: &quot;1&quot; | &quot;2&quot; | &quot;3&quot;, # Optional.
  propertyEnumToBeMadeExtensible: &quot;1&quot; | &quot;2&quot; | &quot;3&quot;, # Optional.
}
</code>

</remarks>
    </member>
    <member name="RoundTrip(RequestContent,RequestContext)">
<example>
This sample shows how to call RoundTrip and parse the result.
<code><![CDATA[
var client = new CustomizationsInCadlClient();

var data = new {};

Response response = client.RoundTrip(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call RoundTrip with all request content, and how to parse the result.
<code><![CDATA[
var client = new CustomizationsInCadlClient();

var data = new {
    propertyModelToMakeInternal = new {
        requiredInt = 1234,
    },
    propertyModelToRename = new {
        requiredInt = 1234,
    },
    propertyModelToChangeNamespace = new {
        requiredInt = 1234,
    },
    propertyModelWithCustomizedProperties = new {
        propertyToMakeInternal = 1234,
        propertyToRename = 1234,
        propertyToMakeFloat = 1234,
        propertyToMakeInt = 123.45f,
        propertyToMakeDuration = "<propertyToMakeDuration>",
        propertyToMakeString = PT1H23M45S,
        propertyToMakeJsonElement = "<propertyToMakeJsonElement>",
        propertyToField = "<propertyToField>",
    },
    propertyEnumToRename = "1",
    propertyEnumWithValueToRename = "1",
    propertyEnumToBeMadeExtensible = "1",
};

Response response = client.RoundTrip(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("propertyModelToMakeInternal").GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("propertyModelToRename").GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("propertyModelToChangeNamespace").GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeInternal").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToRename").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeFloat").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeInt").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeDuration").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeString").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToMakeJsonElement").ToString());
Console.WriteLine(result.GetProperty("propertyModelWithCustomizedProperties").GetProperty("propertyToField").ToString());
Console.WriteLine(result.GetProperty("propertyEnumToRename").ToString());
Console.WriteLine(result.GetProperty("propertyEnumWithValueToRename").ToString());
Console.WriteLine(result.GetProperty("propertyEnumToBeMadeExtensible").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>RootModel</c>:
<code>{
  propertyModelToMakeInternal: {
    requiredInt: number, # Required.
  }, # Optional.
  propertyModelToRename: {
    requiredInt: number, # Required.
  }, # Optional.
  propertyModelToChangeNamespace: {
    requiredInt: number, # Required.
  }, # Optional.
  propertyModelWithCustomizedProperties: {
    propertyToMakeInternal: number, # Required.
    propertyToRename: number, # Required.
    propertyToMakeFloat: number, # Required.
    propertyToMakeInt: number, # Required.
    propertyToMakeDuration: string, # Required.
    propertyToMakeString: string (duration ISO 8601 Format), # Required.
    propertyToMakeJsonElement: string, # Required.
    propertyToField: string, # Required.
  }, # Optional.
  propertyEnumToRename: &quot;1&quot; | &quot;2&quot; | &quot;3&quot;, # Optional.
  propertyEnumWithValueToRename: &quot;1&quot; | &quot;2&quot; | &quot;3&quot;, # Optional.
  propertyEnumToBeMadeExtensible: &quot;1&quot; | &quot;2&quot; | &quot;3&quot;, # Optional.
}
</code>

Response Body:

Schema for <c>RootModel</c>:
<code>{
  propertyModelToMakeInternal: {
    requiredInt: number, # Required.
  }, # Optional.
  propertyModelToRename: {
    requiredInt: number, # Required.
  }, # Optional.
  propertyModelToChangeNamespace: {
    requiredInt: number, # Required.
  }, # Optional.
  propertyModelWithCustomizedProperties: {
    propertyToMakeInternal: number, # Required.
    propertyToRename: number, # Required.
    propertyToMakeFloat: number, # Required.
    propertyToMakeInt: number, # Required.
    propertyToMakeDuration: string, # Required.
    propertyToMakeString: string (duration ISO 8601 Format), # Required.
    propertyToMakeJsonElement: string, # Required.
    propertyToField: string, # Required.
  }, # Optional.
  propertyEnumToRename: &quot;1&quot; | &quot;2&quot; | &quot;3&quot;, # Optional.
  propertyEnumWithValueToRename: &quot;1&quot; | &quot;2&quot; | &quot;3&quot;, # Optional.
  propertyEnumToBeMadeExtensible: &quot;1&quot; | &quot;2&quot; | &quot;3&quot;, # Optional.
}
</code>

</remarks>
    </member>
  </members>
</doc>