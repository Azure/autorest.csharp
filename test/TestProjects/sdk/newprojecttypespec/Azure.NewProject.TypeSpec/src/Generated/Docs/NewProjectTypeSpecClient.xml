<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="TopActionAsync(DateTimeOffset,CancellationToken)"></member>
    <member name="TopAction(DateTimeOffset,CancellationToken)"></member>
    <member name="TopActionAsync(DateTimeOffset,RequestContext)">
      <example>
This sample shows how to call TopActionAsync with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response response = await client.TopActionAsync(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code></example>
    </member>
    <member name="TopAction(DateTimeOffset,RequestContext)">
      <example>
This sample shows how to call TopAction with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response response = client.TopAction(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code></example>
    </member>
    <member name="TopAction2Async(RequestContext)">
      <example>
This sample shows how to call TopAction2Async with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response response = await client.TopAction2Async(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code></example>
    </member>
    <member name="TopAction2(RequestContext)">
      <example>
This sample shows how to call TopAction2 with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response response = client.TopAction2(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code></example>
    </member>
    <member name="PatchActionAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call PatchActionAsync with required request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
    ["requiredUnion"] = "<requiredUnion>",
    ["requiredLiteralString"] = "accept",
    ["requiredLiteralInt"] = 123,
    ["requiredLiteralFloat"] = 1.23F,
    ["requiredLiteralBool"] = false,
    ["requiredBadDescription"] = "<requiredBadDescription>",
});
Response response = await client.PatchActionAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call PatchActionAsync with all request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
    ["requiredUnion"] = "<requiredUnion>",
    ["requiredLiteralString"] = "accept",
    ["requiredLiteralInt"] = 123,
    ["requiredLiteralFloat"] = 1.23F,
    ["requiredLiteralBool"] = false,
    ["optionalLiteralString"] = "reject",
    ["optionalLiteralInt"] = 456,
    ["optionalLiteralFloat"] = 4.56F,
    ["optionalLiteralBool"] = true,
    ["requiredBadDescription"] = "<requiredBadDescription>",
});
Response response = await client.PatchActionAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code></example>
    </member>
    <member name="PatchAction(RequestContent,RequestContext)">
      <example>
This sample shows how to call PatchAction with required request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
    ["requiredUnion"] = "<requiredUnion>",
    ["requiredLiteralString"] = "accept",
    ["requiredLiteralInt"] = 123,
    ["requiredLiteralFloat"] = 1.23F,
    ["requiredLiteralBool"] = false,
    ["requiredBadDescription"] = "<requiredBadDescription>",
});
Response response = client.PatchAction(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call PatchAction with all request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
    ["requiredUnion"] = "<requiredUnion>",
    ["requiredLiteralString"] = "accept",
    ["requiredLiteralInt"] = 123,
    ["requiredLiteralFloat"] = 1.23F,
    ["requiredLiteralBool"] = false,
    ["optionalLiteralString"] = "reject",
    ["optionalLiteralInt"] = 456,
    ["optionalLiteralFloat"] = 4.56F,
    ["optionalLiteralBool"] = true,
    ["requiredBadDescription"] = "<requiredBadDescription>",
});
Response response = client.PatchAction(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code></example>
    </member>
    <member name="AnonymousBodyAsync(Thing,CancellationToken)"></member>
    <member name="AnonymousBody(Thing,CancellationToken)"></member>
    <member name="AnonymousBodyAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call AnonymousBodyAsync with required request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
    ["requiredUnion"] = "<requiredUnion>",
    ["requiredLiteralString"] = "accept",
    ["requiredLiteralInt"] = 123,
    ["requiredLiteralFloat"] = 1.23F,
    ["requiredLiteralBool"] = false,
    ["requiredBadDescription"] = "<requiredBadDescription>",
});
Response response = await client.AnonymousBodyAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call AnonymousBodyAsync with all request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
    ["requiredUnion"] = "<requiredUnion>",
    ["requiredLiteralString"] = "accept",
    ["requiredLiteralInt"] = 123,
    ["requiredLiteralFloat"] = 1.23F,
    ["requiredLiteralBool"] = false,
    ["optionalLiteralString"] = "reject",
    ["optionalLiteralInt"] = 456,
    ["optionalLiteralFloat"] = 4.56F,
    ["optionalLiteralBool"] = true,
    ["requiredBadDescription"] = "<requiredBadDescription>",
});
Response response = await client.AnonymousBodyAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code></example>
    </member>
    <member name="AnonymousBody(RequestContent,RequestContext)">
      <example>
This sample shows how to call AnonymousBody with required request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
    ["requiredUnion"] = "<requiredUnion>",
    ["requiredLiteralString"] = "accept",
    ["requiredLiteralInt"] = 123,
    ["requiredLiteralFloat"] = 1.23F,
    ["requiredLiteralBool"] = false,
    ["requiredBadDescription"] = "<requiredBadDescription>",
});
Response response = client.AnonymousBody(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call AnonymousBody with all request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
    ["requiredUnion"] = "<requiredUnion>",
    ["requiredLiteralString"] = "accept",
    ["requiredLiteralInt"] = 123,
    ["requiredLiteralFloat"] = 1.23F,
    ["requiredLiteralBool"] = false,
    ["optionalLiteralString"] = "reject",
    ["optionalLiteralInt"] = 456,
    ["optionalLiteralFloat"] = 4.56F,
    ["optionalLiteralBool"] = true,
    ["requiredBadDescription"] = "<requiredBadDescription>",
});
Response response = client.AnonymousBody(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code></example>
    </member>
    <member name="FriendlyModelAsync(Friend,CancellationToken)">
      <example>
This sample shows how to call FriendlyModelAsync with required parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Friend notFriend = new Friend("<name>");
Response<Friend> response = await client.FriendlyModelAsync(notFriend);
]]></code></example>
    </member>
    <member name="FriendlyModel(Friend,CancellationToken)">
      <example>
This sample shows how to call FriendlyModel with required parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Friend notFriend = new Friend("<name>");
Response<Friend> response = client.FriendlyModel(notFriend);
]]></code></example>
    </member>
    <member name="FriendlyModelAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call FriendlyModelAsync with required request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
});
Response response = await client.FriendlyModelAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="FriendlyModel(RequestContent,RequestContext)">
      <example>
This sample shows how to call FriendlyModel with required request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
});
Response response = client.FriendlyModel(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="AddTimeHeaderAsync(RequestContext)">
      <example>
This sample shows how to call AddTimeHeaderAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response response = await client.AddTimeHeaderAsync();
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="AddTimeHeader(RequestContext)">
      <example>
This sample shows how to call AddTimeHeader.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response response = client.AddTimeHeader();
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="StringFormatAsync(Guid,ModelWithFormat,CancellationToken)">
      <example>
This sample shows how to call StringFormatAsync with required parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

ModelWithFormat body = new ModelWithFormat(new Uri("http://localhost:3000"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
Response response = await client.StringFormatAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), body);
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="StringFormat(Guid,ModelWithFormat,CancellationToken)">
      <example>
This sample shows how to call StringFormat with required parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

ModelWithFormat body = new ModelWithFormat(new Uri("http://localhost:3000"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
Response response = client.StringFormat(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), body);
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="StringFormatAsync(Guid,RequestContent,RequestContext)">
      <example>
This sample shows how to call StringFormatAsync with required parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["sourceUrl"] = "http://localhost:3000",
    ["guid"] = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
});
Response response = await client.StringFormatAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="StringFormat(Guid,RequestContent,RequestContext)">
      <example>
This sample shows how to call StringFormat with required parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["sourceUrl"] = "http://localhost:3000",
    ["guid"] = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
});
Response response = client.StringFormat(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="SayHiAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call SayHiAsync with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response response = await client.SayHiAsync("<headParameter>", "<queryParameter>", "<optionalQuery>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code></example>
    </member>
    <member name="SayHi(string,string,string,RequestContext)">
      <example>
This sample shows how to call SayHi with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response response = client.SayHi("<headParameter>", "<queryParameter>", "<optionalQuery>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code></example>
    </member>
    <member name="HelloAgainAsync(string,string,RoundTripModel,CancellationToken)"></member>
    <member name="HelloAgain(string,string,RoundTripModel,CancellationToken)"></member>
    <member name="HelloAgainAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call HelloAgainAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["requiredString"] = "<requiredString>",
    ["requiredInt"] = 1234,
    ["requiredCollection"] = new List<object>()
{
"1"
},
    ["requiredDictionary"] = new Dictionary<string, object>()
    {
        ["key"] = "1",
    },
    ["requiredModel"] = new Dictionary<string, object>()
    {
        ["name"] = "<name>",
        ["requiredUnion"] = "<requiredUnion>",
        ["requiredLiteralString"] = "accept",
        ["requiredLiteralInt"] = 123,
        ["requiredLiteralFloat"] = 1.23F,
        ["requiredLiteralBool"] = false,
        ["requiredBadDescription"] = "<requiredBadDescription>",
    },
    ["requiredUnknown"] = new Dictionary<string, object>(),
    ["requiredRecordUnknown"] = new Dictionary<string, object>()
    {
        ["key"] = new Dictionary<string, object>(),
    },
});
Response response = await client.HelloAgainAsync("<p2>", "<p1>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredCollection")[0].ToString());
Console.WriteLine(result.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call HelloAgainAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["requiredString"] = "<requiredString>",
    ["requiredInt"] = 1234,
    ["requiredCollection"] = new List<object>()
{
"1"
},
    ["requiredDictionary"] = new Dictionary<string, object>()
    {
        ["key"] = "1",
    },
    ["requiredModel"] = new Dictionary<string, object>()
    {
        ["name"] = "<name>",
        ["requiredUnion"] = "<requiredUnion>",
        ["requiredLiteralString"] = "accept",
        ["requiredLiteralInt"] = 123,
        ["requiredLiteralFloat"] = 1.23F,
        ["requiredLiteralBool"] = false,
        ["optionalLiteralString"] = "reject",
        ["optionalLiteralInt"] = 456,
        ["optionalLiteralFloat"] = 4.56F,
        ["optionalLiteralBool"] = true,
        ["requiredBadDescription"] = "<requiredBadDescription>",
    },
    ["intExtensibleEnum"] = 1,
    ["intExtensibleEnumCollection"] = new List<object>()
{
1
},
    ["floatExtensibleEnum"] = 1,
    ["floatExtensibleEnumCollection"] = new List<object>()
{
1
},
    ["floatFixedEnum"] = 1.1F,
    ["floatFixedEnumCollection"] = new List<object>()
{
1.1F
},
    ["intFixedEnum"] = 1,
    ["intFixedEnumCollection"] = new List<object>()
{
1
},
    ["stringFixedEnum"] = "1",
    ["requiredUnknown"] = new Dictionary<string, object>(),
    ["optionalUnknown"] = new Dictionary<string, object>(),
    ["requiredRecordUnknown"] = new Dictionary<string, object>()
    {
        ["key"] = new Dictionary<string, object>(),
    },
    ["optionalRecordUnknown"] = new Dictionary<string, object>()
    {
        ["key"] = new Dictionary<string, object>(),
    },
});
Response response = await client.HelloAgainAsync("<p2>", "<p1>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredCollection")[0].ToString());
Console.WriteLine(result.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("intExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("intExtensibleEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("floatExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("floatExtensibleEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("floatFixedEnum").ToString());
Console.WriteLine(result.GetProperty("floatFixedEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("intFixedEnum").ToString());
Console.WriteLine(result.GetProperty("intFixedEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("stringFixedEnum").ToString());
Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result.GetProperty("optionalUnknown").ToString());
Console.WriteLine(result.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("optionalRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("readOnlyOptionalRecordUnknown").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="HelloAgain(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call HelloAgain with required parameters and request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["requiredString"] = "<requiredString>",
    ["requiredInt"] = 1234,
    ["requiredCollection"] = new List<object>()
{
"1"
},
    ["requiredDictionary"] = new Dictionary<string, object>()
    {
        ["key"] = "1",
    },
    ["requiredModel"] = new Dictionary<string, object>()
    {
        ["name"] = "<name>",
        ["requiredUnion"] = "<requiredUnion>",
        ["requiredLiteralString"] = "accept",
        ["requiredLiteralInt"] = 123,
        ["requiredLiteralFloat"] = 1.23F,
        ["requiredLiteralBool"] = false,
        ["requiredBadDescription"] = "<requiredBadDescription>",
    },
    ["requiredUnknown"] = new Dictionary<string, object>(),
    ["requiredRecordUnknown"] = new Dictionary<string, object>()
    {
        ["key"] = new Dictionary<string, object>(),
    },
});
Response response = client.HelloAgain("<p2>", "<p1>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredCollection")[0].ToString());
Console.WriteLine(result.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call HelloAgain with all parameters and request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["requiredString"] = "<requiredString>",
    ["requiredInt"] = 1234,
    ["requiredCollection"] = new List<object>()
{
"1"
},
    ["requiredDictionary"] = new Dictionary<string, object>()
    {
        ["key"] = "1",
    },
    ["requiredModel"] = new Dictionary<string, object>()
    {
        ["name"] = "<name>",
        ["requiredUnion"] = "<requiredUnion>",
        ["requiredLiteralString"] = "accept",
        ["requiredLiteralInt"] = 123,
        ["requiredLiteralFloat"] = 1.23F,
        ["requiredLiteralBool"] = false,
        ["optionalLiteralString"] = "reject",
        ["optionalLiteralInt"] = 456,
        ["optionalLiteralFloat"] = 4.56F,
        ["optionalLiteralBool"] = true,
        ["requiredBadDescription"] = "<requiredBadDescription>",
    },
    ["intExtensibleEnum"] = 1,
    ["intExtensibleEnumCollection"] = new List<object>()
{
1
},
    ["floatExtensibleEnum"] = 1,
    ["floatExtensibleEnumCollection"] = new List<object>()
{
1
},
    ["floatFixedEnum"] = 1.1F,
    ["floatFixedEnumCollection"] = new List<object>()
{
1.1F
},
    ["intFixedEnum"] = 1,
    ["intFixedEnumCollection"] = new List<object>()
{
1
},
    ["stringFixedEnum"] = "1",
    ["requiredUnknown"] = new Dictionary<string, object>(),
    ["optionalUnknown"] = new Dictionary<string, object>(),
    ["requiredRecordUnknown"] = new Dictionary<string, object>()
    {
        ["key"] = new Dictionary<string, object>(),
    },
    ["optionalRecordUnknown"] = new Dictionary<string, object>()
    {
        ["key"] = new Dictionary<string, object>(),
    },
});
Response response = client.HelloAgain("<p2>", "<p1>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredCollection")[0].ToString());
Console.WriteLine(result.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("intExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("intExtensibleEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("floatExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("floatExtensibleEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("floatFixedEnum").ToString());
Console.WriteLine(result.GetProperty("floatFixedEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("intFixedEnum").ToString());
Console.WriteLine(result.GetProperty("intFixedEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("stringFixedEnum").ToString());
Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result.GetProperty("optionalUnknown").ToString());
Console.WriteLine(result.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("optionalRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("readOnlyOptionalRecordUnknown").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="NoContentTypeAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call NoContentTypeAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["requiredString"] = "<requiredString>",
    ["requiredInt"] = 1234,
    ["requiredCollection"] = new List<object>()
{
"1"
},
    ["requiredDictionary"] = new Dictionary<string, object>()
    {
        ["key"] = "1",
    },
    ["requiredModel"] = new Dictionary<string, object>()
    {
        ["name"] = "<name>",
        ["requiredUnion"] = "<requiredUnion>",
        ["requiredLiteralString"] = "accept",
        ["requiredLiteralInt"] = 123,
        ["requiredLiteralFloat"] = 1.23F,
        ["requiredLiteralBool"] = false,
        ["requiredBadDescription"] = "<requiredBadDescription>",
    },
    ["requiredUnknown"] = new Dictionary<string, object>(),
    ["requiredRecordUnknown"] = new Dictionary<string, object>()
    {
        ["key"] = new Dictionary<string, object>(),
    },
});
Response response = await client.NoContentTypeAsync("<p2>", "<p1>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredCollection")[0].ToString());
Console.WriteLine(result.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call NoContentTypeAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["requiredString"] = "<requiredString>",
    ["requiredInt"] = 1234,
    ["requiredCollection"] = new List<object>()
{
"1"
},
    ["requiredDictionary"] = new Dictionary<string, object>()
    {
        ["key"] = "1",
    },
    ["requiredModel"] = new Dictionary<string, object>()
    {
        ["name"] = "<name>",
        ["requiredUnion"] = "<requiredUnion>",
        ["requiredLiteralString"] = "accept",
        ["requiredLiteralInt"] = 123,
        ["requiredLiteralFloat"] = 1.23F,
        ["requiredLiteralBool"] = false,
        ["optionalLiteralString"] = "reject",
        ["optionalLiteralInt"] = 456,
        ["optionalLiteralFloat"] = 4.56F,
        ["optionalLiteralBool"] = true,
        ["requiredBadDescription"] = "<requiredBadDescription>",
    },
    ["intExtensibleEnum"] = 1,
    ["intExtensibleEnumCollection"] = new List<object>()
{
1
},
    ["floatExtensibleEnum"] = 1,
    ["floatExtensibleEnumCollection"] = new List<object>()
{
1
},
    ["floatFixedEnum"] = 1.1F,
    ["floatFixedEnumCollection"] = new List<object>()
{
1.1F
},
    ["intFixedEnum"] = 1,
    ["intFixedEnumCollection"] = new List<object>()
{
1
},
    ["stringFixedEnum"] = "1",
    ["requiredUnknown"] = new Dictionary<string, object>(),
    ["optionalUnknown"] = new Dictionary<string, object>(),
    ["requiredRecordUnknown"] = new Dictionary<string, object>()
    {
        ["key"] = new Dictionary<string, object>(),
    },
    ["optionalRecordUnknown"] = new Dictionary<string, object>()
    {
        ["key"] = new Dictionary<string, object>(),
    },
});
Response response = await client.NoContentTypeAsync("<p2>", "<p1>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredCollection")[0].ToString());
Console.WriteLine(result.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("intExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("intExtensibleEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("floatExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("floatExtensibleEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("floatFixedEnum").ToString());
Console.WriteLine(result.GetProperty("floatFixedEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("intFixedEnum").ToString());
Console.WriteLine(result.GetProperty("intFixedEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("stringFixedEnum").ToString());
Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result.GetProperty("optionalUnknown").ToString());
Console.WriteLine(result.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("optionalRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("readOnlyOptionalRecordUnknown").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="NoContentType(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call NoContentType with required parameters and request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["requiredString"] = "<requiredString>",
    ["requiredInt"] = 1234,
    ["requiredCollection"] = new List<object>()
{
"1"
},
    ["requiredDictionary"] = new Dictionary<string, object>()
    {
        ["key"] = "1",
    },
    ["requiredModel"] = new Dictionary<string, object>()
    {
        ["name"] = "<name>",
        ["requiredUnion"] = "<requiredUnion>",
        ["requiredLiteralString"] = "accept",
        ["requiredLiteralInt"] = 123,
        ["requiredLiteralFloat"] = 1.23F,
        ["requiredLiteralBool"] = false,
        ["requiredBadDescription"] = "<requiredBadDescription>",
    },
    ["requiredUnknown"] = new Dictionary<string, object>(),
    ["requiredRecordUnknown"] = new Dictionary<string, object>()
    {
        ["key"] = new Dictionary<string, object>(),
    },
});
Response response = client.NoContentType("<p2>", "<p1>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredCollection")[0].ToString());
Console.WriteLine(result.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call NoContentType with all parameters and request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["requiredString"] = "<requiredString>",
    ["requiredInt"] = 1234,
    ["requiredCollection"] = new List<object>()
{
"1"
},
    ["requiredDictionary"] = new Dictionary<string, object>()
    {
        ["key"] = "1",
    },
    ["requiredModel"] = new Dictionary<string, object>()
    {
        ["name"] = "<name>",
        ["requiredUnion"] = "<requiredUnion>",
        ["requiredLiteralString"] = "accept",
        ["requiredLiteralInt"] = 123,
        ["requiredLiteralFloat"] = 1.23F,
        ["requiredLiteralBool"] = false,
        ["optionalLiteralString"] = "reject",
        ["optionalLiteralInt"] = 456,
        ["optionalLiteralFloat"] = 4.56F,
        ["optionalLiteralBool"] = true,
        ["requiredBadDescription"] = "<requiredBadDescription>",
    },
    ["intExtensibleEnum"] = 1,
    ["intExtensibleEnumCollection"] = new List<object>()
{
1
},
    ["floatExtensibleEnum"] = 1,
    ["floatExtensibleEnumCollection"] = new List<object>()
{
1
},
    ["floatFixedEnum"] = 1.1F,
    ["floatFixedEnumCollection"] = new List<object>()
{
1.1F
},
    ["intFixedEnum"] = 1,
    ["intFixedEnumCollection"] = new List<object>()
{
1
},
    ["stringFixedEnum"] = "1",
    ["requiredUnknown"] = new Dictionary<string, object>(),
    ["optionalUnknown"] = new Dictionary<string, object>(),
    ["requiredRecordUnknown"] = new Dictionary<string, object>()
    {
        ["key"] = new Dictionary<string, object>(),
    },
    ["optionalRecordUnknown"] = new Dictionary<string, object>()
    {
        ["key"] = new Dictionary<string, object>(),
    },
});
Response response = client.NoContentType("<p2>", "<p1>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredCollection")[0].ToString());
Console.WriteLine(result.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("intExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("intExtensibleEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("floatExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("floatExtensibleEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("floatFixedEnum").ToString());
Console.WriteLine(result.GetProperty("floatFixedEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("intFixedEnum").ToString());
Console.WriteLine(result.GetProperty("intFixedEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("stringFixedEnum").ToString());
Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result.GetProperty("optionalUnknown").ToString());
Console.WriteLine(result.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("optionalRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("readOnlyOptionalRecordUnknown").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="HelloDemo2Async(CancellationToken)"></member>
    <member name="HelloDemo2(CancellationToken)"></member>
    <member name="HelloDemo2Async(RequestContext)">
      <example>
This sample shows how to call HelloDemo2Async with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response response = await client.HelloDemo2Async(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code></example>
    </member>
    <member name="HelloDemo2(RequestContext)">
      <example>
This sample shows how to call HelloDemo2 with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response response = client.HelloDemo2(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code></example>
    </member>
    <member name="CreateLiteralAsync(Thing,CancellationToken)"></member>
    <member name="CreateLiteral(Thing,CancellationToken)"></member>
    <member name="CreateLiteralAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateLiteralAsync with required request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
    ["requiredUnion"] = "<requiredUnion>",
    ["requiredLiteralString"] = "accept",
    ["requiredLiteralInt"] = 123,
    ["requiredLiteralFloat"] = 1.23F,
    ["requiredLiteralBool"] = false,
    ["requiredBadDescription"] = "<requiredBadDescription>",
});
Response response = await client.CreateLiteralAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call CreateLiteralAsync with all request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
    ["requiredUnion"] = "<requiredUnion>",
    ["requiredLiteralString"] = "accept",
    ["requiredLiteralInt"] = 123,
    ["requiredLiteralFloat"] = 1.23F,
    ["requiredLiteralBool"] = false,
    ["optionalLiteralString"] = "reject",
    ["optionalLiteralInt"] = 456,
    ["optionalLiteralFloat"] = 4.56F,
    ["optionalLiteralBool"] = true,
    ["requiredBadDescription"] = "<requiredBadDescription>",
});
Response response = await client.CreateLiteralAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code></example>
    </member>
    <member name="CreateLiteral(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateLiteral with required request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
    ["requiredUnion"] = "<requiredUnion>",
    ["requiredLiteralString"] = "accept",
    ["requiredLiteralInt"] = 123,
    ["requiredLiteralFloat"] = 1.23F,
    ["requiredLiteralBool"] = false,
    ["requiredBadDescription"] = "<requiredBadDescription>",
});
Response response = client.CreateLiteral(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call CreateLiteral with all request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
    ["requiredUnion"] = "<requiredUnion>",
    ["requiredLiteralString"] = "accept",
    ["requiredLiteralInt"] = 123,
    ["requiredLiteralFloat"] = 1.23F,
    ["requiredLiteralBool"] = false,
    ["optionalLiteralString"] = "reject",
    ["optionalLiteralInt"] = 456,
    ["optionalLiteralFloat"] = 4.56F,
    ["optionalLiteralBool"] = true,
    ["requiredBadDescription"] = "<requiredBadDescription>",
});
Response response = client.CreateLiteral(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code></example>
    </member>
    <member name="HelloLiteralAsync(CancellationToken)"></member>
    <member name="HelloLiteral(CancellationToken)"></member>
    <member name="HelloLiteralAsync(RequestContext)">
      <example>
This sample shows how to call HelloLiteralAsync with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response response = await client.HelloLiteralAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code></example>
    </member>
    <member name="HelloLiteral(RequestContext)">
      <example>
This sample shows how to call HelloLiteral with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response response = client.HelloLiteral(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code></example>
    </member>
    <member name="GetUnknownValueAsync(RequestContext)">
      <example>
This sample shows how to call GetUnknownValueAsync with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response response = await client.GetUnknownValueAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetUnknownValue(RequestContext)">
      <example>
This sample shows how to call GetUnknownValue with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response response = client.GetUnknownValue(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="InternalProtocolAsync(Thing,CancellationToken)"></member>
    <member name="InternalProtocol(Thing,CancellationToken)"></member>
    <member name="InternalProtocolAsync(RequestContent,RequestContext)"></member>
    <member name="InternalProtocol(RequestContent,RequestContext)"></member>
    <member name="StillConvenientValueAsync(CancellationToken)">
      <example>
This sample shows how to call StillConvenientValueAsync.
<code>Example_StillConvenientValue_AllParameters_Convenience_Async</code></example>
    </member>
    <member name="StillConvenientValue(CancellationToken)">
      <example>
This sample shows how to call StillConvenientValue.
<code>Example_StillConvenientValue_AllParameters_Convenience</code></example>
    </member>
    <member name="StillConvenientAsync(RequestContext)"></member>
    <member name="StillConvenient(RequestContext)"></member>
  </members>
</doc>