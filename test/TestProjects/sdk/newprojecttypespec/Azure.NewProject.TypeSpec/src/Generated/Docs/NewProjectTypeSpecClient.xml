<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="TopActionAsync(DateTimeOffset,CancellationToken)">
      <example>
This sample shows how to call TopActionAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response<Thing> response = await client.TopActionAsync(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
]]></code>
This sample shows how to call TopActionAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response<Thing> response = await client.TopActionAsync(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
]]></code></example>
    </member>
    <member name="TopAction(DateTimeOffset,CancellationToken)">
      <example>
This sample shows how to call TopAction.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response<Thing> response = client.TopAction(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
]]></code>
This sample shows how to call TopAction with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response<Thing> response = client.TopAction(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
]]></code></example>
    </member>
    <member name="TopActionAsync(DateTimeOffset,RequestContext)">
      <example>
This sample shows how to call TopActionAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response response = await client.TopActionAsync(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call TopActionAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response response = await client.TopActionAsync(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code></example>
    </member>
    <member name="TopAction(DateTimeOffset,RequestContext)">
      <example>
This sample shows how to call TopAction and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response response = client.TopAction(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call TopAction with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response response = client.TopAction(DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code></example>
    </member>
    <member name="TopAction2Async(RequestContext)">
      <example>
This sample shows how to call TopAction2Async and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response response = await client.TopAction2Async(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call TopAction2Async with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response response = await client.TopAction2Async(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code></example>
    </member>
    <member name="TopAction2(RequestContext)">
      <example>
This sample shows how to call TopAction2 and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response response = client.TopAction2(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call TopAction2 with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response response = client.TopAction2(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code></example>
    </member>
    <member name="PatchActionAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call PatchActionAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    requiredBadDescription = "<requiredBadDescription>",
});
Response response = await client.PatchActionAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call PatchActionAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    optionalLiteralString = "reject",
    optionalLiteralInt = 456,
    optionalLiteralFloat = 4.56F,
    optionalLiteralBool = true,
    requiredBadDescription = "<requiredBadDescription>",
});
Response response = await client.PatchActionAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code></example>
    </member>
    <member name="PatchAction(RequestContent,RequestContext)">
      <example>
This sample shows how to call PatchAction and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    requiredBadDescription = "<requiredBadDescription>",
});
Response response = client.PatchAction(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call PatchAction with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    optionalLiteralString = "reject",
    optionalLiteralInt = 456,
    optionalLiteralFloat = 4.56F,
    optionalLiteralBool = true,
    requiredBadDescription = "<requiredBadDescription>",
});
Response response = client.PatchAction(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code></example>
    </member>
    <member name="AnonymousBodyAsync(string,BinaryData,string,ThingRequiredLiteralString,ThingRequiredLiteralInt,ThingRequiredLiteralFloat,bool,ThingOptionalLiteralString?,ThingOptionalLiteralInt?,ThingOptionalLiteralFloat?,bool?,CancellationToken)">
      <example>
This sample shows how to call AnonymousBodyAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response<Thing> response = await client.AnonymousBodyAsync("<name>", BinaryData.FromObjectAsJson("<requiredUnion>"), "<requiredBadDescription>", ThingRequiredLiteralString.Accept, ThingRequiredLiteralInt._123, ThingRequiredLiteralFloat._123, false);
]]></code>
This sample shows how to call AnonymousBodyAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response<Thing> response = await client.AnonymousBodyAsync("<name>", BinaryData.FromObjectAsJson("<requiredUnion>"), "<requiredBadDescription>", ThingRequiredLiteralString.Accept, ThingRequiredLiteralInt._123, ThingRequiredLiteralFloat._123, false, optionalLiteralString: ThingOptionalLiteralString.Reject, optionalLiteralInt: ThingOptionalLiteralInt._456, optionalLiteralFloat: ThingOptionalLiteralFloat._456, optionalLiteralBool: true);
]]></code></example>
    </member>
    <member name="AnonymousBody(string,BinaryData,string,ThingRequiredLiteralString,ThingRequiredLiteralInt,ThingRequiredLiteralFloat,bool,ThingOptionalLiteralString?,ThingOptionalLiteralInt?,ThingOptionalLiteralFloat?,bool?,CancellationToken)">
      <example>
This sample shows how to call AnonymousBody.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response<Thing> response = client.AnonymousBody("<name>", BinaryData.FromObjectAsJson("<requiredUnion>"), "<requiredBadDescription>", ThingRequiredLiteralString.Accept, ThingRequiredLiteralInt._123, ThingRequiredLiteralFloat._123, false);
]]></code>
This sample shows how to call AnonymousBody with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response<Thing> response = client.AnonymousBody("<name>", BinaryData.FromObjectAsJson("<requiredUnion>"), "<requiredBadDescription>", ThingRequiredLiteralString.Accept, ThingRequiredLiteralInt._123, ThingRequiredLiteralFloat._123, false, optionalLiteralString: ThingOptionalLiteralString.Reject, optionalLiteralInt: ThingOptionalLiteralInt._456, optionalLiteralFloat: ThingOptionalLiteralFloat._456, optionalLiteralBool: true);
]]></code></example>
    </member>
    <member name="AnonymousBodyAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call AnonymousBodyAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    requiredBadDescription = "<requiredBadDescription>",
});
Response response = await client.AnonymousBodyAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call AnonymousBodyAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    optionalLiteralString = "reject",
    optionalLiteralInt = 456,
    optionalLiteralFloat = 4.56F,
    optionalLiteralBool = true,
    requiredBadDescription = "<requiredBadDescription>",
});
Response response = await client.AnonymousBodyAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code></example>
    </member>
    <member name="AnonymousBody(RequestContent,RequestContext)">
      <example>
This sample shows how to call AnonymousBody and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    requiredBadDescription = "<requiredBadDescription>",
});
Response response = client.AnonymousBody(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code>
This sample shows how to call AnonymousBody with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    optionalLiteralString = "reject",
    optionalLiteralInt = 456,
    optionalLiteralFloat = 4.56F,
    optionalLiteralBool = true,
    requiredBadDescription = "<requiredBadDescription>",
});
Response response = client.AnonymousBody(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
]]></code></example>
    </member>
    <member name="FriendlyModelAsync(string,CancellationToken)">
      <example>
This sample shows how to call FriendlyModelAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response<Friend> response = await client.FriendlyModelAsync("<name>");
]]></code>
This sample shows how to call FriendlyModelAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response<Friend> response = await client.FriendlyModelAsync("<name>");
]]></code></example>
    </member>
    <member name="FriendlyModel(string,CancellationToken)">
      <example>
This sample shows how to call FriendlyModel.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response<Friend> response = client.FriendlyModel("<name>");
]]></code>
This sample shows how to call FriendlyModel with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response<Friend> response = client.FriendlyModel("<name>");
]]></code></example>
    </member>
    <member name="FriendlyModelAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call FriendlyModelAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = await client.FriendlyModelAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call FriendlyModelAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = await client.FriendlyModelAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="FriendlyModel(RequestContent,RequestContext)">
      <example>
This sample shows how to call FriendlyModel and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = client.FriendlyModel(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call FriendlyModel with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = client.FriendlyModel(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="AddTimeHeaderAsync(RequestContext)">
      <example>
This sample shows how to call AddTimeHeaderAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response response = await client.AddTimeHeaderAsync();

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AddTimeHeaderAsync with all request content.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response response = await client.AddTimeHeaderAsync();

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="AddTimeHeader(RequestContext)">
      <example>
This sample shows how to call AddTimeHeader.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response response = client.AddTimeHeader();

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AddTimeHeader with all request content.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
NewProjectTypeSpecClient client = new NewProjectTypeSpecClient(endpoint, credential);

Response response = client.AddTimeHeader();

Console.WriteLine(response.Status);
]]></code></example>
    </member>
  </members>
</doc>