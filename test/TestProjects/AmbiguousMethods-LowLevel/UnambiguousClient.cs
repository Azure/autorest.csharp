// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace AmbiguousMethods_LowLevel
{
    /// <summary> Existing Unambiguous service client. Methods are changed to intentionally have no ambiguity with DPG. </summary>
    public partial class UnambiguousClient
    {
        private readonly HttpPipeline pipeline = HttpPipelineBuilder.Build(ClientOptions.Default);

        /// <param name="a"> The String to use. </param>
        /// <param name="cancellationToken"> CancellationToken to use. </param>
        public virtual async Task<Response> NoParamAsync(string a, CancellationToken cancellationToken = default)
        {
            return await pipeline.ProcessMessageAsync(null, null).ConfigureAwait(false);
        }

        /// <param name="options"> UnambiguousOptions to use. </param>
        /// <param name="cancellationToken"> CancellationToken to use. </param>
        public virtual Response NoParam(UnambiguousOptions options, CancellationToken cancellationToken = default)
        {
            return pipeline.ProcessMessage(null, null);
        }

        /// <param name="optionalParamA"> The String to use. </param>
        /// <param name="a"> The String to use. </param>
        /// <param name="cancellationToken"> CancellationToken to use. </param>
        public virtual async Task<Response> OneOptionalParamAsync(string optionalParamA, string a, CancellationToken cancellationToken = default)
        {
            return await pipeline.ProcessMessageAsync(null, null).ConfigureAwait(false);
        }

        /// <param name="optionalParamA"> The Integer to use. </param>
        /// <param name="cancellationToken"> CancellationToken to use. </param>
        public virtual Response OneOptionalParam(int optionalParamA, CancellationToken cancellationToken = default)
        {
            return pipeline.ProcessMessage(null, null);
        }

        /// <param name="a"> The String to use. </param>
        /// <param name="optionalParamA"> The String to use. </param>
        /// <param name="optionalParamB"> The Integer to use. </param>
        /// <param name="cancellationToken"> CancellationToken to use. </param>
        public virtual async Task<Response> TwoOptionalParamAsync(string a, string optionalParamA = null, int? optionalParamB = null, CancellationToken cancellationToken = default)
        {
            return await pipeline.ProcessMessageAsync(null, null).ConfigureAwait(false);
        }

        /// <param name="b"> The String to use. </param>
        /// <param name="optionalParamA"> The String to use. </param>
        /// <param name="optionalParamB"> The Integer to use. </param>
        /// <param name="cancellationToken"> CancellationToken to use. </param>
        public virtual Response TwoOptionalParam(int b, string optionalParamA = null, int? optionalParamB = null, CancellationToken cancellationToken = default)
        {
            
            return pipeline.ProcessMessage(null, null);

        }

        /// <param name="requiredParamA"> The String to use. </param>
        /// <param name="a"> The Integer to use. </param>
        /// <param name="cancellationToken"> CancellationToken to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParamA"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="requiredParamA"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response> OneRequiredParamAsync(string requiredParamA, int a, CancellationToken cancellationToken = default)
        {
            return await pipeline.ProcessMessageAsync(null, null).ConfigureAwait(false);
        }

        /// <param name="requiredParamA"> The String to use. </param>
        /// <param name="cancellationToken"> CancellationToken to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParamA"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="requiredParamA"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response OneRequiredParam(string requiredParamA = null, CancellationToken cancellationToken = default)
        {
            return pipeline.ProcessMessage(null, null);
        }

        /// <param name="requiredParamA"> The String to use. </param>
        /// <param name="optionalParamA"> The String to use. </param>
        /// <param name="cancellationToken"> CancellationToken to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParamA"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="requiredParamA"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response> OneRequiredParamAndOneOptionalParamAsync(int requiredParamA, string optionalParamA = null, CancellationToken cancellationToken = default)
        {
            return await pipeline.ProcessMessageAsync(null, null).ConfigureAwait(false);
        }

        /// <param name="requiredParamA"> The String to use. </param>
        /// <param name="b"> The String to use. </param>
        /// <param name="optionalParamA"> The String to use. </param>
        /// <param name="cancellationToken"> CancellationToken to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParamA"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="requiredParamA"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response OneRequiredParamAndOneOptionalParam(string requiredParamA, string b, string optionalParamA = null, CancellationToken cancellationToken = default)
        {
            return pipeline.ProcessMessage(null, null);
        }

        /// <param name="requiredParamA"> The Integer to use. </param>
        /// <param name="optionalParamA"> The String to use. </param>
        /// <param name="optionalParamB"> The Integer to use. </param>
        /// <param name="cancellationToken"> CancellationToken to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParamA"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="requiredParamA"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response> OneRequiredParamAndTwoOptionalParamAsync(int requiredParamA, string optionalParamA = null, int? optionalParamB = null, CancellationToken cancellationToken = default)
        {
            return await pipeline.ProcessMessageAsync(null, null).ConfigureAwait(false);
        }

        /// <param name="requiredParamA"> The String to use. </param>
        /// <param name="b"> The Integer to use. </param>
        /// <param name="optionalParamA"> The String to use. </param>
        /// <param name="optionalParamB"> The Integer to use. </param>
        /// <param name="cancellationToken"> CancellationToken to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParamA"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="requiredParamA"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response OneRequiredParamAndTwoOptionalParam(string requiredParamA, int b, string optionalParamA = null, int? optionalParamB = null, CancellationToken cancellationToken = default)
        {
            return pipeline.ProcessMessage(null, null);
        }

        /// <param name="requiredParamA"> The String to use. </param>
        /// <param name="requiredParamB"> The Integer to use. </param>
        /// <param name="cancellationToken"> CancellationToken to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParamA"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="requiredParamA"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response> TwoRequiredParamAsync(string requiredParamA, string requiredParamB, CancellationToken cancellationToken = default)
        {
            return await pipeline.ProcessMessageAsync(null, null).ConfigureAwait(false);
        }

        /// <param name="requiredParamA"> The String to use. </param>
        /// <param name="requiredParamB"> The Integer to use. </param>
        /// <param name="cancellationToken"> CancellationToken to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParamA"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="requiredParamA"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response TwoRequiredParam(string requiredParamA, int requiredParamB = 0, CancellationToken cancellationToken = default)
        {
            return pipeline.ProcessMessage(null, null);
        }

        /// <param name="requiredParamA"> The String to use. </param>
        /// <param name="requiredParamB"> The Integer to use. </param>
        /// <param name="optionalParamA"> The String to use. </param>
        /// <param name="cancellationToken"> CancellationToken to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParamA"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="requiredParamA"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response> TwoRequiredParamAndOneOptionalParamAsync(string requiredParamA, string requiredParamB, string optionalParamA = null, CancellationToken cancellationToken = default)
        {
            return await pipeline.ProcessMessageAsync(null, null).ConfigureAwait(false);
        }

        /// <param name="requiredParamA"> The String to use. </param>
        /// <param name="requiredParamB"> The Integer to use. </param>
        /// <param name="optionalParamA"> The String to use. </param>
        /// <param name="cancellationToken"> CancellationToken to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParamA"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="requiredParamA"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response TwoRequiredParamAndOneOptionalParam(string requiredParamA, int requiredParamB, string optionalParamA, CancellationToken cancellationToken = default)
        {
            return pipeline.ProcessMessage(null, null);
        }

        /// <param name="requiredParamA"> The String to use. </param>
        /// <param name="requiredParamB"> The Integer to use. </param>
        /// <param name="optionalParamA"> The String to use. </param>
        /// <param name="optionalParamB"> The Integer to use. </param>
        /// <param name="cancellationToken"> CancellationToken to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParamA"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="requiredParamA"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response> TwoRequiredParamAndTwoOptionalParamAsync(string requiredParamA, int requiredParamB, string optionalParamA, int? optionalParamB = null, CancellationToken cancellationToken = default)
        {
            return await pipeline.ProcessMessageAsync(null, null).ConfigureAwait(false);
        }

        /// <param name="requiredParamA"> The String to use. </param>
        /// <param name="optionalParamA"> The String to use. </param>
        /// <param name="optionalParamB"> The Integer to use. </param>
        /// <param name="cancellationToken"> CancellationToken to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParamA"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="requiredParamA"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response TwoRequiredParamAndTwoOptionalParam(string requiredParamA, string optionalParamA = null, int? optionalParamB = null, CancellationToken cancellationToken = default)
        {
            return pipeline.ProcessMessage(null, null);
        }
    }

    public class UnambiguousOptions
    {
    }
}
