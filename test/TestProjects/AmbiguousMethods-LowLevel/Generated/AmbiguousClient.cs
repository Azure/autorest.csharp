// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace AmbiguousMethods_LowLevel
{
    /// <summary> The Ambiguous service client. </summary>
    public partial class AmbiguousClient
    {
        private const string AuthorizationHeader = "Fake-Subscription-Key";
        private readonly AzureKeyCredential _keyCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of AmbiguousClient for mocking. </summary>
        protected AmbiguousClient()
        {
        }

        /// <summary> Initializes a new instance of AmbiguousClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public AmbiguousClient(AzureKeyCredential credential) : this(credential, new Uri("http://localhost:3000"), new AmbiguousMethodsLowLevelClientOptions())
        {
        }

        /// <summary> Initializes a new instance of AmbiguousClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        public AmbiguousClient(AzureKeyCredential credential, Uri endpoint, AmbiguousMethodsLowLevelClientOptions options)
        {
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new AmbiguousMethodsLowLevelClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _keyCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new AzureKeyCredentialPolicy(_keyCredential, AuthorizationHeader) }, new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        public virtual async Task<Response> NoParamAsync(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("AmbiguousClient.NoParam");
            scope.Start();
            try
            {
                using HttpMessage message = CreateNoParamRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        public virtual Response NoParam(RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("AmbiguousClient.NoParam");
            scope.Start();
            try
            {
                using HttpMessage message = CreateNoParamRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="optionalParamA"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        public virtual async Task<Response> OneOptionalParamAsync(string optionalParamA, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("AmbiguousClient.OneOptionalParam");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOneOptionalParamRequest(optionalParamA, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="optionalParamA"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        public virtual Response OneOptionalParam(string optionalParamA, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("AmbiguousClient.OneOptionalParam");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOneOptionalParamRequest(optionalParamA, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="optionalParamA"> The String to use. </param>
        /// <param name="optionalParamB"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        public virtual async Task<Response> TwoOptionalParamAsync(string optionalParamA, int? optionalParamB, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("AmbiguousClient.TwoOptionalParam");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTwoOptionalParamRequest(optionalParamA, optionalParamB, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="optionalParamA"> The String to use. </param>
        /// <param name="optionalParamB"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        public virtual Response TwoOptionalParam(string optionalParamA, int? optionalParamB, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("AmbiguousClient.TwoOptionalParam");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTwoOptionalParamRequest(optionalParamA, optionalParamB, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="requiredParamA"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParamA"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="requiredParamA"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response> OneRequiredParamAsync(string requiredParamA, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(requiredParamA, nameof(requiredParamA));

            using var scope = ClientDiagnostics.CreateScope("AmbiguousClient.OneRequiredParam");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOneRequiredParamRequest(requiredParamA, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="requiredParamA"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParamA"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="requiredParamA"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response OneRequiredParam(string requiredParamA, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(requiredParamA, nameof(requiredParamA));

            using var scope = ClientDiagnostics.CreateScope("AmbiguousClient.OneRequiredParam");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOneRequiredParamRequest(requiredParamA, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="requiredParamA"> The String to use. </param>
        /// <param name="optionalParamA"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParamA"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="requiredParamA"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response> OneRequiredParamAndOneOptionalParamAsync(string requiredParamA, string optionalParamA, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(requiredParamA, nameof(requiredParamA));

            using var scope = ClientDiagnostics.CreateScope("AmbiguousClient.OneRequiredParamAndOneOptionalParam");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOneRequiredParamAndOneOptionalParamRequest(requiredParamA, optionalParamA, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="requiredParamA"> The String to use. </param>
        /// <param name="optionalParamA"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParamA"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="requiredParamA"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response OneRequiredParamAndOneOptionalParam(string requiredParamA, string optionalParamA, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(requiredParamA, nameof(requiredParamA));

            using var scope = ClientDiagnostics.CreateScope("AmbiguousClient.OneRequiredParamAndOneOptionalParam");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOneRequiredParamAndOneOptionalParamRequest(requiredParamA, optionalParamA, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="requiredParamA"> The String to use. </param>
        /// <param name="optionalParamA"> The String to use. </param>
        /// <param name="optionalParamB"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParamA"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="requiredParamA"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response> OneRequiredParamAndTwoOptionalParamAsync(string requiredParamA, string optionalParamA, int? optionalParamB, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(requiredParamA, nameof(requiredParamA));

            using var scope = ClientDiagnostics.CreateScope("AmbiguousClient.OneRequiredParamAndTwoOptionalParam");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOneRequiredParamAndTwoOptionalParamRequest(requiredParamA, optionalParamA, optionalParamB, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="requiredParamA"> The String to use. </param>
        /// <param name="optionalParamA"> The String to use. </param>
        /// <param name="optionalParamB"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParamA"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="requiredParamA"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response OneRequiredParamAndTwoOptionalParam(string requiredParamA, string optionalParamA, int? optionalParamB, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(requiredParamA, nameof(requiredParamA));

            using var scope = ClientDiagnostics.CreateScope("AmbiguousClient.OneRequiredParamAndTwoOptionalParam");
            scope.Start();
            try
            {
                using HttpMessage message = CreateOneRequiredParamAndTwoOptionalParamRequest(requiredParamA, optionalParamA, optionalParamB, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="requiredParamA"> The String to use. </param>
        /// <param name="requiredParamB"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParamA"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="requiredParamA"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response> TwoRequiredParamAsync(string requiredParamA, int requiredParamB, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(requiredParamA, nameof(requiredParamA));

            using var scope = ClientDiagnostics.CreateScope("AmbiguousClient.TwoRequiredParam");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTwoRequiredParamRequest(requiredParamA, requiredParamB, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="requiredParamA"> The String to use. </param>
        /// <param name="requiredParamB"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParamA"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="requiredParamA"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response TwoRequiredParam(string requiredParamA, int requiredParamB, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(requiredParamA, nameof(requiredParamA));

            using var scope = ClientDiagnostics.CreateScope("AmbiguousClient.TwoRequiredParam");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTwoRequiredParamRequest(requiredParamA, requiredParamB, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="requiredParamA"> The String to use. </param>
        /// <param name="requiredParamB"> The Integer to use. </param>
        /// <param name="optionalParamA"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParamA"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="requiredParamA"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response> TwoRequiredParamAndOneOptionalParamAsync(string requiredParamA, int requiredParamB, string optionalParamA, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(requiredParamA, nameof(requiredParamA));

            using var scope = ClientDiagnostics.CreateScope("AmbiguousClient.TwoRequiredParamAndOneOptionalParam");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTwoRequiredParamAndOneOptionalParamRequest(requiredParamA, requiredParamB, optionalParamA, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="requiredParamA"> The String to use. </param>
        /// <param name="requiredParamB"> The Integer to use. </param>
        /// <param name="optionalParamA"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParamA"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="requiredParamA"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response TwoRequiredParamAndOneOptionalParam(string requiredParamA, int requiredParamB, string optionalParamA, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(requiredParamA, nameof(requiredParamA));

            using var scope = ClientDiagnostics.CreateScope("AmbiguousClient.TwoRequiredParamAndOneOptionalParam");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTwoRequiredParamAndOneOptionalParamRequest(requiredParamA, requiredParamB, optionalParamA, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="requiredParamA"> The String to use. </param>
        /// <param name="requiredParamB"> The Integer to use. </param>
        /// <param name="optionalParamA"> The String to use. </param>
        /// <param name="optionalParamB"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParamA"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="requiredParamA"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response> TwoRequiredParamAndTwoOptionalParamAsync(string requiredParamA, int requiredParamB, string optionalParamA, int? optionalParamB, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(requiredParamA, nameof(requiredParamA));

            using var scope = ClientDiagnostics.CreateScope("AmbiguousClient.TwoRequiredParamAndTwoOptionalParam");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTwoRequiredParamAndTwoOptionalParamRequest(requiredParamA, requiredParamB, optionalParamA, optionalParamB, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="requiredParamA"> The String to use. </param>
        /// <param name="requiredParamB"> The Integer to use. </param>
        /// <param name="optionalParamA"> The String to use. </param>
        /// <param name="optionalParamB"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredParamA"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="requiredParamA"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response TwoRequiredParamAndTwoOptionalParam(string requiredParamA, int requiredParamB, string optionalParamA, int? optionalParamB, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(requiredParamA, nameof(requiredParamA));

            using var scope = ClientDiagnostics.CreateScope("AmbiguousClient.TwoRequiredParamAndTwoOptionalParam");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTwoRequiredParamAndTwoOptionalParamRequest(requiredParamA, requiredParamB, optionalParamA, optionalParamB, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateNoParamRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/ambiguous/nonParam", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateOneOptionalParamRequest(string optionalParamA, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/ambiguous/oneOptionalParam", false);
            if (optionalParamA != null)
            {
                uri.AppendQuery("optionalParamA", optionalParamA, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateTwoOptionalParamRequest(string optionalParamA, int? optionalParamB, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/ambiguous/twoOptionalParam", false);
            if (optionalParamA != null)
            {
                uri.AppendQuery("optionalParamA", optionalParamA, true);
            }
            if (optionalParamB != null)
            {
                uri.AppendQuery("optionalParamB", optionalParamB.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateOneRequiredParamRequest(string requiredParamA, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/ambiguous/oneRequiredParam/", false);
            uri.AppendPath(requiredParamA, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateOneRequiredParamAndOneOptionalParamRequest(string requiredParamA, string optionalParamA, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/ambiguous/oneRequiredParamAndOneOptionalParam/", false);
            uri.AppendPath(requiredParamA, true);
            if (optionalParamA != null)
            {
                uri.AppendQuery("optionalParamA", optionalParamA, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateOneRequiredParamAndTwoOptionalParamRequest(string requiredParamA, string optionalParamA, int? optionalParamB, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/ambiguous/oneRequiredParamAndTwoOptionalParam/", false);
            uri.AppendPath(requiredParamA, true);
            if (optionalParamA != null)
            {
                uri.AppendQuery("optionalParamA", optionalParamA, true);
            }
            if (optionalParamB != null)
            {
                uri.AppendQuery("optionalParamB", optionalParamB.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateTwoRequiredParamRequest(string requiredParamA, int requiredParamB, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/ambiguous/twoRequiredParam/", false);
            uri.AppendPath(requiredParamA, true);
            uri.AppendQuery("requiredParamB", requiredParamB, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateTwoRequiredParamAndOneOptionalParamRequest(string requiredParamA, int requiredParamB, string optionalParamA, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/ambiguous/twoRequiredParamAndOneOptionalParam/", false);
            uri.AppendPath(requiredParamA, true);
            uri.AppendQuery("requiredParamB", requiredParamB, true);
            if (optionalParamA != null)
            {
                uri.AppendQuery("optionalParamA", optionalParamA, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateTwoRequiredParamAndTwoOptionalParamRequest(string requiredParamA, int requiredParamB, string optionalParamA, int? optionalParamB, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/ambiguous/twoRequiredParamAndTwoOptionalParam/", false);
            uri.AppendPath(requiredParamA, true);
            uri.AppendQuery("requiredParamB", requiredParamB, true);
            if (optionalParamA != null)
            {
                uri.AppendQuery("optionalParamA", optionalParamA, true);
            }
            if (optionalParamB != null)
            {
                uri.AppendQuery("optionalParamB", optionalParamB.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
