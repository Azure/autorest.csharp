<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetDeploymentStatusAsync(String,String,String,RequestContext)">
<example>
This sample shows how to call GetDeploymentStatusAsync with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new JobsClient(endpoint);

Response response = await client.GetDeploymentStatusAsync("<projectName>", "<deploymentName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DeploymentJob</c>:
<code>{
  jobId: string, # Required.
  createdDateTime: string (date &amp; time), # Required.
  lastUpdatedDateTime: string (date &amp; time), # Required.
  expirationDateTime: string (date &amp; time), # Required.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required.
  warnings: [
    {
      code: string, # Required.
      message: string, # Required.
    }
  ], # Required.
  errors: {
    code: string, # Required.
    message: string, # Required.
    target: string, # Optional.
    details: [Error], # Required.
    innererror: {
      code: string, # Required.
      innererror: InnerError, # Optional.
    }, # Optional.
  }, # Required.
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetDeploymentStatus(String,String,String,RequestContext)">
<example>
This sample shows how to call GetDeploymentStatus with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new JobsClient(endpoint);

Response response = client.GetDeploymentStatus("<projectName>", "<deploymentName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DeploymentJob</c>:
<code>{
  jobId: string, # Required.
  createdDateTime: string (date &amp; time), # Required.
  lastUpdatedDateTime: string (date &amp; time), # Required.
  expirationDateTime: string (date &amp; time), # Required.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required.
  warnings: [
    {
      code: string, # Required.
      message: string, # Required.
    }
  ], # Required.
  errors: {
    code: string, # Required.
    message: string, # Required.
    target: string, # Optional.
    details: [Error], # Required.
    innererror: {
      code: string, # Required.
      innererror: InnerError, # Optional.
    }, # Optional.
  }, # Required.
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetSwapDeploymentsStatusAsync(String,String,String,RequestContext)">
<example>
This sample shows how to call GetSwapDeploymentsStatusAsync with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new JobsClient(endpoint);

Response response = await client.GetSwapDeploymentsStatusAsync("<projectName>", "<deploymentName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>SwapDeploymentsJob</c>:
<code>{
  jobId: string, # Required.
  createdDateTime: string (date &amp; time), # Required.
  lastUpdatedDateTime: string (date &amp; time), # Required.
  expirationDateTime: string (date &amp; time), # Required.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required.
  warnings: [
    {
      code: string, # Required.
      message: string, # Required.
    }
  ], # Required.
  errors: {
    code: string, # Required.
    message: string, # Required.
    target: string, # Optional.
    details: [Error], # Required.
    innererror: {
      code: string, # Required.
      innererror: InnerError, # Optional.
    }, # Optional.
  }, # Required.
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetSwapDeploymentsStatus(String,String,String,RequestContext)">
<example>
This sample shows how to call GetSwapDeploymentsStatus with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new JobsClient(endpoint);

Response response = client.GetSwapDeploymentsStatus("<projectName>", "<deploymentName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>SwapDeploymentsJob</c>:
<code>{
  jobId: string, # Required.
  createdDateTime: string (date &amp; time), # Required.
  lastUpdatedDateTime: string (date &amp; time), # Required.
  expirationDateTime: string (date &amp; time), # Required.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required.
  warnings: [
    {
      code: string, # Required.
      message: string, # Required.
    }
  ], # Required.
  errors: {
    code: string, # Required.
    message: string, # Required.
    target: string, # Optional.
    details: [Error], # Required.
    innererror: {
      code: string, # Required.
      innererror: InnerError, # Optional.
    }, # Optional.
  }, # Required.
  id: string, # Required.
}
</code>

</remarks>
    </member>
  </members>
</doc>