<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="CreateOrUpdateAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

var data = new {
    projectKind = "CustomSingleLabelClassification",
    storageInputContainerName = "<storageInputContainerName>",
    language = "<language>",
};

Response response = await client.CreateOrUpdateAsync("<projectName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
This sample shows how to call CreateOrUpdateAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

var data = new {
    projectKind = "CustomSingleLabelClassification",
    storageInputContainerName = "<storageInputContainerName>",
    settings = new {
        key = "<String>",
    },
    multilingual = true,
    description = "<description>",
    language = "<language>",
};

Response response = await client.CreateOrUpdateAsync("<projectName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("multilingual").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Project</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required. The project kind.
  storageInputContainerName: string, # Required. The storage container name.
  settings: Dictionary&lt;string, string&gt;, # Optional. The project settings.
  multilingual: boolean, # Optional. Whether the project would be used for multiple languages or not.
  description: string, # Optional. The project description.
  language: string, # Required. The project language. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English, &quot;en-gb&quot; for English (UK), &quot;es&quot; for Spanish etc.
  createdDateTime: string (date &amp; time), # Required. Represents the project creation datetime.
  lastModifiedDateTime: string (date &amp; time), # Required. Represents the project last modification datetime.
  lastTrainedDateTime: string (date &amp; time), # Required. Represents the project last training datetime.
  lastDeployedDateTime: string (date &amp; time), # Required. Represents the project last deployment datetime.
}
</code>

Response Body:

Schema for <c>Project</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required. The project kind.
  storageInputContainerName: string, # Required. The storage container name.
  settings: Dictionary&lt;string, string&gt;, # Optional. The project settings.
  multilingual: boolean, # Optional. Whether the project would be used for multiple languages or not.
  description: string, # Optional. The project description.
  language: string, # Required. The project language. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English, &quot;en-gb&quot; for English (UK), &quot;es&quot; for Spanish etc.
  createdDateTime: string (date &amp; time), # Required. Represents the project creation datetime.
  lastModifiedDateTime: string (date &amp; time), # Required. Represents the project last modification datetime.
  lastTrainedDateTime: string (date &amp; time), # Required. Represents the project last training datetime.
  lastDeployedDateTime: string (date &amp; time), # Required. Represents the project last deployment datetime.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdate(String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdate with required parameters and request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

var data = new {
    projectKind = "CustomSingleLabelClassification",
    storageInputContainerName = "<storageInputContainerName>",
    language = "<language>",
};

Response response = client.CreateOrUpdate("<projectName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
This sample shows how to call CreateOrUpdate with all parameters and request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

var data = new {
    projectKind = "CustomSingleLabelClassification",
    storageInputContainerName = "<storageInputContainerName>",
    settings = new {
        key = "<String>",
    },
    multilingual = true,
    description = "<description>",
    language = "<language>",
};

Response response = client.CreateOrUpdate("<projectName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("multilingual").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Project</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required. The project kind.
  storageInputContainerName: string, # Required. The storage container name.
  settings: Dictionary&lt;string, string&gt;, # Optional. The project settings.
  multilingual: boolean, # Optional. Whether the project would be used for multiple languages or not.
  description: string, # Optional. The project description.
  language: string, # Required. The project language. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English, &quot;en-gb&quot; for English (UK), &quot;es&quot; for Spanish etc.
  createdDateTime: string (date &amp; time), # Required. Represents the project creation datetime.
  lastModifiedDateTime: string (date &amp; time), # Required. Represents the project last modification datetime.
  lastTrainedDateTime: string (date &amp; time), # Required. Represents the project last training datetime.
  lastDeployedDateTime: string (date &amp; time), # Required. Represents the project last deployment datetime.
}
</code>

Response Body:

Schema for <c>Project</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required. The project kind.
  storageInputContainerName: string, # Required. The storage container name.
  settings: Dictionary&lt;string, string&gt;, # Optional. The project settings.
  multilingual: boolean, # Optional. Whether the project would be used for multiple languages or not.
  description: string, # Optional. The project description.
  language: string, # Required. The project language. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English, &quot;en-gb&quot; for English (UK), &quot;es&quot; for Spanish etc.
  createdDateTime: string (date &amp; time), # Required. Represents the project creation datetime.
  lastModifiedDateTime: string (date &amp; time), # Required. Represents the project last modification datetime.
  lastTrainedDateTime: string (date &amp; time), # Required. Represents the project last training datetime.
  lastDeployedDateTime: string (date &amp; time), # Required. Represents the project last deployment datetime.
}
</code>

</remarks>
    </member>
    <member name="GetProjectAsync(String,RequestContext)">
<example>
This sample shows how to call GetProjectAsync with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

Response response = await client.GetProjectAsync("<projectName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("multilingual").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Project</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required. The project kind.
  storageInputContainerName: string, # Required. The storage container name.
  settings: Dictionary&lt;string, string&gt;, # Optional. The project settings.
  multilingual: boolean, # Optional. Whether the project would be used for multiple languages or not.
  description: string, # Optional. The project description.
  language: string, # Required. The project language. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English, &quot;en-gb&quot; for English (UK), &quot;es&quot; for Spanish etc.
  createdDateTime: string (date &amp; time), # Required. Represents the project creation datetime.
  lastModifiedDateTime: string (date &amp; time), # Required. Represents the project last modification datetime.
  lastTrainedDateTime: string (date &amp; time), # Required. Represents the project last training datetime.
  lastDeployedDateTime: string (date &amp; time), # Required. Represents the project last deployment datetime.
}
</code>

</remarks>
    </member>
    <member name="GetProject(String,RequestContext)">
<example>
This sample shows how to call GetProject with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

Response response = client.GetProject("<projectName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("multilingual").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Project</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required. The project kind.
  storageInputContainerName: string, # Required. The storage container name.
  settings: Dictionary&lt;string, string&gt;, # Optional. The project settings.
  multilingual: boolean, # Optional. Whether the project would be used for multiple languages or not.
  description: string, # Optional. The project description.
  language: string, # Required. The project language. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English, &quot;en-gb&quot; for English (UK), &quot;es&quot; for Spanish etc.
  createdDateTime: string (date &amp; time), # Required. Represents the project creation datetime.
  lastModifiedDateTime: string (date &amp; time), # Required. Represents the project last modification datetime.
  lastTrainedDateTime: string (date &amp; time), # Required. Represents the project last training datetime.
  lastDeployedDateTime: string (date &amp; time), # Required. Represents the project last deployment datetime.
}
</code>

</remarks>
    </member>
    <member name="DeleteAsync(String,RequestContext)">
<example>
This sample shows how to call DeleteAsync with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

Response response = await client.DeleteAsync("<projectName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("multilingual").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Project</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required. The project kind.
  storageInputContainerName: string, # Required. The storage container name.
  settings: Dictionary&lt;string, string&gt;, # Optional. The project settings.
  multilingual: boolean, # Optional. Whether the project would be used for multiple languages or not.
  description: string, # Optional. The project description.
  language: string, # Required. The project language. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English, &quot;en-gb&quot; for English (UK), &quot;es&quot; for Spanish etc.
  createdDateTime: string (date &amp; time), # Required. Represents the project creation datetime.
  lastModifiedDateTime: string (date &amp; time), # Required. Represents the project last modification datetime.
  lastTrainedDateTime: string (date &amp; time), # Required. Represents the project last training datetime.
  lastDeployedDateTime: string (date &amp; time), # Required. Represents the project last deployment datetime.
}
</code>

</remarks>
    </member>
    <member name="Delete(String,RequestContext)">
<example>
This sample shows how to call Delete with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

Response response = client.Delete("<projectName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("multilingual").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Project</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required. The project kind.
  storageInputContainerName: string, # Required. The storage container name.
  settings: Dictionary&lt;string, string&gt;, # Optional. The project settings.
  multilingual: boolean, # Optional. Whether the project would be used for multiple languages or not.
  description: string, # Optional. The project description.
  language: string, # Required. The project language. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English, &quot;en-gb&quot; for English (UK), &quot;es&quot; for Spanish etc.
  createdDateTime: string (date &amp; time), # Required. Represents the project creation datetime.
  lastModifiedDateTime: string (date &amp; time), # Required. Represents the project last modification datetime.
  lastTrainedDateTime: string (date &amp; time), # Required. Represents the project last training datetime.
  lastDeployedDateTime: string (date &amp; time), # Required. Represents the project last deployment datetime.
}
</code>

</remarks>
    </member>
    <member name="ExportAsync(String,String,RequestContext)">
<example>
This sample shows how to call ExportAsync with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

Response response = await client.ExportAsync("<projectName>", "<projectFileVersion>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Export(String,String,RequestContext)">
<example>
This sample shows how to call Export with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

Response response = client.Export("<projectName>", "<projectFileVersion>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="ImportxAsync(String,RequestContext)">
<example>
This sample shows how to call ImportxAsync with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

Response response = await client.ImportxAsync("<projectName>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Importx(String,RequestContext)">
<example>
This sample shows how to call Importx with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

Response response = client.Importx("<projectName>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="TrainAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call TrainAsync with required parameters and request content.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

var data = new {
    modelLabel = "<modelLabel>",
};

Response response = await client.TrainAsync("<projectName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>TrainingJobOptions</c>:
<code>{
  modelLabel: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="Train(String,RequestContent,RequestContext)">
<example>
This sample shows how to call Train with required parameters and request content.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

var data = new {
    modelLabel = "<modelLabel>",
};

Response response = client.Train("<projectName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>TrainingJobOptions</c>:
<code>{
  modelLabel: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetDeploymentAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetDeploymentAsync with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

Response response = await client.GetDeploymentAsync("<projectName>", "<deploymentName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Deployment</c>:
<code>{
  name: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetDeployment(String,String,RequestContext)">
<example>
This sample shows how to call GetDeployment with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

Response response = client.GetDeployment("<projectName>", "<deploymentName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Deployment</c>:
<code>{
  name: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="DeployProjectAsync(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call DeployProjectAsync with required parameters and request content and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

var data = new {};

Response response = await client.DeployProjectAsync("<projectName>", "<deploymentName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Deployment</c>:
<code>{
  name: string, # Required.
}
</code>

Response Body:

Schema for <c>Deployment</c>:
<code>{
  name: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="DeployProject(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call DeployProject with required parameters and request content and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

var data = new {};

Response response = client.DeployProject("<projectName>", "<deploymentName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Deployment</c>:
<code>{
  name: string, # Required.
}
</code>

Response Body:

Schema for <c>Deployment</c>:
<code>{
  name: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="DeleteDeploymentAsync(String,String,RequestContext)">
<example>
This sample shows how to call DeleteDeploymentAsync with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

Response response = await client.DeleteDeploymentAsync("<projectName>", "<deploymentName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Deployment</c>:
<code>{
  name: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="DeleteDeployment(String,String,RequestContext)">
<example>
This sample shows how to call DeleteDeployment with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

Response response = client.DeleteDeployment("<projectName>", "<deploymentName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Deployment</c>:
<code>{
  name: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="SwapDeploymentsAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call SwapDeploymentsAsync with required parameters and request content.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

var data = new {
    firstDeploymentName = "<firstDeploymentName>",
    secondDeploymentName = "<secondDeploymentName>",
};

Response response = await client.SwapDeploymentsAsync("<projectName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>SwapDeploymentsOptions</c>:
<code>{
  firstDeploymentName: string, # Required. Represents the first deployment name.
  secondDeploymentName: string, # Required. Represents the second deployment name.
}
</code>

</remarks>
    </member>
    <member name="SwapDeployments(String,RequestContent,RequestContext)">
<example>
This sample shows how to call SwapDeployments with required parameters and request content.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

var data = new {
    firstDeploymentName = "<firstDeploymentName>",
    secondDeploymentName = "<secondDeploymentName>",
};

Response response = client.SwapDeployments("<projectName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>SwapDeploymentsOptions</c>:
<code>{
  firstDeploymentName: string, # Required. Represents the first deployment name.
  secondDeploymentName: string, # Required. Represents the second deployment name.
}
</code>

</remarks>
    </member>
    <member name="GetDeploymentStatusAsync(String,String,String,RequestContext)">
<example>
This sample shows how to call GetDeploymentStatusAsync with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

Response response = await client.GetDeploymentStatusAsync("<projectName>", "<deploymentName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DeploymentJob</c>:
<code>{
  jobId: string, # Required. The job ID.
  createdDateTime: string (date &amp; time), # Required. The creation date time of the job.
  lastUpdatedDateTime: string (date &amp; time), # Required. The the last date time the job was updated.
  expirationDateTime: string (date &amp; time), # Required. The expiration date time of the job.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required. The job status.
  warnings: [
    {
      code: string, # Required. The warning code.
      message: string, # Required. The warning message.
    }
  ], # Required. The warnings that were encountered while executing the job.
  errors: {
    code: string, # Required. One of a server-defined set of error codes.
    message: string, # Required. A human-readable representation of the error.
    target: string, # Optional. The target of the error.
    details: [Error], # Required. An array of details about specific errors that led to this reported error.
    innererror: {
      code: string, # Required. One of a server-defined set of error codes.
      innererror: InnerError, # Optional. Inner error.
    }, # Optional. An object containing more specific information than the current object about the error.
  }, # Required. The errors encountered while executing the job.
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetDeploymentStatus(String,String,String,RequestContext)">
<example>
This sample shows how to call GetDeploymentStatus with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

Response response = client.GetDeploymentStatus("<projectName>", "<deploymentName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DeploymentJob</c>:
<code>{
  jobId: string, # Required. The job ID.
  createdDateTime: string (date &amp; time), # Required. The creation date time of the job.
  lastUpdatedDateTime: string (date &amp; time), # Required. The the last date time the job was updated.
  expirationDateTime: string (date &amp; time), # Required. The expiration date time of the job.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required. The job status.
  warnings: [
    {
      code: string, # Required. The warning code.
      message: string, # Required. The warning message.
    }
  ], # Required. The warnings that were encountered while executing the job.
  errors: {
    code: string, # Required. One of a server-defined set of error codes.
    message: string, # Required. A human-readable representation of the error.
    target: string, # Optional. The target of the error.
    details: [Error], # Required. An array of details about specific errors that led to this reported error.
    innererror: {
      code: string, # Required. One of a server-defined set of error codes.
      innererror: InnerError, # Optional. Inner error.
    }, # Optional. An object containing more specific information than the current object about the error.
  }, # Required. The errors encountered while executing the job.
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetSwapDeploymentsStatusAsync(String,String,String,RequestContext)">
<example>
This sample shows how to call GetSwapDeploymentsStatusAsync with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

Response response = await client.GetSwapDeploymentsStatusAsync("<projectName>", "<deploymentName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>SwapDeploymentsJob</c>:
<code>{
  jobId: string, # Required. The job ID.
  createdDateTime: string (date &amp; time), # Required. The creation date time of the job.
  lastUpdatedDateTime: string (date &amp; time), # Required. The the last date time the job was updated.
  expirationDateTime: string (date &amp; time), # Required. The expiration date time of the job.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required. The job status.
  warnings: [
    {
      code: string, # Required. The warning code.
      message: string, # Required. The warning message.
    }
  ], # Required. The warnings that were encountered while executing the job.
  errors: {
    code: string, # Required. One of a server-defined set of error codes.
    message: string, # Required. A human-readable representation of the error.
    target: string, # Optional. The target of the error.
    details: [Error], # Required. An array of details about specific errors that led to this reported error.
    innererror: {
      code: string, # Required. One of a server-defined set of error codes.
      innererror: InnerError, # Optional. Inner error.
    }, # Optional. An object containing more specific information than the current object about the error.
  }, # Required. The errors encountered while executing the job.
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetSwapDeploymentsStatus(String,String,String,RequestContext)">
<example>
This sample shows how to call GetSwapDeploymentsStatus with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

Response response = client.GetSwapDeploymentsStatus("<projectName>", "<deploymentName>", "<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());
Console.WriteLine(result.GetProperty("expirationDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("warnings")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("errors").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>SwapDeploymentsJob</c>:
<code>{
  jobId: string, # Required. The job ID.
  createdDateTime: string (date &amp; time), # Required. The creation date time of the job.
  lastUpdatedDateTime: string (date &amp; time), # Required. The the last date time the job was updated.
  expirationDateTime: string (date &amp; time), # Required. The expiration date time of the job.
  status: &quot;notStarted&quot; | &quot;running&quot; | &quot;succeeded&quot; | &quot;failed&quot; | &quot;cancelled&quot; | &quot;cancelling&quot; | &quot;partiallyCompleted&quot;, # Required. The job status.
  warnings: [
    {
      code: string, # Required. The warning code.
      message: string, # Required. The warning message.
    }
  ], # Required. The warnings that were encountered while executing the job.
  errors: {
    code: string, # Required. One of a server-defined set of error codes.
    message: string, # Required. A human-readable representation of the error.
    target: string, # Optional. The target of the error.
    details: [Error], # Required. An array of details about specific errors that led to this reported error.
    innererror: {
      code: string, # Required. One of a server-defined set of error codes.
      innererror: InnerError, # Optional. Inner error.
    }, # Optional. An object containing more specific information than the current object about the error.
  }, # Required. The errors encountered while executing the job.
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetProjectsAsync(RequestContext)">
<example>
This sample shows how to call GetProjectsAsync and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

await foreach (var data in client.GetProjectsAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("projectKind").ToString());
    Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
    Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("multilingual").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("language").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>Array</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required. The project kind.
  storageInputContainerName: string, # Required. The storage container name.
  settings: Dictionary&lt;string, string&gt;, # Optional. The project settings.
  multilingual: boolean, # Optional. Whether the project would be used for multiple languages or not.
  description: string, # Optional. The project description.
  language: string, # Required. The project language. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English, &quot;en-gb&quot; for English (UK), &quot;es&quot; for Spanish etc.
  createdDateTime: string (date &amp; time), # Required. Represents the project creation datetime.
  lastModifiedDateTime: string (date &amp; time), # Required. Represents the project last modification datetime.
  lastTrainedDateTime: string (date &amp; time), # Required. Represents the project last training datetime.
  lastDeployedDateTime: string (date &amp; time), # Required. Represents the project last deployment datetime.
}
</code>

</remarks>
    </member>
    <member name="GetProjects(RequestContext)">
<example>
This sample shows how to call GetProjects and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

foreach (var data in client.GetProjects())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("projectKind").ToString());
    Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
    Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("multilingual").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("language").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>Array</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required. The project kind.
  storageInputContainerName: string, # Required. The storage container name.
  settings: Dictionary&lt;string, string&gt;, # Optional. The project settings.
  multilingual: boolean, # Optional. Whether the project would be used for multiple languages or not.
  description: string, # Optional. The project description.
  language: string, # Required. The project language. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English, &quot;en-gb&quot; for English (UK), &quot;es&quot; for Spanish etc.
  createdDateTime: string (date &amp; time), # Required. Represents the project creation datetime.
  lastModifiedDateTime: string (date &amp; time), # Required. Represents the project last modification datetime.
  lastTrainedDateTime: string (date &amp; time), # Required. Represents the project last training datetime.
  lastDeployedDateTime: string (date &amp; time), # Required. Represents the project last deployment datetime.
}
</code>

</remarks>
    </member>
    <member name="GetDeploymentsAsync(String,RequestContext)">
<example>
This sample shows how to call GetDeploymentsAsync with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

await foreach (var data in client.GetDeploymentsAsync("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("projectKind").ToString());
    Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
    Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("multilingual").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("language").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>Array</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required. The project kind.
  storageInputContainerName: string, # Required. The storage container name.
  settings: Dictionary&lt;string, string&gt;, # Optional. The project settings.
  multilingual: boolean, # Optional. Whether the project would be used for multiple languages or not.
  description: string, # Optional. The project description.
  language: string, # Required. The project language. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English, &quot;en-gb&quot; for English (UK), &quot;es&quot; for Spanish etc.
  createdDateTime: string (date &amp; time), # Required. Represents the project creation datetime.
  lastModifiedDateTime: string (date &amp; time), # Required. Represents the project last modification datetime.
  lastTrainedDateTime: string (date &amp; time), # Required. Represents the project last training datetime.
  lastDeployedDateTime: string (date &amp; time), # Required. Represents the project last deployment datetime.
}
</code>

</remarks>
    </member>
    <member name="GetDeployments(String,RequestContext)">
<example>
This sample shows how to call GetDeployments with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

foreach (var data in client.GetDeployments("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("projectKind").ToString());
    Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
    Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("multilingual").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("language").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>Array</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required. The project kind.
  storageInputContainerName: string, # Required. The storage container name.
  settings: Dictionary&lt;string, string&gt;, # Optional. The project settings.
  multilingual: boolean, # Optional. Whether the project would be used for multiple languages or not.
  description: string, # Optional. The project description.
  language: string, # Required. The project language. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English, &quot;en-gb&quot; for English (UK), &quot;es&quot; for Spanish etc.
  createdDateTime: string (date &amp; time), # Required. Represents the project creation datetime.
  lastModifiedDateTime: string (date &amp; time), # Required. Represents the project last modification datetime.
  lastTrainedDateTime: string (date &amp; time), # Required. Represents the project last training datetime.
  lastDeployedDateTime: string (date &amp; time), # Required. Represents the project last deployment datetime.
}
</code>

</remarks>
    </member>
    <member name="GetSupportedLanguagesAsync(Int32,Int32,Int32,RequestContext)">
<example>
This sample shows how to call GetSupportedLanguagesAsync and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

await foreach (var data in client.GetSupportedLanguagesAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("languageName").ToString());
    Console.WriteLine(result.GetProperty("languageCode").ToString());
}
]]></code>
This sample shows how to call GetSupportedLanguagesAsync with all parameters, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

await foreach (var data in client.GetSupportedLanguagesAsync(1234, 1234, 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("languageName").ToString());
    Console.WriteLine(result.GetProperty("languageCode").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>Array</c>:
<code>{
  languageName: string, # Required. The language name.
  languageCode: string, # Required. The language code. This is BCP-47 representation of a language. For example, &quot;en&quot; for English, &quot;en-gb&quot; for English (UK), &quot;es&quot; for Spanish etc.
}
</code>

</remarks>
    </member>
    <member name="GetSupportedLanguages(Int32,Int32,Int32,RequestContext)">
<example>
This sample shows how to call GetSupportedLanguages and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

foreach (var data in client.GetSupportedLanguages())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("languageName").ToString());
    Console.WriteLine(result.GetProperty("languageCode").ToString());
}
]]></code>
This sample shows how to call GetSupportedLanguages with all parameters, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

foreach (var data in client.GetSupportedLanguages(1234, 1234, 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("languageName").ToString());
    Console.WriteLine(result.GetProperty("languageCode").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>Array</c>:
<code>{
  languageName: string, # Required. The language name.
  languageCode: string, # Required. The language code. This is BCP-47 representation of a language. For example, &quot;en&quot; for English, &quot;en-gb&quot; for English (UK), &quot;es&quot; for Spanish etc.
}
</code>

</remarks>
    </member>
    <member name="GetTrainingConfigVersionsAsync(Int32,Int32,Int32,RequestContext)">
<example>
This sample shows how to call GetTrainingConfigVersionsAsync and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

await foreach (var data in client.GetTrainingConfigVersionsAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("trainingConfigVersionStr").ToString());
    Console.WriteLine(result.GetProperty("modelExpirationDate").ToString());
}
]]></code>
This sample shows how to call GetTrainingConfigVersionsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

await foreach (var data in client.GetTrainingConfigVersionsAsync(1234, 1234, 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("trainingConfigVersionStr").ToString());
    Console.WriteLine(result.GetProperty("modelExpirationDate").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>Array</c>:
<code>{
  trainingConfigVersionStr: string, # Required. Represents the version of the config.
  modelExpirationDate: string (date), # Required. Represents the training config version expiration date.
}
</code>

</remarks>
    </member>
    <member name="GetTrainingConfigVersions(Int32,Int32,Int32,RequestContext)">
<example>
This sample shows how to call GetTrainingConfigVersions and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

foreach (var data in client.GetTrainingConfigVersions())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("trainingConfigVersionStr").ToString());
    Console.WriteLine(result.GetProperty("modelExpirationDate").ToString());
}
]]></code>
This sample shows how to call GetTrainingConfigVersions with all parameters, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AuthoringClient(endpoint);

foreach (var data in client.GetTrainingConfigVersions(1234, 1234, 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("trainingConfigVersionStr").ToString());
    Console.WriteLine(result.GetProperty("modelExpirationDate").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>Array</c>:
<code>{
  trainingConfigVersionStr: string, # Required. Represents the version of the config.
  modelExpirationDate: string (date), # Required. Represents the training config version expiration date.
}
</code>

</remarks>
    </member>
  </members>
</doc>