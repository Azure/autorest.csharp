<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="CreateOrUpdateAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectsClient(endpoint);

var data = new {
    projectName = "<projectName>",
    projectKind = "CustomSingleLabelClassification",
    storageInputContainerName = "<storageInputContainerName>",
    language = "<language>",
};

Response response = await client.CreateOrUpdateAsync("<projectName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
This sample shows how to call CreateOrUpdateAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectsClient(endpoint);

var data = new {
    projectName = "<projectName>",
    projectKind = "CustomSingleLabelClassification",
    storageInputContainerName = "<storageInputContainerName>",
    settings = new {
        key = "<String>",
    },
    multilingual = true,
    description = "<description>",
    language = "<language>",
};

Response response = await client.CreateOrUpdateAsync("<projectName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("multilingual").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Project</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required.
  storageInputContainerName: string, # Required.
  settings: Dictionary&lt;string, string&gt;, # Optional.
  multilingual: boolean, # Optional.
  description: string, # Optional.
  language: string, # Required.
  createdDateTime: string (date &amp; time), # Required.
  lastModifiedDateTime: string (date &amp; time), # Required.
  lastTrainedDateTime: string (date &amp; time), # Required.
  lastDeployedDateTime: string (date &amp; time), # Required.
}
</code>

Response Body:

Schema for <c>Project</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required.
  storageInputContainerName: string, # Required.
  settings: Dictionary&lt;string, string&gt;, # Optional.
  multilingual: boolean, # Optional.
  description: string, # Optional.
  language: string, # Required.
  createdDateTime: string (date &amp; time), # Required.
  lastModifiedDateTime: string (date &amp; time), # Required.
  lastTrainedDateTime: string (date &amp; time), # Required.
  lastDeployedDateTime: string (date &amp; time), # Required.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdate(String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdate with required parameters and request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectsClient(endpoint);

var data = new {
    projectName = "<projectName>",
    projectKind = "CustomSingleLabelClassification",
    storageInputContainerName = "<storageInputContainerName>",
    language = "<language>",
};

Response response = client.CreateOrUpdate("<projectName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
This sample shows how to call CreateOrUpdate with all parameters and request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectsClient(endpoint);

var data = new {
    projectName = "<projectName>",
    projectKind = "CustomSingleLabelClassification",
    storageInputContainerName = "<storageInputContainerName>",
    settings = new {
        key = "<String>",
    },
    multilingual = true,
    description = "<description>",
    language = "<language>",
};

Response response = client.CreateOrUpdate("<projectName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("multilingual").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Project</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required.
  storageInputContainerName: string, # Required.
  settings: Dictionary&lt;string, string&gt;, # Optional.
  multilingual: boolean, # Optional.
  description: string, # Optional.
  language: string, # Required.
  createdDateTime: string (date &amp; time), # Required.
  lastModifiedDateTime: string (date &amp; time), # Required.
  lastTrainedDateTime: string (date &amp; time), # Required.
  lastDeployedDateTime: string (date &amp; time), # Required.
}
</code>

Response Body:

Schema for <c>Project</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required.
  storageInputContainerName: string, # Required.
  settings: Dictionary&lt;string, string&gt;, # Optional.
  multilingual: boolean, # Optional.
  description: string, # Optional.
  language: string, # Required.
  createdDateTime: string (date &amp; time), # Required.
  lastModifiedDateTime: string (date &amp; time), # Required.
  lastTrainedDateTime: string (date &amp; time), # Required.
  lastDeployedDateTime: string (date &amp; time), # Required.
}
</code>

</remarks>
    </member>
    <member name="GetProjectAsync(String,RequestContext)">
<example>
This sample shows how to call GetProjectAsync with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectsClient(endpoint);

Response response = await client.GetProjectAsync("<projectName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("multilingual").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Project</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required.
  storageInputContainerName: string, # Required.
  settings: Dictionary&lt;string, string&gt;, # Optional.
  multilingual: boolean, # Optional.
  description: string, # Optional.
  language: string, # Required.
  createdDateTime: string (date &amp; time), # Required.
  lastModifiedDateTime: string (date &amp; time), # Required.
  lastTrainedDateTime: string (date &amp; time), # Required.
  lastDeployedDateTime: string (date &amp; time), # Required.
}
</code>

</remarks>
    </member>
    <member name="GetProject(String,RequestContext)">
<example>
This sample shows how to call GetProject with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectsClient(endpoint);

Response response = client.GetProject("<projectName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("multilingual").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Project</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required.
  storageInputContainerName: string, # Required.
  settings: Dictionary&lt;string, string&gt;, # Optional.
  multilingual: boolean, # Optional.
  description: string, # Optional.
  language: string, # Required.
  createdDateTime: string (date &amp; time), # Required.
  lastModifiedDateTime: string (date &amp; time), # Required.
  lastTrainedDateTime: string (date &amp; time), # Required.
  lastDeployedDateTime: string (date &amp; time), # Required.
}
</code>

</remarks>
    </member>
    <member name="DeleteAsync(String,RequestContext)">
<example>
This sample shows how to call DeleteAsync with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectsClient(endpoint);

Response response = await client.DeleteAsync("<projectName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("multilingual").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Project</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required.
  storageInputContainerName: string, # Required.
  settings: Dictionary&lt;string, string&gt;, # Optional.
  multilingual: boolean, # Optional.
  description: string, # Optional.
  language: string, # Required.
  createdDateTime: string (date &amp; time), # Required.
  lastModifiedDateTime: string (date &amp; time), # Required.
  lastTrainedDateTime: string (date &amp; time), # Required.
  lastDeployedDateTime: string (date &amp; time), # Required.
}
</code>

</remarks>
    </member>
    <member name="Delete(String,RequestContext)">
<example>
This sample shows how to call Delete with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectsClient(endpoint);

Response response = client.Delete("<projectName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("multilingual").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Project</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required.
  storageInputContainerName: string, # Required.
  settings: Dictionary&lt;string, string&gt;, # Optional.
  multilingual: boolean, # Optional.
  description: string, # Optional.
  language: string, # Required.
  createdDateTime: string (date &amp; time), # Required.
  lastModifiedDateTime: string (date &amp; time), # Required.
  lastTrainedDateTime: string (date &amp; time), # Required.
  lastDeployedDateTime: string (date &amp; time), # Required.
}
</code>

</remarks>
    </member>
    <member name="ExportAsync(String,String,RequestContext)">
<example>
This sample shows how to call ExportAsync with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectsClient(endpoint);

Response response = await client.ExportAsync("<projectName>", "<projectFileVersion>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Export(String,String,RequestContext)">
<example>
This sample shows how to call Export with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectsClient(endpoint);

Response response = client.Export("<projectName>", "<projectFileVersion>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="ImportxAsync(String,RequestContext)">
<example>
This sample shows how to call ImportxAsync with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectsClient(endpoint);

Response response = await client.ImportxAsync("<projectName>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Importx(String,RequestContext)">
<example>
This sample shows how to call Importx with required parameters.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectsClient(endpoint);

Response response = client.Importx("<projectName>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="TrainAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call TrainAsync with required parameters and request content.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectsClient(endpoint);

var data = new {
    modelLabel = "<modelLabel>",
};

Response response = await client.TrainAsync("<projectName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>TrainingJobOptions</c>:
<code>{
  modelLabel: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="Train(String,RequestContent,RequestContext)">
<example>
This sample shows how to call Train with required parameters and request content.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectsClient(endpoint);

var data = new {
    modelLabel = "<modelLabel>",
};

Response response = client.Train("<projectName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>TrainingJobOptions</c>:
<code>{
  modelLabel: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetProjectsAsync(Int32,Int32,Int32,RequestContext)">
<example>
This sample shows how to call GetProjectsAsync and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectsClient(endpoint);

await foreach (var data in client.GetProjectsAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("projectKind").ToString());
    Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
    Console.WriteLine(result.GetProperty("language").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
}
]]></code>
This sample shows how to call GetProjectsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectsClient(endpoint);

await foreach (var data in client.GetProjectsAsync(1234, 1234, 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("projectKind").ToString());
    Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
    Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("multilingual").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("language").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>Array</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required.
  storageInputContainerName: string, # Required.
  settings: Dictionary&lt;string, string&gt;, # Optional.
  multilingual: boolean, # Optional.
  description: string, # Optional.
  language: string, # Required.
  createdDateTime: string (date &amp; time), # Required.
  lastModifiedDateTime: string (date &amp; time), # Required.
  lastTrainedDateTime: string (date &amp; time), # Required.
  lastDeployedDateTime: string (date &amp; time), # Required.
}
</code>

</remarks>
    </member>
    <member name="GetProjects(Int32,Int32,Int32,RequestContext)">
<example>
This sample shows how to call GetProjects and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectsClient(endpoint);

foreach (var data in client.GetProjects())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("projectKind").ToString());
    Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
    Console.WriteLine(result.GetProperty("language").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
}
]]></code>
This sample shows how to call GetProjects with all parameters, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ProjectsClient(endpoint);

foreach (var data in client.GetProjects(1234, 1234, 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("projectKind").ToString());
    Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
    Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("multilingual").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("language").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>Array</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required.
  storageInputContainerName: string, # Required.
  settings: Dictionary&lt;string, string&gt;, # Optional.
  multilingual: boolean, # Optional.
  description: string, # Optional.
  language: string, # Required.
  createdDateTime: string (date &amp; time), # Required.
  lastModifiedDateTime: string (date &amp; time), # Required.
  lastTrainedDateTime: string (date &amp; time), # Required.
  lastDeployedDateTime: string (date &amp; time), # Required.
}
</code>

</remarks>
    </member>
  </members>
</doc>