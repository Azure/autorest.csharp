// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace ModelReaderWriterValidationTypeSpec.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ModelReaderWriterValidationTypeSpecModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.ModelWithPersistableOnly"/>. </summary>
        /// <param name="name"></param>
        /// <param name="fields"></param>
        /// <param name="nullProperty"></param>
        /// <param name="keyValuePairs"></param>
        /// <param name="xProperty"></param>
        /// <returns> A new <see cref="Models.ModelWithPersistableOnly"/> instance for mocking. </returns>
        public static ModelWithPersistableOnly ModelWithPersistableOnly(string name = null, IEnumerable<string> fields = null, int? nullProperty = null, IDictionary<string, string> keyValuePairs = null, int xProperty = default)
        {
            fields ??= new List<string>();
            keyValuePairs ??= new Dictionary<string, string>();

            return new ModelWithPersistableOnly(
                name,
                fields?.ToList(),
                nullProperty,
                keyValuePairs,
                xProperty,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ModelX"/>. </summary>
        /// <param name="name"></param>
        /// <param name="fields"></param>
        /// <param name="nullProperty"></param>
        /// <param name="keyValuePairs"></param>
        /// <param name="xProperty"></param>
        /// <returns> A new <see cref="Models.ModelX"/> instance for mocking. </returns>
        public static ModelX ModelX(string name = null, IEnumerable<string> fields = null, int? nullProperty = null, IDictionary<string, string> keyValuePairs = null, int xProperty = default)
        {
            fields ??= new List<string>();
            keyValuePairs ??= new Dictionary<string, string>();

            return new ModelX(
                "X",
                name,
                serializedAdditionalRawData: null,
                fields?.ToList(),
                nullProperty,
                keyValuePairs,
                xProperty);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ModelY"/>. </summary>
        /// <param name="name"></param>
        /// <param name="yProperty"></param>
        /// <returns> A new <see cref="Models.ModelY"/> instance for mocking. </returns>
        public static ModelY ModelY(string name = null, string yProperty = null)
        {
            return new ModelY("Y", name, serializedAdditionalRawData: null, yProperty);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AvailabilitySetData"/>. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="resourceType"></param>
        /// <param name="location"></param>
        /// <param name="tags"></param>
        /// <param name="sku"></param>
        /// <param name="properties"></param>
        /// <returns> A new <see cref="Models.AvailabilitySetData"/> instance for mocking. </returns>
        public static AvailabilitySetData AvailabilitySetData(string id = null, string name = null, string resourceType = null, string location = null, IDictionary<string, string> tags = null, ComputeSku sku = null, AvailabilitySetProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new AvailabilitySetData(
                id,
                name,
                resourceType,
                location,
                tags,
                serializedAdditionalRawData: null,
                sku,
                properties);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TrackedResourceData"/>. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="resourceType"></param>
        /// <param name="location"></param>
        /// <param name="tags"></param>
        /// <returns> A new <see cref="Models.TrackedResourceData"/> instance for mocking. </returns>
        public static TrackedResourceData TrackedResourceData(string id = null, string name = null, string resourceType = null, string location = null, IDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new TrackedResourceData(
                id,
                name,
                resourceType,
                location,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResourceProviderData"/>. </summary>
        /// <param name="id"></param>
        /// <param name="namespace"></param>
        /// <param name="registrationState"></param>
        /// <param name="registrationPolicy"></param>
        /// <param name="resourceTypes"></param>
        /// <param name="providerAuthorizationConsentState"></param>
        /// <returns> A new <see cref="Models.ResourceProviderData"/> instance for mocking. </returns>
        public static ResourceProviderData ResourceProviderData(string id = null, string @namespace = null, string registrationState = null, string registrationPolicy = null, IEnumerable<ProviderResourceType> resourceTypes = null, ProviderAuthorizationConsentState? providerAuthorizationConsentState = null)
        {
            resourceTypes ??= new List<ProviderResourceType>();

            return new ResourceProviderData(
                id,
                @namespace,
                registrationState,
                registrationPolicy,
                resourceTypes?.ToList(),
                providerAuthorizationConsentState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ProviderResourceType"/>. </summary>
        /// <param name="resourceType"></param>
        /// <param name="locations"></param>
        /// <param name="locationMappings"></param>
        /// <param name="aliases"></param>
        /// <param name="apiVersions"></param>
        /// <param name="defaultApiVersion"></param>
        /// <param name="zoneMappings"></param>
        /// <param name="apiProfiles"></param>
        /// <param name="capabilities"></param>
        /// <param name="properties"></param>
        /// <returns> A new <see cref="Models.ProviderResourceType"/> instance for mocking. </returns>
        public static ProviderResourceType ProviderResourceType(string resourceType = null, IEnumerable<string> locations = null, IEnumerable<ProviderExtendedLocation> locationMappings = null, IEnumerable<ResourceTypeAlias> aliases = null, IEnumerable<string> apiVersions = null, string defaultApiVersion = null, IEnumerable<ZoneMapping> zoneMappings = null, IEnumerable<ApiProfile> apiProfiles = null, string capabilities = null, IReadOnlyDictionary<string, string> properties = null)
        {
            locations ??= new List<string>();
            locationMappings ??= new List<ProviderExtendedLocation>();
            aliases ??= new List<ResourceTypeAlias>();
            apiVersions ??= new List<string>();
            zoneMappings ??= new List<ZoneMapping>();
            apiProfiles ??= new List<ApiProfile>();
            properties ??= new Dictionary<string, string>();

            return new ProviderResourceType(
                resourceType,
                locations?.ToList(),
                locationMappings?.ToList(),
                aliases?.ToList(),
                apiVersions?.ToList(),
                defaultApiVersion,
                zoneMappings?.ToList(),
                apiProfiles?.ToList(),
                capabilities,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ProviderExtendedLocation"/>. </summary>
        /// <param name="location"></param>
        /// <param name="providerExtendedLocationType"></param>
        /// <param name="extendedLocations"></param>
        /// <returns> A new <see cref="Models.ProviderExtendedLocation"/> instance for mocking. </returns>
        public static ProviderExtendedLocation ProviderExtendedLocation(string location = null, string providerExtendedLocationType = null, IEnumerable<string> extendedLocations = null)
        {
            extendedLocations ??= new List<string>();

            return new ProviderExtendedLocation(location, providerExtendedLocationType, extendedLocations?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResourceTypeAlias"/>. </summary>
        /// <param name="name"></param>
        /// <param name="paths"></param>
        /// <param name="aliasType"></param>
        /// <param name="defaultPath"></param>
        /// <param name="defaultPattern"></param>
        /// <param name="defaultMetadata"></param>
        /// <returns> A new <see cref="Models.ResourceTypeAlias"/> instance for mocking. </returns>
        public static ResourceTypeAlias ResourceTypeAlias(string name = null, IEnumerable<ResourceTypeAliasPath> paths = null, ResourceTypeAliasType? aliasType = null, string defaultPath = null, ResourceTypeAliasPattern defaultPattern = null, ResourceTypeAliasPathMetadata defaultMetadata = null)
        {
            paths ??= new List<ResourceTypeAliasPath>();

            return new ResourceTypeAlias(
                name,
                paths?.ToList(),
                aliasType,
                defaultPath,
                defaultPattern,
                defaultMetadata,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResourceTypeAliasPath"/>. </summary>
        /// <param name="path"></param>
        /// <param name="apiVersions"></param>
        /// <param name="pattern"></param>
        /// <param name="metadata"></param>
        /// <returns> A new <see cref="Models.ResourceTypeAliasPath"/> instance for mocking. </returns>
        public static ResourceTypeAliasPath ResourceTypeAliasPath(string path = null, IEnumerable<string> apiVersions = null, ResourceTypeAliasPattern pattern = null, ResourceTypeAliasPathMetadata metadata = null)
        {
            apiVersions ??= new List<string>();

            return new ResourceTypeAliasPath(path, apiVersions?.ToList(), pattern, metadata, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResourceTypeAliasPattern"/>. </summary>
        /// <param name="phrase"></param>
        /// <param name="variable"></param>
        /// <param name="patternType"></param>
        /// <returns> A new <see cref="Models.ResourceTypeAliasPattern"/> instance for mocking. </returns>
        public static ResourceTypeAliasPattern ResourceTypeAliasPattern(string phrase = null, string variable = null, ResourceTypeAliasPatternType? patternType = null)
        {
            return new ResourceTypeAliasPattern(phrase, variable, patternType, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ZoneMapping"/>. </summary>
        /// <param name="location"></param>
        /// <param name="zones"></param>
        /// <returns> A new <see cref="Models.ZoneMapping"/> instance for mocking. </returns>
        public static ZoneMapping ZoneMapping(string location = null, IEnumerable<string> zones = null)
        {
            zones ??= new List<string>();

            return new ZoneMapping(location, zones?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ApiProfile"/>. </summary>
        /// <param name="profileVersion"></param>
        /// <param name="apiVersion"></param>
        /// <returns> A new <see cref="Models.ApiProfile"/> instance for mocking. </returns>
        public static ApiProfile ApiProfile(string profileVersion = null, string apiVersion = null)
        {
            return new ApiProfile(profileVersion, apiVersion, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ModelWithStringAdditionalProperties"/>. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="age"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ModelWithStringAdditionalProperties"/> instance for mocking. </returns>
        public static ModelWithStringAdditionalProperties ModelWithStringAdditionalProperties(string id = null, string name = null, int? age = null, IDictionary<string, string> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, string>();

            return new ModelWithStringAdditionalProperties(id, name, age, additionalProperties, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ModelWithArrayAdditionalProperties"/>. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="age"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ModelWithArrayAdditionalProperties"/> instance for mocking. </returns>
        public static ModelWithArrayAdditionalProperties ModelWithArrayAdditionalProperties(string id = null, string name = null, int? age = null, IDictionary<string, IList<BinaryData>> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, IList<BinaryData>>();

            return new ModelWithArrayAdditionalProperties(id, name, age, additionalProperties, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ModelWithUnknownAdditionalProperties"/>. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="age"></param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ModelWithUnknownAdditionalProperties"/> instance for mocking. </returns>
        public static ModelWithUnknownAdditionalProperties ModelWithUnknownAdditionalProperties(string id = null, string name = null, int? age = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ModelWithUnknownAdditionalProperties(id, name, age, additionalProperties);
        }
    }
}
