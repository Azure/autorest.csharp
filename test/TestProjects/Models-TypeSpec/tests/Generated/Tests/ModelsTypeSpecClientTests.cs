// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using ModelsTypeSpec;
using ModelsTypeSpec.Models;
using NUnit.Framework;

namespace ModelsTypeSpec.Tests
{
    public class ModelsTypeSpecClientTests : ModelsTypeSpecTestBase
    {
        public ModelsTypeSpecClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetOutputDiscriminatorModel_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            Response response = await client.GetOutputDiscriminatorModelAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetOutputDiscriminatorModel_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            Response<OutputBaseModelWithDiscriminator> response = await client.GetOutputDiscriminatorModelAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetOutputDiscriminatorModel_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            Response response = await client.GetOutputDiscriminatorModelAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetOutputDiscriminatorModel_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            Response<OutputBaseModelWithDiscriminator> response = await client.GetOutputDiscriminatorModelAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task InputToRoundTrip_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredNullableInt = 1234,
                requiredNullableString = "<requiredNullableString>",
                requiredModel = new object(),
                requiredIntList = new List<object>()
{
1234
},
                requiredStringList = new List<object>()
{
"<requiredStringList>"
},
                requiredModelList = new List<object>()
{
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new List<object>()
{
null
},
},
},
}
},
                requiredModelRecord = new
                {
                },
                requiredCollectionWithNullableFloatElement = new List<object>()
{
123.45F
},
                requiredCollectionWithNullableBooleanElement = new List<object>()
{
true
},
                requiredNullableModelList = new List<object>()
{
null
},
                requiredNullableStringList = new List<object>()
{
"<requiredNullableStringList>"
},
                requiredNullableIntList = new List<object>()
{
1234
},
            });
            Response response = await client.InputToRoundTripAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task InputToRoundTrip_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            InputModel input = new InputModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new BaseModel(), null, new List<int>()
{
1234
}, new List<string>()
{
"<requiredStringList>"
}, new List<CollectionItem>()
{
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new List<CollectionItem>()
{
null
}),
})
}, new Dictionary<string, RecordItem>()
{
    ["key"] = null,
}, new List<float?>()
{
123.45F
}, new List<bool?>()
{
true
}, new List<CollectionItem>()
{
null
}, new List<string>()
{
"<requiredNullableStringList>"
}, new List<int>()
{
1234
});
            Response<RoundTripModel> response = await client.InputToRoundTripAsync(input);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task InputToRoundTrip_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredNullableInt = 1234,
                requiredNullableString = "<requiredNullableString>",
                nonRequiredNullableInt = 1234,
                nonRequiredNullableString = "<nonRequiredNullableString>",
                requiredModel = new object(),
                requiredIntList = new List<object>()
{
1234
},
                requiredStringList = new List<object>()
{
"<requiredStringList>"
},
                requiredModelList = new List<object>()
{
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new List<object>()
{
null
},
},
},
}
},
                requiredModelRecord = new
                {
                },
                requiredCollectionWithNullableFloatElement = new List<object>()
{
123.45F
},
                requiredCollectionWithNullableBooleanElement = new List<object>()
{
true
},
                requiredNullableModelList = new List<object>()
{
null
},
                requiredNullableStringList = new List<object>()
{
"<requiredNullableStringList>"
},
                requiredNullableIntList = new List<object>()
{
1234
},
                nonRequiredModelList = new List<object>()
{
null
},
                nonRequiredStringList = new List<object>()
{
"<nonRequiredStringList>"
},
                nonRequiredIntList = new List<object>()
{
1234
},
                nonRequiredNullableModelList = new List<object>()
{
null
},
                nonRequiredNullableStringList = new List<object>()
{
"<nonRequiredNullableStringList>"
},
                nonRequiredNullableIntList = new List<object>()
{
1234
},
            });
            Response response = await client.InputToRoundTripAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task InputToRoundTrip_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            InputModel input = new InputModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new BaseModel(), null, new List<int>()
{
1234
}, new List<string>()
{
"<requiredStringList>"
}, new List<CollectionItem>()
{
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new List<CollectionItem>()
{
null
}),
})
}, new Dictionary<string, RecordItem>()
{
    ["key"] = null,
}, new List<float?>()
{
123.45F
}, new List<bool?>()
{
true
}, new List<CollectionItem>()
{
null
}, new List<string>()
{
"<requiredNullableStringList>"
}, new List<int>()
{
1234
})
            {
                NonRequiredNullableInt = 1234,
                NonRequiredNullableString = "<nonRequiredNullableString>",
                NonRequiredModelList =
{
null
},
                NonRequiredStringList =
{
"<nonRequiredStringList>"
},
                NonRequiredIntList =
{
1234
},
                NonRequiredNullableModelList =
{
null
},
                NonRequiredNullableStringList =
{
"<nonRequiredNullableStringList>"
},
                NonRequiredNullableIntList =
{
1234
},
            };
            Response<RoundTripModel> response = await client.InputToRoundTripAsync(input);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task InputToRoundTripPrimitive_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredNullableInt = 1234,
                requiredNullableString = "<requiredNullableString>",
                requiredModel = new object(),
                requiredIntList = new List<object>()
{
1234
},
                requiredStringList = new List<object>()
{
"<requiredStringList>"
},
                requiredModelList = new List<object>()
{
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new List<object>()
{
null
},
},
},
}
},
                requiredModelRecord = new
                {
                },
                requiredCollectionWithNullableFloatElement = new List<object>()
{
123.45F
},
                requiredCollectionWithNullableBooleanElement = new List<object>()
{
true
},
                requiredNullableModelList = new List<object>()
{
null
},
                requiredNullableStringList = new List<object>()
{
"<requiredNullableStringList>"
},
                requiredNullableIntList = new List<object>()
{
1234
},
            });
            Response response = await client.InputToRoundTripPrimitiveAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task InputToRoundTripPrimitive_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            InputModel input = new InputModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new BaseModel(), null, new List<int>()
{
1234
}, new List<string>()
{
"<requiredStringList>"
}, new List<CollectionItem>()
{
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new List<CollectionItem>()
{
null
}),
})
}, new Dictionary<string, RecordItem>()
{
    ["key"] = null,
}, new List<float?>()
{
123.45F
}, new List<bool?>()
{
true
}, new List<CollectionItem>()
{
null
}, new List<string>()
{
"<requiredNullableStringList>"
}, new List<int>()
{
1234
});
            Response<RoundTripPrimitiveModel> response = await client.InputToRoundTripPrimitiveAsync(input);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task InputToRoundTripPrimitive_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredNullableInt = 1234,
                requiredNullableString = "<requiredNullableString>",
                nonRequiredNullableInt = 1234,
                nonRequiredNullableString = "<nonRequiredNullableString>",
                requiredModel = new object(),
                requiredIntList = new List<object>()
{
1234
},
                requiredStringList = new List<object>()
{
"<requiredStringList>"
},
                requiredModelList = new List<object>()
{
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new List<object>()
{
null
},
},
},
}
},
                requiredModelRecord = new
                {
                },
                requiredCollectionWithNullableFloatElement = new List<object>()
{
123.45F
},
                requiredCollectionWithNullableBooleanElement = new List<object>()
{
true
},
                requiredNullableModelList = new List<object>()
{
null
},
                requiredNullableStringList = new List<object>()
{
"<requiredNullableStringList>"
},
                requiredNullableIntList = new List<object>()
{
1234
},
                nonRequiredModelList = new List<object>()
{
null
},
                nonRequiredStringList = new List<object>()
{
"<nonRequiredStringList>"
},
                nonRequiredIntList = new List<object>()
{
1234
},
                nonRequiredNullableModelList = new List<object>()
{
null
},
                nonRequiredNullableStringList = new List<object>()
{
"<nonRequiredNullableStringList>"
},
                nonRequiredNullableIntList = new List<object>()
{
1234
},
            });
            Response response = await client.InputToRoundTripPrimitiveAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task InputToRoundTripPrimitive_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            InputModel input = new InputModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new BaseModel(), null, new List<int>()
{
1234
}, new List<string>()
{
"<requiredStringList>"
}, new List<CollectionItem>()
{
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new List<CollectionItem>()
{
null
}),
})
}, new Dictionary<string, RecordItem>()
{
    ["key"] = null,
}, new List<float?>()
{
123.45F
}, new List<bool?>()
{
true
}, new List<CollectionItem>()
{
null
}, new List<string>()
{
"<requiredNullableStringList>"
}, new List<int>()
{
1234
})
            {
                NonRequiredNullableInt = 1234,
                NonRequiredNullableString = "<nonRequiredNullableString>",
                NonRequiredModelList =
{
null
},
                NonRequiredStringList =
{
"<nonRequiredStringList>"
},
                NonRequiredIntList =
{
1234
},
                NonRequiredNullableModelList =
{
null
},
                NonRequiredNullableStringList =
{
"<nonRequiredNullableStringList>"
},
                NonRequiredNullableIntList =
{
1234
},
            };
            Response<RoundTripPrimitiveModel> response = await client.InputToRoundTripPrimitiveAsync(input);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task InputToRoundTripOptional_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.InputToRoundTripOptionalAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task InputToRoundTripOptional_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            RoundTripOptionalModel input = new RoundTripOptionalModel();
            Response<RoundTripOptionalModel> response = await client.InputToRoundTripOptionalAsync(input);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task InputToRoundTripOptional_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                optionalString = "<optionalString>",
                optionalInt = 1234,
                optionalStringList = new List<object>()
{
"<optionalStringList>"
},
                optionalIntList = new List<object>()
{
1234
},
                optionalModelList = new List<object>()
{
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new List<object>()
{
null
},
},
},
}
},
                optionalModel = new
                {
                    requiredList = new List<object>()
{
null
},
                },
                optionalModelWithPropertiesOnBase = new
                {
                    requiredList = new List<object>()
{
null
},
                    optionalPropertyOnBase = "<optionalPropertyOnBase>",
                },
                optionalFixedStringEnum = "1",
                optionalExtensibleEnum = "1",
                optionalIntRecord = new
                {
                    key = 1234,
                },
                optionalStringRecord = new
                {
                    key = "<optionalStringRecord>",
                },
                optionalModelRecord = new
                {
                },
                optionalPlainDate = "2022-05-10",
                optionalPlainTime = "01:23:45",
                optionalCollectionWithNullableIntElement = new List<object>()
{
1234
},
            });
            Response response = await client.InputToRoundTripOptionalAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task InputToRoundTripOptional_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            RoundTripOptionalModel input = new RoundTripOptionalModel()
            {
                OptionalString = "<optionalString>",
                OptionalInt = 1234,
                OptionalStringList =
{
"<optionalStringList>"
},
                OptionalIntList =
{
1234
},
                OptionalModelList =
{
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new List<CollectionItem>()
{
null
}),
})
},
                OptionalModel = new DerivedModel(new List<CollectionItem>()
{
null
}),
                OptionalModelWithPropertiesOnBase = new DerivedModelWithProperties(new List<CollectionItem>()
{
null
}),
                OptionalFixedStringEnum = FixedStringEnum.One,
                OptionalExtensibleEnum = ExtensibleEnum.One,
                OptionalIntRecord =
{
["key"] = 1234,
},
                OptionalStringRecord =
{
["key"] = "<optionalStringRecord>",
},
                OptionalModelRecord =
{
["key"] = null,
},
                OptionalPlainDate = DateTimeOffset.Parse("2022-05-10"),
                OptionalPlainTime = TimeSpan.Parse("01:23:45"),
                OptionalCollectionWithNullableIntElement =
{
1234
},
            };
            Response<RoundTripOptionalModel> response = await client.InputToRoundTripOptionalAsync(input);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task RoundTripToOutput_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredNullableInt = 1234,
                requiredNullableString = "<requiredNullableString>",
                requiredModel = new
                {
                    requiredString = "<requiredString>",
                    discriminatorProperty = "A",
                    requiredPropertyOnBase = 1234,
                },
                requiredFixedStringEnum = "1",
                requiredFixedIntEnum = 1,
                requiredExtensibleEnum = "1",
                requiredList = new List<object>()
{
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new List<object>()
{
null
},
},
},
}
},
                requiredIntRecord = new
                {
                    key = 1234,
                },
                requiredStringRecord = new
                {
                    key = "<requiredStringRecord>",
                },
                requiredModelRecord = new
                {
                },
                requiredBytes = new object(),
                requiredUint8Array = new List<object>()
{
1234
},
                requiredUnknown = new object(),
                requiredInt8Array = new List<object>()
{
1234
},
                requiredNullableIntList = new List<object>()
{
1234
},
                requiredNullableStringList = new List<object>()
{
"<requiredNullableStringList>"
},
            });
            Response response = await client.RoundTripToOutputAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task RoundTripToOutput_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            RoundTripModel input = new RoundTripModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new DerivedModelWithDiscriminatorA(1234, "<requiredString>"), FixedStringEnum.One, FixedIntEnum.One, ExtensibleEnum.One, new List<CollectionItem>()
{
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new List<CollectionItem>()
{
null
}),
})
}, new Dictionary<string, int>()
{
    ["key"] = 1234,
}, new Dictionary<string, string>()
{
    ["key"] = "<requiredStringRecord>",
}, new Dictionary<string, RecordItem>()
{
    ["key"] = null,
}, BinaryData.FromObjectAsJson(new object()), new List<int>()
{
1234
}, BinaryData.FromObjectAsJson(new object()), new List<int>()
{
1234
}, new List<int>()
{
1234
}, new List<string>()
{
"<requiredNullableStringList>"
});
            Response<OutputModel> response = await client.RoundTripToOutputAsync(input);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task RoundTripToOutput_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                nonRequiredString = "<nonRequiredString>",
                nonRequiredInt = 1234,
                requiredNullableInt = 1234,
                requiredNullableString = "<requiredNullableString>",
                nonRequiredNullableInt = 1234,
                nonRequiredNullableString = "<nonRequiredNullableString>",
                requiredModel = new
                {
                    requiredString = "<requiredString>",
                    discriminatorProperty = "A",
                    optionalPropertyOnBase = "<optionalPropertyOnBase>",
                    requiredPropertyOnBase = 1234,
                },
                requiredFixedStringEnum = "1",
                requiredFixedIntEnum = 1,
                requiredExtensibleEnum = "1",
                requiredList = new List<object>()
{
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new List<object>()
{
null
},
},
},
}
},
                requiredIntRecord = new
                {
                    key = 1234,
                },
                requiredStringRecord = new
                {
                    key = "<requiredStringRecord>",
                },
                requiredModelRecord = new
                {
                },
                requiredBytes = new object(),
                optionalBytes = new object(),
                requiredUint8Array = new List<object>()
{
1234
},
                optionalUint8Array = new List<object>()
{
1234
},
                requiredUnknown = new object(),
                optionalUnknown = new object(),
                requiredInt8Array = new List<object>()
{
1234
},
                optionalInt8Array = new List<object>()
{
1234
},
                requiredNullableIntList = new List<object>()
{
1234
},
                requiredNullableStringList = new List<object>()
{
"<requiredNullableStringList>"
},
                nonRequiredNullableIntList = new List<object>()
{
1234
},
                nonRequiredNullableStringList = new List<object>()
{
"<nonRequiredNullableStringList>"
},
            });
            Response response = await client.RoundTripToOutputAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task RoundTripToOutput_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            RoundTripModel input = new RoundTripModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new DerivedModelWithDiscriminatorA(1234, "<requiredString>")
            {
                OptionalPropertyOnBase = "<optionalPropertyOnBase>",
            }, FixedStringEnum.One, FixedIntEnum.One, ExtensibleEnum.One, new List<CollectionItem>()
{
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new List<CollectionItem>()
{
null
}),
})
}, new Dictionary<string, int>()
{
    ["key"] = 1234,
}, new Dictionary<string, string>()
{
    ["key"] = "<requiredStringRecord>",
}, new Dictionary<string, RecordItem>()
{
    ["key"] = null,
}, BinaryData.FromObjectAsJson(new object()), new List<int>()
{
1234
}, BinaryData.FromObjectAsJson(new object()), new List<int>()
{
1234
}, new List<int>()
{
1234
}, new List<string>()
{
"<requiredNullableStringList>"
})
            {
                NonRequiredString = "<nonRequiredString>",
                NonRequiredInt = 1234,
                NonRequiredNullableInt = 1234,
                NonRequiredNullableString = "<nonRequiredNullableString>",
                OptionalBytes = BinaryData.FromObjectAsJson(new object()),
                OptionalUint8Array =
{
1234
},
                OptionalUnknown = BinaryData.FromObjectAsJson(new object()),
                OptionalInt8Array =
{
1234
},
                NonRequiredNullableIntList =
{
1234
},
                NonRequiredNullableStringList =
{
"<nonRequiredNullableStringList>"
},
            };
            Response<OutputModel> response = await client.RoundTripToOutputAsync(input);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task InputRecursive_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                message = "<message>",
            });
            Response response = await client.InputRecursiveAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task InputRecursive_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            InputRecursiveModel input = new InputRecursiveModel("<message>");
            Response response = await client.InputRecursiveAsync(input);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task InputRecursive_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                message = "<message>",
            });
            Response response = await client.InputRecursiveAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task InputRecursive_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            InputRecursiveModel input = new InputRecursiveModel("<message>")
            {
                Inner = null,
            };
            Response response = await client.InputRecursiveAsync(input);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task RoundTripRecursive_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                message = "<message>",
            });
            Response response = await client.RoundTripRecursiveAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task RoundTripRecursive_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            RoundTripRecursiveModel input = new RoundTripRecursiveModel("<message>");
            Response<RoundTripRecursiveModel> response = await client.RoundTripRecursiveAsync(input);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task RoundTripRecursive_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                message = "<message>",
            });
            Response response = await client.RoundTripRecursiveAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task RoundTripRecursive_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            RoundTripRecursiveModel input = new RoundTripRecursiveModel("<message>")
            {
                Inner = null,
            };
            Response<RoundTripRecursiveModel> response = await client.RoundTripRecursiveAsync(input);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task SelfReference_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            Response response = await client.SelfReferenceAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task SelfReference_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            Response<ErrorModel> response = await client.SelfReferenceAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task SelfReference_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            Response response = await client.SelfReferenceAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task SelfReference_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            Response<ErrorModel> response = await client.SelfReferenceAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task RoundTripToOutputWithNoUseBase_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredList = new List<object>()
{
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new List<object>()
{
null
},
},
},
}
},
                baseModelProp = "<baseModelProp>",
            });
            Response response = await client.RoundTripToOutputWithNoUseBaseAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task RoundTripToOutputWithNoUseBase_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            RoundTripOnNoUse input = new RoundTripOnNoUse("<baseModelProp>", new List<CollectionItem>()
{
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new List<CollectionItem>()
{
null
}),
})
});
            Response<RoundTripOnNoUse> response = await client.RoundTripToOutputWithNoUseBaseAsync(input);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task RoundTripToOutputWithNoUseBase_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredList = new List<object>()
{
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new List<object>()
{
null
},
},
},
}
},
                baseModelProp = "<baseModelProp>",
            });
            Response response = await client.RoundTripToOutputWithNoUseBaseAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task RoundTripToOutputWithNoUseBase_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            RoundTripOnNoUse input = new RoundTripOnNoUse("<baseModelProp>", new List<CollectionItem>()
{
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new List<CollectionItem>()
{
null
}),
})
});
            Response<RoundTripOnNoUse> response = await client.RoundTripToOutputWithNoUseBaseAsync(input);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task AnalyzeConversation_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            Response response = await client.AnalyzeConversationAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task AnalyzeConversation_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            Response<BaseModelWithDiscriminator> response = await client.AnalyzeConversationAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task AnalyzeConversation_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            Response response = await client.AnalyzeConversationAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task AnalyzeConversation_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            Response<BaseModelWithDiscriminator> response = await client.AnalyzeConversationAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetSingleBase_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            Response response = await client.GetSingleBaseAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetSingleBase_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            Response<SingleBase> response = await client.GetSingleBaseAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetSingleBase_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            Response response = await client.GetSingleBaseAsync(null);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GetSingleBase_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            Response<SingleBase> response = await client.GetSingleBaseAsync();
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GenericType_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                kind = "Int32Values",
                values = new List<object>()
{
1234
},
                value = 1234,
                field = "<field>",
            });
            Response response = await client.GenericTypeAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GenericType_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            Int32ValuesFacet input = new Int32ValuesFacet("<field>", new List<int>()
{
1234
}, 1234);
            Response response = await client.GenericTypeAsync(input);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GenericType_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                kind = "Int32Values",
                values = new List<object>()
{
1234
},
                value = 1234,
                field = "<field>",
            });
            Response response = await client.GenericTypeAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task GenericType_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = CreateModelsTypeSpecClient(endpoint);

            Int32ValuesFacet input = new Int32ValuesFacet("<field>", new List<int>()
{
1234
}, 1234);
            Response response = await client.GenericTypeAsync(input);
        }
    }
}
