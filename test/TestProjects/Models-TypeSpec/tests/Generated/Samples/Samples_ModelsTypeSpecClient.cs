// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using ModelsTypeSpec;
using ModelsTypeSpec.Models;
using NUnit.Framework;

namespace ModelsTypeSpec.Samples
{
    public class Samples_ModelsTypeSpecClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetOutputDiscriminatorModel()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = client.GetOutputDiscriminatorModel(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetOutputDiscriminatorModel_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = client.GetOutputDiscriminatorModel(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetOutputDiscriminatorModel_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<OutputBaseModelWithDiscriminator> response = client.GetOutputDiscriminatorModel();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetOutputDiscriminatorModel_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<OutputBaseModelWithDiscriminator> response = client.GetOutputDiscriminatorModel();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetOutputDiscriminatorModel_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = await client.GetOutputDiscriminatorModelAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetOutputDiscriminatorModel_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = await client.GetOutputDiscriminatorModelAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetOutputDiscriminatorModel_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<OutputBaseModelWithDiscriminator> response = await client.GetOutputDiscriminatorModelAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetOutputDiscriminatorModel_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<OutputBaseModelWithDiscriminator> response = await client.GetOutputDiscriminatorModelAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTrip()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredNullableInt"] = 1234,
                ["requiredNullableString"] = "<requiredNullableString>",
                ["requiredModel"] = new Dictionary<string, object>(),
                ["requiredModel2"] = null
            ,
                ["requiredIntList"] = new object[]
            {
default
            },
                ["requiredStringList"] = new object[]
            {
default
            },
                ["requiredModelList"] = new object[]
            {
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
            },
                ["requiredModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = null
            ,
                },
                ["requiredCollectionWithNullableFloatElement"] = new object[]
            {
default
            },
                ["requiredCollectionWithNullableBooleanElement"] = new object[]
            {
default
            },
                ["requiredNullableModelList"] = new object[]
            {
null
            },
                ["requiredNullableStringList"] = new object[]
            {
default
            },
                ["requiredNullableIntList"] = new object[]
            {
default
            },
            });
            Response response = client.InputToRoundTrip(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableInt").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableString").ToString());
            Console.WriteLine(result.GetProperty("requiredReadonlyInt").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("discriminatorProperty").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredPropertyOnBase").ToString());
            Console.WriteLine(result.GetProperty("requiredFixedStringEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredFixedIntEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredIntRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredStringRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredBytes").ToString());
            Console.WriteLine(result.GetProperty("requiredUint8Array")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
            Console.WriteLine(result.GetProperty("requiredInt8Array")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableIntList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableStringList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTrip_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredNullableInt"] = 1234,
                ["requiredNullableString"] = "<requiredNullableString>",
                ["nonRequiredNullableInt"] = 1234,
                ["nonRequiredNullableString"] = "<nonRequiredNullableString>",
                ["requiredModel"] = new Dictionary<string, object>(),
                ["requiredModel2"] = null
            ,
                ["requiredIntList"] = new object[]
            {
default
            },
                ["requiredStringList"] = new object[]
            {
default
            },
                ["requiredModelList"] = new object[]
            {
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
            },
                ["requiredModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = null
            ,
                },
                ["requiredCollectionWithNullableFloatElement"] = new object[]
            {
default
            },
                ["requiredCollectionWithNullableBooleanElement"] = new object[]
            {
default
            },
                ["requiredNullableModelList"] = new object[]
            {
null
            },
                ["requiredNullableStringList"] = new object[]
            {
default
            },
                ["requiredNullableIntList"] = new object[]
            {
default
            },
                ["nonRequiredModelList"] = new object[]
            {
null
            },
                ["nonRequiredStringList"] = new object[]
            {
default
            },
                ["nonRequiredIntList"] = new object[]
            {
default
            },
                ["nonRequiredNullableModelList"] = new object[]
            {
null
            },
                ["nonRequiredNullableStringList"] = new object[]
            {
default
            },
                ["nonRequiredNullableIntList"] = new object[]
            {
default
            },
            });
            Response response = client.InputToRoundTrip(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("nonRequiredString").ToString());
            Console.WriteLine(result.GetProperty("nonRequiredInt").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableInt").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableString").ToString());
            Console.WriteLine(result.GetProperty("nonRequiredNullableInt").ToString());
            Console.WriteLine(result.GetProperty("nonRequiredNullableString").ToString());
            Console.WriteLine(result.GetProperty("requiredReadonlyInt").ToString());
            Console.WriteLine(result.GetProperty("nonRequiredReadonlyInt").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("discriminatorProperty").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalPropertyOnBase").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredPropertyOnBase").ToString());
            Console.WriteLine(result.GetProperty("requiredFixedStringEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredFixedIntEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredIntRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredStringRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredBytes").ToString());
            Console.WriteLine(result.GetProperty("optionalBytes").ToString());
            Console.WriteLine(result.GetProperty("requiredUint8Array")[0].ToString());
            Console.WriteLine(result.GetProperty("optionalUint8Array")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
            Console.WriteLine(result.GetProperty("optionalUnknown").ToString());
            Console.WriteLine(result.GetProperty("requiredInt8Array")[0].ToString());
            Console.WriteLine(result.GetProperty("optionalInt8Array")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableIntList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableStringList")[0].ToString());
            Console.WriteLine(result.GetProperty("nonRequiredNullableIntList")[0].ToString());
            Console.WriteLine(result.GetProperty("nonRequiredNullableStringList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTrip_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            InputModel input = new InputModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new BaseModel(), null, new int[]
            {
1234
            }, new string[]
            {
"<requiredStringList>"
            }, new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new CollectionItem[]
{
null
}),
})
            }, new Dictionary<string, RecordItem>()
            {
                ["key"] = null,
            }, new float?[]
            {
123.45F
            }, new bool?[]
            {
true
            }, new CollectionItem[]
            {
null
            }, new string[]
            {
"<requiredNullableStringList>"
            }, new int[]
            {
1234
            });
            Response<RoundTripModel> response = client.InputToRoundTrip(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTrip_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            InputModel input = new InputModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new BaseModel(), null, new int[]
            {
1234
            }, new string[]
            {
"<requiredStringList>"
            }, new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new CollectionItem[]
{
null
}),
})
            }, new Dictionary<string, RecordItem>()
            {
                ["key"] = null,
            }, new float?[]
            {
123.45F
            }, new bool?[]
            {
true
            }, new CollectionItem[]
            {
null
            }, new string[]
            {
"<requiredNullableStringList>"
            }, new int[]
            {
1234
            })
            {
                NonRequiredNullableInt = 1234,
                NonRequiredNullableString = "<nonRequiredNullableString>",
                NonRequiredModelList =
{
null
},
                NonRequiredStringList =
{
"<nonRequiredStringList>"
},
                NonRequiredIntList =
{
1234
},
                NonRequiredNullableModelList =
{
null
},
                NonRequiredNullableStringList =
{
"<nonRequiredNullableStringList>"
},
                NonRequiredNullableIntList =
{
1234
},
            };
            Response<RoundTripModel> response = client.InputToRoundTrip(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTrip_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredNullableInt"] = 1234,
                ["requiredNullableString"] = "<requiredNullableString>",
                ["requiredModel"] = new Dictionary<string, object>(),
                ["requiredModel2"] = null
            ,
                ["requiredIntList"] = new object[]
            {
default
            },
                ["requiredStringList"] = new object[]
            {
default
            },
                ["requiredModelList"] = new object[]
            {
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
            },
                ["requiredModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = null
            ,
                },
                ["requiredCollectionWithNullableFloatElement"] = new object[]
            {
default
            },
                ["requiredCollectionWithNullableBooleanElement"] = new object[]
            {
default
            },
                ["requiredNullableModelList"] = new object[]
            {
null
            },
                ["requiredNullableStringList"] = new object[]
            {
default
            },
                ["requiredNullableIntList"] = new object[]
            {
default
            },
            });
            Response response = await client.InputToRoundTripAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableInt").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableString").ToString());
            Console.WriteLine(result.GetProperty("requiredReadonlyInt").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("discriminatorProperty").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredPropertyOnBase").ToString());
            Console.WriteLine(result.GetProperty("requiredFixedStringEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredFixedIntEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredIntRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredStringRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredBytes").ToString());
            Console.WriteLine(result.GetProperty("requiredUint8Array")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
            Console.WriteLine(result.GetProperty("requiredInt8Array")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableIntList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableStringList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTrip_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredNullableInt"] = 1234,
                ["requiredNullableString"] = "<requiredNullableString>",
                ["nonRequiredNullableInt"] = 1234,
                ["nonRequiredNullableString"] = "<nonRequiredNullableString>",
                ["requiredModel"] = new Dictionary<string, object>(),
                ["requiredModel2"] = null
            ,
                ["requiredIntList"] = new object[]
            {
default
            },
                ["requiredStringList"] = new object[]
            {
default
            },
                ["requiredModelList"] = new object[]
            {
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
            },
                ["requiredModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = null
            ,
                },
                ["requiredCollectionWithNullableFloatElement"] = new object[]
            {
default
            },
                ["requiredCollectionWithNullableBooleanElement"] = new object[]
            {
default
            },
                ["requiredNullableModelList"] = new object[]
            {
null
            },
                ["requiredNullableStringList"] = new object[]
            {
default
            },
                ["requiredNullableIntList"] = new object[]
            {
default
            },
                ["nonRequiredModelList"] = new object[]
            {
null
            },
                ["nonRequiredStringList"] = new object[]
            {
default
            },
                ["nonRequiredIntList"] = new object[]
            {
default
            },
                ["nonRequiredNullableModelList"] = new object[]
            {
null
            },
                ["nonRequiredNullableStringList"] = new object[]
            {
default
            },
                ["nonRequiredNullableIntList"] = new object[]
            {
default
            },
            });
            Response response = await client.InputToRoundTripAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("nonRequiredString").ToString());
            Console.WriteLine(result.GetProperty("nonRequiredInt").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableInt").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableString").ToString());
            Console.WriteLine(result.GetProperty("nonRequiredNullableInt").ToString());
            Console.WriteLine(result.GetProperty("nonRequiredNullableString").ToString());
            Console.WriteLine(result.GetProperty("requiredReadonlyInt").ToString());
            Console.WriteLine(result.GetProperty("nonRequiredReadonlyInt").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("discriminatorProperty").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalPropertyOnBase").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredPropertyOnBase").ToString());
            Console.WriteLine(result.GetProperty("requiredFixedStringEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredFixedIntEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredIntRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredStringRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredBytes").ToString());
            Console.WriteLine(result.GetProperty("optionalBytes").ToString());
            Console.WriteLine(result.GetProperty("requiredUint8Array")[0].ToString());
            Console.WriteLine(result.GetProperty("optionalUint8Array")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
            Console.WriteLine(result.GetProperty("optionalUnknown").ToString());
            Console.WriteLine(result.GetProperty("requiredInt8Array")[0].ToString());
            Console.WriteLine(result.GetProperty("optionalInt8Array")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableIntList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableStringList")[0].ToString());
            Console.WriteLine(result.GetProperty("nonRequiredNullableIntList")[0].ToString());
            Console.WriteLine(result.GetProperty("nonRequiredNullableStringList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTrip_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            InputModel input = new InputModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new BaseModel(), null, new int[]
            {
1234
            }, new string[]
            {
"<requiredStringList>"
            }, new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new CollectionItem[]
{
null
}),
})
            }, new Dictionary<string, RecordItem>()
            {
                ["key"] = null,
            }, new float?[]
            {
123.45F
            }, new bool?[]
            {
true
            }, new CollectionItem[]
            {
null
            }, new string[]
            {
"<requiredNullableStringList>"
            }, new int[]
            {
1234
            });
            Response<RoundTripModel> response = await client.InputToRoundTripAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTrip_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            InputModel input = new InputModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new BaseModel(), null, new int[]
            {
1234
            }, new string[]
            {
"<requiredStringList>"
            }, new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new CollectionItem[]
{
null
}),
})
            }, new Dictionary<string, RecordItem>()
            {
                ["key"] = null,
            }, new float?[]
            {
123.45F
            }, new bool?[]
            {
true
            }, new CollectionItem[]
            {
null
            }, new string[]
            {
"<requiredNullableStringList>"
            }, new int[]
            {
1234
            })
            {
                NonRequiredNullableInt = 1234,
                NonRequiredNullableString = "<nonRequiredNullableString>",
                NonRequiredModelList =
{
null
},
                NonRequiredStringList =
{
"<nonRequiredStringList>"
},
                NonRequiredIntList =
{
1234
},
                NonRequiredNullableModelList =
{
null
},
                NonRequiredNullableStringList =
{
"<nonRequiredNullableStringList>"
},
                NonRequiredNullableIntList =
{
1234
},
            };
            Response<RoundTripModel> response = await client.InputToRoundTripAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTripPrimitive()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredNullableInt"] = 1234,
                ["requiredNullableString"] = "<requiredNullableString>",
                ["requiredModel"] = new Dictionary<string, object>(),
                ["requiredModel2"] = null
            ,
                ["requiredIntList"] = new object[]
            {
default
            },
                ["requiredStringList"] = new object[]
            {
default
            },
                ["requiredModelList"] = new object[]
            {
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
            },
                ["requiredModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = null
            ,
                },
                ["requiredCollectionWithNullableFloatElement"] = new object[]
            {
default
            },
                ["requiredCollectionWithNullableBooleanElement"] = new object[]
            {
default
            },
                ["requiredNullableModelList"] = new object[]
            {
null
            },
                ["requiredNullableStringList"] = new object[]
            {
default
            },
                ["requiredNullableIntList"] = new object[]
            {
default
            },
            });
            Response response = client.InputToRoundTripPrimitive(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("requiredInt64").ToString());
            Console.WriteLine(result.GetProperty("requiredSafeInt").ToString());
            Console.WriteLine(result.GetProperty("requiredFloat").ToString());
            Console.WriteLine(result.GetProperty("required_Double").ToString());
            Console.WriteLine(result.GetProperty("requiredBoolean").ToString());
            Console.WriteLine(result.GetProperty("requiredDateTimeOffset").ToString());
            Console.WriteLine(result.GetProperty("requiredTimeSpan").ToString());
            Console.WriteLine(result.GetProperty("requiredCollectionWithNullableFloatElement")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTripPrimitive_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredNullableInt"] = 1234,
                ["requiredNullableString"] = "<requiredNullableString>",
                ["nonRequiredNullableInt"] = 1234,
                ["nonRequiredNullableString"] = "<nonRequiredNullableString>",
                ["requiredModel"] = new Dictionary<string, object>(),
                ["requiredModel2"] = null
            ,
                ["requiredIntList"] = new object[]
            {
default
            },
                ["requiredStringList"] = new object[]
            {
default
            },
                ["requiredModelList"] = new object[]
            {
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
            },
                ["requiredModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = null
            ,
                },
                ["requiredCollectionWithNullableFloatElement"] = new object[]
            {
default
            },
                ["requiredCollectionWithNullableBooleanElement"] = new object[]
            {
default
            },
                ["requiredNullableModelList"] = new object[]
            {
null
            },
                ["requiredNullableStringList"] = new object[]
            {
default
            },
                ["requiredNullableIntList"] = new object[]
            {
default
            },
                ["nonRequiredModelList"] = new object[]
            {
null
            },
                ["nonRequiredStringList"] = new object[]
            {
default
            },
                ["nonRequiredIntList"] = new object[]
            {
default
            },
                ["nonRequiredNullableModelList"] = new object[]
            {
null
            },
                ["nonRequiredNullableStringList"] = new object[]
            {
default
            },
                ["nonRequiredNullableIntList"] = new object[]
            {
default
            },
            });
            Response response = client.InputToRoundTripPrimitive(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("requiredInt64").ToString());
            Console.WriteLine(result.GetProperty("requiredSafeInt").ToString());
            Console.WriteLine(result.GetProperty("requiredFloat").ToString());
            Console.WriteLine(result.GetProperty("required_Double").ToString());
            Console.WriteLine(result.GetProperty("requiredBoolean").ToString());
            Console.WriteLine(result.GetProperty("requiredDateTimeOffset").ToString());
            Console.WriteLine(result.GetProperty("requiredTimeSpan").ToString());
            Console.WriteLine(result.GetProperty("requiredCollectionWithNullableFloatElement")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTripPrimitive_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            InputModel input = new InputModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new BaseModel(), null, new int[]
            {
1234
            }, new string[]
            {
"<requiredStringList>"
            }, new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new CollectionItem[]
{
null
}),
})
            }, new Dictionary<string, RecordItem>()
            {
                ["key"] = null,
            }, new float?[]
            {
123.45F
            }, new bool?[]
            {
true
            }, new CollectionItem[]
            {
null
            }, new string[]
            {
"<requiredNullableStringList>"
            }, new int[]
            {
1234
            });
            Response<RoundTripPrimitiveModel> response = client.InputToRoundTripPrimitive(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTripPrimitive_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            InputModel input = new InputModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new BaseModel(), null, new int[]
            {
1234
            }, new string[]
            {
"<requiredStringList>"
            }, new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new CollectionItem[]
{
null
}),
})
            }, new Dictionary<string, RecordItem>()
            {
                ["key"] = null,
            }, new float?[]
            {
123.45F
            }, new bool?[]
            {
true
            }, new CollectionItem[]
            {
null
            }, new string[]
            {
"<requiredNullableStringList>"
            }, new int[]
            {
1234
            })
            {
                NonRequiredNullableInt = 1234,
                NonRequiredNullableString = "<nonRequiredNullableString>",
                NonRequiredModelList =
{
null
},
                NonRequiredStringList =
{
"<nonRequiredStringList>"
},
                NonRequiredIntList =
{
1234
},
                NonRequiredNullableModelList =
{
null
},
                NonRequiredNullableStringList =
{
"<nonRequiredNullableStringList>"
},
                NonRequiredNullableIntList =
{
1234
},
            };
            Response<RoundTripPrimitiveModel> response = client.InputToRoundTripPrimitive(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTripPrimitive_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredNullableInt"] = 1234,
                ["requiredNullableString"] = "<requiredNullableString>",
                ["requiredModel"] = new Dictionary<string, object>(),
                ["requiredModel2"] = null
            ,
                ["requiredIntList"] = new object[]
            {
default
            },
                ["requiredStringList"] = new object[]
            {
default
            },
                ["requiredModelList"] = new object[]
            {
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
            },
                ["requiredModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = null
            ,
                },
                ["requiredCollectionWithNullableFloatElement"] = new object[]
            {
default
            },
                ["requiredCollectionWithNullableBooleanElement"] = new object[]
            {
default
            },
                ["requiredNullableModelList"] = new object[]
            {
null
            },
                ["requiredNullableStringList"] = new object[]
            {
default
            },
                ["requiredNullableIntList"] = new object[]
            {
default
            },
            });
            Response response = await client.InputToRoundTripPrimitiveAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("requiredInt64").ToString());
            Console.WriteLine(result.GetProperty("requiredSafeInt").ToString());
            Console.WriteLine(result.GetProperty("requiredFloat").ToString());
            Console.WriteLine(result.GetProperty("required_Double").ToString());
            Console.WriteLine(result.GetProperty("requiredBoolean").ToString());
            Console.WriteLine(result.GetProperty("requiredDateTimeOffset").ToString());
            Console.WriteLine(result.GetProperty("requiredTimeSpan").ToString());
            Console.WriteLine(result.GetProperty("requiredCollectionWithNullableFloatElement")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTripPrimitive_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredNullableInt"] = 1234,
                ["requiredNullableString"] = "<requiredNullableString>",
                ["nonRequiredNullableInt"] = 1234,
                ["nonRequiredNullableString"] = "<nonRequiredNullableString>",
                ["requiredModel"] = new Dictionary<string, object>(),
                ["requiredModel2"] = null
            ,
                ["requiredIntList"] = new object[]
            {
default
            },
                ["requiredStringList"] = new object[]
            {
default
            },
                ["requiredModelList"] = new object[]
            {
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
            },
                ["requiredModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = null
            ,
                },
                ["requiredCollectionWithNullableFloatElement"] = new object[]
            {
default
            },
                ["requiredCollectionWithNullableBooleanElement"] = new object[]
            {
default
            },
                ["requiredNullableModelList"] = new object[]
            {
null
            },
                ["requiredNullableStringList"] = new object[]
            {
default
            },
                ["requiredNullableIntList"] = new object[]
            {
default
            },
                ["nonRequiredModelList"] = new object[]
            {
null
            },
                ["nonRequiredStringList"] = new object[]
            {
default
            },
                ["nonRequiredIntList"] = new object[]
            {
default
            },
                ["nonRequiredNullableModelList"] = new object[]
            {
null
            },
                ["nonRequiredNullableStringList"] = new object[]
            {
default
            },
                ["nonRequiredNullableIntList"] = new object[]
            {
default
            },
            });
            Response response = await client.InputToRoundTripPrimitiveAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("requiredInt64").ToString());
            Console.WriteLine(result.GetProperty("requiredSafeInt").ToString());
            Console.WriteLine(result.GetProperty("requiredFloat").ToString());
            Console.WriteLine(result.GetProperty("required_Double").ToString());
            Console.WriteLine(result.GetProperty("requiredBoolean").ToString());
            Console.WriteLine(result.GetProperty("requiredDateTimeOffset").ToString());
            Console.WriteLine(result.GetProperty("requiredTimeSpan").ToString());
            Console.WriteLine(result.GetProperty("requiredCollectionWithNullableFloatElement")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTripPrimitive_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            InputModel input = new InputModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new BaseModel(), null, new int[]
            {
1234
            }, new string[]
            {
"<requiredStringList>"
            }, new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new CollectionItem[]
{
null
}),
})
            }, new Dictionary<string, RecordItem>()
            {
                ["key"] = null,
            }, new float?[]
            {
123.45F
            }, new bool?[]
            {
true
            }, new CollectionItem[]
            {
null
            }, new string[]
            {
"<requiredNullableStringList>"
            }, new int[]
            {
1234
            });
            Response<RoundTripPrimitiveModel> response = await client.InputToRoundTripPrimitiveAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTripPrimitive_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            InputModel input = new InputModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new BaseModel(), null, new int[]
            {
1234
            }, new string[]
            {
"<requiredStringList>"
            }, new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new CollectionItem[]
{
null
}),
})
            }, new Dictionary<string, RecordItem>()
            {
                ["key"] = null,
            }, new float?[]
            {
123.45F
            }, new bool?[]
            {
true
            }, new CollectionItem[]
            {
null
            }, new string[]
            {
"<requiredNullableStringList>"
            }, new int[]
            {
1234
            })
            {
                NonRequiredNullableInt = 1234,
                NonRequiredNullableString = "<nonRequiredNullableString>",
                NonRequiredModelList =
{
null
},
                NonRequiredStringList =
{
"<nonRequiredStringList>"
},
                NonRequiredIntList =
{
1234
},
                NonRequiredNullableModelList =
{
null
},
                NonRequiredNullableStringList =
{
"<nonRequiredNullableStringList>"
},
                NonRequiredNullableIntList =
{
1234
},
            };
            Response<RoundTripPrimitiveModel> response = await client.InputToRoundTripPrimitiveAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTripOptional()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>());
            Response response = client.InputToRoundTripOptional(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTripOptional_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["optionalString"] = "<optionalString>",
                ["optionalInt"] = 1234,
                ["optionalStringList"] = new object[]
            {
default
            },
                ["optionalIntList"] = new object[]
            {
default
            },
                ["optionalModelList"] = new object[]
            {
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
            },
                ["optionalModel"] = new Dictionary<string, object>()
                {
                    ["requiredList"] = new object[]
            {
null
            },
                },
                ["optionalModelWithPropertiesOnBase"] = new Dictionary<string, object>()
                {
                    ["requiredList"] = new object[]
            {
null
            },
                    ["optionalPropertyOnBase"] = "<optionalPropertyOnBase>",
                },
                ["optionalFixedStringEnum"] = "1",
                ["optionalExtensibleEnum"] = "1",
                ["optionalIntRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = 1234,
                },
                ["optionalStringRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = "<optionalStringRecord>",
                },
                ["optionalModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = null
            ,
                },
                ["optionalPlainDate"] = "2022-05-10",
                ["optionalPlainTime"] = "01:23:45",
                ["optionalCollectionWithNullableIntElement"] = new object[]
            {
default
            },
            });
            Response response = client.InputToRoundTripOptional(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("optionalString").ToString());
            Console.WriteLine(result.GetProperty("optionalInt").ToString());
            Console.WriteLine(result.GetProperty("optionalStringList")[0].ToString());
            Console.WriteLine(result.GetProperty("optionalIntList")[0].ToString());
            Console.WriteLine(result.GetProperty("optionalModelWithPropertiesOnBase").GetProperty("optionalPropertyOnBase").ToString());
            Console.WriteLine(result.GetProperty("optionalFixedStringEnum").ToString());
            Console.WriteLine(result.GetProperty("optionalExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("optionalIntRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("optionalStringRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("optionalPlainDate").ToString());
            Console.WriteLine(result.GetProperty("optionalPlainTime").ToString());
            Console.WriteLine(result.GetProperty("optionalCollectionWithNullableIntElement")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTripOptional_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripOptionalModel input = new RoundTripOptionalModel();
            Response<RoundTripOptionalModel> response = client.InputToRoundTripOptional(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTripOptional_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripOptionalModel input = new RoundTripOptionalModel()
            {
                OptionalString = "<optionalString>",
                OptionalInt = 1234,
                OptionalStringList =
{
"<optionalStringList>"
},
                OptionalIntList =
{
1234
},
                OptionalModelList =
{
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new CollectionItem[]
{
null
}),
})
},
                OptionalModel = new DerivedModel(new CollectionItem[]
            {
null
            }),
                OptionalModelWithPropertiesOnBase = new DerivedModelWithProperties(new CollectionItem[]
            {
null
            }),
                OptionalFixedStringEnum = FixedStringEnum.One,
                OptionalExtensibleEnum = ExtensibleEnum.One,
                OptionalIntRecord =
{
["key"] = 1234,
},
                OptionalStringRecord =
{
["key"] = "<optionalStringRecord>",
},
                OptionalModelRecord =
{
["key"] = null,
},
                OptionalPlainDate = DateTimeOffset.Parse("2022-05-10"),
                OptionalPlainTime = TimeSpan.Parse("01:23:45"),
                OptionalCollectionWithNullableIntElement =
{
1234
},
            };
            Response<RoundTripOptionalModel> response = client.InputToRoundTripOptional(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTripOptional_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>());
            Response response = await client.InputToRoundTripOptionalAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTripOptional_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["optionalString"] = "<optionalString>",
                ["optionalInt"] = 1234,
                ["optionalStringList"] = new object[]
            {
default
            },
                ["optionalIntList"] = new object[]
            {
default
            },
                ["optionalModelList"] = new object[]
            {
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
            },
                ["optionalModel"] = new Dictionary<string, object>()
                {
                    ["requiredList"] = new object[]
            {
null
            },
                },
                ["optionalModelWithPropertiesOnBase"] = new Dictionary<string, object>()
                {
                    ["requiredList"] = new object[]
            {
null
            },
                    ["optionalPropertyOnBase"] = "<optionalPropertyOnBase>",
                },
                ["optionalFixedStringEnum"] = "1",
                ["optionalExtensibleEnum"] = "1",
                ["optionalIntRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = 1234,
                },
                ["optionalStringRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = "<optionalStringRecord>",
                },
                ["optionalModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = null
            ,
                },
                ["optionalPlainDate"] = "2022-05-10",
                ["optionalPlainTime"] = "01:23:45",
                ["optionalCollectionWithNullableIntElement"] = new object[]
            {
default
            },
            });
            Response response = await client.InputToRoundTripOptionalAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("optionalString").ToString());
            Console.WriteLine(result.GetProperty("optionalInt").ToString());
            Console.WriteLine(result.GetProperty("optionalStringList")[0].ToString());
            Console.WriteLine(result.GetProperty("optionalIntList")[0].ToString());
            Console.WriteLine(result.GetProperty("optionalModelWithPropertiesOnBase").GetProperty("optionalPropertyOnBase").ToString());
            Console.WriteLine(result.GetProperty("optionalFixedStringEnum").ToString());
            Console.WriteLine(result.GetProperty("optionalExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("optionalIntRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("optionalStringRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("optionalPlainDate").ToString());
            Console.WriteLine(result.GetProperty("optionalPlainTime").ToString());
            Console.WriteLine(result.GetProperty("optionalCollectionWithNullableIntElement")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTripOptional_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripOptionalModel input = new RoundTripOptionalModel();
            Response<RoundTripOptionalModel> response = await client.InputToRoundTripOptionalAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTripOptional_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripOptionalModel input = new RoundTripOptionalModel()
            {
                OptionalString = "<optionalString>",
                OptionalInt = 1234,
                OptionalStringList =
{
"<optionalStringList>"
},
                OptionalIntList =
{
1234
},
                OptionalModelList =
{
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new CollectionItem[]
{
null
}),
})
},
                OptionalModel = new DerivedModel(new CollectionItem[]
            {
null
            }),
                OptionalModelWithPropertiesOnBase = new DerivedModelWithProperties(new CollectionItem[]
            {
null
            }),
                OptionalFixedStringEnum = FixedStringEnum.One,
                OptionalExtensibleEnum = ExtensibleEnum.One,
                OptionalIntRecord =
{
["key"] = 1234,
},
                OptionalStringRecord =
{
["key"] = "<optionalStringRecord>",
},
                OptionalModelRecord =
{
["key"] = null,
},
                OptionalPlainDate = DateTimeOffset.Parse("2022-05-10"),
                OptionalPlainTime = TimeSpan.Parse("01:23:45"),
                OptionalCollectionWithNullableIntElement =
{
1234
},
            };
            Response<RoundTripOptionalModel> response = await client.InputToRoundTripOptionalAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripToOutput()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredNullableInt"] = 1234,
                ["requiredNullableString"] = "<requiredNullableString>",
                ["requiredModel"] = new Dictionary<string, object>()
                {
                    ["requiredString"] = "<requiredString>",
                    ["discriminatorProperty"] = "A",
                    ["requiredPropertyOnBase"] = 1234,
                },
                ["requiredFixedStringEnum"] = "1",
                ["requiredFixedIntEnum"] = 1,
                ["requiredExtensibleEnum"] = "1",
                ["requiredList"] = new object[]
            {
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
            },
                ["requiredIntRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = 1234,
                },
                ["requiredStringRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = "<requiredStringRecord>",
                },
                ["requiredModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = null
            ,
                },
                ["requiredBytes"] = new Dictionary<string, object>(),
                ["requiredUint8Array"] = new object[]
            {
default
            },
                ["requiredUnknown"] = new Dictionary<string, object>(),
                ["requiredInt8Array"] = new object[]
            {
default
            },
                ["requiredNullableIntList"] = new object[]
            {
default
            },
                ["requiredNullableStringList"] = new object[]
            {
default
            },
            });
            Response response = client.RoundTripToOutput(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripToOutput_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["nonRequiredString"] = "<nonRequiredString>",
                ["nonRequiredInt"] = 1234,
                ["requiredNullableInt"] = 1234,
                ["requiredNullableString"] = "<requiredNullableString>",
                ["nonRequiredNullableInt"] = 1234,
                ["nonRequiredNullableString"] = "<nonRequiredNullableString>",
                ["requiredModel"] = new Dictionary<string, object>()
                {
                    ["requiredString"] = "<requiredString>",
                    ["discriminatorProperty"] = "A",
                    ["optionalPropertyOnBase"] = "<optionalPropertyOnBase>",
                    ["requiredPropertyOnBase"] = 1234,
                },
                ["requiredFixedStringEnum"] = "1",
                ["requiredFixedIntEnum"] = 1,
                ["requiredExtensibleEnum"] = "1",
                ["requiredList"] = new object[]
            {
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
            },
                ["requiredIntRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = 1234,
                },
                ["requiredStringRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = "<requiredStringRecord>",
                },
                ["requiredModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = null
            ,
                },
                ["requiredBytes"] = new Dictionary<string, object>(),
                ["optionalBytes"] = new Dictionary<string, object>(),
                ["requiredUint8Array"] = new object[]
            {
default
            },
                ["optionalUint8Array"] = new object[]
            {
default
            },
                ["requiredUnknown"] = new Dictionary<string, object>(),
                ["optionalUnknown"] = new Dictionary<string, object>(),
                ["requiredInt8Array"] = new object[]
            {
default
            },
                ["optionalInt8Array"] = new object[]
            {
default
            },
                ["requiredNullableIntList"] = new object[]
            {
default
            },
                ["requiredNullableStringList"] = new object[]
            {
default
            },
                ["nonRequiredNullableIntList"] = new object[]
            {
default
            },
                ["nonRequiredNullableStringList"] = new object[]
            {
default
            },
            });
            Response response = client.RoundTripToOutput(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripToOutput_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripModel input = new RoundTripModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new DerivedModelWithDiscriminatorA(1234, "<requiredString>"), FixedStringEnum.One, FixedIntEnum.One, ExtensibleEnum.One, new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new CollectionItem[]
{
null
}),
})
            }, new Dictionary<string, int>()
            {
                ["key"] = 1234,
            }, new Dictionary<string, string>()
            {
                ["key"] = "<requiredStringRecord>",
            }, new Dictionary<string, RecordItem>()
            {
                ["key"] = null,
            }, BinaryData.FromObjectAsJson(new Dictionary<string, object>()), new int[]
            {
1234
            }, BinaryData.FromObjectAsJson(new Dictionary<string, object>()), new int[]
            {
1234
            }, new int[]
            {
1234
            }, new string[]
            {
"<requiredNullableStringList>"
            });
            Response<OutputModel> response = client.RoundTripToOutput(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripToOutput_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripModel input = new RoundTripModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new DerivedModelWithDiscriminatorA(1234, "<requiredString>")
            {
                OptionalPropertyOnBase = "<optionalPropertyOnBase>",
            }, FixedStringEnum.One, FixedIntEnum.One, ExtensibleEnum.One, new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new CollectionItem[]
{
null
}),
})
            }, new Dictionary<string, int>()
            {
                ["key"] = 1234,
            }, new Dictionary<string, string>()
            {
                ["key"] = "<requiredStringRecord>",
            }, new Dictionary<string, RecordItem>()
            {
                ["key"] = null,
            }, BinaryData.FromObjectAsJson(new Dictionary<string, object>()), new int[]
            {
1234
            }, BinaryData.FromObjectAsJson(new Dictionary<string, object>()), new int[]
            {
1234
            }, new int[]
            {
1234
            }, new string[]
            {
"<requiredNullableStringList>"
            })
            {
                NonRequiredString = "<nonRequiredString>",
                NonRequiredInt = 1234,
                NonRequiredNullableInt = 1234,
                NonRequiredNullableString = "<nonRequiredNullableString>",
                OptionalBytes = BinaryData.FromObjectAsJson(new Dictionary<string, object>()),
                OptionalUint8Array =
{
1234
},
                OptionalUnknown = BinaryData.FromObjectAsJson(new Dictionary<string, object>()),
                OptionalInt8Array =
{
1234
},
                NonRequiredNullableIntList =
{
1234
},
                NonRequiredNullableStringList =
{
"<nonRequiredNullableStringList>"
},
            };
            Response<OutputModel> response = client.RoundTripToOutput(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripToOutput_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredNullableInt"] = 1234,
                ["requiredNullableString"] = "<requiredNullableString>",
                ["requiredModel"] = new Dictionary<string, object>()
                {
                    ["requiredString"] = "<requiredString>",
                    ["discriminatorProperty"] = "A",
                    ["requiredPropertyOnBase"] = 1234,
                },
                ["requiredFixedStringEnum"] = "1",
                ["requiredFixedIntEnum"] = 1,
                ["requiredExtensibleEnum"] = "1",
                ["requiredList"] = new object[]
            {
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
            },
                ["requiredIntRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = 1234,
                },
                ["requiredStringRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = "<requiredStringRecord>",
                },
                ["requiredModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = null
            ,
                },
                ["requiredBytes"] = new Dictionary<string, object>(),
                ["requiredUint8Array"] = new object[]
            {
default
            },
                ["requiredUnknown"] = new Dictionary<string, object>(),
                ["requiredInt8Array"] = new object[]
            {
default
            },
                ["requiredNullableIntList"] = new object[]
            {
default
            },
                ["requiredNullableStringList"] = new object[]
            {
default
            },
            });
            Response response = await client.RoundTripToOutputAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripToOutput_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["nonRequiredString"] = "<nonRequiredString>",
                ["nonRequiredInt"] = 1234,
                ["requiredNullableInt"] = 1234,
                ["requiredNullableString"] = "<requiredNullableString>",
                ["nonRequiredNullableInt"] = 1234,
                ["nonRequiredNullableString"] = "<nonRequiredNullableString>",
                ["requiredModel"] = new Dictionary<string, object>()
                {
                    ["requiredString"] = "<requiredString>",
                    ["discriminatorProperty"] = "A",
                    ["optionalPropertyOnBase"] = "<optionalPropertyOnBase>",
                    ["requiredPropertyOnBase"] = 1234,
                },
                ["requiredFixedStringEnum"] = "1",
                ["requiredFixedIntEnum"] = 1,
                ["requiredExtensibleEnum"] = "1",
                ["requiredList"] = new object[]
            {
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
            },
                ["requiredIntRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = 1234,
                },
                ["requiredStringRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = "<requiredStringRecord>",
                },
                ["requiredModelRecord"] = new Dictionary<string, object>()
                {
                    ["key"] = null
            ,
                },
                ["requiredBytes"] = new Dictionary<string, object>(),
                ["optionalBytes"] = new Dictionary<string, object>(),
                ["requiredUint8Array"] = new object[]
            {
default
            },
                ["optionalUint8Array"] = new object[]
            {
default
            },
                ["requiredUnknown"] = new Dictionary<string, object>(),
                ["optionalUnknown"] = new Dictionary<string, object>(),
                ["requiredInt8Array"] = new object[]
            {
default
            },
                ["optionalInt8Array"] = new object[]
            {
default
            },
                ["requiredNullableIntList"] = new object[]
            {
default
            },
                ["requiredNullableStringList"] = new object[]
            {
default
            },
                ["nonRequiredNullableIntList"] = new object[]
            {
default
            },
                ["nonRequiredNullableStringList"] = new object[]
            {
default
            },
            });
            Response response = await client.RoundTripToOutputAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripToOutput_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripModel input = new RoundTripModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new DerivedModelWithDiscriminatorA(1234, "<requiredString>"), FixedStringEnum.One, FixedIntEnum.One, ExtensibleEnum.One, new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new CollectionItem[]
{
null
}),
})
            }, new Dictionary<string, int>()
            {
                ["key"] = 1234,
            }, new Dictionary<string, string>()
            {
                ["key"] = "<requiredStringRecord>",
            }, new Dictionary<string, RecordItem>()
            {
                ["key"] = null,
            }, BinaryData.FromObjectAsJson(new Dictionary<string, object>()), new int[]
            {
1234
            }, BinaryData.FromObjectAsJson(new Dictionary<string, object>()), new int[]
            {
1234
            }, new int[]
            {
1234
            }, new string[]
            {
"<requiredNullableStringList>"
            });
            Response<OutputModel> response = await client.RoundTripToOutputAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripToOutput_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripModel input = new RoundTripModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new DerivedModelWithDiscriminatorA(1234, "<requiredString>")
            {
                OptionalPropertyOnBase = "<optionalPropertyOnBase>",
            }, FixedStringEnum.One, FixedIntEnum.One, ExtensibleEnum.One, new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new CollectionItem[]
{
null
}),
})
            }, new Dictionary<string, int>()
            {
                ["key"] = 1234,
            }, new Dictionary<string, string>()
            {
                ["key"] = "<requiredStringRecord>",
            }, new Dictionary<string, RecordItem>()
            {
                ["key"] = null,
            }, BinaryData.FromObjectAsJson(new Dictionary<string, object>()), new int[]
            {
1234
            }, BinaryData.FromObjectAsJson(new Dictionary<string, object>()), new int[]
            {
1234
            }, new int[]
            {
1234
            }, new string[]
            {
"<requiredNullableStringList>"
            })
            {
                NonRequiredString = "<nonRequiredString>",
                NonRequiredInt = 1234,
                NonRequiredNullableInt = 1234,
                NonRequiredNullableString = "<nonRequiredNullableString>",
                OptionalBytes = BinaryData.FromObjectAsJson(new Dictionary<string, object>()),
                OptionalUint8Array =
{
1234
},
                OptionalUnknown = BinaryData.FromObjectAsJson(new Dictionary<string, object>()),
                OptionalInt8Array =
{
1234
},
                NonRequiredNullableIntList =
{
1234
},
                NonRequiredNullableStringList =
{
"<nonRequiredNullableStringList>"
},
            };
            Response<OutputModel> response = await client.RoundTripToOutputAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputRecursive()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["message"] = "<message>",
            });
            Response response = client.InputRecursive(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputRecursive_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["message"] = "<message>",
                ["inner"] = null
            ,
            });
            Response response = client.InputRecursive(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputRecursive_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            InputRecursiveModel input = new InputRecursiveModel("<message>");
            Response response = client.InputRecursive(input);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputRecursive_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            InputRecursiveModel input = new InputRecursiveModel("<message>")
            {
                Inner = null,
            };
            Response response = client.InputRecursive(input);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputRecursive_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["message"] = "<message>",
            });
            Response response = await client.InputRecursiveAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputRecursive_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["message"] = "<message>",
                ["inner"] = null
            ,
            });
            Response response = await client.InputRecursiveAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputRecursive_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            InputRecursiveModel input = new InputRecursiveModel("<message>");
            Response response = await client.InputRecursiveAsync(input);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputRecursive_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            InputRecursiveModel input = new InputRecursiveModel("<message>")
            {
                Inner = null,
            };
            Response response = await client.InputRecursiveAsync(input);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripRecursive()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["message"] = "<message>",
            });
            Response response = client.RoundTripRecursive(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripRecursive_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["message"] = "<message>",
                ["inner"] = null
            ,
            });
            Response response = client.RoundTripRecursive(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("inner").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripRecursive_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripRecursiveModel input = new RoundTripRecursiveModel("<message>");
            Response<RoundTripRecursiveModel> response = client.RoundTripRecursive(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripRecursive_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripRecursiveModel input = new RoundTripRecursiveModel("<message>")
            {
                Inner = null,
            };
            Response<RoundTripRecursiveModel> response = client.RoundTripRecursive(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripRecursive_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["message"] = "<message>",
            });
            Response response = await client.RoundTripRecursiveAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripRecursive_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["message"] = "<message>",
                ["inner"] = null
            ,
            });
            Response response = await client.RoundTripRecursiveAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("inner").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripRecursive_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripRecursiveModel input = new RoundTripRecursiveModel("<message>");
            Response<RoundTripRecursiveModel> response = await client.RoundTripRecursiveAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripRecursive_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripRecursiveModel input = new RoundTripRecursiveModel("<message>")
            {
                Inner = null,
            };
            Response<RoundTripRecursiveModel> response = await client.RoundTripRecursiveAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SelfReference()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = client.SelfReference(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SelfReference_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = client.SelfReference(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("innerError").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SelfReference_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<ErrorModel> response = client.SelfReference();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SelfReference_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<ErrorModel> response = client.SelfReference();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SelfReference_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = await client.SelfReferenceAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SelfReference_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = await client.SelfReferenceAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("innerError").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SelfReference_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<ErrorModel> response = await client.SelfReferenceAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SelfReference_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<ErrorModel> response = await client.SelfReferenceAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripToOutputWithNoUseBase()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredList"] = new object[]
            {
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
            },
                ["baseModelProp"] = "<baseModelProp>",
            });
            Response response = client.RoundTripToOutputWithNoUseBase(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("baseModelProp").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripToOutputWithNoUseBase_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredList"] = new object[]
            {
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
            },
                ["baseModelProp"] = "<baseModelProp>",
            });
            Response response = client.RoundTripToOutputWithNoUseBase(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("baseModelProp").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripToOutputWithNoUseBase_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripOnNoUse input = new RoundTripOnNoUse("<baseModelProp>", new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new CollectionItem[]
{
null
}),
})
            });
            Response<RoundTripOnNoUse> response = client.RoundTripToOutputWithNoUseBase(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripToOutputWithNoUseBase_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripOnNoUse input = new RoundTripOnNoUse("<baseModelProp>", new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new CollectionItem[]
{
null
}),
})
            });
            Response<RoundTripOnNoUse> response = client.RoundTripToOutputWithNoUseBase(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripToOutputWithNoUseBase_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredList"] = new object[]
            {
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
            },
                ["baseModelProp"] = "<baseModelProp>",
            });
            Response response = await client.RoundTripToOutputWithNoUseBaseAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("baseModelProp").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripToOutputWithNoUseBase_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredList"] = new object[]
            {
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
            },
                ["baseModelProp"] = "<baseModelProp>",
            });
            Response response = await client.RoundTripToOutputWithNoUseBaseAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("baseModelProp").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripToOutputWithNoUseBase_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripOnNoUse input = new RoundTripOnNoUse("<baseModelProp>", new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new CollectionItem[]
{
null
}),
})
            });
            Response<RoundTripOnNoUse> response = await client.RoundTripToOutputWithNoUseBaseAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripToOutputWithNoUseBase_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripOnNoUse input = new RoundTripOnNoUse("<baseModelProp>", new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new CollectionItem[]
{
null
}),
})
            });
            Response<RoundTripOnNoUse> response = await client.RoundTripToOutputWithNoUseBaseAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversation()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = client.AnalyzeConversation(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("discriminatorProperty").ToString());
            Console.WriteLine(result.GetProperty("requiredPropertyOnBase").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversation_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = client.AnalyzeConversation(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("discriminatorProperty").ToString());
            Console.WriteLine(result.GetProperty("optionalPropertyOnBase").ToString());
            Console.WriteLine(result.GetProperty("requiredPropertyOnBase").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversation_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<BaseModelWithDiscriminator> response = client.AnalyzeConversation();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversation_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<BaseModelWithDiscriminator> response = client.AnalyzeConversation();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversation_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = await client.AnalyzeConversationAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("discriminatorProperty").ToString());
            Console.WriteLine(result.GetProperty("requiredPropertyOnBase").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversation_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = await client.AnalyzeConversationAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("discriminatorProperty").ToString());
            Console.WriteLine(result.GetProperty("optionalPropertyOnBase").ToString());
            Console.WriteLine(result.GetProperty("requiredPropertyOnBase").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversation_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<BaseModelWithDiscriminator> response = await client.AnalyzeConversationAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversation_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<BaseModelWithDiscriminator> response = await client.AnalyzeConversationAsync();
        }
    }
}
