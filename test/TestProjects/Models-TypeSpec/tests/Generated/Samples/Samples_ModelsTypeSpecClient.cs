// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using ModelsTypeSpec;
using ModelsTypeSpec.Models;
using NUnit.Framework;

namespace ModelsTypeSpec.Samples
{
    public partial class Samples_ModelsTypeSpecClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetOutputDiscriminatorModel_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = client.GetOutputDiscriminatorModel(null);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetOutputDiscriminatorModel_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = await client.GetOutputDiscriminatorModelAsync(null);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetOutputDiscriminatorModel_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<OutputBaseModelWithDiscriminator> response = client.GetOutputDiscriminatorModel();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetOutputDiscriminatorModel_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<OutputBaseModelWithDiscriminator> response = await client.GetOutputDiscriminatorModelAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetOutputDiscriminatorModel_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = client.GetOutputDiscriminatorModel(null);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetOutputDiscriminatorModel_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = await client.GetOutputDiscriminatorModelAsync(null);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("kind").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetOutputDiscriminatorModel_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<OutputBaseModelWithDiscriminator> response = client.GetOutputDiscriminatorModel();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetOutputDiscriminatorModel_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<OutputBaseModelWithDiscriminator> response = await client.GetOutputDiscriminatorModelAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTrip_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredNullableInt = 1234,
                requiredNullableString = "<requiredNullableString>",
                requiredModel = new object(),
                requiredIntList = new object[]
            {
1234
            },
                requiredStringList = new object[]
            {
"<requiredStringList>"
            },
                requiredModelList = new object[]
            {
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new object[]
{
null
},
},
},
}
            },
                requiredModelRecord = new { },
                requiredCollectionWithNullableFloatElement = new object[]
            {
123.45F
            },
                requiredCollectionWithNullableBooleanElement = new object[]
            {
true
            },
                requiredNullableModelList = new object[]
            {
null
            },
                requiredNullableStringList = new object[]
            {
"<requiredNullableStringList>"
            },
                requiredNullableIntList = new object[]
            {
1234
            },
            });
            Response response = client.InputToRoundTrip(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("requiredString").ToString());
            Console.WriteLine(element.GetProperty("requiredInt").ToString());
            Console.WriteLine(element.GetProperty("requiredNullableInt").ToString());
            Console.WriteLine(element.GetProperty("requiredNullableString").ToString());
            Console.WriteLine(element.GetProperty("requiredReadonlyInt").ToString());
            Console.WriteLine(element.GetProperty("requiredModel").GetProperty("discriminatorProperty").ToString());
            Console.WriteLine(element.GetProperty("requiredModel").GetProperty("requiredPropertyOnBase").ToString());
            Console.WriteLine(element.GetProperty("requiredFixedStringEnum").ToString());
            Console.WriteLine(element.GetProperty("requiredFixedIntEnum").ToString());
            Console.WriteLine(element.GetProperty("requiredExtensibleEnum").ToString());
            Console.WriteLine(element.GetProperty("requiredIntRecord").GetProperty("<key>").ToString());
            Console.WriteLine(element.GetProperty("requiredStringRecord").GetProperty("<key>").ToString());
            Console.WriteLine(element.GetProperty("requiredBytes").ToString());
            Console.WriteLine(element.GetProperty("requiredUint8Array")[0].ToString());
            Console.WriteLine(element.GetProperty("requiredUnknown").ToString());
            Console.WriteLine(element.GetProperty("requiredInt8Array")[0].ToString());
            Console.WriteLine(element.GetProperty("requiredNullableIntList")[0].ToString());
            Console.WriteLine(element.GetProperty("requiredNullableStringList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTrip_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredNullableInt = 1234,
                requiredNullableString = "<requiredNullableString>",
                requiredModel = new object(),
                requiredIntList = new object[]
            {
1234
            },
                requiredStringList = new object[]
            {
"<requiredStringList>"
            },
                requiredModelList = new object[]
            {
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new object[]
{
null
},
},
},
}
            },
                requiredModelRecord = new { },
                requiredCollectionWithNullableFloatElement = new object[]
            {
123.45F
            },
                requiredCollectionWithNullableBooleanElement = new object[]
            {
true
            },
                requiredNullableModelList = new object[]
            {
null
            },
                requiredNullableStringList = new object[]
            {
"<requiredNullableStringList>"
            },
                requiredNullableIntList = new object[]
            {
1234
            },
            });
            Response response = await client.InputToRoundTripAsync(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("requiredString").ToString());
            Console.WriteLine(element.GetProperty("requiredInt").ToString());
            Console.WriteLine(element.GetProperty("requiredNullableInt").ToString());
            Console.WriteLine(element.GetProperty("requiredNullableString").ToString());
            Console.WriteLine(element.GetProperty("requiredReadonlyInt").ToString());
            Console.WriteLine(element.GetProperty("requiredModel").GetProperty("discriminatorProperty").ToString());
            Console.WriteLine(element.GetProperty("requiredModel").GetProperty("requiredPropertyOnBase").ToString());
            Console.WriteLine(element.GetProperty("requiredFixedStringEnum").ToString());
            Console.WriteLine(element.GetProperty("requiredFixedIntEnum").ToString());
            Console.WriteLine(element.GetProperty("requiredExtensibleEnum").ToString());
            Console.WriteLine(element.GetProperty("requiredIntRecord").GetProperty("<key>").ToString());
            Console.WriteLine(element.GetProperty("requiredStringRecord").GetProperty("<key>").ToString());
            Console.WriteLine(element.GetProperty("requiredBytes").ToString());
            Console.WriteLine(element.GetProperty("requiredUint8Array")[0].ToString());
            Console.WriteLine(element.GetProperty("requiredUnknown").ToString());
            Console.WriteLine(element.GetProperty("requiredInt8Array")[0].ToString());
            Console.WriteLine(element.GetProperty("requiredNullableIntList")[0].ToString());
            Console.WriteLine(element.GetProperty("requiredNullableStringList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTrip_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            InputModel input = new InputModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new BaseModel(), default, new int[] { 1234 }, new string[] { "<requiredStringList>" }, new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>
{
["key"] = new RecordItem(new CollectionItem[]
{
default
})
})
            }, new Dictionary<string, RecordItem>
            {
                ["key"] = default
            }, new float?[] { 123.45F }, new bool?[] { true }, new CollectionItem[]
            {
default
            }, new string[] { "<requiredNullableStringList>" }, new int[] { 1234 });
            Response<RoundTripModel> response = client.InputToRoundTrip(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTrip_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            InputModel input = new InputModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new BaseModel(), default, new int[] { 1234 }, new string[] { "<requiredStringList>" }, new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>
{
["key"] = new RecordItem(new CollectionItem[]
{
default
})
})
            }, new Dictionary<string, RecordItem>
            {
                ["key"] = default
            }, new float?[] { 123.45F }, new bool?[] { true }, new CollectionItem[]
            {
default
            }, new string[] { "<requiredNullableStringList>" }, new int[] { 1234 });
            Response<RoundTripModel> response = await client.InputToRoundTripAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTrip_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredNullableInt = 1234,
                requiredNullableString = "<requiredNullableString>",
                nonRequiredNullableInt = 1234,
                nonRequiredNullableString = "<nonRequiredNullableString>",
                requiredModel = new object(),
                requiredIntList = new object[]
            {
1234
            },
                requiredStringList = new object[]
            {
"<requiredStringList>"
            },
                requiredModelList = new object[]
            {
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new object[]
{
null
},
},
},
}
            },
                requiredModelRecord = new { },
                requiredCollectionWithNullableFloatElement = new object[]
            {
123.45F
            },
                requiredCollectionWithNullableBooleanElement = new object[]
            {
true
            },
                requiredNullableModelList = new object[]
            {
null
            },
                requiredNullableStringList = new object[]
            {
"<requiredNullableStringList>"
            },
                requiredNullableIntList = new object[]
            {
1234
            },
                nonRequiredModelList = new object[]
            {
null
            },
                nonRequiredStringList = new object[]
            {
"<nonRequiredStringList>"
            },
                nonRequiredIntList = new object[]
            {
1234
            },
                nonRequiredNullableModelList = new object[]
            {
null
            },
                nonRequiredNullableStringList = new object[]
            {
"<nonRequiredNullableStringList>"
            },
                nonRequiredNullableIntList = new object[]
            {
1234
            },
            });
            Response response = client.InputToRoundTrip(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("requiredString").ToString());
            Console.WriteLine(element.GetProperty("requiredInt").ToString());
            Console.WriteLine(element.GetProperty("nonRequiredString").ToString());
            Console.WriteLine(element.GetProperty("nonRequiredInt").ToString());
            Console.WriteLine(element.GetProperty("requiredNullableInt").ToString());
            Console.WriteLine(element.GetProperty("requiredNullableString").ToString());
            Console.WriteLine(element.GetProperty("nonRequiredNullableInt").ToString());
            Console.WriteLine(element.GetProperty("nonRequiredNullableString").ToString());
            Console.WriteLine(element.GetProperty("requiredReadonlyInt").ToString());
            Console.WriteLine(element.GetProperty("nonRequiredReadonlyInt").ToString());
            Console.WriteLine(element.GetProperty("requiredModel").GetProperty("discriminatorProperty").ToString());
            Console.WriteLine(element.GetProperty("requiredModel").GetProperty("optionalPropertyOnBase").ToString());
            Console.WriteLine(element.GetProperty("requiredModel").GetProperty("requiredPropertyOnBase").ToString());
            Console.WriteLine(element.GetProperty("requiredFixedStringEnum").ToString());
            Console.WriteLine(element.GetProperty("requiredFixedIntEnum").ToString());
            Console.WriteLine(element.GetProperty("requiredExtensibleEnum").ToString());
            Console.WriteLine(element.GetProperty("requiredIntRecord").GetProperty("<key>").ToString());
            Console.WriteLine(element.GetProperty("requiredStringRecord").GetProperty("<key>").ToString());
            Console.WriteLine(element.GetProperty("requiredBytes").ToString());
            Console.WriteLine(element.GetProperty("optionalBytes").ToString());
            Console.WriteLine(element.GetProperty("requiredUint8Array")[0].ToString());
            Console.WriteLine(element.GetProperty("optionalUint8Array")[0].ToString());
            Console.WriteLine(element.GetProperty("requiredUnknown").ToString());
            Console.WriteLine(element.GetProperty("optionalUnknown").ToString());
            Console.WriteLine(element.GetProperty("requiredInt8Array")[0].ToString());
            Console.WriteLine(element.GetProperty("optionalInt8Array")[0].ToString());
            Console.WriteLine(element.GetProperty("requiredNullableIntList")[0].ToString());
            Console.WriteLine(element.GetProperty("requiredNullableStringList")[0].ToString());
            Console.WriteLine(element.GetProperty("nonRequiredNullableIntList")[0].ToString());
            Console.WriteLine(element.GetProperty("nonRequiredNullableStringList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTrip_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredNullableInt = 1234,
                requiredNullableString = "<requiredNullableString>",
                nonRequiredNullableInt = 1234,
                nonRequiredNullableString = "<nonRequiredNullableString>",
                requiredModel = new object(),
                requiredIntList = new object[]
            {
1234
            },
                requiredStringList = new object[]
            {
"<requiredStringList>"
            },
                requiredModelList = new object[]
            {
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new object[]
{
null
},
},
},
}
            },
                requiredModelRecord = new { },
                requiredCollectionWithNullableFloatElement = new object[]
            {
123.45F
            },
                requiredCollectionWithNullableBooleanElement = new object[]
            {
true
            },
                requiredNullableModelList = new object[]
            {
null
            },
                requiredNullableStringList = new object[]
            {
"<requiredNullableStringList>"
            },
                requiredNullableIntList = new object[]
            {
1234
            },
                nonRequiredModelList = new object[]
            {
null
            },
                nonRequiredStringList = new object[]
            {
"<nonRequiredStringList>"
            },
                nonRequiredIntList = new object[]
            {
1234
            },
                nonRequiredNullableModelList = new object[]
            {
null
            },
                nonRequiredNullableStringList = new object[]
            {
"<nonRequiredNullableStringList>"
            },
                nonRequiredNullableIntList = new object[]
            {
1234
            },
            });
            Response response = await client.InputToRoundTripAsync(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("requiredString").ToString());
            Console.WriteLine(element.GetProperty("requiredInt").ToString());
            Console.WriteLine(element.GetProperty("nonRequiredString").ToString());
            Console.WriteLine(element.GetProperty("nonRequiredInt").ToString());
            Console.WriteLine(element.GetProperty("requiredNullableInt").ToString());
            Console.WriteLine(element.GetProperty("requiredNullableString").ToString());
            Console.WriteLine(element.GetProperty("nonRequiredNullableInt").ToString());
            Console.WriteLine(element.GetProperty("nonRequiredNullableString").ToString());
            Console.WriteLine(element.GetProperty("requiredReadonlyInt").ToString());
            Console.WriteLine(element.GetProperty("nonRequiredReadonlyInt").ToString());
            Console.WriteLine(element.GetProperty("requiredModel").GetProperty("discriminatorProperty").ToString());
            Console.WriteLine(element.GetProperty("requiredModel").GetProperty("optionalPropertyOnBase").ToString());
            Console.WriteLine(element.GetProperty("requiredModel").GetProperty("requiredPropertyOnBase").ToString());
            Console.WriteLine(element.GetProperty("requiredFixedStringEnum").ToString());
            Console.WriteLine(element.GetProperty("requiredFixedIntEnum").ToString());
            Console.WriteLine(element.GetProperty("requiredExtensibleEnum").ToString());
            Console.WriteLine(element.GetProperty("requiredIntRecord").GetProperty("<key>").ToString());
            Console.WriteLine(element.GetProperty("requiredStringRecord").GetProperty("<key>").ToString());
            Console.WriteLine(element.GetProperty("requiredBytes").ToString());
            Console.WriteLine(element.GetProperty("optionalBytes").ToString());
            Console.WriteLine(element.GetProperty("requiredUint8Array")[0].ToString());
            Console.WriteLine(element.GetProperty("optionalUint8Array")[0].ToString());
            Console.WriteLine(element.GetProperty("requiredUnknown").ToString());
            Console.WriteLine(element.GetProperty("optionalUnknown").ToString());
            Console.WriteLine(element.GetProperty("requiredInt8Array")[0].ToString());
            Console.WriteLine(element.GetProperty("optionalInt8Array")[0].ToString());
            Console.WriteLine(element.GetProperty("requiredNullableIntList")[0].ToString());
            Console.WriteLine(element.GetProperty("requiredNullableStringList")[0].ToString());
            Console.WriteLine(element.GetProperty("nonRequiredNullableIntList")[0].ToString());
            Console.WriteLine(element.GetProperty("nonRequiredNullableStringList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTrip_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            InputModel input = new InputModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new BaseModel(), default, new int[] { 1234 }, new string[] { "<requiredStringList>" }, new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>
{
["key"] = new RecordItem(new CollectionItem[]
{
default
})
})
            }, new Dictionary<string, RecordItem>
            {
                ["key"] = default
            }, new float?[] { 123.45F }, new bool?[] { true }, new CollectionItem[]
            {
default
            }, new string[] { "<requiredNullableStringList>" }, new int[] { 1234 })
            {
                NonRequiredNullableInt = 1234,
                NonRequiredNullableString = "<nonRequiredNullableString>",
                NonRequiredModelList = { default },
                NonRequiredStringList = { "<nonRequiredStringList>" },
                NonRequiredIntList = { 1234 },
                NonRequiredNullableModelList = { default },
                NonRequiredNullableStringList = { "<nonRequiredNullableStringList>" },
                NonRequiredNullableIntList = { 1234 },
            };
            Response<RoundTripModel> response = client.InputToRoundTrip(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTrip_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            InputModel input = new InputModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new BaseModel(), default, new int[] { 1234 }, new string[] { "<requiredStringList>" }, new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>
{
["key"] = new RecordItem(new CollectionItem[]
{
default
})
})
            }, new Dictionary<string, RecordItem>
            {
                ["key"] = default
            }, new float?[] { 123.45F }, new bool?[] { true }, new CollectionItem[]
            {
default
            }, new string[] { "<requiredNullableStringList>" }, new int[] { 1234 })
            {
                NonRequiredNullableInt = 1234,
                NonRequiredNullableString = "<nonRequiredNullableString>",
                NonRequiredModelList = { default },
                NonRequiredStringList = { "<nonRequiredStringList>" },
                NonRequiredIntList = { 1234 },
                NonRequiredNullableModelList = { default },
                NonRequiredNullableStringList = { "<nonRequiredNullableStringList>" },
                NonRequiredNullableIntList = { 1234 },
            };
            Response<RoundTripModel> response = await client.InputToRoundTripAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTripPrimitive_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredNullableInt = 1234,
                requiredNullableString = "<requiredNullableString>",
                requiredModel = new object(),
                requiredIntList = new object[]
            {
1234
            },
                requiredStringList = new object[]
            {
"<requiredStringList>"
            },
                requiredModelList = new object[]
            {
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new object[]
{
null
},
},
},
}
            },
                requiredModelRecord = new { },
                requiredCollectionWithNullableFloatElement = new object[]
            {
123.45F
            },
                requiredCollectionWithNullableBooleanElement = new object[]
            {
true
            },
                requiredNullableModelList = new object[]
            {
null
            },
                requiredNullableStringList = new object[]
            {
"<requiredNullableStringList>"
            },
                requiredNullableIntList = new object[]
            {
1234
            },
            });
            Response response = client.InputToRoundTripPrimitive(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("requiredString").ToString());
            Console.WriteLine(element.GetProperty("requiredInt").ToString());
            Console.WriteLine(element.GetProperty("requiredInt64").ToString());
            Console.WriteLine(element.GetProperty("requiredSafeInt").ToString());
            Console.WriteLine(element.GetProperty("requiredFloat").ToString());
            Console.WriteLine(element.GetProperty("required_Double").ToString());
            Console.WriteLine(element.GetProperty("requiredBoolean").ToString());
            Console.WriteLine(element.GetProperty("requiredDateTimeOffset").ToString());
            Console.WriteLine(element.GetProperty("requiredTimeSpan").ToString());
            Console.WriteLine(element.GetProperty("requiredCollectionWithNullableFloatElement")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTripPrimitive_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredNullableInt = 1234,
                requiredNullableString = "<requiredNullableString>",
                requiredModel = new object(),
                requiredIntList = new object[]
            {
1234
            },
                requiredStringList = new object[]
            {
"<requiredStringList>"
            },
                requiredModelList = new object[]
            {
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new object[]
{
null
},
},
},
}
            },
                requiredModelRecord = new { },
                requiredCollectionWithNullableFloatElement = new object[]
            {
123.45F
            },
                requiredCollectionWithNullableBooleanElement = new object[]
            {
true
            },
                requiredNullableModelList = new object[]
            {
null
            },
                requiredNullableStringList = new object[]
            {
"<requiredNullableStringList>"
            },
                requiredNullableIntList = new object[]
            {
1234
            },
            });
            Response response = await client.InputToRoundTripPrimitiveAsync(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("requiredString").ToString());
            Console.WriteLine(element.GetProperty("requiredInt").ToString());
            Console.WriteLine(element.GetProperty("requiredInt64").ToString());
            Console.WriteLine(element.GetProperty("requiredSafeInt").ToString());
            Console.WriteLine(element.GetProperty("requiredFloat").ToString());
            Console.WriteLine(element.GetProperty("required_Double").ToString());
            Console.WriteLine(element.GetProperty("requiredBoolean").ToString());
            Console.WriteLine(element.GetProperty("requiredDateTimeOffset").ToString());
            Console.WriteLine(element.GetProperty("requiredTimeSpan").ToString());
            Console.WriteLine(element.GetProperty("requiredCollectionWithNullableFloatElement")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTripPrimitive_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            InputModel input = new InputModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new BaseModel(), default, new int[] { 1234 }, new string[] { "<requiredStringList>" }, new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>
{
["key"] = new RecordItem(new CollectionItem[]
{
default
})
})
            }, new Dictionary<string, RecordItem>
            {
                ["key"] = default
            }, new float?[] { 123.45F }, new bool?[] { true }, new CollectionItem[]
            {
default
            }, new string[] { "<requiredNullableStringList>" }, new int[] { 1234 });
            Response<RoundTripPrimitiveModel> response = client.InputToRoundTripPrimitive(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTripPrimitive_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            InputModel input = new InputModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new BaseModel(), default, new int[] { 1234 }, new string[] { "<requiredStringList>" }, new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>
{
["key"] = new RecordItem(new CollectionItem[]
{
default
})
})
            }, new Dictionary<string, RecordItem>
            {
                ["key"] = default
            }, new float?[] { 123.45F }, new bool?[] { true }, new CollectionItem[]
            {
default
            }, new string[] { "<requiredNullableStringList>" }, new int[] { 1234 });
            Response<RoundTripPrimitiveModel> response = await client.InputToRoundTripPrimitiveAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTripPrimitive_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredNullableInt = 1234,
                requiredNullableString = "<requiredNullableString>",
                nonRequiredNullableInt = 1234,
                nonRequiredNullableString = "<nonRequiredNullableString>",
                requiredModel = new object(),
                requiredIntList = new object[]
            {
1234
            },
                requiredStringList = new object[]
            {
"<requiredStringList>"
            },
                requiredModelList = new object[]
            {
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new object[]
{
null
},
},
},
}
            },
                requiredModelRecord = new { },
                requiredCollectionWithNullableFloatElement = new object[]
            {
123.45F
            },
                requiredCollectionWithNullableBooleanElement = new object[]
            {
true
            },
                requiredNullableModelList = new object[]
            {
null
            },
                requiredNullableStringList = new object[]
            {
"<requiredNullableStringList>"
            },
                requiredNullableIntList = new object[]
            {
1234
            },
                nonRequiredModelList = new object[]
            {
null
            },
                nonRequiredStringList = new object[]
            {
"<nonRequiredStringList>"
            },
                nonRequiredIntList = new object[]
            {
1234
            },
                nonRequiredNullableModelList = new object[]
            {
null
            },
                nonRequiredNullableStringList = new object[]
            {
"<nonRequiredNullableStringList>"
            },
                nonRequiredNullableIntList = new object[]
            {
1234
            },
            });
            Response response = client.InputToRoundTripPrimitive(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("requiredString").ToString());
            Console.WriteLine(element.GetProperty("requiredInt").ToString());
            Console.WriteLine(element.GetProperty("requiredInt64").ToString());
            Console.WriteLine(element.GetProperty("requiredSafeInt").ToString());
            Console.WriteLine(element.GetProperty("requiredFloat").ToString());
            Console.WriteLine(element.GetProperty("required_Double").ToString());
            Console.WriteLine(element.GetProperty("requiredBoolean").ToString());
            Console.WriteLine(element.GetProperty("requiredDateTimeOffset").ToString());
            Console.WriteLine(element.GetProperty("requiredTimeSpan").ToString());
            Console.WriteLine(element.GetProperty("requiredCollectionWithNullableFloatElement")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTripPrimitive_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredNullableInt = 1234,
                requiredNullableString = "<requiredNullableString>",
                nonRequiredNullableInt = 1234,
                nonRequiredNullableString = "<nonRequiredNullableString>",
                requiredModel = new object(),
                requiredIntList = new object[]
            {
1234
            },
                requiredStringList = new object[]
            {
"<requiredStringList>"
            },
                requiredModelList = new object[]
            {
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new object[]
{
null
},
},
},
}
            },
                requiredModelRecord = new { },
                requiredCollectionWithNullableFloatElement = new object[]
            {
123.45F
            },
                requiredCollectionWithNullableBooleanElement = new object[]
            {
true
            },
                requiredNullableModelList = new object[]
            {
null
            },
                requiredNullableStringList = new object[]
            {
"<requiredNullableStringList>"
            },
                requiredNullableIntList = new object[]
            {
1234
            },
                nonRequiredModelList = new object[]
            {
null
            },
                nonRequiredStringList = new object[]
            {
"<nonRequiredStringList>"
            },
                nonRequiredIntList = new object[]
            {
1234
            },
                nonRequiredNullableModelList = new object[]
            {
null
            },
                nonRequiredNullableStringList = new object[]
            {
"<nonRequiredNullableStringList>"
            },
                nonRequiredNullableIntList = new object[]
            {
1234
            },
            });
            Response response = await client.InputToRoundTripPrimitiveAsync(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("requiredString").ToString());
            Console.WriteLine(element.GetProperty("requiredInt").ToString());
            Console.WriteLine(element.GetProperty("requiredInt64").ToString());
            Console.WriteLine(element.GetProperty("requiredSafeInt").ToString());
            Console.WriteLine(element.GetProperty("requiredFloat").ToString());
            Console.WriteLine(element.GetProperty("required_Double").ToString());
            Console.WriteLine(element.GetProperty("requiredBoolean").ToString());
            Console.WriteLine(element.GetProperty("requiredDateTimeOffset").ToString());
            Console.WriteLine(element.GetProperty("requiredTimeSpan").ToString());
            Console.WriteLine(element.GetProperty("requiredCollectionWithNullableFloatElement")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTripPrimitive_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            InputModel input = new InputModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new BaseModel(), default, new int[] { 1234 }, new string[] { "<requiredStringList>" }, new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>
{
["key"] = new RecordItem(new CollectionItem[]
{
default
})
})
            }, new Dictionary<string, RecordItem>
            {
                ["key"] = default
            }, new float?[] { 123.45F }, new bool?[] { true }, new CollectionItem[]
            {
default
            }, new string[] { "<requiredNullableStringList>" }, new int[] { 1234 })
            {
                NonRequiredNullableInt = 1234,
                NonRequiredNullableString = "<nonRequiredNullableString>",
                NonRequiredModelList = { default },
                NonRequiredStringList = { "<nonRequiredStringList>" },
                NonRequiredIntList = { 1234 },
                NonRequiredNullableModelList = { default },
                NonRequiredNullableStringList = { "<nonRequiredNullableStringList>" },
                NonRequiredNullableIntList = { 1234 },
            };
            Response<RoundTripPrimitiveModel> response = client.InputToRoundTripPrimitive(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTripPrimitive_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            InputModel input = new InputModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new BaseModel(), default, new int[] { 1234 }, new string[] { "<requiredStringList>" }, new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>
{
["key"] = new RecordItem(new CollectionItem[]
{
default
})
})
            }, new Dictionary<string, RecordItem>
            {
                ["key"] = default
            }, new float?[] { 123.45F }, new bool?[] { true }, new CollectionItem[]
            {
default
            }, new string[] { "<requiredNullableStringList>" }, new int[] { 1234 })
            {
                NonRequiredNullableInt = 1234,
                NonRequiredNullableString = "<nonRequiredNullableString>",
                NonRequiredModelList = { default },
                NonRequiredStringList = { "<nonRequiredStringList>" },
                NonRequiredIntList = { 1234 },
                NonRequiredNullableModelList = { default },
                NonRequiredNullableStringList = { "<nonRequiredNullableStringList>" },
                NonRequiredNullableIntList = { 1234 },
            };
            Response<RoundTripPrimitiveModel> response = await client.InputToRoundTripPrimitiveAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTripOptional_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new object());
            Response response = client.InputToRoundTripOptional(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTripOptional_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.InputToRoundTripOptionalAsync(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTripOptional_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripOptionalModel input = new RoundTripOptionalModel();
            Response<RoundTripOptionalModel> response = client.InputToRoundTripOptional(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTripOptional_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripOptionalModel input = new RoundTripOptionalModel();
            Response<RoundTripOptionalModel> response = await client.InputToRoundTripOptionalAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTripOptional_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                optionalString = "<optionalString>",
                optionalInt = 1234,
                optionalStringList = new object[]
            {
"<optionalStringList>"
            },
                optionalIntList = new object[]
            {
1234
            },
                optionalModelList = new object[]
            {
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new object[]
{
null
},
},
},
}
            },
                optionalModel = new
                {
                    requiredList = new object[]
            {
null
            },
                },
                optionalModelWithPropertiesOnBase = new
                {
                    requiredList = new object[]
            {
null
            },
                    optionalPropertyOnBase = "<optionalPropertyOnBase>",
                },
                optionalFixedStringEnum = "1",
                optionalExtensibleEnum = "1",
                optionalIntRecord = new
                {
                    key = 1234,
                },
                optionalStringRecord = new
                {
                    key = "<optionalStringRecord>",
                },
                optionalModelRecord = new { },
                optionalPlainDate = "2022-05-10",
                optionalPlainTime = "01:23:45",
                optionalCollectionWithNullableIntElement = new object[]
            {
1234
            },
            });
            Response response = client.InputToRoundTripOptional(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("optionalString").ToString());
            Console.WriteLine(element.GetProperty("optionalInt").ToString());
            Console.WriteLine(element.GetProperty("optionalStringList")[0].ToString());
            Console.WriteLine(element.GetProperty("optionalIntList")[0].ToString());
            Console.WriteLine(element.GetProperty("optionalModelWithPropertiesOnBase").GetProperty("optionalPropertyOnBase").ToString());
            Console.WriteLine(element.GetProperty("optionalFixedStringEnum").ToString());
            Console.WriteLine(element.GetProperty("optionalExtensibleEnum").ToString());
            Console.WriteLine(element.GetProperty("optionalIntRecord").GetProperty("<key>").ToString());
            Console.WriteLine(element.GetProperty("optionalStringRecord").GetProperty("<key>").ToString());
            Console.WriteLine(element.GetProperty("optionalPlainDate").ToString());
            Console.WriteLine(element.GetProperty("optionalPlainTime").ToString());
            Console.WriteLine(element.GetProperty("optionalCollectionWithNullableIntElement")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTripOptional_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                optionalString = "<optionalString>",
                optionalInt = 1234,
                optionalStringList = new object[]
            {
"<optionalStringList>"
            },
                optionalIntList = new object[]
            {
1234
            },
                optionalModelList = new object[]
            {
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new object[]
{
null
},
},
},
}
            },
                optionalModel = new
                {
                    requiredList = new object[]
            {
null
            },
                },
                optionalModelWithPropertiesOnBase = new
                {
                    requiredList = new object[]
            {
null
            },
                    optionalPropertyOnBase = "<optionalPropertyOnBase>",
                },
                optionalFixedStringEnum = "1",
                optionalExtensibleEnum = "1",
                optionalIntRecord = new
                {
                    key = 1234,
                },
                optionalStringRecord = new
                {
                    key = "<optionalStringRecord>",
                },
                optionalModelRecord = new { },
                optionalPlainDate = "2022-05-10",
                optionalPlainTime = "01:23:45",
                optionalCollectionWithNullableIntElement = new object[]
            {
1234
            },
            });
            Response response = await client.InputToRoundTripOptionalAsync(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("optionalString").ToString());
            Console.WriteLine(element.GetProperty("optionalInt").ToString());
            Console.WriteLine(element.GetProperty("optionalStringList")[0].ToString());
            Console.WriteLine(element.GetProperty("optionalIntList")[0].ToString());
            Console.WriteLine(element.GetProperty("optionalModelWithPropertiesOnBase").GetProperty("optionalPropertyOnBase").ToString());
            Console.WriteLine(element.GetProperty("optionalFixedStringEnum").ToString());
            Console.WriteLine(element.GetProperty("optionalExtensibleEnum").ToString());
            Console.WriteLine(element.GetProperty("optionalIntRecord").GetProperty("<key>").ToString());
            Console.WriteLine(element.GetProperty("optionalStringRecord").GetProperty("<key>").ToString());
            Console.WriteLine(element.GetProperty("optionalPlainDate").ToString());
            Console.WriteLine(element.GetProperty("optionalPlainTime").ToString());
            Console.WriteLine(element.GetProperty("optionalCollectionWithNullableIntElement")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputToRoundTripOptional_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripOptionalModel input = new RoundTripOptionalModel
            {
                OptionalString = "<optionalString>",
                OptionalInt = 1234,
                OptionalStringList = { "<optionalStringList>" },
                OptionalIntList = { 1234 },
                OptionalModelList = {new CollectionItem(new Dictionary<string, RecordItem>
{
["key"] = new RecordItem(new CollectionItem[]
{
default
})
})},
                OptionalModel = new DerivedModel(new CollectionItem[]
            {
default
            }),
                OptionalModelWithPropertiesOnBase = new DerivedModelWithProperties(new CollectionItem[]
            {
default
            }),
                OptionalFixedStringEnum = FixedStringEnum.One,
                OptionalExtensibleEnum = ExtensibleEnum.One,
                OptionalIntRecord =
{
["key"] = 1234
},
                OptionalStringRecord =
{
["key"] = "<optionalStringRecord>"
},
                OptionalModelRecord =
{
["key"] = default
},
                OptionalPlainDate = DateTimeOffset.Parse("2022-05-10"),
                OptionalPlainTime = TimeSpan.Parse("01:23:45"),
                OptionalCollectionWithNullableIntElement = { 1234 },
            };
            Response<RoundTripOptionalModel> response = client.InputToRoundTripOptional(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputToRoundTripOptional_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripOptionalModel input = new RoundTripOptionalModel
            {
                OptionalString = "<optionalString>",
                OptionalInt = 1234,
                OptionalStringList = { "<optionalStringList>" },
                OptionalIntList = { 1234 },
                OptionalModelList = {new CollectionItem(new Dictionary<string, RecordItem>
{
["key"] = new RecordItem(new CollectionItem[]
{
default
})
})},
                OptionalModel = new DerivedModel(new CollectionItem[]
            {
default
            }),
                OptionalModelWithPropertiesOnBase = new DerivedModelWithProperties(new CollectionItem[]
            {
default
            }),
                OptionalFixedStringEnum = FixedStringEnum.One,
                OptionalExtensibleEnum = ExtensibleEnum.One,
                OptionalIntRecord =
{
["key"] = 1234
},
                OptionalStringRecord =
{
["key"] = "<optionalStringRecord>"
},
                OptionalModelRecord =
{
["key"] = default
},
                OptionalPlainDate = DateTimeOffset.Parse("2022-05-10"),
                OptionalPlainTime = TimeSpan.Parse("01:23:45"),
                OptionalCollectionWithNullableIntElement = { 1234 },
            };
            Response<RoundTripOptionalModel> response = await client.InputToRoundTripOptionalAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripToOutput_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredNullableInt = 1234,
                requiredNullableString = "<requiredNullableString>",
                requiredModel = new
                {
                    requiredString = "<requiredString>",
                    discriminatorProperty = "A",
                    requiredPropertyOnBase = 1234,
                },
                requiredFixedStringEnum = "1",
                requiredFixedIntEnum = 1,
                requiredExtensibleEnum = "1",
                requiredList = new object[]
            {
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new object[]
{
null
},
},
},
}
            },
                requiredIntRecord = new
                {
                    key = 1234,
                },
                requiredStringRecord = new
                {
                    key = "<requiredStringRecord>",
                },
                requiredModelRecord = new { },
                requiredBytes = new object(),
                requiredUint8Array = new object[]
            {
1234
            },
                requiredUnknown = new object(),
                requiredInt8Array = new object[]
            {
1234
            },
                requiredNullableIntList = new object[]
            {
1234
            },
                requiredNullableStringList = new object[]
            {
"<requiredNullableStringList>"
            },
            });
            Response response = client.RoundTripToOutput(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("requiredString").ToString());
            Console.WriteLine(element.GetProperty("requiredInt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripToOutput_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredNullableInt = 1234,
                requiredNullableString = "<requiredNullableString>",
                requiredModel = new
                {
                    requiredString = "<requiredString>",
                    discriminatorProperty = "A",
                    requiredPropertyOnBase = 1234,
                },
                requiredFixedStringEnum = "1",
                requiredFixedIntEnum = 1,
                requiredExtensibleEnum = "1",
                requiredList = new object[]
            {
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new object[]
{
null
},
},
},
}
            },
                requiredIntRecord = new
                {
                    key = 1234,
                },
                requiredStringRecord = new
                {
                    key = "<requiredStringRecord>",
                },
                requiredModelRecord = new { },
                requiredBytes = new object(),
                requiredUint8Array = new object[]
            {
1234
            },
                requiredUnknown = new object(),
                requiredInt8Array = new object[]
            {
1234
            },
                requiredNullableIntList = new object[]
            {
1234
            },
                requiredNullableStringList = new object[]
            {
"<requiredNullableStringList>"
            },
            });
            Response response = await client.RoundTripToOutputAsync(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("requiredString").ToString());
            Console.WriteLine(element.GetProperty("requiredInt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripToOutput_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripModel input = new RoundTripModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new DerivedModelWithDiscriminatorA(1234, "<requiredString>"), FixedStringEnum.One, FixedIntEnum.One, ExtensibleEnum.One, new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>
{
["key"] = new RecordItem(new CollectionItem[]
{
default
})
})
            }, new Dictionary<string, int>
            {
                ["key"] = 1234
            }, new Dictionary<string, string>
            {
                ["key"] = "<requiredStringRecord>"
            }, new Dictionary<string, RecordItem>
            {
                ["key"] = default
            }, BinaryData.FromObjectAsJson(new object()), new int[] { 1234 }, BinaryData.FromObjectAsJson(new object()), new int[] { 1234 }, new int[] { 1234 }, new string[] { "<requiredNullableStringList>" });
            Response<OutputModel> response = client.RoundTripToOutput(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripToOutput_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripModel input = new RoundTripModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new DerivedModelWithDiscriminatorA(1234, "<requiredString>"), FixedStringEnum.One, FixedIntEnum.One, ExtensibleEnum.One, new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>
{
["key"] = new RecordItem(new CollectionItem[]
{
default
})
})
            }, new Dictionary<string, int>
            {
                ["key"] = 1234
            }, new Dictionary<string, string>
            {
                ["key"] = "<requiredStringRecord>"
            }, new Dictionary<string, RecordItem>
            {
                ["key"] = default
            }, BinaryData.FromObjectAsJson(new object()), new int[] { 1234 }, BinaryData.FromObjectAsJson(new object()), new int[] { 1234 }, new int[] { 1234 }, new string[] { "<requiredNullableStringList>" });
            Response<OutputModel> response = await client.RoundTripToOutputAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripToOutput_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                nonRequiredString = "<nonRequiredString>",
                nonRequiredInt = 1234,
                requiredNullableInt = 1234,
                requiredNullableString = "<requiredNullableString>",
                nonRequiredNullableInt = 1234,
                nonRequiredNullableString = "<nonRequiredNullableString>",
                requiredModel = new
                {
                    requiredString = "<requiredString>",
                    discriminatorProperty = "A",
                    optionalPropertyOnBase = "<optionalPropertyOnBase>",
                    requiredPropertyOnBase = 1234,
                },
                requiredFixedStringEnum = "1",
                requiredFixedIntEnum = 1,
                requiredExtensibleEnum = "1",
                requiredList = new object[]
            {
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new object[]
{
null
},
},
},
}
            },
                requiredIntRecord = new
                {
                    key = 1234,
                },
                requiredStringRecord = new
                {
                    key = "<requiredStringRecord>",
                },
                requiredModelRecord = new { },
                requiredBytes = new object(),
                optionalBytes = new object(),
                requiredUint8Array = new object[]
            {
1234
            },
                optionalUint8Array = new object[]
            {
1234
            },
                requiredUnknown = new object(),
                optionalUnknown = new object(),
                requiredInt8Array = new object[]
            {
1234
            },
                optionalInt8Array = new object[]
            {
1234
            },
                requiredNullableIntList = new object[]
            {
1234
            },
                requiredNullableStringList = new object[]
            {
"<requiredNullableStringList>"
            },
                nonRequiredNullableIntList = new object[]
            {
1234
            },
                nonRequiredNullableStringList = new object[]
            {
"<nonRequiredNullableStringList>"
            },
            });
            Response response = client.RoundTripToOutput(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("requiredString").ToString());
            Console.WriteLine(element.GetProperty("requiredInt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripToOutput_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                nonRequiredString = "<nonRequiredString>",
                nonRequiredInt = 1234,
                requiredNullableInt = 1234,
                requiredNullableString = "<requiredNullableString>",
                nonRequiredNullableInt = 1234,
                nonRequiredNullableString = "<nonRequiredNullableString>",
                requiredModel = new
                {
                    requiredString = "<requiredString>",
                    discriminatorProperty = "A",
                    optionalPropertyOnBase = "<optionalPropertyOnBase>",
                    requiredPropertyOnBase = 1234,
                },
                requiredFixedStringEnum = "1",
                requiredFixedIntEnum = 1,
                requiredExtensibleEnum = "1",
                requiredList = new object[]
            {
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new object[]
{
null
},
},
},
}
            },
                requiredIntRecord = new
                {
                    key = 1234,
                },
                requiredStringRecord = new
                {
                    key = "<requiredStringRecord>",
                },
                requiredModelRecord = new { },
                requiredBytes = new object(),
                optionalBytes = new object(),
                requiredUint8Array = new object[]
            {
1234
            },
                optionalUint8Array = new object[]
            {
1234
            },
                requiredUnknown = new object(),
                optionalUnknown = new object(),
                requiredInt8Array = new object[]
            {
1234
            },
                optionalInt8Array = new object[]
            {
1234
            },
                requiredNullableIntList = new object[]
            {
1234
            },
                requiredNullableStringList = new object[]
            {
"<requiredNullableStringList>"
            },
                nonRequiredNullableIntList = new object[]
            {
1234
            },
                nonRequiredNullableStringList = new object[]
            {
"<nonRequiredNullableStringList>"
            },
            });
            Response response = await client.RoundTripToOutputAsync(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("requiredString").ToString());
            Console.WriteLine(element.GetProperty("requiredInt").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripToOutput_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripModel input = new RoundTripModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new DerivedModelWithDiscriminatorA(1234, "<requiredString>")
            {
                OptionalPropertyOnBase = "<optionalPropertyOnBase>",
            }, FixedStringEnum.One, FixedIntEnum.One, ExtensibleEnum.One, new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>
{
["key"] = new RecordItem(new CollectionItem[]
{
default
})
})
            }, new Dictionary<string, int>
            {
                ["key"] = 1234
            }, new Dictionary<string, string>
            {
                ["key"] = "<requiredStringRecord>"
            }, new Dictionary<string, RecordItem>
            {
                ["key"] = default
            }, BinaryData.FromObjectAsJson(new object()), new int[] { 1234 }, BinaryData.FromObjectAsJson(new object()), new int[] { 1234 }, new int[] { 1234 }, new string[] { "<requiredNullableStringList>" })
            {
                NonRequiredString = "<nonRequiredString>",
                NonRequiredInt = 1234,
                NonRequiredNullableInt = 1234,
                NonRequiredNullableString = "<nonRequiredNullableString>",
                OptionalBytes = BinaryData.FromObjectAsJson(new object()),
                OptionalUint8Array = { 1234 },
                OptionalUnknown = BinaryData.FromObjectAsJson(new object()),
                OptionalInt8Array = { 1234 },
                NonRequiredNullableIntList = { 1234 },
                NonRequiredNullableStringList = { "<nonRequiredNullableStringList>" },
            };
            Response<OutputModel> response = client.RoundTripToOutput(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripToOutput_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripModel input = new RoundTripModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new DerivedModelWithDiscriminatorA(1234, "<requiredString>")
            {
                OptionalPropertyOnBase = "<optionalPropertyOnBase>",
            }, FixedStringEnum.One, FixedIntEnum.One, ExtensibleEnum.One, new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>
{
["key"] = new RecordItem(new CollectionItem[]
{
default
})
})
            }, new Dictionary<string, int>
            {
                ["key"] = 1234
            }, new Dictionary<string, string>
            {
                ["key"] = "<requiredStringRecord>"
            }, new Dictionary<string, RecordItem>
            {
                ["key"] = default
            }, BinaryData.FromObjectAsJson(new object()), new int[] { 1234 }, BinaryData.FromObjectAsJson(new object()), new int[] { 1234 }, new int[] { 1234 }, new string[] { "<requiredNullableStringList>" })
            {
                NonRequiredString = "<nonRequiredString>",
                NonRequiredInt = 1234,
                NonRequiredNullableInt = 1234,
                NonRequiredNullableString = "<nonRequiredNullableString>",
                OptionalBytes = BinaryData.FromObjectAsJson(new object()),
                OptionalUint8Array = { 1234 },
                OptionalUnknown = BinaryData.FromObjectAsJson(new object()),
                OptionalInt8Array = { 1234 },
                NonRequiredNullableIntList = { 1234 },
                NonRequiredNullableStringList = { "<nonRequiredNullableStringList>" },
            };
            Response<OutputModel> response = await client.RoundTripToOutputAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputRecursive_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                message = "<message>",
            });
            Response response = client.InputRecursive(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputRecursive_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                message = "<message>",
            });
            Response response = await client.InputRecursiveAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputRecursive_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            InputRecursiveModel input = new InputRecursiveModel("<message>");
            Response response = client.InputRecursive(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputRecursive_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            InputRecursiveModel input = new InputRecursiveModel("<message>");
            Response response = await client.InputRecursiveAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputRecursive_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                message = "<message>",
            });
            Response response = client.InputRecursive(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputRecursive_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                message = "<message>",
            });
            Response response = await client.InputRecursiveAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_InputRecursive_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            InputRecursiveModel input = new InputRecursiveModel("<message>")
            {
                Inner = default,
            };
            Response response = client.InputRecursive(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_InputRecursive_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            InputRecursiveModel input = new InputRecursiveModel("<message>")
            {
                Inner = default,
            };
            Response response = await client.InputRecursiveAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripRecursive_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                message = "<message>",
            });
            Response response = client.RoundTripRecursive(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripRecursive_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                message = "<message>",
            });
            Response response = await client.RoundTripRecursiveAsync(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripRecursive_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripRecursiveModel input = new RoundTripRecursiveModel("<message>");
            Response<RoundTripRecursiveModel> response = client.RoundTripRecursive(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripRecursive_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripRecursiveModel input = new RoundTripRecursiveModel("<message>");
            Response<RoundTripRecursiveModel> response = await client.RoundTripRecursiveAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripRecursive_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                message = "<message>",
            });
            Response response = client.RoundTripRecursive(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("message").ToString());
            Console.WriteLine(element.GetProperty("inner").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripRecursive_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                message = "<message>",
            });
            Response response = await client.RoundTripRecursiveAsync(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("message").ToString());
            Console.WriteLine(element.GetProperty("inner").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripRecursive_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripRecursiveModel input = new RoundTripRecursiveModel("<message>")
            {
                Inner = default,
            };
            Response<RoundTripRecursiveModel> response = client.RoundTripRecursive(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripRecursive_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripRecursiveModel input = new RoundTripRecursiveModel("<message>")
            {
                Inner = default,
            };
            Response<RoundTripRecursiveModel> response = await client.RoundTripRecursiveAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SelfReference_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = client.SelfReference(null);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SelfReference_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = await client.SelfReferenceAsync(null);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SelfReference_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<ErrorModel> response = client.SelfReference();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SelfReference_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<ErrorModel> response = await client.SelfReferenceAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SelfReference_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = client.SelfReference(null);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("message").ToString());
            Console.WriteLine(element.GetProperty("innerError").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SelfReference_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = await client.SelfReferenceAsync(null);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("message").ToString());
            Console.WriteLine(element.GetProperty("innerError").GetProperty("message").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SelfReference_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<ErrorModel> response = client.SelfReference();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SelfReference_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<ErrorModel> response = await client.SelfReferenceAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripToOutputWithNoUseBase_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredList = new object[]
            {
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new object[]
{
null
},
},
},
}
            },
                baseModelProp = "<baseModelProp>",
            });
            Response response = client.RoundTripToOutputWithNoUseBase(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("baseModelProp").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripToOutputWithNoUseBase_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredList = new object[]
            {
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new object[]
{
null
},
},
},
}
            },
                baseModelProp = "<baseModelProp>",
            });
            Response response = await client.RoundTripToOutputWithNoUseBaseAsync(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("baseModelProp").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripToOutputWithNoUseBase_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripOnNoUse input = new RoundTripOnNoUse("<baseModelProp>", new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>
{
["key"] = new RecordItem(new CollectionItem[]
{
default
})
})
            });
            Response<RoundTripOnNoUse> response = client.RoundTripToOutputWithNoUseBase(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripToOutputWithNoUseBase_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripOnNoUse input = new RoundTripOnNoUse("<baseModelProp>", new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>
{
["key"] = new RecordItem(new CollectionItem[]
{
default
})
})
            });
            Response<RoundTripOnNoUse> response = await client.RoundTripToOutputWithNoUseBaseAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripToOutputWithNoUseBase_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredList = new object[]
            {
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new object[]
{
null
},
},
},
}
            },
                baseModelProp = "<baseModelProp>",
            });
            Response response = client.RoundTripToOutputWithNoUseBase(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("baseModelProp").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripToOutputWithNoUseBase_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredList = new object[]
            {
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new object[]
{
null
},
},
},
}
            },
                baseModelProp = "<baseModelProp>",
            });
            Response response = await client.RoundTripToOutputWithNoUseBaseAsync(content);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("baseModelProp").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoundTripToOutputWithNoUseBase_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripOnNoUse input = new RoundTripOnNoUse("<baseModelProp>", new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>
{
["key"] = new RecordItem(new CollectionItem[]
{
default
})
})
            });
            Response<RoundTripOnNoUse> response = client.RoundTripToOutputWithNoUseBase(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoundTripToOutputWithNoUseBase_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RoundTripOnNoUse input = new RoundTripOnNoUse("<baseModelProp>", new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>
{
["key"] = new RecordItem(new CollectionItem[]
{
default
})
})
            });
            Response<RoundTripOnNoUse> response = await client.RoundTripToOutputWithNoUseBaseAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversation_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = client.AnalyzeConversation(null);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("discriminatorProperty").ToString());
            Console.WriteLine(element.GetProperty("requiredPropertyOnBase").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversation_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = await client.AnalyzeConversationAsync(null);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("discriminatorProperty").ToString());
            Console.WriteLine(element.GetProperty("requiredPropertyOnBase").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversation_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<BaseModelWithDiscriminator> response = client.AnalyzeConversation();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversation_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<BaseModelWithDiscriminator> response = await client.AnalyzeConversationAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversation_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = client.AnalyzeConversation(null);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("discriminatorProperty").ToString());
            Console.WriteLine(element.GetProperty("optionalPropertyOnBase").ToString());
            Console.WriteLine(element.GetProperty("requiredPropertyOnBase").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversation_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = await client.AnalyzeConversationAsync(null);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("discriminatorProperty").ToString());
            Console.WriteLine(element.GetProperty("optionalPropertyOnBase").ToString());
            Console.WriteLine(element.GetProperty("requiredPropertyOnBase").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnalyzeConversation_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<BaseModelWithDiscriminator> response = client.AnalyzeConversation();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnalyzeConversation_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<BaseModelWithDiscriminator> response = await client.AnalyzeConversationAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSingleBase_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = client.GetSingleBase(null);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("kind").ToString());
            Console.WriteLine(element.GetProperty("size").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSingleBase_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = await client.GetSingleBaseAsync(null);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("kind").ToString());
            Console.WriteLine(element.GetProperty("size").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSingleBase_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<SingleBase> response = client.GetSingleBase();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSingleBase_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<SingleBase> response = await client.GetSingleBaseAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSingleBase_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = client.GetSingleBase(null);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("kind").ToString());
            Console.WriteLine(element.GetProperty("size").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSingleBase_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response response = await client.GetSingleBaseAsync(null);

            JsonElement element = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(element.GetProperty("kind").ToString());
            Console.WriteLine(element.GetProperty("size").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSingleBase_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<SingleBase> response = client.GetSingleBase();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSingleBase_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Response<SingleBase> response = await client.GetSingleBaseAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GenericType_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                kind = "Int32Values",
                values = new object[]
            {
1234
            },
                value = 1234,
                field = "<field>",
            });
            Response response = client.GenericType(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GenericType_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                kind = "Int32Values",
                values = new object[]
            {
1234
            },
                value = 1234,
                field = "<field>",
            });
            Response response = await client.GenericTypeAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GenericType_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Int32ValuesFacet input = new Int32ValuesFacet("<field>", new int[] { 1234 }, 1234);
            Response response = client.GenericType(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GenericType_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Int32ValuesFacet input = new Int32ValuesFacet("<field>", new int[] { 1234 }, 1234);
            Response response = await client.GenericTypeAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GenericType_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                kind = "Int32Values",
                values = new object[]
            {
1234
            },
                value = 1234,
                field = "<field>",
            });
            Response response = client.GenericType(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GenericType_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                kind = "Int32Values",
                values = new object[]
            {
1234
            },
                value = 1234,
                field = "<field>",
            });
            Response response = await client.GenericTypeAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GenericType_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Int32ValuesFacet input = new Int32ValuesFacet("<field>", new int[] { 1234 }, 1234);
            Response response = client.GenericType(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GenericType_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

            Int32ValuesFacet input = new Int32ValuesFacet("<field>", new int[] { 1234 }, 1234);
            Response response = await client.GenericTypeAsync(input);
        }
    }
}
