// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace ModelsTypeSpec.Models
{
    /// <summary> A derived class in the discriminated set inheriting from a base whose discriminator property comes from is keyword. </summary>
    public partial class DerivedWithDiscriminatorFromIsKeyword : BaseModelWithDiscriminatorFromIsKeyword
    {
        /// <summary> Initializes a new instance of <see cref="DerivedWithDiscriminatorFromIsKeyword"/>. </summary>
        /// <param name="requiredString"> Required string. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredString"/> is null. </exception>
        public DerivedWithDiscriminatorFromIsKeyword(string requiredString)
        {
            Argument.AssertNotNull(requiredString, nameof(requiredString));

            Kind = "A";
            RequiredString = requiredString;
        }

        /// <summary> Initializes a new instance of <see cref="DerivedWithDiscriminatorFromIsKeyword"/>. </summary>
        /// <param name="kind"> Required kind. </param>
        /// <param name="optionalString"> Optional string. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="requiredString"> Required string. </param>
        /// <param name="optionalInt"> Optional int. </param>
        internal DerivedWithDiscriminatorFromIsKeyword(string kind, string optionalString, IDictionary<string, BinaryData> serializedAdditionalRawData, string requiredString, int? optionalInt) : base(kind, optionalString, serializedAdditionalRawData)
        {
            RequiredString = requiredString;
            OptionalInt = optionalInt;
        }

        /// <summary> Initializes a new instance of <see cref="DerivedWithDiscriminatorFromIsKeyword"/> for deserialization. </summary>
        internal DerivedWithDiscriminatorFromIsKeyword()
        {
        }

        /// <summary> Required string. </summary>
        public string RequiredString { get; set; }
        /// <summary> Optional int. </summary>
        public int? OptionalInt { get; set; }
    }
}
