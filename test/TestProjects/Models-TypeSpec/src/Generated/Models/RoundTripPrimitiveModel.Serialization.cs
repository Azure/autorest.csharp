// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace ModelsTypeSpec.Models
{
    public partial class RoundTripPrimitiveModel : IUtf8JsonSerializable, IModelJsonSerializable<RoundTripPrimitiveModel>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<RoundTripPrimitiveModel>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<RoundTripPrimitiveModel>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<RoundTripPrimitiveModel>(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("requiredString"u8);
            writer.WriteStringValue(RequiredString);
            writer.WritePropertyName("requiredInt"u8);
            writer.WriteNumberValue(RequiredInt);
            writer.WritePropertyName("requiredInt64"u8);
            writer.WriteNumberValue(RequiredInt64);
            writer.WritePropertyName("requiredSafeInt"u8);
            writer.WriteNumberValue(RequiredSafeInt);
            writer.WritePropertyName("requiredFloat"u8);
            writer.WriteNumberValue(RequiredFloat);
            writer.WritePropertyName("required_Double"u8);
            writer.WriteNumberValue(RequiredDouble);
            writer.WritePropertyName("requiredBoolean"u8);
            writer.WriteBooleanValue(RequiredBoolean);
            writer.WritePropertyName("requiredDateTimeOffset"u8);
            writer.WriteStringValue(RequiredDateTimeOffset, "O");
            writer.WritePropertyName("requiredTimeSpan"u8);
            writer.WriteStringValue(RequiredTimeSpan, "P");
            writer.WritePropertyName("requiredCollectionWithNullableFloatElement"u8);
            writer.WriteStartArray();
            foreach (var item in RequiredCollectionWithNullableFloatElement)
            {
                if (item == null)
                {
                    writer.WriteNullValue();
                    continue;
                }
                writer.WriteNumberValue(item.Value);
            }
            writer.WriteEndArray();
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static RoundTripPrimitiveModel DeserializeRoundTripPrimitiveModel(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string requiredString = default;
            int requiredInt = default;
            long requiredInt64 = default;
            long requiredSafeInt = default;
            float requiredFloat = default;
            double requiredDouble = default;
            bool requiredBoolean = default;
            DateTimeOffset requiredDateTimeOffset = default;
            TimeSpan requiredTimeSpan = default;
            IList<float?> requiredCollectionWithNullableFloatElement = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("requiredString"u8))
                {
                    requiredString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("requiredInt"u8))
                {
                    requiredInt = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("requiredInt64"u8))
                {
                    requiredInt64 = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("requiredSafeInt"u8))
                {
                    requiredSafeInt = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("requiredFloat"u8))
                {
                    requiredFloat = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("required_Double"u8))
                {
                    requiredDouble = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("requiredBoolean"u8))
                {
                    requiredBoolean = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("requiredDateTimeOffset"u8))
                {
                    requiredDateTimeOffset = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("requiredTimeSpan"u8))
                {
                    requiredTimeSpan = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("requiredCollectionWithNullableFloatElement"u8))
                {
                    List<float?> array = new List<float?>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetSingle());
                        }
                    }
                    requiredCollectionWithNullableFloatElement = array;
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new RoundTripPrimitiveModel(requiredString, requiredInt, requiredInt64, requiredSafeInt, requiredFloat, requiredDouble, requiredBoolean, requiredDateTimeOffset, requiredTimeSpan, requiredCollectionWithNullableFloatElement, rawData);
        }

        RoundTripPrimitiveModel IModelJsonSerializable<RoundTripPrimitiveModel>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<RoundTripPrimitiveModel>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeRoundTripPrimitiveModel(doc.RootElement, options);
        }

        BinaryData IModelSerializable<RoundTripPrimitiveModel>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<RoundTripPrimitiveModel>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        RoundTripPrimitiveModel IModelSerializable<RoundTripPrimitiveModel>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<RoundTripPrimitiveModel>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeRoundTripPrimitiveModel(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="RoundTripPrimitiveModel"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="RoundTripPrimitiveModel"/> to convert. </param>
        public static implicit operator RequestContent(RoundTripPrimitiveModel model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="RoundTripPrimitiveModel"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator RoundTripPrimitiveModel(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeRoundTripPrimitiveModel(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
