<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetOutputDiscriminatorModelAsync(CancellationToken)">
      <example>
This sample shows how to call GetOutputDiscriminatorModelAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

Response<OutputBaseModelWithDiscriminator> response = await client.GetOutputDiscriminatorModelAsync();
]]></code></example>
    </member>
    <member name="GetOutputDiscriminatorModel(CancellationToken)">
      <example>
This sample shows how to call GetOutputDiscriminatorModel.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

Response<OutputBaseModelWithDiscriminator> response = client.GetOutputDiscriminatorModel();
]]></code></example>
    </member>
    <member name="GetOutputDiscriminatorModelAsync(RequestContext)">
      <example>
This sample shows how to call GetOutputDiscriminatorModelAsync with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

Response response = await client.GetOutputDiscriminatorModelAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
]]></code></example>
    </member>
    <member name="GetOutputDiscriminatorModel(RequestContext)">
      <example>
This sample shows how to call GetOutputDiscriminatorModel with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

Response response = client.GetOutputDiscriminatorModel(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
]]></code></example>
    </member>
    <member name="InputToRoundTripAsync(InputModel,CancellationToken)">
      <example>
This sample shows how to call InputToRoundTripAsync with required parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

InputModel input = new InputModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new BaseModel(), null, new int[]
{
1234
}, new string[]
{
"<requiredStringList>"
}, new CollectionItem[]
{
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new CollectionItem[]
{
null
}),
})
}, new Dictionary<string, RecordItem>()
{
    ["key"] = null,
}, new float?[]
{
123.45F
}, new bool?[]
{
true
}, new CollectionItem[]
{
null
}, new string[]
{
"<requiredNullableStringList>"
}, new int[]
{
1234
})
{
    NonRequiredNullableInt = 1234,
    NonRequiredNullableString = "<nonRequiredNullableString>",
    NonRequiredModelList =
{
null
},
    NonRequiredStringList =
{
"<nonRequiredStringList>"
},
    NonRequiredIntList =
{
1234
},
    NonRequiredNullableModelList =
{
null
},
    NonRequiredNullableStringList =
{
"<nonRequiredNullableStringList>"
},
    NonRequiredNullableIntList =
{
1234
},
};
Response<RoundTripModel> response = await client.InputToRoundTripAsync(input);
]]></code></example>
    </member>
    <member name="InputToRoundTrip(InputModel,CancellationToken)">
      <example>
This sample shows how to call InputToRoundTrip with required parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

InputModel input = new InputModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new BaseModel(), null, new int[]
{
1234
}, new string[]
{
"<requiredStringList>"
}, new CollectionItem[]
{
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new CollectionItem[]
{
null
}),
})
}, new Dictionary<string, RecordItem>()
{
    ["key"] = null,
}, new float?[]
{
123.45F
}, new bool?[]
{
true
}, new CollectionItem[]
{
null
}, new string[]
{
"<requiredNullableStringList>"
}, new int[]
{
1234
})
{
    NonRequiredNullableInt = 1234,
    NonRequiredNullableString = "<nonRequiredNullableString>",
    NonRequiredModelList =
{
null
},
    NonRequiredStringList =
{
"<nonRequiredStringList>"
},
    NonRequiredIntList =
{
1234
},
    NonRequiredNullableModelList =
{
null
},
    NonRequiredNullableStringList =
{
"<nonRequiredNullableStringList>"
},
    NonRequiredNullableIntList =
{
1234
},
};
Response<RoundTripModel> response = client.InputToRoundTrip(input);
]]></code></example>
    </member>
    <member name="InputToRoundTripAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call InputToRoundTripAsync with required request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["requiredString"] = "<requiredString>",
    ["requiredInt"] = 1234,
    ["requiredNullableInt"] = 1234,
    ["requiredNullableString"] = "<requiredNullableString>",
    ["requiredModel"] = new Dictionary<string, object>(),
    ["requiredModel2"] = null
,
    ["requiredIntList"] = new object[]
{
default
},
    ["requiredStringList"] = new object[]
{
default
},
    ["requiredModelList"] = new object[]
{
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
},
    ["requiredModelRecord"] = new Dictionary<string, object>()
    {
        ["key"] = null
,
    },
    ["requiredCollectionWithNullableFloatElement"] = new object[]
{
default
},
    ["requiredCollectionWithNullableBooleanElement"] = new object[]
{
default
},
    ["requiredNullableModelList"] = new object[]
{
null
},
    ["requiredNullableStringList"] = new object[]
{
default
},
    ["requiredNullableIntList"] = new object[]
{
default
},
});
Response response = await client.InputToRoundTripAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredNullableInt").ToString());
Console.WriteLine(result.GetProperty("requiredNullableString").ToString());
Console.WriteLine(result.GetProperty("requiredReadonlyInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("discriminatorProperty").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredPropertyOnBase").ToString());
Console.WriteLine(result.GetProperty("requiredFixedStringEnum").ToString());
Console.WriteLine(result.GetProperty("requiredFixedIntEnum").ToString());
Console.WriteLine(result.GetProperty("requiredExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("requiredIntRecord").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("requiredStringRecord").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("requiredBytes").ToString());
Console.WriteLine(result.GetProperty("requiredUint8Array")[0].ToString());
Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result.GetProperty("requiredInt8Array")[0].ToString());
Console.WriteLine(result.GetProperty("requiredNullableIntList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredNullableStringList")[0].ToString());
]]></code>
This sample shows how to call InputToRoundTripAsync with all request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["requiredString"] = "<requiredString>",
    ["requiredInt"] = 1234,
    ["requiredNullableInt"] = 1234,
    ["requiredNullableString"] = "<requiredNullableString>",
    ["nonRequiredNullableInt"] = 1234,
    ["nonRequiredNullableString"] = "<nonRequiredNullableString>",
    ["requiredModel"] = new Dictionary<string, object>(),
    ["requiredModel2"] = null
,
    ["requiredIntList"] = new object[]
{
default
},
    ["requiredStringList"] = new object[]
{
default
},
    ["requiredModelList"] = new object[]
{
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
},
    ["requiredModelRecord"] = new Dictionary<string, object>()
    {
        ["key"] = null
,
    },
    ["requiredCollectionWithNullableFloatElement"] = new object[]
{
default
},
    ["requiredCollectionWithNullableBooleanElement"] = new object[]
{
default
},
    ["requiredNullableModelList"] = new object[]
{
null
},
    ["requiredNullableStringList"] = new object[]
{
default
},
    ["requiredNullableIntList"] = new object[]
{
default
},
    ["nonRequiredModelList"] = new object[]
{
null
},
    ["nonRequiredStringList"] = new object[]
{
default
},
    ["nonRequiredIntList"] = new object[]
{
default
},
    ["nonRequiredNullableModelList"] = new object[]
{
null
},
    ["nonRequiredNullableStringList"] = new object[]
{
default
},
    ["nonRequiredNullableIntList"] = new object[]
{
default
},
});
Response response = await client.InputToRoundTripAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("nonRequiredString").ToString());
Console.WriteLine(result.GetProperty("nonRequiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredNullableInt").ToString());
Console.WriteLine(result.GetProperty("requiredNullableString").ToString());
Console.WriteLine(result.GetProperty("nonRequiredNullableInt").ToString());
Console.WriteLine(result.GetProperty("nonRequiredNullableString").ToString());
Console.WriteLine(result.GetProperty("requiredReadonlyInt").ToString());
Console.WriteLine(result.GetProperty("nonRequiredReadonlyInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("discriminatorProperty").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalPropertyOnBase").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredPropertyOnBase").ToString());
Console.WriteLine(result.GetProperty("requiredFixedStringEnum").ToString());
Console.WriteLine(result.GetProperty("requiredFixedIntEnum").ToString());
Console.WriteLine(result.GetProperty("requiredExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("requiredIntRecord").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("requiredStringRecord").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("requiredBytes").ToString());
Console.WriteLine(result.GetProperty("optionalBytes").ToString());
Console.WriteLine(result.GetProperty("requiredUint8Array")[0].ToString());
Console.WriteLine(result.GetProperty("optionalUint8Array")[0].ToString());
Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result.GetProperty("optionalUnknown").ToString());
Console.WriteLine(result.GetProperty("requiredInt8Array")[0].ToString());
Console.WriteLine(result.GetProperty("optionalInt8Array")[0].ToString());
Console.WriteLine(result.GetProperty("requiredNullableIntList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredNullableStringList")[0].ToString());
Console.WriteLine(result.GetProperty("nonRequiredNullableIntList")[0].ToString());
Console.WriteLine(result.GetProperty("nonRequiredNullableStringList")[0].ToString());
]]></code></example>
    </member>
    <member name="InputToRoundTrip(RequestContent,RequestContext)">
      <example>
This sample shows how to call InputToRoundTrip with required request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["requiredString"] = "<requiredString>",
    ["requiredInt"] = 1234,
    ["requiredNullableInt"] = 1234,
    ["requiredNullableString"] = "<requiredNullableString>",
    ["requiredModel"] = new Dictionary<string, object>(),
    ["requiredModel2"] = null
,
    ["requiredIntList"] = new object[]
{
default
},
    ["requiredStringList"] = new object[]
{
default
},
    ["requiredModelList"] = new object[]
{
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
},
    ["requiredModelRecord"] = new Dictionary<string, object>()
    {
        ["key"] = null
,
    },
    ["requiredCollectionWithNullableFloatElement"] = new object[]
{
default
},
    ["requiredCollectionWithNullableBooleanElement"] = new object[]
{
default
},
    ["requiredNullableModelList"] = new object[]
{
null
},
    ["requiredNullableStringList"] = new object[]
{
default
},
    ["requiredNullableIntList"] = new object[]
{
default
},
});
Response response = client.InputToRoundTrip(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredNullableInt").ToString());
Console.WriteLine(result.GetProperty("requiredNullableString").ToString());
Console.WriteLine(result.GetProperty("requiredReadonlyInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("discriminatorProperty").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredPropertyOnBase").ToString());
Console.WriteLine(result.GetProperty("requiredFixedStringEnum").ToString());
Console.WriteLine(result.GetProperty("requiredFixedIntEnum").ToString());
Console.WriteLine(result.GetProperty("requiredExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("requiredIntRecord").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("requiredStringRecord").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("requiredBytes").ToString());
Console.WriteLine(result.GetProperty("requiredUint8Array")[0].ToString());
Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result.GetProperty("requiredInt8Array")[0].ToString());
Console.WriteLine(result.GetProperty("requiredNullableIntList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredNullableStringList")[0].ToString());
]]></code>
This sample shows how to call InputToRoundTrip with all request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["requiredString"] = "<requiredString>",
    ["requiredInt"] = 1234,
    ["requiredNullableInt"] = 1234,
    ["requiredNullableString"] = "<requiredNullableString>",
    ["nonRequiredNullableInt"] = 1234,
    ["nonRequiredNullableString"] = "<nonRequiredNullableString>",
    ["requiredModel"] = new Dictionary<string, object>(),
    ["requiredModel2"] = null
,
    ["requiredIntList"] = new object[]
{
default
},
    ["requiredStringList"] = new object[]
{
default
},
    ["requiredModelList"] = new object[]
{
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
},
    ["requiredModelRecord"] = new Dictionary<string, object>()
    {
        ["key"] = null
,
    },
    ["requiredCollectionWithNullableFloatElement"] = new object[]
{
default
},
    ["requiredCollectionWithNullableBooleanElement"] = new object[]
{
default
},
    ["requiredNullableModelList"] = new object[]
{
null
},
    ["requiredNullableStringList"] = new object[]
{
default
},
    ["requiredNullableIntList"] = new object[]
{
default
},
    ["nonRequiredModelList"] = new object[]
{
null
},
    ["nonRequiredStringList"] = new object[]
{
default
},
    ["nonRequiredIntList"] = new object[]
{
default
},
    ["nonRequiredNullableModelList"] = new object[]
{
null
},
    ["nonRequiredNullableStringList"] = new object[]
{
default
},
    ["nonRequiredNullableIntList"] = new object[]
{
default
},
});
Response response = client.InputToRoundTrip(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("nonRequiredString").ToString());
Console.WriteLine(result.GetProperty("nonRequiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredNullableInt").ToString());
Console.WriteLine(result.GetProperty("requiredNullableString").ToString());
Console.WriteLine(result.GetProperty("nonRequiredNullableInt").ToString());
Console.WriteLine(result.GetProperty("nonRequiredNullableString").ToString());
Console.WriteLine(result.GetProperty("requiredReadonlyInt").ToString());
Console.WriteLine(result.GetProperty("nonRequiredReadonlyInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("discriminatorProperty").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalPropertyOnBase").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredPropertyOnBase").ToString());
Console.WriteLine(result.GetProperty("requiredFixedStringEnum").ToString());
Console.WriteLine(result.GetProperty("requiredFixedIntEnum").ToString());
Console.WriteLine(result.GetProperty("requiredExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("requiredIntRecord").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("requiredStringRecord").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("requiredBytes").ToString());
Console.WriteLine(result.GetProperty("optionalBytes").ToString());
Console.WriteLine(result.GetProperty("requiredUint8Array")[0].ToString());
Console.WriteLine(result.GetProperty("optionalUint8Array")[0].ToString());
Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result.GetProperty("optionalUnknown").ToString());
Console.WriteLine(result.GetProperty("requiredInt8Array")[0].ToString());
Console.WriteLine(result.GetProperty("optionalInt8Array")[0].ToString());
Console.WriteLine(result.GetProperty("requiredNullableIntList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredNullableStringList")[0].ToString());
Console.WriteLine(result.GetProperty("nonRequiredNullableIntList")[0].ToString());
Console.WriteLine(result.GetProperty("nonRequiredNullableStringList")[0].ToString());
]]></code></example>
    </member>
    <member name="InputToRoundTripPrimitiveAsync(InputModel,CancellationToken)">
      <example>
This sample shows how to call InputToRoundTripPrimitiveAsync with required parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

InputModel input = new InputModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new BaseModel(), null, new int[]
{
1234
}, new string[]
{
"<requiredStringList>"
}, new CollectionItem[]
{
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new CollectionItem[]
{
null
}),
})
}, new Dictionary<string, RecordItem>()
{
    ["key"] = null,
}, new float?[]
{
123.45F
}, new bool?[]
{
true
}, new CollectionItem[]
{
null
}, new string[]
{
"<requiredNullableStringList>"
}, new int[]
{
1234
})
{
    NonRequiredNullableInt = 1234,
    NonRequiredNullableString = "<nonRequiredNullableString>",
    NonRequiredModelList =
{
null
},
    NonRequiredStringList =
{
"<nonRequiredStringList>"
},
    NonRequiredIntList =
{
1234
},
    NonRequiredNullableModelList =
{
null
},
    NonRequiredNullableStringList =
{
"<nonRequiredNullableStringList>"
},
    NonRequiredNullableIntList =
{
1234
},
};
Response<RoundTripPrimitiveModel> response = await client.InputToRoundTripPrimitiveAsync(input);
]]></code></example>
    </member>
    <member name="InputToRoundTripPrimitive(InputModel,CancellationToken)">
      <example>
This sample shows how to call InputToRoundTripPrimitive with required parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

InputModel input = new InputModel("<requiredString>", 1234, 1234, "<requiredNullableString>", new BaseModel(), null, new int[]
{
1234
}, new string[]
{
"<requiredStringList>"
}, new CollectionItem[]
{
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new CollectionItem[]
{
null
}),
})
}, new Dictionary<string, RecordItem>()
{
    ["key"] = null,
}, new float?[]
{
123.45F
}, new bool?[]
{
true
}, new CollectionItem[]
{
null
}, new string[]
{
"<requiredNullableStringList>"
}, new int[]
{
1234
})
{
    NonRequiredNullableInt = 1234,
    NonRequiredNullableString = "<nonRequiredNullableString>",
    NonRequiredModelList =
{
null
},
    NonRequiredStringList =
{
"<nonRequiredStringList>"
},
    NonRequiredIntList =
{
1234
},
    NonRequiredNullableModelList =
{
null
},
    NonRequiredNullableStringList =
{
"<nonRequiredNullableStringList>"
},
    NonRequiredNullableIntList =
{
1234
},
};
Response<RoundTripPrimitiveModel> response = client.InputToRoundTripPrimitive(input);
]]></code></example>
    </member>
    <member name="InputToRoundTripPrimitiveAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call InputToRoundTripPrimitiveAsync with required request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["requiredString"] = "<requiredString>",
    ["requiredInt"] = 1234,
    ["requiredNullableInt"] = 1234,
    ["requiredNullableString"] = "<requiredNullableString>",
    ["requiredModel"] = new Dictionary<string, object>(),
    ["requiredModel2"] = null
,
    ["requiredIntList"] = new object[]
{
default
},
    ["requiredStringList"] = new object[]
{
default
},
    ["requiredModelList"] = new object[]
{
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
},
    ["requiredModelRecord"] = new Dictionary<string, object>()
    {
        ["key"] = null
,
    },
    ["requiredCollectionWithNullableFloatElement"] = new object[]
{
default
},
    ["requiredCollectionWithNullableBooleanElement"] = new object[]
{
default
},
    ["requiredNullableModelList"] = new object[]
{
null
},
    ["requiredNullableStringList"] = new object[]
{
default
},
    ["requiredNullableIntList"] = new object[]
{
default
},
});
Response response = await client.InputToRoundTripPrimitiveAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredInt64").ToString());
Console.WriteLine(result.GetProperty("requiredSafeInt").ToString());
Console.WriteLine(result.GetProperty("requiredFloat").ToString());
Console.WriteLine(result.GetProperty("required_Double").ToString());
Console.WriteLine(result.GetProperty("requiredBoolean").ToString());
Console.WriteLine(result.GetProperty("requiredDateTimeOffset").ToString());
Console.WriteLine(result.GetProperty("requiredTimeSpan").ToString());
Console.WriteLine(result.GetProperty("requiredCollectionWithNullableFloatElement")[0].ToString());
]]></code>
This sample shows how to call InputToRoundTripPrimitiveAsync with all request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["requiredString"] = "<requiredString>",
    ["requiredInt"] = 1234,
    ["requiredNullableInt"] = 1234,
    ["requiredNullableString"] = "<requiredNullableString>",
    ["nonRequiredNullableInt"] = 1234,
    ["nonRequiredNullableString"] = "<nonRequiredNullableString>",
    ["requiredModel"] = new Dictionary<string, object>(),
    ["requiredModel2"] = null
,
    ["requiredIntList"] = new object[]
{
default
},
    ["requiredStringList"] = new object[]
{
default
},
    ["requiredModelList"] = new object[]
{
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
},
    ["requiredModelRecord"] = new Dictionary<string, object>()
    {
        ["key"] = null
,
    },
    ["requiredCollectionWithNullableFloatElement"] = new object[]
{
default
},
    ["requiredCollectionWithNullableBooleanElement"] = new object[]
{
default
},
    ["requiredNullableModelList"] = new object[]
{
null
},
    ["requiredNullableStringList"] = new object[]
{
default
},
    ["requiredNullableIntList"] = new object[]
{
default
},
    ["nonRequiredModelList"] = new object[]
{
null
},
    ["nonRequiredStringList"] = new object[]
{
default
},
    ["nonRequiredIntList"] = new object[]
{
default
},
    ["nonRequiredNullableModelList"] = new object[]
{
null
},
    ["nonRequiredNullableStringList"] = new object[]
{
default
},
    ["nonRequiredNullableIntList"] = new object[]
{
default
},
});
Response response = await client.InputToRoundTripPrimitiveAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredInt64").ToString());
Console.WriteLine(result.GetProperty("requiredSafeInt").ToString());
Console.WriteLine(result.GetProperty("requiredFloat").ToString());
Console.WriteLine(result.GetProperty("required_Double").ToString());
Console.WriteLine(result.GetProperty("requiredBoolean").ToString());
Console.WriteLine(result.GetProperty("requiredDateTimeOffset").ToString());
Console.WriteLine(result.GetProperty("requiredTimeSpan").ToString());
Console.WriteLine(result.GetProperty("requiredCollectionWithNullableFloatElement")[0].ToString());
]]></code></example>
    </member>
    <member name="InputToRoundTripPrimitive(RequestContent,RequestContext)">
      <example>
This sample shows how to call InputToRoundTripPrimitive with required request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["requiredString"] = "<requiredString>",
    ["requiredInt"] = 1234,
    ["requiredNullableInt"] = 1234,
    ["requiredNullableString"] = "<requiredNullableString>",
    ["requiredModel"] = new Dictionary<string, object>(),
    ["requiredModel2"] = null
,
    ["requiredIntList"] = new object[]
{
default
},
    ["requiredStringList"] = new object[]
{
default
},
    ["requiredModelList"] = new object[]
{
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
},
    ["requiredModelRecord"] = new Dictionary<string, object>()
    {
        ["key"] = null
,
    },
    ["requiredCollectionWithNullableFloatElement"] = new object[]
{
default
},
    ["requiredCollectionWithNullableBooleanElement"] = new object[]
{
default
},
    ["requiredNullableModelList"] = new object[]
{
null
},
    ["requiredNullableStringList"] = new object[]
{
default
},
    ["requiredNullableIntList"] = new object[]
{
default
},
});
Response response = client.InputToRoundTripPrimitive(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredInt64").ToString());
Console.WriteLine(result.GetProperty("requiredSafeInt").ToString());
Console.WriteLine(result.GetProperty("requiredFloat").ToString());
Console.WriteLine(result.GetProperty("required_Double").ToString());
Console.WriteLine(result.GetProperty("requiredBoolean").ToString());
Console.WriteLine(result.GetProperty("requiredDateTimeOffset").ToString());
Console.WriteLine(result.GetProperty("requiredTimeSpan").ToString());
Console.WriteLine(result.GetProperty("requiredCollectionWithNullableFloatElement")[0].ToString());
]]></code>
This sample shows how to call InputToRoundTripPrimitive with all request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["requiredString"] = "<requiredString>",
    ["requiredInt"] = 1234,
    ["requiredNullableInt"] = 1234,
    ["requiredNullableString"] = "<requiredNullableString>",
    ["nonRequiredNullableInt"] = 1234,
    ["nonRequiredNullableString"] = "<nonRequiredNullableString>",
    ["requiredModel"] = new Dictionary<string, object>(),
    ["requiredModel2"] = null
,
    ["requiredIntList"] = new object[]
{
default
},
    ["requiredStringList"] = new object[]
{
default
},
    ["requiredModelList"] = new object[]
{
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
},
    ["requiredModelRecord"] = new Dictionary<string, object>()
    {
        ["key"] = null
,
    },
    ["requiredCollectionWithNullableFloatElement"] = new object[]
{
default
},
    ["requiredCollectionWithNullableBooleanElement"] = new object[]
{
default
},
    ["requiredNullableModelList"] = new object[]
{
null
},
    ["requiredNullableStringList"] = new object[]
{
default
},
    ["requiredNullableIntList"] = new object[]
{
default
},
    ["nonRequiredModelList"] = new object[]
{
null
},
    ["nonRequiredStringList"] = new object[]
{
default
},
    ["nonRequiredIntList"] = new object[]
{
default
},
    ["nonRequiredNullableModelList"] = new object[]
{
null
},
    ["nonRequiredNullableStringList"] = new object[]
{
default
},
    ["nonRequiredNullableIntList"] = new object[]
{
default
},
});
Response response = client.InputToRoundTripPrimitive(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredInt64").ToString());
Console.WriteLine(result.GetProperty("requiredSafeInt").ToString());
Console.WriteLine(result.GetProperty("requiredFloat").ToString());
Console.WriteLine(result.GetProperty("required_Double").ToString());
Console.WriteLine(result.GetProperty("requiredBoolean").ToString());
Console.WriteLine(result.GetProperty("requiredDateTimeOffset").ToString());
Console.WriteLine(result.GetProperty("requiredTimeSpan").ToString());
Console.WriteLine(result.GetProperty("requiredCollectionWithNullableFloatElement")[0].ToString());
]]></code></example>
    </member>
    <member name="InputToRoundTripOptionalAsync(RoundTripOptionalModel,CancellationToken)"></member>
    <member name="InputToRoundTripOptional(RoundTripOptionalModel,CancellationToken)"></member>
    <member name="InputToRoundTripOptionalAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call InputToRoundTripOptionalAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>());
Response response = await client.InputToRoundTripOptionalAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call InputToRoundTripOptionalAsync with all request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["optionalString"] = "<optionalString>",
    ["optionalInt"] = 1234,
    ["optionalStringList"] = new object[]
{
default
},
    ["optionalIntList"] = new object[]
{
default
},
    ["optionalModelList"] = new object[]
{
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
},
    ["optionalModel"] = new Dictionary<string, object>()
    {
        ["requiredList"] = new object[]
{
null
},
    },
    ["optionalModelWithPropertiesOnBase"] = new Dictionary<string, object>()
    {
        ["requiredList"] = new object[]
{
null
},
        ["optionalPropertyOnBase"] = "<optionalPropertyOnBase>",
    },
    ["optionalFixedStringEnum"] = "1",
    ["optionalExtensibleEnum"] = "1",
    ["optionalIntRecord"] = new Dictionary<string, object>()
    {
        ["key"] = 1234,
    },
    ["optionalStringRecord"] = new Dictionary<string, object>()
    {
        ["key"] = "<optionalStringRecord>",
    },
    ["optionalModelRecord"] = new Dictionary<string, object>()
    {
        ["key"] = null
,
    },
    ["optionalPlainDate"] = "2022-05-10",
    ["optionalPlainTime"] = "01:23:45",
    ["optionalCollectionWithNullableIntElement"] = new object[]
{
default
},
});
Response response = await client.InputToRoundTripOptionalAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("optionalString").ToString());
Console.WriteLine(result.GetProperty("optionalInt").ToString());
Console.WriteLine(result.GetProperty("optionalStringList")[0].ToString());
Console.WriteLine(result.GetProperty("optionalIntList")[0].ToString());
Console.WriteLine(result.GetProperty("optionalModelWithPropertiesOnBase").GetProperty("optionalPropertyOnBase").ToString());
Console.WriteLine(result.GetProperty("optionalFixedStringEnum").ToString());
Console.WriteLine(result.GetProperty("optionalExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("optionalIntRecord").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("optionalStringRecord").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("optionalPlainDate").ToString());
Console.WriteLine(result.GetProperty("optionalPlainTime").ToString());
Console.WriteLine(result.GetProperty("optionalCollectionWithNullableIntElement")[0].ToString());
]]></code></example>
    </member>
    <member name="InputToRoundTripOptional(RequestContent,RequestContext)">
      <example>
This sample shows how to call InputToRoundTripOptional and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>());
Response response = client.InputToRoundTripOptional(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call InputToRoundTripOptional with all request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["optionalString"] = "<optionalString>",
    ["optionalInt"] = 1234,
    ["optionalStringList"] = new object[]
{
default
},
    ["optionalIntList"] = new object[]
{
default
},
    ["optionalModelList"] = new object[]
{
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
},
    ["optionalModel"] = new Dictionary<string, object>()
    {
        ["requiredList"] = new object[]
{
null
},
    },
    ["optionalModelWithPropertiesOnBase"] = new Dictionary<string, object>()
    {
        ["requiredList"] = new object[]
{
null
},
        ["optionalPropertyOnBase"] = "<optionalPropertyOnBase>",
    },
    ["optionalFixedStringEnum"] = "1",
    ["optionalExtensibleEnum"] = "1",
    ["optionalIntRecord"] = new Dictionary<string, object>()
    {
        ["key"] = 1234,
    },
    ["optionalStringRecord"] = new Dictionary<string, object>()
    {
        ["key"] = "<optionalStringRecord>",
    },
    ["optionalModelRecord"] = new Dictionary<string, object>()
    {
        ["key"] = null
,
    },
    ["optionalPlainDate"] = "2022-05-10",
    ["optionalPlainTime"] = "01:23:45",
    ["optionalCollectionWithNullableIntElement"] = new object[]
{
default
},
});
Response response = client.InputToRoundTripOptional(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("optionalString").ToString());
Console.WriteLine(result.GetProperty("optionalInt").ToString());
Console.WriteLine(result.GetProperty("optionalStringList")[0].ToString());
Console.WriteLine(result.GetProperty("optionalIntList")[0].ToString());
Console.WriteLine(result.GetProperty("optionalModelWithPropertiesOnBase").GetProperty("optionalPropertyOnBase").ToString());
Console.WriteLine(result.GetProperty("optionalFixedStringEnum").ToString());
Console.WriteLine(result.GetProperty("optionalExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("optionalIntRecord").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("optionalStringRecord").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("optionalPlainDate").ToString());
Console.WriteLine(result.GetProperty("optionalPlainTime").ToString());
Console.WriteLine(result.GetProperty("optionalCollectionWithNullableIntElement")[0].ToString());
]]></code></example>
    </member>
    <member name="InputToRoundTripReadOnlyAsync(InputModel,CancellationToken)"></member>
    <member name="InputToRoundTripReadOnly(InputModel,CancellationToken)"></member>
    <member name="InputToRoundTripReadOnlyAsync(RequestContent,RequestContext)"></member>
    <member name="InputToRoundTripReadOnly(RequestContent,RequestContext)"></member>
    <member name="RoundTripToOutputAsync(RoundTripModel,CancellationToken)"></member>
    <member name="RoundTripToOutput(RoundTripModel,CancellationToken)"></member>
    <member name="RoundTripToOutputAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call RoundTripToOutputAsync with required request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["requiredString"] = "<requiredString>",
    ["requiredInt"] = 1234,
    ["requiredNullableInt"] = 1234,
    ["requiredNullableString"] = "<requiredNullableString>",
    ["requiredModel"] = new Dictionary<string, object>()
    {
        ["requiredString"] = "<requiredString>",
        ["discriminatorProperty"] = "A",
        ["requiredPropertyOnBase"] = 1234,
    },
    ["requiredFixedStringEnum"] = "1",
    ["requiredFixedIntEnum"] = 1,
    ["requiredExtensibleEnum"] = "1",
    ["requiredList"] = new object[]
{
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
},
    ["requiredIntRecord"] = new Dictionary<string, object>()
    {
        ["key"] = 1234,
    },
    ["requiredStringRecord"] = new Dictionary<string, object>()
    {
        ["key"] = "<requiredStringRecord>",
    },
    ["requiredModelRecord"] = new Dictionary<string, object>()
    {
        ["key"] = null
,
    },
    ["requiredBytes"] = new Dictionary<string, object>(),
    ["requiredUint8Array"] = new object[]
{
default
},
    ["requiredUnknown"] = new Dictionary<string, object>(),
    ["requiredInt8Array"] = new object[]
{
default
},
    ["requiredNullableIntList"] = new object[]
{
default
},
    ["requiredNullableStringList"] = new object[]
{
default
},
});
Response response = await client.RoundTripToOutputAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
]]></code>
This sample shows how to call RoundTripToOutputAsync with all request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["requiredString"] = "<requiredString>",
    ["requiredInt"] = 1234,
    ["nonRequiredString"] = "<nonRequiredString>",
    ["nonRequiredInt"] = 1234,
    ["requiredNullableInt"] = 1234,
    ["requiredNullableString"] = "<requiredNullableString>",
    ["nonRequiredNullableInt"] = 1234,
    ["nonRequiredNullableString"] = "<nonRequiredNullableString>",
    ["requiredModel"] = new Dictionary<string, object>()
    {
        ["requiredString"] = "<requiredString>",
        ["discriminatorProperty"] = "A",
        ["optionalPropertyOnBase"] = "<optionalPropertyOnBase>",
        ["requiredPropertyOnBase"] = 1234,
    },
    ["requiredFixedStringEnum"] = "1",
    ["requiredFixedIntEnum"] = 1,
    ["requiredExtensibleEnum"] = "1",
    ["requiredList"] = new object[]
{
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
},
    ["requiredIntRecord"] = new Dictionary<string, object>()
    {
        ["key"] = 1234,
    },
    ["requiredStringRecord"] = new Dictionary<string, object>()
    {
        ["key"] = "<requiredStringRecord>",
    },
    ["requiredModelRecord"] = new Dictionary<string, object>()
    {
        ["key"] = null
,
    },
    ["requiredBytes"] = new Dictionary<string, object>(),
    ["optionalBytes"] = new Dictionary<string, object>(),
    ["requiredUint8Array"] = new object[]
{
default
},
    ["optionalUint8Array"] = new object[]
{
default
},
    ["requiredUnknown"] = new Dictionary<string, object>(),
    ["optionalUnknown"] = new Dictionary<string, object>(),
    ["requiredInt8Array"] = new object[]
{
default
},
    ["optionalInt8Array"] = new object[]
{
default
},
    ["requiredNullableIntList"] = new object[]
{
default
},
    ["requiredNullableStringList"] = new object[]
{
default
},
    ["nonRequiredNullableIntList"] = new object[]
{
default
},
    ["nonRequiredNullableStringList"] = new object[]
{
default
},
});
Response response = await client.RoundTripToOutputAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
]]></code></example>
    </member>
    <member name="RoundTripToOutput(RequestContent,RequestContext)">
      <example>
This sample shows how to call RoundTripToOutput with required request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["requiredString"] = "<requiredString>",
    ["requiredInt"] = 1234,
    ["requiredNullableInt"] = 1234,
    ["requiredNullableString"] = "<requiredNullableString>",
    ["requiredModel"] = new Dictionary<string, object>()
    {
        ["requiredString"] = "<requiredString>",
        ["discriminatorProperty"] = "A",
        ["requiredPropertyOnBase"] = 1234,
    },
    ["requiredFixedStringEnum"] = "1",
    ["requiredFixedIntEnum"] = 1,
    ["requiredExtensibleEnum"] = "1",
    ["requiredList"] = new object[]
{
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
},
    ["requiredIntRecord"] = new Dictionary<string, object>()
    {
        ["key"] = 1234,
    },
    ["requiredStringRecord"] = new Dictionary<string, object>()
    {
        ["key"] = "<requiredStringRecord>",
    },
    ["requiredModelRecord"] = new Dictionary<string, object>()
    {
        ["key"] = null
,
    },
    ["requiredBytes"] = new Dictionary<string, object>(),
    ["requiredUint8Array"] = new object[]
{
default
},
    ["requiredUnknown"] = new Dictionary<string, object>(),
    ["requiredInt8Array"] = new object[]
{
default
},
    ["requiredNullableIntList"] = new object[]
{
default
},
    ["requiredNullableStringList"] = new object[]
{
default
},
});
Response response = client.RoundTripToOutput(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
]]></code>
This sample shows how to call RoundTripToOutput with all request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["requiredString"] = "<requiredString>",
    ["requiredInt"] = 1234,
    ["nonRequiredString"] = "<nonRequiredString>",
    ["nonRequiredInt"] = 1234,
    ["requiredNullableInt"] = 1234,
    ["requiredNullableString"] = "<requiredNullableString>",
    ["nonRequiredNullableInt"] = 1234,
    ["nonRequiredNullableString"] = "<nonRequiredNullableString>",
    ["requiredModel"] = new Dictionary<string, object>()
    {
        ["requiredString"] = "<requiredString>",
        ["discriminatorProperty"] = "A",
        ["optionalPropertyOnBase"] = "<optionalPropertyOnBase>",
        ["requiredPropertyOnBase"] = 1234,
    },
    ["requiredFixedStringEnum"] = "1",
    ["requiredFixedIntEnum"] = 1,
    ["requiredExtensibleEnum"] = "1",
    ["requiredList"] = new object[]
{
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
},
    ["requiredIntRecord"] = new Dictionary<string, object>()
    {
        ["key"] = 1234,
    },
    ["requiredStringRecord"] = new Dictionary<string, object>()
    {
        ["key"] = "<requiredStringRecord>",
    },
    ["requiredModelRecord"] = new Dictionary<string, object>()
    {
        ["key"] = null
,
    },
    ["requiredBytes"] = new Dictionary<string, object>(),
    ["optionalBytes"] = new Dictionary<string, object>(),
    ["requiredUint8Array"] = new object[]
{
default
},
    ["optionalUint8Array"] = new object[]
{
default
},
    ["requiredUnknown"] = new Dictionary<string, object>(),
    ["optionalUnknown"] = new Dictionary<string, object>(),
    ["requiredInt8Array"] = new object[]
{
default
},
    ["optionalInt8Array"] = new object[]
{
default
},
    ["requiredNullableIntList"] = new object[]
{
default
},
    ["requiredNullableStringList"] = new object[]
{
default
},
    ["nonRequiredNullableIntList"] = new object[]
{
default
},
    ["nonRequiredNullableStringList"] = new object[]
{
default
},
});
Response response = client.RoundTripToOutput(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
]]></code></example>
    </member>
    <member name="InputRecursiveAsync(InputRecursiveModel,CancellationToken)">
      <example>
This sample shows how to call InputRecursiveAsync with required parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

InputRecursiveModel input = new InputRecursiveModel("<message>")
{
    Inner = null,
};
Response response = await client.InputRecursiveAsync(input);
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="InputRecursive(InputRecursiveModel,CancellationToken)">
      <example>
This sample shows how to call InputRecursive with required parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

InputRecursiveModel input = new InputRecursiveModel("<message>")
{
    Inner = null,
};
Response response = client.InputRecursive(input);
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="InputRecursiveAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call InputRecursiveAsync with required request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["message"] = "<message>",
});
Response response = await client.InputRecursiveAsync(content);
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call InputRecursiveAsync with all request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["message"] = "<message>",
    ["inner"] = null
,
});
Response response = await client.InputRecursiveAsync(content);
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="InputRecursive(RequestContent,RequestContext)">
      <example>
This sample shows how to call InputRecursive with required request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["message"] = "<message>",
});
Response response = client.InputRecursive(content);
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call InputRecursive with all request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["message"] = "<message>",
    ["inner"] = null
,
});
Response response = client.InputRecursive(content);
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="RoundTripRecursiveAsync(RoundTripRecursiveModel,CancellationToken)">
      <example>
This sample shows how to call RoundTripRecursiveAsync with required parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RoundTripRecursiveModel input = new RoundTripRecursiveModel("<message>")
{
    Inner = null,
};
Response<RoundTripRecursiveModel> response = await client.RoundTripRecursiveAsync(input);
]]></code></example>
    </member>
    <member name="RoundTripRecursive(RoundTripRecursiveModel,CancellationToken)">
      <example>
This sample shows how to call RoundTripRecursive with required parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RoundTripRecursiveModel input = new RoundTripRecursiveModel("<message>")
{
    Inner = null,
};
Response<RoundTripRecursiveModel> response = client.RoundTripRecursive(input);
]]></code></example>
    </member>
    <member name="RoundTripRecursiveAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call RoundTripRecursiveAsync with required request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["message"] = "<message>",
});
Response response = await client.RoundTripRecursiveAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("message").ToString());
]]></code>
This sample shows how to call RoundTripRecursiveAsync with all request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["message"] = "<message>",
    ["inner"] = null
,
});
Response response = await client.RoundTripRecursiveAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("inner").GetProperty("message").ToString());
]]></code></example>
    </member>
    <member name="RoundTripRecursive(RequestContent,RequestContext)">
      <example>
This sample shows how to call RoundTripRecursive with required request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["message"] = "<message>",
});
Response response = client.RoundTripRecursive(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("message").ToString());
]]></code>
This sample shows how to call RoundTripRecursive with all request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["message"] = "<message>",
    ["inner"] = null
,
});
Response response = client.RoundTripRecursive(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("inner").GetProperty("message").ToString());
]]></code></example>
    </member>
    <member name="SelfReferenceAsync(CancellationToken)">
      <example>
This sample shows how to call SelfReferenceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

Response<ErrorModel> response = await client.SelfReferenceAsync();
]]></code></example>
    </member>
    <member name="SelfReference(CancellationToken)">
      <example>
This sample shows how to call SelfReference.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

Response<ErrorModel> response = client.SelfReference();
]]></code></example>
    </member>
    <member name="SelfReferenceAsync(RequestContext)">
      <example>
This sample shows how to call SelfReferenceAsync with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

Response response = await client.SelfReferenceAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("innerError").GetProperty("message").ToString());
]]></code></example>
    </member>
    <member name="SelfReference(RequestContext)">
      <example>
This sample shows how to call SelfReference with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

Response response = client.SelfReference(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("innerError").GetProperty("message").ToString());
]]></code></example>
    </member>
    <member name="RoundTripToOutputWithNoUseBaseAsync(RoundTripOnNoUse,CancellationToken)">
      <example>
This sample shows how to call RoundTripToOutputWithNoUseBaseAsync with required parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RoundTripOnNoUse input = new RoundTripOnNoUse("<baseModelProp>", new CollectionItem[]
{
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new CollectionItem[]
{
null
}),
})
});
Response<RoundTripOnNoUse> response = await client.RoundTripToOutputWithNoUseBaseAsync(input);
]]></code></example>
    </member>
    <member name="RoundTripToOutputWithNoUseBase(RoundTripOnNoUse,CancellationToken)">
      <example>
This sample shows how to call RoundTripToOutputWithNoUseBase with required parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RoundTripOnNoUse input = new RoundTripOnNoUse("<baseModelProp>", new CollectionItem[]
{
new CollectionItem(new Dictionary<string, RecordItem>()
{
["key"] = new RecordItem(new CollectionItem[]
{
null
}),
})
});
Response<RoundTripOnNoUse> response = client.RoundTripToOutputWithNoUseBase(input);
]]></code></example>
    </member>
    <member name="RoundTripToOutputWithNoUseBaseAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call RoundTripToOutputWithNoUseBaseAsync with required request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["requiredList"] = new object[]
{
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
},
    ["baseModelProp"] = "<baseModelProp>",
});
Response response = await client.RoundTripToOutputWithNoUseBaseAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("baseModelProp").ToString());
]]></code></example>
    </member>
    <member name="RoundTripToOutputWithNoUseBase(RequestContent,RequestContext)">
      <example>
This sample shows how to call RoundTripToOutputWithNoUseBase with required request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["requiredList"] = new object[]
{
new Dictionary<string, object>()
{
["requiredModelRecord"] = new Dictionary<string, object>()
{
["key"] = new Dictionary<string, object>()
{
["requiredList"] = new object[]
{
null
},
},
},
}
},
    ["baseModelProp"] = "<baseModelProp>",
});
Response response = client.RoundTripToOutputWithNoUseBase(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("baseModelProp").ToString());
]]></code></example>
    </member>
    <member name="AnalyzeConversationAsync(CancellationToken)">
      <example>
This sample shows how to call AnalyzeConversationAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

Response<BaseModelWithDiscriminator> response = await client.AnalyzeConversationAsync();
]]></code></example>
    </member>
    <member name="AnalyzeConversation(CancellationToken)">
      <example>
This sample shows how to call AnalyzeConversation.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

Response<BaseModelWithDiscriminator> response = client.AnalyzeConversation();
]]></code></example>
    </member>
    <member name="AnalyzeConversationAsync(RequestContext)">
      <example>
This sample shows how to call AnalyzeConversationAsync with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

Response response = await client.AnalyzeConversationAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("discriminatorProperty").ToString());
Console.WriteLine(result.GetProperty("optionalPropertyOnBase").ToString());
Console.WriteLine(result.GetProperty("requiredPropertyOnBase").ToString());
]]></code></example>
    </member>
    <member name="AnalyzeConversation(RequestContext)">
      <example>
This sample shows how to call AnalyzeConversation with required parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ModelsTypeSpecClient client = new ModelsTypeSpecClient(endpoint);

Response response = client.AnalyzeConversation(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("discriminatorProperty").ToString());
Console.WriteLine(result.GetProperty("optionalPropertyOnBase").ToString());
Console.WriteLine(result.GetProperty("requiredPropertyOnBase").ToString());
]]></code></example>
    </member>
  </members>
</doc>