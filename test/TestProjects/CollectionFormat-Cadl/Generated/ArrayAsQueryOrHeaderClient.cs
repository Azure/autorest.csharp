// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace ArrayAsQueryOrHeader
{
    // Data plane generated client.
    /// <summary> CADL project to test array as query or header. </summary>
    public partial class ArrayAsQueryOrHeaderClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ArrayAsQueryOrHeaderClient. </summary>
        public ArrayAsQueryOrHeaderClient() : this(new ArrayAsQueryOrHeaderClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ArrayAsQueryOrHeaderClient. </summary>
        /// <param name="options"> The options for configuring the client. </param>
        public ArrayAsQueryOrHeaderClient(ArrayAsQueryOrHeaderClientOptions options)
        {
            options ??= new ArrayAsQueryOrHeaderClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _apiVersion = options.Version;
        }

        /// <param name="options"> The Array to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ArrayAsQueryOrHeaderClient.xml" path="doc/members/member[@name='CsvQueryAsync(IEnumerable,RequestContext)']/*" />
        public virtual async Task<Response> CsvQueryAsync(IEnumerable<string> options = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArrayAsQueryOrHeaderClient.CsvQuery");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCsvQueryRequest(options, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="options"> The Array to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ArrayAsQueryOrHeaderClient.xml" path="doc/members/member[@name='CsvQuery(IEnumerable,RequestContext)']/*" />
        public virtual Response CsvQuery(IEnumerable<string> options = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArrayAsQueryOrHeaderClient.CsvQuery");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCsvQueryRequest(options, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="option"> The Array to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ArrayAsQueryOrHeaderClient.xml" path="doc/members/member[@name='MultiQueryAsync(IEnumerable,RequestContext)']/*" />
        public virtual async Task<Response> MultiQueryAsync(IEnumerable<string> option = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArrayAsQueryOrHeaderClient.MultiQuery");
            scope.Start();
            try
            {
                using HttpMessage message = CreateMultiQueryRequest(option, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="option"> The Array to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ArrayAsQueryOrHeaderClient.xml" path="doc/members/member[@name='MultiQuery(IEnumerable,RequestContext)']/*" />
        public virtual Response MultiQuery(IEnumerable<string> option = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArrayAsQueryOrHeaderClient.MultiQuery");
            scope.Start();
            try
            {
                using HttpMessage message = CreateMultiQueryRequest(option, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="options"> The Array to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ArrayAsQueryOrHeaderClient.xml" path="doc/members/member[@name='CsvHeaderAsync(IEnumerable,RequestContext)']/*" />
        public virtual async Task<Response> CsvHeaderAsync(IEnumerable<string> options = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArrayAsQueryOrHeaderClient.CsvHeader");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCsvHeaderRequest(options, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="options"> The Array to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/ArrayAsQueryOrHeaderClient.xml" path="doc/members/member[@name='CsvHeader(IEnumerable,RequestContext)']/*" />
        public virtual Response CsvHeader(IEnumerable<string> options = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArrayAsQueryOrHeaderClient.CsvHeader");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCsvHeaderRequest(options, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateCsvQueryRequest(IEnumerable<string> options, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/csvQuery", false);
            if (options != null)
            {
                uri.AppendQueryDelimited("options", options, ",", true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateMultiQueryRequest(IEnumerable<string> option, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/multiQuery", false);
            if (option != null)
            {
                foreach (var param in option)
                {
                    uri.AppendQuery("option", param, true);
                }
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCsvHeaderRequest(IEnumerable<string> options, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/csvHeader", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (options != null)
            {
                request.Headers.AddDelimited("options", options, ",");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
