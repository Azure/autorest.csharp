// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Identity;
using ClientAndOperationGroup;
using NUnit.Framework;

namespace ClientAndOperationGroup.Tests
{
    public partial class ClientAndOperationGroupClientTests : ClientAndOperationGroupTestBase
    {
        public ClientAndOperationGroupClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ClientAndOperationGroup_Zero_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ClientAndOperationGroupClient client = CreateClientAndOperationGroupClient(endpoint);

            Response response = await client.ZeroAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ClientAndOperationGroup_Zero_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ClientAndOperationGroupClient client = CreateClientAndOperationGroupClient(endpoint);

            Response response = await client.ZeroAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Alpha_One_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ClientAndOperationGroupClient client = CreateClientAndOperationGroupClient(endpoint);

            Response response = await client.OneAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Alpha_One_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ClientAndOperationGroupClient client = CreateClientAndOperationGroupClient(endpoint);

            Response response = await client.OneAsync(null);
        }
    }
}
