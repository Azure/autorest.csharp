// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Azure.Core;

namespace ModelsInCadl
{
    /// <summary> Output model with readonly properties. </summary>
    public partial class RoundTripReadOnlyModel
    {
        /// <summary> Initializes a new instance of RoundTripReadOnlyModel. </summary>
        /// <param name="optionalReadOnlyIntRecord"></param>
        /// <param name="optionalReadOnlyStringRecord"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="optionalReadOnlyIntRecord"/> or <paramref name="optionalReadOnlyStringRecord"/> is null. </exception>
        public RoundTripReadOnlyModel(IDictionary<string, int> optionalReadOnlyIntRecord, IDictionary<string, string> optionalReadOnlyStringRecord)
        {
            Argument.AssertNotNull(optionalReadOnlyIntRecord, nameof(optionalReadOnlyIntRecord));
            Argument.AssertNotNull(optionalReadOnlyStringRecord, nameof(optionalReadOnlyStringRecord));

            OptionalReadOnlyIntRecord = optionalReadOnlyIntRecord;
            OptionalReadOnlyStringRecord = optionalReadOnlyStringRecord;
            RequiredReadonlyStringList = Array.Empty<string>();
            RequiredReadonlyIntList = Array.Empty<int>();
            RequiredReadOnlyModelCollection = Array.Empty<CollectionItem>();
            RequiredReadOnlyIntRecord = new ReadOnlyDictionary<string, int>(new Dictionary<string, int>(0));
            RequiredStringRecord = new ReadOnlyDictionary<string, string>(new Dictionary<string, string>(0));
            RequiredReadOnlyModelRecord = new ReadOnlyDictionary<string, RecordItem>(new Dictionary<string, RecordItem>(0));
            OptionalReadonlyStringList = Array.Empty<string>();
            OptionalReadonlyIntList = Array.Empty<int>();
            OptionalReadOnlyModelCollection = Array.Empty<CollectionItem>();
            OptionalModelRecord = new ReadOnlyDictionary<string, RecordItem>(new Dictionary<string, RecordItem>(0));
        }
        /// <summary> Initializes a new instance of RoundTripReadOnlyModel. </summary>
        /// <param name="requiredReadonlyString"></param>
        /// <param name="requiredReadonlyInt"></param>
        /// <param name="optionalReadonlyString"></param>
        /// <param name="optionalReadonlyInt"></param>
        /// <param name="requiredReadonlyModel"></param>
        /// <param name="optionalReadonlyModel"></param>
        /// <param name="requiredReadonlyFixedStringEnum"></param>
        /// <param name="requiredReadonlyExtensibleEnum"></param>
        /// <param name="optionalReadonlyFixedStringEnum"></param>
        /// <param name="optionalReadonlyExtensibleEnum"></param>
        /// <param name="requiredReadonlyStringList"></param>
        /// <param name="requiredReadonlyIntList"></param>
        /// <param name="requiredReadOnlyModelCollection"></param>
        /// <param name="requiredReadOnlyIntRecord"></param>
        /// <param name="requiredStringRecord"></param>
        /// <param name="requiredReadOnlyModelRecord"></param>
        /// <param name="optionalReadonlyStringList"></param>
        /// <param name="optionalReadonlyIntList"></param>
        /// <param name="optionalReadOnlyModelCollection"></param>
        /// <param name="optionalReadOnlyIntRecord"></param>
        /// <param name="optionalReadOnlyStringRecord"></param>
        /// <param name="optionalModelRecord"></param>
        internal RoundTripReadOnlyModel(string requiredReadonlyString, int requiredReadonlyInt, string optionalReadonlyString, int? optionalReadonlyInt, DerivedModel requiredReadonlyModel, DerivedModel optionalReadonlyModel, FixedStringEnum requiredReadonlyFixedStringEnum, object requiredReadonlyExtensibleEnum, FixedStringEnum optionalReadonlyFixedStringEnum, ExtensibleEnum optionalReadonlyExtensibleEnum, IReadOnlyList<string> requiredReadonlyStringList, IReadOnlyList<int> requiredReadonlyIntList, IReadOnlyList<CollectionItem> requiredReadOnlyModelCollection, IReadOnlyDictionary<string, int> requiredReadOnlyIntRecord, IReadOnlyDictionary<string, string> requiredStringRecord, IReadOnlyDictionary<string, RecordItem> requiredReadOnlyModelRecord, IReadOnlyList<string> optionalReadonlyStringList, IReadOnlyList<int> optionalReadonlyIntList, IReadOnlyList<CollectionItem> optionalReadOnlyModelCollection, IDictionary<string, int> optionalReadOnlyIntRecord, IDictionary<string, string> optionalReadOnlyStringRecord, IReadOnlyDictionary<string, RecordItem> optionalModelRecord)
        {
            RequiredReadonlyString = requiredReadonlyString;
            RequiredReadonlyInt = requiredReadonlyInt;
            OptionalReadonlyString = optionalReadonlyString;
            OptionalReadonlyInt = optionalReadonlyInt;
            RequiredReadonlyModel = requiredReadonlyModel;
            OptionalReadonlyModel = optionalReadonlyModel;
            RequiredReadonlyFixedStringEnum = requiredReadonlyFixedStringEnum;
            RequiredReadonlyExtensibleEnum = requiredReadonlyExtensibleEnum;
            OptionalReadonlyFixedStringEnum = optionalReadonlyFixedStringEnum;
            OptionalReadonlyExtensibleEnum = optionalReadonlyExtensibleEnum;
            RequiredReadonlyStringList = requiredReadonlyStringList;
            RequiredReadonlyIntList = requiredReadonlyIntList;
            RequiredReadOnlyModelCollection = requiredReadOnlyModelCollection;
            RequiredReadOnlyIntRecord = requiredReadOnlyIntRecord;
            RequiredStringRecord = requiredStringRecord;
            RequiredReadOnlyModelRecord = requiredReadOnlyModelRecord;
            OptionalReadonlyStringList = optionalReadonlyStringList;
            OptionalReadonlyIntList = optionalReadonlyIntList;
            OptionalReadOnlyModelCollection = optionalReadOnlyModelCollection;
            OptionalReadOnlyIntRecord = optionalReadOnlyIntRecord;
            OptionalReadOnlyStringRecord = optionalReadOnlyStringRecord;
            OptionalModelRecord = optionalModelRecord;
        }

        public string RequiredReadonlyString { get; }

        public int RequiredReadonlyInt { get; }

        public string OptionalReadonlyString { get; }

        public int? OptionalReadonlyInt { get; }

        public DerivedModel RequiredReadonlyModel { get; }

        public DerivedModel OptionalReadonlyModel { get; }

        public FixedStringEnum RequiredReadonlyFixedStringEnum { get; }

        public object RequiredReadonlyExtensibleEnum { get; }

        public FixedStringEnum OptionalReadonlyFixedStringEnum { get; }

        public ExtensibleEnum OptionalReadonlyExtensibleEnum { get; }

        public IReadOnlyList<string> RequiredReadonlyStringList { get; }

        public IReadOnlyList<int> RequiredReadonlyIntList { get; }

        public IReadOnlyList<CollectionItem> RequiredReadOnlyModelCollection { get; }

        public IReadOnlyDictionary<string, int> RequiredReadOnlyIntRecord { get; }

        public IReadOnlyDictionary<string, string> RequiredStringRecord { get; }

        public IReadOnlyDictionary<string, RecordItem> RequiredReadOnlyModelRecord { get; }

        public IReadOnlyList<string> OptionalReadonlyStringList { get; }

        public IReadOnlyList<int> OptionalReadonlyIntList { get; }

        public IReadOnlyList<CollectionItem> OptionalReadOnlyModelCollection { get; }

        public IDictionary<string, int> OptionalReadOnlyIntRecord { get; }

        public IDictionary<string, string> OptionalReadOnlyStringRecord { get; }

        public IReadOnlyDictionary<string, RecordItem> OptionalModelRecord { get; }
    }
}
