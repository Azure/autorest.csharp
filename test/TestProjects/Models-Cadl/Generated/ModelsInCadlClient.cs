// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using ModelsInCadl;

namespace GeneratedModels
{
    /// <summary> CADL project to test various types of models. </summary>
    public partial class ModelsInCadlClient
    {
        private readonly HttpPipeline _pipeline;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ModelsInCadlClient. </summary>
        public ModelsInCadlClient() : this(new ModelsInCadlClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ModelsInCadlClient. </summary>
        /// <param name="options"> The options for configuring the client. </param>
        public ModelsInCadlClient(ModelsInCadlClientOptions options)
        {
            options ??= new ModelsInCadlClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
        }

        /// <summary> Input to RoundTrip. </summary>
        /// <param name="input"> The InputModel to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        public virtual async Task<Response<RoundTripModel>> InputToRoundTripAsync(InputModel input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await InputToRoundTripAsync(input.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(RoundTripModel.FromResponse(response), response);
        }

        /// <summary> Input to RoundTrip. </summary>
        /// <param name="input"> The InputModel to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        public virtual Response<RoundTripModel> InputToRoundTrip(InputModel input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = InputToRoundTrip(input.ToRequestContent(), context);
            return Response.FromValue(RoundTripModel.FromResponse(response), response);
        }

        /// <summary> Input to RoundTrip. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call InputToRoundTripAsync with required request content and parse the result.
        /// <code><![CDATA[
        /// var client = new ModelsInCadlClient();
        /// 
        /// var data = new {
        ///     requiredString = "<requiredString>",
        ///     requiredInt = 1234,
        ///     requiredModel = new {},
        ///     requiredCollection = new[] {
        ///         new {
        ///             requiredRecord = new {
        ///                 key = new {
        ///                     requiredCollection = new[] {},
        ///                 },
        ///             },
        ///         }
        ///     },
        /// };
        /// 
        /// Response response = await client.InputToRoundTripAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("requiredString").ToString());
        /// Console.WriteLine(result.GetProperty("requiredInt").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>InputModel</c>:
        /// <code>{
        ///   requiredString: string, # Required.
        ///   requiredInt: number, # Required.
        ///   requiredModel: {
        ///   }, # Required.
        ///   requiredCollection: [
        ///     {
        ///       requiredRecord: Dictionary&lt;string, RecordItem&gt;, # Required.
        ///     }
        ///   ], # Required.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>RoundTripModel</c>:
        /// <code>{
        ///   requiredString: string, # Required.
        ///   requiredInt: number, # Required.
        ///   requiredModel: {
        ///   }, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> InputToRoundTripAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ModelsInCadlClient.InputToRoundTrip");
            scope.Start();
            try
            {
                using HttpMessage message = CreateInputToRoundTripRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Input to RoundTrip. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call InputToRoundTrip with required request content and parse the result.
        /// <code><![CDATA[
        /// var client = new ModelsInCadlClient();
        /// 
        /// var data = new {
        ///     requiredString = "<requiredString>",
        ///     requiredInt = 1234,
        ///     requiredModel = new {},
        ///     requiredCollection = new[] {
        ///         new {
        ///             requiredRecord = new {
        ///                 key = new {
        ///                     requiredCollection = new[] {},
        ///                 },
        ///             },
        ///         }
        ///     },
        /// };
        /// 
        /// Response response = client.InputToRoundTrip(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("requiredString").ToString());
        /// Console.WriteLine(result.GetProperty("requiredInt").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>InputModel</c>:
        /// <code>{
        ///   requiredString: string, # Required.
        ///   requiredInt: number, # Required.
        ///   requiredModel: {
        ///   }, # Required.
        ///   requiredCollection: [
        ///     {
        ///       requiredRecord: Dictionary&lt;string, RecordItem&gt;, # Required.
        ///     }
        ///   ], # Required.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>RoundTripModel</c>:
        /// <code>{
        ///   requiredString: string, # Required.
        ///   requiredInt: number, # Required.
        ///   requiredModel: {
        ///   }, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response InputToRoundTrip(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ModelsInCadlClient.InputToRoundTrip");
            scope.Start();
            try
            {
                using HttpMessage message = CreateInputToRoundTripRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> RoundTrip to Output. </summary>
        /// <param name="input"> The RoundTripModel to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        public virtual async Task<Response<OutputModel>> RoundTripToOutputAsync(RoundTripModel input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await RoundTripToOutputAsync(input.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(OutputModel.FromResponse(response), response);
        }

        /// <summary> RoundTrip to Output. </summary>
        /// <param name="input"> The RoundTripModel to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="input"/> is null. </exception>
        public virtual Response<OutputModel> RoundTripToOutput(RoundTripModel input, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(input, nameof(input));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = RoundTripToOutput(input.ToRequestContent(), context);
            return Response.FromValue(OutputModel.FromResponse(response), response);
        }

        /// <summary> RoundTrip to Output. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call RoundTripToOutputAsync with required request content and parse the result.
        /// <code><![CDATA[
        /// var client = new ModelsInCadlClient();
        /// 
        /// var data = new {
        ///     requiredString = "<requiredString>",
        ///     requiredInt = 1234,
        ///     requiredModel = new {},
        /// };
        /// 
        /// Response response = await client.RoundTripToOutputAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("requiredString").ToString());
        /// Console.WriteLine(result.GetProperty("requiredInt").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>RoundTripModel</c>:
        /// <code>{
        ///   requiredString: string, # Required.
        ///   requiredInt: number, # Required.
        ///   requiredModel: {
        ///   }, # Required.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>OutputModel</c>:
        /// <code>{
        ///   requiredString: string, # Required.
        ///   requiredInt: number, # Required.
        ///   requiredModel: {
        ///     requiredCollection: [
        ///       {
        ///         requiredRecord: Dictionary&lt;string, RecordItem&gt;, # Required.
        ///       }
        ///     ], # Required.
        ///   }, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> RoundTripToOutputAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ModelsInCadlClient.RoundTripToOutput");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRoundTripToOutputRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> RoundTrip to Output. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call RoundTripToOutput with required request content and parse the result.
        /// <code><![CDATA[
        /// var client = new ModelsInCadlClient();
        /// 
        /// var data = new {
        ///     requiredString = "<requiredString>",
        ///     requiredInt = 1234,
        ///     requiredModel = new {},
        /// };
        /// 
        /// Response response = client.RoundTripToOutput(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("requiredString").ToString());
        /// Console.WriteLine(result.GetProperty("requiredInt").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>RoundTripModel</c>:
        /// <code>{
        ///   requiredString: string, # Required.
        ///   requiredInt: number, # Required.
        ///   requiredModel: {
        ///   }, # Required.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>OutputModel</c>:
        /// <code>{
        ///   requiredString: string, # Required.
        ///   requiredInt: number, # Required.
        ///   requiredModel: {
        ///     requiredCollection: [
        ///       {
        ///         requiredRecord: Dictionary&lt;string, RecordItem&gt;, # Required.
        ///       }
        ///     ], # Required.
        ///   }, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response RoundTripToOutput(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ModelsInCadlClient.RoundTripToOutput");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRoundTripToOutputRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateInputToRoundTripRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            message.BufferResponse = false;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/inputToRoundTrip", false);
            request.Uri = uri;
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateRoundTripToOutputRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            message.BufferResponse = false;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/roundTripToOutput", false);
            request.Uri = uri;
            request.Content = content;
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
