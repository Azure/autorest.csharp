// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace ModelsInCadl.Models
{
    /// <summary> RoundTrip model with optional properties. </summary>
    [Obsolete("deprecated for test")]
    public partial class RoundTripOptionalModel
    {
        /// <summary> Initializes a new instance of RoundTripOptionalModel. </summary>
        /// <param name="optionalModelCollection"></param>
        /// <param name="optionalFixedStringEnum"></param>
        /// <param name="optionalExtensibleEnum"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="optionalModelCollection"/> is null. </exception>
        internal RoundTripOptionalModel(IEnumerable<CollectionItem> optionalModelCollection, FixedStringEnum optionalFixedStringEnum, ExtensibleEnum optionalExtensibleEnum)
        {
            Argument.AssertNotNull(optionalModelCollection, nameof(optionalModelCollection));

            OptionalStringList = new ChangeTrackingList<string>();
            OptionalIntList = new ChangeTrackingList<int>();
            OptionalModelCollection = optionalModelCollection.ToList();
            OptionalFixedStringEnum = optionalFixedStringEnum;
            OptionalExtensibleEnum = optionalExtensibleEnum;
            OptionalIntRecord = new ChangeTrackingDictionary<string, int>();
            OptionalStringRecord = new ChangeTrackingDictionary<string, string>();
            OptionalModelRecord = new ChangeTrackingDictionary<string, RecordItem>();
        }

        /// <summary> Initializes a new instance of RoundTripOptionalModel. </summary>
        /// <param name="optionalString"></param>
        /// <param name="optionalInt"></param>
        /// <param name="optionalStringList"></param>
        /// <param name="optionalIntList"></param>
        /// <param name="optionalModelCollection"></param>
        /// <param name="optionalModel"></param>
        /// <param name="optionalFixedStringEnum"></param>
        /// <param name="optionalExtensibleEnum"></param>
        /// <param name="optionalIntRecord"></param>
        /// <param name="optionalStringRecord"></param>
        /// <param name="optionalModelRecord"></param>
        internal RoundTripOptionalModel(string optionalString, int? optionalInt, IReadOnlyList<string> optionalStringList, IReadOnlyList<int> optionalIntList, IReadOnlyList<CollectionItem> optionalModelCollection, DerivedModel optionalModel, FixedStringEnum optionalFixedStringEnum, ExtensibleEnum optionalExtensibleEnum, IReadOnlyDictionary<string, int> optionalIntRecord, IReadOnlyDictionary<string, string> optionalStringRecord, IReadOnlyDictionary<string, RecordItem> optionalModelRecord)
        {
            OptionalString = optionalString;
            OptionalInt = optionalInt;
            OptionalStringList = optionalStringList.ToList();
            OptionalIntList = optionalIntList.ToList();
            OptionalModelCollection = optionalModelCollection.ToList();
            OptionalModel = optionalModel;
            OptionalFixedStringEnum = optionalFixedStringEnum;
            OptionalExtensibleEnum = optionalExtensibleEnum;
            OptionalIntRecord = optionalIntRecord;
            OptionalStringRecord = optionalStringRecord;
            OptionalModelRecord = optionalModelRecord;
        }

        /// <summary> Gets the optional string. </summary>
        public string OptionalString { get; }
        /// <summary> Gets the optional int. </summary>
        public int? OptionalInt { get; }
        /// <summary> Gets the optional string list. </summary>
        public IReadOnlyList<string> OptionalStringList { get; }
        /// <summary> Gets the optional int list. </summary>
        public IReadOnlyList<int> OptionalIntList { get; }
        /// <summary> Gets the optional model collection. </summary>
        public IReadOnlyList<CollectionItem> OptionalModelCollection { get; }
        /// <summary> Gets the optional model. </summary>
        public DerivedModel OptionalModel { get; }
        /// <summary> Gets the optional fixed string enum. </summary>
        public FixedStringEnum OptionalFixedStringEnum { get; }
        /// <summary> Gets the optional extensible enum. </summary>
        public ExtensibleEnum OptionalExtensibleEnum { get; }
        /// <summary> Gets the optional int record. </summary>
        public IReadOnlyDictionary<string, int> OptionalIntRecord { get; }
        /// <summary> Gets the optional string record. </summary>
        public IReadOnlyDictionary<string, string> OptionalStringRecord { get; }
        /// <summary> Gets the optional model record. </summary>
        public IReadOnlyDictionary<string, RecordItem> OptionalModelRecord { get; }
    }
}
