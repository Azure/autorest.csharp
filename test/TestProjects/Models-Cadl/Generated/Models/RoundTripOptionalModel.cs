// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace ModelsInCadl.Models
{
    /// <summary> RoundTrip model with optional properties. </summary>
    [Obsolete("deprecated for test")]
    public partial class RoundTripOptionalModel
    {
        /// <summary> Initializes a new instance of RoundTripOptionalModel. </summary>
        public RoundTripOptionalModel()
        {
            OptionalStringList = new ChangeTrackingList<string>();
            OptionalIntList = new ChangeTrackingList<int>();
            OptionalModelCollection = new ChangeTrackingList<CollectionItem>();
            OptionalIntRecord = new ChangeTrackingDictionary<string, int>();
            OptionalStringRecord = new ChangeTrackingDictionary<string, string>();
            OptionalModelRecord = new ChangeTrackingDictionary<string, RecordItem>();
        }

        /// <summary> Initializes a new instance of RoundTripOptionalModel. </summary>
        /// <param name="optionalString"></param>
        /// <param name="optionalInt"></param>
        /// <param name="optionalStringList"></param>
        /// <param name="optionalIntList"></param>
        /// <param name="optionalModelCollection"></param>
        /// <param name="optionalModel"></param>
        /// <param name="optionalFixedStringEnum"></param>
        /// <param name="optionalExtensibleEnum"></param>
        /// <param name="optionalIntRecord"></param>
        /// <param name="optionalStringRecord"></param>
        /// <param name="optionalModelRecord"></param>
        /// <param name="optionalPlainDate"></param>
        /// <param name="optionalPlainTime"></param>
        internal RoundTripOptionalModel(string optionalString, int? optionalInt, IList<string> optionalStringList, IList<int> optionalIntList, IList<CollectionItem> optionalModelCollection, DerivedModel optionalModel, FixedStringEnum? optionalFixedStringEnum, ExtensibleEnum? optionalExtensibleEnum, IDictionary<string, int> optionalIntRecord, IDictionary<string, string> optionalStringRecord, IDictionary<string, RecordItem> optionalModelRecord, DateTimeOffset? optionalPlainDate, TimeSpan? optionalPlainTime)
        {
            OptionalString = optionalString;
            OptionalInt = optionalInt;
            OptionalStringList = optionalStringList.ToList();
            OptionalIntList = optionalIntList.ToList();
            OptionalModelCollection = optionalModelCollection.ToList();
            OptionalModel = optionalModel;
            OptionalFixedStringEnum = optionalFixedStringEnum;
            OptionalExtensibleEnum = optionalExtensibleEnum;
            OptionalIntRecord = optionalIntRecord;
            OptionalStringRecord = optionalStringRecord;
            OptionalModelRecord = optionalModelRecord;
            OptionalPlainDate = optionalPlainDate;
            OptionalPlainTime = optionalPlainTime;
        }

        /// <summary> Gets or sets the optional string. </summary>
        public string OptionalString { get; set; }
        /// <summary> Gets or sets the optional int. </summary>
        public int? OptionalInt { get; set; }
        /// <summary> Gets the optional string list. </summary>
        public IList<string> OptionalStringList { get; }
        /// <summary> Gets the optional int list. </summary>
        public IList<int> OptionalIntList { get; }
        /// <summary> Gets the optional model collection. </summary>
        public IList<CollectionItem> OptionalModelCollection { get; }
        /// <summary> Gets or sets the optional model. </summary>
        public DerivedModel OptionalModel { get; set; }
        /// <summary> Gets or sets the optional fixed string enum. </summary>
        public FixedStringEnum? OptionalFixedStringEnum { get; set; }
        /// <summary> Gets or sets the optional extensible enum. </summary>
        public ExtensibleEnum? OptionalExtensibleEnum { get; set; }
        /// <summary> Gets the optional int record. </summary>
        public IDictionary<string, int> OptionalIntRecord { get; }
        /// <summary> Gets the optional string record. </summary>
        public IDictionary<string, string> OptionalStringRecord { get; }
        /// <summary> Gets the optional model record. </summary>
        public IDictionary<string, RecordItem> OptionalModelRecord { get; }
        /// <summary> Gets or sets the optional plain date. </summary>
        public DateTimeOffset? OptionalPlainDate { get; set; }
        /// <summary> Gets or sets the optional plain time. </summary>
        public TimeSpan? OptionalPlainTime { get; set; }
    }
}
