// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace ModelsInCadl.Models
{
    public partial class RoundTripPrimitiveModel : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("requiredString");
            writer.WriteStringValue(RequiredString);
            writer.WritePropertyName("requiredInt");
            writer.WriteNumberValue(RequiredInt);
            writer.WritePropertyName("requiredInt64");
            writer.WriteNumberValue(RequiredInt64);
            writer.WritePropertyName("requiredSafeInt");
            writer.WriteNumberValue(RequiredSafeInt);
            writer.WritePropertyName("requiredFloat");
            writer.WriteNumberValue(RequiredFloat);
            writer.WritePropertyName("requiredDouble");
            writer.WriteNumberValue(RequiredDouble);
            writer.WritePropertyName("requiredBoolean");
            writer.WriteBooleanValue(RequiredBoolean);
            writer.WritePropertyName("requiredDateTimeOffset");
            writer.WriteStringValue(RequiredDateTimeOffset, "O");
            writer.WritePropertyName("requiredTimeSpan");
            writer.WriteStringValue(RequiredTimeSpan, "P");
            writer.WriteEndObject();
        }

        internal static RoundTripPrimitiveModel DeserializeRoundTripPrimitiveModel(JsonElement element)
        {
            string requiredString = default;
            int requiredInt = default;
            long requiredInt64 = default;
            long requiredSafeInt = default;
            float requiredFloat = default;
            double requiredDouble = default;
            bool requiredBoolean = default;
            DateTimeOffset requiredDateTimeOffset = default;
            TimeSpan requiredTimeSpan = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("requiredString"))
                {
                    requiredString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("requiredInt"))
                {
                    requiredInt = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("requiredInt64"))
                {
                    requiredInt64 = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("requiredSafeInt"))
                {
                    requiredSafeInt = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("requiredFloat"))
                {
                    requiredFloat = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("requiredDouble"))
                {
                    requiredDouble = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("requiredBoolean"))
                {
                    requiredBoolean = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("requiredDateTimeOffset"))
                {
                    requiredDateTimeOffset = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("requiredTimeSpan"))
                {
                    requiredTimeSpan = property.Value.GetTimeSpan("P");
                    continue;
                }
            }
            return new RoundTripPrimitiveModel(requiredString, requiredInt, requiredInt64, requiredSafeInt, requiredFloat, requiredDouble, requiredBoolean, requiredDateTimeOffset, requiredTimeSpan);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal new static RoundTripPrimitiveModel FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeRoundTripPrimitiveModel(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal override RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
