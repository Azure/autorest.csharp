<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="InputToRoundTripAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call InputToRoundTripAsync with required request content and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredModel = new {},
    requiredIntCollection = new[] {
        1234
    },
    requiredStringCollection = new[] {
        "<String>"
    },
    requiredModelCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {
                    requiredCollection = new[] {},
                },
            },
        }
    },
    requiredModelRecord = new {
        key = new {
            requiredCollection = new[] {
                new {
                    requiredModelRecord = new {},
                }
            },
        },
    },
    requiredCollectionWithNullableFloatElement = new[] {
        123.45f
    },
    requiredCollectionWithNullableBooleanElement = new[] {
        true
    },
};

Response response = await client.InputToRoundTripAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredFixedStringEnum").ToString());
Console.WriteLine(result.GetProperty("requiredFixedIntEnum").ToString());
Console.WriteLine(result.GetProperty("requiredExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("requiredIntRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("requiredStringRecord").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>InputModel</c>:
<code>{
  requiredString: string, # Required. Required string
  requiredInt: number, # Required. Required int
  requiredModel: {
  }, # Required. Required model
  requiredIntCollection: [number], # Required. Required primitive value type collection
  requiredStringCollection: [string], # Required. Required primitive reference type collection
  requiredModelCollection: [CollectionItem], # Required. Required model collection
  requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required. Required model record
  requiredCollectionWithNullableFloatElement: [number], # Required. Required collection of which the element is a nullable float
  requiredCollectionWithNullableBooleanElement: [boolean], # Required. Required collection of which the element is a nullable boolean
}
</code>

Response Body:

Schema for <c>RoundTripModel</c>:
<code>{
  requiredString: string, # Required. Required string, illustrating a reference type property.
  requiredInt: number, # Required. Required int, illustrating a value type property.
  requiredModel: {
  }, # Required. Required model with discriminator
  requiredFixedStringEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required. Required fixed string enum
  requiredFixedIntEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required. Required fixed int enum
  requiredExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required. Required extensible enum
  requiredCollection: [
    {
      requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required. Required model record
    }
  ], # Required. Required collection
  requiredIntRecord: Dictionary&lt;string, number&gt;, # Required. Required int record
  requiredStringRecord: Dictionary&lt;string, string&gt;, # Required. Required string record
  requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required. Required Model Record
}
</code>

</remarks>
    </member>
    <member name="InputToRoundTrip(RequestContent,RequestContext)">
<example>
This sample shows how to call InputToRoundTrip with required request content and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredModel = new {},
    requiredIntCollection = new[] {
        1234
    },
    requiredStringCollection = new[] {
        "<String>"
    },
    requiredModelCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {
                    requiredCollection = new[] {},
                },
            },
        }
    },
    requiredModelRecord = new {
        key = new {
            requiredCollection = new[] {
                new {
                    requiredModelRecord = new {},
                }
            },
        },
    },
    requiredCollectionWithNullableFloatElement = new[] {
        123.45f
    },
    requiredCollectionWithNullableBooleanElement = new[] {
        true
    },
};

Response response = client.InputToRoundTrip(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredFixedStringEnum").ToString());
Console.WriteLine(result.GetProperty("requiredFixedIntEnum").ToString());
Console.WriteLine(result.GetProperty("requiredExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("requiredIntRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("requiredStringRecord").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>InputModel</c>:
<code>{
  requiredString: string, # Required. Required string
  requiredInt: number, # Required. Required int
  requiredModel: {
  }, # Required. Required model
  requiredIntCollection: [number], # Required. Required primitive value type collection
  requiredStringCollection: [string], # Required. Required primitive reference type collection
  requiredModelCollection: [CollectionItem], # Required. Required model collection
  requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required. Required model record
  requiredCollectionWithNullableFloatElement: [number], # Required. Required collection of which the element is a nullable float
  requiredCollectionWithNullableBooleanElement: [boolean], # Required. Required collection of which the element is a nullable boolean
}
</code>

Response Body:

Schema for <c>RoundTripModel</c>:
<code>{
  requiredString: string, # Required. Required string, illustrating a reference type property.
  requiredInt: number, # Required. Required int, illustrating a value type property.
  requiredModel: {
  }, # Required. Required model with discriminator
  requiredFixedStringEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required. Required fixed string enum
  requiredFixedIntEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required. Required fixed int enum
  requiredExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required. Required extensible enum
  requiredCollection: [
    {
      requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required. Required model record
    }
  ], # Required. Required collection
  requiredIntRecord: Dictionary&lt;string, number&gt;, # Required. Required int record
  requiredStringRecord: Dictionary&lt;string, string&gt;, # Required. Required string record
  requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required. Required Model Record
}
</code>

</remarks>
    </member>
    <member name="InputToRoundTripPrimitiveAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call InputToRoundTripPrimitiveAsync with required request content and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredModel = new {},
    requiredIntCollection = new[] {
        1234
    },
    requiredStringCollection = new[] {
        "<String>"
    },
    requiredModelCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {
                    requiredCollection = new[] {},
                },
            },
        }
    },
    requiredModelRecord = new {
        key = new {
            requiredCollection = new[] {
                new {
                    requiredModelRecord = new {},
                }
            },
        },
    },
    requiredCollectionWithNullableFloatElement = new[] {
        123.45f
    },
    requiredCollectionWithNullableBooleanElement = new[] {
        true
    },
};

Response response = await client.InputToRoundTripPrimitiveAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredInt64").ToString());
Console.WriteLine(result.GetProperty("requiredSafeInt").ToString());
Console.WriteLine(result.GetProperty("requiredFloat").ToString());
Console.WriteLine(result.GetProperty("required_Double").ToString());
Console.WriteLine(result.GetProperty("requiredBoolean").ToString());
Console.WriteLine(result.GetProperty("requiredDateTimeOffset").ToString());
Console.WriteLine(result.GetProperty("requiredTimeSpan").ToString());
Console.WriteLine(result.GetProperty("requiredCollectionWithNullableFloatElement")[0].ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>InputModel</c>:
<code>{
  requiredString: string, # Required. Required string
  requiredInt: number, # Required. Required int
  requiredModel: {
  }, # Required. Required model
  requiredIntCollection: [number], # Required. Required primitive value type collection
  requiredStringCollection: [string], # Required. Required primitive reference type collection
  requiredModelCollection: [CollectionItem], # Required. Required model collection
  requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required. Required model record
  requiredCollectionWithNullableFloatElement: [number], # Required. Required collection of which the element is a nullable float
  requiredCollectionWithNullableBooleanElement: [boolean], # Required. Required collection of which the element is a nullable boolean
}
</code>

Response Body:

Schema for <c>RoundTripPrimitiveModel</c>:
<code>{
  requiredString: string, # Required. Required string, illustrating a reference type property.
  requiredInt: number, # Required. Required int, illustrating a value type property.
  requiredInt64: number, # Required. Required int64, illustrating a value type property.
  requiredSafeInt: number, # Required. Required safeint, illustrating a value type property.
  requiredFloat: number, # Required. Required float, illustrating a value type property.
  required_Double: number, # Required. Required double, illustrating a value type property.
  requiredBoolean: boolean, # Required. Required bolean, illustrating a value type property.
  requiredDateTimeOffset: string (date &amp; time), # Required. Required date time offset, illustrating a reference type property.
  requiredTimeSpan: string (duration ISO 8601 Format), # Required. Required time span, illustrating a value type property.
  requiredCollectionWithNullableFloatElement: [number], # Required. Required collection of which the element is a nullable float
}
</code>

</remarks>
    </member>
    <member name="InputToRoundTripPrimitive(RequestContent,RequestContext)">
<example>
This sample shows how to call InputToRoundTripPrimitive with required request content and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredModel = new {},
    requiredIntCollection = new[] {
        1234
    },
    requiredStringCollection = new[] {
        "<String>"
    },
    requiredModelCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {
                    requiredCollection = new[] {},
                },
            },
        }
    },
    requiredModelRecord = new {
        key = new {
            requiredCollection = new[] {
                new {
                    requiredModelRecord = new {},
                }
            },
        },
    },
    requiredCollectionWithNullableFloatElement = new[] {
        123.45f
    },
    requiredCollectionWithNullableBooleanElement = new[] {
        true
    },
};

Response response = client.InputToRoundTripPrimitive(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredInt64").ToString());
Console.WriteLine(result.GetProperty("requiredSafeInt").ToString());
Console.WriteLine(result.GetProperty("requiredFloat").ToString());
Console.WriteLine(result.GetProperty("required_Double").ToString());
Console.WriteLine(result.GetProperty("requiredBoolean").ToString());
Console.WriteLine(result.GetProperty("requiredDateTimeOffset").ToString());
Console.WriteLine(result.GetProperty("requiredTimeSpan").ToString());
Console.WriteLine(result.GetProperty("requiredCollectionWithNullableFloatElement")[0].ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>InputModel</c>:
<code>{
  requiredString: string, # Required. Required string
  requiredInt: number, # Required. Required int
  requiredModel: {
  }, # Required. Required model
  requiredIntCollection: [number], # Required. Required primitive value type collection
  requiredStringCollection: [string], # Required. Required primitive reference type collection
  requiredModelCollection: [CollectionItem], # Required. Required model collection
  requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required. Required model record
  requiredCollectionWithNullableFloatElement: [number], # Required. Required collection of which the element is a nullable float
  requiredCollectionWithNullableBooleanElement: [boolean], # Required. Required collection of which the element is a nullable boolean
}
</code>

Response Body:

Schema for <c>RoundTripPrimitiveModel</c>:
<code>{
  requiredString: string, # Required. Required string, illustrating a reference type property.
  requiredInt: number, # Required. Required int, illustrating a value type property.
  requiredInt64: number, # Required. Required int64, illustrating a value type property.
  requiredSafeInt: number, # Required. Required safeint, illustrating a value type property.
  requiredFloat: number, # Required. Required float, illustrating a value type property.
  required_Double: number, # Required. Required double, illustrating a value type property.
  requiredBoolean: boolean, # Required. Required bolean, illustrating a value type property.
  requiredDateTimeOffset: string (date &amp; time), # Required. Required date time offset, illustrating a reference type property.
  requiredTimeSpan: string (duration ISO 8601 Format), # Required. Required time span, illustrating a value type property.
  requiredCollectionWithNullableFloatElement: [number], # Required. Required collection of which the element is a nullable float
}
</code>

</remarks>
    </member>
    <member name="InputToRoundTripOptionalAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call InputToRoundTripOptionalAsync and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {};

Response response = await client.InputToRoundTripOptionalAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call InputToRoundTripOptionalAsync with all request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    optionalString = "<optionalString>",
    optionalInt = 1234,
    optionalStringList = new[] {
        "<String>"
    },
    optionalIntList = new[] {
        1234
    },
    optionalModelCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {
                    requiredCollection = new[] {},
                },
            },
        }
    },
    optionalModel = new {
        requiredCollection = new[] {
            new {
                requiredModelRecord = new {
                    key = new {
                        requiredCollection = new[] {},
                    },
                },
            }
        },
    },
    optionalFixedStringEnum = "1",
    optionalExtensibleEnum = "1",
    optionalIntRecord = new {
        key = 1234,
    },
    optionalStringRecord = new {
        key = "<String>",
    },
    optionalModelRecord = new {
        key = new {
            requiredCollection = new[] {
                new {
                    requiredModelRecord = new {},
                }
            },
        },
    },
    optionalPlainDate = "2022-05-10",
    optionalPlainTime = 01:23:45,
    optionalCollectionWithNullableIntElement = new[] {
        1234
    },
};

Response response = await client.InputToRoundTripOptionalAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("optionalString").ToString());
Console.WriteLine(result.GetProperty("optionalInt").ToString());
Console.WriteLine(result.GetProperty("optionalStringList")[0].ToString());
Console.WriteLine(result.GetProperty("optionalIntList")[0].ToString());
Console.WriteLine(result.GetProperty("optionalFixedStringEnum").ToString());
Console.WriteLine(result.GetProperty("optionalExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("optionalIntRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("optionalStringRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("optionalPlainDate").ToString());
Console.WriteLine(result.GetProperty("optionalPlainTime").ToString());
Console.WriteLine(result.GetProperty("optionalCollectionWithNullableIntElement")[0].ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>RoundTripOptionalModel</c>:
<code>{
  optionalString: string, # Optional. Optional string, illustrating an optional reference type property.
  optionalInt: number, # Optional. Optional int, illustrating an optional value type property.
  optionalStringList: [string], # Optional. Optional string collection.
  optionalIntList: [number], # Optional. Optional int collection.
  optionalModelCollection: [CollectionItem], # Optional. Optional model collection
  optionalModel: {
    requiredCollection: [CollectionItem], # Required. Required collection
  }, # Optional. Optional model.
  optionalFixedStringEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. Optional fixed string enum
  optionalExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. Optional extensible enum
  optionalIntRecord: Dictionary&lt;string, number&gt;, # Optional. Optional int record
  optionalStringRecord: Dictionary&lt;string, string&gt;, # Optional. Optional string record
  optionalModelRecord: Dictionary&lt;string, RecordItem&gt;, # Optional. Optional model record
  optionalPlainDate: string (date), # Optional. Optional plainDate
  optionalPlainTime: string (time), # Optional. Optional plainTime
  optionalCollectionWithNullableIntElement: [number], # Optional. Optional collection of which the element is a nullable int
}
</code>

Response Body:

Schema for <c>RoundTripOptionalModel</c>:
<code>{
  optionalString: string, # Optional. Optional string, illustrating an optional reference type property.
  optionalInt: number, # Optional. Optional int, illustrating an optional value type property.
  optionalStringList: [string], # Optional. Optional string collection.
  optionalIntList: [number], # Optional. Optional int collection.
  optionalModelCollection: [CollectionItem], # Optional. Optional model collection
  optionalModel: {
    requiredCollection: [CollectionItem], # Required. Required collection
  }, # Optional. Optional model.
  optionalFixedStringEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. Optional fixed string enum
  optionalExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. Optional extensible enum
  optionalIntRecord: Dictionary&lt;string, number&gt;, # Optional. Optional int record
  optionalStringRecord: Dictionary&lt;string, string&gt;, # Optional. Optional string record
  optionalModelRecord: Dictionary&lt;string, RecordItem&gt;, # Optional. Optional model record
  optionalPlainDate: string (date), # Optional. Optional plainDate
  optionalPlainTime: string (time), # Optional. Optional plainTime
  optionalCollectionWithNullableIntElement: [number], # Optional. Optional collection of which the element is a nullable int
}
</code>

</remarks>
    </member>
    <member name="InputToRoundTripOptional(RequestContent,RequestContext)">
<example>
This sample shows how to call InputToRoundTripOptional and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {};

Response response = client.InputToRoundTripOptional(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call InputToRoundTripOptional with all request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    optionalString = "<optionalString>",
    optionalInt = 1234,
    optionalStringList = new[] {
        "<String>"
    },
    optionalIntList = new[] {
        1234
    },
    optionalModelCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {
                    requiredCollection = new[] {},
                },
            },
        }
    },
    optionalModel = new {
        requiredCollection = new[] {
            new {
                requiredModelRecord = new {
                    key = new {
                        requiredCollection = new[] {},
                    },
                },
            }
        },
    },
    optionalFixedStringEnum = "1",
    optionalExtensibleEnum = "1",
    optionalIntRecord = new {
        key = 1234,
    },
    optionalStringRecord = new {
        key = "<String>",
    },
    optionalModelRecord = new {
        key = new {
            requiredCollection = new[] {
                new {
                    requiredModelRecord = new {},
                }
            },
        },
    },
    optionalPlainDate = "2022-05-10",
    optionalPlainTime = 01:23:45,
    optionalCollectionWithNullableIntElement = new[] {
        1234
    },
};

Response response = client.InputToRoundTripOptional(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("optionalString").ToString());
Console.WriteLine(result.GetProperty("optionalInt").ToString());
Console.WriteLine(result.GetProperty("optionalStringList")[0].ToString());
Console.WriteLine(result.GetProperty("optionalIntList")[0].ToString());
Console.WriteLine(result.GetProperty("optionalFixedStringEnum").ToString());
Console.WriteLine(result.GetProperty("optionalExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("optionalIntRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("optionalStringRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("optionalPlainDate").ToString());
Console.WriteLine(result.GetProperty("optionalPlainTime").ToString());
Console.WriteLine(result.GetProperty("optionalCollectionWithNullableIntElement")[0].ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>RoundTripOptionalModel</c>:
<code>{
  optionalString: string, # Optional. Optional string, illustrating an optional reference type property.
  optionalInt: number, # Optional. Optional int, illustrating an optional value type property.
  optionalStringList: [string], # Optional. Optional string collection.
  optionalIntList: [number], # Optional. Optional int collection.
  optionalModelCollection: [CollectionItem], # Optional. Optional model collection
  optionalModel: {
    requiredCollection: [CollectionItem], # Required. Required collection
  }, # Optional. Optional model.
  optionalFixedStringEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. Optional fixed string enum
  optionalExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. Optional extensible enum
  optionalIntRecord: Dictionary&lt;string, number&gt;, # Optional. Optional int record
  optionalStringRecord: Dictionary&lt;string, string&gt;, # Optional. Optional string record
  optionalModelRecord: Dictionary&lt;string, RecordItem&gt;, # Optional. Optional model record
  optionalPlainDate: string (date), # Optional. Optional plainDate
  optionalPlainTime: string (time), # Optional. Optional plainTime
  optionalCollectionWithNullableIntElement: [number], # Optional. Optional collection of which the element is a nullable int
}
</code>

Response Body:

Schema for <c>RoundTripOptionalModel</c>:
<code>{
  optionalString: string, # Optional. Optional string, illustrating an optional reference type property.
  optionalInt: number, # Optional. Optional int, illustrating an optional value type property.
  optionalStringList: [string], # Optional. Optional string collection.
  optionalIntList: [number], # Optional. Optional int collection.
  optionalModelCollection: [CollectionItem], # Optional. Optional model collection
  optionalModel: {
    requiredCollection: [CollectionItem], # Required. Required collection
  }, # Optional. Optional model.
  optionalFixedStringEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. Optional fixed string enum
  optionalExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Optional. Optional extensible enum
  optionalIntRecord: Dictionary&lt;string, number&gt;, # Optional. Optional int record
  optionalStringRecord: Dictionary&lt;string, string&gt;, # Optional. Optional string record
  optionalModelRecord: Dictionary&lt;string, RecordItem&gt;, # Optional. Optional model record
  optionalPlainDate: string (date), # Optional. Optional plainDate
  optionalPlainTime: string (time), # Optional. Optional plainTime
  optionalCollectionWithNullableIntElement: [number], # Optional. Optional collection of which the element is a nullable int
}
</code>

</remarks>
    </member>
    <member name="InputToRoundTripReadOnlyAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call InputToRoundTripReadOnlyAsync with required request content and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredModel = new {},
    requiredIntCollection = new[] {
        1234
    },
    requiredStringCollection = new[] {
        "<String>"
    },
    requiredModelCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {
                    requiredCollection = new[] {},
                },
            },
        }
    },
    requiredModelRecord = new {
        key = new {
            requiredCollection = new[] {
                new {
                    requiredModelRecord = new {},
                }
            },
        },
    },
    requiredCollectionWithNullableFloatElement = new[] {
        123.45f
    },
    requiredCollectionWithNullableBooleanElement = new[] {
        true
    },
};

Response response = await client.InputToRoundTripReadOnlyAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredReadonlyString").ToString());
Console.WriteLine(result.GetProperty("requiredReadonlyInt").ToString());
Console.WriteLine(result.GetProperty("optionalReadonlyString").ToString());
Console.WriteLine(result.GetProperty("optionalReadonlyInt").ToString());
Console.WriteLine(result.GetProperty("requiredReadonlyFixedStringEnum").ToString());
Console.WriteLine(result.GetProperty("requiredReadonlyExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("optionalReadonlyFixedStringEnum").ToString());
Console.WriteLine(result.GetProperty("optionalReadonlyExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("requiredReadonlyStringList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredReadonlyIntList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredReadOnlyIntRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("requiredStringRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("optionalReadonlyStringList")[0].ToString());
Console.WriteLine(result.GetProperty("optionalReadonlyIntList")[0].ToString());
Console.WriteLine(result.GetProperty("optionalReadOnlyIntRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("optionalReadOnlyStringRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("requiredCollectionWithNullableIntElement")[0].ToString());
Console.WriteLine(result.GetProperty("optionalCollectionWithNullableBooleanElement")[0].ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>InputModel</c>:
<code>{
  requiredString: string, # Required. Required string
  requiredInt: number, # Required. Required int
  requiredModel: {
  }, # Required. Required model
  requiredIntCollection: [number], # Required. Required primitive value type collection
  requiredStringCollection: [string], # Required. Required primitive reference type collection
  requiredModelCollection: [CollectionItem], # Required. Required model collection
  requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required. Required model record
  requiredCollectionWithNullableFloatElement: [number], # Required. Required collection of which the element is a nullable float
  requiredCollectionWithNullableBooleanElement: [boolean], # Required. Required collection of which the element is a nullable boolean
}
</code>

Response Body:

Schema for <c>RoundTripReadOnlyModel</c>:
<code>{
  requiredReadonlyString: string, # Required. Required string, illustrating a readonly reference type property.
  requiredReadonlyInt: number, # Required. Required int, illustrating a readonly value type property.
  optionalReadonlyString: string, # Optional. Optional string, illustrating a readonly reference type property.
  optionalReadonlyInt: number, # Optional. Optional int, illustrating a readonly value type property.
  requiredReadonlyModel: {
    requiredCollection: [CollectionItem], # Required. Required collection
  }, # Required. Required readonly model.
  optionalReadonlyModel: DerivedModel, # Optional. Optional readonly model.
  requiredReadonlyFixedStringEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required. Required readonly fixed string enum
  requiredReadonlyExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required. Required readonly extensible enum
  optionalReadonlyFixedStringEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required. Optional readonly fixed string enum
  optionalReadonlyExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required. Optional readonly extensible enum
  requiredReadonlyStringList: [string], # Required. Required readonly string collection.
  requiredReadonlyIntList: [number], # Required. Required readonly int collection.
  requiredReadOnlyModelCollection: [CollectionItem], # Required. Required model collection
  requiredReadOnlyIntRecord: Dictionary&lt;string, number&gt;, # Required. Required int record
  requiredStringRecord: Dictionary&lt;string, string&gt;, # Required. Required string record
  requiredReadOnlyModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required. Required model record
  optionalReadonlyStringList: [string], # Optional. Optional readonly string collection.
  optionalReadonlyIntList: [number], # Optional. Optional readonly int collection.
  optionalReadOnlyModelCollection: [CollectionItem], # Optional. Optional model collection
  optionalReadOnlyIntRecord: Dictionary&lt;string, number&gt;, # Required. Optional int record
  optionalReadOnlyStringRecord: Dictionary&lt;string, string&gt;, # Required. Optional string record
  optionalModelRecord: Dictionary&lt;string, RecordItem&gt;, # Optional. Optional model record
  requiredCollectionWithNullableIntElement: [number], # Required. Required collection of which the element is a nullable int
  optionalCollectionWithNullableBooleanElement: [boolean], # Optional. Optional collection of which the element is a nullable boolean
}
</code>

</remarks>
    </member>
    <member name="InputToRoundTripReadOnly(RequestContent,RequestContext)">
<example>
This sample shows how to call InputToRoundTripReadOnly with required request content and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredModel = new {},
    requiredIntCollection = new[] {
        1234
    },
    requiredStringCollection = new[] {
        "<String>"
    },
    requiredModelCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {
                    requiredCollection = new[] {},
                },
            },
        }
    },
    requiredModelRecord = new {
        key = new {
            requiredCollection = new[] {
                new {
                    requiredModelRecord = new {},
                }
            },
        },
    },
    requiredCollectionWithNullableFloatElement = new[] {
        123.45f
    },
    requiredCollectionWithNullableBooleanElement = new[] {
        true
    },
};

Response response = client.InputToRoundTripReadOnly(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredReadonlyString").ToString());
Console.WriteLine(result.GetProperty("requiredReadonlyInt").ToString());
Console.WriteLine(result.GetProperty("optionalReadonlyString").ToString());
Console.WriteLine(result.GetProperty("optionalReadonlyInt").ToString());
Console.WriteLine(result.GetProperty("requiredReadonlyFixedStringEnum").ToString());
Console.WriteLine(result.GetProperty("requiredReadonlyExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("optionalReadonlyFixedStringEnum").ToString());
Console.WriteLine(result.GetProperty("optionalReadonlyExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("requiredReadonlyStringList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredReadonlyIntList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredReadOnlyIntRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("requiredStringRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("optionalReadonlyStringList")[0].ToString());
Console.WriteLine(result.GetProperty("optionalReadonlyIntList")[0].ToString());
Console.WriteLine(result.GetProperty("optionalReadOnlyIntRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("optionalReadOnlyStringRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("requiredCollectionWithNullableIntElement")[0].ToString());
Console.WriteLine(result.GetProperty("optionalCollectionWithNullableBooleanElement")[0].ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>InputModel</c>:
<code>{
  requiredString: string, # Required. Required string
  requiredInt: number, # Required. Required int
  requiredModel: {
  }, # Required. Required model
  requiredIntCollection: [number], # Required. Required primitive value type collection
  requiredStringCollection: [string], # Required. Required primitive reference type collection
  requiredModelCollection: [CollectionItem], # Required. Required model collection
  requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required. Required model record
  requiredCollectionWithNullableFloatElement: [number], # Required. Required collection of which the element is a nullable float
  requiredCollectionWithNullableBooleanElement: [boolean], # Required. Required collection of which the element is a nullable boolean
}
</code>

Response Body:

Schema for <c>RoundTripReadOnlyModel</c>:
<code>{
  requiredReadonlyString: string, # Required. Required string, illustrating a readonly reference type property.
  requiredReadonlyInt: number, # Required. Required int, illustrating a readonly value type property.
  optionalReadonlyString: string, # Optional. Optional string, illustrating a readonly reference type property.
  optionalReadonlyInt: number, # Optional. Optional int, illustrating a readonly value type property.
  requiredReadonlyModel: {
    requiredCollection: [CollectionItem], # Required. Required collection
  }, # Required. Required readonly model.
  optionalReadonlyModel: DerivedModel, # Optional. Optional readonly model.
  requiredReadonlyFixedStringEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required. Required readonly fixed string enum
  requiredReadonlyExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required. Required readonly extensible enum
  optionalReadonlyFixedStringEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required. Optional readonly fixed string enum
  optionalReadonlyExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required. Optional readonly extensible enum
  requiredReadonlyStringList: [string], # Required. Required readonly string collection.
  requiredReadonlyIntList: [number], # Required. Required readonly int collection.
  requiredReadOnlyModelCollection: [CollectionItem], # Required. Required model collection
  requiredReadOnlyIntRecord: Dictionary&lt;string, number&gt;, # Required. Required int record
  requiredStringRecord: Dictionary&lt;string, string&gt;, # Required. Required string record
  requiredReadOnlyModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required. Required model record
  optionalReadonlyStringList: [string], # Optional. Optional readonly string collection.
  optionalReadonlyIntList: [number], # Optional. Optional readonly int collection.
  optionalReadOnlyModelCollection: [CollectionItem], # Optional. Optional model collection
  optionalReadOnlyIntRecord: Dictionary&lt;string, number&gt;, # Required. Optional int record
  optionalReadOnlyStringRecord: Dictionary&lt;string, string&gt;, # Required. Optional string record
  optionalModelRecord: Dictionary&lt;string, RecordItem&gt;, # Optional. Optional model record
  requiredCollectionWithNullableIntElement: [number], # Required. Required collection of which the element is a nullable int
  optionalCollectionWithNullableBooleanElement: [boolean], # Optional. Optional collection of which the element is a nullable boolean
}
</code>

</remarks>
    </member>
    <member name="RoundTripToOutputAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call RoundTripToOutputAsync with required request content and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredModel = new {},
    requiredFixedStringEnum = "1",
    requiredFixedIntEnum = "1",
    requiredExtensibleEnum = "1",
    requiredCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {
                    requiredCollection = new[] {},
                },
            },
        }
    },
    requiredIntRecord = new {
        key = 1234,
    },
    requiredStringRecord = new {
        key = "<String>",
    },
    requiredModelRecord = new {
        key = new {
            requiredCollection = new[] {
                new {
                    requiredModelRecord = new {},
                }
            },
        },
    },
};

Response response = await client.RoundTripToOutputAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>RoundTripModel</c>:
<code>{
  requiredString: string, # Required. Required string, illustrating a reference type property.
  requiredInt: number, # Required. Required int, illustrating a value type property.
  requiredModel: {
  }, # Required. Required model with discriminator
  requiredFixedStringEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required. Required fixed string enum
  requiredFixedIntEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required. Required fixed int enum
  requiredExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required. Required extensible enum
  requiredCollection: [
    {
      requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required. Required model record
    }
  ], # Required. Required collection
  requiredIntRecord: Dictionary&lt;string, number&gt;, # Required. Required int record
  requiredStringRecord: Dictionary&lt;string, string&gt;, # Required. Required string record
  requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required. Required Model Record
}
</code>

Response Body:

Schema for <c>OutputModel</c>:
<code>{
  requiredString: string, # Required. Required string
  requiredInt: number, # Required. Required int
  requiredModel: {
    requiredCollection: [
      {
        requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required. Required model record
      }
    ], # Required. Required collection
  }, # Required. Required model
  requiredCollection: [CollectionItem], # Required. Required collection
  requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required. Required model record
}
</code>

</remarks>
    </member>
    <member name="RoundTripToOutput(RequestContent,RequestContext)">
<example>
This sample shows how to call RoundTripToOutput with required request content and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredModel = new {},
    requiredFixedStringEnum = "1",
    requiredFixedIntEnum = "1",
    requiredExtensibleEnum = "1",
    requiredCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {
                    requiredCollection = new[] {},
                },
            },
        }
    },
    requiredIntRecord = new {
        key = 1234,
    },
    requiredStringRecord = new {
        key = "<String>",
    },
    requiredModelRecord = new {
        key = new {
            requiredCollection = new[] {
                new {
                    requiredModelRecord = new {},
                }
            },
        },
    },
};

Response response = client.RoundTripToOutput(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>RoundTripModel</c>:
<code>{
  requiredString: string, # Required. Required string, illustrating a reference type property.
  requiredInt: number, # Required. Required int, illustrating a value type property.
  requiredModel: {
  }, # Required. Required model with discriminator
  requiredFixedStringEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required. Required fixed string enum
  requiredFixedIntEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required. Required fixed int enum
  requiredExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required. Required extensible enum
  requiredCollection: [
    {
      requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required. Required model record
    }
  ], # Required. Required collection
  requiredIntRecord: Dictionary&lt;string, number&gt;, # Required. Required int record
  requiredStringRecord: Dictionary&lt;string, string&gt;, # Required. Required string record
  requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required. Required Model Record
}
</code>

Response Body:

Schema for <c>OutputModel</c>:
<code>{
  requiredString: string, # Required. Required string
  requiredInt: number, # Required. Required int
  requiredModel: {
    requiredCollection: [
      {
        requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required. Required model record
      }
    ], # Required. Required collection
  }, # Required. Required model
  requiredCollection: [CollectionItem], # Required. Required collection
  requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required. Required model record
}
</code>

</remarks>
    </member>
    <member name="InputRecursiveAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call InputRecursiveAsync with required request content.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    message = "<message>",
};

Response response = await client.InputRecursiveAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call InputRecursiveAsync with all request content.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    message = "<message>",
};

Response response = await client.InputRecursiveAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>InputRecursiveModel</c>:
<code>{
  message: string, # Required. Message
  inner: InputRecursiveModel, # Optional. Required Record
}
</code>

</remarks>
    </member>
    <member name="InputRecursive(RequestContent,RequestContext)">
<example>
This sample shows how to call InputRecursive with required request content.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    message = "<message>",
};

Response response = client.InputRecursive(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call InputRecursive with all request content.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    message = "<message>",
};

Response response = client.InputRecursive(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>InputRecursiveModel</c>:
<code>{
  message: string, # Required. Message
  inner: InputRecursiveModel, # Optional. Required Record
}
</code>

</remarks>
    </member>
    <member name="RoundTripRecursiveAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call RoundTripRecursiveAsync with required request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    message = "<message>",
};

Response response = await client.RoundTripRecursiveAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("message").ToString());
]]></code>
This sample shows how to call RoundTripRecursiveAsync with all request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    message = "<message>",
};

Response response = await client.RoundTripRecursiveAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("inner").GetProperty("message").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>RoundTripRecursiveModel</c>:
<code>{
  message: string, # Required. Message
  inner: RoundTripRecursiveModel, # Optional. Required Record
}
</code>

Response Body:

Schema for <c>RoundTripRecursiveModel</c>:
<code>{
  message: string, # Required. Message
  inner: RoundTripRecursiveModel, # Optional. Required Record
}
</code>

</remarks>
    </member>
    <member name="RoundTripRecursive(RequestContent,RequestContext)">
<example>
This sample shows how to call RoundTripRecursive with required request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    message = "<message>",
};

Response response = client.RoundTripRecursive(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("message").ToString());
]]></code>
This sample shows how to call RoundTripRecursive with all request content, and how to parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    message = "<message>",
};

Response response = client.RoundTripRecursive(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("inner").GetProperty("message").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>RoundTripRecursiveModel</c>:
<code>{
  message: string, # Required. Message
  inner: RoundTripRecursiveModel, # Optional. Required Record
}
</code>

Response Body:

Schema for <c>RoundTripRecursiveModel</c>:
<code>{
  message: string, # Required. Message
  inner: RoundTripRecursiveModel, # Optional. Required Record
}
</code>

</remarks>
    </member>
    <member name="SelfReferenceAsync(RequestContext)">
<example>
This sample shows how to call SelfReferenceAsync and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

Response response = await client.SelfReferenceAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("innerError").GetProperty("message").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>ErrorModel</c>:
<code>{
  message: string, # Required. Error message
  innerError: ErrorModel, # Optional. Required Record
}
</code>

</remarks>
    </member>
    <member name="SelfReference(RequestContext)">
<example>
This sample shows how to call SelfReference and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

Response response = client.SelfReference();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("innerError").GetProperty("message").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>ErrorModel</c>:
<code>{
  message: string, # Required. Error message
  innerError: ErrorModel, # Optional. Required Record
}
</code>

</remarks>
    </member>
    <member name="RoundTripToOutputWithNoUseBaseAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call RoundTripToOutputWithNoUseBaseAsync with required request content and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    requiredCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {
                    requiredCollection = new[] {},
                },
            },
        }
    },
    baseModelProp = "<baseModelProp>",
};

Response response = await client.RoundTripToOutputWithNoUseBaseAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("baseModelProp").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>RoundTripOnNoUse</c>:
<code>{
  requiredCollection: [
    {
      requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required. Required model record
    }
  ], # Required. Required collection
  baseModelProp: string, # Required. base model property
}
</code>

Response Body:

Schema for <c>RoundTripOnNoUse</c>:
<code>{
  requiredCollection: [
    {
      requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required. Required model record
    }
  ], # Required. Required collection
  baseModelProp: string, # Required. base model property
}
</code>

</remarks>
    </member>
    <member name="RoundTripToOutputWithNoUseBase(RequestContent,RequestContext)">
<example>
This sample shows how to call RoundTripToOutputWithNoUseBase with required request content and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ModelsInCadlClient(endpoint);

var data = new {
    requiredCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {
                    requiredCollection = new[] {},
                },
            },
        }
    },
    baseModelProp = "<baseModelProp>",
};

Response response = client.RoundTripToOutputWithNoUseBase(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("baseModelProp").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>RoundTripOnNoUse</c>:
<code>{
  requiredCollection: [
    {
      requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required. Required model record
    }
  ], # Required. Required collection
  baseModelProp: string, # Required. base model property
}
</code>

Response Body:

Schema for <c>RoundTripOnNoUse</c>:
<code>{
  requiredCollection: [
    {
      requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required. Required model record
    }
  ], # Required. Required collection
  baseModelProp: string, # Required. base model property
}
</code>

</remarks>
    </member>
  </members>
</doc>