<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="InputToRoundTripAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call InputToRoundTripAsync with required request content and parse the result.
<code><![CDATA[
var client = new ModelsInCadlClient();

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredModel = new {},
    requiredIntCollection = new[] {
        1234
    },
    requiredStringCollection = new[] {
        "<String>"
    },
    requiredModelCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {
                    requiredCollection = new[] {},
                },
            },
        }
    },
    requiredModelRecord = new {
        key = new {
            requiredCollection = new[] {
                new {
                    requiredModelRecord = new {},
                }
            },
        },
    },
};

Response response = await client.InputToRoundTripAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredFixedStringEnum").ToString());
Console.WriteLine(result.GetProperty("requiredFixedIntEnum").ToString());
Console.WriteLine(result.GetProperty("requiredExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("requiredIntRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("requiredStringRecord").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>InputModel</c>:
<code>{
  requiredString: string, # Required.
  requiredInt: number, # Required.
  requiredModel: {
  }, # Required.
  requiredIntCollection: [number], # Required.
  requiredStringCollection: [string], # Required.
  requiredModelCollection: [CollectionItem], # Required.
  requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required.
}
</code>

Response Body:

Schema for <c>RoundTripModel</c>:
<code>{
  requiredString: string, # Required.
  requiredInt: number, # Required.
  requiredModel: {
  }, # Required.
  requiredFixedStringEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required.
  requiredFixedIntEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required.
  requiredExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required.
  requiredCollection: [
    {
      requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required.
    }
  ], # Required.
  requiredIntRecord: Dictionary&lt;string, number&gt;, # Required.
  requiredStringRecord: Dictionary&lt;string, string&gt;, # Required.
  requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required.
}
</code>

</remarks>
    </member>
    <member name="InputToRoundTrip(RequestContent,RequestContext)">
<example>
This sample shows how to call InputToRoundTrip with required request content and parse the result.
<code><![CDATA[
var client = new ModelsInCadlClient();

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredModel = new {},
    requiredIntCollection = new[] {
        1234
    },
    requiredStringCollection = new[] {
        "<String>"
    },
    requiredModelCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {
                    requiredCollection = new[] {},
                },
            },
        }
    },
    requiredModelRecord = new {
        key = new {
            requiredCollection = new[] {
                new {
                    requiredModelRecord = new {},
                }
            },
        },
    },
};

Response response = client.InputToRoundTrip(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredFixedStringEnum").ToString());
Console.WriteLine(result.GetProperty("requiredFixedIntEnum").ToString());
Console.WriteLine(result.GetProperty("requiredExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("requiredIntRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("requiredStringRecord").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>InputModel</c>:
<code>{
  requiredString: string, # Required.
  requiredInt: number, # Required.
  requiredModel: {
  }, # Required.
  requiredIntCollection: [number], # Required.
  requiredStringCollection: [string], # Required.
  requiredModelCollection: [CollectionItem], # Required.
  requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required.
}
</code>

Response Body:

Schema for <c>RoundTripModel</c>:
<code>{
  requiredString: string, # Required.
  requiredInt: number, # Required.
  requiredModel: {
  }, # Required.
  requiredFixedStringEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required.
  requiredFixedIntEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required.
  requiredExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required.
  requiredCollection: [
    {
      requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required.
    }
  ], # Required.
  requiredIntRecord: Dictionary&lt;string, number&gt;, # Required.
  requiredStringRecord: Dictionary&lt;string, string&gt;, # Required.
  requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required.
}
</code>

</remarks>
    </member>
    <member name="InputToRoundTripPrimitiveAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call InputToRoundTripPrimitiveAsync with required request content and parse the result.
<code><![CDATA[
var client = new ModelsInCadlClient();

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredModel = new {},
    requiredIntCollection = new[] {
        1234
    },
    requiredStringCollection = new[] {
        "<String>"
    },
    requiredModelCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {
                    requiredCollection = new[] {},
                },
            },
        }
    },
    requiredModelRecord = new {
        key = new {
            requiredCollection = new[] {
                new {
                    requiredModelRecord = new {},
                }
            },
        },
    },
};

Response response = await client.InputToRoundTripPrimitiveAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredInt64").ToString());
Console.WriteLine(result.GetProperty("requiredSafeInt").ToString());
Console.WriteLine(result.GetProperty("requiredFloat").ToString());
Console.WriteLine(result.GetProperty("requiredDouble").ToString());
Console.WriteLine(result.GetProperty("requiredBoolean").ToString());
Console.WriteLine(result.GetProperty("requiredDateTimeOffset").ToString());
Console.WriteLine(result.GetProperty("requiredTimeSpan").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>InputModel</c>:
<code>{
  requiredString: string, # Required.
  requiredInt: number, # Required.
  requiredModel: {
  }, # Required.
  requiredIntCollection: [number], # Required.
  requiredStringCollection: [string], # Required.
  requiredModelCollection: [CollectionItem], # Required.
  requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required.
}
</code>

Response Body:

Schema for <c>RoundTripPrimitiveModel</c>:
<code>{
  requiredString: string, # Required.
  requiredInt: number, # Required.
  requiredInt64: number, # Required.
  requiredSafeInt: number, # Required.
  requiredFloat: number, # Required.
  requiredDouble: number, # Required.
  requiredBoolean: boolean, # Required.
  requiredDateTimeOffset: string (date &amp; time), # Required.
  requiredTimeSpan: string (duration ISO 8601 Format), # Required.
}
</code>

</remarks>
    </member>
    <member name="InputToRoundTripPrimitive(RequestContent,RequestContext)">
<example>
This sample shows how to call InputToRoundTripPrimitive with required request content and parse the result.
<code><![CDATA[
var client = new ModelsInCadlClient();

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredModel = new {},
    requiredIntCollection = new[] {
        1234
    },
    requiredStringCollection = new[] {
        "<String>"
    },
    requiredModelCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {
                    requiredCollection = new[] {},
                },
            },
        }
    },
    requiredModelRecord = new {
        key = new {
            requiredCollection = new[] {
                new {
                    requiredModelRecord = new {},
                }
            },
        },
    },
};

Response response = client.InputToRoundTripPrimitive(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredInt64").ToString());
Console.WriteLine(result.GetProperty("requiredSafeInt").ToString());
Console.WriteLine(result.GetProperty("requiredFloat").ToString());
Console.WriteLine(result.GetProperty("requiredDouble").ToString());
Console.WriteLine(result.GetProperty("requiredBoolean").ToString());
Console.WriteLine(result.GetProperty("requiredDateTimeOffset").ToString());
Console.WriteLine(result.GetProperty("requiredTimeSpan").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>InputModel</c>:
<code>{
  requiredString: string, # Required.
  requiredInt: number, # Required.
  requiredModel: {
  }, # Required.
  requiredIntCollection: [number], # Required.
  requiredStringCollection: [string], # Required.
  requiredModelCollection: [CollectionItem], # Required.
  requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required.
}
</code>

Response Body:

Schema for <c>RoundTripPrimitiveModel</c>:
<code>{
  requiredString: string, # Required.
  requiredInt: number, # Required.
  requiredInt64: number, # Required.
  requiredSafeInt: number, # Required.
  requiredFloat: number, # Required.
  requiredDouble: number, # Required.
  requiredBoolean: boolean, # Required.
  requiredDateTimeOffset: string (date &amp; time), # Required.
  requiredTimeSpan: string (duration ISO 8601 Format), # Required.
}
</code>

</remarks>
    </member>
    <member name="InputToRoundTripOptionalAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call InputToRoundTripOptionalAsync with required request content and parse the result.
<code><![CDATA[
var client = new ModelsInCadlClient();

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredModel = new {},
    requiredIntCollection = new[] {
        1234
    },
    requiredStringCollection = new[] {
        "<String>"
    },
    requiredModelCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {
                    requiredCollection = new[] {},
                },
            },
        }
    },
    requiredModelRecord = new {
        key = new {
            requiredCollection = new[] {
                new {
                    requiredModelRecord = new {},
                }
            },
        },
    },
};

Response response = await client.InputToRoundTripOptionalAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("optionalString").ToString());
Console.WriteLine(result.GetProperty("optionalInt").ToString());
Console.WriteLine(result.GetProperty("optionalStringList")[0].ToString());
Console.WriteLine(result.GetProperty("optionalIntList")[0].ToString());
Console.WriteLine(result.GetProperty("optionalFixedStringEnum").ToString());
Console.WriteLine(result.GetProperty("optionalExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("optionalIntRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("optionalStringRecord").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>InputModel</c>:
<code>{
  requiredString: string, # Required.
  requiredInt: number, # Required.
  requiredModel: {
  }, # Required.
  requiredIntCollection: [number], # Required.
  requiredStringCollection: [string], # Required.
  requiredModelCollection: [CollectionItem], # Required.
  requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required.
}
</code>

Response Body:

Schema for <c>RoundTripOptionalModel</c>:
<code>{
  optionalString: string, # Optional.
  optionalInt: number, # Optional.
  optionalStringList: [string], # Optional.
  optionalIntList: [number], # Optional.
  optionalModelCollection: [CollectionItem], # Required.
  optionalModel: {
    requiredCollection: [CollectionItem], # Required.
  }, # Optional.
  optionalFixedStringEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required.
  optionalExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required.
  optionalIntRecord: Dictionary&lt;string, number&gt;, # Optional.
  optionalStringRecord: Dictionary&lt;string, string&gt;, # Optional.
  optionalModelRecord: Dictionary&lt;string, RecordItem&gt;, # Optional.
}
</code>

</remarks>
    </member>
    <member name="InputToRoundTripOptional(RequestContent,RequestContext)">
<example>
This sample shows how to call InputToRoundTripOptional with required request content and parse the result.
<code><![CDATA[
var client = new ModelsInCadlClient();

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredModel = new {},
    requiredIntCollection = new[] {
        1234
    },
    requiredStringCollection = new[] {
        "<String>"
    },
    requiredModelCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {
                    requiredCollection = new[] {},
                },
            },
        }
    },
    requiredModelRecord = new {
        key = new {
            requiredCollection = new[] {
                new {
                    requiredModelRecord = new {},
                }
            },
        },
    },
};

Response response = client.InputToRoundTripOptional(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("optionalString").ToString());
Console.WriteLine(result.GetProperty("optionalInt").ToString());
Console.WriteLine(result.GetProperty("optionalStringList")[0].ToString());
Console.WriteLine(result.GetProperty("optionalIntList")[0].ToString());
Console.WriteLine(result.GetProperty("optionalFixedStringEnum").ToString());
Console.WriteLine(result.GetProperty("optionalExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("optionalIntRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("optionalStringRecord").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>InputModel</c>:
<code>{
  requiredString: string, # Required.
  requiredInt: number, # Required.
  requiredModel: {
  }, # Required.
  requiredIntCollection: [number], # Required.
  requiredStringCollection: [string], # Required.
  requiredModelCollection: [CollectionItem], # Required.
  requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required.
}
</code>

Response Body:

Schema for <c>RoundTripOptionalModel</c>:
<code>{
  optionalString: string, # Optional.
  optionalInt: number, # Optional.
  optionalStringList: [string], # Optional.
  optionalIntList: [number], # Optional.
  optionalModelCollection: [CollectionItem], # Required.
  optionalModel: {
    requiredCollection: [CollectionItem], # Required.
  }, # Optional.
  optionalFixedStringEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required.
  optionalExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required.
  optionalIntRecord: Dictionary&lt;string, number&gt;, # Optional.
  optionalStringRecord: Dictionary&lt;string, string&gt;, # Optional.
  optionalModelRecord: Dictionary&lt;string, RecordItem&gt;, # Optional.
}
</code>

</remarks>
    </member>
    <member name="InputToRoundTripReadOnlyAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call InputToRoundTripReadOnlyAsync with required request content and parse the result.
<code><![CDATA[
var client = new ModelsInCadlClient();

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredModel = new {},
    requiredIntCollection = new[] {
        1234
    },
    requiredStringCollection = new[] {
        "<String>"
    },
    requiredModelCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {
                    requiredCollection = new[] {},
                },
            },
        }
    },
    requiredModelRecord = new {
        key = new {
            requiredCollection = new[] {
                new {
                    requiredModelRecord = new {},
                }
            },
        },
    },
};

Response response = await client.InputToRoundTripReadOnlyAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredReadonlyString").ToString());
Console.WriteLine(result.GetProperty("requiredReadonlyInt").ToString());
Console.WriteLine(result.GetProperty("optionalReadonlyString").ToString());
Console.WriteLine(result.GetProperty("optionalReadonlyInt").ToString());
Console.WriteLine(result.GetProperty("requiredReadonlyFixedStringEnum").ToString());
Console.WriteLine(result.GetProperty("requiredReadonlyExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("optionalReadonlyFixedStringEnum").ToString());
Console.WriteLine(result.GetProperty("optionalReadonlyExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("requiredReadonlyStringList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredReadonlyIntList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredReadOnlyIntRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("requiredStringRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("optionalReadonlyStringList")[0].ToString());
Console.WriteLine(result.GetProperty("optionalReadonlyIntList")[0].ToString());
Console.WriteLine(result.GetProperty("optionalReadOnlyIntRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("optionalReadOnlyStringRecord").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>InputModel</c>:
<code>{
  requiredString: string, # Required.
  requiredInt: number, # Required.
  requiredModel: {
  }, # Required.
  requiredIntCollection: [number], # Required.
  requiredStringCollection: [string], # Required.
  requiredModelCollection: [CollectionItem], # Required.
  requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required.
}
</code>

Response Body:

Schema for <c>RoundTripReadOnlyModel</c>:
<code>{
  requiredReadonlyString: string, # Required.
  requiredReadonlyInt: number, # Required.
  optionalReadonlyString: string, # Optional.
  optionalReadonlyInt: number, # Optional.
  requiredReadonlyModel: {
    requiredCollection: [CollectionItem], # Required.
  }, # Required.
  optionalReadonlyModel: DerivedModel, # Optional.
  requiredReadonlyFixedStringEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required.
  requiredReadonlyExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required.
  optionalReadonlyFixedStringEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required.
  optionalReadonlyExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required.
  requiredReadonlyStringList: [string], # Required.
  requiredReadonlyIntList: [number], # Required.
  requiredReadOnlyModelCollection: [CollectionItem], # Required.
  requiredReadOnlyIntRecord: Dictionary&lt;string, number&gt;, # Required.
  requiredStringRecord: Dictionary&lt;string, string&gt;, # Required.
  requiredReadOnlyModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required.
  optionalReadonlyStringList: [string], # Optional.
  optionalReadonlyIntList: [number], # Optional.
  optionalReadOnlyModelCollection: [CollectionItem], # Optional.
  optionalReadOnlyIntRecord: Dictionary&lt;string, number&gt;, # Required.
  optionalReadOnlyStringRecord: Dictionary&lt;string, string&gt;, # Required.
  optionalModelRecord: Dictionary&lt;string, RecordItem&gt;, # Optional.
}
</code>

</remarks>
    </member>
    <member name="InputToRoundTripReadOnly(RequestContent,RequestContext)">
<example>
This sample shows how to call InputToRoundTripReadOnly with required request content and parse the result.
<code><![CDATA[
var client = new ModelsInCadlClient();

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredModel = new {},
    requiredIntCollection = new[] {
        1234
    },
    requiredStringCollection = new[] {
        "<String>"
    },
    requiredModelCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {
                    requiredCollection = new[] {},
                },
            },
        }
    },
    requiredModelRecord = new {
        key = new {
            requiredCollection = new[] {
                new {
                    requiredModelRecord = new {},
                }
            },
        },
    },
};

Response response = client.InputToRoundTripReadOnly(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredReadonlyString").ToString());
Console.WriteLine(result.GetProperty("requiredReadonlyInt").ToString());
Console.WriteLine(result.GetProperty("optionalReadonlyString").ToString());
Console.WriteLine(result.GetProperty("optionalReadonlyInt").ToString());
Console.WriteLine(result.GetProperty("requiredReadonlyFixedStringEnum").ToString());
Console.WriteLine(result.GetProperty("requiredReadonlyExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("optionalReadonlyFixedStringEnum").ToString());
Console.WriteLine(result.GetProperty("optionalReadonlyExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("requiredReadonlyStringList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredReadonlyIntList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredReadOnlyIntRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("requiredStringRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("optionalReadonlyStringList")[0].ToString());
Console.WriteLine(result.GetProperty("optionalReadonlyIntList")[0].ToString());
Console.WriteLine(result.GetProperty("optionalReadOnlyIntRecord").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("optionalReadOnlyStringRecord").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>InputModel</c>:
<code>{
  requiredString: string, # Required.
  requiredInt: number, # Required.
  requiredModel: {
  }, # Required.
  requiredIntCollection: [number], # Required.
  requiredStringCollection: [string], # Required.
  requiredModelCollection: [CollectionItem], # Required.
  requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required.
}
</code>

Response Body:

Schema for <c>RoundTripReadOnlyModel</c>:
<code>{
  requiredReadonlyString: string, # Required.
  requiredReadonlyInt: number, # Required.
  optionalReadonlyString: string, # Optional.
  optionalReadonlyInt: number, # Optional.
  requiredReadonlyModel: {
    requiredCollection: [CollectionItem], # Required.
  }, # Required.
  optionalReadonlyModel: DerivedModel, # Optional.
  requiredReadonlyFixedStringEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required.
  requiredReadonlyExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required.
  optionalReadonlyFixedStringEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required.
  optionalReadonlyExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required.
  requiredReadonlyStringList: [string], # Required.
  requiredReadonlyIntList: [number], # Required.
  requiredReadOnlyModelCollection: [CollectionItem], # Required.
  requiredReadOnlyIntRecord: Dictionary&lt;string, number&gt;, # Required.
  requiredStringRecord: Dictionary&lt;string, string&gt;, # Required.
  requiredReadOnlyModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required.
  optionalReadonlyStringList: [string], # Optional.
  optionalReadonlyIntList: [number], # Optional.
  optionalReadOnlyModelCollection: [CollectionItem], # Optional.
  optionalReadOnlyIntRecord: Dictionary&lt;string, number&gt;, # Required.
  optionalReadOnlyStringRecord: Dictionary&lt;string, string&gt;, # Required.
  optionalModelRecord: Dictionary&lt;string, RecordItem&gt;, # Optional.
}
</code>

</remarks>
    </member>
    <member name="RoundTripToOutputAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call RoundTripToOutputAsync with required request content and parse the result.
<code><![CDATA[
var client = new ModelsInCadlClient();

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredModel = new {},
    requiredFixedStringEnum = "1",
    requiredFixedIntEnum = "1",
    requiredExtensibleEnum = "1",
    requiredCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {
                    requiredCollection = new[] {},
                },
            },
        }
    },
    requiredIntRecord = new {
        key = 1234,
    },
    requiredStringRecord = new {
        key = "<String>",
    },
    requiredModelRecord = new {
        key = new {
            requiredCollection = new[] {
                new {
                    requiredModelRecord = new {},
                }
            },
        },
    },
};

Response response = await client.RoundTripToOutputAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>RoundTripModel</c>:
<code>{
  requiredString: string, # Required.
  requiredInt: number, # Required.
  requiredModel: {
  }, # Required.
  requiredFixedStringEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required.
  requiredFixedIntEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required.
  requiredExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required.
  requiredCollection: [
    {
      requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required.
    }
  ], # Required.
  requiredIntRecord: Dictionary&lt;string, number&gt;, # Required.
  requiredStringRecord: Dictionary&lt;string, string&gt;, # Required.
  requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required.
}
</code>

Response Body:

Schema for <c>OutputModel</c>:
<code>{
  requiredString: string, # Required.
  requiredInt: number, # Required.
  requiredModel: {
    requiredCollection: [
      {
        requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required.
      }
    ], # Required.
  }, # Required.
  requiredCollection: [CollectionItem], # Required.
  requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required.
}
</code>

</remarks>
    </member>
    <member name="RoundTripToOutput(RequestContent,RequestContext)">
<example>
This sample shows how to call RoundTripToOutput with required request content and parse the result.
<code><![CDATA[
var client = new ModelsInCadlClient();

var data = new {
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredModel = new {},
    requiredFixedStringEnum = "1",
    requiredFixedIntEnum = "1",
    requiredExtensibleEnum = "1",
    requiredCollection = new[] {
        new {
            requiredModelRecord = new {
                key = new {
                    requiredCollection = new[] {},
                },
            },
        }
    },
    requiredIntRecord = new {
        key = 1234,
    },
    requiredStringRecord = new {
        key = "<String>",
    },
    requiredModelRecord = new {
        key = new {
            requiredCollection = new[] {
                new {
                    requiredModelRecord = new {},
                }
            },
        },
    },
};

Response response = client.RoundTripToOutput(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>RoundTripModel</c>:
<code>{
  requiredString: string, # Required.
  requiredInt: number, # Required.
  requiredModel: {
  }, # Required.
  requiredFixedStringEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required.
  requiredFixedIntEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required.
  requiredExtensibleEnum: &quot;1&quot; | &quot;2&quot; | &quot;4&quot;, # Required.
  requiredCollection: [
    {
      requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required.
    }
  ], # Required.
  requiredIntRecord: Dictionary&lt;string, number&gt;, # Required.
  requiredStringRecord: Dictionary&lt;string, string&gt;, # Required.
  requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required.
}
</code>

Response Body:

Schema for <c>OutputModel</c>:
<code>{
  requiredString: string, # Required.
  requiredInt: number, # Required.
  requiredModel: {
    requiredCollection: [
      {
        requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required.
      }
    ], # Required.
  }, # Required.
  requiredCollection: [CollectionItem], # Required.
  requiredModelRecord: Dictionary&lt;string, RecordItem&gt;, # Required.
}
</code>

</remarks>
    </member>
    <member name="SelfReferenceAsync(RequestContext)">
<example>
This sample shows how to call SelfReferenceAsync and parse the result.
<code><![CDATA[
var client = new ModelsInCadlClient();

Response response = await client.SelfReferenceAsync();

Console.WriteLine(response.ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>ErrorModel</c>:
<code>{
  innerError: ErrorModel, # Optional.
}
</code>

</remarks>
    </member>
    <member name="SelfReference(RequestContext)">
<example>
This sample shows how to call SelfReference and parse the result.
<code><![CDATA[
var client = new ModelsInCadlClient();

Response response = client.SelfReference();

Console.WriteLine(response.ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>ErrorModel</c>:
<code>{
  innerError: ErrorModel, # Optional.
}
</code>

</remarks>
    </member>
  </members>
</doc>