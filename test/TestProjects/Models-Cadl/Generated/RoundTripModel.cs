// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace ModelsInCadl
{
    /// <summary> Model used both as input and output. </summary>
    public partial class RoundTripModel
    {
        /// <summary> Initializes a new instance of RoundTripModel. </summary>
        /// <param name="requiredString"></param>
        /// <param name="requiredInt"></param>
        /// <param name="requiredModel"></param>
        /// <param name="requiredFixedStringEnum"></param>
        /// <param name="requiredExtensibleEnum"></param>
        /// <param name="requiredCollection"></param>
        /// <param name="requiredIntRecord"></param>
        /// <param name="requiredStringRecord"></param>
        /// <param name="requiredModelRecord"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredString"/>, <paramref name="requiredModel"/>, <paramref name="requiredCollection"/>, <paramref name="requiredIntRecord"/>, <paramref name="requiredStringRecord"/> or <paramref name="requiredModelRecord"/> is null. </exception>
        public RoundTripModel(string requiredString, int requiredInt, BaseModelWithDiscriminator requiredModel, FixedStringEnum requiredFixedStringEnum, ExtensibleEnum requiredExtensibleEnum, IEnumerable<CollectionItem> requiredCollection, IDictionary<string, int> requiredIntRecord, IDictionary<string, string> requiredStringRecord, IDictionary<string, RecordItem> requiredModelRecord)
        {
            Argument.AssertNotNull(requiredString, nameof(requiredString));
            Argument.AssertNotNull(requiredModel, nameof(requiredModel));
            Argument.AssertNotNull(requiredCollection, nameof(requiredCollection));
            Argument.AssertNotNull(requiredIntRecord, nameof(requiredIntRecord));
            Argument.AssertNotNull(requiredStringRecord, nameof(requiredStringRecord));
            Argument.AssertNotNull(requiredModelRecord, nameof(requiredModelRecord));

            RequiredString = requiredString;
            RequiredInt = requiredInt;
            RequiredModel = requiredModel;
            RequiredFixedStringEnum = requiredFixedStringEnum;
            RequiredExtensibleEnum = requiredExtensibleEnum;
            RequiredCollection = requiredCollection.ToList();
            RequiredIntRecord = requiredIntRecord;
            RequiredStringRecord = requiredStringRecord;
            RequiredModelRecord = requiredModelRecord;
        }
        /// <summary> Initializes a new instance of RoundTripModel. </summary>
        /// <param name="requiredString"></param>
        /// <param name="requiredInt"></param>
        /// <param name="requiredModel"></param>
        /// <param name="requiredFixedStringEnum"></param>
        /// <param name="requiredExtensibleEnum"></param>
        /// <param name="requiredCollection"></param>
        /// <param name="requiredIntRecord"></param>
        /// <param name="requiredStringRecord"></param>
        /// <param name="requiredModelRecord"></param>
        internal RoundTripModel(string requiredString, int requiredInt, BaseModelWithDiscriminator requiredModel, FixedStringEnum requiredFixedStringEnum, ExtensibleEnum requiredExtensibleEnum, IList<CollectionItem> requiredCollection, IDictionary<string, int> requiredIntRecord, IDictionary<string, string> requiredStringRecord, IDictionary<string, RecordItem> requiredModelRecord)
        {
            RequiredString = requiredString;
            RequiredInt = requiredInt;
            RequiredModel = requiredModel;
            RequiredFixedStringEnum = requiredFixedStringEnum;
            RequiredExtensibleEnum = requiredExtensibleEnum;
            RequiredCollection = requiredCollection;
            RequiredIntRecord = requiredIntRecord;
            RequiredStringRecord = requiredStringRecord;
            RequiredModelRecord = requiredModelRecord;
        }

        public string RequiredString { get; set; }

        public int RequiredInt { get; set; }

        public BaseModelWithDiscriminator RequiredModel { get; set; }

        public FixedStringEnum RequiredFixedStringEnum { get; set; }

        public ExtensibleEnum RequiredExtensibleEnum { get; set; }

        public IList<CollectionItem> RequiredCollection { get; }

        public IDictionary<string, int> RequiredIntRecord { get; }

        public IDictionary<string, string> RequiredStringRecord { get; }

        public IDictionary<string, RecordItem> RequiredModelRecord { get; }
    }
}
