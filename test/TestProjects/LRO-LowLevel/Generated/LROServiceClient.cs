// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace LRO_LowLevel
{
    /// <summary> The LROService service client. </summary>
    public partial class LROServiceClient
    {
        private const string AuthorizationHeader = "Fake-Subscription-Key";
        private readonly AzureKeyCredential _keyCredential;
        private readonly HttpPipeline _pipeline;
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly Uri _endpoint;

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of LROServiceClient for mocking. </summary>
        protected LROServiceClient()
        {
        }

        /// <summary> Initializes a new instance of LROServiceClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public LROServiceClient(AzureKeyCredential credential, Uri endpoint = null, LROServiceClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            endpoint ??= new Uri("http://localhost:3000");
            options ??= new LROServiceClientOptions();

            _clientDiagnostics = new ClientDiagnostics(options);
            _keyCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new LowLevelCallbackPolicy() }, new HttpPipelinePolicy[] { new AzureKeyCredentialPolicy(_keyCredential, AuthorizationHeader) }, new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <summary> . </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="context"> The request context. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   name: string,
        ///   id: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Operation<BinaryData>> DoSomethingSlroAsync(bool waitForCompletion = true, RequestContext context = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("LROServiceClient.DoSomethingSlro");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDoSomethingSlroRequest();
                var operation = await LowLevelOperationHelpers.ProcessMessageAsync(_pipeline, message, _clientDiagnostics, "LROServiceClient.DoSomethingSlro", OperationFinalStateVia.Location, context).ConfigureAwait(false);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync().ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> . </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="context"> The request context. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   name: string,
        ///   id: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Operation<BinaryData> DoSomethingSlro(bool waitForCompletion = true, RequestContext context = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("LROServiceClient.DoSomethingSlro");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDoSomethingSlroRequest();
                var operation = LowLevelOperationHelpers.ProcessMessage(_pipeline, message, _clientDiagnostics, "LROServiceClient.DoSomethingSlro", OperationFinalStateVia.Location, context);
                if (waitForCompletion)
                    operation.WaitForCompletion();
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> . </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="context"> The request context. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   name: string,
        ///   id: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Operation<BinaryData>> StartDoSomethingLROAsync(bool waitForCompletion = false, RequestContext context = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("LROServiceClient.StartDoSomethingLRO");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStartDoSomethingLRORequest();
                var operation = await LowLevelOperationHelpers.ProcessMessageAsync(_pipeline, message, _clientDiagnostics, "LROServiceClient.StartDoSomethingLRO", OperationFinalStateVia.Location, context).ConfigureAwait(false);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync().ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> . </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="context"> The request context. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   name: string,
        ///   id: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Operation<BinaryData> StartDoSomethingLRO(bool waitForCompletion = false, RequestContext context = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("LROServiceClient.StartDoSomethingLRO");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStartDoSomethingLRORequest();
                var operation = LowLevelOperationHelpers.ProcessMessage(_pipeline, message, _clientDiagnostics, "LROServiceClient.StartDoSomethingLRO", OperationFinalStateVia.Location, context);
                if (waitForCompletion)
                    operation.WaitForCompletion();
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> . </summary>
        /// <param name="resourceId"> The id of the resource. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="context"> The request context. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceId"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       name: string,
        ///       id: string
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Operation<AsyncPageable<BinaryData>>> PageableSlroAsync(string resourceId, bool waitForCompletion = true, RequestContext context = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("LROServiceClient.PageableSlro");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePageableSlroRequest(resourceId);
                var operation = await LowLevelOperationHelpers.ProcessMessageAsync(_pipeline, message, _clientDiagnostics, "LROServiceClient.PageableSlro", OperationFinalStateVia.Location, context, CreateEnumerableAsync).ConfigureAwait(false);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync().ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }

            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(Response response, string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                Page<BinaryData> page;
                if (nextLink == null)
                {
                    page = LowLevelPageableHelpers.BuildPageForResponse(response, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                }
                while (!string.IsNullOrEmpty(nextLink))
                {
                    var message = CreatePageableSlroNextPageRequest(nextLink, resourceId);
                    page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, _clientDiagnostics, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                }
            }
        }

        /// <summary> . </summary>
        /// <param name="resourceId"> The id of the resource. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="context"> The request context. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceId"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       name: string,
        ///       id: string
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Operation<Pageable<BinaryData>> PageableSlro(string resourceId, bool waitForCompletion = true, RequestContext context = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("LROServiceClient.PageableSlro");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePageableSlroRequest(resourceId);
                var operation = LowLevelOperationHelpers.ProcessMessage(_pipeline, message, _clientDiagnostics, "LROServiceClient.PageableSlro", OperationFinalStateVia.Location, context, CreateEnumerable);
                if (waitForCompletion)
                    operation.WaitForCompletion();
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }

            IEnumerable<Page<BinaryData>> CreateEnumerable(Response response, string nextLink, int? pageSizeHint)
            {
                Page<BinaryData> page;
                if (nextLink == null)
                {
                    page = LowLevelPageableHelpers.BuildPageForResponse(response, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                }
                while (!string.IsNullOrEmpty(nextLink))
                {
                    var message = CreatePageableSlroNextPageRequest(nextLink, resourceId);
                    page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, _clientDiagnostics, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                }
            }
        }

        /// <summary> . </summary>
        /// <param name="resourceId"> The id of the resource. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="context"> The request context. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceId"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       name: string,
        ///       id: string
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Operation<AsyncPageable<BinaryData>>> StartPageableLROAsync(string resourceId, bool waitForCompletion = false, RequestContext context = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("LROServiceClient.StartPageableLRO");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStartPageableLRORequest(resourceId);
                var operation = await LowLevelOperationHelpers.ProcessMessageAsync(_pipeline, message, _clientDiagnostics, "LROServiceClient.StartPageableLRO", OperationFinalStateVia.Location, context, CreateEnumerableAsync).ConfigureAwait(false);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync().ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }

            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(Response response, string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                Page<BinaryData> page;
                if (nextLink == null)
                {
                    page = LowLevelPageableHelpers.BuildPageForResponse(response, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                }
                while (!string.IsNullOrEmpty(nextLink))
                {
                    var message = CreateStartPageableLRONextPageRequest(nextLink, resourceId);
                    page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, _clientDiagnostics, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                }
            }
        }

        /// <summary> . </summary>
        /// <param name="resourceId"> The id of the resource. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="context"> The request context. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceId"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       name: string,
        ///       id: string
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Operation<Pageable<BinaryData>> StartPageableLRO(string resourceId, bool waitForCompletion = false, RequestContext context = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("LROServiceClient.StartPageableLRO");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStartPageableLRORequest(resourceId);
                var operation = LowLevelOperationHelpers.ProcessMessage(_pipeline, message, _clientDiagnostics, "LROServiceClient.StartPageableLRO", OperationFinalStateVia.Location, context, CreateEnumerable);
                if (waitForCompletion)
                    operation.WaitForCompletion();
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }

            IEnumerable<Page<BinaryData>> CreateEnumerable(Response response, string nextLink, int? pageSizeHint)
            {
                Page<BinaryData> page;
                if (nextLink == null)
                {
                    page = LowLevelPageableHelpers.BuildPageForResponse(response, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                }
                while (!string.IsNullOrEmpty(nextLink))
                {
                    var message = CreateStartPageableLRONextPageRequest(nextLink, resourceId);
                    page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, _clientDiagnostics, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                }
            }
        }

        internal HttpMessage CreateDoSomethingSlroRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/test/resources", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateStartDoSomethingLRORequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/test/resources", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreatePageableSlroRequest(string resourceId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/test/resources/", false);
            uri.AppendPath(resourceId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateStartPageableLRORequest(string resourceId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/test/resources/", false);
            uri.AppendPath(resourceId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreatePageableSlroNextPageRequest(string nextLink, string resourceId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateStartPageableLRONextPageRequest(string nextLink, string resourceId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        private sealed class ResponseClassifier200 : ResponseClassifier
        {
            private static ResponseClassifier _instance;
            public static ResponseClassifier Instance => _instance ??= new ResponseClassifier200();
            public override bool IsErrorResponse(HttpMessage message)
            {
                return message.Response.Status switch
                {
                    200 => false,
                    _ => true
                };
            }
        }
    }
}
