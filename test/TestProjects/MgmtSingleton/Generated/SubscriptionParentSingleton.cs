// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;

namespace MgmtSingleton
{
    /// <summary> A Class representing a SubscriptionParentSingleton along with the instance operations that can be performed on it. </summary>
    public partial class SubscriptionParentSingleton : ArmResource
    {
        private readonly SubscriptionParentSingletonData _data;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionParentSingleton"/> class for mocking. </summary>
        protected SubscriptionParentSingleton()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "SubscriptionParentSingleton"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="resource"> The resource that is the target of operations. </param>
        internal SubscriptionParentSingleton(ArmResource options, SubscriptionParentSingletonData resource) : base(options, ResourceIdentifier.RootResourceIdentifier)
        {
            HasData = true;
            _data = resource;
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionParentSingleton"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        internal SubscriptionParentSingleton(ArmResource options) : base(options, ResourceIdentifier.RootResourceIdentifier)
        {
        }

        /// <summary> Gets the parent resource of this resource. </summary>
        public ArmResource Parent { get; }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Billing/SubscriptionParentSingleton/default";

        /// <summary> Gets the valid resource type for the operations. </summary>
        protected override ResourceType ValidResourceType => ResourceType;

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual SubscriptionParentSingletonData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }
    }
}
