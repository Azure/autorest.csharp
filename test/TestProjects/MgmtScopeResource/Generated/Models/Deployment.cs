// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace MgmtScopeResource.Models
{
    /// <summary> Deployment operation parameters. </summary>
    public partial class Deployment
    {
        private Dictionary<string, BinaryData> _rawData;

        /// <summary>
        /// Initializes a new instance of global::MgmtScopeResource.Models.Deployment
        ///
        /// </summary>
        /// <param name="properties"> The deployment properties. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="properties"/> is null. </exception>
        public Deployment(DeploymentProperties properties)
        {
            Argument.AssertNotNull(properties, nameof(properties));

            Properties = properties;
            Tags = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary>
        /// Initializes a new instance of global::MgmtScopeResource.Models.Deployment
        ///
        /// </summary>
        /// <param name="location"> The location to store the deployment data. </param>
        /// <param name="properties"> The deployment properties. </param>
        /// <param name="tags"> Deployment tags. </param>
        /// <param name="rawData"> Keeps track of any properties unknown to the library. </param>
        internal Deployment(string location, DeploymentProperties properties, IDictionary<string, string> tags, Dictionary<string, BinaryData> rawData)
        {
            Location = location;
            Properties = properties;
            Tags = tags;
            _rawData = rawData;
        }

        /// <summary> The location to store the deployment data. </summary>
        public string Location { get; set; }
        /// <summary> The deployment properties. </summary>
        public DeploymentProperties Properties { get; }
        /// <summary> Deployment tags. </summary>
        public IDictionary<string, string> Tags { get; }
    }
}
