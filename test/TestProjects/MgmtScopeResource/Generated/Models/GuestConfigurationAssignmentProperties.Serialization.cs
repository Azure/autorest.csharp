// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;

namespace MgmtScopeResource.Models
{
    public partial class GuestConfigurationAssignmentProperties : IUtf8JsonSerializable, IJsonModel<GuestConfigurationAssignmentProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<GuestConfigurationAssignmentProperties>)this).Write(writer, ModelReaderWriterOptions.Wire);

        void IJsonModel<GuestConfigurationAssignmentProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<GuestConfigurationAssignmentProperties>)this).GetWireFormat(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<GuestConfigurationAssignmentProperties>)} interface");
            }

            writer.WriteStartObject();
            if (options.Format == "J")
            {
                if (Optional.IsDefined(TargetResourceId))
                {
                    if (TargetResourceId != null)
                    {
                        writer.WritePropertyName("targetResourceId"u8);
                        writer.WriteStringValue(TargetResourceId);
                    }
                    else
                    {
                        writer.WriteNull("targetResourceId");
                    }
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(ComplianceStatus))
                {
                    writer.WritePropertyName("complianceStatus"u8);
                    writer.WriteStringValue(ComplianceStatus.Value.ToString());
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(LastComplianceStatusChecked))
                {
                    if (LastComplianceStatusChecked != null)
                    {
                        writer.WritePropertyName("lastComplianceStatusChecked"u8);
                        writer.WriteStringValue(LastComplianceStatusChecked.Value, "O");
                    }
                    else
                    {
                        writer.WriteNull("lastComplianceStatusChecked");
                    }
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(LatestReportId))
                {
                    if (LatestReportId != null)
                    {
                        writer.WritePropertyName("latestReportId"u8);
                        writer.WriteStringValue(LatestReportId);
                    }
                    else
                    {
                        writer.WriteNull("latestReportId");
                    }
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(ParameterHash))
                {
                    if (ParameterHash != null)
                    {
                        writer.WritePropertyName("parameterHash"u8);
                        writer.WriteStringValue(ParameterHash);
                    }
                    else
                    {
                        writer.WriteNull("parameterHash");
                    }
                }
            }
            if (Optional.IsDefined(Context))
            {
                writer.WritePropertyName("context"u8);
                writer.WriteStringValue(Context);
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(AssignmentHash))
                {
                    if (AssignmentHash != null)
                    {
                        writer.WritePropertyName("assignmentHash"u8);
                        writer.WriteStringValue(AssignmentHash);
                    }
                    else
                    {
                        writer.WriteNull("assignmentHash");
                    }
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(ProvisioningState))
                {
                    if (ProvisioningState != null)
                    {
                        writer.WritePropertyName("provisioningState"u8);
                        writer.WriteStringValue(ProvisioningState.Value.ToString());
                    }
                    else
                    {
                        writer.WriteNull("provisioningState");
                    }
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(ResourceType))
                {
                    if (ResourceType != null)
                    {
                        writer.WritePropertyName("resourceType"u8);
                        writer.WriteStringValue(ResourceType);
                    }
                    else
                    {
                        writer.WriteNull("resourceType");
                    }
                }
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        GuestConfigurationAssignmentProperties IJsonModel<GuestConfigurationAssignmentProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(GuestConfigurationAssignmentProperties)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeGuestConfigurationAssignmentProperties(document.RootElement, options);
        }

        internal static GuestConfigurationAssignmentProperties DeserializeGuestConfigurationAssignmentProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.Wire;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> targetResourceId = default;
            Optional<ComplianceStatus> complianceStatus = default;
            Optional<DateTimeOffset?> lastComplianceStatusChecked = default;
            Optional<string> latestReportId = default;
            Optional<string> parameterHash = default;
            Optional<string> context = default;
            Optional<string> assignmentHash = default;
            Optional<ProvisioningState?> provisioningState = default;
            Optional<string> resourceType = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("targetResourceId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        targetResourceId = null;
                        continue;
                    }
                    targetResourceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("complianceStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    complianceStatus = new ComplianceStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("lastComplianceStatusChecked"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        lastComplianceStatusChecked = null;
                        continue;
                    }
                    lastComplianceStatusChecked = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("latestReportId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        latestReportId = null;
                        continue;
                    }
                    latestReportId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("parameterHash"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        parameterHash = null;
                        continue;
                    }
                    parameterHash = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("context"u8))
                {
                    context = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("assignmentHash"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        assignmentHash = null;
                        continue;
                    }
                    assignmentHash = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        provisioningState = null;
                        continue;
                    }
                    provisioningState = new ProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("resourceType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        resourceType = null;
                        continue;
                    }
                    resourceType = property.Value.GetString();
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new GuestConfigurationAssignmentProperties(targetResourceId.Value, Optional.ToNullable(complianceStatus), Optional.ToNullable(lastComplianceStatusChecked), latestReportId.Value, parameterHash.Value, context.Value, assignmentHash.Value, Optional.ToNullable(provisioningState), resourceType.Value, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<GuestConfigurationAssignmentProperties>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(GuestConfigurationAssignmentProperties)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        GuestConfigurationAssignmentProperties IPersistableModel<GuestConfigurationAssignmentProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(GuestConfigurationAssignmentProperties)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeGuestConfigurationAssignmentProperties(document.RootElement, options);
        }

        string IPersistableModel<GuestConfigurationAssignmentProperties>.GetWireFormat(ModelReaderWriterOptions options) => "J";
    }
}
