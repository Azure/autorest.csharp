// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Resources;
using MgmtScopeResource.Models;

namespace MgmtScopeResource
{
    /// <summary> A class to add extension methods to Tenant. </summary>
    public static partial class TenantExtensions
    {
        private static TenantExtensionClient GetExtensionClient(Tenant tenant)
        {
            return tenant.GetCachedClient((client) =>
            {
                return new TenantExtensionClient(client, tenant.Id);
            }
            );
        }

        /// <summary> Gets a collection of DeploymentExtendedResources in the DeploymentExtendedResource. </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of DeploymentExtendedResources and their operations over a DeploymentExtendedResource. </returns>
        public static DeploymentExtendedCollection GetDeploymentExtendedResources(this Tenant tenant)
        {
            return GetExtensionClient(tenant).GetDeploymentExtendedResources();
        }

        /// <summary>
        /// Gets a deployment.
        /// Request Path: /{scope}/providers/Microsoft.Resources/deployments/{deploymentName}
        /// Operation Id: Deployments_GetAtScope
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="deploymentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        public static async Task<Response<DeploymentExtendedResource>> GetDeploymentExtendedResourceAsync(this Tenant tenant, string deploymentName, CancellationToken cancellationToken = default)
        {
            return await tenant.GetDeploymentExtendedResources().GetAsync(deploymentName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a deployment.
        /// Request Path: /{scope}/providers/Microsoft.Resources/deployments/{deploymentName}
        /// Operation Id: Deployments_GetAtScope
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="deploymentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        public static Response<DeploymentExtendedResource> GetDeploymentExtendedResource(this Tenant tenant, string deploymentName, CancellationToken cancellationToken = default)
        {
            return tenant.GetDeploymentExtendedResources().Get(deploymentName, cancellationToken);
        }

        /// <summary> Gets a collection of ResourceLinkResources in the ResourceLinkResource. </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="scope"> The fully qualified ID of the scope for getting the resource links. For example, to list resource links at and under a resource group, set the scope to /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/> is null. </exception>
        /// <returns> An object representing collection of ResourceLinkResources and their operations over a ResourceLinkResource. </returns>
        public static ResourceLinkCollection GetResourceLinkResources(this Tenant tenant, string scope)
        {
            Argument.AssertNotNull(scope, nameof(scope));

            return GetExtensionClient(tenant).GetResourceLinkResources(scope);
        }

        /// <summary>
        /// Gets a resource link with the specified ID.
        /// Request Path: /{linkId}
        /// Operation Id: ResourceLinks_Get
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="scope"> The fully qualified ID of the scope for getting the resource links. For example, to list resource links at and under a resource group, set the scope to /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/> is null. </exception>
        public static async Task<Response<ResourceLinkResource>> GetResourceLinkResourceAsync(this Tenant tenant, string scope, CancellationToken cancellationToken = default)
        {
            return await tenant.GetResourceLinkResources(scope).GetAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a resource link with the specified ID.
        /// Request Path: /{linkId}
        /// Operation Id: ResourceLinks_Get
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="scope"> The fully qualified ID of the scope for getting the resource links. For example, to list resource links at and under a resource group, set the scope to /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/> is null. </exception>
        public static Response<ResourceLinkResource> GetResourceLinkResource(this Tenant tenant, string scope, CancellationToken cancellationToken = default)
        {
            return tenant.GetResourceLinkResources(scope).Get(cancellationToken);
        }

        /// <summary>
        /// Calculate the hash of the given template.
        /// Request Path: /providers/Microsoft.Resources/calculateTemplateHash
        /// Operation Id: Deployments_CalculateTemplateHash
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="template"> The template provided to calculate hash. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="template"/> is null. </exception>
        public static async Task<Response<TemplateHashResult>> CalculateTemplateHashDeploymentAsync(this Tenant tenant, BinaryData template, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(template, nameof(template));

            return await GetExtensionClient(tenant).CalculateTemplateHashDeploymentAsync(template, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Calculate the hash of the given template.
        /// Request Path: /providers/Microsoft.Resources/calculateTemplateHash
        /// Operation Id: Deployments_CalculateTemplateHash
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="template"> The template provided to calculate hash. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="template"/> is null. </exception>
        public static Response<TemplateHashResult> CalculateTemplateHashDeployment(this Tenant tenant, BinaryData template, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(template, nameof(template));

            return GetExtensionClient(tenant).CalculateTemplateHashDeployment(template, cancellationToken);
        }
    }
}
