// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.ResourceManager.Management;

namespace MgmtScopeResource
{
    /// <summary> A class to add extension methods to ManagementGroup. </summary>
    public static partial class ManagementGroupExtensions
    {
        private static ManagementGroupExtensionClient GetExtensionClient(ManagementGroup managementGroup)
        {
            return managementGroup.GetCachedClient((client) =>
            {
                return new ManagementGroupExtensionClient(client, managementGroup.Id);
            }
            );
        }

        /// <summary> Gets a collection of DeploymentExtendeds in the DeploymentExtended. </summary>
        /// <param name="managementGroup"> The <see cref="ManagementGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of DeploymentExtendeds and their operations over a DeploymentExtended. </returns>
        public static DeploymentExtendedCollection GetDeploymentExtendeds(this ManagementGroup managementGroup)
        {
            return GetExtensionClient(managementGroup).GetDeploymentExtendeds();
        }

        /// <summary>
        /// Gets a deployment.
        /// Request Path: /{scope}/providers/Microsoft.Resources/deployments/{deploymentName}
        /// Operation Id: Deployments_GetAtScope
        /// </summary>
        /// <param name="managementGroup"> The <see cref="ManagementGroup" /> instance the method will execute against. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="deploymentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        public static async Task<Response<DeploymentExtended>> GetDeploymentExtendedAsync(this ManagementGroup managementGroup, string deploymentName, CancellationToken cancellationToken = default)
        {
            return await managementGroup.GetDeploymentExtendeds().GetAsync(deploymentName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a deployment.
        /// Request Path: /{scope}/providers/Microsoft.Resources/deployments/{deploymentName}
        /// Operation Id: Deployments_GetAtScope
        /// </summary>
        /// <param name="managementGroup"> The <see cref="ManagementGroup" /> instance the method will execute against. </param>
        /// <param name="deploymentName"> The name of the deployment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="deploymentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentName"/> is null. </exception>
        public static Response<DeploymentExtended> GetDeploymentExtended(this ManagementGroup managementGroup, string deploymentName, CancellationToken cancellationToken = default)
        {
            return managementGroup.GetDeploymentExtendeds().Get(deploymentName, cancellationToken);
        }
    }
}
