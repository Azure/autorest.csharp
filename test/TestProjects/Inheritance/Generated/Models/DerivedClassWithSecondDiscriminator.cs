// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core.Expressions.DataFactory;

namespace Inheritance.Models
{
    /// <summary>
    /// The DerivedClassWithSecondDiscriminator.
    /// Please note <see cref="DerivedClassWithSecondDiscriminator"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="DerivedClassWithSecondDiscriminatorChildOne"/> and <see cref="DerivedClassWithSecondDiscriminatorChildTwo"/>.
    /// </summary>
    public partial class DerivedClassWithSecondDiscriminator : BaseClassWithDiscriminator
    {
        /// <summary> Initializes a new instance of DerivedClassWithSecondDiscriminator. </summary>
        public DerivedClassWithSecondDiscriminator()
        {
            SecondDiscriminatorProperty = "DerivedClassWithSecondDiscriminator";
        }

        /// <summary> Initializes a new instance of DerivedClassWithSecondDiscriminator. </summary>
        /// <param name="baseClassProperty"></param>
        /// <param name="dfeString"> Any object. </param>
        /// <param name="dfeDouble"> Any object. </param>
        /// <param name="dfeBool"> Any object. </param>
        /// <param name="dfeInt"> Any object. </param>
        /// <param name="dfeObject"> Any object. </param>
        /// <param name="dfeListOfT"> Any object. </param>
        /// <param name="dfeListOfString"> Any object. </param>
        /// <param name="dfeKeyValuePairs"> Any object. </param>
        /// <param name="dfeDateTime"> Any object. </param>
        /// <param name="dfeDuration"> Any object. </param>
        /// <param name="dfeUri"> Any object. </param>
        /// <param name="discriminatorProperty"></param>
        /// <param name="secondDiscriminatorProperty"></param>
        internal DerivedClassWithSecondDiscriminator(string baseClassProperty, DataFactoryExpression<string> dfeString, DataFactoryExpression<double> dfeDouble, DataFactoryExpression<bool> dfeBool, DataFactoryExpression<int> dfeInt, DataFactoryExpression<BinaryData> dfeObject, DataFactoryExpression<IList<SeparateClass>> dfeListOfT, DataFactoryExpression<IList<string>> dfeListOfString, DataFactoryExpression<IDictionary<string, string>> dfeKeyValuePairs, DataFactoryExpression<DateTimeOffset> dfeDateTime, DataFactoryExpression<TimeSpan> dfeDuration, DataFactoryExpression<Uri> dfeUri, string discriminatorProperty, string secondDiscriminatorProperty) : base(baseClassProperty, dfeString, dfeDouble, dfeBool, dfeInt, dfeObject, dfeListOfT, dfeListOfString, dfeKeyValuePairs, dfeDateTime, dfeDuration, dfeUri, discriminatorProperty)
        {
            SecondDiscriminatorProperty = secondDiscriminatorProperty ?? "DerivedClassWithSecondDiscriminator";
        }

        /// <summary> Gets or sets the second discriminator property. </summary>
        internal string SecondDiscriminatorProperty { get; set; }
    }
}
