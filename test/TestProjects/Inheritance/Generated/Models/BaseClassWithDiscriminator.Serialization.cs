// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Expressions.DataFactory;

namespace Inheritance.Models
{
    public partial class BaseClassWithDiscriminator : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("DiscriminatorProperty"u8);
            writer.WriteStringValue(DiscriminatorProperty);
            if (Optional.IsDefined(BaseClassProperty))
            {
                writer.WritePropertyName("BaseClassProperty"u8);
                writer.WriteStringValue(BaseClassProperty);
            }
            if (Optional.IsDefined(DfeString))
            {
                writer.WritePropertyName("DfeString"u8);
                ((IJsonModel<DataFactoryElement<string>>)DfeString).Write(writer, ModelSerializationExtensions.WireOptions);
            }
            if (Optional.IsDefined(DfeDouble))
            {
                writer.WritePropertyName("DfeDouble"u8);
                ((IJsonModel<DataFactoryElement<double>>)DfeDouble).Write(writer, ModelSerializationExtensions.WireOptions);
            }
            if (Optional.IsDefined(DfeBool))
            {
                writer.WritePropertyName("DfeBool"u8);
                ((IJsonModel<DataFactoryElement<bool>>)DfeBool).Write(writer, ModelSerializationExtensions.WireOptions);
            }
            if (Optional.IsDefined(DfeInt))
            {
                writer.WritePropertyName("DfeInt"u8);
                ((IJsonModel<DataFactoryElement<int>>)DfeInt).Write(writer, ModelSerializationExtensions.WireOptions);
            }
            if (Optional.IsDefined(DfeObject))
            {
                writer.WritePropertyName("DfeObject"u8);
                ((IJsonModel<DataFactoryElement<BinaryData>>)DfeObject).Write(writer, ModelSerializationExtensions.WireOptions);
            }
            if (Optional.IsDefined(DfeListOfT))
            {
                writer.WritePropertyName("DfeListOfT"u8);
                ((IJsonModel<DataFactoryElement<IList<SeparateClass>>>)DfeListOfT).Write(writer, ModelSerializationExtensions.WireOptions);
            }
            if (Optional.IsDefined(DfeListOfString))
            {
                writer.WritePropertyName("DfeListOfString"u8);
                ((IJsonModel<DataFactoryElement<IList<string>>>)DfeListOfString).Write(writer, ModelSerializationExtensions.WireOptions);
            }
            if (Optional.IsDefined(DfeKeyValuePairs))
            {
                writer.WritePropertyName("DfeKeyValuePairs"u8);
                ((IJsonModel<DataFactoryElement<IDictionary<string, string>>>)DfeKeyValuePairs).Write(writer, ModelSerializationExtensions.WireOptions);
            }
            if (Optional.IsDefined(DfeDateTime))
            {
                writer.WritePropertyName("DfeDateTime"u8);
                ((IJsonModel<DataFactoryElement<DateTimeOffset>>)DfeDateTime).Write(writer, ModelSerializationExtensions.WireOptions);
            }
            if (Optional.IsDefined(DfeDuration))
            {
                writer.WritePropertyName("DfeDuration"u8);
                ((IJsonModel<DataFactoryElement<TimeSpan>>)DfeDuration).Write(writer, ModelSerializationExtensions.WireOptions);
            }
            if (Optional.IsDefined(DfeUri))
            {
                writer.WritePropertyName("DfeUri"u8);
                ((IJsonModel<DataFactoryElement<Uri>>)DfeUri).Write(writer, ModelSerializationExtensions.WireOptions);
            }
            writer.WriteEndObject();
        }

        internal static BaseClassWithDiscriminator DeserializeBaseClassWithDiscriminator(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("DiscriminatorProperty", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "ClassThatInheritsFromBaseClassWithDiscriminator": return ClassThatInheritsFromBaseClassWithDiscriminator.DeserializeClassThatInheritsFromBaseClassWithDiscriminator(element);
                    case "ClassThatInheritsFromBaseClassWithDiscriminatorAndSomeProperties": return ClassThatInheritsFromBaseClassWithDiscriminatorAndSomeProperties.DeserializeClassThatInheritsFromBaseClassWithDiscriminatorAndSomeProperties(element);
                }
            }
            return UnknownBaseClassWithDiscriminator.DeserializeUnknownBaseClassWithDiscriminator(element);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static new BaseClassWithDiscriminator FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeBaseClassWithDiscriminator(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal override RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
