// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Expressions.DataFactory;

namespace Inheritance.Models
{
    public partial class ClassThatInheritsFromBaseClassWithDiscriminatorAndSomeProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(SomeProperty))
            {
                writer.WritePropertyName("SomeProperty"u8);
                writer.WriteStringValue(SomeProperty);
            }
            if (Optional.IsDefined(SomeOtherProperty))
            {
                writer.WritePropertyName("SomeOtherProperty"u8);
                writer.WriteStringValue(SomeOtherProperty);
            }
            writer.WritePropertyName("DiscriminatorProperty"u8);
            writer.WriteStringValue(DiscriminatorProperty);
            if (Optional.IsDefined(BaseClassProperty))
            {
                writer.WritePropertyName("BaseClassProperty"u8);
                writer.WriteStringValue(BaseClassProperty);
            }
            if (Optional.IsDefined(DfeString))
            {
                writer.WritePropertyName("DfeString"u8);
                ModelSerializationExtensions.JsonSerialize(writer, DfeString, ModelSerializationExtensions.Options);
            }
            if (Optional.IsDefined(DfeDouble))
            {
                writer.WritePropertyName("DfeDouble"u8);
                ModelSerializationExtensions.JsonSerialize(writer, DfeDouble, ModelSerializationExtensions.Options);
            }
            if (Optional.IsDefined(DfeBool))
            {
                writer.WritePropertyName("DfeBool"u8);
                ModelSerializationExtensions.JsonSerialize(writer, DfeBool, ModelSerializationExtensions.Options);
            }
            if (Optional.IsDefined(DfeInt))
            {
                writer.WritePropertyName("DfeInt"u8);
                ModelSerializationExtensions.JsonSerialize(writer, DfeInt, ModelSerializationExtensions.Options);
            }
            if (Optional.IsDefined(DfeObject))
            {
                writer.WritePropertyName("DfeObject"u8);
                ModelSerializationExtensions.JsonSerialize(writer, DfeObject, ModelSerializationExtensions.Options);
            }
            if (Optional.IsDefined(DfeListOfT))
            {
                writer.WritePropertyName("DfeListOfT"u8);
                ModelSerializationExtensions.JsonSerialize(writer, DfeListOfT, ModelSerializationExtensions.Options);
            }
            if (Optional.IsDefined(DfeListOfString))
            {
                writer.WritePropertyName("DfeListOfString"u8);
                ModelSerializationExtensions.JsonSerialize(writer, DfeListOfString, ModelSerializationExtensions.Options);
            }
            if (Optional.IsDefined(DfeKeyValuePairs))
            {
                writer.WritePropertyName("DfeKeyValuePairs"u8);
                ModelSerializationExtensions.JsonSerialize(writer, DfeKeyValuePairs, ModelSerializationExtensions.Options);
            }
            if (Optional.IsDefined(DfeDateTime))
            {
                writer.WritePropertyName("DfeDateTime"u8);
                ModelSerializationExtensions.JsonSerialize(writer, DfeDateTime, ModelSerializationExtensions.Options);
            }
            if (Optional.IsDefined(DfeDuration))
            {
                writer.WritePropertyName("DfeDuration"u8);
                ModelSerializationExtensions.JsonSerialize(writer, DfeDuration, ModelSerializationExtensions.Options);
            }
            if (Optional.IsDefined(DfeUri))
            {
                writer.WritePropertyName("DfeUri"u8);
                ModelSerializationExtensions.JsonSerialize(writer, DfeUri, ModelSerializationExtensions.Options);
            }
            writer.WriteEndObject();
        }

        internal static ClassThatInheritsFromBaseClassWithDiscriminatorAndSomeProperties DeserializeClassThatInheritsFromBaseClassWithDiscriminatorAndSomeProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string someProperty = default;
            string someOtherProperty = default;
            string discriminatorProperty = default;
            string baseClassProperty = default;
            DataFactoryElement<string> dfeString = default;
            DataFactoryElement<double> dfeDouble = default;
            DataFactoryElement<bool> dfeBool = default;
            DataFactoryElement<int> dfeInt = default;
            DataFactoryElement<BinaryData> dfeObject = default;
            DataFactoryElement<IList<SeparateClass>> dfeListOfT = default;
            DataFactoryElement<IList<string>> dfeListOfString = default;
            DataFactoryElement<IDictionary<string, string>> dfeKeyValuePairs = default;
            DataFactoryElement<DateTimeOffset> dfeDateTime = default;
            DataFactoryElement<TimeSpan> dfeDuration = default;
            DataFactoryElement<Uri> dfeUri = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("SomeProperty"u8))
                {
                    someProperty = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("SomeOtherProperty"u8))
                {
                    someOtherProperty = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("DiscriminatorProperty"u8))
                {
                    discriminatorProperty = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("BaseClassProperty"u8))
                {
                    baseClassProperty = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("DfeString"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dfeString = ModelSerializationExtensions.JsonDeserialize<DataFactoryElement<string>>(property.Value.GetRawText(), ModelSerializationExtensions.Options);
                    continue;
                }
                if (property.NameEquals("DfeDouble"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dfeDouble = ModelSerializationExtensions.JsonDeserialize<DataFactoryElement<double>>(property.Value.GetRawText(), ModelSerializationExtensions.Options);
                    continue;
                }
                if (property.NameEquals("DfeBool"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dfeBool = ModelSerializationExtensions.JsonDeserialize<DataFactoryElement<bool>>(property.Value.GetRawText(), ModelSerializationExtensions.Options);
                    continue;
                }
                if (property.NameEquals("DfeInt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dfeInt = ModelSerializationExtensions.JsonDeserialize<DataFactoryElement<int>>(property.Value.GetRawText(), ModelSerializationExtensions.Options);
                    continue;
                }
                if (property.NameEquals("DfeObject"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dfeObject = ModelSerializationExtensions.JsonDeserialize<DataFactoryElement<BinaryData>>(property.Value.GetRawText(), ModelSerializationExtensions.Options);
                    continue;
                }
                if (property.NameEquals("DfeListOfT"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dfeListOfT = ModelSerializationExtensions.JsonDeserialize<DataFactoryElement<IList<SeparateClass>>>(property.Value.GetRawText(), ModelSerializationExtensions.Options);
                    continue;
                }
                if (property.NameEquals("DfeListOfString"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dfeListOfString = ModelSerializationExtensions.JsonDeserialize<DataFactoryElement<IList<string>>>(property.Value.GetRawText(), ModelSerializationExtensions.Options);
                    continue;
                }
                if (property.NameEquals("DfeKeyValuePairs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dfeKeyValuePairs = ModelSerializationExtensions.JsonDeserialize<DataFactoryElement<IDictionary<string, string>>>(property.Value.GetRawText(), ModelSerializationExtensions.Options);
                    continue;
                }
                if (property.NameEquals("DfeDateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dfeDateTime = ModelSerializationExtensions.JsonDeserialize<DataFactoryElement<DateTimeOffset>>(property.Value.GetRawText(), ModelSerializationExtensions.Options);
                    continue;
                }
                if (property.NameEquals("DfeDuration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dfeDuration = ModelSerializationExtensions.JsonDeserialize<DataFactoryElement<TimeSpan>>(property.Value.GetRawText(), ModelSerializationExtensions.Options);
                    continue;
                }
                if (property.NameEquals("DfeUri"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dfeUri = ModelSerializationExtensions.JsonDeserialize<DataFactoryElement<Uri>>(property.Value.GetRawText(), ModelSerializationExtensions.Options);
                    continue;
                }
            }
            return new ClassThatInheritsFromBaseClassWithDiscriminatorAndSomeProperties(
                baseClassProperty,
                dfeString,
                dfeDouble,
                dfeBool,
                dfeInt,
                dfeObject,
                dfeListOfT,
                dfeListOfString,
                dfeKeyValuePairs,
                dfeDateTime,
                dfeDuration,
                dfeUri,
                discriminatorProperty,
                someProperty,
                someOtherProperty);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static new ClassThatInheritsFromBaseClassWithDiscriminatorAndSomeProperties FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content, ModelSerializationExtensions.JsonDocumentOptions);
            return DeserializeClassThatInheritsFromBaseClassWithDiscriminatorAndSomeProperties(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal override RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
