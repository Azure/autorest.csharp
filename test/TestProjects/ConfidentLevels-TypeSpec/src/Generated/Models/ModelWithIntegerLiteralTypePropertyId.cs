// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Globalization;

namespace ConfidentLevelsInTsp.Models
{
    /// <summary> The ModelWithIntegerLiteralTypeProperty_id. </summary>
    public readonly partial struct ModelWithIntegerLiteralTypePropertyId : IEquatable<ModelWithIntegerLiteralTypePropertyId>
    {
        private readonly int _value;

        /// <summary> Initializes a new instance of <see cref="ModelWithIntegerLiteralTypePropertyId"/>. </summary>
        public ModelWithIntegerLiteralTypePropertyId(int value)
        {
            _value = value;
        }

        private const int _1Value = 1;

        /// <summary> 1. </summary>
        public static ModelWithIntegerLiteralTypePropertyId _1 { get; } = new ModelWithIntegerLiteralTypePropertyId(_1Value);

        internal int ToSerialInt32() => _value;

        /// <summary> Determines if two <see cref="ModelWithIntegerLiteralTypePropertyId"/> values are the same. </summary>
        public static bool operator ==(ModelWithIntegerLiteralTypePropertyId left, ModelWithIntegerLiteralTypePropertyId right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ModelWithIntegerLiteralTypePropertyId"/> values are not the same. </summary>
        public static bool operator !=(ModelWithIntegerLiteralTypePropertyId left, ModelWithIntegerLiteralTypePropertyId right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ModelWithIntegerLiteralTypePropertyId"/>. </summary>
        public static implicit operator ModelWithIntegerLiteralTypePropertyId(int value) => new ModelWithIntegerLiteralTypePropertyId(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ModelWithIntegerLiteralTypePropertyId other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ModelWithIntegerLiteralTypePropertyId other) => Equals(_value, other._value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value.GetHashCode();
        /// <inheritdoc />
        public override string ToString() => _value.ToString(CultureInfo.InvariantCulture);
    }
}
