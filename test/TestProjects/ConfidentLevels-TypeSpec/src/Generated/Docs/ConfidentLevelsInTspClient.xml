<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="UnionInRequestPropertyAsync(ModelWithUnionProperty,CancellationToken)"></member>
    <member name="UnionInRequestProperty(ModelWithUnionProperty,CancellationToken)"></member>
    <member name="UnionInRequestPropertyAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call UnionInRequestPropertyAsync with required request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["unionProperty"] = "<unionProperty>",
});
Response response = await client.UnionInRequestPropertyAsync(content);
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="UnionInRequestProperty(RequestContent,RequestContext)">
      <example>
This sample shows how to call UnionInRequestProperty with required request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["unionProperty"] = "<unionProperty>",
});
Response response = client.UnionInRequestProperty(content);
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="UnionInResponsePropertyAsync(UsualModel,CancellationToken)"></member>
    <member name="UnionInResponseProperty(UsualModel,CancellationToken)"></member>
    <member name="UnionInResponsePropertyAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call UnionInResponsePropertyAsync with required request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
    ["age"] = 1234,
});
Response response = await client.UnionInResponsePropertyAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("unionProperty").ToString());
]]></code>
This sample shows how to call UnionInResponsePropertyAsync with all request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
    ["age"] = 1234,
    ["size"] = 123.45,
});
Response response = await client.UnionInResponsePropertyAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("unionProperty").ToString());
]]></code></example>
    </member>
    <member name="UnionInResponseProperty(RequestContent,RequestContext)">
      <example>
This sample shows how to call UnionInResponseProperty with required request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
    ["age"] = 1234,
});
Response response = client.UnionInResponseProperty(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("unionProperty").ToString());
]]></code>
This sample shows how to call UnionInResponseProperty with all request content, and how to parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
    ["age"] = 1234,
    ["size"] = 123.45,
});
Response response = client.UnionInResponseProperty(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("unionProperty").ToString());
]]></code></example>
    </member>
    <member name="UnionWithSelfReferenceAsync(NonConfidentModelWithSelfReference,CancellationToken)"></member>
    <member name="UnionWithSelfReference(NonConfidentModelWithSelfReference,CancellationToken)"></member>
    <member name="UnionWithSelfReferenceAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call UnionWithSelfReferenceAsync with required request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
    ["selfReference"] = new List<object>()
{
null
},
    ["unionProperty"] = "<unionProperty>",
});
Response response = await client.UnionWithSelfReferenceAsync(content);
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="UnionWithSelfReference(RequestContent,RequestContext)">
      <example>
This sample shows how to call UnionWithSelfReference with required request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
    ["selfReference"] = new List<object>()
{
null
},
    ["unionProperty"] = "<unionProperty>",
});
Response response = client.UnionWithSelfReference(content);
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="UnionWithInderictAsync(NonConfidentModelWithIndirectSelfReference,CancellationToken)"></member>
    <member name="UnionWithInderict(NonConfidentModelWithIndirectSelfReference,CancellationToken)"></member>
    <member name="UnionWithInderictAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call UnionWithInderictAsync with required request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
});
Response response = await client.UnionWithInderictAsync(content);
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UnionWithInderictAsync with all request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
    ["reference"] = new List<object>()
{
new Dictionary<string, object>()
{
["something"] = "<something>",
["reference"] = new Dictionary<string, object>()
{
["name"] = "<name>",
["selfReference"] = new List<object>()
{
null
},
["unionProperty"] = "<unionProperty>",
},
["unionProperty"] = "<unionProperty>",
}
},
});
Response response = await client.UnionWithInderictAsync(content);
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="UnionWithInderict(RequestContent,RequestContext)">
      <example>
This sample shows how to call UnionWithInderict with required request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
});
Response response = client.UnionWithInderict(content);
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UnionWithInderict with all request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
    ["reference"] = new List<object>()
{
new Dictionary<string, object>()
{
["something"] = "<something>",
["reference"] = new Dictionary<string, object>()
{
["name"] = "<name>",
["selfReference"] = new List<object>()
{
null
},
["unionProperty"] = "<unionProperty>",
},
["unionProperty"] = "<unionProperty>",
}
},
});
Response response = client.UnionWithInderict(content);
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="LiteralOfIntegerAsync(ModelWithIntegerLiteralTypeProperty,CancellationToken)"></member>
    <member name="LiteralOfInteger(ModelWithIntegerLiteralTypeProperty,CancellationToken)"></member>
    <member name="LiteralOfIntegerAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call LiteralOfIntegerAsync with required request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
    ["id"] = 1,
});
Response response = await client.LiteralOfIntegerAsync(content);
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="LiteralOfInteger(RequestContent,RequestContext)">
      <example>
This sample shows how to call LiteralOfInteger with required request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
    ["id"] = 1,
});
Response response = client.LiteralOfInteger(content);
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="LiteralOfFloatAsync(ModelWithFloatLiteralTypeProperty,CancellationToken)"></member>
    <member name="LiteralOfFloat(ModelWithFloatLiteralTypeProperty,CancellationToken)"></member>
    <member name="LiteralOfFloatAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call LiteralOfFloatAsync with required request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
    ["id"] = 3.141592F,
});
Response response = await client.LiteralOfFloatAsync(content);
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="LiteralOfFloat(RequestContent,RequestContext)">
      <example>
This sample shows how to call LiteralOfFloat with required request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
    ["id"] = 3.141592F,
});
Response response = client.LiteralOfFloat(content);
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="ConfidentOperationWithDiscriminatorAsync(Pet,CancellationToken)">
      <example>
This sample shows how to call ConfidentOperationWithDiscriminatorAsync with required parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

Pet input = new Cat("<name>", "<meow>");
Response<Pet> response = await client.ConfidentOperationWithDiscriminatorAsync(input);
]]></code></example>
    </member>
    <member name="ConfidentOperationWithDiscriminator(Pet,CancellationToken)">
      <example>
This sample shows how to call ConfidentOperationWithDiscriminator with required parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

Pet input = new Cat("<name>", "<meow>");
Response<Pet> response = client.ConfidentOperationWithDiscriminator(input);
]]></code></example>
    </member>
    <member name="ConfidentOperationWithDiscriminatorAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call ConfidentOperationWithDiscriminatorAsync with required request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["meow"] = "<meow>",
    ["kind"] = "cat",
    ["name"] = "<name>",
});
Response response = await client.ConfidentOperationWithDiscriminatorAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="ConfidentOperationWithDiscriminator(RequestContent,RequestContext)">
      <example>
This sample shows how to call ConfidentOperationWithDiscriminator with required request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["meow"] = "<meow>",
    ["kind"] = "cat",
    ["name"] = "<name>",
});
Response response = client.ConfidentOperationWithDiscriminator(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="PollutedBaseMethodAsync(PollutedPet,CancellationToken)"></member>
    <member name="PollutedBaseMethod(PollutedPet,CancellationToken)"></member>
    <member name="PollutedBaseMethodAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call PollutedBaseMethodAsync with required request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["woof"] = "<woof>",
    ["color"] = "<color>",
    ["kind"] = "dog",
    ["name"] = "<name>",
});
Response response = await client.PollutedBaseMethodAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="PollutedBaseMethod(RequestContent,RequestContext)">
      <example>
This sample shows how to call PollutedBaseMethod with required request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["woof"] = "<woof>",
    ["color"] = "<color>",
    ["kind"] = "dog",
    ["name"] = "<name>",
});
Response response = client.PollutedBaseMethod(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="PollutedDerivedMethodAsync(PollutedDog,CancellationToken)"></member>
    <member name="PollutedDerivedMethod(PollutedDog,CancellationToken)"></member>
    <member name="PollutedDerivedMethodAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call PollutedDerivedMethodAsync with required request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["woof"] = "<woof>",
    ["color"] = "<color>",
    ["kind"] = "dog",
    ["name"] = "<name>",
});
Response response = await client.PollutedDerivedMethodAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("woof").ToString());
Console.WriteLine(result.GetProperty("color").ToString());
Console.WriteLine(result.GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="PollutedDerivedMethod(RequestContent,RequestContext)">
      <example>
This sample shows how to call PollutedDerivedMethod with required request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["woof"] = "<woof>",
    ["color"] = "<color>",
    ["kind"] = "dog",
    ["name"] = "<name>",
});
Response response = client.PollutedDerivedMethod(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("woof").ToString());
Console.WriteLine(result.GetProperty("color").ToString());
Console.WriteLine(result.GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="UnpollutedDerivedMethodAsync(UnpollutedCat,CancellationToken)"></member>
    <member name="UnpollutedDerivedMethod(UnpollutedCat,CancellationToken)"></member>
    <member name="UnpollutedDerivedMethodAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call UnpollutedDerivedMethodAsync with required request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["meow"] = "<meow>",
    ["kind"] = "cat",
    ["name"] = "<name>",
});
Response response = await client.UnpollutedDerivedMethodAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("meow").ToString());
Console.WriteLine(result.GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="UnpollutedDerivedMethod(RequestContent,RequestContext)">
      <example>
This sample shows how to call UnpollutedDerivedMethod with required request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["meow"] = "<meow>",
    ["kind"] = "cat",
    ["name"] = "<name>",
});
Response response = client.UnpollutedDerivedMethod(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("meow").ToString());
Console.WriteLine(result.GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="UseDerivedModelAsync(DerivedModel,CancellationToken)"></member>
    <member name="UseDerivedModel(DerivedModel,CancellationToken)"></member>
    <member name="UseDerivedModelAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call UseDerivedModelAsync with required request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
});
Response response = await client.UseDerivedModelAsync(content);
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UseDerivedModelAsync with all request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["age"] = 1234,
    ["name"] = "<name>",
    ["size"] = 123.45,
});
Response response = await client.UseDerivedModelAsync(content);
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="UseDerivedModel(RequestContent,RequestContext)">
      <example>
This sample shows how to call UseDerivedModel with required request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["name"] = "<name>",
});
Response response = client.UseDerivedModel(content);
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UseDerivedModel with all request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["age"] = 1234,
    ["name"] = "<name>",
    ["size"] = 123.45,
});
Response response = client.UseDerivedModel(content);
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="UseDerivedModelWithUnionAsync(DerivedModelWithUnion,CancellationToken)"></member>
    <member name="UseDerivedModelWithUnion(DerivedModelWithUnion,CancellationToken)"></member>
    <member name="UseDerivedModelWithUnionAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call UseDerivedModelWithUnionAsync with required request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["unionProperty"] = "<unionProperty>",
    ["name"] = "<name>",
});
Response response = await client.UseDerivedModelWithUnionAsync(content);
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UseDerivedModelWithUnionAsync with all request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["unionProperty"] = "<unionProperty>",
    ["name"] = "<name>",
    ["size"] = 123.45,
});
Response response = await client.UseDerivedModelWithUnionAsync(content);
Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="UseDerivedModelWithUnion(RequestContent,RequestContext)">
      <example>
This sample shows how to call UseDerivedModelWithUnion with required request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["unionProperty"] = "<unionProperty>",
    ["name"] = "<name>",
});
Response response = client.UseDerivedModelWithUnion(content);
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UseDerivedModelWithUnion with all request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

RequestContent content = RequestContent.Create(new Dictionary<string, object>()
{
    ["unionProperty"] = "<unionProperty>",
    ["name"] = "<name>",
    ["size"] = 123.45,
});
Response response = client.UseDerivedModelWithUnion(content);
Console.WriteLine(response.Status);
]]></code></example>
    </member>
  </members>
</doc>