// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using ConfidentLevelsInTsp;
using ConfidentLevelsInTsp.Models;
using NUnit.Framework;

namespace ConfidentLevelsInTsp.Tests
{
    public class ConfidentLevelsInTspClientTests : ConfidentLevelsInTspTestBase
    {
        public ConfidentLevelsInTspClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task UnionInRequestProperty_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = CreateConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                unionProperty = "<unionProperty>",
            });
            Response response = await client.UnionInRequestPropertyAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task UnionInRequestProperty_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = CreateConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                unionProperty = "<unionProperty>",
            });
            Response response = await client.UnionInRequestPropertyAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task UnionInResponseProperty_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = CreateConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                age = 1234,
            });
            Response response = await client.UnionInResponsePropertyAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task UnionInResponseProperty_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = CreateConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                age = 1234,
                size = 123.45,
            });
            Response response = await client.UnionInResponsePropertyAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task UnionWithSelfReference_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = CreateConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                selfReference = new List<object>()
{
null
},
                unionProperty = "<unionProperty>",
            });
            Response response = await client.UnionWithSelfReferenceAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task UnionWithSelfReference_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = CreateConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                selfReference = new List<object>()
{
null
},
                unionProperty = "<unionProperty>",
            });
            Response response = await client.UnionWithSelfReferenceAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task UnionWithInderict_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = CreateConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.UnionWithInderictAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task UnionWithInderict_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = CreateConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                reference = new List<object>()
{
new
{
something = "<something>",
reference = new
{
name = "<name>",
selfReference = new List<object>()
{
null
},
unionProperty = "<unionProperty>",
},
unionProperty = "<unionProperty>",
}
},
            });
            Response response = await client.UnionWithInderictAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task LiteralOfInteger_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = CreateConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                id = 1,
            });
            Response response = await client.LiteralOfIntegerAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task LiteralOfInteger_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = CreateConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                id = 1,
            });
            Response response = await client.LiteralOfIntegerAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task LiteralOfFloat_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = CreateConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                id = 3.141592F,
            });
            Response response = await client.LiteralOfFloatAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task LiteralOfFloat_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = CreateConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                id = 3.141592F,
            });
            Response response = await client.LiteralOfFloatAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task ConfidentOperationWithDiscriminator_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = CreateConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            });
            Response response = await client.ConfidentOperationWithDiscriminatorAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task ConfidentOperationWithDiscriminator_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = CreateConfidentLevelsInTspClient(endpoint);

            Pet input = new Cat("<name>", "<meow>");
            Response<Pet> response = await client.ConfidentOperationWithDiscriminatorAsync(input);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task ConfidentOperationWithDiscriminator_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = CreateConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            });
            Response response = await client.ConfidentOperationWithDiscriminatorAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task ConfidentOperationWithDiscriminator_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = CreateConfidentLevelsInTspClient(endpoint);

            Pet input = new Cat("<name>", "<meow>");
            Response<Pet> response = await client.ConfidentOperationWithDiscriminatorAsync(input);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PollutedBaseMethod_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = CreateConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                woof = "<woof>",
                color = "<color>",
                kind = "dog",
                name = "<name>",
            });
            Response response = await client.PollutedBaseMethodAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PollutedBaseMethod_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = CreateConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                woof = "<woof>",
                color = "<color>",
                kind = "dog",
                name = "<name>",
            });
            Response response = await client.PollutedBaseMethodAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PollutedDerivedMethod_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = CreateConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                woof = "<woof>",
                color = "<color>",
                kind = "dog",
                name = "<name>",
            });
            Response response = await client.PollutedDerivedMethodAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task PollutedDerivedMethod_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = CreateConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                woof = "<woof>",
                color = "<color>",
                kind = "dog",
                name = "<name>",
            });
            Response response = await client.PollutedDerivedMethodAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task UnpollutedDerivedMethod_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = CreateConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            });
            Response response = await client.UnpollutedDerivedMethodAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task UnpollutedDerivedMethod_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = CreateConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            });
            Response response = await client.UnpollutedDerivedMethodAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task UseDerivedModel_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = CreateConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.UseDerivedModelAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task UseDerivedModel_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = CreateConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                age = 1234,
                name = "<name>",
                size = 123.45,
            });
            Response response = await client.UseDerivedModelAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task UseDerivedModelWithUnion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = CreateConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                unionProperty = "<unionProperty>",
                name = "<name>",
            });
            Response response = await client.UseDerivedModelWithUnionAsync(content);
        }

        [Test]
        [Ignore("Skipping this test case because this is only for scaffolding the test cases")]
        public async Task UseDerivedModelWithUnion_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = CreateConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                unionProperty = "<unionProperty>",
                name = "<name>",
                size = 123.45,
            });
            Response response = await client.UseDerivedModelWithUnionAsync(content);
        }
    }
}
