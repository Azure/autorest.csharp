// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using ConfidentLevelsInTsp;
using ConfidentLevelsInTsp.Models;
using NUnit.Framework;

namespace ConfidentLevelsInTsp.Samples
{
    public partial class Samples_ConfidentLevelsInTspClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionInRequestProperty_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                unionProperty = "<unionProperty>",
            });
            Response response = client.UnionInRequestProperty(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionInRequestProperty_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                unionProperty = "<unionProperty>",
            });
            Response response = await client.UnionInRequestPropertyAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionInRequestProperty_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            ModelWithUnionProperty body = new ModelWithUnionProperty(BinaryData.FromObjectAsJson("<unionProperty>"));
            Response response = client.UnionInRequestProperty(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionInRequestProperty_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            ModelWithUnionProperty body = new ModelWithUnionProperty(BinaryData.FromObjectAsJson("<unionProperty>"));
            Response response = await client.UnionInRequestPropertyAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionInRequestProperty_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                unionProperty = "<unionProperty>",
            });
            Response response = client.UnionInRequestProperty(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionInRequestProperty_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                unionProperty = "<unionProperty>",
            });
            Response response = await client.UnionInRequestPropertyAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionInRequestProperty_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            ModelWithUnionProperty body = new ModelWithUnionProperty(BinaryData.FromObjectAsJson("<unionProperty>"));
            Response response = client.UnionInRequestProperty(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionInRequestProperty_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            ModelWithUnionProperty body = new ModelWithUnionProperty(BinaryData.FromObjectAsJson("<unionProperty>"));
            Response response = await client.UnionInRequestPropertyAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionInResponseProperty_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                age = 1234,
            });
            Response response = client.UnionInResponseProperty(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("unionProperty").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionInResponseProperty_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                age = 1234,
            });
            Response response = await client.UnionInResponsePropertyAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("unionProperty").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionInResponseProperty_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            UsualModel body = new UsualModel("<name>", 1234);
            Response<AnotherModelWithUnionProperty> response = client.UnionInResponseProperty(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionInResponseProperty_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            UsualModel body = new UsualModel("<name>", 1234);
            Response<AnotherModelWithUnionProperty> response = await client.UnionInResponsePropertyAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionInResponseProperty_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                age = 1234,
                size = 123.45,
            });
            Response response = client.UnionInResponseProperty(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("unionProperty").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionInResponseProperty_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                age = 1234,
                size = 123.45,
            });
            Response response = await client.UnionInResponsePropertyAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("unionProperty").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionInResponseProperty_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            UsualModel body = new UsualModel("<name>", 1234)
            {
                Size = 123.45,
            };
            Response<AnotherModelWithUnionProperty> response = client.UnionInResponseProperty(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionInResponseProperty_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            UsualModel body = new UsualModel("<name>", 1234)
            {
                Size = 123.45,
            };
            Response<AnotherModelWithUnionProperty> response = await client.UnionInResponsePropertyAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionWithSelfReference_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                selfReference = new object[]
            {
null
            },
                unionProperty = "<unionProperty>",
            });
            Response response = client.UnionWithSelfReference(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionWithSelfReference_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                selfReference = new object[]
            {
null
            },
                unionProperty = "<unionProperty>",
            });
            Response response = await client.UnionWithSelfReferenceAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionWithSelfReference_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            NonConfidentModelWithSelfReference input = new NonConfidentModelWithSelfReference("<name>", new NonConfidentModelWithSelfReference[]
            {
default
            }, BinaryData.FromObjectAsJson("<unionProperty>"));
            Response response = client.UnionWithSelfReference(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionWithSelfReference_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            NonConfidentModelWithSelfReference input = new NonConfidentModelWithSelfReference("<name>", new NonConfidentModelWithSelfReference[]
            {
default
            }, BinaryData.FromObjectAsJson("<unionProperty>"));
            Response response = await client.UnionWithSelfReferenceAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionWithSelfReference_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                selfReference = new object[]
            {
null
            },
                unionProperty = "<unionProperty>",
            });
            Response response = client.UnionWithSelfReference(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionWithSelfReference_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                selfReference = new object[]
            {
null
            },
                unionProperty = "<unionProperty>",
            });
            Response response = await client.UnionWithSelfReferenceAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionWithSelfReference_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            NonConfidentModelWithSelfReference input = new NonConfidentModelWithSelfReference("<name>", new NonConfidentModelWithSelfReference[]
            {
default
            }, BinaryData.FromObjectAsJson("<unionProperty>"));
            Response response = client.UnionWithSelfReference(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionWithSelfReference_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            NonConfidentModelWithSelfReference input = new NonConfidentModelWithSelfReference("<name>", new NonConfidentModelWithSelfReference[]
            {
default
            }, BinaryData.FromObjectAsJson("<unionProperty>"));
            Response response = await client.UnionWithSelfReferenceAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionWithInderict_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.UnionWithInderict(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionWithInderict_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.UnionWithInderictAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionWithInderict_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            NonConfidentModelWithIndirectSelfReference input = new NonConfidentModelWithIndirectSelfReference("<name>");
            Response response = client.UnionWithInderict(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionWithInderict_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            NonConfidentModelWithIndirectSelfReference input = new NonConfidentModelWithIndirectSelfReference("<name>");
            Response response = await client.UnionWithInderictAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionWithInderict_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                reference = new object[]
            {
new
{
something = "<something>",
reference = new
{
name = "<name>",
selfReference = new object[]
{
null
},
unionProperty = "<unionProperty>",
},
unionProperty = "<unionProperty>",
}
            },
            });
            Response response = client.UnionWithInderict(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionWithInderict_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                reference = new object[]
            {
new
{
something = "<something>",
reference = new
{
name = "<name>",
selfReference = new object[]
{
null
},
unionProperty = "<unionProperty>",
},
unionProperty = "<unionProperty>",
}
            },
            });
            Response response = await client.UnionWithInderictAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionWithInderict_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            NonConfidentModelWithIndirectSelfReference input = new NonConfidentModelWithIndirectSelfReference("<name>")
            {
                Reference = {new IndirectSelfReferenceModel("<something>", BinaryData.FromObjectAsJson("<unionProperty>"))
{
Reference = new NonConfidentModelWithSelfReference("<name>", new NonConfidentModelWithSelfReference[]
{
default
}, BinaryData.FromObjectAsJson("<unionProperty>")),
}},
            };
            Response response = client.UnionWithInderict(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionWithInderict_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            NonConfidentModelWithIndirectSelfReference input = new NonConfidentModelWithIndirectSelfReference("<name>")
            {
                Reference = {new IndirectSelfReferenceModel("<something>", BinaryData.FromObjectAsJson("<unionProperty>"))
{
Reference = new NonConfidentModelWithSelfReference("<name>", new NonConfidentModelWithSelfReference[]
{
default
}, BinaryData.FromObjectAsJson("<unionProperty>")),
}},
            };
            Response response = await client.UnionWithInderictAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LiteralOfInteger_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                id = 1,
            });
            Response response = client.LiteralOfInteger(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LiteralOfInteger_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                id = 1,
            });
            Response response = await client.LiteralOfIntegerAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LiteralOfInteger_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            ModelWithIntegerLiteralTypeProperty input = new ModelWithIntegerLiteralTypeProperty("<name>");
            Response response = client.LiteralOfInteger(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LiteralOfInteger_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            ModelWithIntegerLiteralTypeProperty input = new ModelWithIntegerLiteralTypeProperty("<name>");
            Response response = await client.LiteralOfIntegerAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LiteralOfInteger_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                id = 1,
            });
            Response response = client.LiteralOfInteger(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LiteralOfInteger_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                id = 1,
            });
            Response response = await client.LiteralOfIntegerAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LiteralOfInteger_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            ModelWithIntegerLiteralTypeProperty input = new ModelWithIntegerLiteralTypeProperty("<name>");
            Response response = client.LiteralOfInteger(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LiteralOfInteger_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            ModelWithIntegerLiteralTypeProperty input = new ModelWithIntegerLiteralTypeProperty("<name>");
            Response response = await client.LiteralOfIntegerAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LiteralOfFloat_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                id = 3.141592F,
            });
            Response response = client.LiteralOfFloat(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LiteralOfFloat_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                id = 3.141592F,
            });
            Response response = await client.LiteralOfFloatAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LiteralOfFloat_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            ModelWithFloatLiteralTypeProperty input = new ModelWithFloatLiteralTypeProperty("<name>");
            Response response = client.LiteralOfFloat(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LiteralOfFloat_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            ModelWithFloatLiteralTypeProperty input = new ModelWithFloatLiteralTypeProperty("<name>");
            Response response = await client.LiteralOfFloatAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LiteralOfFloat_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                id = 3.141592F,
            });
            Response response = client.LiteralOfFloat(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LiteralOfFloat_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                id = 3.141592F,
            });
            Response response = await client.LiteralOfFloatAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LiteralOfFloat_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            ModelWithFloatLiteralTypeProperty input = new ModelWithFloatLiteralTypeProperty("<name>");
            Response response = client.LiteralOfFloat(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LiteralOfFloat_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            ModelWithFloatLiteralTypeProperty input = new ModelWithFloatLiteralTypeProperty("<name>");
            Response response = await client.LiteralOfFloatAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConfidentOperationWithDiscriminator_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            });
            Response response = client.ConfidentOperationWithDiscriminator(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConfidentOperationWithDiscriminator_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            });
            Response response = await client.ConfidentOperationWithDiscriminatorAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConfidentOperationWithDiscriminator_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            Pet input = new Cat("<name>", "<meow>");
            Response<Pet> response = client.ConfidentOperationWithDiscriminator(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConfidentOperationWithDiscriminator_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            Pet input = new Cat("<name>", "<meow>");
            Response<Pet> response = await client.ConfidentOperationWithDiscriminatorAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConfidentOperationWithDiscriminator_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            });
            Response response = client.ConfidentOperationWithDiscriminator(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConfidentOperationWithDiscriminator_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            });
            Response response = await client.ConfidentOperationWithDiscriminatorAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConfidentOperationWithDiscriminator_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            Pet input = new Cat("<name>", "<meow>");
            Response<Pet> response = client.ConfidentOperationWithDiscriminator(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConfidentOperationWithDiscriminator_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            Pet input = new Cat("<name>", "<meow>");
            Response<Pet> response = await client.ConfidentOperationWithDiscriminatorAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PollutedBaseMethod_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                woof = "<woof>",
                color = "<color>",
                kind = "dog",
                name = "<name>",
            });
            Response response = client.PollutedBaseMethod(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PollutedBaseMethod_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                woof = "<woof>",
                color = "<color>",
                kind = "dog",
                name = "<name>",
            });
            Response response = await client.PollutedBaseMethodAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PollutedBaseMethod_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            PollutedPet input = new PollutedDog("<name>", "<woof>", BinaryData.FromObjectAsJson("<color>"));
            Response<PollutedPet> response = client.PollutedBaseMethod(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PollutedBaseMethod_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            PollutedPet input = new PollutedDog("<name>", "<woof>", BinaryData.FromObjectAsJson("<color>"));
            Response<PollutedPet> response = await client.PollutedBaseMethodAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PollutedBaseMethod_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                woof = "<woof>",
                color = "<color>",
                kind = "dog",
                name = "<name>",
            });
            Response response = client.PollutedBaseMethod(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PollutedBaseMethod_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                woof = "<woof>",
                color = "<color>",
                kind = "dog",
                name = "<name>",
            });
            Response response = await client.PollutedBaseMethodAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PollutedBaseMethod_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            PollutedPet input = new PollutedDog("<name>", "<woof>", BinaryData.FromObjectAsJson("<color>"));
            Response<PollutedPet> response = client.PollutedBaseMethod(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PollutedBaseMethod_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            PollutedPet input = new PollutedDog("<name>", "<woof>", BinaryData.FromObjectAsJson("<color>"));
            Response<PollutedPet> response = await client.PollutedBaseMethodAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PollutedDerivedMethod_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                woof = "<woof>",
                color = "<color>",
                kind = "dog",
                name = "<name>",
            });
            Response response = client.PollutedDerivedMethod(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("woof").ToString());
            Console.WriteLine(result.GetProperty("color").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PollutedDerivedMethod_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                woof = "<woof>",
                color = "<color>",
                kind = "dog",
                name = "<name>",
            });
            Response response = await client.PollutedDerivedMethodAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("woof").ToString());
            Console.WriteLine(result.GetProperty("color").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PollutedDerivedMethod_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            PollutedDog input = new PollutedDog("<name>", "<woof>", BinaryData.FromObjectAsJson("<color>"));
            Response<PollutedDog> response = client.PollutedDerivedMethod(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PollutedDerivedMethod_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            PollutedDog input = new PollutedDog("<name>", "<woof>", BinaryData.FromObjectAsJson("<color>"));
            Response<PollutedDog> response = await client.PollutedDerivedMethodAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PollutedDerivedMethod_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                woof = "<woof>",
                color = "<color>",
                kind = "dog",
                name = "<name>",
            });
            Response response = client.PollutedDerivedMethod(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("woof").ToString());
            Console.WriteLine(result.GetProperty("color").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PollutedDerivedMethod_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                woof = "<woof>",
                color = "<color>",
                kind = "dog",
                name = "<name>",
            });
            Response response = await client.PollutedDerivedMethodAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("woof").ToString());
            Console.WriteLine(result.GetProperty("color").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PollutedDerivedMethod_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            PollutedDog input = new PollutedDog("<name>", "<woof>", BinaryData.FromObjectAsJson("<color>"));
            Response<PollutedDog> response = client.PollutedDerivedMethod(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PollutedDerivedMethod_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            PollutedDog input = new PollutedDog("<name>", "<woof>", BinaryData.FromObjectAsJson("<color>"));
            Response<PollutedDog> response = await client.PollutedDerivedMethodAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnpollutedDerivedMethod_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            });
            Response response = client.UnpollutedDerivedMethod(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("meow").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnpollutedDerivedMethod_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            });
            Response response = await client.UnpollutedDerivedMethodAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("meow").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnpollutedDerivedMethod_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            UnpollutedCat input = new UnpollutedCat("<name>", "<meow>");
            Response<UnpollutedCat> response = client.UnpollutedDerivedMethod(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnpollutedDerivedMethod_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            UnpollutedCat input = new UnpollutedCat("<name>", "<meow>");
            Response<UnpollutedCat> response = await client.UnpollutedDerivedMethodAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnpollutedDerivedMethod_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            });
            Response response = client.UnpollutedDerivedMethod(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("meow").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnpollutedDerivedMethod_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            });
            Response response = await client.UnpollutedDerivedMethodAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("meow").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnpollutedDerivedMethod_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            UnpollutedCat input = new UnpollutedCat("<name>", "<meow>");
            Response<UnpollutedCat> response = client.UnpollutedDerivedMethod(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnpollutedDerivedMethod_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            UnpollutedCat input = new UnpollutedCat("<name>", "<meow>");
            Response<UnpollutedCat> response = await client.UnpollutedDerivedMethodAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UseDerivedModel_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.UseDerivedModel(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UseDerivedModel_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.UseDerivedModelAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UseDerivedModel_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            DerivedModel input = new DerivedModel("<name>");
            Response response = client.UseDerivedModel(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UseDerivedModel_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            DerivedModel input = new DerivedModel("<name>");
            Response response = await client.UseDerivedModelAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UseDerivedModel_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                age = 1234,
                name = "<name>",
                size = 123.45,
            });
            Response response = client.UseDerivedModel(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UseDerivedModel_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                age = 1234,
                name = "<name>",
                size = 123.45,
            });
            Response response = await client.UseDerivedModelAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UseDerivedModel_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            DerivedModel input = new DerivedModel("<name>")
            {
                Age = 1234,
            };
            Response response = client.UseDerivedModel(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UseDerivedModel_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            DerivedModel input = new DerivedModel("<name>")
            {
                Age = 1234,
            };
            Response response = await client.UseDerivedModelAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UseDerivedModelWithUnion_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                unionProperty = "<unionProperty>",
                name = "<name>",
            });
            Response response = client.UseDerivedModelWithUnion(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UseDerivedModelWithUnion_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                unionProperty = "<unionProperty>",
                name = "<name>",
            });
            Response response = await client.UseDerivedModelWithUnionAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UseDerivedModelWithUnion_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            DerivedModelWithUnion input = new DerivedModelWithUnion("<name>", BinaryData.FromObjectAsJson("<unionProperty>"));
            Response response = client.UseDerivedModelWithUnion(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UseDerivedModelWithUnion_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            DerivedModelWithUnion input = new DerivedModelWithUnion("<name>", BinaryData.FromObjectAsJson("<unionProperty>"));
            Response response = await client.UseDerivedModelWithUnionAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UseDerivedModelWithUnion_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                unionProperty = "<unionProperty>",
                name = "<name>",
                size = 123.45,
            });
            Response response = client.UseDerivedModelWithUnion(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UseDerivedModelWithUnion_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            using RequestContent content = RequestContent.Create(new
            {
                unionProperty = "<unionProperty>",
                name = "<name>",
                size = 123.45,
            });
            Response response = await client.UseDerivedModelWithUnionAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UseDerivedModelWithUnion_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            DerivedModelWithUnion input = new DerivedModelWithUnion("<name>", BinaryData.FromObjectAsJson("<unionProperty>"));
            Response response = client.UseDerivedModelWithUnion(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UseDerivedModelWithUnion_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            DerivedModelWithUnion input = new DerivedModelWithUnion("<name>", BinaryData.FromObjectAsJson("<unionProperty>"));
            Response response = await client.UseDerivedModelWithUnionAsync(input);
        }
    }
}
