// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using ConfidentLevelsInTsp;
using ConfidentLevelsInTsp.Models;
using NUnit.Framework;

namespace ConfidentLevelsInTsp.Samples
{
    public class Samples_ConfidentLevelsInTspClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionInRequestProperty()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                unionProperty = "<unionProperty>",
            });
            Response response = client.UnionInRequestProperty(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionInRequestProperty_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                unionProperty = "<unionProperty>",
            });
            Response response = client.UnionInRequestProperty(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionInRequestProperty_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                unionProperty = "<unionProperty>",
            });
            Response response = await client.UnionInRequestPropertyAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionInRequestProperty_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                unionProperty = "<unionProperty>",
            });
            Response response = await client.UnionInRequestPropertyAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionInResponseProperty()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                age = 1234,
            });
            Response response = client.UnionInResponseProperty(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("unionProperty").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionInResponseProperty_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                age = 1234,
                size = 123.45,
            });
            Response response = client.UnionInResponseProperty(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("unionProperty").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionInResponseProperty_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                age = 1234,
            });
            Response response = await client.UnionInResponsePropertyAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("unionProperty").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionInResponseProperty_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                age = 1234,
                size = 123.45,
            });
            Response response = await client.UnionInResponsePropertyAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("unionProperty").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionWithSelfReference()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                selfReference = new List<object>()
{
null
},
                unionProperty = "<unionProperty>",
            });
            Response response = client.UnionWithSelfReference(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionWithSelfReference_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                selfReference = new List<object>()
{
null
},
                unionProperty = "<unionProperty>",
            });
            Response response = client.UnionWithSelfReference(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionWithSelfReference_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                selfReference = new List<object>()
{
null
},
                unionProperty = "<unionProperty>",
            });
            Response response = await client.UnionWithSelfReferenceAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionWithSelfReference_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                selfReference = new List<object>()
{
null
},
                unionProperty = "<unionProperty>",
            });
            Response response = await client.UnionWithSelfReferenceAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionWithInderict()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.UnionWithInderict(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionWithInderict_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                reference = new List<object>()
{
new
{
something = "<something>",
reference = new
{
name = "<name>",
selfReference = new List<object>()
{
null
},
unionProperty = "<unionProperty>",
},
unionProperty = "<unionProperty>",
}
},
            });
            Response response = client.UnionWithInderict(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionWithInderict_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.UnionWithInderictAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionWithInderict_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                reference = new List<object>()
{
new
{
something = "<something>",
reference = new
{
name = "<name>",
selfReference = new List<object>()
{
null
},
unionProperty = "<unionProperty>",
},
unionProperty = "<unionProperty>",
}
},
            });
            Response response = await client.UnionWithInderictAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LiteralOfInteger()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                id = 1,
            });
            Response response = client.LiteralOfInteger(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LiteralOfInteger_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                id = 1,
            });
            Response response = client.LiteralOfInteger(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LiteralOfInteger_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                id = 1,
            });
            Response response = await client.LiteralOfIntegerAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LiteralOfInteger_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                id = 1,
            });
            Response response = await client.LiteralOfIntegerAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LiteralOfFloat()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                id = 3.141592F,
            });
            Response response = client.LiteralOfFloat(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LiteralOfFloat_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                id = 3.141592F,
            });
            Response response = client.LiteralOfFloat(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LiteralOfFloat_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                id = 3.141592F,
            });
            Response response = await client.LiteralOfFloatAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LiteralOfFloat_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                id = 3.141592F,
            });
            Response response = await client.LiteralOfFloatAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConfidentOperationWithDiscriminator()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            });
            Response response = client.ConfidentOperationWithDiscriminator(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConfidentOperationWithDiscriminator_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            });
            Response response = client.ConfidentOperationWithDiscriminator(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConfidentOperationWithDiscriminator_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            Pet input = new Cat("<name>", "<meow>");
            Response<Pet> response = client.ConfidentOperationWithDiscriminator(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConfidentOperationWithDiscriminator_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            Pet input = new Cat("<name>", "<meow>");
            Response<Pet> response = client.ConfidentOperationWithDiscriminator(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConfidentOperationWithDiscriminator_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            });
            Response response = await client.ConfidentOperationWithDiscriminatorAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConfidentOperationWithDiscriminator_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            });
            Response response = await client.ConfidentOperationWithDiscriminatorAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConfidentOperationWithDiscriminator_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            Pet input = new Cat("<name>", "<meow>");
            Response<Pet> response = await client.ConfidentOperationWithDiscriminatorAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConfidentOperationWithDiscriminator_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            Pet input = new Cat("<name>", "<meow>");
            Response<Pet> response = await client.ConfidentOperationWithDiscriminatorAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PollutedBaseMethod()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                woof = "<woof>",
                color = "<color>",
                kind = "dog",
                name = "<name>",
            });
            Response response = client.PollutedBaseMethod(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PollutedBaseMethod_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                woof = "<woof>",
                color = "<color>",
                kind = "dog",
                name = "<name>",
            });
            Response response = client.PollutedBaseMethod(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PollutedBaseMethod_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                woof = "<woof>",
                color = "<color>",
                kind = "dog",
                name = "<name>",
            });
            Response response = await client.PollutedBaseMethodAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PollutedBaseMethod_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                woof = "<woof>",
                color = "<color>",
                kind = "dog",
                name = "<name>",
            });
            Response response = await client.PollutedBaseMethodAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PollutedDerivedMethod()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                woof = "<woof>",
                color = "<color>",
                kind = "dog",
                name = "<name>",
            });
            Response response = client.PollutedDerivedMethod(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("woof").ToString());
            Console.WriteLine(result.GetProperty("color").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PollutedDerivedMethod_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                woof = "<woof>",
                color = "<color>",
                kind = "dog",
                name = "<name>",
            });
            Response response = client.PollutedDerivedMethod(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("woof").ToString());
            Console.WriteLine(result.GetProperty("color").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PollutedDerivedMethod_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                woof = "<woof>",
                color = "<color>",
                kind = "dog",
                name = "<name>",
            });
            Response response = await client.PollutedDerivedMethodAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("woof").ToString());
            Console.WriteLine(result.GetProperty("color").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PollutedDerivedMethod_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                woof = "<woof>",
                color = "<color>",
                kind = "dog",
                name = "<name>",
            });
            Response response = await client.PollutedDerivedMethodAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("woof").ToString());
            Console.WriteLine(result.GetProperty("color").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnpollutedDerivedMethod()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            });
            Response response = client.UnpollutedDerivedMethod(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("meow").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnpollutedDerivedMethod_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            });
            Response response = client.UnpollutedDerivedMethod(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("meow").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnpollutedDerivedMethod_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            });
            Response response = await client.UnpollutedDerivedMethodAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("meow").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnpollutedDerivedMethod_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            });
            Response response = await client.UnpollutedDerivedMethodAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("meow").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UseDerivedModel()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.UseDerivedModel(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UseDerivedModel_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                age = 1234,
                name = "<name>",
                size = 123.45,
            });
            Response response = client.UseDerivedModel(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UseDerivedModel_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.UseDerivedModelAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UseDerivedModel_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                age = 1234,
                name = "<name>",
                size = 123.45,
            });
            Response response = await client.UseDerivedModelAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UseDerivedModelWithUnion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                unionProperty = "<unionProperty>",
                name = "<name>",
            });
            Response response = client.UseDerivedModelWithUnion(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UseDerivedModelWithUnion_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                unionProperty = "<unionProperty>",
                name = "<name>",
                size = 123.45,
            });
            Response response = client.UseDerivedModelWithUnion(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UseDerivedModelWithUnion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                unionProperty = "<unionProperty>",
                name = "<name>",
            });
            Response response = await client.UseDerivedModelWithUnionAsync(content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UseDerivedModelWithUnion_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            ConfidentLevelsInTspClient client = new ConfidentLevelsInTspClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                unionProperty = "<unionProperty>",
                name = "<name>",
                size = 123.45,
            });
            Response response = await client.UseDerivedModelWithUnionAsync(content);
            Console.WriteLine(response.Status);
        }
    }
}
