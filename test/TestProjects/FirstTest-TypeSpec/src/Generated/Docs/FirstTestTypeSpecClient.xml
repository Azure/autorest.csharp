<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="TopActionAsync(DateTimeOffset,CancellationToken)">
      <example>
This sample shows how to call TopActionAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<Thing> response = await client.TopActionAsync(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
]]></code>
This sample shows how to call TopActionAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<Thing> response = await client.TopActionAsync(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
]]></code></example>
    </member>
    <member name="TopAction(DateTimeOffset,CancellationToken)">
      <example>
This sample shows how to call TopAction.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<Thing> response = client.TopAction(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
]]></code>
This sample shows how to call TopAction with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<Thing> response = client.TopAction(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
]]></code></example>
    </member>
    <member name="TopActionAsync(DateTimeOffset,RequestContext)">
      <example>
This sample shows how to call TopActionAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = await client.TopActionAsync(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call TopActionAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = await client.TopActionAsync(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="TopAction(DateTimeOffset,RequestContext)">
      <example>
This sample shows how to call TopAction and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = client.TopAction(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call TopAction with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = client.TopAction(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="TopAction2Async(RequestContext)">
      <example>
This sample shows how to call TopAction2Async and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = await client.TopAction2Async(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call TopAction2Async with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = await client.TopAction2Async(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="TopAction2(RequestContext)">
      <example>
This sample shows how to call TopAction2 and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = client.TopAction2(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call TopAction2 with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = client.TopAction2(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="PatchActionAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call PatchActionAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    requiredBadDescription = "<requiredBadDescription>",
    requiredNullableList = new object[]
    {
        1234
    },
});
Response response = await client.PatchActionAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call PatchActionAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    optionalLiteralString = "reject",
    optionalLiteralInt = 456,
    optionalLiteralFloat = 4.56F,
    optionalLiteralBool = true,
    requiredBadDescription = "<requiredBadDescription>",
    optionalNullableList = new object[]
    {
        1234
    },
    requiredNullableList = new object[]
    {
        1234
    },
});
Response response = await client.PatchActionAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="PatchAction(RequestContent,RequestContext)">
      <example>
This sample shows how to call PatchAction and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    requiredBadDescription = "<requiredBadDescription>",
    requiredNullableList = new object[]
    {
        1234
    },
});
Response response = client.PatchAction(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call PatchAction with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    optionalLiteralString = "reject",
    optionalLiteralInt = 456,
    optionalLiteralFloat = 4.56F,
    optionalLiteralBool = true,
    requiredBadDescription = "<requiredBadDescription>",
    optionalNullableList = new object[]
    {
        1234
    },
    requiredNullableList = new object[]
    {
        1234
    },
});
Response response = client.PatchAction(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="AnonymousBodyAsync(Thing,CancellationToken)">
      <example>
This sample shows how to call AnonymousBodyAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Thing thing = new Thing("<name>", BinaryData.FromObjectAsJson("<requiredUnion>"), "<requiredBadDescription>", new int[] { 1234 });
Response<Thing> response = await client.AnonymousBodyAsync(thing);
]]></code>
This sample shows how to call AnonymousBodyAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Thing thing = new Thing("<name>", BinaryData.FromObjectAsJson("<requiredUnion>"), "<requiredBadDescription>", new int[] { 1234 })
{
    OptionalLiteralString = ThingOptionalLiteralString.Reject,
    OptionalLiteralInt = ThingOptionalLiteralInt._456,
    OptionalLiteralFloat = ThingOptionalLiteralFloat._456,
    OptionalLiteralBool = true,
    OptionalNullableList = { 1234 },
};
Response<Thing> response = await client.AnonymousBodyAsync(thing);
]]></code></example>
    </member>
    <member name="AnonymousBody(Thing,CancellationToken)">
      <example>
This sample shows how to call AnonymousBody.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Thing thing = new Thing("<name>", BinaryData.FromObjectAsJson("<requiredUnion>"), "<requiredBadDescription>", new int[] { 1234 });
Response<Thing> response = client.AnonymousBody(thing);
]]></code>
This sample shows how to call AnonymousBody with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Thing thing = new Thing("<name>", BinaryData.FromObjectAsJson("<requiredUnion>"), "<requiredBadDescription>", new int[] { 1234 })
{
    OptionalLiteralString = ThingOptionalLiteralString.Reject,
    OptionalLiteralInt = ThingOptionalLiteralInt._456,
    OptionalLiteralFloat = ThingOptionalLiteralFloat._456,
    OptionalLiteralBool = true,
    OptionalNullableList = { 1234 },
};
Response<Thing> response = client.AnonymousBody(thing);
]]></code></example>
    </member>
    <member name="AnonymousBodyAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call AnonymousBodyAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    requiredBadDescription = "<requiredBadDescription>",
    requiredNullableList = new object[]
    {
        1234
    },
});
Response response = await client.AnonymousBodyAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call AnonymousBodyAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    optionalLiteralString = "reject",
    optionalLiteralInt = 456,
    optionalLiteralFloat = 4.56F,
    optionalLiteralBool = true,
    requiredBadDescription = "<requiredBadDescription>",
    optionalNullableList = new object[]
    {
        1234
    },
    requiredNullableList = new object[]
    {
        1234
    },
});
Response response = await client.AnonymousBodyAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="AnonymousBody(RequestContent,RequestContext)">
      <example>
This sample shows how to call AnonymousBody and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    requiredBadDescription = "<requiredBadDescription>",
    requiredNullableList = new object[]
    {
        1234
    },
});
Response response = client.AnonymousBody(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call AnonymousBody with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    optionalLiteralString = "reject",
    optionalLiteralInt = 456,
    optionalLiteralFloat = 4.56F,
    optionalLiteralBool = true,
    requiredBadDescription = "<requiredBadDescription>",
    optionalNullableList = new object[]
    {
        1234
    },
    requiredNullableList = new object[]
    {
        1234
    },
});
Response response = client.AnonymousBody(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="FriendlyModelAsync(Friend,CancellationToken)">
      <example>
This sample shows how to call FriendlyModelAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Friend notFriend = new Friend("<name>");
Response<Friend> response = await client.FriendlyModelAsync(notFriend);
]]></code>
This sample shows how to call FriendlyModelAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Friend notFriend = new Friend("<name>");
Response<Friend> response = await client.FriendlyModelAsync(notFriend);
]]></code></example>
    </member>
    <member name="FriendlyModel(Friend,CancellationToken)">
      <example>
This sample shows how to call FriendlyModel.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Friend notFriend = new Friend("<name>");
Response<Friend> response = client.FriendlyModel(notFriend);
]]></code>
This sample shows how to call FriendlyModel with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Friend notFriend = new Friend("<name>");
Response<Friend> response = client.FriendlyModel(notFriend);
]]></code></example>
    </member>
    <member name="FriendlyModelAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call FriendlyModelAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = await client.FriendlyModelAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call FriendlyModelAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = await client.FriendlyModelAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="FriendlyModel(RequestContent,RequestContext)">
      <example>
This sample shows how to call FriendlyModel and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = client.FriendlyModel(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call FriendlyModel with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = client.FriendlyModel(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="AddTimeHeaderAsync(RequestContext)">
      <example>
This sample shows how to call AddTimeHeaderAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = await client.AddTimeHeaderAsync();

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AddTimeHeaderAsync with all request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = await client.AddTimeHeaderAsync();

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="AddTimeHeader(RequestContext)">
      <example>
This sample shows how to call AddTimeHeader.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = client.AddTimeHeader();

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AddTimeHeader with all request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = client.AddTimeHeader();

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="StringFormatAsync(Guid,ModelWithFormat,CancellationToken)">
      <example>
This sample shows how to call StringFormatAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

ModelWithFormat body = new ModelWithFormat(new Uri("http://localhost:3000"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
Response response = await client.StringFormatAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), body);
]]></code>
This sample shows how to call StringFormatAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

ModelWithFormat body = new ModelWithFormat(new Uri("http://localhost:3000"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
Response response = await client.StringFormatAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), body);
]]></code></example>
    </member>
    <member name="StringFormat(Guid,ModelWithFormat,CancellationToken)">
      <example>
This sample shows how to call StringFormat.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

ModelWithFormat body = new ModelWithFormat(new Uri("http://localhost:3000"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
Response response = client.StringFormat(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), body);
]]></code>
This sample shows how to call StringFormat with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

ModelWithFormat body = new ModelWithFormat(new Uri("http://localhost:3000"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
Response response = client.StringFormat(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), body);
]]></code></example>
    </member>
    <member name="StringFormatAsync(Guid,RequestContent,RequestContext)">
      <example>
This sample shows how to call StringFormatAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    sourceUrl = "http://localhost:3000",
    guid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
});
Response response = await client.StringFormatAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call StringFormatAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    sourceUrl = "http://localhost:3000",
    guid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
});
Response response = await client.StringFormatAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="StringFormat(Guid,RequestContent,RequestContext)">
      <example>
This sample shows how to call StringFormat.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    sourceUrl = "http://localhost:3000",
    guid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
});
Response response = client.StringFormat(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call StringFormat with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    sourceUrl = "http://localhost:3000",
    guid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
});
Response response = client.StringFormat(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="ProjectedNameModelAsync(ProjectedModel,CancellationToken)">
      <example>
This sample shows how to call ProjectedNameModelAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

ProjectedModel modelWithProjectedName = new ProjectedModel("<name>");
Response<ProjectedModel> response = await client.ProjectedNameModelAsync(modelWithProjectedName);
]]></code>
This sample shows how to call ProjectedNameModelAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

ProjectedModel modelWithProjectedName = new ProjectedModel("<name>");
Response<ProjectedModel> response = await client.ProjectedNameModelAsync(modelWithProjectedName);
]]></code></example>
    </member>
    <member name="ProjectedNameModel(ProjectedModel,CancellationToken)">
      <example>
This sample shows how to call ProjectedNameModel.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

ProjectedModel modelWithProjectedName = new ProjectedModel("<name>");
Response<ProjectedModel> response = client.ProjectedNameModel(modelWithProjectedName);
]]></code>
This sample shows how to call ProjectedNameModel with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

ProjectedModel modelWithProjectedName = new ProjectedModel("<name>");
Response<ProjectedModel> response = client.ProjectedNameModel(modelWithProjectedName);
]]></code></example>
    </member>
    <member name="ProjectedNameModelAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call ProjectedNameModelAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = await client.ProjectedNameModelAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call ProjectedNameModelAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = await client.ProjectedNameModelAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="ProjectedNameModel(RequestContent,RequestContext)">
      <example>
This sample shows how to call ProjectedNameModel and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = client.ProjectedNameModel(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
This sample shows how to call ProjectedNameModel with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
});
Response response = client.ProjectedNameModel(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code></example>
    </member>
    <member name="ReturnsAnonymousModelAsync(CancellationToken)">
      <example>
This sample shows how to call ReturnsAnonymousModelAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<object> response = await client.ReturnsAnonymousModelAsync();
]]></code>
This sample shows how to call ReturnsAnonymousModelAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<object> response = await client.ReturnsAnonymousModelAsync();
]]></code></example>
    </member>
    <member name="ReturnsAnonymousModel(CancellationToken)">
      <example>
This sample shows how to call ReturnsAnonymousModel.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<object> response = client.ReturnsAnonymousModel();
]]></code>
This sample shows how to call ReturnsAnonymousModel with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<object> response = client.ReturnsAnonymousModel();
]]></code></example>
    </member>
    <member name="ReturnsAnonymousModelAsync(RequestContext)">
      <example>
This sample shows how to call ReturnsAnonymousModelAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = await client.ReturnsAnonymousModelAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ReturnsAnonymousModelAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = await client.ReturnsAnonymousModelAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="ReturnsAnonymousModel(RequestContext)">
      <example>
This sample shows how to call ReturnsAnonymousModel and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = client.ReturnsAnonymousModel(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ReturnsAnonymousModel with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = client.ReturnsAnonymousModel(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="HeadAsBooleanAsync(string,RequestContext)">
      <example>
This sample shows how to call HeadAsBooleanAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<bool> response = await client.HeadAsBooleanAsync("<id>");

Console.WriteLine(response.GetRawResponse().Status);
]]></code>
This sample shows how to call HeadAsBooleanAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<bool> response = await client.HeadAsBooleanAsync("<id>");

Console.WriteLine(response.GetRawResponse().Status);
]]></code></example>
    </member>
    <member name="HeadAsBoolean(string,RequestContext)">
      <example>
This sample shows how to call HeadAsBoolean.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<bool> response = client.HeadAsBoolean("<id>");

Console.WriteLine(response.GetRawResponse().Status);
]]></code>
This sample shows how to call HeadAsBoolean with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<bool> response = client.HeadAsBoolean("<id>");

Console.WriteLine(response.GetRawResponse().Status);
]]></code></example>
    </member>
    <member name="StringBodyAsync(string,CancellationToken)">
      <example>
This sample shows how to call StringBodyAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = await client.StringBodyAsync("<body>");
]]></code>
This sample shows how to call StringBodyAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = await client.StringBodyAsync("<body>");
]]></code></example>
    </member>
    <member name="StringBody(string,CancellationToken)">
      <example>
This sample shows how to call StringBody.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = client.StringBody("<body>");
]]></code>
This sample shows how to call StringBody with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = client.StringBody("<body>");
]]></code></example>
    </member>
    <member name="StringBodyAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call StringBodyAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create("<body>");
Response response = await client.StringBodyAsync(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call StringBodyAsync with all request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create("<body>");
Response response = await client.StringBodyAsync(content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="StringBody(RequestContent,RequestContext)">
      <example>
This sample shows how to call StringBody.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create("<body>");
Response response = client.StringBody(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call StringBody with all request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create("<body>");
Response response = client.StringBody(content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="BoolBodyAsync(bool,CancellationToken)">
      <example>
This sample shows how to call BoolBodyAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = await client.BoolBodyAsync(true);
]]></code>
This sample shows how to call BoolBodyAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = await client.BoolBodyAsync(true);
]]></code></example>
    </member>
    <member name="BoolBody(bool,CancellationToken)">
      <example>
This sample shows how to call BoolBody.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = client.BoolBody(true);
]]></code>
This sample shows how to call BoolBody with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = client.BoolBody(true);
]]></code></example>
    </member>
    <member name="BoolBodyAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call BoolBodyAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(true);
Response response = await client.BoolBodyAsync(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call BoolBodyAsync with all request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(true);
Response response = await client.BoolBodyAsync(content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="BoolBody(RequestContent,RequestContext)">
      <example>
This sample shows how to call BoolBody.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(true);
Response response = client.BoolBody(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call BoolBody with all request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(true);
Response response = client.BoolBody(content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DateTimeBodyAsync(DateTimeOffset,CancellationToken)">
      <example>
This sample shows how to call DateTimeBodyAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = await client.DateTimeBodyAsync(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
]]></code>
This sample shows how to call DateTimeBodyAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = await client.DateTimeBodyAsync(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
]]></code></example>
    </member>
    <member name="DateTimeBody(DateTimeOffset,CancellationToken)">
      <example>
This sample shows how to call DateTimeBody.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = client.DateTimeBody(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
]]></code>
This sample shows how to call DateTimeBody with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = client.DateTimeBody(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
]]></code></example>
    </member>
    <member name="DateTimeBodyAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call DateTimeBodyAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create("2022-05-10T14:57:31.2311892-04:00");
Response response = await client.DateTimeBodyAsync(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DateTimeBodyAsync with all request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create("2022-05-10T14:57:31.2311892-04:00");
Response response = await client.DateTimeBodyAsync(content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DateTimeBody(RequestContent,RequestContext)">
      <example>
This sample shows how to call DateTimeBody.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create("2022-05-10T14:57:31.2311892-04:00");
Response response = client.DateTimeBody(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DateTimeBody with all request content.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create("2022-05-10T14:57:31.2311892-04:00");
Response response = client.DateTimeBody(content);

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="ReturnStringAsync(CancellationToken)">
      <example>
This sample shows how to call ReturnStringAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<string> response = await client.ReturnStringAsync();
]]></code>
This sample shows how to call ReturnStringAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<string> response = await client.ReturnStringAsync();
]]></code></example>
    </member>
    <member name="ReturnString(CancellationToken)">
      <example>
This sample shows how to call ReturnString.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<string> response = client.ReturnString();
]]></code>
This sample shows how to call ReturnString with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<string> response = client.ReturnString();
]]></code></example>
    </member>
    <member name="ReturnStringAsync(RequestContext)">
      <example>
This sample shows how to call ReturnStringAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = await client.ReturnStringAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ReturnStringAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = await client.ReturnStringAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="ReturnString(RequestContext)">
      <example>
This sample shows how to call ReturnString and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = client.ReturnString(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ReturnString with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = client.ReturnString(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="ReturnUnknownAsync(CancellationToken)">
      <example>
This sample shows how to call ReturnUnknownAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<BinaryData> response = await client.ReturnUnknownAsync();
]]></code>
This sample shows how to call ReturnUnknownAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<BinaryData> response = await client.ReturnUnknownAsync();
]]></code></example>
    </member>
    <member name="ReturnUnknown(CancellationToken)">
      <example>
This sample shows how to call ReturnUnknown.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<BinaryData> response = client.ReturnUnknown();
]]></code>
This sample shows how to call ReturnUnknown with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<BinaryData> response = client.ReturnUnknown();
]]></code></example>
    </member>
    <member name="ReturnUnknownAsync(RequestContext)">
      <example>
This sample shows how to call ReturnUnknownAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = await client.ReturnUnknownAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ReturnUnknownAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = await client.ReturnUnknownAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="ReturnUnknown(RequestContext)">
      <example>
This sample shows how to call ReturnUnknown and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = client.ReturnUnknown(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ReturnUnknown with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = client.ReturnUnknown(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="SayHiAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call SayHiAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = await client.SayHiAsync("<headParameter>", "<queryParameter>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call SayHiAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = await client.SayHiAsync("<headParameter>", "<queryParameter>", "<optionalQuery>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="SayHi(string,string,string,RequestContext)">
      <example>
This sample shows how to call SayHi and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = client.SayHi("<headParameter>", "<queryParameter>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call SayHi with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = client.SayHi("<headParameter>", "<queryParameter>", "<optionalQuery>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="HelloAgainAsync(string,string,RoundTripModel,CancellationToken)">
      <example>
This sample shows how to call HelloAgainAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

RoundTripModel action = new RoundTripModel("<requiredString>", 1234, new StringFixedEnum?[] { StringFixedEnum.One }, new Dictionary<string, StringExtensibleEnum?>
{
    ["key"] = StringExtensibleEnum.One
}, new Thing("<name>", BinaryData.FromObjectAsJson("<requiredUnion>"), "<requiredBadDescription>", new int[] { 1234 }), BinaryData.FromObjectAsJson(new object()), new Dictionary<string, BinaryData>
{
    ["key"] = BinaryData.FromObjectAsJson(new object())
}, new ModelWithRequiredNullableProperties(1234, StringExtensibleEnum.One, StringFixedEnum.One));
Response<RoundTripModel> response = await client.HelloAgainAsync("<p2>", "<p1>", action);
]]></code>
This sample shows how to call HelloAgainAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

RoundTripModel action = new RoundTripModel("<requiredString>", 1234, new StringFixedEnum?[] { StringFixedEnum.One }, new Dictionary<string, StringExtensibleEnum?>
{
    ["key"] = StringExtensibleEnum.One
}, new Thing("<name>", BinaryData.FromObjectAsJson("<requiredUnion>"), "<requiredBadDescription>", new int[] { 1234 })
{
    OptionalLiteralString = ThingOptionalLiteralString.Reject,
    OptionalLiteralInt = ThingOptionalLiteralInt._456,
    OptionalLiteralFloat = ThingOptionalLiteralFloat._456,
    OptionalLiteralBool = true,
    OptionalNullableList = { 1234 },
}, BinaryData.FromObjectAsJson(new object()), new Dictionary<string, BinaryData>
{
    ["key"] = BinaryData.FromObjectAsJson(new object())
}, new ModelWithRequiredNullableProperties(1234, StringExtensibleEnum.One, StringFixedEnum.One))
{
    IntExtensibleEnum = IntExtensibleEnum.One,
    IntExtensibleEnumCollection = { IntExtensibleEnum.One },
    FloatExtensibleEnum = FloatExtensibleEnum.One,
    FloatExtensibleEnumCollection = { FloatExtensibleEnum.One },
    FloatFixedEnum = FloatFixedEnum.One,
    FloatFixedEnumCollection = { FloatFixedEnum.One },
    IntFixedEnum = IntFixedEnum.One,
    IntFixedEnumCollection = { IntFixedEnum.One },
    StringFixedEnum = StringFixedEnum.One,
    OptionalUnknown = BinaryData.FromObjectAsJson(new object()),
    OptionalRecordUnknown =
    {
        ["key"] = BinaryData.FromObjectAsJson(new object())
    },
};
Response<RoundTripModel> response = await client.HelloAgainAsync("<p2>", "<p1>", action);
]]></code></example>
    </member>
    <member name="HelloAgain(string,string,RoundTripModel,CancellationToken)">
      <example>
This sample shows how to call HelloAgain.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

RoundTripModel action = new RoundTripModel("<requiredString>", 1234, new StringFixedEnum?[] { StringFixedEnum.One }, new Dictionary<string, StringExtensibleEnum?>
{
    ["key"] = StringExtensibleEnum.One
}, new Thing("<name>", BinaryData.FromObjectAsJson("<requiredUnion>"), "<requiredBadDescription>", new int[] { 1234 }), BinaryData.FromObjectAsJson(new object()), new Dictionary<string, BinaryData>
{
    ["key"] = BinaryData.FromObjectAsJson(new object())
}, new ModelWithRequiredNullableProperties(1234, StringExtensibleEnum.One, StringFixedEnum.One));
Response<RoundTripModel> response = client.HelloAgain("<p2>", "<p1>", action);
]]></code>
This sample shows how to call HelloAgain with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

RoundTripModel action = new RoundTripModel("<requiredString>", 1234, new StringFixedEnum?[] { StringFixedEnum.One }, new Dictionary<string, StringExtensibleEnum?>
{
    ["key"] = StringExtensibleEnum.One
}, new Thing("<name>", BinaryData.FromObjectAsJson("<requiredUnion>"), "<requiredBadDescription>", new int[] { 1234 })
{
    OptionalLiteralString = ThingOptionalLiteralString.Reject,
    OptionalLiteralInt = ThingOptionalLiteralInt._456,
    OptionalLiteralFloat = ThingOptionalLiteralFloat._456,
    OptionalLiteralBool = true,
    OptionalNullableList = { 1234 },
}, BinaryData.FromObjectAsJson(new object()), new Dictionary<string, BinaryData>
{
    ["key"] = BinaryData.FromObjectAsJson(new object())
}, new ModelWithRequiredNullableProperties(1234, StringExtensibleEnum.One, StringFixedEnum.One))
{
    IntExtensibleEnum = IntExtensibleEnum.One,
    IntExtensibleEnumCollection = { IntExtensibleEnum.One },
    FloatExtensibleEnum = FloatExtensibleEnum.One,
    FloatExtensibleEnumCollection = { FloatExtensibleEnum.One },
    FloatFixedEnum = FloatFixedEnum.One,
    FloatFixedEnumCollection = { FloatFixedEnum.One },
    IntFixedEnum = IntFixedEnum.One,
    IntFixedEnumCollection = { IntFixedEnum.One },
    StringFixedEnum = StringFixedEnum.One,
    OptionalUnknown = BinaryData.FromObjectAsJson(new object()),
    OptionalRecordUnknown =
    {
        ["key"] = BinaryData.FromObjectAsJson(new object())
    },
};
Response<RoundTripModel> response = client.HelloAgain("<p2>", "<p1>", action);
]]></code></example>
    </member>
    <member name="HelloAgainAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call HelloAgainAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new object[]
    {
        "1"
    },
    requiredDictionary = new
    {
        key = "1",
    },
    requiredModel = new
    {
        name = "<name>",
        requiredUnion = "<requiredUnion>",
        requiredLiteralString = "accept",
        requiredLiteralInt = 123,
        requiredLiteralFloat = 1.23F,
        requiredLiteralBool = false,
        requiredBadDescription = "<requiredBadDescription>",
        requiredNullableList = new object[]
        {
            1234
        },
    },
    requiredUnknown = new object(),
    requiredRecordUnknown = new
    {
        key = new object(),
    },
    modelWithRequiredNullable = new
    {
        requiredNullablePrimitive = 1234,
        requiredExtensibleEnum = "1",
        requiredFixedEnum = "1",
    },
});
Response response = await client.HelloAgainAsync("<p2>", "<p1>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredCollection")[0].ToString());
Console.WriteLine(result.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredNullablePrimitive").ToString());
Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredFixedEnum").ToString());
]]></code>
This sample shows how to call HelloAgainAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new object[]
    {
        "1"
    },
    requiredDictionary = new
    {
        key = "1",
    },
    requiredModel = new
    {
        name = "<name>",
        requiredUnion = "<requiredUnion>",
        requiredLiteralString = "accept",
        requiredLiteralInt = 123,
        requiredLiteralFloat = 1.23F,
        requiredLiteralBool = false,
        optionalLiteralString = "reject",
        optionalLiteralInt = 456,
        optionalLiteralFloat = 4.56F,
        optionalLiteralBool = true,
        requiredBadDescription = "<requiredBadDescription>",
        optionalNullableList = new object[]
        {
            1234
        },
        requiredNullableList = new object[]
        {
            1234
        },
    },
    intExtensibleEnum = 1,
    intExtensibleEnumCollection = new object[]
    {
        1
    },
    floatExtensibleEnum = 1,
    floatExtensibleEnumCollection = new object[]
    {
        1
    },
    floatFixedEnum = 1.1F,
    floatFixedEnumCollection = new object[]
    {
        1.1F
    },
    intFixedEnum = 1,
    intFixedEnumCollection = new object[]
    {
        1
    },
    stringFixedEnum = "1",
    requiredUnknown = new object(),
    optionalUnknown = new object(),
    requiredRecordUnknown = new
    {
        key = new object(),
    },
    optionalRecordUnknown = new
    {
        key = new object(),
    },
    modelWithRequiredNullable = new
    {
        requiredNullablePrimitive = 1234,
        requiredExtensibleEnum = "1",
        requiredFixedEnum = "1",
    },
});
Response response = await client.HelloAgainAsync("<p2>", "<p1>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredCollection")[0].ToString());
Console.WriteLine(result.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("intExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("intExtensibleEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("floatExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("floatExtensibleEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("floatFixedEnum").ToString());
Console.WriteLine(result.GetProperty("floatFixedEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("intFixedEnum").ToString());
Console.WriteLine(result.GetProperty("intFixedEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("stringFixedEnum").ToString());
Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result.GetProperty("optionalUnknown").ToString());
Console.WriteLine(result.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("optionalRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("readOnlyOptionalRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredNullablePrimitive").ToString());
Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredFixedEnum").ToString());
]]></code></example>
    </member>
    <member name="HelloAgain(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call HelloAgain and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new object[]
    {
        "1"
    },
    requiredDictionary = new
    {
        key = "1",
    },
    requiredModel = new
    {
        name = "<name>",
        requiredUnion = "<requiredUnion>",
        requiredLiteralString = "accept",
        requiredLiteralInt = 123,
        requiredLiteralFloat = 1.23F,
        requiredLiteralBool = false,
        requiredBadDescription = "<requiredBadDescription>",
        requiredNullableList = new object[]
        {
            1234
        },
    },
    requiredUnknown = new object(),
    requiredRecordUnknown = new
    {
        key = new object(),
    },
    modelWithRequiredNullable = new
    {
        requiredNullablePrimitive = 1234,
        requiredExtensibleEnum = "1",
        requiredFixedEnum = "1",
    },
});
Response response = client.HelloAgain("<p2>", "<p1>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredCollection")[0].ToString());
Console.WriteLine(result.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredNullablePrimitive").ToString());
Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredFixedEnum").ToString());
]]></code>
This sample shows how to call HelloAgain with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new object[]
    {
        "1"
    },
    requiredDictionary = new
    {
        key = "1",
    },
    requiredModel = new
    {
        name = "<name>",
        requiredUnion = "<requiredUnion>",
        requiredLiteralString = "accept",
        requiredLiteralInt = 123,
        requiredLiteralFloat = 1.23F,
        requiredLiteralBool = false,
        optionalLiteralString = "reject",
        optionalLiteralInt = 456,
        optionalLiteralFloat = 4.56F,
        optionalLiteralBool = true,
        requiredBadDescription = "<requiredBadDescription>",
        optionalNullableList = new object[]
        {
            1234
        },
        requiredNullableList = new object[]
        {
            1234
        },
    },
    intExtensibleEnum = 1,
    intExtensibleEnumCollection = new object[]
    {
        1
    },
    floatExtensibleEnum = 1,
    floatExtensibleEnumCollection = new object[]
    {
        1
    },
    floatFixedEnum = 1.1F,
    floatFixedEnumCollection = new object[]
    {
        1.1F
    },
    intFixedEnum = 1,
    intFixedEnumCollection = new object[]
    {
        1
    },
    stringFixedEnum = "1",
    requiredUnknown = new object(),
    optionalUnknown = new object(),
    requiredRecordUnknown = new
    {
        key = new object(),
    },
    optionalRecordUnknown = new
    {
        key = new object(),
    },
    modelWithRequiredNullable = new
    {
        requiredNullablePrimitive = 1234,
        requiredExtensibleEnum = "1",
        requiredFixedEnum = "1",
    },
});
Response response = client.HelloAgain("<p2>", "<p1>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredCollection")[0].ToString());
Console.WriteLine(result.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("intExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("intExtensibleEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("floatExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("floatExtensibleEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("floatFixedEnum").ToString());
Console.WriteLine(result.GetProperty("floatFixedEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("intFixedEnum").ToString());
Console.WriteLine(result.GetProperty("intFixedEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("stringFixedEnum").ToString());
Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result.GetProperty("optionalUnknown").ToString());
Console.WriteLine(result.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("optionalRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("readOnlyOptionalRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredNullablePrimitive").ToString());
Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredFixedEnum").ToString());
]]></code></example>
    </member>
    <member name="NoContentTypeAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call NoContentTypeAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new object[]
    {
        "1"
    },
    requiredDictionary = new
    {
        key = "1",
    },
    requiredModel = new
    {
        name = "<name>",
        requiredUnion = "<requiredUnion>",
        requiredLiteralString = "accept",
        requiredLiteralInt = 123,
        requiredLiteralFloat = 1.23F,
        requiredLiteralBool = false,
        requiredBadDescription = "<requiredBadDescription>",
        requiredNullableList = new object[]
        {
            1234
        },
    },
    requiredUnknown = new object(),
    requiredRecordUnknown = new
    {
        key = new object(),
    },
    modelWithRequiredNullable = new
    {
        requiredNullablePrimitive = 1234,
        requiredExtensibleEnum = "1",
        requiredFixedEnum = "1",
    },
});
Response response = await client.NoContentTypeAsync("<p2>", "<p1>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredCollection")[0].ToString());
Console.WriteLine(result.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredNullablePrimitive").ToString());
Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredFixedEnum").ToString());
]]></code>
This sample shows how to call NoContentTypeAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new object[]
    {
        "1"
    },
    requiredDictionary = new
    {
        key = "1",
    },
    requiredModel = new
    {
        name = "<name>",
        requiredUnion = "<requiredUnion>",
        requiredLiteralString = "accept",
        requiredLiteralInt = 123,
        requiredLiteralFloat = 1.23F,
        requiredLiteralBool = false,
        optionalLiteralString = "reject",
        optionalLiteralInt = 456,
        optionalLiteralFloat = 4.56F,
        optionalLiteralBool = true,
        requiredBadDescription = "<requiredBadDescription>",
        optionalNullableList = new object[]
        {
            1234
        },
        requiredNullableList = new object[]
        {
            1234
        },
    },
    intExtensibleEnum = 1,
    intExtensibleEnumCollection = new object[]
    {
        1
    },
    floatExtensibleEnum = 1,
    floatExtensibleEnumCollection = new object[]
    {
        1
    },
    floatFixedEnum = 1.1F,
    floatFixedEnumCollection = new object[]
    {
        1.1F
    },
    intFixedEnum = 1,
    intFixedEnumCollection = new object[]
    {
        1
    },
    stringFixedEnum = "1",
    requiredUnknown = new object(),
    optionalUnknown = new object(),
    requiredRecordUnknown = new
    {
        key = new object(),
    },
    optionalRecordUnknown = new
    {
        key = new object(),
    },
    modelWithRequiredNullable = new
    {
        requiredNullablePrimitive = 1234,
        requiredExtensibleEnum = "1",
        requiredFixedEnum = "1",
    },
});
Response response = await client.NoContentTypeAsync("<p2>", "<p1>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredCollection")[0].ToString());
Console.WriteLine(result.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("intExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("intExtensibleEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("floatExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("floatExtensibleEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("floatFixedEnum").ToString());
Console.WriteLine(result.GetProperty("floatFixedEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("intFixedEnum").ToString());
Console.WriteLine(result.GetProperty("intFixedEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("stringFixedEnum").ToString());
Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result.GetProperty("optionalUnknown").ToString());
Console.WriteLine(result.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("optionalRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("readOnlyOptionalRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredNullablePrimitive").ToString());
Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredFixedEnum").ToString());
]]></code></example>
    </member>
    <member name="NoContentType(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call NoContentType and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new object[]
    {
        "1"
    },
    requiredDictionary = new
    {
        key = "1",
    },
    requiredModel = new
    {
        name = "<name>",
        requiredUnion = "<requiredUnion>",
        requiredLiteralString = "accept",
        requiredLiteralInt = 123,
        requiredLiteralFloat = 1.23F,
        requiredLiteralBool = false,
        requiredBadDescription = "<requiredBadDescription>",
        requiredNullableList = new object[]
        {
            1234
        },
    },
    requiredUnknown = new object(),
    requiredRecordUnknown = new
    {
        key = new object(),
    },
    modelWithRequiredNullable = new
    {
        requiredNullablePrimitive = 1234,
        requiredExtensibleEnum = "1",
        requiredFixedEnum = "1",
    },
});
Response response = client.NoContentType("<p2>", "<p1>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredCollection")[0].ToString());
Console.WriteLine(result.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredNullablePrimitive").ToString());
Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredFixedEnum").ToString());
]]></code>
This sample shows how to call NoContentType with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    requiredString = "<requiredString>",
    requiredInt = 1234,
    requiredCollection = new object[]
    {
        "1"
    },
    requiredDictionary = new
    {
        key = "1",
    },
    requiredModel = new
    {
        name = "<name>",
        requiredUnion = "<requiredUnion>",
        requiredLiteralString = "accept",
        requiredLiteralInt = 123,
        requiredLiteralFloat = 1.23F,
        requiredLiteralBool = false,
        optionalLiteralString = "reject",
        optionalLiteralInt = 456,
        optionalLiteralFloat = 4.56F,
        optionalLiteralBool = true,
        requiredBadDescription = "<requiredBadDescription>",
        optionalNullableList = new object[]
        {
            1234
        },
        requiredNullableList = new object[]
        {
            1234
        },
    },
    intExtensibleEnum = 1,
    intExtensibleEnumCollection = new object[]
    {
        1
    },
    floatExtensibleEnum = 1,
    floatExtensibleEnumCollection = new object[]
    {
        1
    },
    floatFixedEnum = 1.1F,
    floatFixedEnumCollection = new object[]
    {
        1.1F
    },
    intFixedEnum = 1,
    intFixedEnumCollection = new object[]
    {
        1
    },
    stringFixedEnum = "1",
    requiredUnknown = new object(),
    optionalUnknown = new object(),
    requiredRecordUnknown = new
    {
        key = new object(),
    },
    optionalRecordUnknown = new
    {
        key = new object(),
    },
    modelWithRequiredNullable = new
    {
        requiredNullablePrimitive = 1234,
        requiredExtensibleEnum = "1",
        requiredFixedEnum = "1",
    },
});
Response response = client.NoContentType("<p2>", "<p1>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requiredString").ToString());
Console.WriteLine(result.GetProperty("requiredInt").ToString());
Console.WriteLine(result.GetProperty("requiredCollection")[0].ToString());
Console.WriteLine(result.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("intExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("intExtensibleEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("floatExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("floatExtensibleEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("floatFixedEnum").ToString());
Console.WriteLine(result.GetProperty("floatFixedEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("intFixedEnum").ToString());
Console.WriteLine(result.GetProperty("intFixedEnumCollection")[0].ToString());
Console.WriteLine(result.GetProperty("stringFixedEnum").ToString());
Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
Console.WriteLine(result.GetProperty("optionalUnknown").ToString());
Console.WriteLine(result.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("optionalRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("readOnlyOptionalRecordUnknown").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredNullablePrimitive").ToString());
Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredExtensibleEnum").ToString());
Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredFixedEnum").ToString());
]]></code></example>
    </member>
    <member name="HelloDemo2Async(CancellationToken)">
      <example>
This sample shows how to call HelloDemo2Async.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<Thing> response = await client.HelloDemo2Async();
]]></code>
This sample shows how to call HelloDemo2Async with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<Thing> response = await client.HelloDemo2Async();
]]></code></example>
    </member>
    <member name="HelloDemo2(CancellationToken)">
      <example>
This sample shows how to call HelloDemo2.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<Thing> response = client.HelloDemo2();
]]></code>
This sample shows how to call HelloDemo2 with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<Thing> response = client.HelloDemo2();
]]></code></example>
    </member>
    <member name="HelloDemo2Async(RequestContext)">
      <example>
This sample shows how to call HelloDemo2Async and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = await client.HelloDemo2Async(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call HelloDemo2Async with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = await client.HelloDemo2Async(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="HelloDemo2(RequestContext)">
      <example>
This sample shows how to call HelloDemo2 and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = client.HelloDemo2(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call HelloDemo2 with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = client.HelloDemo2(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="CreateLiteralAsync(Thing,CancellationToken)">
      <example>
This sample shows how to call CreateLiteralAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Thing body = new Thing("<name>", BinaryData.FromObjectAsJson("<requiredUnion>"), "<requiredBadDescription>", new int[] { 1234 });
Response<Thing> response = await client.CreateLiteralAsync(body);
]]></code>
This sample shows how to call CreateLiteralAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Thing body = new Thing("<name>", BinaryData.FromObjectAsJson("<requiredUnion>"), "<requiredBadDescription>", new int[] { 1234 })
{
    OptionalLiteralString = ThingOptionalLiteralString.Reject,
    OptionalLiteralInt = ThingOptionalLiteralInt._456,
    OptionalLiteralFloat = ThingOptionalLiteralFloat._456,
    OptionalLiteralBool = true,
    OptionalNullableList = { 1234 },
};
Response<Thing> response = await client.CreateLiteralAsync(body);
]]></code></example>
    </member>
    <member name="CreateLiteral(Thing,CancellationToken)">
      <example>
This sample shows how to call CreateLiteral.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Thing body = new Thing("<name>", BinaryData.FromObjectAsJson("<requiredUnion>"), "<requiredBadDescription>", new int[] { 1234 });
Response<Thing> response = client.CreateLiteral(body);
]]></code>
This sample shows how to call CreateLiteral with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Thing body = new Thing("<name>", BinaryData.FromObjectAsJson("<requiredUnion>"), "<requiredBadDescription>", new int[] { 1234 })
{
    OptionalLiteralString = ThingOptionalLiteralString.Reject,
    OptionalLiteralInt = ThingOptionalLiteralInt._456,
    OptionalLiteralFloat = ThingOptionalLiteralFloat._456,
    OptionalLiteralBool = true,
    OptionalNullableList = { 1234 },
};
Response<Thing> response = client.CreateLiteral(body);
]]></code></example>
    </member>
    <member name="CreateLiteralAsync(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateLiteralAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    requiredBadDescription = "<requiredBadDescription>",
    requiredNullableList = new object[]
    {
        1234
    },
});
Response response = await client.CreateLiteralAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call CreateLiteralAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    optionalLiteralString = "reject",
    optionalLiteralInt = 456,
    optionalLiteralFloat = 4.56F,
    optionalLiteralBool = true,
    requiredBadDescription = "<requiredBadDescription>",
    optionalNullableList = new object[]
    {
        1234
    },
    requiredNullableList = new object[]
    {
        1234
    },
});
Response response = await client.CreateLiteralAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="CreateLiteral(RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateLiteral and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    requiredBadDescription = "<requiredBadDescription>",
    requiredNullableList = new object[]
    {
        1234
    },
});
Response response = client.CreateLiteral(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call CreateLiteral with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

using RequestContent content = RequestContent.Create(new
{
    name = "<name>",
    requiredUnion = "<requiredUnion>",
    requiredLiteralString = "accept",
    requiredLiteralInt = 123,
    requiredLiteralFloat = 1.23F,
    requiredLiteralBool = false,
    optionalLiteralString = "reject",
    optionalLiteralInt = 456,
    optionalLiteralFloat = 4.56F,
    optionalLiteralBool = true,
    requiredBadDescription = "<requiredBadDescription>",
    optionalNullableList = new object[]
    {
        1234
    },
    requiredNullableList = new object[]
    {
        1234
    },
});
Response response = client.CreateLiteral(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="HelloLiteralAsync(CancellationToken)">
      <example>
This sample shows how to call HelloLiteralAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<Thing> response = await client.HelloLiteralAsync();
]]></code>
This sample shows how to call HelloLiteralAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<Thing> response = await client.HelloLiteralAsync();
]]></code></example>
    </member>
    <member name="HelloLiteral(CancellationToken)">
      <example>
This sample shows how to call HelloLiteral.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<Thing> response = client.HelloLiteral();
]]></code>
This sample shows how to call HelloLiteral with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response<Thing> response = client.HelloLiteral();
]]></code></example>
    </member>
    <member name="HelloLiteralAsync(RequestContext)">
      <example>
This sample shows how to call HelloLiteralAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = await client.HelloLiteralAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call HelloLiteralAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = await client.HelloLiteralAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="HelloLiteral(RequestContext)">
      <example>
This sample shows how to call HelloLiteral and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = client.HelloLiteral(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code>
This sample shows how to call HelloLiteral with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = client.HelloLiteral(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("requiredUnion").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
]]></code></example>
    </member>
    <member name="GetUnknownValueAsync(RequestContext)">
      <example>
This sample shows how to call GetUnknownValueAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = await client.GetUnknownValueAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetUnknownValueAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = await client.GetUnknownValueAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetUnknownValue(RequestContext)">
      <example>
This sample shows how to call GetUnknownValue and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = client.GetUnknownValue(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetUnknownValue with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

Response response = client.GetUnknownValue(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
  </members>
</doc>