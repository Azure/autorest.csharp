// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Globalization;

namespace FirstTestTypeSpec.Models
{
    /// <summary> The Thing_requiredUnionOfLiteralInt. </summary>
    internal readonly partial struct ThingRequiredUnionOfLiteralInt : IEquatable<ThingRequiredUnionOfLiteralInt>
    {
        private readonly int _value;

        /// <summary> Initializes a new instance of <see cref="ThingRequiredUnionOfLiteralInt"/>. </summary>
        public ThingRequiredUnionOfLiteralInt(int value)
        {
            _value = value;
        }

        private const int _123Value = 123;
        private const int _456Value = 456;

        /// <summary> 123. </summary>
        public static ThingRequiredUnionOfLiteralInt _123 { get; } = new ThingRequiredUnionOfLiteralInt(_123Value);
        /// <summary> 456. </summary>
        public static ThingRequiredUnionOfLiteralInt _456 { get; } = new ThingRequiredUnionOfLiteralInt(_456Value);

        internal int ToSerialInt32() => _value;

        /// <summary> Determines if two <see cref="ThingRequiredUnionOfLiteralInt"/> values are the same. </summary>
        public static bool operator ==(ThingRequiredUnionOfLiteralInt left, ThingRequiredUnionOfLiteralInt right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ThingRequiredUnionOfLiteralInt"/> values are not the same. </summary>
        public static bool operator !=(ThingRequiredUnionOfLiteralInt left, ThingRequiredUnionOfLiteralInt right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ThingRequiredUnionOfLiteralInt"/>. </summary>
        public static implicit operator ThingRequiredUnionOfLiteralInt(int value) => new ThingRequiredUnionOfLiteralInt(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ThingRequiredUnionOfLiteralInt other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ThingRequiredUnionOfLiteralInt other) => Equals(_value, other._value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value.GetHashCode();
        /// <inheritdoc />
        public override string ToString() => _value.ToString(CultureInfo.InvariantCulture);
    }
}
