// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace FirstTestTypeSpec.Models
{
    /// <summary> The auth flow model. </summary>
    public partial class AuthFlow
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AuthFlow"/>. </summary>
        /// <param name="type"></param>
        /// <param name="scopes"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="type"/> or <paramref name="scopes"/> is null. </exception>
        internal AuthFlow(string type, BinaryData scopes)
        {
            Argument.AssertNotNull(type, nameof(type));
            Argument.AssertNotNull(scopes, nameof(scopes));

            Type = type;
            Scopes = scopes;
        }

        /// <summary> Initializes a new instance of <see cref="AuthFlow"/>. </summary>
        /// <param name="type"></param>
        /// <param name="tokenUrl"></param>
        /// <param name="refreshUrl"></param>
        /// <param name="scopes"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AuthFlow(string type, string tokenUrl, string refreshUrl, BinaryData scopes, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Type = type;
            TokenUrl = tokenUrl;
            RefreshUrl = refreshUrl;
            Scopes = scopes;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="AuthFlow"/> for deserialization. </summary>
        internal AuthFlow()
        {
        }

        /// <summary> Gets the type. </summary>
        public string Type { get; }
        /// <summary> Gets the token url. </summary>
        public string TokenUrl { get; } = "https://api.example.com/oauth2/token";

        /// <summary> Gets the refresh url. </summary>
        public string RefreshUrl { get; } = "https://api.example.com/oauth2/refresh";

        /// <summary>
        /// Gets the scopes
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Scopes { get; }
    }
}
