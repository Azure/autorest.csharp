// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace FirstTestTypeSpec.Models
{
    /// <summary> The AuthFlow_refreshUrl. </summary>
    public readonly partial struct AuthFlowRefreshUrl : IEquatable<AuthFlowRefreshUrl>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AuthFlowRefreshUrl"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AuthFlowRefreshUrl(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HttpsApiExampleComOauth2RefreshValue = "https://api.example.com/oauth2/refresh";

        /// <summary> https://api.example.com/oauth2/refresh. </summary>
        public static AuthFlowRefreshUrl HttpsApiExampleComOauth2Refresh { get; } = new AuthFlowRefreshUrl(HttpsApiExampleComOauth2RefreshValue);
        /// <summary> Determines if two <see cref="AuthFlowRefreshUrl"/> values are the same. </summary>
        public static bool operator ==(AuthFlowRefreshUrl left, AuthFlowRefreshUrl right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AuthFlowRefreshUrl"/> values are not the same. </summary>
        public static bool operator !=(AuthFlowRefreshUrl left, AuthFlowRefreshUrl right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AuthFlowRefreshUrl"/>. </summary>
        public static implicit operator AuthFlowRefreshUrl(string value) => new AuthFlowRefreshUrl(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AuthFlowRefreshUrl other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AuthFlowRefreshUrl other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
