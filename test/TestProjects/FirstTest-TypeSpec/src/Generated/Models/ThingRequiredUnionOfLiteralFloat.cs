// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Globalization;

namespace FirstTestTypeSpec.Models
{
    /// <summary> The Thing_requiredUnionOfLiteralFloat. </summary>
    internal readonly partial struct ThingRequiredUnionOfLiteralFloat : IEquatable<ThingRequiredUnionOfLiteralFloat>
    {
        private readonly float _value;

        /// <summary> Initializes a new instance of <see cref="ThingRequiredUnionOfLiteralFloat"/>. </summary>
        public ThingRequiredUnionOfLiteralFloat(float value)
        {
            _value = value;
        }

        private const float _123Value = 1.23F;
        private const float _456Value = 4.56F;

        /// <summary> 1.23. </summary>
        public static ThingRequiredUnionOfLiteralFloat _123 { get; } = new ThingRequiredUnionOfLiteralFloat(_123Value);
        /// <summary> 4.56. </summary>
        public static ThingRequiredUnionOfLiteralFloat _456 { get; } = new ThingRequiredUnionOfLiteralFloat(_456Value);

        internal float ToSerialSingle() => _value;

        /// <summary> Determines if two <see cref="ThingRequiredUnionOfLiteralFloat"/> values are the same. </summary>
        public static bool operator ==(ThingRequiredUnionOfLiteralFloat left, ThingRequiredUnionOfLiteralFloat right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ThingRequiredUnionOfLiteralFloat"/> values are not the same. </summary>
        public static bool operator !=(ThingRequiredUnionOfLiteralFloat left, ThingRequiredUnionOfLiteralFloat right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ThingRequiredUnionOfLiteralFloat"/>. </summary>
        public static implicit operator ThingRequiredUnionOfLiteralFloat(float value) => new ThingRequiredUnionOfLiteralFloat(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ThingRequiredUnionOfLiteralFloat other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ThingRequiredUnionOfLiteralFloat other) => Equals(_value, other._value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value.GetHashCode();
        /// <inheritdoc />
        public override string ToString() => _value.ToString(CultureInfo.InvariantCulture);
    }
}
