// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;

namespace FirstTestTypeSpec.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class FirstTestTypeSpecModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.Thing"/>. </summary>
        /// <param name="name"></param>
        /// <param name="requiredUnion"></param>
        /// <param name="requiredLiteralString"></param>
        /// <param name="requiredLiteralInt"></param>
        /// <param name="requiredLiteralFloat"></param>
        /// <param name="requiredLiteralBool"></param>
        /// <param name="optionalLiteralString"></param>
        /// <param name="optionalLiteralInt"></param>
        /// <param name="optionalLiteralFloat"></param>
        /// <param name="optionalLiteralBool"></param>
        /// <param name="requiredBadDescription"></param>
        /// <param name="optionalNullableList"></param>
        /// <param name="requiredNullableList"></param>
        /// <param name="requiredFloatProperty"></param>
        /// <param name="optionalFloatProperty"></param>
        /// <param name="optionalResourceId"></param>
        /// <returns> A new <see cref="Models.Thing"/> instance for mocking. </returns>
        public static Thing Thing(string name = null, BinaryData requiredUnion = null, ThingRequiredLiteralString requiredLiteralString = default, ThingRequiredLiteralInt requiredLiteralInt = default, ThingRequiredLiteralFloat requiredLiteralFloat = default, bool requiredLiteralBool = default, ThingOptionalLiteralString? optionalLiteralString = null, ThingOptionalLiteralInt? optionalLiteralInt = null, ThingOptionalLiteralFloat? optionalLiteralFloat = null, bool? optionalLiteralBool = null, string requiredBadDescription = null, IEnumerable<int> optionalNullableList = null, IEnumerable<int> requiredNullableList = null, double requiredFloatProperty = default, double? optionalFloatProperty = null, ResourceIdentifier optionalResourceId = null)
        {
            optionalNullableList ??= new List<int>();
            requiredNullableList ??= new List<int>();

            return new Thing(
                name,
                requiredUnion,
                requiredLiteralString,
                requiredLiteralInt,
                requiredLiteralFloat,
                requiredLiteralBool,
                optionalLiteralString,
                optionalLiteralInt,
                optionalLiteralFloat,
                optionalLiteralBool,
                requiredBadDescription,
                optionalNullableList?.ToList(),
                requiredNullableList?.ToList(),
                requiredFloatProperty,
                optionalFloatProperty,
                optionalResourceId,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Friend"/>. </summary>
        /// <param name="name"></param>
        /// <returns> A new <see cref="Models.Friend"/> instance for mocking. </returns>
        public static Friend Friend(string name = null)
        {
            return new Friend(name, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ProjectedModel"/>. </summary>
        /// <param name="name"></param>
        /// <returns> A new <see cref="Models.ProjectedModel"/> instance for mocking. </returns>
        public static ProjectedModel ProjectedModel(string name = null)
        {
            return new ProjectedModel(name, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Extension"/>. </summary>
        /// <param name="extension"></param>
        /// <param name="level"></param>
        /// <returns> A new <see cref="Models.Extension"/> instance for mocking. </returns>
        public static Extension Extension(IEnumerable<Extension> extension = null, sbyte level = default)
        {
            extension ??= new List<Extension>();

            return new Extension(extension?.ToList(), serializedAdditionalRawData: null, level);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ThereLevelExtension"/>. </summary>
        /// <param name="extension"></param>
        /// <param name="level"></param>
        /// <returns> A new <see cref="Models.ThereLevelExtension"/> instance for mocking. </returns>
        public static ThereLevelExtension ThereLevelExtension(IEnumerable<ThereLevelExtension> extension = null, sbyte level = default)
        {
            extension ??= new List<ThereLevelExtension>();

            return new ThereLevelExtension(extension?.ToList(), serializedAdditionalRawData: null, level);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RoundTripModel"/>. </summary>
        /// <param name="requiredString"></param>
        /// <param name="requiredInt"></param>
        /// <param name="requiredCollection"></param>
        /// <param name="requiredDictionary"></param>
        /// <param name="requiredModel"></param>
        /// <param name="intExtensibleEnum"></param>
        /// <param name="intExtensibleEnumCollection"></param>
        /// <param name="floatExtensibleEnum"></param>
        /// <param name="floatExtensibleEnumCollection"></param>
        /// <param name="floatFixedEnum"></param>
        /// <param name="floatFixedEnumCollection"></param>
        /// <param name="intFixedEnum"></param>
        /// <param name="intFixedEnumCollection"></param>
        /// <param name="stringFixedEnum"></param>
        /// <param name="requiredUnknown"></param>
        /// <param name="optionalUnknown"></param>
        /// <param name="requiredRecordUnknown"></param>
        /// <param name="optionalRecordUnknown"></param>
        /// <param name="readOnlyRequiredRecordUnknown"></param>
        /// <param name="readOnlyOptionalRecordUnknown"></param>
        /// <param name="modelWithRequiredNullable"></param>
        /// <param name="unionList"></param>
        /// <returns> A new <see cref="Models.RoundTripModel"/> instance for mocking. </returns>
        public static RoundTripModel RoundTripModel(string requiredString = null, int requiredInt = default, IEnumerable<StringFixedEnum> requiredCollection = null, IDictionary<string, StringExtensibleEnum> requiredDictionary = null, Thing requiredModel = null, IntExtensibleEnum? intExtensibleEnum = null, IEnumerable<IntExtensibleEnum> intExtensibleEnumCollection = null, FloatExtensibleEnum? floatExtensibleEnum = null, IEnumerable<FloatExtensibleEnum> floatExtensibleEnumCollection = null, FloatFixedEnum? floatFixedEnum = null, IEnumerable<FloatFixedEnum> floatFixedEnumCollection = null, IntFixedEnum? intFixedEnum = null, IEnumerable<IntFixedEnum> intFixedEnumCollection = null, StringFixedEnum? stringFixedEnum = null, BinaryData requiredUnknown = null, BinaryData optionalUnknown = null, IDictionary<string, BinaryData> requiredRecordUnknown = null, IDictionary<string, BinaryData> optionalRecordUnknown = null, IReadOnlyDictionary<string, BinaryData> readOnlyRequiredRecordUnknown = null, IReadOnlyDictionary<string, BinaryData> readOnlyOptionalRecordUnknown = null, ModelWithRequiredNullableProperties modelWithRequiredNullable = null, IEnumerable<BinaryData> unionList = null)
        {
            requiredCollection ??= new List<StringFixedEnum>();
            requiredDictionary ??= new Dictionary<string, StringExtensibleEnum>();
            intExtensibleEnumCollection ??= new List<IntExtensibleEnum>();
            floatExtensibleEnumCollection ??= new List<FloatExtensibleEnum>();
            floatFixedEnumCollection ??= new List<FloatFixedEnum>();
            intFixedEnumCollection ??= new List<IntFixedEnum>();
            requiredRecordUnknown ??= new Dictionary<string, BinaryData>();
            optionalRecordUnknown ??= new Dictionary<string, BinaryData>();
            readOnlyRequiredRecordUnknown ??= new Dictionary<string, BinaryData>();
            readOnlyOptionalRecordUnknown ??= new Dictionary<string, BinaryData>();
            unionList ??= new List<BinaryData>();

            return new RoundTripModel(
                requiredString,
                requiredInt,
                requiredCollection?.ToList(),
                requiredDictionary,
                requiredModel,
                intExtensibleEnum,
                intExtensibleEnumCollection?.ToList(),
                floatExtensibleEnum,
                floatExtensibleEnumCollection?.ToList(),
                floatFixedEnum,
                floatFixedEnumCollection?.ToList(),
                intFixedEnum,
                intFixedEnumCollection?.ToList(),
                stringFixedEnum,
                requiredUnknown,
                optionalUnknown,
                requiredRecordUnknown,
                optionalRecordUnknown,
                readOnlyRequiredRecordUnknown,
                readOnlyOptionalRecordUnknown,
                modelWithRequiredNullable,
                unionList?.ToList(),
                serializedAdditionalRawData: null);
        }
    }
}
