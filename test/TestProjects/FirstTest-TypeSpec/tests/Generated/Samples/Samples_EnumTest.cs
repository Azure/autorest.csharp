// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using FirstTestTypeSpec.Models;
using NUnit.Framework;

namespace FirstTestTypeSpec.Samples
{
    public partial class Samples_EnumTest
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnumTest_CreateUnknownValue_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            EnumTest client = new FirstTestTypeSpecClient(endpoint).GetEnumTestClient();

            using RequestContent content = RequestContent.Create("Monday");
            Response response = client.CreateUnknownValue(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnumTest_CreateUnknownValue_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            EnumTest client = new FirstTestTypeSpecClient(endpoint).GetEnumTestClient();

            using RequestContent content = RequestContent.Create("Monday");
            Response response = await client.CreateUnknownValueAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnumTest_CreateUnknownValue_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            EnumTest client = new FirstTestTypeSpecClient(endpoint).GetEnumTestClient();

            Response response = client.CreateUnknownValue(DaysOfWeekExtensibleEnum.Monday);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnumTest_CreateUnknownValue_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            EnumTest client = new FirstTestTypeSpecClient(endpoint).GetEnumTestClient();

            Response response = await client.CreateUnknownValueAsync(DaysOfWeekExtensibleEnum.Monday);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnumTest_CreateUnknownValue_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            EnumTest client = new FirstTestTypeSpecClient(endpoint).GetEnumTestClient();

            using RequestContent content = RequestContent.Create("Monday");
            Response response = client.CreateUnknownValue(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnumTest_CreateUnknownValue_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            EnumTest client = new FirstTestTypeSpecClient(endpoint).GetEnumTestClient();

            using RequestContent content = RequestContent.Create("Monday");
            Response response = await client.CreateUnknownValueAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnumTest_CreateUnknownValue_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            EnumTest client = new FirstTestTypeSpecClient(endpoint).GetEnumTestClient();

            Response response = client.CreateUnknownValue(DaysOfWeekExtensibleEnum.Monday);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnumTest_CreateUnknownValue_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            EnumTest client = new FirstTestTypeSpecClient(endpoint).GetEnumTestClient();

            Response response = await client.CreateUnknownValueAsync(DaysOfWeekExtensibleEnum.Monday);
        }
    }
}
