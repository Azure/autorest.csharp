// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using FirstTestTypeSpec;
using FirstTestTypeSpec.Models;
using NUnit.Framework;

namespace FirstTestTypeSpec.Samples
{
    public class Samples_FirstTestTypeSpecClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TopAction()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.TopAction(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TopAction_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.TopAction(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TopAction_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response<Thing> response = client.TopAction(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TopAction_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response<Thing> response = client.TopAction(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TopAction_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.TopActionAsync(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TopAction_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.TopActionAsync(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TopAction_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response<Thing> response = await client.TopActionAsync(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TopAction_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response<Thing> response = await client.TopActionAsync(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TopAction2()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.TopAction2(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TopAction2_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.TopAction2(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TopAction2_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.TopAction2Async(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TopAction2_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.TopAction2Async(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PatchAction()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["name"] = "<name>",
                ["requiredUnion"] = "<requiredUnion>",
                ["requiredLiteralString"] = "accept",
                ["requiredLiteralInt"] = 123,
                ["requiredLiteralFloat"] = 1.23F,
                ["requiredLiteralBool"] = false,
                ["optionalLiteralString"] = "reject",
                ["optionalLiteralInt"] = 456,
                ["optionalLiteralFloat"] = 4.56F,
                ["optionalLiteralBool"] = true,
                ["requiredBadDescription"] = "<requiredBadDescription>",
                ["optionalNullableList"] = new object[]
            {
1234
            },
                ["requiredNullableList"] = new object[]
            {
1234
            },
            });
            Response response = client.PatchAction(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PatchAction_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["name"] = "<name>",
                ["requiredUnion"] = "<requiredUnion>",
                ["requiredLiteralString"] = "accept",
                ["requiredLiteralInt"] = 123,
                ["requiredLiteralFloat"] = 1.23F,
                ["requiredLiteralBool"] = false,
                ["optionalLiteralString"] = "reject",
                ["optionalLiteralInt"] = 456,
                ["optionalLiteralFloat"] = 4.56F,
                ["optionalLiteralBool"] = true,
                ["requiredBadDescription"] = "<requiredBadDescription>",
                ["optionalNullableList"] = new object[]
            {
1234
            },
                ["requiredNullableList"] = new object[]
            {
1234
            },
            });
            Response response = client.PatchAction(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PatchAction_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["name"] = "<name>",
                ["requiredUnion"] = "<requiredUnion>",
                ["requiredLiteralString"] = "accept",
                ["requiredLiteralInt"] = 123,
                ["requiredLiteralFloat"] = 1.23F,
                ["requiredLiteralBool"] = false,
                ["optionalLiteralString"] = "reject",
                ["optionalLiteralInt"] = 456,
                ["optionalLiteralFloat"] = 4.56F,
                ["optionalLiteralBool"] = true,
                ["requiredBadDescription"] = "<requiredBadDescription>",
                ["optionalNullableList"] = new object[]
            {
1234
            },
                ["requiredNullableList"] = new object[]
            {
1234
            },
            });
            Response response = await client.PatchActionAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PatchAction_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["name"] = "<name>",
                ["requiredUnion"] = "<requiredUnion>",
                ["requiredLiteralString"] = "accept",
                ["requiredLiteralInt"] = 123,
                ["requiredLiteralFloat"] = 1.23F,
                ["requiredLiteralBool"] = false,
                ["optionalLiteralString"] = "reject",
                ["optionalLiteralInt"] = 456,
                ["optionalLiteralFloat"] = 4.56F,
                ["optionalLiteralBool"] = true,
                ["requiredBadDescription"] = "<requiredBadDescription>",
                ["optionalNullableList"] = new object[]
            {
1234
            },
                ["requiredNullableList"] = new object[]
            {
1234
            },
            });
            Response response = await client.PatchActionAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnonymousBody()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["name"] = "<name>",
                ["requiredUnion"] = "<requiredUnion>",
                ["requiredLiteralString"] = "accept",
                ["requiredLiteralInt"] = 123,
                ["requiredLiteralFloat"] = 1.23F,
                ["requiredLiteralBool"] = false,
                ["optionalLiteralString"] = "reject",
                ["optionalLiteralInt"] = 456,
                ["optionalLiteralFloat"] = 4.56F,
                ["optionalLiteralBool"] = true,
                ["requiredBadDescription"] = "<requiredBadDescription>",
                ["optionalNullableList"] = new object[]
            {
1234
            },
                ["requiredNullableList"] = new object[]
            {
1234
            },
            });
            Response response = client.AnonymousBody(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnonymousBody_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["name"] = "<name>",
                ["requiredUnion"] = "<requiredUnion>",
                ["requiredLiteralString"] = "accept",
                ["requiredLiteralInt"] = 123,
                ["requiredLiteralFloat"] = 1.23F,
                ["requiredLiteralBool"] = false,
                ["optionalLiteralString"] = "reject",
                ["optionalLiteralInt"] = 456,
                ["optionalLiteralFloat"] = 4.56F,
                ["optionalLiteralBool"] = true,
                ["requiredBadDescription"] = "<requiredBadDescription>",
                ["optionalNullableList"] = new object[]
            {
1234
            },
                ["requiredNullableList"] = new object[]
            {
1234
            },
            });
            Response response = client.AnonymousBody(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnonymousBody_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Thing thing = new Thing("<name>", "<requiredUnion>", "<requiredBadDescription>", new int[]
            {
1234
            })
            {
                OptionalLiteralString = ThingOptionalLiteralString.Reject,
                OptionalLiteralInt = ThingOptionalLiteralInt._456,
                OptionalLiteralFloat = ThingOptionalLiteralFloat._456,
                OptionalLiteralBool = true,
                OptionalNullableList =
{
1234
},
            };
            Response<Thing> response = client.AnonymousBody(thing);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnonymousBody_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Thing thing = new Thing("<name>", "<requiredUnion>", "<requiredBadDescription>", new int[]
            {
1234
            })
            {
                OptionalLiteralString = ThingOptionalLiteralString.Reject,
                OptionalLiteralInt = ThingOptionalLiteralInt._456,
                OptionalLiteralFloat = ThingOptionalLiteralFloat._456,
                OptionalLiteralBool = true,
                OptionalNullableList =
{
1234
},
            };
            Response<Thing> response = client.AnonymousBody(thing);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnonymousBody_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["name"] = "<name>",
                ["requiredUnion"] = "<requiredUnion>",
                ["requiredLiteralString"] = "accept",
                ["requiredLiteralInt"] = 123,
                ["requiredLiteralFloat"] = 1.23F,
                ["requiredLiteralBool"] = false,
                ["optionalLiteralString"] = "reject",
                ["optionalLiteralInt"] = 456,
                ["optionalLiteralFloat"] = 4.56F,
                ["optionalLiteralBool"] = true,
                ["requiredBadDescription"] = "<requiredBadDescription>",
                ["optionalNullableList"] = new object[]
            {
1234
            },
                ["requiredNullableList"] = new object[]
            {
1234
            },
            });
            Response response = await client.AnonymousBodyAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnonymousBody_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["name"] = "<name>",
                ["requiredUnion"] = "<requiredUnion>",
                ["requiredLiteralString"] = "accept",
                ["requiredLiteralInt"] = 123,
                ["requiredLiteralFloat"] = 1.23F,
                ["requiredLiteralBool"] = false,
                ["optionalLiteralString"] = "reject",
                ["optionalLiteralInt"] = 456,
                ["optionalLiteralFloat"] = 4.56F,
                ["optionalLiteralBool"] = true,
                ["requiredBadDescription"] = "<requiredBadDescription>",
                ["optionalNullableList"] = new object[]
            {
1234
            },
                ["requiredNullableList"] = new object[]
            {
1234
            },
            });
            Response response = await client.AnonymousBodyAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnonymousBody_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Thing thing = new Thing("<name>", "<requiredUnion>", "<requiredBadDescription>", new int[]
            {
1234
            })
            {
                OptionalLiteralString = ThingOptionalLiteralString.Reject,
                OptionalLiteralInt = ThingOptionalLiteralInt._456,
                OptionalLiteralFloat = ThingOptionalLiteralFloat._456,
                OptionalLiteralBool = true,
                OptionalNullableList =
{
1234
},
            };
            Response<Thing> response = await client.AnonymousBodyAsync(thing);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnonymousBody_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Thing thing = new Thing("<name>", "<requiredUnion>", "<requiredBadDescription>", new int[]
            {
1234
            })
            {
                OptionalLiteralString = ThingOptionalLiteralString.Reject,
                OptionalLiteralInt = ThingOptionalLiteralInt._456,
                OptionalLiteralFloat = ThingOptionalLiteralFloat._456,
                OptionalLiteralBool = true,
                OptionalNullableList =
{
1234
},
            };
            Response<Thing> response = await client.AnonymousBodyAsync(thing);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FriendlyModel()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["name"] = "<name>",
            });
            Response response = client.FriendlyModel(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FriendlyModel_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["name"] = "<name>",
            });
            Response response = client.FriendlyModel(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FriendlyModel_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Friend notFriend = new Friend("<name>");
            Response<Friend> response = client.FriendlyModel(notFriend);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FriendlyModel_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Friend notFriend = new Friend("<name>");
            Response<Friend> response = client.FriendlyModel(notFriend);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FriendlyModel_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["name"] = "<name>",
            });
            Response response = await client.FriendlyModelAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FriendlyModel_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["name"] = "<name>",
            });
            Response response = await client.FriendlyModelAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FriendlyModel_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Friend notFriend = new Friend("<name>");
            Response<Friend> response = await client.FriendlyModelAsync(notFriend);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FriendlyModel_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Friend notFriend = new Friend("<name>");
            Response<Friend> response = await client.FriendlyModelAsync(notFriend);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AddTimeHeader()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.AddTimeHeader();
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AddTimeHeader_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.AddTimeHeader();
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AddTimeHeader_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.AddTimeHeaderAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AddTimeHeader_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.AddTimeHeaderAsync();
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StringFormat()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["sourceUrl"] = "http://localhost:3000",
                ["guid"] = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Response response = client.StringFormat(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StringFormat_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["sourceUrl"] = "http://localhost:3000",
                ["guid"] = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Response response = client.StringFormat(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StringFormat_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            ModelWithFormat body = new ModelWithFormat(new Uri("http://localhost:3000"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
            Response response = client.StringFormat(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), body);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StringFormat_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            ModelWithFormat body = new ModelWithFormat(new Uri("http://localhost:3000"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
            Response response = client.StringFormat(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), body);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StringFormat_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["sourceUrl"] = "http://localhost:3000",
                ["guid"] = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Response response = await client.StringFormatAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StringFormat_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["sourceUrl"] = "http://localhost:3000",
                ["guid"] = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Response response = await client.StringFormatAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StringFormat_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            ModelWithFormat body = new ModelWithFormat(new Uri("http://localhost:3000"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
            Response response = await client.StringFormatAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), body);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StringFormat_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            ModelWithFormat body = new ModelWithFormat(new Uri("http://localhost:3000"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
            Response response = await client.StringFormatAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), body);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SayHi()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.SayHi("<headParameter>", "<queryParameter>", "<optionalQuery>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SayHi_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.SayHi("<headParameter>", "<queryParameter>", "<optionalQuery>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SayHi_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.SayHiAsync("<headParameter>", "<queryParameter>", "<optionalQuery>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SayHi_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.SayHiAsync("<headParameter>", "<queryParameter>", "<optionalQuery>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HelloAgain()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredCollection"] = new object[]
            {
"1"
            },
                ["requiredDictionary"] = new Dictionary<string, object>()
                {
                    ["key"] = "1",
                },
                ["requiredModel"] = new Dictionary<string, object>()
                {
                    ["name"] = "<name>",
                    ["requiredUnion"] = "<requiredUnion>",
                    ["requiredLiteralString"] = "accept",
                    ["requiredLiteralInt"] = 123,
                    ["requiredLiteralFloat"] = 1.23F,
                    ["requiredLiteralBool"] = false,
                    ["optionalLiteralString"] = "reject",
                    ["optionalLiteralInt"] = 456,
                    ["optionalLiteralFloat"] = 4.56F,
                    ["optionalLiteralBool"] = true,
                    ["requiredBadDescription"] = "<requiredBadDescription>",
                    ["optionalNullableList"] = new object[]
            {
1234
            },
                    ["requiredNullableList"] = new object[]
            {
1234
            },
                },
                ["intExtensibleEnum"] = 1,
                ["intExtensibleEnumCollection"] = new object[]
            {
1
            },
                ["floatExtensibleEnum"] = 1,
                ["floatExtensibleEnumCollection"] = new object[]
            {
1
            },
                ["floatFixedEnum"] = 1.1F,
                ["floatFixedEnumCollection"] = new object[]
            {
1.1F
            },
                ["intFixedEnum"] = 1,
                ["intFixedEnumCollection"] = new object[]
            {
1
            },
                ["stringFixedEnum"] = "1",
                ["requiredUnknown"] = new Dictionary<string, object>(),
                ["optionalUnknown"] = new Dictionary<string, object>(),
                ["requiredRecordUnknown"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>(),
                },
                ["optionalRecordUnknown"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>(),
                },
                ["modelWithRequiredNullable"] = new Dictionary<string, object>()
                {
                    ["requiredNullablePrimitive"] = 1234,
                    ["requiredExtensibleEnum"] = "1",
                    ["requiredFixedEnum"] = "1",
                },
            });
            Response response = client.HelloAgain("<p2>", "<p1>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("requiredCollection")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
            Console.WriteLine(result.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredNullablePrimitive").ToString());
            Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredFixedEnum").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HelloAgain_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredCollection"] = new object[]
            {
"1"
            },
                ["requiredDictionary"] = new Dictionary<string, object>()
                {
                    ["key"] = "1",
                },
                ["requiredModel"] = new Dictionary<string, object>()
                {
                    ["name"] = "<name>",
                    ["requiredUnion"] = "<requiredUnion>",
                    ["requiredLiteralString"] = "accept",
                    ["requiredLiteralInt"] = 123,
                    ["requiredLiteralFloat"] = 1.23F,
                    ["requiredLiteralBool"] = false,
                    ["optionalLiteralString"] = "reject",
                    ["optionalLiteralInt"] = 456,
                    ["optionalLiteralFloat"] = 4.56F,
                    ["optionalLiteralBool"] = true,
                    ["requiredBadDescription"] = "<requiredBadDescription>",
                    ["optionalNullableList"] = new object[]
            {
1234
            },
                    ["requiredNullableList"] = new object[]
            {
1234
            },
                },
                ["intExtensibleEnum"] = 1,
                ["intExtensibleEnumCollection"] = new object[]
            {
1
            },
                ["floatExtensibleEnum"] = 1,
                ["floatExtensibleEnumCollection"] = new object[]
            {
1
            },
                ["floatFixedEnum"] = 1.1F,
                ["floatFixedEnumCollection"] = new object[]
            {
1.1F
            },
                ["intFixedEnum"] = 1,
                ["intFixedEnumCollection"] = new object[]
            {
1
            },
                ["stringFixedEnum"] = "1",
                ["requiredUnknown"] = new Dictionary<string, object>(),
                ["optionalUnknown"] = new Dictionary<string, object>(),
                ["requiredRecordUnknown"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>(),
                },
                ["optionalRecordUnknown"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>(),
                },
                ["modelWithRequiredNullable"] = new Dictionary<string, object>()
                {
                    ["requiredNullablePrimitive"] = 1234,
                    ["requiredExtensibleEnum"] = "1",
                    ["requiredFixedEnum"] = "1",
                },
            });
            Response response = client.HelloAgain("<p2>", "<p1>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("requiredCollection")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("intExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("intExtensibleEnumCollection")[0].ToString());
            Console.WriteLine(result.GetProperty("floatExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("floatExtensibleEnumCollection")[0].ToString());
            Console.WriteLine(result.GetProperty("floatFixedEnum").ToString());
            Console.WriteLine(result.GetProperty("floatFixedEnumCollection")[0].ToString());
            Console.WriteLine(result.GetProperty("intFixedEnum").ToString());
            Console.WriteLine(result.GetProperty("intFixedEnumCollection")[0].ToString());
            Console.WriteLine(result.GetProperty("stringFixedEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
            Console.WriteLine(result.GetProperty("optionalUnknown").ToString());
            Console.WriteLine(result.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("optionalRecordUnknown").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("readOnlyOptionalRecordUnknown").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredNullablePrimitive").ToString());
            Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredFixedEnum").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HelloAgain_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RoundTripModel action = new RoundTripModel("<requiredString>", 1234, new StringFixedEnum?[]
            {
StringFixedEnum.One
            }, new Dictionary<string, StringExtensibleEnum?>()
            {
                ["key"] = StringExtensibleEnum.One,
            }, new Thing("<name>", "<requiredUnion>", "<requiredBadDescription>", new int[]
            {
1234
            })
            {
                OptionalLiteralString = ThingOptionalLiteralString.Reject,
                OptionalLiteralInt = ThingOptionalLiteralInt._456,
                OptionalLiteralFloat = ThingOptionalLiteralFloat._456,
                OptionalLiteralBool = true,
                OptionalNullableList =
            {
1234
            },
            }, BinaryData.FromObjectAsJson(new Dictionary<string, object>()), new Dictionary<string, BinaryData>()
            {
                ["key"] = BinaryData.FromObjectAsJson(new Dictionary<string, object>()),
            }, new ModelWithRequiredNullableProperties(1234, StringExtensibleEnum.One, StringFixedEnum.One))
            {
                IntExtensibleEnum = IntExtensibleEnum.One,
                IntExtensibleEnumCollection =
{
IntExtensibleEnum.One
},
                FloatExtensibleEnum = FloatExtensibleEnum.One,
                FloatExtensibleEnumCollection =
{
FloatExtensibleEnum.One
},
                FloatFixedEnum = FloatFixedEnum.One,
                FloatFixedEnumCollection =
{
FloatFixedEnum.One
},
                IntFixedEnum = IntFixedEnum.One,
                IntFixedEnumCollection =
{
IntFixedEnum.One
},
                StringFixedEnum = StringFixedEnum.One,
                OptionalUnknown = BinaryData.FromObjectAsJson(new Dictionary<string, object>()),
                OptionalRecordUnknown =
{
["key"] = BinaryData.FromObjectAsJson(new Dictionary<string, object>()),
},
            };
            Response<RoundTripModel> response = client.HelloAgain("<p2>", "<p1>", action);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HelloAgain_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RoundTripModel action = new RoundTripModel("<requiredString>", 1234, new StringFixedEnum?[]
            {
StringFixedEnum.One
            }, new Dictionary<string, StringExtensibleEnum?>()
            {
                ["key"] = StringExtensibleEnum.One,
            }, new Thing("<name>", "<requiredUnion>", "<requiredBadDescription>", new int[]
            {
1234
            })
            {
                OptionalLiteralString = ThingOptionalLiteralString.Reject,
                OptionalLiteralInt = ThingOptionalLiteralInt._456,
                OptionalLiteralFloat = ThingOptionalLiteralFloat._456,
                OptionalLiteralBool = true,
                OptionalNullableList =
            {
1234
            },
            }, BinaryData.FromObjectAsJson(new Dictionary<string, object>()), new Dictionary<string, BinaryData>()
            {
                ["key"] = BinaryData.FromObjectAsJson(new Dictionary<string, object>()),
            }, new ModelWithRequiredNullableProperties(1234, StringExtensibleEnum.One, StringFixedEnum.One))
            {
                IntExtensibleEnum = IntExtensibleEnum.One,
                IntExtensibleEnumCollection =
{
IntExtensibleEnum.One
},
                FloatExtensibleEnum = FloatExtensibleEnum.One,
                FloatExtensibleEnumCollection =
{
FloatExtensibleEnum.One
},
                FloatFixedEnum = FloatFixedEnum.One,
                FloatFixedEnumCollection =
{
FloatFixedEnum.One
},
                IntFixedEnum = IntFixedEnum.One,
                IntFixedEnumCollection =
{
IntFixedEnum.One
},
                StringFixedEnum = StringFixedEnum.One,
                OptionalUnknown = BinaryData.FromObjectAsJson(new Dictionary<string, object>()),
                OptionalRecordUnknown =
{
["key"] = BinaryData.FromObjectAsJson(new Dictionary<string, object>()),
},
            };
            Response<RoundTripModel> response = client.HelloAgain("<p2>", "<p1>", action);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HelloAgain_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredCollection"] = new object[]
            {
"1"
            },
                ["requiredDictionary"] = new Dictionary<string, object>()
                {
                    ["key"] = "1",
                },
                ["requiredModel"] = new Dictionary<string, object>()
                {
                    ["name"] = "<name>",
                    ["requiredUnion"] = "<requiredUnion>",
                    ["requiredLiteralString"] = "accept",
                    ["requiredLiteralInt"] = 123,
                    ["requiredLiteralFloat"] = 1.23F,
                    ["requiredLiteralBool"] = false,
                    ["optionalLiteralString"] = "reject",
                    ["optionalLiteralInt"] = 456,
                    ["optionalLiteralFloat"] = 4.56F,
                    ["optionalLiteralBool"] = true,
                    ["requiredBadDescription"] = "<requiredBadDescription>",
                    ["optionalNullableList"] = new object[]
            {
1234
            },
                    ["requiredNullableList"] = new object[]
            {
1234
            },
                },
                ["intExtensibleEnum"] = 1,
                ["intExtensibleEnumCollection"] = new object[]
            {
1
            },
                ["floatExtensibleEnum"] = 1,
                ["floatExtensibleEnumCollection"] = new object[]
            {
1
            },
                ["floatFixedEnum"] = 1.1F,
                ["floatFixedEnumCollection"] = new object[]
            {
1.1F
            },
                ["intFixedEnum"] = 1,
                ["intFixedEnumCollection"] = new object[]
            {
1
            },
                ["stringFixedEnum"] = "1",
                ["requiredUnknown"] = new Dictionary<string, object>(),
                ["optionalUnknown"] = new Dictionary<string, object>(),
                ["requiredRecordUnknown"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>(),
                },
                ["optionalRecordUnknown"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>(),
                },
                ["modelWithRequiredNullable"] = new Dictionary<string, object>()
                {
                    ["requiredNullablePrimitive"] = 1234,
                    ["requiredExtensibleEnum"] = "1",
                    ["requiredFixedEnum"] = "1",
                },
            });
            Response response = await client.HelloAgainAsync("<p2>", "<p1>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("requiredCollection")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
            Console.WriteLine(result.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredNullablePrimitive").ToString());
            Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredFixedEnum").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HelloAgain_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredCollection"] = new object[]
            {
"1"
            },
                ["requiredDictionary"] = new Dictionary<string, object>()
                {
                    ["key"] = "1",
                },
                ["requiredModel"] = new Dictionary<string, object>()
                {
                    ["name"] = "<name>",
                    ["requiredUnion"] = "<requiredUnion>",
                    ["requiredLiteralString"] = "accept",
                    ["requiredLiteralInt"] = 123,
                    ["requiredLiteralFloat"] = 1.23F,
                    ["requiredLiteralBool"] = false,
                    ["optionalLiteralString"] = "reject",
                    ["optionalLiteralInt"] = 456,
                    ["optionalLiteralFloat"] = 4.56F,
                    ["optionalLiteralBool"] = true,
                    ["requiredBadDescription"] = "<requiredBadDescription>",
                    ["optionalNullableList"] = new object[]
            {
1234
            },
                    ["requiredNullableList"] = new object[]
            {
1234
            },
                },
                ["intExtensibleEnum"] = 1,
                ["intExtensibleEnumCollection"] = new object[]
            {
1
            },
                ["floatExtensibleEnum"] = 1,
                ["floatExtensibleEnumCollection"] = new object[]
            {
1
            },
                ["floatFixedEnum"] = 1.1F,
                ["floatFixedEnumCollection"] = new object[]
            {
1.1F
            },
                ["intFixedEnum"] = 1,
                ["intFixedEnumCollection"] = new object[]
            {
1
            },
                ["stringFixedEnum"] = "1",
                ["requiredUnknown"] = new Dictionary<string, object>(),
                ["optionalUnknown"] = new Dictionary<string, object>(),
                ["requiredRecordUnknown"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>(),
                },
                ["optionalRecordUnknown"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>(),
                },
                ["modelWithRequiredNullable"] = new Dictionary<string, object>()
                {
                    ["requiredNullablePrimitive"] = 1234,
                    ["requiredExtensibleEnum"] = "1",
                    ["requiredFixedEnum"] = "1",
                },
            });
            Response response = await client.HelloAgainAsync("<p2>", "<p1>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("requiredCollection")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("intExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("intExtensibleEnumCollection")[0].ToString());
            Console.WriteLine(result.GetProperty("floatExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("floatExtensibleEnumCollection")[0].ToString());
            Console.WriteLine(result.GetProperty("floatFixedEnum").ToString());
            Console.WriteLine(result.GetProperty("floatFixedEnumCollection")[0].ToString());
            Console.WriteLine(result.GetProperty("intFixedEnum").ToString());
            Console.WriteLine(result.GetProperty("intFixedEnumCollection")[0].ToString());
            Console.WriteLine(result.GetProperty("stringFixedEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
            Console.WriteLine(result.GetProperty("optionalUnknown").ToString());
            Console.WriteLine(result.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("optionalRecordUnknown").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("readOnlyOptionalRecordUnknown").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredNullablePrimitive").ToString());
            Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredFixedEnum").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HelloAgain_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RoundTripModel action = new RoundTripModel("<requiredString>", 1234, new StringFixedEnum?[]
            {
StringFixedEnum.One
            }, new Dictionary<string, StringExtensibleEnum?>()
            {
                ["key"] = StringExtensibleEnum.One,
            }, new Thing("<name>", "<requiredUnion>", "<requiredBadDescription>", new int[]
            {
1234
            })
            {
                OptionalLiteralString = ThingOptionalLiteralString.Reject,
                OptionalLiteralInt = ThingOptionalLiteralInt._456,
                OptionalLiteralFloat = ThingOptionalLiteralFloat._456,
                OptionalLiteralBool = true,
                OptionalNullableList =
            {
1234
            },
            }, BinaryData.FromObjectAsJson(new Dictionary<string, object>()), new Dictionary<string, BinaryData>()
            {
                ["key"] = BinaryData.FromObjectAsJson(new Dictionary<string, object>()),
            }, new ModelWithRequiredNullableProperties(1234, StringExtensibleEnum.One, StringFixedEnum.One))
            {
                IntExtensibleEnum = IntExtensibleEnum.One,
                IntExtensibleEnumCollection =
{
IntExtensibleEnum.One
},
                FloatExtensibleEnum = FloatExtensibleEnum.One,
                FloatExtensibleEnumCollection =
{
FloatExtensibleEnum.One
},
                FloatFixedEnum = FloatFixedEnum.One,
                FloatFixedEnumCollection =
{
FloatFixedEnum.One
},
                IntFixedEnum = IntFixedEnum.One,
                IntFixedEnumCollection =
{
IntFixedEnum.One
},
                StringFixedEnum = StringFixedEnum.One,
                OptionalUnknown = BinaryData.FromObjectAsJson(new Dictionary<string, object>()),
                OptionalRecordUnknown =
{
["key"] = BinaryData.FromObjectAsJson(new Dictionary<string, object>()),
},
            };
            Response<RoundTripModel> response = await client.HelloAgainAsync("<p2>", "<p1>", action);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HelloAgain_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RoundTripModel action = new RoundTripModel("<requiredString>", 1234, new StringFixedEnum?[]
            {
StringFixedEnum.One
            }, new Dictionary<string, StringExtensibleEnum?>()
            {
                ["key"] = StringExtensibleEnum.One,
            }, new Thing("<name>", "<requiredUnion>", "<requiredBadDescription>", new int[]
            {
1234
            })
            {
                OptionalLiteralString = ThingOptionalLiteralString.Reject,
                OptionalLiteralInt = ThingOptionalLiteralInt._456,
                OptionalLiteralFloat = ThingOptionalLiteralFloat._456,
                OptionalLiteralBool = true,
                OptionalNullableList =
            {
1234
            },
            }, BinaryData.FromObjectAsJson(new Dictionary<string, object>()), new Dictionary<string, BinaryData>()
            {
                ["key"] = BinaryData.FromObjectAsJson(new Dictionary<string, object>()),
            }, new ModelWithRequiredNullableProperties(1234, StringExtensibleEnum.One, StringFixedEnum.One))
            {
                IntExtensibleEnum = IntExtensibleEnum.One,
                IntExtensibleEnumCollection =
{
IntExtensibleEnum.One
},
                FloatExtensibleEnum = FloatExtensibleEnum.One,
                FloatExtensibleEnumCollection =
{
FloatExtensibleEnum.One
},
                FloatFixedEnum = FloatFixedEnum.One,
                FloatFixedEnumCollection =
{
FloatFixedEnum.One
},
                IntFixedEnum = IntFixedEnum.One,
                IntFixedEnumCollection =
{
IntFixedEnum.One
},
                StringFixedEnum = StringFixedEnum.One,
                OptionalUnknown = BinaryData.FromObjectAsJson(new Dictionary<string, object>()),
                OptionalRecordUnknown =
{
["key"] = BinaryData.FromObjectAsJson(new Dictionary<string, object>()),
},
            };
            Response<RoundTripModel> response = await client.HelloAgainAsync("<p2>", "<p1>", action);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoContentType()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredCollection"] = new object[]
            {
"1"
            },
                ["requiredDictionary"] = new Dictionary<string, object>()
                {
                    ["key"] = "1",
                },
                ["requiredModel"] = new Dictionary<string, object>()
                {
                    ["name"] = "<name>",
                    ["requiredUnion"] = "<requiredUnion>",
                    ["requiredLiteralString"] = "accept",
                    ["requiredLiteralInt"] = 123,
                    ["requiredLiteralFloat"] = 1.23F,
                    ["requiredLiteralBool"] = false,
                    ["optionalLiteralString"] = "reject",
                    ["optionalLiteralInt"] = 456,
                    ["optionalLiteralFloat"] = 4.56F,
                    ["optionalLiteralBool"] = true,
                    ["requiredBadDescription"] = "<requiredBadDescription>",
                    ["optionalNullableList"] = new object[]
            {
1234
            },
                    ["requiredNullableList"] = new object[]
            {
1234
            },
                },
                ["intExtensibleEnum"] = 1,
                ["intExtensibleEnumCollection"] = new object[]
            {
1
            },
                ["floatExtensibleEnum"] = 1,
                ["floatExtensibleEnumCollection"] = new object[]
            {
1
            },
                ["floatFixedEnum"] = 1.1F,
                ["floatFixedEnumCollection"] = new object[]
            {
1.1F
            },
                ["intFixedEnum"] = 1,
                ["intFixedEnumCollection"] = new object[]
            {
1
            },
                ["stringFixedEnum"] = "1",
                ["requiredUnknown"] = new Dictionary<string, object>(),
                ["optionalUnknown"] = new Dictionary<string, object>(),
                ["requiredRecordUnknown"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>(),
                },
                ["optionalRecordUnknown"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>(),
                },
                ["modelWithRequiredNullable"] = new Dictionary<string, object>()
                {
                    ["requiredNullablePrimitive"] = 1234,
                    ["requiredExtensibleEnum"] = "1",
                    ["requiredFixedEnum"] = "1",
                },
            });
            Response response = client.NoContentType("<p2>", "<p1>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("requiredCollection")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
            Console.WriteLine(result.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredNullablePrimitive").ToString());
            Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredFixedEnum").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoContentType_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredCollection"] = new object[]
            {
"1"
            },
                ["requiredDictionary"] = new Dictionary<string, object>()
                {
                    ["key"] = "1",
                },
                ["requiredModel"] = new Dictionary<string, object>()
                {
                    ["name"] = "<name>",
                    ["requiredUnion"] = "<requiredUnion>",
                    ["requiredLiteralString"] = "accept",
                    ["requiredLiteralInt"] = 123,
                    ["requiredLiteralFloat"] = 1.23F,
                    ["requiredLiteralBool"] = false,
                    ["optionalLiteralString"] = "reject",
                    ["optionalLiteralInt"] = 456,
                    ["optionalLiteralFloat"] = 4.56F,
                    ["optionalLiteralBool"] = true,
                    ["requiredBadDescription"] = "<requiredBadDescription>",
                    ["optionalNullableList"] = new object[]
            {
1234
            },
                    ["requiredNullableList"] = new object[]
            {
1234
            },
                },
                ["intExtensibleEnum"] = 1,
                ["intExtensibleEnumCollection"] = new object[]
            {
1
            },
                ["floatExtensibleEnum"] = 1,
                ["floatExtensibleEnumCollection"] = new object[]
            {
1
            },
                ["floatFixedEnum"] = 1.1F,
                ["floatFixedEnumCollection"] = new object[]
            {
1.1F
            },
                ["intFixedEnum"] = 1,
                ["intFixedEnumCollection"] = new object[]
            {
1
            },
                ["stringFixedEnum"] = "1",
                ["requiredUnknown"] = new Dictionary<string, object>(),
                ["optionalUnknown"] = new Dictionary<string, object>(),
                ["requiredRecordUnknown"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>(),
                },
                ["optionalRecordUnknown"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>(),
                },
                ["modelWithRequiredNullable"] = new Dictionary<string, object>()
                {
                    ["requiredNullablePrimitive"] = 1234,
                    ["requiredExtensibleEnum"] = "1",
                    ["requiredFixedEnum"] = "1",
                },
            });
            Response response = client.NoContentType("<p2>", "<p1>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("requiredCollection")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("intExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("intExtensibleEnumCollection")[0].ToString());
            Console.WriteLine(result.GetProperty("floatExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("floatExtensibleEnumCollection")[0].ToString());
            Console.WriteLine(result.GetProperty("floatFixedEnum").ToString());
            Console.WriteLine(result.GetProperty("floatFixedEnumCollection")[0].ToString());
            Console.WriteLine(result.GetProperty("intFixedEnum").ToString());
            Console.WriteLine(result.GetProperty("intFixedEnumCollection")[0].ToString());
            Console.WriteLine(result.GetProperty("stringFixedEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
            Console.WriteLine(result.GetProperty("optionalUnknown").ToString());
            Console.WriteLine(result.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("optionalRecordUnknown").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("readOnlyOptionalRecordUnknown").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredNullablePrimitive").ToString());
            Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredFixedEnum").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoContentType_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredCollection"] = new object[]
            {
"1"
            },
                ["requiredDictionary"] = new Dictionary<string, object>()
                {
                    ["key"] = "1",
                },
                ["requiredModel"] = new Dictionary<string, object>()
                {
                    ["name"] = "<name>",
                    ["requiredUnion"] = "<requiredUnion>",
                    ["requiredLiteralString"] = "accept",
                    ["requiredLiteralInt"] = 123,
                    ["requiredLiteralFloat"] = 1.23F,
                    ["requiredLiteralBool"] = false,
                    ["optionalLiteralString"] = "reject",
                    ["optionalLiteralInt"] = 456,
                    ["optionalLiteralFloat"] = 4.56F,
                    ["optionalLiteralBool"] = true,
                    ["requiredBadDescription"] = "<requiredBadDescription>",
                    ["optionalNullableList"] = new object[]
            {
1234
            },
                    ["requiredNullableList"] = new object[]
            {
1234
            },
                },
                ["intExtensibleEnum"] = 1,
                ["intExtensibleEnumCollection"] = new object[]
            {
1
            },
                ["floatExtensibleEnum"] = 1,
                ["floatExtensibleEnumCollection"] = new object[]
            {
1
            },
                ["floatFixedEnum"] = 1.1F,
                ["floatFixedEnumCollection"] = new object[]
            {
1.1F
            },
                ["intFixedEnum"] = 1,
                ["intFixedEnumCollection"] = new object[]
            {
1
            },
                ["stringFixedEnum"] = "1",
                ["requiredUnknown"] = new Dictionary<string, object>(),
                ["optionalUnknown"] = new Dictionary<string, object>(),
                ["requiredRecordUnknown"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>(),
                },
                ["optionalRecordUnknown"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>(),
                },
                ["modelWithRequiredNullable"] = new Dictionary<string, object>()
                {
                    ["requiredNullablePrimitive"] = 1234,
                    ["requiredExtensibleEnum"] = "1",
                    ["requiredFixedEnum"] = "1",
                },
            });
            Response response = await client.NoContentTypeAsync("<p2>", "<p1>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("requiredCollection")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
            Console.WriteLine(result.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredNullablePrimitive").ToString());
            Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredFixedEnum").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoContentType_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["requiredString"] = "<requiredString>",
                ["requiredInt"] = 1234,
                ["requiredCollection"] = new object[]
            {
"1"
            },
                ["requiredDictionary"] = new Dictionary<string, object>()
                {
                    ["key"] = "1",
                },
                ["requiredModel"] = new Dictionary<string, object>()
                {
                    ["name"] = "<name>",
                    ["requiredUnion"] = "<requiredUnion>",
                    ["requiredLiteralString"] = "accept",
                    ["requiredLiteralInt"] = 123,
                    ["requiredLiteralFloat"] = 1.23F,
                    ["requiredLiteralBool"] = false,
                    ["optionalLiteralString"] = "reject",
                    ["optionalLiteralInt"] = 456,
                    ["optionalLiteralFloat"] = 4.56F,
                    ["optionalLiteralBool"] = true,
                    ["requiredBadDescription"] = "<requiredBadDescription>",
                    ["optionalNullableList"] = new object[]
            {
1234
            },
                    ["requiredNullableList"] = new object[]
            {
1234
            },
                },
                ["intExtensibleEnum"] = 1,
                ["intExtensibleEnumCollection"] = new object[]
            {
1
            },
                ["floatExtensibleEnum"] = 1,
                ["floatExtensibleEnumCollection"] = new object[]
            {
1
            },
                ["floatFixedEnum"] = 1.1F,
                ["floatFixedEnumCollection"] = new object[]
            {
1.1F
            },
                ["intFixedEnum"] = 1,
                ["intFixedEnumCollection"] = new object[]
            {
1
            },
                ["stringFixedEnum"] = "1",
                ["requiredUnknown"] = new Dictionary<string, object>(),
                ["optionalUnknown"] = new Dictionary<string, object>(),
                ["requiredRecordUnknown"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>(),
                },
                ["optionalRecordUnknown"] = new Dictionary<string, object>()
                {
                    ["key"] = new Dictionary<string, object>(),
                },
                ["modelWithRequiredNullable"] = new Dictionary<string, object>()
                {
                    ["requiredNullablePrimitive"] = 1234,
                    ["requiredExtensibleEnum"] = "1",
                    ["requiredFixedEnum"] = "1",
                },
            });
            Response response = await client.NoContentTypeAsync("<p2>", "<p1>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredString").ToString());
            Console.WriteLine(result.GetProperty("requiredInt").ToString());
            Console.WriteLine(result.GetProperty("requiredCollection")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredDictionary").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredModel").GetProperty("requiredNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("intExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("intExtensibleEnumCollection")[0].ToString());
            Console.WriteLine(result.GetProperty("floatExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("floatExtensibleEnumCollection")[0].ToString());
            Console.WriteLine(result.GetProperty("floatFixedEnum").ToString());
            Console.WriteLine(result.GetProperty("floatFixedEnumCollection")[0].ToString());
            Console.WriteLine(result.GetProperty("intFixedEnum").ToString());
            Console.WriteLine(result.GetProperty("intFixedEnumCollection")[0].ToString());
            Console.WriteLine(result.GetProperty("stringFixedEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredUnknown").ToString());
            Console.WriteLine(result.GetProperty("optionalUnknown").ToString());
            Console.WriteLine(result.GetProperty("requiredRecordUnknown").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("optionalRecordUnknown").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("readOnlyRequiredRecordUnknown").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("readOnlyOptionalRecordUnknown").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredNullablePrimitive").ToString());
            Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("modelWithRequiredNullable").GetProperty("requiredFixedEnum").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HelloDemo2()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.HelloDemo2(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HelloDemo2_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.HelloDemo2(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HelloDemo2_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response<Thing> response = client.HelloDemo2();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HelloDemo2_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response<Thing> response = client.HelloDemo2();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HelloDemo2_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.HelloDemo2Async(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HelloDemo2_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.HelloDemo2Async(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HelloDemo2_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response<Thing> response = await client.HelloDemo2Async();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HelloDemo2_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response<Thing> response = await client.HelloDemo2Async();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateLiteral()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["name"] = "<name>",
                ["requiredUnion"] = "<requiredUnion>",
                ["requiredLiteralString"] = "accept",
                ["requiredLiteralInt"] = 123,
                ["requiredLiteralFloat"] = 1.23F,
                ["requiredLiteralBool"] = false,
                ["optionalLiteralString"] = "reject",
                ["optionalLiteralInt"] = 456,
                ["optionalLiteralFloat"] = 4.56F,
                ["optionalLiteralBool"] = true,
                ["requiredBadDescription"] = "<requiredBadDescription>",
                ["optionalNullableList"] = new object[]
            {
1234
            },
                ["requiredNullableList"] = new object[]
            {
1234
            },
            });
            Response response = client.CreateLiteral(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateLiteral_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["name"] = "<name>",
                ["requiredUnion"] = "<requiredUnion>",
                ["requiredLiteralString"] = "accept",
                ["requiredLiteralInt"] = 123,
                ["requiredLiteralFloat"] = 1.23F,
                ["requiredLiteralBool"] = false,
                ["optionalLiteralString"] = "reject",
                ["optionalLiteralInt"] = 456,
                ["optionalLiteralFloat"] = 4.56F,
                ["optionalLiteralBool"] = true,
                ["requiredBadDescription"] = "<requiredBadDescription>",
                ["optionalNullableList"] = new object[]
            {
1234
            },
                ["requiredNullableList"] = new object[]
            {
1234
            },
            });
            Response response = client.CreateLiteral(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateLiteral_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Thing body = new Thing("<name>", "<requiredUnion>", "<requiredBadDescription>", new int[]
            {
1234
            })
            {
                OptionalLiteralString = ThingOptionalLiteralString.Reject,
                OptionalLiteralInt = ThingOptionalLiteralInt._456,
                OptionalLiteralFloat = ThingOptionalLiteralFloat._456,
                OptionalLiteralBool = true,
                OptionalNullableList =
{
1234
},
            };
            Response<Thing> response = client.CreateLiteral(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateLiteral_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Thing body = new Thing("<name>", "<requiredUnion>", "<requiredBadDescription>", new int[]
            {
1234
            })
            {
                OptionalLiteralString = ThingOptionalLiteralString.Reject,
                OptionalLiteralInt = ThingOptionalLiteralInt._456,
                OptionalLiteralFloat = ThingOptionalLiteralFloat._456,
                OptionalLiteralBool = true,
                OptionalNullableList =
{
1234
},
            };
            Response<Thing> response = client.CreateLiteral(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateLiteral_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["name"] = "<name>",
                ["requiredUnion"] = "<requiredUnion>",
                ["requiredLiteralString"] = "accept",
                ["requiredLiteralInt"] = 123,
                ["requiredLiteralFloat"] = 1.23F,
                ["requiredLiteralBool"] = false,
                ["optionalLiteralString"] = "reject",
                ["optionalLiteralInt"] = 456,
                ["optionalLiteralFloat"] = 4.56F,
                ["optionalLiteralBool"] = true,
                ["requiredBadDescription"] = "<requiredBadDescription>",
                ["optionalNullableList"] = new object[]
            {
1234
            },
                ["requiredNullableList"] = new object[]
            {
1234
            },
            });
            Response response = await client.CreateLiteralAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateLiteral_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["name"] = "<name>",
                ["requiredUnion"] = "<requiredUnion>",
                ["requiredLiteralString"] = "accept",
                ["requiredLiteralInt"] = 123,
                ["requiredLiteralFloat"] = 1.23F,
                ["requiredLiteralBool"] = false,
                ["optionalLiteralString"] = "reject",
                ["optionalLiteralInt"] = 456,
                ["optionalLiteralFloat"] = 4.56F,
                ["optionalLiteralBool"] = true,
                ["requiredBadDescription"] = "<requiredBadDescription>",
                ["optionalNullableList"] = new object[]
            {
1234
            },
                ["requiredNullableList"] = new object[]
            {
1234
            },
            });
            Response response = await client.CreateLiteralAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateLiteral_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Thing body = new Thing("<name>", "<requiredUnion>", "<requiredBadDescription>", new int[]
            {
1234
            })
            {
                OptionalLiteralString = ThingOptionalLiteralString.Reject,
                OptionalLiteralInt = ThingOptionalLiteralInt._456,
                OptionalLiteralFloat = ThingOptionalLiteralFloat._456,
                OptionalLiteralBool = true,
                OptionalNullableList =
{
1234
},
            };
            Response<Thing> response = await client.CreateLiteralAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateLiteral_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Thing body = new Thing("<name>", "<requiredUnion>", "<requiredBadDescription>", new int[]
            {
1234
            })
            {
                OptionalLiteralString = ThingOptionalLiteralString.Reject,
                OptionalLiteralInt = ThingOptionalLiteralInt._456,
                OptionalLiteralFloat = ThingOptionalLiteralFloat._456,
                OptionalLiteralBool = true,
                OptionalNullableList =
{
1234
},
            };
            Response<Thing> response = await client.CreateLiteralAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HelloLiteral()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.HelloLiteral(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HelloLiteral_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.HelloLiteral(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HelloLiteral_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response<Thing> response = client.HelloLiteral();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HelloLiteral_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response<Thing> response = client.HelloLiteral();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HelloLiteral_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.HelloLiteralAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HelloLiteral_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.HelloLiteralAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("requiredUnion").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralString").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("requiredLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralString").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralInt").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralFloat").ToString());
            Console.WriteLine(result.GetProperty("optionalLiteralBool").ToString());
            Console.WriteLine(result.GetProperty("requiredBadDescription").ToString());
            Console.WriteLine(result.GetProperty("optionalNullableList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredNullableList")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HelloLiteral_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response<Thing> response = await client.HelloLiteralAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HelloLiteral_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response<Thing> response = await client.HelloLiteralAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUnknownValue()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.GetUnknownValue(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUnknownValue_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.GetUnknownValue(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUnknownValue_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.GetUnknownValueAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUnknownValue_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.GetUnknownValueAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }
    }
}
