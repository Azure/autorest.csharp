// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using FirstTestTypeSpec;
using FirstTestTypeSpec.Models;
using NUnit.Framework;

namespace FirstTestTypeSpec.Samples
{
    public class Samples_FirstTestTypeSpecClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TopAction()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.TopAction(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TopAction_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.TopActionAsync(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TopAction_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.TopAction(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TopAction_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.TopActionAsync(DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TopAction2()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.TopAction2(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TopAction2_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.TopAction2Async(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_TopAction2_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.TopAction2(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_TopAction2_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.TopAction2Async(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PatchAction()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                requiredUnion = "<requiredUnion>",
                requiredLiteralString = "accept",
                requiredLiteralInt = 123,
                requiredLiteralFloat = 1.23F,
                requiredLiteralBool = false,
                requiredBadDescription = "<requiredBadDescription>",
                requiredNullableList = new object[]
            {
1234
            },
            });
            Response response = client.PatchAction(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PatchAction_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                requiredUnion = "<requiredUnion>",
                requiredLiteralString = "accept",
                requiredLiteralInt = 123,
                requiredLiteralFloat = 1.23F,
                requiredLiteralBool = false,
                requiredBadDescription = "<requiredBadDescription>",
                requiredNullableList = new object[]
            {
1234
            },
            });
            Response response = await client.PatchActionAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PatchAction_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                requiredUnion = "<requiredUnion>",
                requiredLiteralString = "accept",
                requiredLiteralInt = 123,
                requiredLiteralFloat = 1.23F,
                requiredLiteralBool = false,
                optionalLiteralString = "reject",
                optionalLiteralInt = 456,
                optionalLiteralFloat = 4.56F,
                optionalLiteralBool = true,
                requiredBadDescription = "<requiredBadDescription>",
                optionalNullableList = new object[]
            {
1234
            },
                requiredNullableList = new object[]
            {
1234
            },
            });
            Response response = client.PatchAction(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PatchAction_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                requiredUnion = "<requiredUnion>",
                requiredLiteralString = "accept",
                requiredLiteralInt = 123,
                requiredLiteralFloat = 1.23F,
                requiredLiteralBool = false,
                optionalLiteralString = "reject",
                optionalLiteralInt = 456,
                optionalLiteralFloat = 4.56F,
                optionalLiteralBool = true,
                requiredBadDescription = "<requiredBadDescription>",
                optionalNullableList = new object[]
            {
1234
            },
                requiredNullableList = new object[]
            {
1234
            },
            });
            Response response = await client.PatchActionAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnonymousBody()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                requiredUnion = "<requiredUnion>",
                requiredLiteralString = "accept",
                requiredLiteralInt = 123,
                requiredLiteralFloat = 1.23F,
                requiredLiteralBool = false,
                requiredBadDescription = "<requiredBadDescription>",
                requiredNullableList = new object[]
            {
1234
            },
            });
            Response response = client.AnonymousBody(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnonymousBody_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                requiredUnion = "<requiredUnion>",
                requiredLiteralString = "accept",
                requiredLiteralInt = 123,
                requiredLiteralFloat = 1.23F,
                requiredLiteralBool = false,
                requiredBadDescription = "<requiredBadDescription>",
                requiredNullableList = new object[]
            {
1234
            },
            });
            Response response = await client.AnonymousBodyAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AnonymousBody_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                requiredUnion = "<requiredUnion>",
                requiredLiteralString = "accept",
                requiredLiteralInt = 123,
                requiredLiteralFloat = 1.23F,
                requiredLiteralBool = false,
                optionalLiteralString = "reject",
                optionalLiteralInt = 456,
                optionalLiteralFloat = 4.56F,
                optionalLiteralBool = true,
                requiredBadDescription = "<requiredBadDescription>",
                optionalNullableList = new object[]
            {
1234
            },
                requiredNullableList = new object[]
            {
1234
            },
            });
            Response response = client.AnonymousBody(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AnonymousBody_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                requiredUnion = "<requiredUnion>",
                requiredLiteralString = "accept",
                requiredLiteralInt = 123,
                requiredLiteralFloat = 1.23F,
                requiredLiteralBool = false,
                optionalLiteralString = "reject",
                optionalLiteralInt = 456,
                optionalLiteralFloat = 4.56F,
                optionalLiteralBool = true,
                requiredBadDescription = "<requiredBadDescription>",
                optionalNullableList = new object[]
            {
1234
            },
                requiredNullableList = new object[]
            {
1234
            },
            });
            Response response = await client.AnonymousBodyAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FriendlyModel()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.FriendlyModel(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FriendlyModel_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.FriendlyModelAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FriendlyModel_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Friend notFriend = new Friend("<name>");
            Response<Friend> response = client.FriendlyModel(notFriend);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FriendlyModel_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Friend notFriend = new Friend("<name>");
            Response<Friend> response = await client.FriendlyModelAsync(notFriend);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FriendlyModel_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.FriendlyModel(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FriendlyModel_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.FriendlyModelAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_FriendlyModel_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Friend notFriend = new Friend("<name>");
            Response<Friend> response = client.FriendlyModel(notFriend);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_FriendlyModel_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Friend notFriend = new Friend("<name>");
            Response<Friend> response = await client.FriendlyModelAsync(notFriend);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AddTimeHeader()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.AddTimeHeader();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AddTimeHeader_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.AddTimeHeaderAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_AddTimeHeader_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.AddTimeHeader();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_AddTimeHeader_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.AddTimeHeaderAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StringFormat()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                sourceUrl = "http://localhost:3000",
                guid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Response response = client.StringFormat(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StringFormat_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                sourceUrl = "http://localhost:3000",
                guid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Response response = await client.StringFormatAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StringFormat_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            ModelWithFormat body = new ModelWithFormat(new Uri("http://localhost:3000"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
            Response response = client.StringFormat(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StringFormat_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            ModelWithFormat body = new ModelWithFormat(new Uri("http://localhost:3000"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
            Response response = await client.StringFormatAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StringFormat_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                sourceUrl = "http://localhost:3000",
                guid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Response response = client.StringFormat(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StringFormat_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                sourceUrl = "http://localhost:3000",
                guid = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            });
            Response response = await client.StringFormatAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StringFormat_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            ModelWithFormat body = new ModelWithFormat(new Uri("http://localhost:3000"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
            Response response = client.StringFormat(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StringFormat_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            ModelWithFormat body = new ModelWithFormat(new Uri("http://localhost:3000"), Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"));
            Response response = await client.StringFormatAsync(Guid.Parse("73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"), body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectedNameModel()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.ProjectedNameModel(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectedNameModel_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.ProjectedNameModelAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectedNameModel_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            ProjectedModel modelWithProjectedName = new ProjectedModel("<name>");
            Response<ProjectedModel> response = client.ProjectedNameModel(modelWithProjectedName);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectedNameModel_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            ProjectedModel modelWithProjectedName = new ProjectedModel("<name>");
            Response<ProjectedModel> response = await client.ProjectedNameModelAsync(modelWithProjectedName);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectedNameModel_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.ProjectedNameModel(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectedNameModel_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.ProjectedNameModelAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProjectedNameModel_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            ProjectedModel modelWithProjectedName = new ProjectedModel("<name>");
            Response<ProjectedModel> response = client.ProjectedNameModel(modelWithProjectedName);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ProjectedNameModel_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            ProjectedModel modelWithProjectedName = new ProjectedModel("<name>");
            Response<ProjectedModel> response = await client.ProjectedNameModelAsync(modelWithProjectedName);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReturnsAnonymousModel()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.ReturnsAnonymousModel(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReturnsAnonymousModel_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.ReturnsAnonymousModelAsync(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReturnsAnonymousModel_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.ReturnsAnonymousModel(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReturnsAnonymousModel_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.ReturnsAnonymousModelAsync(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HeadAsBoolean()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response<bool> response = client.HeadAsBoolean("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HeadAsBoolean_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response<bool> response = await client.HeadAsBooleanAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HeadAsBoolean_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response<bool> response = client.HeadAsBoolean("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HeadAsBoolean_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response<bool> response = await client.HeadAsBooleanAsync("<id>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SayHi()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.SayHi("<headParameter>", "<queryParameter>", null, null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SayHi_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.SayHiAsync("<headParameter>", "<queryParameter>", null, null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SayHi_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.SayHi("<headParameter>", "<queryParameter>", "<optionalQuery>", null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SayHi_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.SayHiAsync("<headParameter>", "<queryParameter>", "<optionalQuery>", null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HelloAgain()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredCollection = new object[]
            {
"1"
            },
                requiredDictionary = new
                {
                    key = "1",
                },
                requiredModel = new
                {
                    name = "<name>",
                    requiredUnion = "<requiredUnion>",
                    requiredLiteralString = "accept",
                    requiredLiteralInt = 123,
                    requiredLiteralFloat = 1.23F,
                    requiredLiteralBool = false,
                    requiredBadDescription = "<requiredBadDescription>",
                    requiredNullableList = new object[]
            {
1234
            },
                },
                requiredUnknown = new object(),
                requiredRecordUnknown = new
                {
                    key = new object(),
                },
                modelWithRequiredNullable = new
                {
                    requiredNullablePrimitive = 1234,
                    requiredExtensibleEnum = "1",
                    requiredFixedEnum = "1",
                },
            });
            Response response = client.HelloAgain("<p2>", "<p1>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HelloAgain_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredCollection = new object[]
            {
"1"
            },
                requiredDictionary = new
                {
                    key = "1",
                },
                requiredModel = new
                {
                    name = "<name>",
                    requiredUnion = "<requiredUnion>",
                    requiredLiteralString = "accept",
                    requiredLiteralInt = 123,
                    requiredLiteralFloat = 1.23F,
                    requiredLiteralBool = false,
                    requiredBadDescription = "<requiredBadDescription>",
                    requiredNullableList = new object[]
            {
1234
            },
                },
                requiredUnknown = new object(),
                requiredRecordUnknown = new
                {
                    key = new object(),
                },
                modelWithRequiredNullable = new
                {
                    requiredNullablePrimitive = 1234,
                    requiredExtensibleEnum = "1",
                    requiredFixedEnum = "1",
                },
            });
            Response response = await client.HelloAgainAsync("<p2>", "<p1>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HelloAgain_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredCollection = new object[]
            {
"1"
            },
                requiredDictionary = new
                {
                    key = "1",
                },
                requiredModel = new
                {
                    name = "<name>",
                    requiredUnion = "<requiredUnion>",
                    requiredLiteralString = "accept",
                    requiredLiteralInt = 123,
                    requiredLiteralFloat = 1.23F,
                    requiredLiteralBool = false,
                    optionalLiteralString = "reject",
                    optionalLiteralInt = 456,
                    optionalLiteralFloat = 4.56F,
                    optionalLiteralBool = true,
                    requiredBadDescription = "<requiredBadDescription>",
                    optionalNullableList = new object[]
            {
1234
            },
                    requiredNullableList = new object[]
            {
1234
            },
                },
                intExtensibleEnum = 1,
                intExtensibleEnumCollection = new object[]
            {
1
            },
                floatExtensibleEnum = 1,
                floatExtensibleEnumCollection = new object[]
            {
1
            },
                floatFixedEnum = 1.1F,
                floatFixedEnumCollection = new object[]
            {
1.1F
            },
                intFixedEnum = 1,
                intFixedEnumCollection = new object[]
            {
1
            },
                stringFixedEnum = "1",
                requiredUnknown = new object(),
                optionalUnknown = new object(),
                requiredRecordUnknown = new
                {
                    key = new object(),
                },
                optionalRecordUnknown = new
                {
                    key = new object(),
                },
                modelWithRequiredNullable = new
                {
                    requiredNullablePrimitive = 1234,
                    requiredExtensibleEnum = "1",
                    requiredFixedEnum = "1",
                },
            });
            Response response = client.HelloAgain("<p2>", "<p1>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HelloAgain_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredCollection = new object[]
            {
"1"
            },
                requiredDictionary = new
                {
                    key = "1",
                },
                requiredModel = new
                {
                    name = "<name>",
                    requiredUnion = "<requiredUnion>",
                    requiredLiteralString = "accept",
                    requiredLiteralInt = 123,
                    requiredLiteralFloat = 1.23F,
                    requiredLiteralBool = false,
                    optionalLiteralString = "reject",
                    optionalLiteralInt = 456,
                    optionalLiteralFloat = 4.56F,
                    optionalLiteralBool = true,
                    requiredBadDescription = "<requiredBadDescription>",
                    optionalNullableList = new object[]
            {
1234
            },
                    requiredNullableList = new object[]
            {
1234
            },
                },
                intExtensibleEnum = 1,
                intExtensibleEnumCollection = new object[]
            {
1
            },
                floatExtensibleEnum = 1,
                floatExtensibleEnumCollection = new object[]
            {
1
            },
                floatFixedEnum = 1.1F,
                floatFixedEnumCollection = new object[]
            {
1.1F
            },
                intFixedEnum = 1,
                intFixedEnumCollection = new object[]
            {
1
            },
                stringFixedEnum = "1",
                requiredUnknown = new object(),
                optionalUnknown = new object(),
                requiredRecordUnknown = new
                {
                    key = new object(),
                },
                optionalRecordUnknown = new
                {
                    key = new object(),
                },
                modelWithRequiredNullable = new
                {
                    requiredNullablePrimitive = 1234,
                    requiredExtensibleEnum = "1",
                    requiredFixedEnum = "1",
                },
            });
            Response response = await client.HelloAgainAsync("<p2>", "<p1>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoContentType()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredCollection = new object[]
            {
"1"
            },
                requiredDictionary = new
                {
                    key = "1",
                },
                requiredModel = new
                {
                    name = "<name>",
                    requiredUnion = "<requiredUnion>",
                    requiredLiteralString = "accept",
                    requiredLiteralInt = 123,
                    requiredLiteralFloat = 1.23F,
                    requiredLiteralBool = false,
                    requiredBadDescription = "<requiredBadDescription>",
                    requiredNullableList = new object[]
            {
1234
            },
                },
                requiredUnknown = new object(),
                requiredRecordUnknown = new
                {
                    key = new object(),
                },
                modelWithRequiredNullable = new
                {
                    requiredNullablePrimitive = 1234,
                    requiredExtensibleEnum = "1",
                    requiredFixedEnum = "1",
                },
            });
            Response response = client.NoContentType("<p2>", "<p1>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoContentType_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredCollection = new object[]
            {
"1"
            },
                requiredDictionary = new
                {
                    key = "1",
                },
                requiredModel = new
                {
                    name = "<name>",
                    requiredUnion = "<requiredUnion>",
                    requiredLiteralString = "accept",
                    requiredLiteralInt = 123,
                    requiredLiteralFloat = 1.23F,
                    requiredLiteralBool = false,
                    requiredBadDescription = "<requiredBadDescription>",
                    requiredNullableList = new object[]
            {
1234
            },
                },
                requiredUnknown = new object(),
                requiredRecordUnknown = new
                {
                    key = new object(),
                },
                modelWithRequiredNullable = new
                {
                    requiredNullablePrimitive = 1234,
                    requiredExtensibleEnum = "1",
                    requiredFixedEnum = "1",
                },
            });
            Response response = await client.NoContentTypeAsync("<p2>", "<p1>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NoContentType_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredCollection = new object[]
            {
"1"
            },
                requiredDictionary = new
                {
                    key = "1",
                },
                requiredModel = new
                {
                    name = "<name>",
                    requiredUnion = "<requiredUnion>",
                    requiredLiteralString = "accept",
                    requiredLiteralInt = 123,
                    requiredLiteralFloat = 1.23F,
                    requiredLiteralBool = false,
                    optionalLiteralString = "reject",
                    optionalLiteralInt = 456,
                    optionalLiteralFloat = 4.56F,
                    optionalLiteralBool = true,
                    requiredBadDescription = "<requiredBadDescription>",
                    optionalNullableList = new object[]
            {
1234
            },
                    requiredNullableList = new object[]
            {
1234
            },
                },
                intExtensibleEnum = 1,
                intExtensibleEnumCollection = new object[]
            {
1
            },
                floatExtensibleEnum = 1,
                floatExtensibleEnumCollection = new object[]
            {
1
            },
                floatFixedEnum = 1.1F,
                floatFixedEnumCollection = new object[]
            {
1.1F
            },
                intFixedEnum = 1,
                intFixedEnumCollection = new object[]
            {
1
            },
                stringFixedEnum = "1",
                requiredUnknown = new object(),
                optionalUnknown = new object(),
                requiredRecordUnknown = new
                {
                    key = new object(),
                },
                optionalRecordUnknown = new
                {
                    key = new object(),
                },
                modelWithRequiredNullable = new
                {
                    requiredNullablePrimitive = 1234,
                    requiredExtensibleEnum = "1",
                    requiredFixedEnum = "1",
                },
            });
            Response response = client.NoContentType("<p2>", "<p1>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NoContentType_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredCollection = new object[]
            {
"1"
            },
                requiredDictionary = new
                {
                    key = "1",
                },
                requiredModel = new
                {
                    name = "<name>",
                    requiredUnion = "<requiredUnion>",
                    requiredLiteralString = "accept",
                    requiredLiteralInt = 123,
                    requiredLiteralFloat = 1.23F,
                    requiredLiteralBool = false,
                    optionalLiteralString = "reject",
                    optionalLiteralInt = 456,
                    optionalLiteralFloat = 4.56F,
                    optionalLiteralBool = true,
                    requiredBadDescription = "<requiredBadDescription>",
                    optionalNullableList = new object[]
            {
1234
            },
                    requiredNullableList = new object[]
            {
1234
            },
                },
                intExtensibleEnum = 1,
                intExtensibleEnumCollection = new object[]
            {
1
            },
                floatExtensibleEnum = 1,
                floatExtensibleEnumCollection = new object[]
            {
1
            },
                floatFixedEnum = 1.1F,
                floatFixedEnumCollection = new object[]
            {
1.1F
            },
                intFixedEnum = 1,
                intFixedEnumCollection = new object[]
            {
1
            },
                stringFixedEnum = "1",
                requiredUnknown = new object(),
                optionalUnknown = new object(),
                requiredRecordUnknown = new
                {
                    key = new object(),
                },
                optionalRecordUnknown = new
                {
                    key = new object(),
                },
                modelWithRequiredNullable = new
                {
                    requiredNullablePrimitive = 1234,
                    requiredExtensibleEnum = "1",
                    requiredFixedEnum = "1",
                },
            });
            Response response = await client.NoContentTypeAsync("<p2>", "<p1>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HelloDemo2()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.HelloDemo2(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HelloDemo2_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.HelloDemo2Async(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HelloDemo2_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.HelloDemo2(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HelloDemo2_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.HelloDemo2Async(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateLiteral()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                requiredUnion = "<requiredUnion>",
                requiredLiteralString = "accept",
                requiredLiteralInt = 123,
                requiredLiteralFloat = 1.23F,
                requiredLiteralBool = false,
                requiredBadDescription = "<requiredBadDescription>",
                requiredNullableList = new object[]
            {
1234
            },
            });
            Response response = client.CreateLiteral(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateLiteral_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                requiredUnion = "<requiredUnion>",
                requiredLiteralString = "accept",
                requiredLiteralInt = 123,
                requiredLiteralFloat = 1.23F,
                requiredLiteralBool = false,
                requiredBadDescription = "<requiredBadDescription>",
                requiredNullableList = new object[]
            {
1234
            },
            });
            Response response = await client.CreateLiteralAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateLiteral_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                requiredUnion = "<requiredUnion>",
                requiredLiteralString = "accept",
                requiredLiteralInt = 123,
                requiredLiteralFloat = 1.23F,
                requiredLiteralBool = false,
                optionalLiteralString = "reject",
                optionalLiteralInt = 456,
                optionalLiteralFloat = 4.56F,
                optionalLiteralBool = true,
                requiredBadDescription = "<requiredBadDescription>",
                optionalNullableList = new object[]
            {
1234
            },
                requiredNullableList = new object[]
            {
1234
            },
            });
            Response response = client.CreateLiteral(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateLiteral_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                requiredUnion = "<requiredUnion>",
                requiredLiteralString = "accept",
                requiredLiteralInt = 123,
                requiredLiteralFloat = 1.23F,
                requiredLiteralBool = false,
                optionalLiteralString = "reject",
                optionalLiteralInt = 456,
                optionalLiteralFloat = 4.56F,
                optionalLiteralBool = true,
                requiredBadDescription = "<requiredBadDescription>",
                optionalNullableList = new object[]
            {
1234
            },
                requiredNullableList = new object[]
            {
1234
            },
            });
            Response response = await client.CreateLiteralAsync(content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HelloLiteral()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.HelloLiteral(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HelloLiteral_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.HelloLiteralAsync(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_HelloLiteral_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.HelloLiteral(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_HelloLiteral_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.HelloLiteralAsync(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUnknownValue()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.GetUnknownValue(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUnknownValue_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.GetUnknownValueAsync(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUnknownValue_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = client.GetUnknownValue(null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUnknownValue_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            FirstTestTypeSpecClient client = new FirstTestTypeSpecClient(endpoint);

            Response response = await client.GetUnknownValueAsync(null);
        }
    }
}
