<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetProjectAsync(String,RequestContext)">
<example>
This sample shows how to call GetProjectAsync with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RenameGetListClient(endpoint);

Response response = await client.GetProjectAsync("<projectName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("multilingual").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Project</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required. The project kind.
  storageInputContainerName: string, # Required. The storage container name.
  settings: Dictionary&lt;string, string&gt;, # Optional. The project settings.
  multilingual: boolean, # Optional. Whether the project would be used for multiple languages or not.
  description: string, # Optional. The project description.
  language: string, # Required. The project language. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English, &quot;en-gb&quot; for English (UK), &quot;es&quot; for Spanish etc.
  createdDateTime: string (date &amp; time), # Required. Represents the project creation datetime.
  lastModifiedDateTime: string (date &amp; time), # Required. Represents the project last modification datetime.
  lastTrainedDateTime: string (date &amp; time), # Required. Represents the project last training datetime.
  lastDeployedDateTime: string (date &amp; time), # Required. Represents the project last deployment datetime.
}
</code>

</remarks>
    </member>
    <member name="GetProject(String,RequestContext)">
<example>
This sample shows how to call GetProject with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RenameGetListClient(endpoint);

Response response = client.GetProject("<projectName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("projectKind").ToString());
Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("multilingual").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Project</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required. The project kind.
  storageInputContainerName: string, # Required. The storage container name.
  settings: Dictionary&lt;string, string&gt;, # Optional. The project settings.
  multilingual: boolean, # Optional. Whether the project would be used for multiple languages or not.
  description: string, # Optional. The project description.
  language: string, # Required. The project language. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English, &quot;en-gb&quot; for English (UK), &quot;es&quot; for Spanish etc.
  createdDateTime: string (date &amp; time), # Required. Represents the project creation datetime.
  lastModifiedDateTime: string (date &amp; time), # Required. Represents the project last modification datetime.
  lastTrainedDateTime: string (date &amp; time), # Required. Represents the project last training datetime.
  lastDeployedDateTime: string (date &amp; time), # Required. Represents the project last deployment datetime.
}
</code>

</remarks>
    </member>
    <member name="GetDeploymentAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetDeploymentAsync with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RenameGetListClient(endpoint);

Response response = await client.GetDeploymentAsync("<projectName>", "<deploymentName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Deployment</c>:
<code>{
  name: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetDeployment(String,String,RequestContext)">
<example>
This sample shows how to call GetDeployment with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RenameGetListClient(endpoint);

Response response = client.GetDeployment("<projectName>", "<deploymentName>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Deployment</c>:
<code>{
  name: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="GetProjectsAsync(RequestContext)">
<example>
This sample shows how to call GetProjectsAsync and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RenameGetListClient(endpoint);

await foreach (var data in client.GetProjectsAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("projectKind").ToString());
    Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
    Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("multilingual").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("language").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>Array</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required. The project kind.
  storageInputContainerName: string, # Required. The storage container name.
  settings: Dictionary&lt;string, string&gt;, # Optional. The project settings.
  multilingual: boolean, # Optional. Whether the project would be used for multiple languages or not.
  description: string, # Optional. The project description.
  language: string, # Required. The project language. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English, &quot;en-gb&quot; for English (UK), &quot;es&quot; for Spanish etc.
  createdDateTime: string (date &amp; time), # Required. Represents the project creation datetime.
  lastModifiedDateTime: string (date &amp; time), # Required. Represents the project last modification datetime.
  lastTrainedDateTime: string (date &amp; time), # Required. Represents the project last training datetime.
  lastDeployedDateTime: string (date &amp; time), # Required. Represents the project last deployment datetime.
}
</code>

</remarks>
    </member>
    <member name="GetProjects(RequestContext)">
<example>
This sample shows how to call GetProjects and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RenameGetListClient(endpoint);

foreach (var data in client.GetProjects())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("projectKind").ToString());
    Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
    Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("multilingual").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("language").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>Array</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required. The project kind.
  storageInputContainerName: string, # Required. The storage container name.
  settings: Dictionary&lt;string, string&gt;, # Optional. The project settings.
  multilingual: boolean, # Optional. Whether the project would be used for multiple languages or not.
  description: string, # Optional. The project description.
  language: string, # Required. The project language. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English, &quot;en-gb&quot; for English (UK), &quot;es&quot; for Spanish etc.
  createdDateTime: string (date &amp; time), # Required. Represents the project creation datetime.
  lastModifiedDateTime: string (date &amp; time), # Required. Represents the project last modification datetime.
  lastTrainedDateTime: string (date &amp; time), # Required. Represents the project last training datetime.
  lastDeployedDateTime: string (date &amp; time), # Required. Represents the project last deployment datetime.
}
</code>

</remarks>
    </member>
    <member name="GetDeploymentsAsync(String,RequestContext)">
<example>
This sample shows how to call GetDeploymentsAsync with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RenameGetListClient(endpoint);

await foreach (var data in client.GetDeploymentsAsync("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("projectKind").ToString());
    Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
    Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("multilingual").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("language").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>Array</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required. The project kind.
  storageInputContainerName: string, # Required. The storage container name.
  settings: Dictionary&lt;string, string&gt;, # Optional. The project settings.
  multilingual: boolean, # Optional. Whether the project would be used for multiple languages or not.
  description: string, # Optional. The project description.
  language: string, # Required. The project language. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English, &quot;en-gb&quot; for English (UK), &quot;es&quot; for Spanish etc.
  createdDateTime: string (date &amp; time), # Required. Represents the project creation datetime.
  lastModifiedDateTime: string (date &amp; time), # Required. Represents the project last modification datetime.
  lastTrainedDateTime: string (date &amp; time), # Required. Represents the project last training datetime.
  lastDeployedDateTime: string (date &amp; time), # Required. Represents the project last deployment datetime.
}
</code>

</remarks>
    </member>
    <member name="GetDeployments(String,RequestContext)">
<example>
This sample shows how to call GetDeployments with required parameters and parse the result.
<code><![CDATA[
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RenameGetListClient(endpoint);

foreach (var data in client.GetDeployments("<projectName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("projectKind").ToString());
    Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
    Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("multilingual").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("language").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>Array</c>:
<code>{
  projectName: string, # Required.
  projectKind: &quot;CustomSingleLabelClassification&quot; | &quot;CustomMultiLabelClassification&quot; | &quot;CustomEntityRecognition&quot;, # Required. The project kind.
  storageInputContainerName: string, # Required. The storage container name.
  settings: Dictionary&lt;string, string&gt;, # Optional. The project settings.
  multilingual: boolean, # Optional. Whether the project would be used for multiple languages or not.
  description: string, # Optional. The project description.
  language: string, # Required. The project language. This is BCP-47 representation of a language. For example, use &quot;en&quot; for English, &quot;en-gb&quot; for English (UK), &quot;es&quot; for Spanish etc.
  createdDateTime: string (date &amp; time), # Required. Represents the project creation datetime.
  lastModifiedDateTime: string (date &amp; time), # Required. Represents the project last modification datetime.
  lastTrainedDateTime: string (date &amp; time), # Required. Represents the project last training datetime.
  lastDeployedDateTime: string (date &amp; time), # Required. Represents the project last deployment datetime.
}
</code>

</remarks>
    </member>
  </members>
</doc>