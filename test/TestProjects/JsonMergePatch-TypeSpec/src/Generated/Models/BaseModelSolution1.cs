// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Payload.JsonMergePatch.Models
{
    /// model ExtendedModelSolution1: BaseModelSolution1
    /// {
    ///     extendedValue?: string;
    /// }
    /// model ThreeLevel : ExtendedModelSolution1
    /// {
    /// }
    /// model BaseModelSolution1
    /// {
    ///     baseValue?: string;
    ///     baseDict?: Record<DummyModel>;
    ///     baseIntDict?: Record<int32>;
    /// }
    /// model DummyModel
    /// {
    ///     property?: string;
    /// }
    public partial class BaseModelSolution1
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private protected IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BaseModelSolution1"/>. </summary>
        public BaseModelSolution1()
        {
            _baseDict = new ChangeTrackingDictionary<string, DummyModel>();
            _baseIntDict = new ChangeTrackingDictionary<string, int?>();
        }

        /// <summary> Initializes a new instance of <see cref="BaseModelSolution1"/>. </summary>
        /// <param name="baseValue"></param>
        /// <param name="baseDict"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BaseModelSolution1(string baseValue, IDictionary<string, DummyModel> baseDict, IDictionary<string, int?> baseIntDict, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            _baseValue = baseValue;
            _baseDict = new ChangeTrackingDictionary<string, DummyModel>(baseDict);
            _baseIntDict = new ChangeTrackingDictionary<string, int?>(baseIntDict);
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        private string _baseValue;
        private bool _baseValueChanged = false;
        public string BaseValue
        {
            get => _baseValue;
            set
            {
                _baseValue = value;
                _baseValueChanged = true;
                _isChanged = true;
            }
        }

        private ChangeTrackingDictionary<string, DummyModel> _baseDict;
        private bool _baseDictChanged = false;
        public IDictionary<string, DummyModel> BaseDict
        {
            get => _baseDict;
            set // We actually don't have set here for normal cases, but in some very rare cases we would have set
            {
                _baseDict = new ChangeTrackingDictionary<string, DummyModel>(value, true); // Therefore every item in the dictionary is regarded as touched
                _baseDictChanged = true;
                _isChanged = true;
            }
        }

        private ChangeTrackingDictionary<string, int?> _baseIntDict; // This is an API change because we want to do _baseIntDict["a"] = null;
        private bool _baseIntDictChanged = false;
        public IDictionary<string, int?> BaseIntDict // Therefore we cannot assign a IDictionary<string, int> instance to it.
        {
            get => _baseIntDict;
            set // Same as the reason of BaseDict
            {
                _baseIntDict = new ChangeTrackingDictionary<string, int?>(value, true);
                _baseIntDictChanged = true;
                _isChanged = true;
            }
        }

        private bool _isChanged = false;
        protected bool IsChanged(string name = null) // If base model and extended model are in the same library, we could still consider keep the method but change it to private protected
        {
            if (name == null)
            {
                return _isChanged; // Three level: add evnever
            }

            switch (name)
            {
                case "BaseValue": // string comparison perf improve
                    return _baseValueChanged;
                case "BaseDict": // This is a dirty read, but it is a tradeoff we need to consider.
                    // Consider this case:
                    // _baseDict get value from service {"a": {some model}}
                    // var model = _baseDict["a"];
                    // var ref a = _baseArray[0];
                    // a = new DummyModel(); // consider struct
                    // model = new DummyModel();
                    // The dictionary will not be considered as touched
                    return _baseDictChanged || _baseDict.IsChanged() || _baseDict.Values.Any(item => item != null && item.IsChanged());
                case "BaseIntDict":
                    return _baseIntDictChanged || _baseIntDict.IsChanged();
                default:
                    return false;
            }
        }
    }
}
