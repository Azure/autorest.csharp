// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Payload.JsonMergePatch.Models
{
    /// <summary> The PatchModel. </summary>
    public partial class PatchModel
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PatchModel"/>. </summary>
        /// <param name="requiredValue"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredValue"/> is null. </exception>
        public PatchModel(string requiredValue)
        {
            if (requiredValue == null)
            {
                throw new ArgumentNullException(nameof(requiredValue));
            }

            RequiredValue = requiredValue; // Keep the same. This means when we new IntValueModel with a required property, we take it as the required property is touched.
        }

        /// <summary> Initializes a new instance of <see cref="PatchModel"/>. </summary>
        /// <param name="requiredValue"></param>
        /// <param name="optionalValue"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PatchModel(string requiredValue, string optionalValue, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            _requiredValue = requiredValue; // This means when we deserialize to get the model, we take the properties are not touched.
            _optionalValue = optionalValue;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="PatchModel"/> for deserialization. </summary>
        internal PatchModel()
        {
        }

        /// <summary> Gets or sets the required value. </summary>
        private string _requiredValue;
        private bool _requiredValueChanged = false;
        public string RequiredValue
        {
            get => _requiredValue;
            set // NO API change here: For input model we still don't have the set; For roundtrip model we don't check null and expect service to throw error
            {
                _requiredValueChanged = true;
                _requiredValue = value;
            }
        }

        /// <summary> Gets or sets the optional value. </summary>
        private string _optionalValue;
        private bool _optionalValueChanged = false;
        public string OptionalValue
        {
            get => _optionalValue;
            set
            {
                _optionalValue = value;
                _optionalValueChanged = true;
            }
        }
    }
}
