// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Payload.JsonMergePatch.Models
{
    public partial class ExtendedModelSolution1 : IUtf8JsonSerializable, IJsonModel<ExtendedModelSolution1>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ExtendedModelSolution1>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<ExtendedModelSolution1>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExtendedModelSolution1>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ExtendedModelSolution1)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (ExtendedValue != null)
            {
                writer.WritePropertyName("extendedValue"u8);
                writer.WriteStringValue(ExtendedValue);
            }
            if (BaseValue != null)
            {
                writer.WritePropertyName("baseValue"u8);
                writer.WriteStringValue(BaseValue);
            }
            if (!(BaseIntDict is ChangeTrackingDictionary<string, DummyModel> collection1 && collection1.IsUndefined))
            {
                writer.WritePropertyName("baseIntDict"u8);
                writer.WriteStartObject();
                foreach (var item in BaseIntDict)
                {
                    if (item.Value != null) // Because it is actually `int` instead of `int?` in the spec, so we don't send `null` in a normal serialization
                    {
                        writer.WritePropertyName(item.Key);
                        writer.WriteNumberValue(item.Value.Value);
                    }
                }
                writer.WriteEndObject();
            }
            if (!(BaseDict is ChangeTrackingDictionary<string, DummyModel> collection && collection.IsUndefined))
            {
                writer.WritePropertyName("baseDict"u8);
                writer.WriteStartObject();
                foreach (var item in BaseDict)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        private void WritePatch(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (_extendedValueChanged)
            {
                writer.WritePropertyName("extendedValue"u8);
                if (ExtendedValue != null)
                {
                    writer.WriteStringValue(ExtendedValue);
                }
                else
                {
                    writer.WriteNullValue();
                }
            }
            if (base.IsChanged("baseValue"))
            {
                writer.WritePropertyName("baseValue"u8);
                if (BaseValue != null)
                {
                    writer.WriteStringValue(BaseValue);
                }
                else
                {
                    writer.WriteNullValue();
                }
            }
            // Checks for
            // 1. _baseDictChanged
            // 2. _baseDict.IsChanged()
            // 3. _baseDict.Values.Any(item => item.IsChanged())
            if (base.IsChanged("baseDict"))
            {
                writer.WritePropertyName("baseDict"u8);
                if (BaseDict != null && !((ChangeTrackingDictionary<string, DummyModel>)BaseDict).IsRemoved())
                {
                    foreach (var item in BaseDict)
                    {
                        // Case 1: _baseDict["a"] = null;
                        // Case 2: _baseDict["a"] = <dummyModel>;
                        // Case 3: _baseDict["b"] = model; model = null;
                        if (((ChangeTrackingDictionary<string, DummyModel>)BaseDict).IsChanged(item.Key))
                        {
                            writer.WritePropertyName(item.Key);
                            if (item.Value != null)
                            {
                                ((IJsonModel<DummyModel>)BaseDict[item.Key]).Write(writer, new ModelReaderWriterOptions("JMP"));
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                        }
                        // _baseDict["a"].Property = "a";
                        else if (item.Value != null && item.Value.IsChanged())
                        {
                            writer.WritePropertyName(item.Key);
                            ((IJsonModel<DummyModel>)BaseDict[item.Key]).Write(writer, new ModelReaderWriterOptions("JMP"));
                        }
                    }
                    // _baseDict.Remove("a");
                    foreach (var key in ((ChangeTrackingDictionary<string, DummyModel>)BaseDict).ChangedKeys ?? new List<string>())
                    {
                        if (((ChangeTrackingDictionary<string, DummyModel>)BaseDict).IsRemoved(key))
                        {
                            writer.WritePropertyName(key);
                            writer.WriteNullValue();
                        }
                    }
                }
                // Case 1: _baseDict = null;
                // Case 2: _baseDict.Clear();
                else
                {
                    writer.WriteNullValue();
                }
            }
            // Checks for
            // 1. _baseIntDictChanged
            // 2. _baseIntDict.IsChanged()
            if (base.IsChanged("baseIntDict"))
            {
                writer.WritePropertyName("baseIntDict"u8);
                if (BaseIntDict != null && !((ChangeTrackingDictionary<string, int?>)BaseIntDict).IsRemoved())
                {
                    foreach (var item in BaseIntDict)
                    {
                        // Case 1: _baseIntDict["a"] = null;
                        // Case 2: _baseIntDict["a"] = 5;
                        if (((ChangeTrackingDictionary<string, int?>)BaseIntDict).IsChanged(item.Key))
                        {
                            writer.WritePropertyName(item.Key);
                            if (item.Value != null)
                            {
                                writer.WriteNumberValue(item.Value.Value);
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                        }
                    }
                    // _baseIntDict.Remove("a");
                    foreach (var key in ((ChangeTrackingDictionary<string, int?>)BaseIntDict).ChangedKeys ?? new List<string>())
                    {
                        if (((ChangeTrackingDictionary<string, int?>)BaseIntDict).IsRemoved(key))
                        {
                            writer.WritePropertyName(key);
                            writer.WriteNullValue();
                        }
                    }
                }
                // Case 1: _baseIntDict = null;
                // Case 2: _baseIntDict.Clear();
                else
                {
                    writer.WriteNullValue();
                }
            }
            writer.WriteEndObject();
        }

        ExtendedModelSolution1 IJsonModel<ExtendedModelSolution1>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExtendedModelSolution1>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ExtendedModelSolution1)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeExtendedModelSolution1(document.RootElement, options);
        }

        internal static ExtendedModelSolution1 DeserializeExtendedModelSolution1(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> extendedValue = default;
            Optional<string> baseValue = default;
            IDictionary<string, DummyModel> baseDict = default;
            IDictionary<string, int?> baseIntDict = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("extendedValue"u8))
                {
                    extendedValue = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("baseValue"u8))
                {
                    baseValue = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("baseDict"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, DummyModel> dictionary = new Dictionary<string, DummyModel>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, DummyModel.DeserializeDummyModel(property0.Value, options));
                    }
                    baseDict = dictionary;
                    continue;
                }
                if (property.NameEquals("baseIntDict"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, int?> dictionary = new Dictionary<string, int?>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetInt32());
                    }
                    baseIntDict = dictionary;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ExtendedModelSolution1(baseValue.Value, baseDict, baseIntDict, serializedAdditionalRawData, extendedValue.Value);
        }

        BinaryData IPersistableModel<ExtendedModelSolution1>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExtendedModelSolution1>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(ExtendedModelSolution1)} does not support '{options.Format}' format.");
            }
        }

        ExtendedModelSolution1 IPersistableModel<ExtendedModelSolution1>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ExtendedModelSolution1>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeExtendedModelSolution1(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ExtendedModelSolution1)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<ExtendedModelSolution1>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static new ExtendedModelSolution1 FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeExtendedModelSolution1(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal override RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
