// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Payload.JsonMergePatch.Models
{
    /// <summary> The IntValueModel. </summary>
    public partial class IntValueModel
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="IntValueModel"/>. </summary>
        /// <param name="requiredIntValue"></param>
        public IntValueModel(int requiredIntValue)
        {
            RequiredIntValue = requiredIntValue;
        }

        /// <summary> Initializes a new instance of <see cref="IntValueModel"/>. </summary>
        /// <param name="requiredIntValue"></param>
        /// <param name="optionalIntValue"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal IntValueModel(int requiredIntValue, int? optionalIntValue, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            _requiredIntValue = requiredIntValue;
            _optionalIntValue = optionalIntValue;

            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="IntValueModel"/> for deserialization. </summary>
        internal IntValueModel()
        {
        }

        /// <summary> Gets the required int value. </summary>
        private int _requiredIntValue;
        private bool _requiredIntValueChanged = false;
        public int RequiredIntValue
        {
            get => _requiredIntValue;
            set
            {
                _requiredIntValue = value;
                _requiredIntValueChanged = true;
            }
        }

        /// <summary> Gets or sets the optional int value. </summary>
        private int? _optionalIntValue;
        private bool _optionalIntValueChanged = false;
        public int? OptionalIntValue
        {
            get => _optionalIntValue;
            set
            {
                _optionalIntValue = value;
                _optionalIntValueChanged = true;
            }
        }

    }
}
