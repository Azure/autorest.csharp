// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Payload.JsonMergePatch.Models
{
    /// <summary> It is the model used by Resource model. </summary>
    public partial class ComplexModel
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ComplexModel"/>. </summary>
        /// <param name="arrayOfInt"></param>
        /// <param name="arrayOfModel"></param>
        /// <param name="arrayOfIntArray"></param>
        /// <param name="arrayOfModelArray"></param>
        /// <param name="dictOfInt"></param>
        /// <param name="dictOfModel"></param>
        /// <param name="dictOfIntDict"></param>
        /// <param name="dictOfModelDict"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="arrayOfInt"/>, <paramref name="arrayOfModel"/>, <paramref name="arrayOfIntArray"/>, <paramref name="arrayOfModelArray"/>, <paramref name="dictOfInt"/>, <paramref name="dictOfModel"/>, <paramref name="dictOfIntDict"/> or <paramref name="dictOfModelDict"/> is null. </exception>
        public ComplexModel(IEnumerable<int> arrayOfInt, IEnumerable<BaseModel> arrayOfModel, IEnumerable<IList<int>> arrayOfIntArray, IEnumerable<IList<BaseModel>> arrayOfModelArray, IDictionary<string, int> dictOfInt, IDictionary<string, BaseModel> dictOfModel, IDictionary<string, IDictionary<string, int>> dictOfIntDict, IDictionary<string, IDictionary<string, BaseModel>> dictOfModelDict)
        {
            Argument.AssertNotNull(arrayOfInt, nameof(arrayOfInt));
            Argument.AssertNotNull(arrayOfModel, nameof(arrayOfModel));
            Argument.AssertNotNull(arrayOfIntArray, nameof(arrayOfIntArray));
            Argument.AssertNotNull(arrayOfModelArray, nameof(arrayOfModelArray));
            Argument.AssertNotNull(dictOfInt, nameof(dictOfInt));
            Argument.AssertNotNull(dictOfModel, nameof(dictOfModel));
            Argument.AssertNotNull(dictOfIntDict, nameof(dictOfIntDict));
            Argument.AssertNotNull(dictOfModelDict, nameof(dictOfModelDict));

            ArrayOfInt = arrayOfInt.ToList();
            ArrayOfModel = arrayOfModel.ToList();
            ArrayOfIntArray = arrayOfIntArray.ToList();
            ArrayOfModelArray = arrayOfModelArray.ToList();
            DictOfInt = dictOfInt;
            DictOfModel = dictOfModel;
            DictOfIntDict = dictOfIntDict;
            DictOfModelDict = dictOfModelDict;
        }

        /// <summary> Initializes a new instance of <see cref="ComplexModel"/>. </summary>
        /// <param name="arrayOfInt"></param>
        /// <param name="arrayOfModel"></param>
        /// <param name="arrayOfIntArray"></param>
        /// <param name="arrayOfModelArray"></param>
        /// <param name="dictOfInt"></param>
        /// <param name="dictOfModel"></param>
        /// <param name="dictOfIntDict"></param>
        /// <param name="dictOfModelDict"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ComplexModel(IList<int> arrayOfInt, IList<BaseModel> arrayOfModel, IList<IList<int>> arrayOfIntArray, IList<IList<BaseModel>> arrayOfModelArray, IDictionary<string, int> dictOfInt, IDictionary<string, BaseModel> dictOfModel, IDictionary<string, IDictionary<string, int>> dictOfIntDict, IDictionary<string, IDictionary<string, BaseModel>> dictOfModelDict, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ArrayOfInt = arrayOfInt;
            ArrayOfModel = arrayOfModel;
            ArrayOfIntArray = arrayOfIntArray;
            ArrayOfModelArray = arrayOfModelArray;
            DictOfInt = dictOfInt;
            DictOfModel = dictOfModel;
            DictOfIntDict = dictOfIntDict;
            DictOfModelDict = dictOfModelDict;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="ComplexModel"/> for deserialization. </summary>
        internal ComplexModel()
        {
        }

        /// <summary> Gets the array of int. </summary>
        public IList<int> ArrayOfInt { get; }
        /// <summary>
        /// Gets the array of model
        /// Please note <see cref="BaseModel"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="IntValueModel"/> and <see cref="StringValueModel"/>.
        /// </summary>
        public IList<BaseModel> ArrayOfModel { get; }
        /// <summary> Gets the array of int array. </summary>
        public IList<IList<int>> ArrayOfIntArray { get; }
        /// <summary> Gets the array of model array. </summary>
        public IList<IList<BaseModel>> ArrayOfModelArray { get; }
        /// <summary> Gets the dict of int. </summary>
        public IDictionary<string, int> DictOfInt { get; }
        /// <summary>
        /// Gets the dict of model
        /// Please note <see cref="BaseModel"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="IntValueModel"/> and <see cref="StringValueModel"/>.
        /// </summary>
        public IDictionary<string, BaseModel> DictOfModel { get; }
        /// <summary> Gets the dict of int dict. </summary>
        public IDictionary<string, IDictionary<string, int>> DictOfIntDict { get; }
        /// <summary> Gets the dict of model dict. </summary>
        public IDictionary<string, IDictionary<string, BaseModel>> DictOfModelDict { get; }
    }
}
