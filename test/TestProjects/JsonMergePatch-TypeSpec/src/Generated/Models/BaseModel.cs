// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Payload.JsonMergePatch.Models
{
    /// <summary>
    /// Base model
    /// Please note <see cref="BaseModel"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="IntValueModel"/> and <see cref="StringValueModel"/>.
    /// </summary>
    public abstract partial class BaseModel
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private protected IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BaseModel"/>. </summary>
        /// <param name="requiredValue"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredValue"/> is null. </exception>
        protected BaseModel(BinaryData requiredValue)
        {
            Argument.AssertNotNull(requiredValue, nameof(requiredValue));

            RequiredValue = requiredValue;
        }

        /// <summary> Initializes a new instance of <see cref="BaseModel"/>. </summary>
        /// <param name="requiredValue"></param>
        /// <param name="optionalValue"></param>
        /// <param name="kind"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BaseModel(BinaryData requiredValue, BinaryData optionalValue, string kind, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            _requiredValue = requiredValue;
            _optionalValue = optionalValue;
            Kind = kind;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="BaseModel"/> for deserialization. </summary>
        internal BaseModel()
        {
        }

        private BinaryData _requiredValue;
        private protected bool _requiredValueChanged;
        public BinaryData RequiredValue 
        {
            get => _requiredValue;
            set // API change
            {
                Argument.AssertNotNull(value, nameof(RequiredValue));

                _requiredValue = value;
                _requiredValueChanged = true;
            }
        }

        private BinaryData _optionalValue;
        protected bool _optionalValueChanged;
        public BinaryData OptionalValue
        { 
            get => _optionalValue;
            set
            {
                _optionalValue = value;
                _optionalValueChanged = true;
            }
        }

        /// <summary> Gets or sets the kind. </summary>
        internal string Kind { get; set; }

        private bool _changed = false;
        internal virtual bool Changed => _changed;
    }
}
