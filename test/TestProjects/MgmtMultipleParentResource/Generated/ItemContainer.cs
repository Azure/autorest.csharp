// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using MgmtMultipleParentResource.Models;

namespace MgmtMultipleParentResource
{
    /// <summary> A class representing collection of Item and their operations over a ResourceGroup. </summary>
    public partial class ItemContainer : ResourceContainerBase<ResourceGroupResourceIdentifier, Item, ItemData>
    {
        /// <summary> Initializes a new instance of the <see cref="ItemContainer"/> class for mocking. </summary>
        protected ItemContainer()
        {
        }

        /// <summary> Initializes a new instance of ItemContainer class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal ItemContainer(ResourceOperationsBase parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
        }

        private readonly ClientDiagnostics _clientDiagnostics;

        /// <summary> Represents the REST operations. </summary>
        private ItemsRestOperations _restClient => new ItemsRestOperations(_clientDiagnostics, Pipeline, Id.SubscriptionId, BaseUri);

        /// <summary> Typed Resource Identifier for the container. </summary>
        public new ResourceGroupResourceIdentifier Id => base.Id as ResourceGroupResourceIdentifier;

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => ResourceGroupOperations.ResourceType;

        // Container level operations.

        /// <summary> The operation to create or update a Item. Please note some properties can be set only during creation. </summary>
        /// <param name="itemName"> The name of the virtual machine where the run command should be created or updated. </param>
        /// <param name="body"> Parameters supplied to the Create Virtual Machine RunCommand operation. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public Response<Item> CreateOrUpdate(string itemName, ItemData body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ItemContainer.CreateOrUpdate");
            scope.Start();
            try
            {
                if (itemName == null)
                {
                    throw new ArgumentNullException(nameof(itemName));
                }
                if (body == null)
                {
                    throw new ArgumentNullException(nameof(body));
                }

                return StartCreateOrUpdate(itemName, body, cancellationToken: cancellationToken).WaitForCompletion(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The operation to create or update a Item. Please note some properties can be set only during creation. </summary>
        /// <param name="itemName"> The name of the virtual machine where the run command should be created or updated. </param>
        /// <param name="body"> Parameters supplied to the Create Virtual Machine RunCommand operation. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async Task<Response<Item>> CreateOrUpdateAsync(string itemName, ItemData body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ItemContainer.CreateOrUpdate");
            scope.Start();
            try
            {
                if (itemName == null)
                {
                    throw new ArgumentNullException(nameof(itemName));
                }
                if (body == null)
                {
                    throw new ArgumentNullException(nameof(body));
                }

                var operation = await StartCreateOrUpdateAsync(itemName, body, cancellationToken: cancellationToken).ConfigureAwait(false);
                return await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The operation to create or update a Item. Please note some properties can be set only during creation. </summary>
        /// <param name="itemName"> The name of the virtual machine where the run command should be created or updated. </param>
        /// <param name="body"> Parameters supplied to the Create Virtual Machine RunCommand operation. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public ItemsCreateOrUpdateOperation StartCreateOrUpdate(string itemName, ItemData body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ItemContainer.StartCreateOrUpdate");
            scope.Start();
            try
            {
                if (itemName == null)
                {
                    throw new ArgumentNullException(nameof(itemName));
                }
                if (body == null)
                {
                    throw new ArgumentNullException(nameof(body));
                }

                var originalResponse = _restClient.CreateOrUpdate(Id.ResourceGroupName, itemName, body, cancellationToken: cancellationToken);
                return new ItemsCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _restClient.CreateCreateOrUpdateRequest(Id.ResourceGroupName, itemName, body).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The operation to create or update a Item. Please note some properties can be set only during creation. </summary>
        /// <param name="itemName"> The name of the virtual machine where the run command should be created or updated. </param>
        /// <param name="body"> Parameters supplied to the Create Virtual Machine RunCommand operation. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async Task<ItemsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string itemName, ItemData body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ItemContainer.StartCreateOrUpdate");
            scope.Start();
            try
            {
                if (itemName == null)
                {
                    throw new ArgumentNullException(nameof(itemName));
                }
                if (body == null)
                {
                    throw new ArgumentNullException(nameof(body));
                }

                var originalResponse = await _restClient.CreateOrUpdateAsync(Id.ResourceGroupName, itemName, body, cancellationToken: cancellationToken).ConfigureAwait(false);
                return new ItemsCreateOrUpdateOperation(Parent, _clientDiagnostics, Pipeline, _restClient.CreateCreateOrUpdateRequest(Id.ResourceGroupName, itemName, body).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets details for this resource from the service. </summary>
        /// <param name="itemName"> The name of the virtual machine containing the run command. </param>
        /// <param name="expand"> The expand expression to apply on the operation. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public Response<Item> Get(string itemName, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ItemContainer.Get");
            scope.Start();
            try
            {
                if (itemName == null)
                {
                    throw new ArgumentNullException(nameof(itemName));
                }

                var response = _restClient.Get(Id.ResourceGroupName, itemName, expand, cancellationToken: cancellationToken);
                return Response.FromValue(new Item(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets details for this resource from the service. </summary>
        /// <param name="itemName"> The name of the virtual machine containing the run command. </param>
        /// <param name="expand"> The expand expression to apply on the operation. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        public async Task<Response<Item>> GetAsync(string itemName, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ItemContainer.Get");
            scope.Start();
            try
            {
                if (itemName == null)
                {
                    throw new ArgumentNullException(nameof(itemName));
                }

                var response = await _restClient.GetAsync(Id.ResourceGroupName, itemName, expand, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new Item(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Filters the list of Item for this resource group represented as generic resources. </summary>
        /// <param name="nameFilter"> The filter used in this operation. </param>
        /// <param name="top"> The number of results to return. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of resource that may take multiple service requests to iterate over. </returns>
        public Pageable<GenericResource> ListAsGenericResource(string nameFilter, int? top = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ItemContainer.ListAsGenericResource");
            scope.Start();
            try
            {
                var filters = new ResourceFilterCollection(ItemOperations.ResourceType);
                filters.SubstringFilter = nameFilter;
                return ResourceListOperations.ListAtContext(Parent as ResourceGroupOperations, filters, top, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Filters the list of Item for this resource group represented as generic resources. </summary>
        /// <param name="nameFilter"> The filter used in this operation. </param>
        /// <param name="top"> The number of results to return. </param>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> An async collection of resource that may take multiple service requests to iterate over. </returns>
        public AsyncPageable<GenericResource> ListAsGenericResourceAsync(string nameFilter, int? top = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ItemContainer.ListAsGenericResource");
            scope.Start();
            try
            {
                var filters = new ResourceFilterCollection(ItemOperations.ResourceType);
                filters.SubstringFilter = nameFilter;
                return ResourceListOperations.ListAtContextAsync(Parent as ResourceGroupOperations, filters, top, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The operation to get the run command. </summary>
        /// <param name="expand"> The expand expression to apply on the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<Item>>> ListAsync(string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ItemContainer.List");
            scope.Start();
            try
            {
                var response = await _restClient.ListAsync(Id.ResourceGroupName, expand, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value.Value.Select(data => new Item(Parent, data)).ToArray() as IReadOnlyList<Item>, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The operation to get the run command. </summary>
        /// <param name="expand"> The expand expression to apply on the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<Item>> List(string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ItemContainer.List");
            scope.Start();
            try
            {
                var response = _restClient.List(Id.ResourceGroupName, expand, cancellationToken);
                return Response.FromValue(response.Value.Value.Select(data => new Item(Parent, data)).ToArray() as IReadOnlyList<Item>, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The operation to get the run command. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="expand"> The expand expression to apply on the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        public virtual async Task<Response<IReadOnlyList<Item>>> ListBySubscriptionAsync(string resourceGroupName, string expand = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }

            using var scope = _clientDiagnostics.CreateScope("ItemContainer.ListBySubscription");
            scope.Start();
            try
            {
                var response = await _restClient.ListBySubscriptionAsync(resourceGroupName, expand, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value.Value.Select(data => new Item(Parent, data)).ToArray() as IReadOnlyList<Item>, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The operation to get the run command. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="expand"> The expand expression to apply on the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        public virtual Response<IReadOnlyList<Item>> ListBySubscription(string resourceGroupName, string expand = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }

            using var scope = _clientDiagnostics.CreateScope("ItemContainer.ListBySubscription");
            scope.Start();
            try
            {
                var response = _restClient.ListBySubscription(resourceGroupName, expand, cancellationToken);
                return Response.FromValue(response.Value.Value.Select(data => new Item(Parent, data)).ToArray() as IReadOnlyList<Item>, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // Builders.
        // public ArmBuilder<ResourceGroupResourceIdentifier, Item, ItemData> Construct() { }
    }
}
