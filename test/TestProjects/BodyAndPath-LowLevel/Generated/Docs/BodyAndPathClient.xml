<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="CreateAsync(string,global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call CreateAsync with required parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new BodyAndPathClient(credential);

var data = new {};

Response response = await client.CreateAsync("<itemName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Resets products.
</remarks>
    </member>
    <member name="Create(string,global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call Create with required parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new BodyAndPathClient(credential);

var data = new {};

Response response = client.Create("<itemName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Resets products.
</remarks>
    </member>
    <member name="CreateStreamAsync(string,global::Azure.Core.RequestContent,global::Azure.Core.ContentType,global::System.Collections.Generic.IEnumerable{string},global::Azure.RequestContext)">
<example>
This sample shows how to call CreateStreamAsync with required parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new BodyAndPathClient(credential);

var data = File.OpenRead("<filePath>");

Response response = await client.CreateStreamAsync("<itemNameStream>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateStreamAsync with all parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new BodyAndPathClient(credential);

var data = File.OpenRead("<filePath>");

Response response = await client.CreateStreamAsync("<itemNameStream>", RequestContent.Create(data), ContentType.ApplicationOctetStream, new String[]{"<excluded>"});
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Resets products.
</remarks>
    </member>
    <member name="CreateStream(string,global::Azure.Core.RequestContent,global::Azure.Core.ContentType,global::System.Collections.Generic.IEnumerable{string},global::Azure.RequestContext)">
<example>
This sample shows how to call CreateStream with required parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new BodyAndPathClient(credential);

var data = File.OpenRead("<filePath>");

Response response = client.CreateStream("<itemNameStream>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateStream with all parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new BodyAndPathClient(credential);

var data = File.OpenRead("<filePath>");

Response response = client.CreateStream("<itemNameStream>", RequestContent.Create(data), ContentType.ApplicationOctetStream, new String[]{"<excluded>"});
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Resets products.
</remarks>
    </member>
    <member name="CreateEnumAsync(string,string,global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call CreateEnumAsync with required parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new BodyAndPathClient(credential);

var data = new {};

Response response = await client.CreateEnumAsync("<enumName1>", "<enumName2>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Resets products.
</remarks>
    </member>
    <member name="CreateEnum(string,string,global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call CreateEnum with required parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new BodyAndPathClient(credential);

var data = new {};

Response response = client.CreateEnum("<enumName1>", "<enumName2>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Resets products.
</remarks>
    </member>
    <member name="GetBodyAndPathsAsync(global::Azure.RequestContext)">
<example>
This sample shows how to call GetBodyAndPathsAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new BodyAndPathClient(credential);

Response response = await client.GetBodyAndPathsAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
</example>
<remarks>
List all.
</remarks>
    </member>
    <member name="GetBodyAndPaths(global::Azure.RequestContext)">
<example>
This sample shows how to call GetBodyAndPaths and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new BodyAndPathClient(credential);

Response response = client.GetBodyAndPaths();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
</example>
<remarks>
List all.
</remarks>
    </member>
    <member name="GetItemsAsync(global::Azure.RequestContext)">
<example>
This sample shows how to call GetItemsAsync and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new BodyAndPathClient(credential);

Response response = await client.GetItemsAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
</example>
<remarks>
List all products.
</remarks>
    </member>
    <member name="GetItems(global::Azure.RequestContext)">
<example>
This sample shows how to call GetItems and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new BodyAndPathClient(credential);

Response response = client.GetItems();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
</example>
<remarks>
List all products.
</remarks>
    </member>
    <member name="UpdateAsync(string,string,string,global::Azure.Core.RequestContent,string,string,global::Azure.RequestContext)">
<example>
This sample shows how to call UpdateAsync with required parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new BodyAndPathClient(credential);

var data = new {};

Response response = await client.UpdateAsync("<item3>", "<item2>", "<item4>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateAsync with all parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new BodyAndPathClient(credential);

var data = new {};

Response response = await client.UpdateAsync("<item3>", "<item2>", "<item4>", RequestContent.Create(data), "<item5>", <value>);
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Update(string,string,string,global::Azure.Core.RequestContent,string,string,global::Azure.RequestContext)">
<example>
This sample shows how to call Update with required parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new BodyAndPathClient(credential);

var data = new {};

Response response = client.Update("<item3>", "<item2>", "<item4>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call Update with all parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var client = new BodyAndPathClient(credential);

var data = new {};

Response response = client.Update("<item3>", "<item2>", "<item4>", RequestContent.Create(data), "<item5>", <value>);
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
  </members>
</doc>