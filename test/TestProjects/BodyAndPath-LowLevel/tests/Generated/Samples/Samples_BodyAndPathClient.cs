// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace BodyAndPath_LowLevel.Samples
{
    public partial class Samples_BodyAndPathClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_create_Create_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = new BodyAndPathClient(credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.Create("<itemName>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_create_Create_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = new BodyAndPathClient(credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateAsync("<itemName>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_create_Create_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = new BodyAndPathClient(credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.Create("<itemName>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_create_Create_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = new BodyAndPathClient(credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateAsync("<itemName>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_createStream_CreateStream_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = new BodyAndPathClient(credential);

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Response response = client.CreateStream("<itemNameStream>", content, new ContentType("application/json"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_createStream_CreateStream_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = new BodyAndPathClient(credential);

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Response response = await client.CreateStreamAsync("<itemNameStream>", content, new ContentType("application/json"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_createStream_CreateStream_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = new BodyAndPathClient(credential);

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Response response = client.CreateStream("<itemNameStream>", content, new ContentType("application/json"), excluded: new string[] { "<excluded>" });

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_createStream_CreateStream_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = new BodyAndPathClient(credential);

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Response response = await client.CreateStreamAsync("<itemNameStream>", content, new ContentType("application/json"), excluded: new string[] { "<excluded>" });

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_createEnum_CreateEnum_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = new BodyAndPathClient(credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.CreateEnum("current", "latest", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_createEnum_CreateEnum_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = new BodyAndPathClient(credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateEnumAsync("current", "latest", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_createEnum_CreateEnum_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = new BodyAndPathClient(credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.CreateEnum("current", "latest", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_createEnum_CreateEnum_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = new BodyAndPathClient(credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateEnumAsync("current", "latest", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_list_GetLists_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = new BodyAndPathClient(credential);

            Response response = client.GetLists(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_list_GetLists_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = new BodyAndPathClient(credential);

            Response response = await client.GetListsAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_list_GetLists_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = new BodyAndPathClient(credential);

            Response response = client.GetLists(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_list_GetLists_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = new BodyAndPathClient(credential);

            Response response = await client.GetListsAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_listItems_GetItems_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = new BodyAndPathClient(credential);

            Response response = client.GetItems(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_listItems_GetItems_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = new BodyAndPathClient(credential);

            Response response = await client.GetItemsAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_listItems_GetItems_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = new BodyAndPathClient(credential);

            Response response = client.GetItems(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_listItems_GetItems_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = new BodyAndPathClient(credential);

            Response response = await client.GetItemsAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_update_Update_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = new BodyAndPathClient(credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.Update("<item3>", "<item2>", "value", "<item4>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_update_Update_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = new BodyAndPathClient(credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateAsync("<item3>", "<item2>", "value", "<item4>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_update_Update_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = new BodyAndPathClient(credential);

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["invalid-int-name"] = 1234
            });
            Response response = client.Update("<item3>", "<item2>", "value", "<item4>", content, item5: "<item5>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_update_Update_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = new BodyAndPathClient(credential);

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["invalid-int-name"] = 1234
            });
            Response response = await client.UpdateAsync("<item3>", "<item2>", "value", "<item4>", content, item5: "<item5>");

            Console.WriteLine(response.Status);
        }
    }
}
