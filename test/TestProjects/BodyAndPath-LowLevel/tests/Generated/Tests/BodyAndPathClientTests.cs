// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using BodyAndPath_LowLevel;
using NUnit.Framework;

namespace BodyAndPath_LowLevel.Tests
{
    public class BodyAndPathClientTests : BodyAndPath_LowLevelTestBase
    {
        public BodyAndPathClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        public async Task Create_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BodyAndPathClient client = CreateBodyAndPathClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateAsync("<itemName>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Create_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BodyAndPathClient client = CreateBodyAndPathClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateAsync("<itemName>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task CreateStream_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BodyAndPathClient client = CreateBodyAndPathClient(credential, endpoint);

            RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Response response = await client.CreateStreamAsync("<itemNameStream>", content, new ContentType("application/json"));
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task CreateStream_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BodyAndPathClient client = CreateBodyAndPathClient(credential, endpoint);

            RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Response response = await client.CreateStreamAsync("<itemNameStream>", content, new ContentType("application/json"), excluded: new List<string>()
{
"<excluded>"
});
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task CreateEnum_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BodyAndPathClient client = CreateBodyAndPathClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateEnumAsync("current", "latest", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task CreateEnum_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BodyAndPathClient client = CreateBodyAndPathClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateEnumAsync("current", "latest", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task GetBodyAndPaths_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BodyAndPathClient client = CreateBodyAndPathClient(credential, endpoint);

            Response response = await client.GetBodyAndPathsAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        public async Task GetBodyAndPaths_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BodyAndPathClient client = CreateBodyAndPathClient(credential, endpoint);

            Response response = await client.GetBodyAndPathsAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        public async Task GetItems_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BodyAndPathClient client = CreateBodyAndPathClient(credential, endpoint);

            Response response = await client.GetItemsAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        public async Task GetItems_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BodyAndPathClient client = CreateBodyAndPathClient(credential, endpoint);

            Response response = await client.GetItemsAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].ToString());
        }

        [Test]
        public async Task Update_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BodyAndPathClient client = CreateBodyAndPathClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateAsync("<item3>", "<item2>", "value", "<item4>", content);
            Console.WriteLine(response.Status);
        }

        [Test]
        public async Task Update_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            BodyAndPathClient client = CreateBodyAndPathClient(credential, endpoint);

            RequestContent content = RequestContent.Create(new Dictionary<string, object>()
            {
                ["invalid-int-name"] = 1234,
            });
            Response response = await client.UpdateAsync("<item3>", "<item2>", "value", "<item4>", content, item5: "<item5>");
            Console.WriteLine(response.Status);
        }
    }
}
