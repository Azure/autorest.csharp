// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace BodyAndPath_LowLevel.Tests
{
    public partial class BodyAndPathClientTests : BodyAndPath_LowLevelTestBase
    {
        public BodyAndPathClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task create_Create_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = CreateBodyAndPathClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateAsync("<itemName>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task create_Create_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = CreateBodyAndPathClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateAsync("<itemName>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task createStream_CreateStream_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = CreateBodyAndPathClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Response response = await client.CreateStreamAsync("<itemNameStream>", content, new ContentType("application/json"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task createStream_CreateStream_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = CreateBodyAndPathClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Response response = await client.CreateStreamAsync("<itemNameStream>", content, new ContentType("application/json"), excluded: new string[] { "<excluded>" });
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task createEnum_CreateEnum_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = CreateBodyAndPathClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateEnumAsync("current", "latest", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task createEnum_CreateEnum_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = CreateBodyAndPathClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateEnumAsync("current", "latest", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task list_GetLists_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = CreateBodyAndPathClient(endpoint, credential);

            Response response = await client.GetListsAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task list_GetLists_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = CreateBodyAndPathClient(endpoint, credential);

            Response response = await client.GetListsAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task listItems_GetItems_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = CreateBodyAndPathClient(endpoint, credential);

            Response response = await client.GetItemsAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task listItems_GetItems_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = CreateBodyAndPathClient(endpoint, credential);

            Response response = await client.GetItemsAsync(null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task update_Update_ShortVersion()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = CreateBodyAndPathClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateAsync("<item3>", "<item2>", "value", "<item4>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task update_Update_AllParameters()
        {
            Uri endpoint = null;
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            BodyAndPathClient client = CreateBodyAndPathClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new Dictionary<string, object>
            {
                ["invalid-int-name"] = 1234
            });
            Response response = await client.UpdateAsync("<item3>", "<item2>", "value", "<item4>", content, item5: "<item5>");
        }
    }
}
