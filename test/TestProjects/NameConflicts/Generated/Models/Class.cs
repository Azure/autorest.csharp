// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace NameConflicts.Models
{
    /// <summary> The Class. </summary>
    public partial class Class
    {
        /// <summary> Initializes a new instance of Class. </summary>
        public Class()
        {
        }

        /// <summary> Initializes a new instance of Class. </summary>
        /// <param name="abstract"> . </param>
        /// <param name="add"> . </param>
        /// <param name="alias"> . </param>
        /// <param name="as"> . </param>
        /// <param name="ascending"> . </param>
        /// <param name="async"> . </param>
        /// <param name="await"> . </param>
        /// <param name="base"> . </param>
        /// <param name="bool"> . </param>
        /// <param name="break"> . </param>
        /// <param name="by"> . </param>
        /// <param name="byte"> . </param>
        /// <param name="catch"> . </param>
        /// <param name="char"> . </param>
        /// <param name="checked"> . </param>
        /// <param name="const"> . </param>
        /// <param name="continue"> . </param>
        /// <param name="decimal"> . </param>
        /// <param name="default"> . </param>
        /// <param name="delegate"> . </param>
        /// <param name="descending"> . </param>
        /// <param name="do"> . </param>
        /// <param name="double"> . </param>
        /// <param name="dynamic"> . </param>
        /// <param name="else"> . </param>
        /// <param name="enum"> . </param>
        /// <param name="event"> . </param>
        /// <param name="explicit"> . </param>
        /// <param name="extern"> . </param>
        /// <param name="false"> . </param>
        /// <param name="finally"> . </param>
        /// <param name="fixed"> . </param>
        /// <param name="float"> . </param>
        /// <param name="for"> . </param>
        /// <param name="foreach"> . </param>
        /// <param name="from"> . </param>
        /// <param name="get"> . </param>
        /// <param name="global"> . </param>
        /// <param name="goto"> . </param>
        /// <param name="group"> . </param>
        /// <param name="if"> . </param>
        /// <param name="implicit"> . </param>
        /// <param name="in"> . </param>
        /// <param name="int"> . </param>
        /// <param name="interface"> . </param>
        /// <param name="internal"> . </param>
        /// <param name="into"> . </param>
        /// <param name="is"> . </param>
        /// <param name="join"> . </param>
        /// <param name="let"> . </param>
        /// <param name="lock"> . </param>
        /// <param name="long"> . </param>
        /// <param name="nameof"> . </param>
        /// <param name="namespace"> . </param>
        /// <param name="new"> . </param>
        /// <param name="nullProperty"> . </param>
        /// <param name="object"> . </param>
        /// <param name="on"> . </param>
        /// <param name="operator"> . </param>
        /// <param name="orderby"> . </param>
        /// <param name="out"> . </param>
        /// <param name="override"> . </param>
        /// <param name="params"> . </param>
        /// <param name="partial"> . </param>
        /// <param name="private"> . </param>
        /// <param name="protected"> . </param>
        /// <param name="public"> . </param>
        /// <param name="readonly"> . </param>
        /// <param name="ref"> . </param>
        /// <param name="remove"> . </param>
        /// <param name="return"> . </param>
        /// <param name="sbyte"> . </param>
        /// <param name="sealed"> . </param>
        /// <param name="select"> . </param>
        /// <param name="set"> . </param>
        /// <param name="short"> . </param>
        /// <param name="sizeof"> . </param>
        /// <param name="stackalloc"> . </param>
        /// <param name="static"> . </param>
        /// <param name="string"> . </param>
        /// <param name="struct"> . </param>
        /// <param name="switch"> . </param>
        /// <param name="this"> . </param>
        /// <param name="throw"> . </param>
        /// <param name="true"> . </param>
        /// <param name="try"> . </param>
        /// <param name="typeof"> . </param>
        /// <param name="uint"> . </param>
        /// <param name="ulong"> . </param>
        /// <param name="unchecked"> . </param>
        /// <param name="unmanaged"> . </param>
        /// <param name="unsafe"> . </param>
        /// <param name="ushort"> . </param>
        /// <param name="using"> . </param>
        /// <param name="value"> . </param>
        /// <param name="var"> . </param>
        /// <param name="virtual"> . </param>
        /// <param name="void"> . </param>
        /// <param name="volatile"> . </param>
        /// <param name="when"> . </param>
        /// <param name="where"> . </param>
        /// <param name="while"> . </param>
        /// <param name="yield"> . </param>
        /// <param name="system"> . </param>
        internal Class(string @abstract, string @add, string @alias, string @as, string @ascending, string @async, string @await, string @base, string @bool, string @break, string @by, string @byte, string @catch, string @char, string @checked, string @const, string @continue, string @decimal, string @default, string @delegate, string @descending, string @do, string @double, string @dynamic, string @else, string @enum, string @event, string @explicit, string @extern, string @false, string @finally, string @fixed, string @float, string @for, string @foreach, string @from, string @get, string @global, string @goto, string group, string @if, string @implicit, string @in, string @int, string @interface, string @internal, string @into, string @is, string @join, string @let, string @lock, string @long, string @nameof, string @namespace, string @new, string nullProperty, string @object, string @on, string @operator, string orderby, string @out, string @override, string @params, string @partial, string @private, string @protected, string @public, string @readonly, string @ref, string @remove, string @return, string @sbyte, string @sealed, string select, string @set, string @short, string @sizeof, string @stackalloc, string @static, string @string, string @struct, string @switch, string @this, string @throw, string @true, string @try, string @typeof, string @uint, string @ulong, string @unchecked, string @unmanaged, string @unsafe, string @ushort, string @using, string value, string @var, string @virtual, string @void, string @volatile, string @when, string @where, string @while, string @yield, SystemEnum? system)
        {
            Abstract = @abstract;
            Add = @add;
            Alias = @alias;
            As = @as;
            Ascending = @ascending;
            Async = @async;
            Await = @await;
            Base = @base;
            Bool = @bool;
            Break = @break;
            By = @by;
            Byte = @byte;
            Catch = @catch;
            Char = @char;
            Checked = @checked;
            Const = @const;
            Continue = @continue;
            Decimal = @decimal;
            Default = @default;
            Delegate = @delegate;
            Descending = @descending;
            Do = @do;
            Double = @double;
            Dynamic = @dynamic;
            Else = @else;
            Enum = @enum;
            Event = @event;
            Explicit = @explicit;
            Extern = @extern;
            False = @false;
            Finally = @finally;
            Fixed = @fixed;
            Float = @float;
            For = @for;
            Foreach = @foreach;
            From = @from;
            Get = @get;
            Global = @global;
            Goto = @goto;
            Group = group;
            If = @if;
            Implicit = @implicit;
            In = @in;
            Int = @int;
            Interface = @interface;
            Internal = @internal;
            Into = @into;
            Is = @is;
            Join = @join;
            Let = @let;
            Lock = @lock;
            Long = @long;
            Nameof = @nameof;
            Namespace = @namespace;
            New = @new;
            NullProperty = nullProperty;
            Object = @object;
            On = @on;
            Operator = @operator;
            Orderby = orderby;
            Out = @out;
            Override = @override;
            Params = @params;
            Partial = @partial;
            Private = @private;
            Protected = @protected;
            Public = @public;
            Readonly = @readonly;
            Ref = @ref;
            Remove = @remove;
            Return = @return;
            Sbyte = @sbyte;
            Sealed = @sealed;
            Select = select;
            Set = @set;
            Short = @short;
            Sizeof = @sizeof;
            Stackalloc = @stackalloc;
            Static = @static;
            String = @string;
            Struct = @struct;
            Switch = @switch;
            This = @this;
            Throw = @throw;
            True = @true;
            Try = @try;
            Typeof = @typeof;
            Uint = @uint;
            Ulong = @ulong;
            Unchecked = @unchecked;
            Unmanaged = @unmanaged;
            Unsafe = @unsafe;
            Ushort = @ushort;
            Using = @using;
            Value = value;
            Var = @var;
            Virtual = @virtual;
            Void = @void;
            Volatile = @volatile;
            When = @when;
            Where = @where;
            While = @while;
            Yield = @yield;
            System = system;
        }

        public string Abstract { get; set; }
        public string Add { get; set; }
        public string Alias { get; set; }
        public string As { get; set; }
        public string Ascending { get; set; }
        public string Async { get; set; }
        public string Await { get; set; }
        public string Base { get; set; }
        public string Bool { get; set; }
        public string Break { get; set; }
        public string By { get; set; }
        public string Byte { get; set; }
        public string Catch { get; set; }
        public string Char { get; set; }
        public string Checked { get; set; }
        public string Const { get; set; }
        public string Continue { get; set; }
        public string Decimal { get; set; }
        public string Default { get; set; }
        public string Delegate { get; set; }
        public string Descending { get; set; }
        public string Do { get; set; }
        public string Double { get; set; }
        public string Dynamic { get; set; }
        public string Else { get; set; }
        public string Enum { get; set; }
        public string Event { get; set; }
        public string Explicit { get; set; }
        public string Extern { get; set; }
        public string False { get; set; }
        public string Finally { get; set; }
        public string Fixed { get; set; }
        public string Float { get; set; }
        public string For { get; set; }
        public string Foreach { get; set; }
        public string From { get; set; }
        public string Get { get; set; }
        public string Global { get; set; }
        public string Goto { get; set; }
        public string Group { get; set; }
        public string If { get; set; }
        public string Implicit { get; set; }
        public string In { get; set; }
        public string Int { get; set; }
        public string Interface { get; set; }
        public string Internal { get; set; }
        public string Into { get; set; }
        public string Is { get; set; }
        public string Join { get; set; }
        public string Let { get; set; }
        public string Lock { get; set; }
        public string Long { get; set; }
        public string Nameof { get; set; }
        public string Namespace { get; set; }
        public string New { get; set; }
        public string NullProperty { get; set; }
        public string Object { get; set; }
        public string On { get; set; }
        public string Operator { get; set; }
        public string Orderby { get; set; }
        public string Out { get; set; }
        public string Override { get; set; }
        public string Params { get; set; }
        public string Partial { get; set; }
        public string Private { get; set; }
        public string Protected { get; set; }
        public string Public { get; set; }
        public string Readonly { get; set; }
        public string Ref { get; set; }
        public string Remove { get; set; }
        public string Return { get; set; }
        public string Sbyte { get; set; }
        public string Sealed { get; set; }
        public string Select { get; set; }
        public string Set { get; set; }
        public string Short { get; set; }
        public string Sizeof { get; set; }
        public string Stackalloc { get; set; }
        public string Static { get; set; }
        public string String { get; set; }
        public string Struct { get; set; }
        public string Switch { get; set; }
        public string This { get; set; }
        public string Throw { get; set; }
        public string True { get; set; }
        public string Try { get; set; }
        public string Typeof { get; set; }
        public string Uint { get; set; }
        public string Ulong { get; set; }
        public string Unchecked { get; set; }
        public string Unmanaged { get; set; }
        public string Unsafe { get; set; }
        public string Ushort { get; set; }
        public string Using { get; set; }
        public string Value { get; set; }
        public string Var { get; set; }
        public string Virtual { get; set; }
        public string Void { get; set; }
        public string Volatile { get; set; }
        public string When { get; set; }
        public string Where { get; set; }
        public string While { get; set; }
        public string Yield { get; set; }
        public SystemEnum? System { get; set; }
    }
}
