// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace NameConflicts.Models
{
    public partial class Class : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Abstract))
            {
                writer.WritePropertyName("abstract");
                writer.WriteStringValue(Abstract);
            }
            if (Optional.IsDefined(Add))
            {
                writer.WritePropertyName("add");
                writer.WriteStringValue(Add);
            }
            if (Optional.IsDefined(Alias))
            {
                writer.WritePropertyName("alias");
                writer.WriteStringValue(Alias);
            }
            if (Optional.IsDefined(As))
            {
                writer.WritePropertyName("as");
                writer.WriteStringValue(As);
            }
            if (Optional.IsDefined(Ascending))
            {
                writer.WritePropertyName("ascending");
                writer.WriteStringValue(Ascending);
            }
            if (Optional.IsDefined(Async))
            {
                writer.WritePropertyName("async");
                writer.WriteStringValue(Async);
            }
            if (Optional.IsDefined(Await))
            {
                writer.WritePropertyName("await");
                writer.WriteStringValue(Await);
            }
            if (Optional.IsDefined(Base))
            {
                writer.WritePropertyName("base");
                writer.WriteStringValue(Base);
            }
            if (Optional.IsDefined(Bool))
            {
                writer.WritePropertyName("bool");
                writer.WriteStringValue(Bool);
            }
            if (Optional.IsDefined(Break))
            {
                writer.WritePropertyName("break");
                writer.WriteStringValue(Break);
            }
            if (Optional.IsDefined(By))
            {
                writer.WritePropertyName("by");
                writer.WriteStringValue(By);
            }
            if (Optional.IsDefined(Byte))
            {
                writer.WritePropertyName("byte");
                writer.WriteStringValue(Byte);
            }
            if (Optional.IsDefined(Catch))
            {
                writer.WritePropertyName("catch");
                writer.WriteStringValue(Catch);
            }
            if (Optional.IsDefined(Char))
            {
                writer.WritePropertyName("char");
                writer.WriteStringValue(Char);
            }
            if (Optional.IsDefined(Checked))
            {
                writer.WritePropertyName("checked");
                writer.WriteStringValue(Checked);
            }
            if (Optional.IsDefined(Const))
            {
                writer.WritePropertyName("const");
                writer.WriteStringValue(Const);
            }
            if (Optional.IsDefined(Continue))
            {
                writer.WritePropertyName("continue");
                writer.WriteStringValue(Continue);
            }
            if (Optional.IsDefined(ClassValue))
            {
                writer.WritePropertyName("class");
                writer.WriteStringValue(ClassValue);
            }
            if (Optional.IsDefined(Decimal))
            {
                writer.WritePropertyName("decimal");
                writer.WriteStringValue(Decimal);
            }
            if (Optional.IsDefined(Default))
            {
                writer.WritePropertyName("default");
                writer.WriteStringValue(Default);
            }
            if (Optional.IsDefined(Delegate))
            {
                writer.WritePropertyName("delegate");
                writer.WriteStringValue(Delegate);
            }
            if (Optional.IsDefined(Descending))
            {
                writer.WritePropertyName("descending");
                writer.WriteStringValue(Descending);
            }
            if (Optional.IsDefined(Do))
            {
                writer.WritePropertyName("do");
                writer.WriteStringValue(Do);
            }
            if (Optional.IsDefined(Double))
            {
                writer.WritePropertyName("double");
                writer.WriteStringValue(Double);
            }
            if (Optional.IsDefined(Dynamic))
            {
                writer.WritePropertyName("dynamic");
                writer.WriteStringValue(Dynamic);
            }
            if (Optional.IsDefined(Else))
            {
                writer.WritePropertyName("else");
                writer.WriteStringValue(Else);
            }
            if (Optional.IsDefined(Enum))
            {
                writer.WritePropertyName("enum");
                writer.WriteStringValue(Enum);
            }
            if (Optional.IsDefined(Event))
            {
                writer.WritePropertyName("event");
                writer.WriteStringValue(Event);
            }
            if (Optional.IsDefined(Explicit))
            {
                writer.WritePropertyName("explicit");
                writer.WriteStringValue(Explicit);
            }
            if (Optional.IsDefined(Extern))
            {
                writer.WritePropertyName("extern");
                writer.WriteStringValue(Extern);
            }
            if (Optional.IsDefined(False))
            {
                writer.WritePropertyName("false");
                writer.WriteStringValue(False);
            }
            if (Optional.IsDefined(Finally))
            {
                writer.WritePropertyName("finally");
                writer.WriteStringValue(Finally);
            }
            if (Optional.IsDefined(Fixed))
            {
                writer.WritePropertyName("fixed");
                writer.WriteStringValue(Fixed);
            }
            if (Optional.IsDefined(Float))
            {
                writer.WritePropertyName("float");
                writer.WriteStringValue(Float);
            }
            if (Optional.IsDefined(For))
            {
                writer.WritePropertyName("for");
                writer.WriteStringValue(For);
            }
            if (Optional.IsDefined(Foreach))
            {
                writer.WritePropertyName("foreach");
                writer.WriteStringValue(Foreach);
            }
            if (Optional.IsDefined(From))
            {
                writer.WritePropertyName("from");
                writer.WriteStringValue(From);
            }
            if (Optional.IsDefined(Get))
            {
                writer.WritePropertyName("get");
                writer.WriteStringValue(Get);
            }
            if (Optional.IsDefined(Global))
            {
                writer.WritePropertyName("global");
                writer.WriteStringValue(Global);
            }
            if (Optional.IsDefined(Goto))
            {
                writer.WritePropertyName("goto");
                writer.WriteStringValue(Goto);
            }
            if (Optional.IsDefined(Group))
            {
                writer.WritePropertyName("group");
                writer.WriteStringValue(Group);
            }
            if (Optional.IsDefined(If))
            {
                writer.WritePropertyName("if");
                writer.WriteStringValue(If);
            }
            if (Optional.IsDefined(Implicit))
            {
                writer.WritePropertyName("implicit");
                writer.WriteStringValue(Implicit);
            }
            if (Optional.IsDefined(In))
            {
                writer.WritePropertyName("in");
                writer.WriteStringValue(In);
            }
            if (Optional.IsDefined(Int))
            {
                writer.WritePropertyName("int");
                writer.WriteStringValue(Int);
            }
            if (Optional.IsDefined(Interface))
            {
                writer.WritePropertyName("interface");
                writer.WriteStringValue(Interface);
            }
            if (Optional.IsDefined(Internal))
            {
                writer.WritePropertyName("internal");
                writer.WriteStringValue(Internal);
            }
            if (Optional.IsDefined(Into))
            {
                writer.WritePropertyName("into");
                writer.WriteStringValue(Into);
            }
            if (Optional.IsDefined(Is))
            {
                writer.WritePropertyName("is");
                writer.WriteStringValue(Is);
            }
            if (Optional.IsDefined(Join))
            {
                writer.WritePropertyName("join");
                writer.WriteStringValue(Join);
            }
            if (Optional.IsDefined(Let))
            {
                writer.WritePropertyName("let");
                writer.WriteStringValue(Let);
            }
            if (Optional.IsDefined(Lock))
            {
                writer.WritePropertyName("lock");
                writer.WriteStringValue(Lock);
            }
            if (Optional.IsDefined(Long))
            {
                writer.WritePropertyName("long");
                writer.WriteStringValue(Long);
            }
            if (Optional.IsDefined(Nameof))
            {
                writer.WritePropertyName("nameof");
                writer.WriteStringValue(Nameof);
            }
            if (Optional.IsDefined(Namespace))
            {
                writer.WritePropertyName("namespace");
                writer.WriteStringValue(Namespace);
            }
            if (Optional.IsDefined(New))
            {
                writer.WritePropertyName("new");
                writer.WriteStringValue(New);
            }
            if (Optional.IsDefined(NullProperty))
            {
                writer.WritePropertyName("null");
                writer.WriteStringValue(NullProperty);
            }
            if (Optional.IsDefined(Object))
            {
                writer.WritePropertyName("object");
                writer.WriteStringValue(Object);
            }
            if (Optional.IsDefined(On))
            {
                writer.WritePropertyName("on");
                writer.WriteStringValue(On);
            }
            if (Optional.IsDefined(Operator))
            {
                writer.WritePropertyName("operator");
                writer.WriteStringValue(Operator);
            }
            if (Optional.IsDefined(Orderby))
            {
                writer.WritePropertyName("orderby");
                writer.WriteStringValue(Orderby);
            }
            if (Optional.IsDefined(Out))
            {
                writer.WritePropertyName("out");
                writer.WriteStringValue(Out);
            }
            if (Optional.IsDefined(Override))
            {
                writer.WritePropertyName("override");
                writer.WriteStringValue(Override);
            }
            if (Optional.IsDefined(Params))
            {
                writer.WritePropertyName("params");
                writer.WriteStringValue(Params);
            }
            if (Optional.IsDefined(Partial))
            {
                writer.WritePropertyName("partial");
                writer.WriteStringValue(Partial);
            }
            if (Optional.IsDefined(Private))
            {
                writer.WritePropertyName("private");
                writer.WriteStringValue(Private);
            }
            if (Optional.IsDefined(Protected))
            {
                writer.WritePropertyName("protected");
                writer.WriteStringValue(Protected);
            }
            if (Optional.IsDefined(Public))
            {
                writer.WritePropertyName("public");
                writer.WriteStringValue(Public);
            }
            if (Optional.IsDefined(Readonly))
            {
                writer.WritePropertyName("readonly");
                writer.WriteStringValue(Readonly);
            }
            if (Optional.IsDefined(Ref))
            {
                writer.WritePropertyName("ref");
                writer.WriteStringValue(Ref);
            }
            if (Optional.IsDefined(Remove))
            {
                writer.WritePropertyName("remove");
                writer.WriteStringValue(Remove);
            }
            if (Optional.IsDefined(Return))
            {
                writer.WritePropertyName("return");
                writer.WriteStringValue(Return);
            }
            if (Optional.IsDefined(Sbyte))
            {
                writer.WritePropertyName("sbyte");
                writer.WriteStringValue(Sbyte);
            }
            if (Optional.IsDefined(Sealed))
            {
                writer.WritePropertyName("sealed");
                writer.WriteStringValue(Sealed);
            }
            if (Optional.IsDefined(Select))
            {
                writer.WritePropertyName("select");
                writer.WriteStringValue(Select);
            }
            if (Optional.IsDefined(Set))
            {
                writer.WritePropertyName("set");
                writer.WriteStringValue(Set);
            }
            if (Optional.IsDefined(Short))
            {
                writer.WritePropertyName("short");
                writer.WriteStringValue(Short);
            }
            if (Optional.IsDefined(Sizeof))
            {
                writer.WritePropertyName("sizeof");
                writer.WriteStringValue(Sizeof);
            }
            if (Optional.IsDefined(Stackalloc))
            {
                writer.WritePropertyName("stackalloc");
                writer.WriteStringValue(Stackalloc);
            }
            if (Optional.IsDefined(Static))
            {
                writer.WritePropertyName("static");
                writer.WriteStringValue(Static);
            }
            if (Optional.IsDefined(String))
            {
                writer.WritePropertyName("string");
                writer.WriteStringValue(String);
            }
            if (Optional.IsDefined(Struct))
            {
                writer.WritePropertyName("struct");
                writer.WriteStringValue(Struct);
            }
            if (Optional.IsDefined(Switch))
            {
                writer.WritePropertyName("switch");
                writer.WriteStringValue(Switch);
            }
            if (Optional.IsDefined(This))
            {
                writer.WritePropertyName("this");
                writer.WriteStringValue(This);
            }
            if (Optional.IsDefined(Throw))
            {
                writer.WritePropertyName("throw");
                writer.WriteStringValue(Throw);
            }
            if (Optional.IsDefined(True))
            {
                writer.WritePropertyName("true");
                writer.WriteStringValue(True);
            }
            if (Optional.IsDefined(Try))
            {
                writer.WritePropertyName("try");
                writer.WriteStringValue(Try);
            }
            if (Optional.IsDefined(Typeof))
            {
                writer.WritePropertyName("typeof");
                writer.WriteStringValue(Typeof);
            }
            if (Optional.IsDefined(Uint))
            {
                writer.WritePropertyName("uint");
                writer.WriteStringValue(Uint);
            }
            if (Optional.IsDefined(Ulong))
            {
                writer.WritePropertyName("ulong");
                writer.WriteStringValue(Ulong);
            }
            if (Optional.IsDefined(Unchecked))
            {
                writer.WritePropertyName("unchecked");
                writer.WriteStringValue(Unchecked);
            }
            if (Optional.IsDefined(Unmanaged))
            {
                writer.WritePropertyName("unmanaged");
                writer.WriteStringValue(Unmanaged);
            }
            if (Optional.IsDefined(Unsafe))
            {
                writer.WritePropertyName("unsafe");
                writer.WriteStringValue(Unsafe);
            }
            if (Optional.IsDefined(Ushort))
            {
                writer.WritePropertyName("ushort");
                writer.WriteStringValue(Ushort);
            }
            if (Optional.IsDefined(Using))
            {
                writer.WritePropertyName("using");
                writer.WriteStringValue(Using);
            }
            if (Optional.IsDefined(Value))
            {
                writer.WritePropertyName("value");
                writer.WriteStringValue(Value);
            }
            if (Optional.IsDefined(Var))
            {
                writer.WritePropertyName("var");
                writer.WriteStringValue(Var);
            }
            if (Optional.IsDefined(Virtual))
            {
                writer.WritePropertyName("virtual");
                writer.WriteStringValue(Virtual);
            }
            if (Optional.IsDefined(Void))
            {
                writer.WritePropertyName("void");
                writer.WriteStringValue(Void);
            }
            if (Optional.IsDefined(Volatile))
            {
                writer.WritePropertyName("volatile");
                writer.WriteStringValue(Volatile);
            }
            if (Optional.IsDefined(When))
            {
                writer.WritePropertyName("when");
                writer.WriteStringValue(When);
            }
            if (Optional.IsDefined(Where))
            {
                writer.WritePropertyName("where");
                writer.WriteStringValue(Where);
            }
            if (Optional.IsDefined(While))
            {
                writer.WritePropertyName("while");
                writer.WriteStringValue(While);
            }
            if (Optional.IsDefined(Yield))
            {
                writer.WritePropertyName("yield");
                writer.WriteStringValue(Yield);
            }
            if (Optional.IsDefined(System))
            {
                writer.WritePropertyName("System");
                writer.WriteStringValue(System.Value.ToString());
            }
            if (Optional.IsDefined(ToStringValue))
            {
                writer.WritePropertyName("ToString");
                writer.WriteStringValue(ToStringValue);
            }
            if (Optional.IsDefined(EqualsValue))
            {
                writer.WritePropertyName("Equals");
                writer.WriteStringValue(EqualsValue);
            }
            if (Optional.IsDefined(GetHashCodeValue))
            {
                writer.WritePropertyName("GetHashCode");
                writer.WriteStringValue(GetHashCodeValue);
            }
            writer.WriteEndObject();
        }

        internal static Class DeserializeClass(JsonElement element)
        {
            Optional<string> @abstract = default;
            Optional<string> @add = default;
            Optional<string> @alias = default;
            Optional<string> @as = default;
            Optional<string> @ascending = default;
            Optional<string> @async = default;
            Optional<string> @await = default;
            Optional<string> @base = default;
            Optional<string> @bool = default;
            Optional<string> @break = default;
            Optional<string> @by = default;
            Optional<string> @byte = default;
            Optional<string> @catch = default;
            Optional<string> @char = default;
            Optional<string> @checked = default;
            Optional<string> @const = default;
            Optional<string> @continue = default;
            Optional<string> @class = default;
            Optional<string> @decimal = default;
            Optional<string> @default = default;
            Optional<string> @delegate = default;
            Optional<string> @descending = default;
            Optional<string> @do = default;
            Optional<string> @double = default;
            Optional<string> @dynamic = default;
            Optional<string> @else = default;
            Optional<string> @enum = default;
            Optional<string> @event = default;
            Optional<string> @explicit = default;
            Optional<string> @extern = default;
            Optional<string> @false = default;
            Optional<string> @finally = default;
            Optional<string> @fixed = default;
            Optional<string> @float = default;
            Optional<string> @for = default;
            Optional<string> @foreach = default;
            Optional<string> @from = default;
            Optional<string> @get = default;
            Optional<string> @global = default;
            Optional<string> @goto = default;
            Optional<string> group = default;
            Optional<string> @if = default;
            Optional<string> @implicit = default;
            Optional<string> @in = default;
            Optional<string> @int = default;
            Optional<string> @interface = default;
            Optional<string> @internal = default;
            Optional<string> @into = default;
            Optional<string> @is = default;
            Optional<string> @join = default;
            Optional<string> @let = default;
            Optional<string> @lock = default;
            Optional<string> @long = default;
            Optional<string> @nameof = default;
            Optional<string> @namespace = default;
            Optional<string> @new = default;
            Optional<string> @null = default;
            Optional<string> @object = default;
            Optional<string> @on = default;
            Optional<string> @operator = default;
            Optional<string> orderby = default;
            Optional<string> @out = default;
            Optional<string> @override = default;
            Optional<string> @params = default;
            Optional<string> @partial = default;
            Optional<string> @private = default;
            Optional<string> @protected = default;
            Optional<string> @public = default;
            Optional<string> @readonly = default;
            Optional<string> @ref = default;
            Optional<string> @remove = default;
            Optional<string> @return = default;
            Optional<string> @sbyte = default;
            Optional<string> @sealed = default;
            Optional<string> select = default;
            Optional<string> @set = default;
            Optional<string> @short = default;
            Optional<string> @sizeof = default;
            Optional<string> @stackalloc = default;
            Optional<string> @static = default;
            Optional<string> @string = default;
            Optional<string> @struct = default;
            Optional<string> @switch = default;
            Optional<string> @this = default;
            Optional<string> @throw = default;
            Optional<string> @true = default;
            Optional<string> @try = default;
            Optional<string> @typeof = default;
            Optional<string> @uint = default;
            Optional<string> @ulong = default;
            Optional<string> @unchecked = default;
            Optional<string> @unmanaged = default;
            Optional<string> @unsafe = default;
            Optional<string> @ushort = default;
            Optional<string> @using = default;
            Optional<string> value = default;
            Optional<string> @var = default;
            Optional<string> @virtual = default;
            Optional<string> @void = default;
            Optional<string> @volatile = default;
            Optional<string> @when = default;
            Optional<string> @where = default;
            Optional<string> @while = default;
            Optional<string> @yield = default;
            Optional<SystemEnum> system = default;
            Optional<string> toString = default;
            Optional<string> @equals = default;
            Optional<string> getHashCode = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("abstract"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @abstract = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("add"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @add = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("alias"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @alias = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("as"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @as = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ascending"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @ascending = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("async"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @async = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("await"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @await = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("base"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @base = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("bool"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @bool = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("break"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @break = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("by"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @by = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("byte"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @byte = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("catch"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @catch = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("char"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @char = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("checked"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @checked = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("const"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @const = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("continue"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @continue = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("class"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @class = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("decimal"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @decimal = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("default"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @default = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("delegate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @delegate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("descending"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @descending = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("do"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @do = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("double"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @double = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dynamic"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @dynamic = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("else"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @else = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enum"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @enum = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("event"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @event = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("explicit"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @explicit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("extern"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @extern = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("false"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @false = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("finally"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @finally = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fixed"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @fixed = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("float"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @float = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("for"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @for = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("foreach"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @foreach = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("from"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @from = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("get"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @get = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("global"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @global = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("goto"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @goto = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("group"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    group = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("if"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @if = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("implicit"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @implicit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("in"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @in = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("int"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @int = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("interface"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @interface = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("internal"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @internal = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("into"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @into = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("is"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @is = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("join"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @join = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("let"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @let = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lock"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @lock = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("long"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @long = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nameof"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @nameof = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("namespace"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @namespace = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("new"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @new = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("null"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @null = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("object"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @object = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("on"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @on = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("operator"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @operator = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("orderby"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    orderby = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("out"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @out = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("override"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @override = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("params"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @params = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("partial"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @partial = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("private"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @private = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("protected"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @protected = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("public"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @public = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("readonly"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @readonly = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ref"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @ref = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("remove"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @remove = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("return"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @return = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sbyte"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @sbyte = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sealed"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @sealed = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("select"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    select = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("set"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @set = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("short"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @short = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sizeof"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @sizeof = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("stackalloc"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @stackalloc = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("static"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @static = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("string"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @string = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("struct"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @struct = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("switch"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @switch = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("this"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @this = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("throw"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @throw = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("true"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @true = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("try"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @try = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("typeof"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @typeof = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("uint"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @uint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ulong"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @ulong = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("unchecked"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @unchecked = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("unmanaged"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @unmanaged = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("unsafe"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @unsafe = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ushort"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @ushort = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("using"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @using = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("value"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    value = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("var"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @var = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("virtual"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @virtual = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("void"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @void = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("volatile"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @volatile = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("when"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @when = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("where"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @where = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("while"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @while = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("yield"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @yield = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("System"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    system = new SystemEnum(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ToString"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    toString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Equals"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    @equals = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("GetHashCode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    getHashCode = property.Value.GetString();
                    continue;
                }
            }
            return new Class(@abstract.Value, @add.Value, @alias.Value, @as.Value, @ascending.Value, @async.Value, @await.Value, @base.Value, @bool.Value, @break.Value, @by.Value, @byte.Value, @catch.Value, @char.Value, @checked.Value, @const.Value, @continue.Value, @class.Value, @decimal.Value, @default.Value, @delegate.Value, @descending.Value, @do.Value, @double.Value, @dynamic.Value, @else.Value, @enum.Value, @event.Value, @explicit.Value, @extern.Value, @false.Value, @finally.Value, @fixed.Value, @float.Value, @for.Value, @foreach.Value, @from.Value, @get.Value, @global.Value, @goto.Value, group.Value, @if.Value, @implicit.Value, @in.Value, @int.Value, @interface.Value, @internal.Value, @into.Value, @is.Value, @join.Value, @let.Value, @lock.Value, @long.Value, @nameof.Value, @namespace.Value, @new.Value, @null.Value, @object.Value, @on.Value, @operator.Value, orderby.Value, @out.Value, @override.Value, @params.Value, @partial.Value, @private.Value, @protected.Value, @public.Value, @readonly.Value, @ref.Value, @remove.Value, @return.Value, @sbyte.Value, @sealed.Value, select.Value, @set.Value, @short.Value, @sizeof.Value, @stackalloc.Value, @static.Value, @string.Value, @struct.Value, @switch.Value, @this.Value, @throw.Value, @true.Value, @try.Value, @typeof.Value, @uint.Value, @ulong.Value, @unchecked.Value, @unmanaged.Value, @unsafe.Value, @ushort.Value, @using.Value, value.Value, @var.Value, @virtual.Value, @void.Value, @volatile.Value, @when.Value, @where.Value, @while.Value, @yield.Value, Optional.ToNullable(system), toString.Value, @equals.Value, getHashCode.Value);
        }
    }
}
