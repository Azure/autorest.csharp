// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace NameConflicts.Models
{
    public partial class Class : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Abstract != null)
            {
                writer.WritePropertyName("abstract"u8);
                writer.WriteStringValue(Abstract);
            }
            if (Add != null)
            {
                writer.WritePropertyName("add"u8);
                writer.WriteStringValue(Add);
            }
            if (Alias != null)
            {
                writer.WritePropertyName("alias"u8);
                writer.WriteStringValue(Alias);
            }
            if (As != null)
            {
                writer.WritePropertyName("as"u8);
                writer.WriteStringValue(As);
            }
            if (Ascending != null)
            {
                writer.WritePropertyName("ascending"u8);
                writer.WriteStringValue(Ascending);
            }
            if (Async != null)
            {
                writer.WritePropertyName("async"u8);
                writer.WriteStringValue(Async);
            }
            if (Await != null)
            {
                writer.WritePropertyName("await"u8);
                writer.WriteStringValue(Await);
            }
            if (Base != null)
            {
                writer.WritePropertyName("base"u8);
                writer.WriteStringValue(Base);
            }
            if (Bool != null)
            {
                writer.WritePropertyName("bool"u8);
                writer.WriteStringValue(Bool);
            }
            if (Break != null)
            {
                writer.WritePropertyName("break"u8);
                writer.WriteStringValue(Break);
            }
            if (By != null)
            {
                writer.WritePropertyName("by"u8);
                writer.WriteStringValue(By);
            }
            if (Byte != null)
            {
                writer.WritePropertyName("byte"u8);
                writer.WriteStringValue(Byte);
            }
            if (Catch != null)
            {
                writer.WritePropertyName("catch"u8);
                writer.WriteStringValue(Catch);
            }
            if (Char != null)
            {
                writer.WritePropertyName("char"u8);
                writer.WriteStringValue(Char);
            }
            if (Checked != null)
            {
                writer.WritePropertyName("checked"u8);
                writer.WriteStringValue(Checked);
            }
            if (Const != null)
            {
                writer.WritePropertyName("const"u8);
                writer.WriteStringValue(Const);
            }
            if (Continue != null)
            {
                writer.WritePropertyName("continue"u8);
                writer.WriteStringValue(Continue);
            }
            if (ClassValue != null)
            {
                writer.WritePropertyName("class"u8);
                writer.WriteStringValue(ClassValue);
            }
            if (Decimal != null)
            {
                writer.WritePropertyName("decimal"u8);
                writer.WriteStringValue(Decimal);
            }
            if (Default != null)
            {
                writer.WritePropertyName("default"u8);
                writer.WriteStringValue(Default);
            }
            if (Delegate != null)
            {
                writer.WritePropertyName("delegate"u8);
                writer.WriteStringValue(Delegate);
            }
            if (Descending != null)
            {
                writer.WritePropertyName("descending"u8);
                writer.WriteStringValue(Descending);
            }
            if (Do != null)
            {
                writer.WritePropertyName("do"u8);
                writer.WriteStringValue(Do);
            }
            if (Double != null)
            {
                writer.WritePropertyName("double"u8);
                writer.WriteStringValue(Double);
            }
            if (Dynamic != null)
            {
                writer.WritePropertyName("dynamic"u8);
                writer.WriteStringValue(Dynamic);
            }
            if (Else != null)
            {
                writer.WritePropertyName("else"u8);
                writer.WriteStringValue(Else);
            }
            if (Enum != null)
            {
                writer.WritePropertyName("enum"u8);
                writer.WriteStringValue(Enum);
            }
            if (Event != null)
            {
                writer.WritePropertyName("event"u8);
                writer.WriteStringValue(Event);
            }
            if (Explicit != null)
            {
                writer.WritePropertyName("explicit"u8);
                writer.WriteStringValue(Explicit);
            }
            if (Extern != null)
            {
                writer.WritePropertyName("extern"u8);
                writer.WriteStringValue(Extern);
            }
            if (False != null)
            {
                writer.WritePropertyName("false"u8);
                writer.WriteStringValue(False);
            }
            if (Finally != null)
            {
                writer.WritePropertyName("finally"u8);
                writer.WriteStringValue(Finally);
            }
            if (Fixed != null)
            {
                writer.WritePropertyName("fixed"u8);
                writer.WriteStringValue(Fixed);
            }
            if (Float != null)
            {
                writer.WritePropertyName("float"u8);
                writer.WriteStringValue(Float);
            }
            if (For != null)
            {
                writer.WritePropertyName("for"u8);
                writer.WriteStringValue(For);
            }
            if (Foreach != null)
            {
                writer.WritePropertyName("foreach"u8);
                writer.WriteStringValue(Foreach);
            }
            if (From != null)
            {
                writer.WritePropertyName("from"u8);
                writer.WriteStringValue(From);
            }
            if (Get != null)
            {
                writer.WritePropertyName("get"u8);
                writer.WriteStringValue(Get);
            }
            if (Global != null)
            {
                writer.WritePropertyName("global"u8);
                writer.WriteStringValue(Global);
            }
            if (Goto != null)
            {
                writer.WritePropertyName("goto"u8);
                writer.WriteStringValue(Goto);
            }
            if (Group != null)
            {
                writer.WritePropertyName("group"u8);
                writer.WriteStringValue(Group);
            }
            if (If != null)
            {
                writer.WritePropertyName("if"u8);
                writer.WriteStringValue(If);
            }
            if (Implicit != null)
            {
                writer.WritePropertyName("implicit"u8);
                writer.WriteStringValue(Implicit);
            }
            if (In != null)
            {
                writer.WritePropertyName("in"u8);
                writer.WriteStringValue(In);
            }
            if (Int != null)
            {
                writer.WritePropertyName("int"u8);
                writer.WriteStringValue(Int);
            }
            if (Interface != null)
            {
                writer.WritePropertyName("interface"u8);
                writer.WriteStringValue(Interface);
            }
            if (Internal != null)
            {
                writer.WritePropertyName("internal"u8);
                writer.WriteStringValue(Internal);
            }
            if (Into != null)
            {
                writer.WritePropertyName("into"u8);
                writer.WriteStringValue(Into);
            }
            if (Is != null)
            {
                writer.WritePropertyName("is"u8);
                writer.WriteStringValue(Is);
            }
            if (Join != null)
            {
                writer.WritePropertyName("join"u8);
                writer.WriteStringValue(Join);
            }
            if (Let != null)
            {
                writer.WritePropertyName("let"u8);
                writer.WriteStringValue(Let);
            }
            if (Lock != null)
            {
                writer.WritePropertyName("lock"u8);
                writer.WriteStringValue(Lock);
            }
            if (Long != null)
            {
                writer.WritePropertyName("long"u8);
                writer.WriteStringValue(Long);
            }
            if (Nameof != null)
            {
                writer.WritePropertyName("nameof"u8);
                writer.WriteStringValue(Nameof);
            }
            if (Namespace != null)
            {
                writer.WritePropertyName("namespace"u8);
                writer.WriteStringValue(Namespace);
            }
            if (New != null)
            {
                writer.WritePropertyName("new"u8);
                writer.WriteStringValue(New);
            }
            if (NullProperty != null)
            {
                writer.WritePropertyName("null"u8);
                writer.WriteStringValue(NullProperty);
            }
            if (Object != null)
            {
                writer.WritePropertyName("object"u8);
                writer.WriteStringValue(Object);
            }
            if (On != null)
            {
                writer.WritePropertyName("on"u8);
                writer.WriteStringValue(On);
            }
            if (Operator != null)
            {
                writer.WritePropertyName("operator"u8);
                writer.WriteStringValue(Operator);
            }
            if (Orderby != null)
            {
                writer.WritePropertyName("orderby"u8);
                writer.WriteStringValue(Orderby);
            }
            if (Out != null)
            {
                writer.WritePropertyName("out"u8);
                writer.WriteStringValue(Out);
            }
            if (Override != null)
            {
                writer.WritePropertyName("override"u8);
                writer.WriteStringValue(Override);
            }
            if (Params != null)
            {
                writer.WritePropertyName("params"u8);
                writer.WriteStringValue(Params);
            }
            if (Partial != null)
            {
                writer.WritePropertyName("partial"u8);
                writer.WriteStringValue(Partial);
            }
            if (Private != null)
            {
                writer.WritePropertyName("private"u8);
                writer.WriteStringValue(Private);
            }
            if (Protected != null)
            {
                writer.WritePropertyName("protected"u8);
                writer.WriteStringValue(Protected);
            }
            if (Public != null)
            {
                writer.WritePropertyName("public"u8);
                writer.WriteStringValue(Public);
            }
            if (Readonly != null)
            {
                writer.WritePropertyName("readonly"u8);
                writer.WriteStringValue(Readonly);
            }
            if (Ref != null)
            {
                writer.WritePropertyName("ref"u8);
                writer.WriteStringValue(Ref);
            }
            if (Remove != null)
            {
                writer.WritePropertyName("remove"u8);
                writer.WriteStringValue(Remove);
            }
            if (Return != null)
            {
                writer.WritePropertyName("return"u8);
                writer.WriteStringValue(Return);
            }
            if (Sbyte != null)
            {
                writer.WritePropertyName("sbyte"u8);
                writer.WriteStringValue(Sbyte);
            }
            if (Sealed != null)
            {
                writer.WritePropertyName("sealed"u8);
                writer.WriteStringValue(Sealed);
            }
            if (Select != null)
            {
                writer.WritePropertyName("select"u8);
                writer.WriteStringValue(Select);
            }
            if (Set != null)
            {
                writer.WritePropertyName("set"u8);
                writer.WriteStringValue(Set);
            }
            if (Short != null)
            {
                writer.WritePropertyName("short"u8);
                writer.WriteStringValue(Short);
            }
            if (Sizeof != null)
            {
                writer.WritePropertyName("sizeof"u8);
                writer.WriteStringValue(Sizeof);
            }
            if (Stackalloc != null)
            {
                writer.WritePropertyName("stackalloc"u8);
                writer.WriteStringValue(Stackalloc);
            }
            if (Static != null)
            {
                writer.WritePropertyName("static"u8);
                writer.WriteStringValue(Static);
            }
            if (String != null)
            {
                writer.WritePropertyName("string"u8);
                writer.WriteStringValue(String);
            }
            if (Struct != null)
            {
                writer.WritePropertyName("struct"u8);
                writer.WriteStringValue(Struct);
            }
            if (Switch != null)
            {
                writer.WritePropertyName("switch"u8);
                writer.WriteStringValue(Switch);
            }
            if (This != null)
            {
                writer.WritePropertyName("this"u8);
                writer.WriteStringValue(This);
            }
            if (Throw != null)
            {
                writer.WritePropertyName("throw"u8);
                writer.WriteStringValue(Throw);
            }
            if (True != null)
            {
                writer.WritePropertyName("true"u8);
                writer.WriteStringValue(True);
            }
            if (Try != null)
            {
                writer.WritePropertyName("try"u8);
                writer.WriteStringValue(Try);
            }
            if (Typeof != null)
            {
                writer.WritePropertyName("typeof"u8);
                writer.WriteStringValue(Typeof);
            }
            if (Uint != null)
            {
                writer.WritePropertyName("uint"u8);
                writer.WriteStringValue(Uint);
            }
            if (Ulong != null)
            {
                writer.WritePropertyName("ulong"u8);
                writer.WriteStringValue(Ulong);
            }
            if (Unchecked != null)
            {
                writer.WritePropertyName("unchecked"u8);
                writer.WriteStringValue(Unchecked);
            }
            if (Unmanaged != null)
            {
                writer.WritePropertyName("unmanaged"u8);
                writer.WriteStringValue(Unmanaged);
            }
            if (Unsafe != null)
            {
                writer.WritePropertyName("unsafe"u8);
                writer.WriteStringValue(Unsafe);
            }
            if (Ushort != null)
            {
                writer.WritePropertyName("ushort"u8);
                writer.WriteStringValue(Ushort);
            }
            if (Using != null)
            {
                writer.WritePropertyName("using"u8);
                writer.WriteStringValue(Using);
            }
            if (Value != null)
            {
                writer.WritePropertyName("value"u8);
                writer.WriteStringValue(Value);
            }
            if (Var != null)
            {
                writer.WritePropertyName("var"u8);
                writer.WriteStringValue(Var);
            }
            if (Virtual != null)
            {
                writer.WritePropertyName("virtual"u8);
                writer.WriteStringValue(Virtual);
            }
            if (Void != null)
            {
                writer.WritePropertyName("void"u8);
                writer.WriteStringValue(Void);
            }
            if (Volatile != null)
            {
                writer.WritePropertyName("volatile"u8);
                writer.WriteStringValue(Volatile);
            }
            if (When != null)
            {
                writer.WritePropertyName("when"u8);
                writer.WriteStringValue(When);
            }
            if (Where != null)
            {
                writer.WritePropertyName("where"u8);
                writer.WriteStringValue(Where);
            }
            if (While != null)
            {
                writer.WritePropertyName("while"u8);
                writer.WriteStringValue(While);
            }
            if (Yield != null)
            {
                writer.WritePropertyName("yield"u8);
                writer.WriteStringValue(Yield);
            }
            if (System.HasValue)
            {
                writer.WritePropertyName("System"u8);
                writer.WriteStringValue(System.Value.ToString());
            }
            if (ToStringValue != null)
            {
                writer.WritePropertyName("ToString"u8);
                writer.WriteStringValue(ToStringValue);
            }
            if (EqualsValue != null)
            {
                writer.WritePropertyName("Equals"u8);
                writer.WriteStringValue(EqualsValue);
            }
            if (GetHashCodeValue != null)
            {
                writer.WritePropertyName("GetHashCode"u8);
                writer.WriteStringValue(GetHashCodeValue);
            }
            writer.WriteEndObject();
        }

        internal static Class DeserializeClass(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string @abstract = default;
            string @add = default;
            string @alias = default;
            string @as = default;
            string @ascending = default;
            string @async = default;
            string @await = default;
            string @base = default;
            string @bool = default;
            string @break = default;
            string @by = default;
            string @byte = default;
            string @catch = default;
            string @char = default;
            string @checked = default;
            string @const = default;
            string @continue = default;
            string @class = default;
            string @decimal = default;
            string @default = default;
            string @delegate = default;
            string @descending = default;
            string @do = default;
            string @double = default;
            string @dynamic = default;
            string @else = default;
            string @enum = default;
            string @event = default;
            string @explicit = default;
            string @extern = default;
            string @false = default;
            string @finally = default;
            string @fixed = default;
            string @float = default;
            string @for = default;
            string @foreach = default;
            string @from = default;
            string @get = default;
            string @global = default;
            string @goto = default;
            string group = default;
            string @if = default;
            string @implicit = default;
            string @in = default;
            string @int = default;
            string @interface = default;
            string @internal = default;
            string @into = default;
            string @is = default;
            string @join = default;
            string @let = default;
            string @lock = default;
            string @long = default;
            string @nameof = default;
            string @namespace = default;
            string @new = default;
            string @null = default;
            string @object = default;
            string @on = default;
            string @operator = default;
            string orderby = default;
            string @out = default;
            string @override = default;
            string @params = default;
            string @partial = default;
            string @private = default;
            string @protected = default;
            string @public = default;
            string @readonly = default;
            string @ref = default;
            string @remove = default;
            string @return = default;
            string @sbyte = default;
            string @sealed = default;
            string select = default;
            string @set = default;
            string @short = default;
            string @sizeof = default;
            string @stackalloc = default;
            string @static = default;
            string @string = default;
            string @struct = default;
            string @switch = default;
            string @this = default;
            string @throw = default;
            string @true = default;
            string @try = default;
            string @typeof = default;
            string @uint = default;
            string @ulong = default;
            string @unchecked = default;
            string @unmanaged = default;
            string @unsafe = default;
            string @ushort = default;
            string @using = default;
            string value = default;
            string @var = default;
            string @virtual = default;
            string @void = default;
            string @volatile = default;
            string @when = default;
            string @where = default;
            string @while = default;
            string @yield = default;
            SystemEnum? system = default;
            string toString = default;
            string @equals = default;
            string getHashCode = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("abstract"u8))
                {
                    @abstract = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("add"u8))
                {
                    @add = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("alias"u8))
                {
                    @alias = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("as"u8))
                {
                    @as = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ascending"u8))
                {
                    @ascending = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("async"u8))
                {
                    @async = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("await"u8))
                {
                    @await = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("base"u8))
                {
                    @base = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("bool"u8))
                {
                    @bool = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("break"u8))
                {
                    @break = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("by"u8))
                {
                    @by = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("byte"u8))
                {
                    @byte = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("catch"u8))
                {
                    @catch = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("char"u8))
                {
                    @char = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("checked"u8))
                {
                    @checked = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("const"u8))
                {
                    @const = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("continue"u8))
                {
                    @continue = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("class"u8))
                {
                    @class = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("decimal"u8))
                {
                    @decimal = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("default"u8))
                {
                    @default = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("delegate"u8))
                {
                    @delegate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("descending"u8))
                {
                    @descending = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("do"u8))
                {
                    @do = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("double"u8))
                {
                    @double = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dynamic"u8))
                {
                    @dynamic = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("else"u8))
                {
                    @else = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enum"u8))
                {
                    @enum = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("event"u8))
                {
                    @event = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("explicit"u8))
                {
                    @explicit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("extern"u8))
                {
                    @extern = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("false"u8))
                {
                    @false = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("finally"u8))
                {
                    @finally = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fixed"u8))
                {
                    @fixed = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("float"u8))
                {
                    @float = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("for"u8))
                {
                    @for = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("foreach"u8))
                {
                    @foreach = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("from"u8))
                {
                    @from = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("get"u8))
                {
                    @get = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("global"u8))
                {
                    @global = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("goto"u8))
                {
                    @goto = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("group"u8))
                {
                    group = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("if"u8))
                {
                    @if = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("implicit"u8))
                {
                    @implicit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("in"u8))
                {
                    @in = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("int"u8))
                {
                    @int = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("interface"u8))
                {
                    @interface = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("internal"u8))
                {
                    @internal = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("into"u8))
                {
                    @into = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("is"u8))
                {
                    @is = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("join"u8))
                {
                    @join = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("let"u8))
                {
                    @let = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lock"u8))
                {
                    @lock = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("long"u8))
                {
                    @long = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nameof"u8))
                {
                    @nameof = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("namespace"u8))
                {
                    @namespace = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("new"u8))
                {
                    @new = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("null"u8))
                {
                    @null = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("object"u8))
                {
                    @object = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("on"u8))
                {
                    @on = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("operator"u8))
                {
                    @operator = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("orderby"u8))
                {
                    orderby = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("out"u8))
                {
                    @out = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("override"u8))
                {
                    @override = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("params"u8))
                {
                    @params = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("partial"u8))
                {
                    @partial = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("private"u8))
                {
                    @private = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("protected"u8))
                {
                    @protected = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("public"u8))
                {
                    @public = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("readonly"u8))
                {
                    @readonly = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ref"u8))
                {
                    @ref = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("remove"u8))
                {
                    @remove = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("return"u8))
                {
                    @return = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sbyte"u8))
                {
                    @sbyte = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sealed"u8))
                {
                    @sealed = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("select"u8))
                {
                    select = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("set"u8))
                {
                    @set = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("short"u8))
                {
                    @short = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sizeof"u8))
                {
                    @sizeof = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("stackalloc"u8))
                {
                    @stackalloc = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("static"u8))
                {
                    @static = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("string"u8))
                {
                    @string = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("struct"u8))
                {
                    @struct = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("switch"u8))
                {
                    @switch = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("this"u8))
                {
                    @this = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("throw"u8))
                {
                    @throw = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("true"u8))
                {
                    @true = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("try"u8))
                {
                    @try = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("typeof"u8))
                {
                    @typeof = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("uint"u8))
                {
                    @uint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ulong"u8))
                {
                    @ulong = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("unchecked"u8))
                {
                    @unchecked = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("unmanaged"u8))
                {
                    @unmanaged = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("unsafe"u8))
                {
                    @unsafe = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ushort"u8))
                {
                    @ushort = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("using"u8))
                {
                    @using = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("value"u8))
                {
                    value = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("var"u8))
                {
                    @var = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("virtual"u8))
                {
                    @virtual = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("void"u8))
                {
                    @void = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("volatile"u8))
                {
                    @volatile = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("when"u8))
                {
                    @when = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("where"u8))
                {
                    @where = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("while"u8))
                {
                    @while = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("yield"u8))
                {
                    @yield = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("System"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    system = new SystemEnum(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ToString"u8))
                {
                    toString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Equals"u8))
                {
                    @equals = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("GetHashCode"u8))
                {
                    getHashCode = property.Value.GetString();
                    continue;
                }
            }
            return new Class(
                @abstract,
                @add,
                @alias,
                @as,
                @ascending,
                @async,
                @await,
                @base,
                @bool,
                @break,
                @by,
                @byte,
                @catch,
                @char,
                @checked,
                @const,
                @continue,
                @class,
                @decimal,
                @default,
                @delegate,
                @descending,
                @do,
                @double,
                @dynamic,
                @else,
                @enum,
                @event,
                @explicit,
                @extern,
                @false,
                @finally,
                @fixed,
                @float,
                @for,
                @foreach,
                @from,
                @get,
                @global,
                @goto,
                group,
                @if,
                @implicit,
                @in,
                @int,
                @interface,
                @internal,
                @into,
                @is,
                @join,
                @let,
                @lock,
                @long,
                @nameof,
                @namespace,
                @new,
                @null,
                @object,
                @on,
                @operator,
                orderby,
                @out,
                @override,
                @params,
                @partial,
                @private,
                @protected,
                @public,
                @readonly,
                @ref,
                @remove,
                @return,
                @sbyte,
                @sealed,
                select,
                @set,
                @short,
                @sizeof,
                @stackalloc,
                @static,
                @string,
                @struct,
                @switch,
                @this,
                @throw,
                @true,
                @try,
                @typeof,
                @uint,
                @ulong,
                @unchecked,
                @unmanaged,
                @unsafe,
                @ushort,
                @using,
                value,
                @var,
                @virtual,
                @void,
                @volatile,
                @when,
                @where,
                @while,
                @yield,
                system,
                toString,
                @equals,
                getHashCode);
        }
    }
}
