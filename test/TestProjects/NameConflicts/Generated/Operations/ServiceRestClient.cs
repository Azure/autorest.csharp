// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using NameConflicts.Models;

namespace NameConflicts
{
    internal partial class ServiceRestClient
    {
        private string host;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of ServiceRestClient. </summary>
        public ServiceRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string host = "http://localhost:3000")
        {
            if (host == null)
            {
                throw new ArgumentNullException(nameof(host));
            }

            this.host = host;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateOperationRequest(string request, string message, string scope, string uri, string pipeline, string clientDiagnostics, Class @class)
        {
            var message0 = _pipeline.CreateMessage();
            var request0 = message0.Request;
            request0.Method = RequestMethod.Patch;
            var uri0 = new RawRequestUriBuilder();
            uri0.AppendRaw(host, false);
            uri0.AppendPath("/originalOperation", false);
            uri0.AppendQuery("request", request, true);
            uri0.AppendQuery("message", message, true);
            uri0.AppendQuery("scope", scope, true);
            uri0.AppendQuery("uri", uri, true);
            uri0.AppendQuery("pipeline", pipeline, true);
            uri0.AppendQuery("clientDiagnostics", clientDiagnostics, true);
            request0.Uri = uri0;
            request0.Headers.Add("Content-Type", "application/json");
            using var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(@class);
            request0.Content = content;
            return message0;
        }

        /// <param name="request"> The String to use. </param>
        /// <param name="message"> The String to use. </param>
        /// <param name="scope"> The String to use. </param>
        /// <param name="uri"> The String to use. </param>
        /// <param name="pipeline"> The String to use. </param>
        /// <param name="clientDiagnostics"> The String to use. </param>
        /// <param name="class"> The Class to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response<Struct>> OperationAsync(string request, string message, string scope, string uri, string pipeline, string clientDiagnostics, Class @class, CancellationToken cancellationToken = default)
        {
            if (request == null)
            {
                throw new ArgumentNullException(nameof(request));
            }
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }
            if (scope == null)
            {
                throw new ArgumentNullException(nameof(scope));
            }
            if (uri == null)
            {
                throw new ArgumentNullException(nameof(uri));
            }
            if (pipeline == null)
            {
                throw new ArgumentNullException(nameof(pipeline));
            }
            if (clientDiagnostics == null)
            {
                throw new ArgumentNullException(nameof(clientDiagnostics));
            }
            if (@class == null)
            {
                throw new ArgumentNullException(nameof(@class));
            }

            using var scope0 = _clientDiagnostics.CreateScope("ServiceClient.Operation");
            scope0.Start();
            try
            {
                using var message0 = CreateOperationRequest(request, message, scope, uri, pipeline, clientDiagnostics, @class);
                await _pipeline.SendAsync(message0, cancellationToken).ConfigureAwait(false);
                switch (message0.Response.Status)
                {
                    case 200:
                        {
                            Struct value = default;
                            using var document = await JsonDocument.ParseAsync(message0.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                            if (document.RootElement.ValueKind == JsonValueKind.Null)
                            {
                                value = null;
                            }
                            else
                            {
                                value = Struct.DeserializeStruct(document.RootElement);
                            }
                            return Response.FromValue(value, message0.Response);
                        }
                    default:
                        throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message0.Response).ConfigureAwait(false);
                }
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <param name="request"> The String to use. </param>
        /// <param name="message"> The String to use. </param>
        /// <param name="scope"> The String to use. </param>
        /// <param name="uri"> The String to use. </param>
        /// <param name="pipeline"> The String to use. </param>
        /// <param name="clientDiagnostics"> The String to use. </param>
        /// <param name="class"> The Class to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<Struct> Operation(string request, string message, string scope, string uri, string pipeline, string clientDiagnostics, Class @class, CancellationToken cancellationToken = default)
        {
            if (request == null)
            {
                throw new ArgumentNullException(nameof(request));
            }
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }
            if (scope == null)
            {
                throw new ArgumentNullException(nameof(scope));
            }
            if (uri == null)
            {
                throw new ArgumentNullException(nameof(uri));
            }
            if (pipeline == null)
            {
                throw new ArgumentNullException(nameof(pipeline));
            }
            if (clientDiagnostics == null)
            {
                throw new ArgumentNullException(nameof(clientDiagnostics));
            }
            if (@class == null)
            {
                throw new ArgumentNullException(nameof(@class));
            }

            using var scope0 = _clientDiagnostics.CreateScope("ServiceClient.Operation");
            scope0.Start();
            try
            {
                using var message0 = CreateOperationRequest(request, message, scope, uri, pipeline, clientDiagnostics, @class);
                _pipeline.Send(message0, cancellationToken);
                switch (message0.Response.Status)
                {
                    case 200:
                        {
                            Struct value = default;
                            using var document = JsonDocument.Parse(message0.Response.ContentStream);
                            if (document.RootElement.ValueKind == JsonValueKind.Null)
                            {
                                value = null;
                            }
                            else
                            {
                                value = Struct.DeserializeStruct(document.RootElement);
                            }
                            return Response.FromValue(value, message0.Response);
                        }
                    default:
                        throw _clientDiagnostics.CreateRequestFailedException(message0.Response);
                }
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateAnalyzeBodyRequest(Stream stringBody)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(host, false);
            uri.AppendPath("/conflictingLROOverloads", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/pdf");
            request.Content = RequestContent.Create(stringBody);
            return message;
        }

        /// <summary> Analyze body, that could be different media types. </summary>
        /// <param name="stringBody"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> AnalyzeBodyAsync(Stream stringBody, CancellationToken cancellationToken = default)
        {
            if (stringBody == null)
            {
                throw new ArgumentNullException(nameof(stringBody));
            }

            using var scope = _clientDiagnostics.CreateScope("ServiceClient.AnalyzeBody");
            scope.Start();
            try
            {
                using var message = CreateAnalyzeBodyRequest(stringBody);
                await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Analyze body, that could be different media types. </summary>
        /// <param name="stringBody"> The binary to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response AnalyzeBody(Stream stringBody, CancellationToken cancellationToken = default)
        {
            if (stringBody == null)
            {
                throw new ArgumentNullException(nameof(stringBody));
            }

            using var scope = _clientDiagnostics.CreateScope("ServiceClient.AnalyzeBody");
            scope.Start();
            try
            {
                using var message = CreateAnalyzeBodyRequest(stringBody);
                _pipeline.Send(message, cancellationToken);
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateAnalyzeBodyRequest(string stringBody)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(host, false);
            uri.AppendPath("/conflictingLROOverloads", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            if (stringBody != null)
            {
                using var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteStringValue(stringBody);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Analyze body, that could be different media types. </summary>
        /// <param name="stringBody"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async ValueTask<Response> AnalyzeBodyAsync(string stringBody = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.AnalyzeBody");
            scope.Start();
            try
            {
                using var message = CreateAnalyzeBodyRequest(stringBody);
                await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Analyze body, that could be different media types. </summary>
        /// <param name="stringBody"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response AnalyzeBody(string stringBody = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ServiceClient.AnalyzeBody");
            scope.Start();
            try
            {
                using var message = CreateAnalyzeBodyRequest(stringBody);
                _pipeline.Send(message, cancellationToken);
                switch (message.Response.Status)
                {
                    case 200:
                        return message.Response;
                    default:
                        throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
