// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
#region Usings

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using MgmtMockTest.Models;
#endregion

#region Parameter decalarations
// Below parameters are extracted from swagger example files, please use your own values to execute the API lively.
ArmClient GetArmClient() => new ArmClient(new DefaultAzureCredential());
var subscriptionId = Environment.GetEnvironmentVariable("SUBSCRIPTION_ID") ?? "00000000-0000-0000-0000-000000000000";
var resourceGroupName = "sample-resource-group";  // The name of the Resource Group to which the server belongs.
var vaultName = "sample-vault";  // Name of the vault
#endregion

#region API invocation
// api-version: 2021-10-01
// x-ms-original-file: file:///C:/ZZ/projects/codegen/autorest.csharp/test/TestProjects/MgmtMockTest/src/examples/createVaultWithNetworkAcls.json
// Example: Create or update a vault with network acls

var resourceGroupResourceId = global::Azure.ResourceManager.Resources.ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
var resourceGroupResource = GetArmClient().GetResourceGroupResource(resourceGroupResourceId);
var collection = resourceGroupResource.GetVaults();
var operation = collection.CreateOrUpdate(WaitUntil.Completed, vaultName, new VaultCreateOrUpdateContent(new AzureLocation("westus"), new VaultProperties(Guid.Parse("00000000-0000-0000-0000-000000000000"), new MgmtMockTestSku(MgmtMockTestSkuFamily.A, MgmtMockTestSkuName.Standard))
{
    EnabledForDiskEncryption = true,
    EnabledForTemplateDeployment = true,
    NetworkAcls = new NetworkRuleSet()
    {
        Bypass = NetworkRuleBypassOption.AzureServices,
        DefaultAction = NetworkRuleAction.Deny,
        IpRules =
{
new IPRule("124.56.78.91"),new IPRule("'10.91.4.0/24'")
},
        VirtualNetworkRules =
{
new VirtualNetworkRule("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1")
},
    },
    ReadWriteSingleStringPropertySomething = "test",
    DeepSomething = "deep-value",
}));

Console.WriteLine($"Succeed on ResourceId: {operation.Value.Data.Id}");
Console.WriteLine($"Full Resource content: {JsonSerializer.Serialize(operation.Value.Data)}");
#endregion
