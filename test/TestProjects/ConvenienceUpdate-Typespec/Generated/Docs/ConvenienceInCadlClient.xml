<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="UpdateConvenienceAsync(global::Azure.RequestContext)">
This is the advanced method. Use <see cref="UpdateConvenience(global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call UpdateConvenienceAsync with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.UpdateConvenienceAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="UpdateConvenience(global::Azure.RequestContext)">
This is the advanced method. Use <see cref="UpdateConvenience(global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call UpdateConvenience with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.UpdateConvenience();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceOptionalBeforeRequiredAsync(global::Azure.Core.RequestContent,int?,global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ConvenienceOptionalBeforeRequired(global::ConvenienceInCadl.Models.Model,int?,global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ConvenienceOptionalBeforeRequiredAsync with required parameters and request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = await client.ConvenienceOptionalBeforeRequiredAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call ConvenienceOptionalBeforeRequiredAsync with all parameters and request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = await client.ConvenienceOptionalBeforeRequiredAsync(RequestContent.Create(data), 1234);
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceOptionalBeforeRequired(global::Azure.Core.RequestContent,int?,global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ConvenienceOptionalBeforeRequired(global::ConvenienceInCadl.Models.Model,int?,global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ConvenienceOptionalBeforeRequired with required parameters and request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = client.ConvenienceOptionalBeforeRequired(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call ConvenienceOptionalBeforeRequired with all parameters and request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = client.ConvenienceOptionalBeforeRequired(RequestContent.Create(data), 1234);
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ProtocolAsync(global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ProtocolValue(global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ProtocolAsync and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ProtocolAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="Protocol(global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ProtocolValue(global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call Protocol and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.Protocol();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceWithOptionalAsync(global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ConvenienceWithOptionalValue(global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ConvenienceWithOptionalAsync and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ConvenienceWithOptionalAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceWithOptional(global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ConvenienceWithOptionalValue(global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ConvenienceWithOptional and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ConvenienceWithOptional();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceWithRequiredAsync(global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ConvenienceWithRequired(global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ConvenienceWithRequiredAsync with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ConvenienceWithRequiredAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceWithRequired(global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ConvenienceWithRequired(global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ConvenienceWithRequired with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ConvenienceWithRequired();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceShouldNotGenerateAsync(global::Azure.RequestContext)">
<example>
This sample shows how to call ConvenienceShouldNotGenerateAsync.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ConvenienceShouldNotGenerateAsync();
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="ConvenienceShouldNotGenerate(global::Azure.RequestContext)">
<example>
This sample shows how to call ConvenienceShouldNotGenerate.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ConvenienceShouldNotGenerate();
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="ProtocolShouldNotGenerateConvenienceAsync(global::Azure.RequestContext)">
<example>
This sample shows how to call ProtocolShouldNotGenerateConvenienceAsync.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ProtocolShouldNotGenerateConvenienceAsync();
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="ProtocolShouldNotGenerateConvenience(global::Azure.RequestContext)">
<example>
This sample shows how to call ProtocolShouldNotGenerateConvenience.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ProtocolShouldNotGenerateConvenience();
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="ProtocolOptionalQueryAsync(int?,global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ProtocolOptionalQueryValue(int?,global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ProtocolOptionalQueryAsync and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ProtocolOptionalQueryAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
This sample shows how to call ProtocolOptionalQueryAsync with all parameters, and how to parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ProtocolOptionalQueryAsync(1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ProtocolOptionalQuery(int?,global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ProtocolOptionalQueryValue(int?,global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ProtocolOptionalQuery and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ProtocolOptionalQuery();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
This sample shows how to call ProtocolOptionalQuery with all parameters, and how to parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ProtocolOptionalQuery(1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ProtocolRequiredQueryAsync(int,global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ProtocolRequiredQueryValue(int,global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ProtocolRequiredQueryAsync with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ProtocolRequiredQueryAsync(1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ProtocolRequiredQuery(int,global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ProtocolRequiredQueryValue(int,global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ProtocolRequiredQuery with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ProtocolRequiredQuery(1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ProtocolOptionalModelAsync(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ProtocolOptionalModelValue(global::ConvenienceInCadl.Models.Model,global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ProtocolOptionalModelAsync with required request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = await client.ProtocolOptionalModelAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ProtocolOptionalModel(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ProtocolOptionalModelValue(global::ConvenienceInCadl.Models.Model,global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ProtocolOptionalModel with required request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = client.ProtocolOptionalModel(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ProtocolRequiredModelAsync(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ProtocolRequiredModel(global::ConvenienceInCadl.Models.Model,global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ProtocolRequiredModelAsync with required request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = await client.ProtocolRequiredModelAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ProtocolRequiredModel(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ProtocolRequiredModel(global::ConvenienceInCadl.Models.Model,global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ProtocolRequiredModel with required request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = client.ProtocolRequiredModel(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceOptionalQueryWithOptionalAsync(int?,global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ConvenienceOptionalQueryWithOptionalValue(int?,global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ConvenienceOptionalQueryWithOptionalAsync and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ConvenienceOptionalQueryWithOptionalAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
This sample shows how to call ConvenienceOptionalQueryWithOptionalAsync with all parameters, and how to parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ConvenienceOptionalQueryWithOptionalAsync(1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceOptionalQueryWithOptional(int?,global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ConvenienceOptionalQueryWithOptionalValue(int?,global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ConvenienceOptionalQueryWithOptional and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ConvenienceOptionalQueryWithOptional();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
This sample shows how to call ConvenienceOptionalQueryWithOptional with all parameters, and how to parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ConvenienceOptionalQueryWithOptional(1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceRequiredQueryWithOptionalAsync(int,global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ConvenienceRequiredQueryWithOptionalValue(int,global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ConvenienceRequiredQueryWithOptionalAsync with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ConvenienceRequiredQueryWithOptionalAsync(1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceRequiredQueryWithOptional(int,global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ConvenienceRequiredQueryWithOptionalValue(int,global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ConvenienceRequiredQueryWithOptional with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ConvenienceRequiredQueryWithOptional(1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceOptionalQueryWithRequiredAsync(int?,global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ConvenienceOptionalQueryWithRequired(int?,global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ConvenienceOptionalQueryWithRequiredAsync with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ConvenienceOptionalQueryWithRequiredAsync(1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceOptionalQueryWithRequired(int?,global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ConvenienceOptionalQueryWithRequired(int?,global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ConvenienceOptionalQueryWithRequired with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ConvenienceOptionalQueryWithRequired(1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceRequiredQueryWithRequiredAsync(int,global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ConvenienceRequiredQueryWithRequired(int,global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ConvenienceRequiredQueryWithRequiredAsync with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ConvenienceRequiredQueryWithRequiredAsync(1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceRequiredQueryWithRequired(int,global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ConvenienceRequiredQueryWithRequired(int,global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ConvenienceRequiredQueryWithRequired with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ConvenienceRequiredQueryWithRequired(1234);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceOptionalModelWithOptionalAsync(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ConvenienceOptionalModelWithOptionalValue(global::ConvenienceInCadl.Models.Model,global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ConvenienceOptionalModelWithOptionalAsync with required request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = await client.ConvenienceOptionalModelWithOptionalAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceOptionalModelWithOptional(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ConvenienceOptionalModelWithOptionalValue(global::ConvenienceInCadl.Models.Model,global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ConvenienceOptionalModelWithOptional with required request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = client.ConvenienceOptionalModelWithOptional(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceRequiredModelWithOptionalAsync(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ConvenienceRequiredModelWithOptional(global::ConvenienceInCadl.Models.Model,global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ConvenienceRequiredModelWithOptionalAsync with required request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = await client.ConvenienceRequiredModelWithOptionalAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceRequiredModelWithOptional(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ConvenienceRequiredModelWithOptional(global::ConvenienceInCadl.Models.Model,global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ConvenienceRequiredModelWithOptional with required request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = client.ConvenienceRequiredModelWithOptional(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceOptionalModelWithRequiredAsync(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ConvenienceOptionalModelWithRequired(global::ConvenienceInCadl.Models.Model,global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ConvenienceOptionalModelWithRequiredAsync with required parameters and request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = await client.ConvenienceOptionalModelWithRequiredAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceOptionalModelWithRequired(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ConvenienceOptionalModelWithRequired(global::ConvenienceInCadl.Models.Model,global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ConvenienceOptionalModelWithRequired with required parameters and request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = client.ConvenienceOptionalModelWithRequired(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ProtocolOptionalBeforeRequiredAsync(global::Azure.Core.RequestContent,int?,global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ProtocolOptionalBeforeRequired(global::ConvenienceInCadl.Models.Model,int?,global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ProtocolOptionalBeforeRequiredAsync with required parameters and request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = await client.ProtocolOptionalBeforeRequiredAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call ProtocolOptionalBeforeRequiredAsync with all parameters and request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = await client.ProtocolOptionalBeforeRequiredAsync(RequestContent.Create(data), 1234);
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ProtocolOptionalBeforeRequired(global::Azure.Core.RequestContent,int?,global::Azure.RequestContext)">
This is the advanced method. Use <see cref="ProtocolOptionalBeforeRequired(global::ConvenienceInCadl.Models.Model,int?,global::System.Threading.CancellationToken)"/> for an overload that provides fully qualified model types.
<example>
This sample shows how to call ProtocolOptionalBeforeRequired with required parameters and request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = client.ProtocolOptionalBeforeRequired(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call ProtocolOptionalBeforeRequired with all parameters and request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = client.ProtocolOptionalBeforeRequired(RequestContent.Create(data), 1234);
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
  </members>
</doc>