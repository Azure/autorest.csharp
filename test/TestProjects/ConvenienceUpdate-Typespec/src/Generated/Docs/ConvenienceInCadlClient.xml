<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="UpdateConvenienceAsync(global::System.Threading.CancellationToken)">
<example>
This sample shows how to call UpdateConvenienceAsync.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var result = await client.UpdateConvenienceAsync(default);
]]></code>
</example>
    </member>
    <member name="UpdateConvenience(global::System.Threading.CancellationToken)">
<example>
This sample shows how to call UpdateConvenience.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var result = client.UpdateConvenience(default);
]]></code>
</example>
    </member>
    <member name="UpdateConvenienceAsync(global::Azure.RequestContext)">
<example>
This sample shows how to call UpdateConvenienceAsync with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.UpdateConvenienceAsync(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="UpdateConvenience(global::Azure.RequestContext)">
<example>
This sample shows how to call UpdateConvenience with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.UpdateConvenience(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceOptionalBeforeRequiredAsync(global::ConvenienceInCadl.Models.Model,int?,global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ConvenienceOptionalBeforeRequiredAsync with required parameters.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var required = new Model("<id>");
var result = await client.ConvenienceOptionalBeforeRequiredAsync(required, 1234, default);
]]></code>
</example>
    </member>
    <member name="ConvenienceOptionalBeforeRequired(global::ConvenienceInCadl.Models.Model,int?,global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ConvenienceOptionalBeforeRequired with required parameters.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var required = new Model("<id>");
var result = client.ConvenienceOptionalBeforeRequired(required, 1234, default);
]]></code>
</example>
    </member>
    <member name="ConvenienceOptionalBeforeRequiredAsync(global::Azure.Core.RequestContent,int?,global::Azure.RequestContext)">
<example>
This sample shows how to call ConvenienceOptionalBeforeRequiredAsync with required parameters and request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = await client.ConvenienceOptionalBeforeRequiredAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call ConvenienceOptionalBeforeRequiredAsync with all parameters and request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = await client.ConvenienceOptionalBeforeRequiredAsync(RequestContent.Create(data), 1234, new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceOptionalBeforeRequired(global::Azure.Core.RequestContent,int?,global::Azure.RequestContext)">
<example>
This sample shows how to call ConvenienceOptionalBeforeRequired with required parameters and request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = client.ConvenienceOptionalBeforeRequired(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call ConvenienceOptionalBeforeRequired with all parameters and request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = client.ConvenienceOptionalBeforeRequired(RequestContent.Create(data), 1234, new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ProtocolValueAsync(global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ProtocolValueAsync.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var result = await client.ProtocolValueAsync(default);
]]></code>
</example>
    </member>
    <member name="ProtocolValue(global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ProtocolValue.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var result = client.ProtocolValue(default);
]]></code>
</example>
    </member>
    <member name="ProtocolAsync(global::Azure.RequestContext)">
<example>
This sample shows how to call ProtocolAsync and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ProtocolAsync(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="Protocol(global::Azure.RequestContext)">
<example>
This sample shows how to call Protocol and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.Protocol(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceWithOptionalValueAsync(global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ConvenienceWithOptionalValueAsync.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var result = await client.ConvenienceWithOptionalValueAsync(default);
]]></code>
</example>
    </member>
    <member name="ConvenienceWithOptionalValue(global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ConvenienceWithOptionalValue.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var result = client.ConvenienceWithOptionalValue(default);
]]></code>
</example>
    </member>
    <member name="ConvenienceWithOptionalAsync(global::Azure.RequestContext)">
<example>
This sample shows how to call ConvenienceWithOptionalAsync and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ConvenienceWithOptionalAsync(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceWithOptional(global::Azure.RequestContext)">
<example>
This sample shows how to call ConvenienceWithOptional and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ConvenienceWithOptional(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceWithRequiredAsync(global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ConvenienceWithRequiredAsync.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var result = await client.ConvenienceWithRequiredAsync(default);
]]></code>
</example>
    </member>
    <member name="ConvenienceWithRequired(global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ConvenienceWithRequired.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var result = client.ConvenienceWithRequired(default);
]]></code>
</example>
    </member>
    <member name="ConvenienceWithRequiredAsync(global::Azure.RequestContext)">
<example>
This sample shows how to call ConvenienceWithRequiredAsync with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ConvenienceWithRequiredAsync(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceWithRequired(global::Azure.RequestContext)">
<example>
This sample shows how to call ConvenienceWithRequired with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ConvenienceWithRequired(new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceShouldNotGenerateAsync(global::Azure.RequestContext)">
<example>
This sample shows how to call ConvenienceShouldNotGenerateAsync.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ConvenienceShouldNotGenerateAsync(new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="ConvenienceShouldNotGenerate(global::Azure.RequestContext)">
<example>
This sample shows how to call ConvenienceShouldNotGenerate.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ConvenienceShouldNotGenerate(new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="ProtocolShouldNotGenerateConvenienceAsync(global::Azure.RequestContext)">
<example>
This sample shows how to call ProtocolShouldNotGenerateConvenienceAsync.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ProtocolShouldNotGenerateConvenienceAsync(new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="ProtocolShouldNotGenerateConvenience(global::Azure.RequestContext)">
<example>
This sample shows how to call ProtocolShouldNotGenerateConvenience.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ProtocolShouldNotGenerateConvenience(new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="ProtocolOptionalQueryValueAsync(int?,global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ProtocolOptionalQueryValueAsync with required parameters.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var result = await client.ProtocolOptionalQueryValueAsync(1234, default);
]]></code>
</example>
    </member>
    <member name="ProtocolOptionalQueryValue(int?,global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ProtocolOptionalQueryValue with required parameters.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var result = client.ProtocolOptionalQueryValue(1234, default);
]]></code>
</example>
    </member>
    <member name="ProtocolOptionalQueryAsync(int?,global::Azure.RequestContext)">
<example>
This sample shows how to call ProtocolOptionalQueryAsync and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ProtocolOptionalQueryAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
This sample shows how to call ProtocolOptionalQueryAsync with all parameters, and how to parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ProtocolOptionalQueryAsync(1234, new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ProtocolOptionalQuery(int?,global::Azure.RequestContext)">
<example>
This sample shows how to call ProtocolOptionalQuery and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ProtocolOptionalQuery();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
This sample shows how to call ProtocolOptionalQuery with all parameters, and how to parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ProtocolOptionalQuery(1234, new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ProtocolRequiredQueryValueAsync(int,global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ProtocolRequiredQueryValueAsync with required parameters.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var result = await client.ProtocolRequiredQueryValueAsync(1234, default);
]]></code>
</example>
    </member>
    <member name="ProtocolRequiredQueryValue(int,global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ProtocolRequiredQueryValue with required parameters.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var result = client.ProtocolRequiredQueryValue(1234, default);
]]></code>
</example>
    </member>
    <member name="ProtocolRequiredQueryAsync(int,global::Azure.RequestContext)">
<example>
This sample shows how to call ProtocolRequiredQueryAsync with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ProtocolRequiredQueryAsync(1234, new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ProtocolRequiredQuery(int,global::Azure.RequestContext)">
<example>
This sample shows how to call ProtocolRequiredQuery with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ProtocolRequiredQuery(1234, new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ProtocolOptionalModelValueAsync(global::ConvenienceInCadl.Models.Model,global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ProtocolOptionalModelValueAsync with required parameters.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var optional = new Model("<id>");
var result = await client.ProtocolOptionalModelValueAsync(optional, default);
]]></code>
</example>
    </member>
    <member name="ProtocolOptionalModelValue(global::ConvenienceInCadl.Models.Model,global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ProtocolOptionalModelValue with required parameters.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var optional = new Model("<id>");
var result = client.ProtocolOptionalModelValue(optional, default);
]]></code>
</example>
    </member>
    <member name="ProtocolOptionalModelAsync(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call ProtocolOptionalModelAsync with required request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = await client.ProtocolOptionalModelAsync(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ProtocolOptionalModel(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call ProtocolOptionalModel with required request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = client.ProtocolOptionalModel(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ProtocolRequiredModelAsync(global::ConvenienceInCadl.Models.Model,global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ProtocolRequiredModelAsync with required parameters.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var required = new Model("<id>");
var result = await client.ProtocolRequiredModelAsync(required, default);
]]></code>
</example>
    </member>
    <member name="ProtocolRequiredModel(global::ConvenienceInCadl.Models.Model,global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ProtocolRequiredModel with required parameters.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var required = new Model("<id>");
var result = client.ProtocolRequiredModel(required, default);
]]></code>
</example>
    </member>
    <member name="ProtocolRequiredModelAsync(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call ProtocolRequiredModelAsync with required request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = await client.ProtocolRequiredModelAsync(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ProtocolRequiredModel(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call ProtocolRequiredModel with required request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = client.ProtocolRequiredModel(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceOptionalQueryWithOptionalValueAsync(int?,global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ConvenienceOptionalQueryWithOptionalValueAsync with required parameters.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var result = await client.ConvenienceOptionalQueryWithOptionalValueAsync(1234, default);
]]></code>
</example>
    </member>
    <member name="ConvenienceOptionalQueryWithOptionalValue(int?,global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ConvenienceOptionalQueryWithOptionalValue with required parameters.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var result = client.ConvenienceOptionalQueryWithOptionalValue(1234, default);
]]></code>
</example>
    </member>
    <member name="ConvenienceOptionalQueryWithOptionalAsync(int?,global::Azure.RequestContext)">
<example>
This sample shows how to call ConvenienceOptionalQueryWithOptionalAsync and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ConvenienceOptionalQueryWithOptionalAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
This sample shows how to call ConvenienceOptionalQueryWithOptionalAsync with all parameters, and how to parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ConvenienceOptionalQueryWithOptionalAsync(1234, new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceOptionalQueryWithOptional(int?,global::Azure.RequestContext)">
<example>
This sample shows how to call ConvenienceOptionalQueryWithOptional and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ConvenienceOptionalQueryWithOptional();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
This sample shows how to call ConvenienceOptionalQueryWithOptional with all parameters, and how to parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ConvenienceOptionalQueryWithOptional(1234, new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceRequiredQueryWithOptionalValueAsync(int,global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ConvenienceRequiredQueryWithOptionalValueAsync with required parameters.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var result = await client.ConvenienceRequiredQueryWithOptionalValueAsync(1234, default);
]]></code>
</example>
    </member>
    <member name="ConvenienceRequiredQueryWithOptionalValue(int,global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ConvenienceRequiredQueryWithOptionalValue with required parameters.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var result = client.ConvenienceRequiredQueryWithOptionalValue(1234, default);
]]></code>
</example>
    </member>
    <member name="ConvenienceRequiredQueryWithOptionalAsync(int,global::Azure.RequestContext)">
<example>
This sample shows how to call ConvenienceRequiredQueryWithOptionalAsync with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ConvenienceRequiredQueryWithOptionalAsync(1234, new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceRequiredQueryWithOptional(int,global::Azure.RequestContext)">
<example>
This sample shows how to call ConvenienceRequiredQueryWithOptional with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ConvenienceRequiredQueryWithOptional(1234, new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceOptionalQueryWithRequiredAsync(int?,global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ConvenienceOptionalQueryWithRequiredAsync with required parameters.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var result = await client.ConvenienceOptionalQueryWithRequiredAsync(1234, default);
]]></code>
</example>
    </member>
    <member name="ConvenienceOptionalQueryWithRequired(int?,global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ConvenienceOptionalQueryWithRequired with required parameters.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var result = client.ConvenienceOptionalQueryWithRequired(1234, default);
]]></code>
</example>
    </member>
    <member name="ConvenienceOptionalQueryWithRequiredAsync(int?,global::Azure.RequestContext)">
<example>
This sample shows how to call ConvenienceOptionalQueryWithRequiredAsync with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ConvenienceOptionalQueryWithRequiredAsync(1234, new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceOptionalQueryWithRequired(int?,global::Azure.RequestContext)">
<example>
This sample shows how to call ConvenienceOptionalQueryWithRequired with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ConvenienceOptionalQueryWithRequired(1234, new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceRequiredQueryWithRequiredAsync(int,global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ConvenienceRequiredQueryWithRequiredAsync with required parameters.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var result = await client.ConvenienceRequiredQueryWithRequiredAsync(1234, default);
]]></code>
</example>
    </member>
    <member name="ConvenienceRequiredQueryWithRequired(int,global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ConvenienceRequiredQueryWithRequired with required parameters.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var result = client.ConvenienceRequiredQueryWithRequired(1234, default);
]]></code>
</example>
    </member>
    <member name="ConvenienceRequiredQueryWithRequiredAsync(int,global::Azure.RequestContext)">
<example>
This sample shows how to call ConvenienceRequiredQueryWithRequiredAsync with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = await client.ConvenienceRequiredQueryWithRequiredAsync(1234, new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceRequiredQueryWithRequired(int,global::Azure.RequestContext)">
<example>
This sample shows how to call ConvenienceRequiredQueryWithRequired with required parameters and parse the result.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

Response response = client.ConvenienceRequiredQueryWithRequired(1234, new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceOptionalModelWithOptionalValueAsync(global::ConvenienceInCadl.Models.Model,global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ConvenienceOptionalModelWithOptionalValueAsync with required parameters.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var optional = new Model("<id>");
var result = await client.ConvenienceOptionalModelWithOptionalValueAsync(optional, default);
]]></code>
</example>
    </member>
    <member name="ConvenienceOptionalModelWithOptionalValue(global::ConvenienceInCadl.Models.Model,global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ConvenienceOptionalModelWithOptionalValue with required parameters.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var optional = new Model("<id>");
var result = client.ConvenienceOptionalModelWithOptionalValue(optional, default);
]]></code>
</example>
    </member>
    <member name="ConvenienceOptionalModelWithOptionalAsync(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call ConvenienceOptionalModelWithOptionalAsync with required request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = await client.ConvenienceOptionalModelWithOptionalAsync(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceOptionalModelWithOptional(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call ConvenienceOptionalModelWithOptional with required request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = client.ConvenienceOptionalModelWithOptional(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceRequiredModelWithOptionalAsync(global::ConvenienceInCadl.Models.Model,global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ConvenienceRequiredModelWithOptionalAsync with required parameters.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var required = new Model("<id>");
var result = await client.ConvenienceRequiredModelWithOptionalAsync(required, default);
]]></code>
</example>
    </member>
    <member name="ConvenienceRequiredModelWithOptional(global::ConvenienceInCadl.Models.Model,global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ConvenienceRequiredModelWithOptional with required parameters.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var required = new Model("<id>");
var result = client.ConvenienceRequiredModelWithOptional(required, default);
]]></code>
</example>
    </member>
    <member name="ConvenienceRequiredModelWithOptionalAsync(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call ConvenienceRequiredModelWithOptionalAsync with required request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = await client.ConvenienceRequiredModelWithOptionalAsync(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceRequiredModelWithOptional(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call ConvenienceRequiredModelWithOptional with required request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = client.ConvenienceRequiredModelWithOptional(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceOptionalModelWithRequiredAsync(global::ConvenienceInCadl.Models.Model,global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ConvenienceOptionalModelWithRequiredAsync with required parameters.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var optional = new Model("<id>");
var result = await client.ConvenienceOptionalModelWithRequiredAsync(optional, default);
]]></code>
</example>
    </member>
    <member name="ConvenienceOptionalModelWithRequired(global::ConvenienceInCadl.Models.Model,global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ConvenienceOptionalModelWithRequired with required parameters.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var optional = new Model("<id>");
var result = client.ConvenienceOptionalModelWithRequired(optional, default);
]]></code>
</example>
    </member>
    <member name="ConvenienceOptionalModelWithRequiredAsync(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call ConvenienceOptionalModelWithRequiredAsync with required parameters and request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = await client.ConvenienceOptionalModelWithRequiredAsync(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ConvenienceOptionalModelWithRequired(global::Azure.Core.RequestContent,global::Azure.RequestContext)">
<example>
This sample shows how to call ConvenienceOptionalModelWithRequired with required parameters and request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = client.ConvenienceOptionalModelWithRequired(RequestContent.Create(data), new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ProtocolOptionalBeforeRequiredAsync(global::ConvenienceInCadl.Models.Model,int?,global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ProtocolOptionalBeforeRequiredAsync with required parameters.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var required = new Model("<id>");
var result = await client.ProtocolOptionalBeforeRequiredAsync(required, 1234, default);
]]></code>
</example>
    </member>
    <member name="ProtocolOptionalBeforeRequired(global::ConvenienceInCadl.Models.Model,int?,global::System.Threading.CancellationToken)">
<example>
This sample shows how to call ProtocolOptionalBeforeRequired with required parameters.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var required = new Model("<id>");
var result = client.ProtocolOptionalBeforeRequired(required, 1234, default);
]]></code>
</example>
    </member>
    <member name="ProtocolOptionalBeforeRequiredAsync(global::Azure.Core.RequestContent,int?,global::Azure.RequestContext)">
<example>
This sample shows how to call ProtocolOptionalBeforeRequiredAsync with required parameters and request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = await client.ProtocolOptionalBeforeRequiredAsync(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call ProtocolOptionalBeforeRequiredAsync with all parameters and request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = await client.ProtocolOptionalBeforeRequiredAsync(RequestContent.Create(data), 1234, new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
    <member name="ProtocolOptionalBeforeRequired(global::Azure.Core.RequestContent,int?,global::Azure.RequestContext)">
<example>
This sample shows how to call ProtocolOptionalBeforeRequired with required parameters and request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = client.ProtocolOptionalBeforeRequired(RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call ProtocolOptionalBeforeRequired with all parameters and request content.
<code><![CDATA[
var client = new ConvenienceInCadlClient();

var data = new {
    id = "<id>",
};

Response response = client.ProtocolOptionalBeforeRequired(RequestContent.Create(data), 1234, new RequestContext());
Console.WriteLine(response.Status);
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>Model</c>:
<code>{
  id: string, # Required.
}
</code>

</remarks>
    </member>
  </members>
</doc>