// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace ConvenienceInCadl.Samples
{
    public class Samples_ConvenienceInCadlClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateConvenience()
        {
            var client = new ConvenienceInCadlClient();

            Response response = client.UpdateConvenience(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceOptionalBeforeRequired()
        {
            var client = new ConvenienceInCadlClient();

            var data = new
            {
                id = "<id>",
            };

            Response response = client.ConvenienceOptionalBeforeRequired(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Protocol()
        {
            var client = new ConvenienceInCadlClient();

            Response response = client.Protocol();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceWithOptional()
        {
            var client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceWithOptional();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceWithRequired()
        {
            var client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceWithRequired(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceShouldNotGenerate()
        {
            var client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceShouldNotGenerate();
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolShouldNotGenerateConvenience()
        {
            var client = new ConvenienceInCadlClient();

            Response response = client.ProtocolShouldNotGenerateConvenience();
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolOptionalQuery()
        {
            var client = new ConvenienceInCadlClient();

            Response response = client.ProtocolOptionalQuery();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolRequiredQuery()
        {
            var client = new ConvenienceInCadlClient();

            Response response = client.ProtocolRequiredQuery(1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolOptionalModel()
        {
            var client = new ConvenienceInCadlClient();

            var data = new
            {
                id = "<id>",
            };

            Response response = client.ProtocolOptionalModel(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolRequiredModel()
        {
            var client = new ConvenienceInCadlClient();

            var data = new
            {
                id = "<id>",
            };

            Response response = client.ProtocolRequiredModel(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceOptionalQueryWithOptional()
        {
            var client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceOptionalQueryWithOptional();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceRequiredQueryWithOptional()
        {
            var client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceRequiredQueryWithOptional(1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceOptionalQueryWithRequired()
        {
            var client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceOptionalQueryWithRequired(1234, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceRequiredQueryWithRequired()
        {
            var client = new ConvenienceInCadlClient();

            Response response = client.ConvenienceRequiredQueryWithRequired(1234, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceOptionalModelWithOptional()
        {
            var client = new ConvenienceInCadlClient();

            var data = new
            {
                id = "<id>",
            };

            Response response = client.ConvenienceOptionalModelWithOptional(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceRequiredModelWithOptional()
        {
            var client = new ConvenienceInCadlClient();

            var data = new
            {
                id = "<id>",
            };

            Response response = client.ConvenienceRequiredModelWithOptional(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConvenienceOptionalModelWithRequired()
        {
            var client = new ConvenienceInCadlClient();

            var data = new
            {
                id = "<id>",
            };

            Response response = client.ConvenienceOptionalModelWithRequired(RequestContent.Create(data), new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ProtocolOptionalBeforeRequired()
        {
            var client = new ConvenienceInCadlClient();

            var data = new
            {
                id = "<id>",
            };

            Response response = client.ProtocolOptionalBeforeRequired(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }
    }
}
