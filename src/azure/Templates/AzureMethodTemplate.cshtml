@using System
@using System.Linq
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.CSharp.Model
@using AutoRest.CSharp.vanilla.Templates.Rest.Client
@inherits AutoRest.Core.Template<AutoRest.CSharp.Azure.Model.MethodCsa>

@if (!Model.IsLongRunningOperation)
{
@:@(Include(new MethodTemplate(), (MethodCs)Model))
}
else if (Model.HttpMethod == HttpMethod.Post || Model.HttpMethod == HttpMethod.Delete)
{
if (!string.IsNullOrWhiteSpace(Model.Description) || !string.IsNullOrWhiteSpace(Model.Summary))
{
@:/// <summary>
@:@WrapComment("/// ", String.IsNullOrEmpty(Model.Summary) ? Model.Description.EscapeXmlComment() : Model.Summary.EscapeXmlComment())
if (!string.IsNullOrWhiteSpace(Model.ExternalDocsUrl))
{
@:/// <see href="@Model.ExternalDocsUrl" />
}
@:/// </summary>
}
if (!String.IsNullOrEmpty(Model.Description) && !String.IsNullOrEmpty(Model.Summary))
{
@:/// <remarks>
@:@WrapComment("/// ", Model.Description.EscapeXmlComment())
@:/// </remarks>
}
foreach (ParameterCs parameter in Model.LocalParameters)
{
@:/// <param name='@parameter.Name'>
@WrapComment("/// ", parameter.DocumentationString.EscapeXmlComment())@:
@:/// </param>
}
@:/// <param name='customHeaders'>
@:/// The headers that will be added to request.
@:/// </param>
@:/// <param name='cancellationToken'>
@:/// The cancellation token.
@:/// </param>
<text>
@(Model.GetObsoleteAttribute())
@((Model as MethodCs).AccessModifier) async System.Threading.Tasks.Task<@(Model.OperationResponseReturnTypeString)> @(Model.Name)WithHttpMessagesAsync(@(Model.GetAsyncMethodParameterDeclaration(true)))
{
    // Send request
    @(Model.OperationResponseReturnTypeString) _response = await Begin@(Model.Name)WithHttpMessagesAsync(@(Model.GetAsyncMethodInvocationArgs("customHeaders"))).ConfigureAwait(false);

    return await @(Model.ClientReference).GetPostOrDeleteOperationResultAsync(_response, customHeaders, cancellationToken).ConfigureAwait(false);
}
</text>
}
else if (Model.HttpMethod == HttpMethod.Put || Model.HttpMethod == HttpMethod.Patch)
{
if (!String.IsNullOrEmpty(Model.Description) || !String.IsNullOrEmpty(Model.Summary))
{
@:/// <summary>
@:@WrapComment("/// ", String.IsNullOrEmpty(Model.Summary) ? Model.Description.EscapeXmlComment() : Model.Summary.EscapeXmlComment())
if (!string.IsNullOrWhiteSpace(Model.ExternalDocsUrl))
{
@:/// <see href="@Model.ExternalDocsUrl" />
}
@:/// </summary>
}
if (!String.IsNullOrEmpty(Model.Description) && !String.IsNullOrEmpty(Model.Summary))
{
@:/// <remarks>
@:@WrapComment("/// ", Model.Description.EscapeXmlComment())
@:/// </remarks>
}
foreach (ParameterCs parameter in Model.LocalParameters)
{
@:/// <param name='@parameter.Name'>
@WrapComment("/// ", parameter.DocumentationString.EscapeXmlComment())@:
@:/// </param>
}
@:/// <param name='customHeaders'>
@:/// The headers that will be added to request.
@:/// </param>
@:/// <param name='cancellationToken'>
@:/// The cancellation token.
@:/// </param>
<text>
@(Model.GetObsoleteAttribute())
@((Model as MethodCs).AccessModifier) async System.Threading.Tasks.Task<@(Model.OperationResponseReturnTypeString)> @(Model.Name)WithHttpMessagesAsync(@(Model.GetAsyncMethodParameterDeclaration(true)))
{
    // Send Request
    @(Model.OperationResponseReturnTypeString) _response = await Begin@(Model.Name)WithHttpMessagesAsync(@(Model.GetAsyncMethodInvocationArgs("customHeaders"))).ConfigureAwait(false);

    return await @(Model.ClientReference).GetPutOrPatchOperationResultAsync(_response, customHeaders, cancellationToken).ConfigureAwait(false);
}
</text>
}
