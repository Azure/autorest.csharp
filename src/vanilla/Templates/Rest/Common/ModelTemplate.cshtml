@using System.Linq
@using AutoRest.Core
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.CSharp
@using AutoRest.CSharp.Model
@using AutoRest.Extensions
@inherits Template<global::AutoRest.CSharp.Model.CompositeTypeCs>
@Header("// ")
@EmptyLine
namespace @(Settings.Namespace).@(Settings.ModelsName)
{
    using System.Linq;
@EmptyLine

@if (!string.IsNullOrEmpty(Model.EffectiveDocumentation))
{
    @:/// <summary>
    @:@WrapComment("/// ", Model.EffectiveDocumentation)
    @:/// </summary>
}
@if (!string.IsNullOrEmpty(Model.Summary) && !string.IsNullOrWhiteSpace(Model.Documentation))
{
    @:/// <remarks>
    @:@WrapComment("/// ", Model.Documentation.EscapeXmlComment())
    @:/// </remarks>
}
@if (Model.NeedsPolymorphicConverter)
{
    @:[Newtonsoft.Json.JsonObject("@Model.SerializedName")]
}
@if (Model.NeedsTransformationConverter)
{
    @:[Microsoft.Rest.Serialization.JsonTransformation]
}
@if (Model.Deprecated)
{
    @:[System.Obsolete()]
}
    public partial class @Model.Name@(Model.BaseModelType != null ? " : " + Model.BaseModelType.Name : "")
    {
        /// <summary>
        @WrapComment("/// ", ("Initializes a new instance of the " + Model.Name + " class.").EscapeXmlComment())
        /// </summary>
        public @(Model.Name)()
        {
@foreach(var property in Model.ComposedProperties.Where(p => p.ModelType is CompositeType ct
    && !p.IsConstant
    && p.IsRequired
    && ct.ContainsConstantProperties))
{
            @:this.@(property.Name) = new @(property.ModelTypeName)();
}
            CustomInit();
        }

        @EmptyLine

        @if (!string.IsNullOrEmpty(Model.ConstructorParameters))
        {
        @:/// <summary>
        @:@WrapComment("/// ", ("Initializes a new instance of the " + Model.Name + " class.").EscapeXmlComment())
        @:/// </summary>
foreach (var parameter in Model.ConstructorParametersDocumentation)
{
        @:@WrapComment("/// ", parameter)
}
        @:public @(Model.Name)(@Model.ConstructorParameters)
if (!string.IsNullOrEmpty(Model.BaseConstructorCall))
{
            @:@(Model.BaseConstructorCall)
}
        @:{

foreach (var property in Model.InstanceProperties)
{
            @:this.@(property.Name) = @(CodeNamer.Instance.CamelCase(property.Name));
}
        @:    CustomInit();
        @:}
        }

@if (Model.ClassProperties.Any())
{
        @:/// <summary>
        @:@WrapComment("/// ", ("Static constructor for " + Model.Name + " class.").EscapeXmlComment())
        @:/// </summary>
        @:static @(Model.Name)()
        @:{
foreach (var property in Model.ClassProperties)
{
            @:@(property.Name) = @(property.DefaultValue);
}

        @:}
}
        @EmptyLine
        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();
        
        @EmptyLine
@foreach (PropertyCs property in Model.InstanceProperties)
{
        @:/// <summary>
        @:@WrapComment("/// ", property.GetFormattedPropertySummary())
        @:/// </summary>
            if(!string.IsNullOrEmpty(property.Summary) && !string.IsNullOrEmpty(property.Documentation))
            { 
        @:/// <remarks>
        @:@WrapComment("/// ", property.Documentation)
        @:/// </remarks>
            }
foreach (var conv in property.JsonConverters)
{
        @:[Newtonsoft.Json.JsonConverter(typeof(@conv))]
}
switch (property.Flavor)
{
    case PropertyFlavor.AdditionalProperties:
        @:[Newtonsoft.Json.JsonExtensionData]
        break;
    case PropertyFlavor.ForwardTo:
    case PropertyFlavor.Implementation:
        @:[Newtonsoft.Json.JsonIgnore]
        break;
    case PropertyFlavor.Regular:
        @:[Newtonsoft.Json.JsonProperty(PropertyName = "@property.SerializedName")]
        break;
    default:
        throw new System.NotImplementedException();
}
if (property.Deprecated)
{
        @:[System.Obsolete()]
}
switch (property.Flavor)
{
    case PropertyFlavor.ForwardTo:
        @:public @property.ModelTypeName @property.Name
        @:{ 
        @:    get { return this.@(property.ForwardTo.Name); }
        @:    set { this.@(property.ForwardTo.Name) = value; }
        @:}
        break;
    case PropertyFlavor.Implementation:
        var impl = property.GetImplementation("csharp");
        if (impl == null)
        {
        @:public @property.ModelTypeName @property.Name { get; @(property.IsReadOnly ? "private " : "")set; }
        }
        else
        {
        @:public @property.ModelTypeName @property.Name
        @:{ 
        @:@impl
        @:}
        }
        break;
    case PropertyFlavor.AdditionalProperties:
    case PropertyFlavor.Regular:
        @:public @property.ModelTypeName @property.Name { get; @(property.IsReadOnly ? "private " : "")set; }
        break;
    default:
        throw new System.NotImplementedException();
}
        @EmptyLine
}

@foreach (var property in Model.ClassProperties)
{
        @:/// <summary>
        @:@WrapComment("/// ", property.Documentation.EscapeXmlComment())
        @:/// </summary>
foreach (var conv in property.JsonConverters)
{
        @:[Newtonsoft.Json.JsonConverter(typeof(@conv))]
}
        @:[Newtonsoft.Json.JsonProperty(PropertyName = "@property.SerializedName")]
if (property.Deprecated)
{
        @:[System.Obsolete()]
}
        @:public static @property.ModelTypeName @property.Name { get; private set; }
        @EmptyLine
}
@if(@Model.ShouldValidateChain())
{
        @:/// <summary>
        @:/// Validate the object.
        @:/// </summary>
        @:/// <exception cref="Microsoft.Rest.ValidationException">
        @:/// Thrown if validation fails
        @:/// </exception>
        @:public @Model.MethodQualifier void Validate()
        @:{
bool anythingToValidate = false;

if (Model.BaseModelType != null && Model.BaseModelType.ShouldValidateChain())
{
    anythingToValidate = true;
            @:base.Validate();
}

foreach (PropertyCs property in Model.InstanceProperties.Where(p => p.IsRequired && !p.IsReadOnly && p.IsNullable() ))
{
    anythingToValidate = true;
            @:if (this.@property.Name == null)
            @:{
                @:throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "@property.Name");
            @:}
}
foreach (var property in Model.InstanceProperties.Where(p => p.Constraints.Any() || !(p.ModelType is PrimaryType)))
{
    anythingToValidate = true;
            @:@property.ModelType.ValidateType(Model, $"this.{property.Name}", property.Constraints)
}
if (!anythingToValidate)
{
            @://Nothing to validate
}
        @:}
}

    @if (Model.CodeModel.ShouldGenerateXmlSerialization) {<text>
        /// <summary>
        /// Serializes the object to an XML node
        /// </summary>
        internal System.Xml.Linq.XElement XmlSerialize(System.Xml.Linq.XElement result)
        {</text>
        foreach(var property in Model.InstanceProperties.Where(p => !p.WasFlattened())) {<text>
        @if (property.IsNullable()) {<text>
            if( null != @(property.Name) ) 
            {</text>}
                @if (property.ModelType is CompositeType) {<text>
                result.Add(@(property.Name).XmlSerialize(new System.Xml.Linq.XElement( "@(property.XmlName)" )));</text>
                }
                else if (property.ModelType is DictionaryType)
                {
                    var vt = ((DictionaryType)property.ModelType).ValueType;
                    if (vt is DictionaryType || vt is SequenceType)
                    {
                        // todo: nothing right now.
                    } else if (vt is CompositeType) {<text>
                var dict = new System.Xml.Linq.XElement("@property.XmlName");
                foreach( var key in @(property.Name).Keys ) {
                    dict.Add(@(property.Name)[key].XmlSerialize(new System.Xml.Linq.XElement(key) ) );
                }
                result.Add(dict);</text>
                } else {<text>
                var dict = new System.Xml.Linq.XElement("@property.XmlName");
                foreach( var key in @(property.Name).Keys ){
                    dict.Add(new System.Xml.Linq.XElement( key, @(property.Name)[key] ) );
                }
                result.Add(dict);</text>}
                }
                else if (property.ModelType is SequenceType)
                {
                    var et = ((SequenceType)property.ModelType).ElementType;
                    if (et is DictionaryType || et is SequenceType)
                    {
                        // todo: nothing right now.
                    } else if (et is CompositeType) {if ((property.ModelType as SequenceType).XmlIsWrapped) {<text>
                var seq = new System.Xml.Linq.XElement("@property.XmlName");
                foreach( var value in @(property.Name) ){
                    seq.Add(value.XmlSerialize( new System.Xml.Linq.XElement( "@((property.ModelType as SequenceType).ElementXmlName)") ) );
                }
                result.Add(seq);</text>} 
                else {<text>
                foreach( var value in @(property.Name) ){
                    result.Add(value.XmlSerialize( new System.Xml.Linq.XElement( "@property.XmlName") ) );
                }</text>}} else {if ((property.ModelType as SequenceType).XmlIsWrapped) {<text>
                var seq = new System.Xml.Linq.XElement("@property.XmlName");
                foreach( var value in @(property.Name) ){
                    seq.Add(new System.Xml.Linq.XElement( "@((property.ModelType as SequenceType).ElementXmlName)", value ) );
                }
                result.Add(seq);</text>} 
                else {<text>
                foreach( var value in @(property.Name) ){
                    result.Add(new System.Xml.Linq.XElement( "@property.XmlName", value ) );
                }</text>}}
                } else if (property.ModelType is EnumType && !((EnumType)property.ModelType).ModelAsString) {
                    // serialize it as a enum type.
                    if (property.XmlIsAttribute) {<text>
                result.Add(new System.Xml.Linq.XAttribute("@property.XmlName", @(property.Name).ToSerializedValue()) );</text>
                    } else {<text>
                result.Add(new System.Xml.Linq.XElement("@property.XmlName", @(property.Name).ToSerializedValue()) );</text>
                    }
                } else {
                    // serialize it as a primitive/value type.
                    var primitiveExpression = property.Name;
                    var knownType = (property.ModelType as PrimaryType)?.KnownPrimaryType;
                    if (knownType == KnownPrimaryType.DateTimeRfc1123)
                    {
                        primitiveExpression = property.IsNullable()
                            ? $"{primitiveExpression}?.ToUniversalTime().ToString(\"R\")"
                            : $"{primitiveExpression}.ToUniversalTime().ToString(\"R\")";
                    }
                    if (property.XmlIsAttribute) {<text>
                result.Add(new System.Xml.Linq.XAttribute("@property.XmlName", @(primitiveExpression)) );</text>
                    } else {<text>
                result.Add(new System.Xml.Linq.XElement("@property.XmlName", @(primitiveExpression)) );</text>
                    }
                }
        @if (property.IsNullable()) {<text>
            }
        </text>}
    </text>}
    <text>
            return result;
        }

        /// <summary>
        /// Deserializes an XML node to an instance of @Model.Name
        /// </summary>
        internal static @Model.Name XmlDeserialize(string payload) 
        {
            // deserialize to xml and use the overload to do the work
            return XmlDeserialize( System.Xml.Linq.XElement.Parse( payload ) );
        }    

        internal static @Model.Name XmlDeserialize(System.Xml.Linq.XElement payload) 
        {
            var result = new @(Model.Name)();
        @if (Model.InstanceProperties.Any(p => !p.WasFlattened() && p.XmlIsAttribute)) {<text>
            System.Xml.Linq.XAttribute attribute;</text>
        }
        @*@if (Model.InstanceProperties.Any(p => !p.WasFlattened() && !p.XmlIsAttribute)) {<text>
            System.Xml.Linq.XElement element;</text>
        }*@

        @foreach(var property in Model.InstanceProperties.Where(p => !p.WasFlattened())) {
            @if (property.XmlIsAttribute) {<text>
            if( null != (attribute = payload.Attribute("@property.XmlName")))
            {
                @if (property.ModelType is EnumType && !((EnumType)property.ModelType).ModelAsString) {<text>
                
                result.@(property.Name) =attribute.Value.Parse@(property.ModelType.Name)();
                
                </text>} else {<text> 
                result.@(property.Name) = (@property.ModelTypeName)attribute;
                </text>}
            }
            </text>
                continue;
            }
            
            var deserializerName = $"deserialize{property.Name}";
            var resultName = $"result{property.Name}";

            <text>
            var @(deserializerName) = @(XmlSerialization.GenerateDeserializer(Model.CodeModel, property.ModelType, property.ModelTypeName));
            @property.ModelTypeName @(resultName);
            if (@(deserializerName)(payload, "@property.XmlName", out @(resultName)))
            {
                result.@(property.Name) = @(resultName);
            }
</text>
        }
            return result;
        } 
    </text>}
    
    }
}