@using System
@using System.Linq
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@inherits TemplateCs<AutoRest.CSharp.Model.CodeModelCs>


@XmlDocPropBaseUri()
@if(Model.IsCustomBaseUri)
{
@:internal string BaseUri {get; set;}
}
else
{
@:public System.Uri BaseUri { get; set; }
}
@EmptyLine

@XmlDocPropSerializationSettings()
public Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; private set; }
@EmptyLine

@XmlDocPropDeserializationSettings()
public Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; private set; }
@EmptyLine
        
@foreach (var property in Model.Properties)
{
@:@XmlDocSummary(property.Documentation.EscapeXmlComment())
@:public @property.ModelTypeName @property.Name { get; @(property.IsReadOnly || property.IsConstant ? "private " : "")set; }
@EmptyLine
}

@if (Model.Methods.Any(m => m.Group.IsNullOrEmpty()))
{
@EmptyLine
@:private I@(Model.Name)WithHttpMessages OperationsWithHttpMessages { get; set; }
@EmptyLine
@:public I@(Model.Name)WithHttpMessages WithHttpMessages()
@:{
@:      return this.OperationsWithHttpMessages;
@:}
@EmptyLine
}
        
@foreach (var operation in Model.AllOperations) 
{
@XmlDocProp(false, $"the I{operation.TypeName}")
@:public virtual I@(operation.TypeName) @(operation.NameForProperty) { get; private set; }
@EmptyLine
}

@XmlDocCtor(Model.Name)
@XmlDocParam("handlers", "delegating handlers to add to the http client pipeline", true)
@(Model.ContainsCredentials ? "protected" : Model.ConstructorVisibility) @(Model.Name)(params System.Net.Http.DelegatingHandler[] handlers) : base(handlers)
{
    this.Initialize();
}
@EmptyLine

@XmlDocCtor(Model.Name)
@XmlDocParam("rootHandler", "http client handler used to handle http transport", true)
@XmlDocParam("handlers", "delegating handlers to add to the http client pipeline", true)
@(Model.ContainsCredentials ? "protected" : Model.ConstructorVisibility) @(Model.Name)(System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : base(rootHandler, handlers)
{
    this.Initialize();
}
@EmptyLine

@if(!Model.IsCustomBaseUri)
{
@XmlDocCtor(Model.Name)
@XmlDocParamBaseUriOptional()
@XmlDocParam("handlers", "delegating handlers to add to the http client pipeline", true)
@XmlDocException("System.ArgumentNullException", "a required parameter is null")
@:@(Model.ContainsCredentials ? "protected" : Model.ConstructorVisibility) @(Model.Name)(System.Uri baseUri, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers)
@:{
      @ParamNullCheck("baseUri")
@:
@:    this.BaseUri = baseUri;
@:}
@:@EmptyLine 

@XmlDocCtor(Model.Name)
@XmlDocParamBaseUriOptional()
@XmlDocParam("rootHandler", "http client handler used to handle http transport", true)
@XmlDocParam("handlers", "delegating handlers to add to the http client pipeline", true)
@XmlDocException("System.ArgumentNullException", "a required parameter is null")
@:@(Model.ContainsCredentials ? "protected" : Model.ConstructorVisibility) @(Model.Name)(System.Uri baseUri, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
@:{
      @ParamNullCheck("baseUri")
@:
@:    this.BaseUri = baseUri;
@:}
@:@EmptyLine
}

@{var parameters = Model.Properties.Where(p => p.IsRequired && p.IsReadOnly);}
@if (parameters.Any())
{
@XmlDocCtor(Model.Name)
foreach (var param in parameters)
{
@XmlDocParamRaw(param.Name.ToCamelCase(), $"Required. {param.Documentation}")
}
@XmlDocParam("handlers", "delegating handlers to add to the http client pipeline", true)
@XmlDocException("System.ArgumentNullException", "a required parameter is null")
@:@(Model.ConstructorVisibility) @(Model.Name)(@(Model.RequiredConstructorParameters), params System.Net.Http.DelegatingHandler[] handlers) : this(handlers)
@:{
foreach (var param in parameters)
{
      @ParamNullCheck(param.Name.ToCamelCase())
}
foreach (var param in parameters)
{
@:    this.@(param.Name) = @(param.Name.ToCamelCase());
    @if (param.ModelType.IsPrimaryType(KnownPrimaryType.Credentials))
    {
    @:if (this.Credentials != null)
    @:{
    @:    this.Credentials.InitializeServiceClient(this);
    @:}
    }
}
@:}
@:@EmptyLine

@XmlDocCtor(Model.Name)
foreach (var param in parameters)
{
@XmlDocParamRaw(param.Name.ToCamelCase(), $"Required. {param.Documentation}")
}
@XmlDocParam("rootHandler", "http client handler used to handle http transport", true)
@XmlDocParam("handlers", "delegating handlers to add to the http client pipeline", true)
@XmlDocException("System.ArgumentNullException", "a required parameter is null")
@:@(Model.ConstructorVisibility) @(Model.Name)(@(Model.RequiredConstructorParameters), System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
@:{
foreach (var param in parameters)
{
      @ParamNullCheck(param.Name.ToCamelCase())
}
foreach (var param in parameters)
{
@:    this.@(param.Name) = @(param.Name.ToCamelCase());
    @if (param.ModelType.IsPrimaryType(KnownPrimaryType.Credentials))
    {
    @:if (this.Credentials != null)
    @:{
    @:    this.Credentials.InitializeServiceClient(this);
    @:}
    }
}
@:}
@:@EmptyLine

if(!Model.IsCustomBaseUri)
{
@XmlDocCtor(Model.Name)
@XmlDocParamBaseUriOptional()
foreach (var param in parameters)
{
@XmlDocParamRaw(param.Name.ToCamelCase(), $"Required. {param.Documentation}")
}
@XmlDocParam("handlers", "delegating handlers to add to the http client pipeline", true)
@XmlDocException("System.ArgumentNullException", "a required parameter is null")
@:@(Model.ConstructorVisibility) @(Model.Name)(System.Uri baseUri, @(Model.RequiredConstructorParameters), params System.Net.Http.DelegatingHandler[] handlers) : this(handlers)
@:{
      @ParamNullCheck("baseUri")
    foreach (var param in parameters)
    {
      @ParamNullCheck(param.Name.ToCamelCase())
}

@:    this.BaseUri = baseUri;

foreach (var param in parameters)
{
@:    this.@(param.Name) = @(param.Name.ToCamelCase());

@if (param.ModelType.IsPrimaryType(KnownPrimaryType.Credentials))
{
    @:if (this.Credentials != null)
    @:{
    @:    this.Credentials.InitializeServiceClient(this);
    @:}
}
}
@:}
@:@EmptyLine

@XmlDocCtor(Model.Name)
@XmlDocParamBaseUriOptional()
foreach (var param in parameters)
{
@XmlDocParamRaw(param.Name.ToCamelCase(), $"Required. {param.Documentation}")
}
@XmlDocParam("rootHandler", "http client handler used to handle http transport", true)
@XmlDocParam("handlers", "delegating handlers to add to the http client pipeline", true)
@XmlDocException("System.ArgumentNullException", "a required parameter is null")
@:@(Model.ConstructorVisibility) @(Model.Name)(System.Uri baseUri, @(Model.RequiredConstructorParameters), System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
@:{
      @ParamNullCheck("baseUri")

foreach (var param in parameters)
{
      @ParamNullCheck(param.Name.ToCamelCase())
}

@:    this.BaseUri = baseUri;

foreach (var param in parameters)
{
@:    this.@(param.Name) = @(param.Name.ToCamelCase());

@if (param.ModelType.IsPrimaryType(KnownPrimaryType.Credentials))
{
    @:if (this.Credentials != null)
    @:{
    @:    this.Credentials.InitializeServiceClient(this);
    @:}
}
}
@:}
@:@EmptyLine
}
}