@using System
@using System.Linq
@using AutoRest.Core.Utilities
@using AutoRest.CSharp.Model
@inherits TemplateCs<CodeModelCs>
@Header("// ")
@EmptyLine
namespace @Settings.Namespace
{
@foreach (var usingString in Model.Usings) {
    @:using @usingString;
}
@EmptyLine
    @XmlDocSummary(Model.Documentation.EscapeXmlComment())
    public partial interface I@(Model.Name) : System.IDisposable
    {
        @XmlDocPropBaseUri()
        @if (!Model.IsCustomBaseUri)
        {
        @:System.Uri BaseUri { get; set; }
        }
        
        @EmptyLine

        @XmlDocPropSerializationSettings()
        Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; }
        @EmptyLine

        @XmlDocPropDeserializationSettings()  
        Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; }
        @EmptyLine

        @foreach (var property in Model.Properties)
        {
        @XmlDocSummary(property.Documentation.EscapeXmlComment())
        @:@property.ModelTypeName @property.Name { get;@(property.IsReadOnly || property.IsConstant ? "" : " set;") }
        @EmptyLine
        }

        @EmptyLine
    @foreach(var operation in Model.AllOperations)
    {
        @XmlDocProp(false, $"the I{operation.TypeName}")
        @:I@(operation.TypeName) @(operation.NameForProperty) { get; }
        @EmptyLine
        @:
    }


    @foreach (MethodCs method in Model.Methods.Where(m => m.Group.IsNullOrEmpty()))
    {
        if (method.ExcludeFromInterface)
        {
            continue;
        }

if (method.SyncMethods == SyncMethodsGenerationMode.All || method.SyncMethods == SyncMethodsGenerationMode.Essential)
{
    @XmlDocHandleDescriptionSummaryExternalDocs(method.Description, method.Summary, method.ExternalDocsUrl)
    foreach (var parameter in method.LocalParameters)
    {
@XmlDocParamRaw(parameter.Name, parameter.Documentation.EscapeXmlComment())
    }
@if (method.Deprecated)
{
@:[System.Obsolete()]
}
@:@(method.ReturnTypeString) @(method.Name)(@method.GetSyncMethodParameterDeclaration(false));
@EmptyLine
}

@XmlDocHandleDescriptionSummaryExternalDocs(method.Description, method.Summary, method.ExternalDocsUrl)
foreach (var parameter in method.LocalParameters)
{
@XmlDocParamRaw(parameter.Name, parameter.Documentation.EscapeXmlComment())
}
@XmlDocParamCancellationToken()
@if (method.Deprecated)
{
@:[System.Obsolete()]
}
@:@(method.TaskExtensionReturnTypeString) @(method.Name)Async(@method.GetAsyncMethodParameterDeclaration());

    }
    }
}