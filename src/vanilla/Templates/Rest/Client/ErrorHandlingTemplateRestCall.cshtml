@using System.Globalization
@using System.Linq;
@using System
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.CSharp
@using AutoRest.CSharp.Model
@using AutoRest.Extensions
@inherits AutoRest.Core.Template<AutoRest.CSharp.Model.MethodCs>

@{ var errorCodes = Model.GetErrorResponseStatusCodes(); }

@foreach (var errorCode in errorCodes)
{
@:/// <summary>
@:/// Handle @((int)errorCode) errors
@:/// </summary>
@:/// <exception cref="@(MethodCs.GetExceptionTypeName(Model.Responses[errorCode]))">
@:/// Deserialize error body returned by the operation
@:/// </exception>
@:private async System.Threading.Tasks.Task Handle@((int)errorCode)ErrorResponseFor@(Model.Name)(System.Net.Http.HttpRequestMessage _httpRequest, System.Net.Http.HttpResponseMessage _httpResponse)
@:{
if(Model.Responses[errorCode].Body==null)
{
    if(!Model.IsAzureARMGenerator())
    {
    @:await HandleErrorResponseWithKnownTypeFor@(Model.Name)<string>(_httpRequest, _httpResponse, @((int)errorCode)));
    }
    else
    {
    @:await HandleErrorResponseWithoutBodyFor@(Model.Name)(_httpRequest, _httpResponse, @((int)errorCode)));
    }
}
else if(Model.Responses[errorCode].Body is CompositeTypeCs)
{
    @:await HandleErrorResponseFor@(Model.Name)<@(MethodCs.GetResponseTypeName(Model.Responses[errorCode]))>(_httpRequest, _httpResponse, @((int)errorCode), @(Model.GetDeserializationSettingsReference(Model.Responses[errorCode].Body)));
}
else
{
    @:await HandleErrorResponseWithKnownTypeFor@(Model.Name)<@(MethodCs.GetResponseTypeName(Model.Responses[errorCode]))>(_httpRequest, _httpResponse, @((int)errorCode));
}
@:}
@EmptyLine
}

/// <summary>
/// Handle other unhandled status codes
/// </summary>
/// <exception cref="@(MethodCs.GetExceptionTypeName(Model.DefaultResponse))">
/// Deserialize error body returned by the operation
/// </exception>
private async System.Threading.Tasks.Task HandleDefaultErrorResponseFor@(Model.Name)(System.Net.Http.HttpRequestMessage _httpRequest, System.Net.Http.HttpResponseMessage _httpResponse, int statusCode)
{
@if(Model.DefaultResponse.Body==null)
{
    @:await HandleErrorResponseWithKnownTypeFor@(Model.Name)<string>(_httpRequest, _httpResponse, statusCode);
}
else if(Model.DefaultResponse.Body is CompositeTypeCs)
{
    @:await HandleErrorResponseFor@(Model.Name)<@(MethodCs.GetResponseTypeName(Model.DefaultResponse))>(_httpRequest, _httpResponse, statusCode, @(Model.GetDeserializationSettingsReference(Model.DefaultResponse.Body)));
}
else
{
    @:await HandleErrorResponseWithKnownTypeFor@(Model.Name)<@(MethodCs.GetResponseTypeName(Model.DefaultResponse))>(_httpRequest, _httpResponse, statusCode);
}
}
@EmptyLine

/// <summary>
/// Method that generates error message for status code
/// </summary>
private string GetErrorMessageFor@(Model.Name)(int statusCode)
{
    return string.Format("Operation @(Model.Name) returned status code: '{0}'", statusCode);
}
@EmptyLine

@if(Model.IsErrorResponseWithKnownType())
{
@:/// <summary>
@:/// Handle responses where error model is a known primary type
@:/// Creates a RestException object and throws it
@:/// </summary>
@:/// <exception cref="T:Microsoft.Rest.RestException">
@:/// Deserialize error body returned by the operation
@:/// </exception>
@:private async System.Threading.Tasks.Task HandleErrorResponseWithKnownTypeFor@(Model.Name)<T>(System.Net.Http.HttpRequestMessage _httpRequest, System.Net.Http.HttpResponseMessage _httpResponse, int statusCode)
@:{
    @:string _responseContent = null;
    @:var ex = new RestException<T>(GetErrorMessageFor@(Model.Name)(statusCode))
                    @:{
                        @:HttpStatusCode = statusCode
                    @:};

    @:if (_httpResponse.Content != null)
    @:{
        @:try
        @:{
            @:_responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            @:var errorResponseModel = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<T>(_responseContent);
            @:ex.Body = errorResponseModel;
        @:}
        @:catch (Newtonsoft.Json.JsonException)
        @:{
            @:// Ignore the exception
        @:}
    @:} 
    @:else
    @:{
        @:_responseContent = string.Empty;
    @:}
    @EmptyLine
    @:ex.Request = new HttpRequestMessageWrapper(_httpRequest, _httpRequest.Content.AsString());
    @:ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
    @:_httpRequest.Dispose();
    @:if (_httpResponse != null)
    @:{
        @:_httpResponse.Dispose();
    @:}
    @:throw ex;
@:}
}

@if(Model.IsErrorResponseWithErrorModel())
{
@:/// <summary>
@:/// Handle error responses, deserialize errors of types V and throw exceptions of type T
@:/// </summary>
@:private async System.Threading.Tasks.Task HandleErrorResponseFor@(Model.Name)<V>(System.Net.Http.HttpRequestMessage _httpRequest, System.Net.Http.HttpResponseMessage _httpResponse, int statusCode, Newtonsoft.Json.JsonSerializerSettings deserializationSettings) 
    @:where V : Microsoft.Rest.IRestErrorModel
@:{
    @:string errorMessage = GetErrorMessageFor@(Model.Name)(statusCode);
    @:string _responseContent = null;
    @:if (_httpResponse.Content != null)
    @:{
        @:try
        @:{
            @:_responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            @:var errorResponseModel = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<V>(_responseContent, deserializationSettings);
            @:if(errorResponseModel!=null)
            @:{
                @:errorResponseModel.CreateAndThrowException(errorMessage, new HttpRequestMessageWrapper(_httpRequest, _httpRequest.Content.AsString()), new HttpResponseMessageWrapper(_httpResponse, _responseContent), statusCode);
            @:}
            @:else
            @:{
                if(!Model.IsAzureARMGenerator())
                {
                @:throw new Microsoft.Rest.RestException<V>(errorMessage)
                    @:{ 
                        @:Request = new HttpRequestMessageWrapper(_httpRequest, _httpRequest.Content.AsString()), 
                        @:Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent),
                        @:HttpStatusCode = statusCode
                    @:};
                }
                else 
                {
                @:throw new Microsoft.Rest.Azure.CloudException(errorMessage)
                @:{
                    @:Request = new HttpRequestMessageWrapper(_httpRequest, _httpRequest.Content.AsString()),
                    @:Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent),
                    @:HttpStatusCode = statusCode
                @:};
                }
            @:}
        @:}
        @:catch (Newtonsoft.Json.JsonException)
        @:{
            @:// Ignore the exception
            if(!Model.IsAzureARMGenerator())
            {
            @:throw new Microsoft.Rest.RestException<V>(errorMessage) 
                @:{
                    @:Request = new HttpRequestMessageWrapper(_httpRequest, _httpRequest.Content.AsString()), 
                    @:Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent),
                    @:HttpStatusCode = statusCode
                @:};
            }
            else 
            {
            @:throw new Microsoft.Rest.Azure.CloudException(errorMessage)
            @:{
                @:Request = new HttpRequestMessageWrapper(_httpRequest, _httpRequest.Content.AsString()),
                @:Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent),
                @:HttpStatusCode = statusCode
            @:};
            }
        @:}
        @:@(Model.SetRequestIdForException())
    @:}
    
    @:_httpRequest.Dispose();
    @:if (_httpResponse != null)
    @:{
        @:_httpResponse.Dispose();
    @:}
@:}
}