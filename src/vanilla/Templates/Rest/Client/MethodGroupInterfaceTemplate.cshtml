@using System
@using System.Linq;
@using AutoRest.Core.Utilities
@using AutoRest.CSharp
@using AutoRest.CSharp.Model
@inherits TemplateCs<AutoRest.CSharp.Model.MethodGroupCs>
@Header("// ")
@EmptyLine
namespace @Settings.Namespace
{
@foreach (var usingString in Model.Usings)
{
    @:using @usingString;
}
@EmptyLine
    @XmlDocSummary($"{Model.TypeName} operations.")
    public partial interface I@(Model.TypeName)
    {
    @foreach(MethodCs method in Model.Methods)
    {
        if (method.ExcludeFromInterface)
        {
            continue;
        }

        if (method.SyncMethods == SyncMethodsGenerationMode.All || method.SyncMethods == SyncMethodsGenerationMode.Essential)
        {
            @XmlDocHandleDescriptionSummaryExternalDocs(method.Description, method.Summary, method.ExternalDocsUrl)
        @XmlDocParam("operations", "operations group for this extension method")
            foreach (var parameter in method.LocalParameters)
            {
        @XmlDocParamRaw(parameter.Name, parameter.Documentation.EscapeXmlComment())
            }
            @if (method.Deprecated)
            {
            @:[System.Obsolete()]
            }
            @:@(method.ReturnTypeString) @(method.Name)(@method.GetSyncMethodParameterDeclaration(false));
            @EmptyLine
        }

@XmlDocHandleDescriptionSummaryExternalDocs(method.Description, method.Summary, method.ExternalDocsUrl)
@XmlDocParam("operations", "operations group for this extension method")
foreach (var parameter in method.LocalParameters)
{
@XmlDocParamRaw(parameter.Name, parameter.Documentation.EscapeXmlComment())
}
@XmlDocParamCancellationToken()
@if (method.Deprecated)
{
@:[System.Obsolete()]
}
@:@(method.TaskExtensionReturnTypeString) @(method.Name)Async(@method.GetAsyncMethodParameterDeclaration());

}
}
}