@using System.Globalization
@using System.Linq;
@using System
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.CSharp
@using AutoRest.CSharp.Model
@using AutoRest.Extensions
@inherits TemplateCs<AutoRest.CSharp.Model.MethodCs>

@XmlDocHandleDescriptionSummaryExternalDocs(Model.Description, Model.Summary, Model.ExternalDocsUrl)
@foreach (var parameter in Model.LocalParameters)
{
@XmlDocParamRaw(parameter.Name, parameter.Documentation.EscapeXmlComment())
}
@XmlDocParamCustomHeaders()
@XmlDocParamCancellationToken()
@XmlDocException(Model.OperationExceptionTypeString, "the operation returned an invalid status code")
@if (Model.Responses.Where(r => r.Value.Body != null).Any())
{
@XmlDocException("Microsoft.Rest.SerializationException", "unable to deserialize the response")
}
@if (Model.Parameters.Cast<ParameterCs>().Any(p => !p.IsConstant && p.IsRequired &&p.IsNullable()))
{
@XmlDocException("Microsoft.Rest.ValidationException", "a required parameter is null")
@XmlDocException("System.ArgumentNullException", "a required parameter is null")
    }
/// <return>
/// A response object containing the response body and response headers.
/// </return>
@if (Model.Deprecated)
{
@:[System.Obsolete()]
}
@((Model as MethodCs).AccessModifier) async System.Threading.Tasks.Task<@(Model.OperationResponseReturnTypeString)> @(Model.Name)WithHttpMessagesAsync(@(Model.GetAsyncMethodParameterDeclaration(true)))
{
    @foreach (ParameterCs parameter in Model.Parameters.Where(p => !p.IsConstant))
    {
        if (parameter.IsRequired && parameter.IsNullable())
        {
    @:if (@(parameter.Name) == null)
    @:{
        @:throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, nameof(@(parameter.Name)));
    @:}
@:
        }
        if(parameter.CanBeValidated  && (Model.HttpMethod != HttpMethod.Patch || parameter.Location != ParameterLocation.Body))
        {
    @:@(parameter.ModelType.ValidateType(Model, parameter.Name, parameter.Constraints))
        }
    }

    @foreach (ParameterCs parameter in Model.Parameters.Where(p => p.IsConstant && !p.IsClientProperty))
    {
    @:@(parameter.ModelTypeName) @(parameter.Name) = @(parameter.DefaultValue);
    }
    @Model.BuildInputMappings()
    // Tracing
    bool _shouldTrace = Microsoft.Rest.ServiceClientTracing.IsEnabled;
    string _invocationId = null;
    if (_shouldTrace)
    {
        _invocationId = Microsoft.Rest.ServiceClientTracing.NextInvocationId.ToString();
        System.Collections.Generic.Dictionary<string, object> tracingParameters = new System.Collections.Generic.Dictionary<string, object>();
    @foreach (var parameter in Model.LogicalParameters.Where(p => !p.IsClientProperty))
    {
        @:tracingParameters.Add("@(parameter.Name)", @(parameter.Name));
    }
        tracingParameters.Add("cancellationToken", cancellationToken);
        Microsoft.Rest.ServiceClientTracing.Enter(_invocationId, this, "@(Model.Name)", tracingParameters);
    }

    // Construct URL
@if (Model.IsAbsoluteUrl)
{
    @:string _url = "@(Model.Url)";
}
else
{
if (Model.IsCustomBaseUri)
{
    @:var _baseUrl = @(Model.ClientReference).BaseUri;
    @:string _url = _baseUrl.TrimEnd('/') + "/" + "@(Model.Url.TrimStart('/'))";
}
else
{
    @:var _baseUrl = @(Model.ClientReference).BaseUri.AbsoluteUri;
    @:string _url = new System.Uri(new System.Uri(_baseUrl.TrimEnd('/') + "/"), "@(Model.Url.TrimStart('/'))").ToString();
}    
}
    @(Model.BuildUrl("_url"))
    // Create HTTP transport objects
    var _httpRequest = new System.Net.Http.HttpRequestMessage();
    System.Net.Http.HttpResponseMessage _httpResponse = null;

    _httpRequest.Method = new System.Net.Http.HttpMethod("@(Model.HttpMethod.ToString().ToUpper())");
    _httpRequest.RequestUri = new System.Uri(_url);
    // Set Headers
    @(Model.SetDefaultHeaders)
    @foreach (var parameter in Model.LogicalParameters.OfType<ParameterCs>().Where(p => p.Location == ParameterLocation.Header && !p.IsHeaderCollection && !p.IsContentTypeHeader))
    {
        if (parameter.IsNullable())
        {
    @:if (@(parameter.Name) != null)
    @:{
        }
    @:_httpRequest.Headers.Remove("@(parameter.SerializedName)");
    @:_httpRequest.Headers.TryAddWithoutValidation("@(parameter.SerializedName)", @parameter.ModelType.ToString(Model.ClientReference, parameter.Name));
        if (parameter.IsNullable())
        {
    @:}
        }
    }
    @EmptyLine
    @foreach (var parameter in Model.LogicalParameters.OfType<ParameterCs>().Where(p => p.Location == ParameterLocation.Header && p.IsHeaderCollection))
    {
    @:if (@(parameter.Name) != null)
    @:{
    @:    foreach (var _header in @(parameter.Name))
    @:    {
    @:        var key = "@(parameter.HeaderCollectionPrefix)" + _header.Key;
    @:        _httpRequest.Headers.Remove(key);
    @:        _httpRequest.Headers.TryAddWithoutValidation(key, _header.Value);
    @:    }
    @:}
    }
    @EmptyLine
    if (customHeaders != null)
    {
        foreach(var _header in customHeaders)
        {
            _httpRequest.Headers.Remove(_header.Key);
            _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
        }
    }
    @EmptyLine

    // Serialize Request
    string _requestContent = null;
    @if (Model.RequestBody != null)
    {
        if (Model.RequestBody.ModelType.IsPrimaryType(KnownPrimaryType.Stream))
        {
        <text>
    if (@(Model.RequestBody.Name) != null && @(Model.RequestBody.Name) != System.IO.Stream.Null)
    {
      _httpRequest.Content = new System.Net.Http.StreamContent(@(Model.RequestBody.Name));
      _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse(@(Model.LocalParameters.Any(p => p.IsContentTypeHeader) ? $"{Model.LocalParameters.First(p => p.IsContentTypeHeader).Name.Value}.ToSerializedValue()" : $"\"{Model.RequestContentType}\""));
    }
        </text>
        }
        else
        {
            if (Model.RequestContentType.StartsWith("application/xml"))
            {
                if (Model.RequestBody.IsNullable()) {
    @:if(@(Model.RequestBody.Name) != null)
    @:{
                }

                    if (Model.RequestBody.ModelType is SequenceType && (Model.RequestBody.ModelType as SequenceType).ElementType is CompositeType)
                    { // for primitive sequences for now
    @:_requestContent = new System.Xml.Linq.XElement("@Model.RequestBody.ModelType.XmlName", System.Linq.Enumerable.Select(@(Model.RequestBody.Name), x => x.XmlSerialize(new System.Xml.Linq.XElement("@((Model.RequestBody.ModelType as SequenceType).ElementXmlName)")))).ToString();
                    }
                    else if (Model.RequestBody.ModelType is SequenceType)
                    { // for primitive sequences for now
    @:_requestContent = new System.Xml.Linq.XElement("@Model.RequestBody.ModelType.XmlName", System.Linq.Enumerable.Select(@(Model.RequestBody.Name), x => new System.Xml.Linq.XElement("@((Model.RequestBody.ModelType as SequenceType).ElementXmlName)", x))).ToString();
                    }
                    else
                    {
    @:_requestContent = @(Model.RequestBody.Name).XmlSerialize( new System.Xml.Linq.XElement("@Model.RequestBody.ModelType.XmlName") ).ToString(); 
    @:_requestContent = $"<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n{_requestContent}";
                    }
    @:_httpRequest.Content = new System.Net.Http.StringContent(_requestContent, System.Text.Encoding.UTF8);
    @:_httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("@(Model.RequestContentType)");

                if (Model.RequestBody.IsNullable()) {
    @:}
                }
            }
            else
            {
                if (Model.RequestBody.IsNullable())
                {
<text>
    if(@(Model.RequestBody.Name) != null)
    {
</text>
                }
<text>
        _requestContent = Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(@(Model.RequestBody.Name), @(Model.GetSerializationSettingsReference(Model.RequestBody.ModelType)));
        _httpRequest.Content = new System.Net.Http.StringContent(_requestContent, System.Text.Encoding.UTF8);
        _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("@(Model.RequestContentType)");
</text>
                if (Model.RequestBody.IsNullable())
                {
<text>
    }
</text>
                }
            }
        }
    }
    else if (Model.LogicalParameters.Any(p => p.Location == ParameterLocation.FormData))
    {
        if (!Model.RequestContentType.StartsWith("application/x-www-form-urlencoded"))
        {
    @:System.Net.Http.MultipartFormDataContent _multiPartContent = new System.Net.Http.MultipartFormDataContent();
        foreach (ParameterCs parameter in Model.LogicalParameters.Where(p => p.Location == ParameterLocation.FormData))
        {
    @:if (@(parameter.Name) != null)
    @:{
        @{ string localParam = "_"+ @parameter.Name.Value.Replace("this.", ""); }
        if (parameter.ModelType.IsPrimaryType(KnownPrimaryType.Stream))
        {
        <text>        
         System.Net.Http.StreamContent _@parameter.Name = new System.Net.Http.StreamContent(@parameter.Name);
        @(localParam).Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/octet-stream");
        System.IO.FileStream @(localParam)AsFileStream = @parameter.Name as System.IO.FileStream;
        if (@(localParam)AsFileStream != null)
        {
            System.Net.Http.Headers.ContentDispositionHeaderValue _contentDispositionHeaderValue = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");
            _contentDispositionHeaderValue.Name = "@(parameter.SerializedName)";
            _contentDispositionHeaderValue.FileName = @(localParam)AsFileStream.Name;
            @(localParam).Headers.ContentDisposition = _contentDispositionHeaderValue;        
        }    
</text>
            }
            else
            {
        @:System.Net.Http.StringContent @(localParam) = new System.Net.Http.StringContent(@(parameter.ModelType.ToString(Model.ClientReference, parameter.Name)), System.Text.Encoding.UTF8);
            }
        @:_multiPartContent.Add(@(localParam), "@(parameter.SerializedName)");
    @:}
        }
    @:_httpRequest.Content = _multiPartContent;
        }
        else
        {
    @:List<KeyValuePair<string, string>> values = new List<KeyValuePair<string, string>>();
        foreach (ParameterCs parameter in Model.LogicalParameters.Where(p => p.Location == ParameterLocation.FormData))
        {
    @:if(@(parameter.Name) != null)
    @:{
        @:values.Add("@(parameter.SerializedName)", @parameter.Name);
    @:}
        }
    @:FormUrlEncodedContent _formContent = new FormUrlEncodedContent(values);
    @:_httpRequest.Content = _formContent;
        }
    }

    @if (Settings.AddCredentials)
    {
        <text>
    // Set Credentials
    if (@(Model.ClientReference).Credentials != null)
    {
        cancellationToken.ThrowIfCancellationRequested();
        await @(Model.ClientReference).Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
    }
        </text>
    }
    
    // Send Request
    if (_shouldTrace)
    {
        Microsoft.Rest.ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
    }

    cancellationToken.ThrowIfCancellationRequested();
    _httpResponse = await @(Model.ClientReference).HttpClient.SendAsync(_httpRequest, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    if (_shouldTrace)
    {
        Microsoft.Rest.ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
    }

    System.Net.HttpStatusCode _statusCode = _httpResponse.StatusCode;
    cancellationToken.ThrowIfCancellationRequested();

    @if (!Model.ReturnType.Body.IsPrimaryType(KnownPrimaryType.Stream) && Model.HttpMethod != HttpMethod.Head)
    {<text>
        // ARM retry logic expects consumable _httpResponse.Content, also we try to read the content as string in case of a JsonException
        await @(Model.ClientReference).ResponseMessageEnsureContentBuffering(_httpResponse);
</text>
    }

    if (@(Model.FailureStatusCodePredicate))
    {
        var ex = new @(Model.OperationExceptionTypeString)(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
    @if (Model.DefaultResponse.Body != null)
    {
        @:try
        @:{
            if (Model.DefaultResponse.Body.IsPrimaryType(KnownPrimaryType.Stream))
            {
            @:@(Model.DefaultResponse.Body.AsNullableType()) _errorBody = await @(Model.ClientReference).ResponseMessageAsStream(_httpResponse);
            }
            else
            {
            @:@(Model.DefaultResponse.Body.AsNullableType()) _errorBody = await @(Model.ClientReference).ResponseMessageAsJSON<@(Model.DefaultResponse.Body.AsNullableType())>(_httpResponse);
            }
            @:if (_errorBody != null)
            @:{
                @:@(Model.InitializeExceptionWithMessage)
                @:ex.Body = _errorBody;
            @:}
        @:}
        @:catch (Newtonsoft.Json.JsonException)
        @:{
        @:    // Ignore the exception
        @:}
    }

        ex.Request = new Microsoft.Rest.HttpRequestMessageWrapper(_httpRequest, _requestContent);
        ex.Response = new Microsoft.Rest.HttpResponseMessageWrapper(_httpResponse, await @(Model.ClientReference).ResponseMessageAsString(_httpResponse));
        @(Model.InitializeException)
        if (_shouldTrace)
        {
            Microsoft.Rest.ServiceClientTracing.Error(_invocationId, ex);
        }

        _httpRequest.Dispose();
        if (_httpResponse != null)
        {
            _httpResponse.Dispose();
        }
        throw ex;
    }

    // Create Result
    var _result = new @(Model.OperationResponseReturnTypeString)();
    _result.Request = _httpRequest;
    _result.Response = _httpResponse;
    @(Model.InitializeResponseBody)

    @foreach (var responsePair in Model.Responses.Where(r => r.Value.Body != null))
    {
    <text>
    // Deserialize Response
    if ((int)_statusCode == @MethodCs.GetStatusCodeReference(responsePair.Key))
    {
        @if (responsePair.Value.Body.IsPrimaryType(KnownPrimaryType.Stream))
        {
        @:_result.Body = await @(Model.ClientReference).ResponseMessageAsStream(_httpResponse);
        }
        else
        {<text>
        try
        {
            @if (Model.CodeModel.ShouldGenerateXmlSerialization)
            {<text>
            @responsePair.Value.Body.AsNullableType(Model.IsXNullableReturnType) _tmp_ = null;
            if (_httpResponse.Content.Headers.ContentType.MediaType == "application/xml" &&
                @(XmlSerialization.XmlDeserializationClass).Root(@(XmlSerialization.GenerateDeserializer(Model.CodeModel, responsePair.Value.Body)))(System.Xml.Linq.XElement.Load(await @(Model.ClientReference).ResponseMessageAsTextReader(_httpResponse)), out _tmp_))
            {
                _result.Body = _tmp_;
            }
            else
            {
                _result.Body = await @(Model.ClientReference).ResponseMessageAsJSON<@(responsePair.Value.Body.AsNullableType(Model.IsXNullableReturnType))>(_httpResponse);
            }
</text>
            }
            else
            {<text>
            _result.Body = await @(Model.ClientReference).ResponseMessageAsJSON<@(responsePair.Value.Body.AsNullableType(Model.IsXNullableReturnType))>(_httpResponse);
</text>
            }
        }
        catch (Newtonsoft.Json.JsonException ex)
        {
            var _message = await @(Model.ClientReference).ResponseMessageAsString(_httpResponse);
            _httpRequest.Dispose();
            if (_httpResponse != null)
            {
                _httpResponse.Dispose();
            }
            throw new Microsoft.Rest.SerializationException("Unable to deserialize the response.", _message, ex);
        }
</text>
        }
    }
    </text>
    }

    @if (Model.ReturnType.Body != null && Model.DefaultResponse.Body != null && !Model.Responses.Any())
    {
        if (Model.DefaultResponse.Body.IsPrimaryType(KnownPrimaryType.Stream))
        {
    @:_result.Body = await @(Model.ClientReference).ResponseMessageAsStream(_httpResponse);
        }
        else
        {
    @:try
    @:{
        @:_result.Body = await @(Model.ClientReference).ResponseMessageAsJSON<@(Model.DefaultResponse.Body.AsNullableType())>(_httpResponse);
    @:}
    @:catch (Newtonsoft.Json.JsonException ex)
    @:{
    @:    var _message = await @(Model.ClientReference).ResponseMessageAsString(_httpResponse);
    @:    _httpRequest.Dispose();
    @:    if (_httpResponse != null)
    @:    {
    @:        _httpResponse.Dispose();
    @:    }
    @:    throw new Microsoft.Rest.SerializationException("Unable to deserialize the response.", _message, ex);
    @:}
        }
    }

    @if (Model.ReturnType.Headers != null)
    {

    @:try
    @:{
        @:_result.Headers = await @(Model.ClientReference).ResponseMessageHeadersAsJSON<@(Model.ReturnType.Headers.Name)>(_httpResponse);
        foreach (var property in (Model.ReturnType.Headers as CompositeType).Properties.OfType<PropertyCs>().Where(p => p.IsHeaderCollection))
        {
        @:_result.Headers.@(property.Name) = new @(property.ModelTypeName.Replace("IDictionary", "Dictionary"))();
        @:foreach (var header in _httpResponse.Headers)
        @:{
        @:    if (header.Key.StartsWith("@(property.HeaderCollectionPrefix)"))
        @:    {
        @:        _result.Headers.@(property.Name)[header.Key.Replace("@(property.HeaderCollectionPrefix)", "")] = header.Value.FirstOrDefault() as @((property.ModelType as DictionaryType).ValueType.Name);
        @:    }
        @:}
        }
    @:}
    @:catch (Newtonsoft.Json.JsonException ex)
    @:{
    @:    _httpRequest.Dispose();
    @:    if (_httpResponse != null)
    @:    {
    @:        _httpResponse.Dispose();
    @:    }
    @:    throw new Microsoft.Rest.SerializationException("Unable to deserialize the headers.", _httpResponse.GetHeadersAsJson().ToString(), ex);
    @:}
    }

    if (_shouldTrace)
    {
        Microsoft.Rest.ServiceClientTracing.Exit(_invocationId, _result);
    }

    return _result;
}
