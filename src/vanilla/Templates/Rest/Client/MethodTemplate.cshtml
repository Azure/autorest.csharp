@using System.Globalization
@using System.Linq;
@using System
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.CSharp
@using AutoRest.CSharp.Model
@using AutoRest.Extensions
@inherits AutoRest.Core.Template<AutoRest.CSharp.Model.MethodCs>

@if (!string.IsNullOrWhiteSpace(Model.Description) || !string.IsNullOrEmpty(Model.Summary))
{
@:/// <summary>
@:@WrapComment("/// ", String.IsNullOrEmpty(Model.Summary) ? Model.Description.EscapeXmlComment() : Model.Summary.EscapeXmlComment())
    if (!string.IsNullOrEmpty(Model.ExternalDocsUrl))
    {
@:/// <see href="@Model.ExternalDocsUrl" />
    }
@:/// </summary>
}
@if (!String.IsNullOrEmpty(Model.Description) && !String.IsNullOrEmpty(Model.Summary))
{
@:/// <remarks>
@:@WrapComment("/// ", Model.Description.EscapeXmlComment())
@:/// </remarks>
}
@foreach (ParameterCs parameter in Model.LocalParameters)
{
@:/// <param name='@parameter.Name'>
@WrapComment("/// ", parameter.DocumentationString.EscapeXmlComment())@:
@:/// </param>
}
/// <param name='customHeaders'>
/// Headers that will be added to request.
/// </param>
/// <param name='cancellationToken'>
/// The cancellation token.
/// </param>
/// <exception cref="@(Model.OperationExceptionTypeString)">
/// Thrown when the operation returned an invalid status code
/// </exception>
@if (Model.Responses.Where(r => r.Value.Body != null).Any())
{
@:/// <exception cref="Microsoft.Rest.SerializationException">
@:/// Thrown when unable to deserialize the response
@:/// </exception>
}
@if (Model.Parameters.Cast<ParameterCs>().Any(p => !p.IsConstant && p.IsRequired &&p.IsNullable()))
{
@:/// <exception cref="Microsoft.Rest.ValidationException">
@:/// Thrown when a required parameter is null
@:/// </exception>
@:/// <exception cref="System.ArgumentNullException">
@:/// Thrown when a required parameter is null
@:/// </exception>
    }
/// <return>
/// A response object containing the response body and response headers.
/// </return>
@(Model.GetObsoleteAttribute())
@(Model.AccessModifier) async System.Threading.Tasks.Task<@(Model.OperationResponseReturnTypeString)> @(Model.Name)WithHttpMessagesAsync(@(Model.GetAsyncMethodParameterDeclaration(true)))
{
    @switch (Model.Flavor)
    {
        case MethodFlavor.RestCall:
    @:@(Include(new MethodBodyTemplateRestCall(), Model))
            break;
        case MethodFlavor.ForwardTo:
    @:@(Include(new MethodBodyTemplateForwardTo(), Model))
            break;
        case MethodFlavor.Implementation:
    @:@(Model.GetImplementation("csharp") ?? "throw new System.NotImplementedException();")
            break;
        default:
            throw new System.NotImplementedException();
    }
}
