@using System
@using System.Linq
@using AutoRest.Core.Utilities
@using AutoRest.CSharp.Model
@inherits AutoRest.Core.Template<CodeModelCs>
@Header("// ")
@EmptyLine
namespace @Settings.Namespace
{
@foreach (var usingString in Model.Usings)
{
    @:using @usingString;
}
    using System;
    using System.Linq;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Agoda.Frameworks.LoadBalancing;
@EmptyLine

    public partial class @Model.Name
    {
        private readonly ILoadBalancingConfig loadBalancingConfig;

        public @(Model.Name)(HttpClient httpClient, ILoadBalancingConfig loadBalancingConfig) : this(httpClient, false)
        {
            this.loadBalancingConfig = loadBalancingConfig;
        }

        public @(Model.Name)(ServiceClientCredentials credentials, HttpClient httpClient, ILoadBalancingConfig loadBalancingConfig) : this(credentials, httpClient, false)
        {
            this.loadBalancingConfig = loadBalancingConfig;
        }

    @foreach (MethodCs method in Model.Methods)
    {
        if (method.ExcludeFromInterface)
        {
            continue;
        }

        @:@(Include(new ExtendedOperationMethodTemplate(), method))
        @EmptyLine 
    }

        private async Task<T> SendWithRetry<T>(string invocationId, System.Func<int, Task<T>> action, CancellationToken cancellationToken) where T : HttpOperationResponse
        {
            if (loadBalancingConfig == null)
            {
                return await action(1).ConfigureAwait(false);
            }

            var retryResults = await loadBalancingConfig.UrlResourceManager.ExecuteAsyncWithDiag(async (source, attemptCount) =>
            {
                this.BaseUri = new System.Uri(source);

                try
                {
                    var operationResponse = await action(attemptCount).ConfigureAwait(false);
                    if (IsTransientHttpStatusCode(operationResponse.Response.StatusCode))
                    {
                        throw new Frameworks.Http.TransientHttpRequestException(
                            operationResponse.Request.RequestUri.AbsolutePath,
                            operationResponse.Request.RequestUri.GetLeftPart(System.UriPartial.Path),
                            operationResponse.Response,
                            $"Response status code does not indicate success: ${operationResponse.Response.StatusCode}");
                    }

                    if (!operationResponse.Response.IsSuccessStatusCode)
                    {
                        throw new Frameworks.Http.HttpErrorResponseException(
                            operationResponse.Request.RequestUri.AbsolutePath,
                            operationResponse.Request.RequestUri.GetLeftPart(System.UriPartial.Path),
                            operationResponse.Response);
                    }

                    if (loadBalancingConfig.IsErrorResponse != null && loadBalancingConfig.IsErrorResponse(operationResponse.Response, await operationResponse.Response.Content.ReadAsStringAsync().ConfigureAwait(false)))
                    {
                        throw new Frameworks.Http.HttpErrorResponseException(
                            operationResponse.Request.RequestUri.AbsolutePath,
                            operationResponse.Request.RequestUri.GetLeftPart(System.UriPartial.Path),
                            operationResponse.Response);
                    }
                    return operationResponse;
                }
                catch (Exception ex)
                {
                    if (!string.IsNullOrWhiteSpace(invocationId))
                    {
                        Microsoft.Rest.ServiceClientTracing.Error(invocationId, ex);
                    }

                    if (ex is TaskCanceledException) 
                    {
                        throw new TimeoutException($"Request Timeout {source}", ex);
                    }
                    
                    throw;
                }

            }, loadBalancingConfig.ShouldRetryPredicate).ConfigureAwait(false);

            var result = retryResults.Last();
            if (result.IsError)
            {
                throw result.Exception;
            }

            return result.Result;
        }

        private static bool IsTransientHttpStatusCode(System.Net.HttpStatusCode code)
        {
            return (int)code >= 500 || code == System.Net.HttpStatusCode.RequestTimeout;
        }
    }
}
