@using System
@using System.Linq
@using AutoRest.Core.Utilities
@using AutoRest.CSharp.LoadBalanced.Model
@inherits AutoRest.Core.Template<AutoRest.CSharp.LoadBalanced.Model.CodeModelCs>
@foreach (var usingString in Model.Usings)
{
    @:using @usingString;
}
@EmptyLine
namespace @Settings.Namespace
{
@EmptyLine
    /// <summary>@(Model.Documentation.EscapeXmlComment())</summary>
    public partial interface I@(Model.Name) 
    {

    @EmptyLine

    /// <summary>Gets or sets json serialization settings.</summary>
    Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; }
    @EmptyLine

    /// <summary>Gets or sets json deserialization settings.</summary>
    Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; }
    @EmptyLine

    @EmptyLine
    @foreach (var operation in Model.AllOperations)
    {
        @:/// <summary>Gets the I@(operation.TypeName).</summary>
        @:I@(operation.TypeName) @(operation.NameForProperty) { get; }
        @EmptyLine
        @:
    }

    @foreach (MethodCs method in Model.Methods.Where(each => each.Group.IsNullOrEmpty()))
    {
        if (!String.IsNullOrEmpty(method.Description) || !String.IsNullOrEmpty(method.Summary))
        {
            @:/// <summary>@(String.IsNullOrEmpty(method.Summary) ? method.Description.EscapeXmlComment() : method.Summary.EscapeXmlComment())</summary>
        }
        if (!String.IsNullOrEmpty(method.Description) && !String.IsNullOrEmpty(method.Summary))
        {
            @:/// <remarks>@(method.Description.EscapeXmlComment())</remarks>
        }
        foreach (var parameter in method.LocalParameters)
        {
            @:/// <param name='@parameter.Name'>@(parameter.Documentation.EscapeXmlComment())</param>
        }
        @:/// <param name='customHeaders'>The headers that will be added to request.</param>
        @:/// <param name='cancellationToken'>The cancellation token.</param>
        @:@(method.OperationResponseReturnTypeString) @(method.Name)Async(@(method.GetAsyncMethodParameterDeclaration(true)));
        @EmptyLine
        @:
        }

    }
    }
