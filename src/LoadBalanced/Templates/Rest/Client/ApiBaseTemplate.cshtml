@inherits AutoRest.Core.Template<AutoRest.CSharp.LoadBalanced.Model.CodeModelCs>
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Agoda.Frameworks.Http.AutoRestExt;
using Microsoft.Rest.Serialization;
using Newtonsoft.Json;
@EmptyLine
namespace @Settings.Namespace
{
@EmptyLine
    public class Version
    {
        public const string ApiVersion = "@(Model.ApiVersion)";
    }
@EmptyLine
    public class ErrorEventArgs : EventArgs
    {
        public Exception Exception { get; set; }
        public string RouteName { get; set; }
        public ExecuteResult ExecuteResult { get; set; }
        public object Payload { get; set; }
    }
@EmptyLine
    public class MetricSendEventArgs : EventArgs
    {
        public long ElapsedMilliseconds { get; set; }
        public string Name { get; set; }
        public Dictionary<string, object> Tags { get; set; }
    }
@EmptyLine
    public class HttpData
    {
        public Dictionary<string, string> Headers {get; set;} 
    }
@EmptyLine
    public interface IApiBaseConfig
    {
        string name { get; set; }
        IEnumerable<string> settings { get; set; }
        TimeSpan? timeout { get; set; }
        int retryCount { get; set; }
        bool? manualCalcUris { get; set; }
        bool? overrideHostHeader { get; set; }
        JsonSerializerSettings serializationSettings { get; set; }
        JsonSerializerSettings deserializationSettings { get; set; }
        Dictionary<string, string> customHeaders { get; set; }
        bool? ignoreSslPolicyErrors { get; set; }
        EventHandler<MetricSendEventArgs> metricEvent { get; set; }
        EventHandler<ErrorEventArgs> errorEvent { get; set; }
        Func<HttpData> httpData { get; set; }
    }
    public class ApiBaseConfig : IApiBaseConfig
    {
        public string name { get; set; }
        public IEnumerable<string> settings { get; set; }
        public TimeSpan? timeout { get; set; }
        public int retryCount { get; set; }
        public bool? manualCalcUris { get; set; }
        public bool? overrideHostHeader { get; set; }
        public JsonSerializerSettings serializationSettings { get; set; }
        public JsonSerializerSettings deserializationSettings { get; set; }
        public Dictionary<string, string> customHeaders { get; set; }
        public bool? ignoreSslPolicyErrors { get; set; }
        public EventHandler<MetricSendEventArgs> metricEvent { get; set; }
        public EventHandler<ErrorEventArgs> errorEvent { get; set; }
        public Func<HttpData> httpData { get; set; }
    }
    public abstract class ApiBase
    {
        private JsonSerializerSettings _serializationSettings;
        private JsonSerializerSettings _deserializationSettings;
        public readonly Dictionary<string, string> _customHeaders;
        private event EventHandler<MetricSendEventArgs> _metricSendEvent;
        private event EventHandler<ErrorEventArgs> _errorEvent;
        private readonly bool _ignoreSslPolicyErrors;
        private Func<HttpData> _httpData;
        private readonly RrCompatibleHttpClient _client;

        protected ApiBase(IApiBaseConfig apiBaseConfig)
        {
            _serializationSettings = apiBaseConfig.serializationSettings;
            _deserializationSettings = apiBaseConfig.deserializationSettings;
            _customHeaders = apiBaseConfig.customHeaders;
            _ignoreSslPolicyErrors = apiBaseConfig.ignoreSslPolicyErrors ?? false;

            if (apiBaseConfig.metricEvent != null)
                _metricSendEvent += apiBaseConfig.metricEvent;
            if (apiBaseConfig.errorEvent != null)
                _errorEvent += apiBaseConfig.errorEvent;

            _httpData = apiBaseConfig.httpData;
            _client = new RrCompatibleHttpClient(
                apiBaseConfig.settings.ToArray(),
                apiBaseConfig.timeout,
                apiBaseConfig.retryCount,
                true,
                _ignoreSslPolicyErrors);
        }

        public virtual JsonSerializerSettings SerializationSettings =>
            _serializationSettings ?? (_serializationSettings =
                new JsonSerializerSettings
                {
                    Formatting = Formatting.Indented,
                    DateFormatHandling = DateFormatHandling.IsoDateFormat,
                    DateTimeZoneHandling = DateTimeZoneHandling.Utc,
                    NullValueHandling = NullValueHandling.Ignore,
                    ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                    ContractResolver = new ReadOnlyJsonContractResolver(),
                    Converters = new List<JsonConverter> { new Iso8601TimeSpanConverter() }
                });

        public virtual JsonSerializerSettings DeserializationSettings =>
            _deserializationSettings ?? (_deserializationSettings =
                new JsonSerializerSettings
                {
                    DateFormatHandling = DateFormatHandling.IsoDateFormat,
                    DateTimeZoneHandling = DateTimeZoneHandling.Utc,
                    NullValueHandling = NullValueHandling.Ignore,
                    ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                    ContractResolver = new ReadOnlyJsonContractResolver(),
                    Converters = new List<JsonConverter> { new Iso8601TimeSpanConverter() }
                });

        protected async Task InvokeNewRequest(
            string metricName,
            RequestParameters parameters)
        {
            await InvokeNewRequest<object>(metricName, parameters);
        }

        protected async Task<TResult> InvokeNewRequest<TResult>(
           string metricName,
           RequestParameters parameters)
        {
            var watch = Stopwatch.StartNew();
            ExecuteResult executeResult = null;
            try
            {
                // restructure if we need more in the future
                var httpDataHeaders = _httpData?.Invoke()?.Headers;
                if (httpDataHeaders != null && httpDataHeaders.Any())
                {
                    if (parameters.CustomHeaders == null)
                        parameters.CustomHeaders = new Dictionary<string, string>();
                    foreach (var pair in httpDataHeaders)
                    {
                        parameters.CustomHeaders[pair.Key] = pair.Value;
                    }
                }
                executeResult = await _client.ExecuteAsync(
                    parameters.HttpVerb,
                    GetUrl(parameters.RestUrl, parameters.QueryParameters, _serializationSettings),
                    parameters.HttpVerb == HttpMethod.Get
                        ? null
                        : SafeJsonConvert.SerializeObject(parameters.Body, _serializationSettings),
                    httpDataHeaders);
                var responseContent = executeResult.Results;
                if (!executeResult.IsOK)
                {
                    // try to get error message or other details if possible
                    if (!string.IsNullOrWhiteSpace(responseContent))
                    {
                        throw new Exception(responseContent);
                    }
                    var responseEx = executeResult.Exceptions.FirstOrDefault();
                    if (!string.IsNullOrWhiteSpace(responseEx?.Message))
                    {
                        throw new Exception(responseEx.Message);
                    }
                    throw executeResult.GetExeptions();
                }
                try
                {
                    if (typeof(TResult) == typeof(Response))
                    {
                        var response = new Response
                        {
                            HttpCode = executeResult.Status,
                            IsSuccessful = true,
                            RawResult = Encoding.UTF8.GetBytes(responseContent)
                        };
                        return (TResult)Convert.ChangeType(response, typeof(TResult));
                    }
                    var responseDto = JsonConvert.DeserializeObject<TResult>(responseContent, DeserializationSettings);
                    return responseDto;
                }
                catch (Exception ex)
                {
                    throw new Exception("Operation returned unexpected DTO type or invalid unsupported format", ex);
                }
            }
            catch (Exception ex)
            {
                _errorEvent?.Invoke(this, new ErrorEventArgs
                {
                    Exception = ex,
                    RouteName = metricName,
                    ExecuteResult = executeResult,
                    Payload = parameters
                });
                throw;
            }
            finally
            {
                var tags = new Dictionary<string, object>();
                if (executeResult != null)
                {
                    tags.Add("RetryCount", executeResult.RetryCount);
                    tags.Add("Status", executeResult.Status);
                    tags.Add("TotalReceivedBytes", executeResult.TotalReceivedBytes);
                    tags.Add("Uri", executeResult.Uri);
                }
                _metricSendEvent?.Invoke(this,
                    new MetricSendEventArgs
                    {
                        Name = metricName,
                        ElapsedMilliseconds = watch.ElapsedMilliseconds,
                        Tags = tags
                    });
            }
        }

        protected string GetUrl(
                string restUrl,
                Dictionary<string, object> queryParameters,
                JsonSerializerSettings serializationSettings)
        {
            var path = restUrl;
            var query = new Dictionary<string, string>();
            // Substitute the path parameters.
            foreach (var parameterName in queryParameters.Keys)
            {
                var rawValue = queryParameters[parameterName];
                if (parameterName == "body" || rawValue == null)
                {
                    continue;
                }
                string jsonValue;
                // Booleans must be passed as true and false words, using Newtonsoft converter,
                // rather than 0 and 1 integers, using Microsoft converter.
                if (rawValue is bool)
                {
                    jsonValue = JsonConvert.SerializeObject(rawValue);
                }
                else
                {
                    jsonValue = SafeJsonConvert
                        .SerializeObject(rawValue, serializationSettings)
                        .Trim('"');
                }
                var urlValue = Uri.EscapeDataString(jsonValue);
                var placeholder = $"{{{parameterName}}}";
                if (path.Contains(placeholder))
                {
                    path = path.Replace(placeholder, urlValue);
                }
                else
                {
                    query[parameterName] = urlValue;
                }
            }
            var uriBuilder = new UriBuilder(null, null, -1, path);
            //ignore body parameter when appending query parameter in URL
            uriBuilder.Query = string.Join("&", query.Select(parameter =>
            {
                var name = WebUtility.UrlEncode(parameter.Key);
                var value = parameter.Value;
                return $"{name}={value}";
            }));
            return uriBuilder.ToString();
        }

        public class RequestParameters
        {
            public HttpMethod HttpVerb { get; set; }
            public string RestUrl { get; set; }
            public Dictionary<string, object> QueryParameters { get; set; }
            public Dictionary<string, string> CustomHeaders { get; set; }
            public object Body { get; set; }
        }
    }
}
