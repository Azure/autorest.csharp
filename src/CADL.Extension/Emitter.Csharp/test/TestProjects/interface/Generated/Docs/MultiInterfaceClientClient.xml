<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetDogsConvenientAsync(RequestContext)">
<example>
This sample shows how to call GetDogsConvenientAsync and parse the result.
<code><![CDATA[
var client = new MultiInterfaceClientClient();

Response response = await client.GetDogsConvenientAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Dog</c>:
<code>{
  name: string, # Required. Name
}
</code>

</remarks>
    </member>
    <member name="GetDogsConvenient(RequestContext)">
<example>
This sample shows how to call GetDogsConvenient and parse the result.
<code><![CDATA[
var client = new MultiInterfaceClientClient();

Response response = client.GetDogsConvenient();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Dog</c>:
<code>{
  name: string, # Required. Name
}
</code>

</remarks>
    </member>
    <member name="SetDogsAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call SetDogsAsync with required request content and parse the result.
<code><![CDATA[
var client = new MultiInterfaceClientClient();

var data = new {
    name = "<name>",
};

Response response = await client.SetDogsAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Dog</c>:
<code>{
  name: string, # Required. Name
}
</code>

Response Body:

Schema for <c>Dog</c>:
<code>{
  name: string, # Required. Name
}
</code>

</remarks>
    </member>
    <member name="SetDogs(RequestContent,RequestContext)">
<example>
This sample shows how to call SetDogs with required request content and parse the result.
<code><![CDATA[
var client = new MultiInterfaceClientClient();

var data = new {
    name = "<name>",
};

Response response = client.SetDogs(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Dog</c>:
<code>{
  name: string, # Required. Name
}
</code>

Response Body:

Schema for <c>Dog</c>:
<code>{
  name: string, # Required. Name
}
</code>

</remarks>
    </member>
    <member name="GetCatsAsync(RequestContext)">
<example>
This sample shows how to call GetCatsAsync and parse the result.
<code><![CDATA[
var client = new MultiInterfaceClientClient();

Response response = await client.GetCatsAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Cat</c>:
<code>{
  name: string, # Required. Name
}
</code>

</remarks>
    </member>
    <member name="GetCats(RequestContext)">
<example>
This sample shows how to call GetCats and parse the result.
<code><![CDATA[
var client = new MultiInterfaceClientClient();

Response response = client.GetCats();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Cat</c>:
<code>{
  name: string, # Required. Name
}
</code>

</remarks>
    </member>
    <member name="SetCatsAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call SetCatsAsync with required request content and parse the result.
<code><![CDATA[
var client = new MultiInterfaceClientClient();

var data = new {
    name = "<name>",
};

Response response = await client.SetCatsAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Cat</c>:
<code>{
  name: string, # Required. Name
}
</code>

Response Body:

Schema for <c>Cat</c>:
<code>{
  name: string, # Required. Name
}
</code>

</remarks>
    </member>
    <member name="SetCats(RequestContent,RequestContext)">
<example>
This sample shows how to call SetCats with required request content and parse the result.
<code><![CDATA[
var client = new MultiInterfaceClientClient();

var data = new {
    name = "<name>",
};

Response response = client.SetCats(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Cat</c>:
<code>{
  name: string, # Required. Name
}
</code>

Response Body:

Schema for <c>Cat</c>:
<code>{
  name: string, # Required. Name
}
</code>

</remarks>
    </member>
  </members>
</doc>