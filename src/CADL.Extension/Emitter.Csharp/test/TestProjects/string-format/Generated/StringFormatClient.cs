// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace stringFormat
{
    // Data plane generated client.
    /// <summary> The StringFormat service client. </summary>
    public partial class StringFormatClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of StringFormatClient. </summary>
        public StringFormatClient() : this(new StringFormatClientOptions())
        {
        }

        /// <summary> Initializes a new instance of StringFormatClient. </summary>
        /// <param name="options"> The options for configuring the client. </param>
        public StringFormatClient(StringFormatClientOptions options)
        {
            options ??= new StringFormatClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _apiVersion = options.Version;
        }

        /// <summary> Path parameter is string with utcDateTime format. </summary>
        /// <param name="time"> The DateTime to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/StringFormatClient.xml" path="doc/members/member[@name='GetUtcDateTimeAsync(DateTimeOffset,RequestContext)']/*" />
        public virtual async Task<Response> GetUtcDateTimeAsync(DateTimeOffset time, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("StringFormatClient.GetUtcDateTime");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetUtcDateTimeRequest(time, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Path parameter is string with utcDateTime format. </summary>
        /// <param name="time"> The DateTime to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/StringFormatClient.xml" path="doc/members/member[@name='GetUtcDateTime(DateTimeOffset,RequestContext)']/*" />
        public virtual Response GetUtcDateTime(DateTimeOffset time, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("StringFormatClient.GetUtcDateTime");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetUtcDateTimeRequest(time, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> path paramter is string with uri format. </summary>
        /// <param name="uri"> The Uri to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uri"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/StringFormatClient.xml" path="doc/members/member[@name='GetUriAsync(Uri,RequestContext)']/*" />
        public virtual async Task<Response> GetUriAsync(Uri uri, RequestContext context = null)
        {
            Argument.AssertNotNull(uri, nameof(uri));

            using var scope = ClientDiagnostics.CreateScope("StringFormatClient.GetUri");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetUriRequest(uri, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> path paramter is string with uri format. </summary>
        /// <param name="uri"> The Uri to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uri"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/StringFormatClient.xml" path="doc/members/member[@name='GetUri(Uri,RequestContext)']/*" />
        public virtual Response GetUri(Uri uri, RequestContext context = null)
        {
            Argument.AssertNotNull(uri, nameof(uri));

            using var scope = ClientDiagnostics.CreateScope("StringFormatClient.GetUri");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetUriRequest(uri, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetUtcDateTimeRequest(DateTimeOffset time, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/utcDateTime/", false);
            uri.AppendPath(time, "O", true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetUriRequest(Uri uri, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri0 = new RawRequestUriBuilder();
            uri0.AppendPath("/uri/", false);
            uri0.Reset(uri);
            uri0.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri0;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
