// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using PetStore.Models;

namespace PetStore
{
    // Data plane generated client.
    /// <summary> Manage your pets. You can delete or get the Pet from pet store. </summary>
    public partial class PetStoreClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of PetStoreClient for mocking. </summary>
        protected PetStoreClient()
        {
        }

        /// <summary> Initializes a new instance of PetStoreClient. </summary>
        /// <param name="endpoint"> The Uri to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public PetStoreClient(Uri endpoint) : this(endpoint, new PetStoreClientOptions())
        {
        }

        /// <summary> Initializes a new instance of PetStoreClient. </summary>
        /// <param name="endpoint"> The Uri to use. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public PetStoreClient(Uri endpoint, PetStoreClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new PetStoreClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> delete. </summary>
        /// <param name="petId"> The id of pet. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PetStoreClient.xml" path="doc/members/member[@name='DeleteAsync(Int32,RequestContext)']/*" />
        public virtual async Task<Response> DeleteAsync(int petId, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PetStoreClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(petId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> delete. </summary>
        /// <param name="petId"> The id of pet. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PetStoreClient.xml" path="doc/members/member[@name='Delete(Int32,RequestContext)']/*" />
        public virtual Response Delete(int petId, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PetStoreClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(petId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a pet. Supports eTags. </summary>
        /// <param name="petId"> The id of pet. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Pet>> ReadValueAsync(int petId, CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("PetStoreClient.ReadValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await ReadAsync(petId, context).ConfigureAwait(false);
                return Response.FromValue(Pet.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a pet. Supports eTags. </summary>
        /// <param name="petId"> The id of pet. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Pet> ReadValue(int petId, CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("PetStoreClient.ReadValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = Read(petId, context);
                return Response.FromValue(Pet.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a pet. Supports eTags. </summary>
        /// <param name="petId"> The id of pet. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/PetStoreClient.xml" path="doc/members/member[@name='ReadAsync(Int32,RequestContext)']/*" />
        public virtual async Task<Response> ReadAsync(int petId, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PetStoreClient.Read");
            scope.Start();
            try
            {
                using HttpMessage message = CreateReadRequest(petId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a pet. Supports eTags. </summary>
        /// <param name="petId"> The id of pet. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/PetStoreClient.xml" path="doc/members/member[@name='Read(Int32,RequestContext)']/*" />
        public virtual Response Read(int petId, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PetStoreClient.Read");
            scope.Start();
            try
            {
                using HttpMessage message = CreateReadRequest(petId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="pet"> The Pet to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pet"/> is null. </exception>
        public virtual async Task<Response<Pet>> CreateAsync(Pet pet, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(pet, nameof(pet));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await CreateAsync(pet.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(Pet.FromResponse(response), response);
        }

        /// <param name="pet"> The Pet to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pet"/> is null. </exception>
        public virtual Response<Pet> Create(Pet pet, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(pet, nameof(pet));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = Create(pet.ToRequestContent(), context);
            return Response.FromValue(Pet.FromResponse(response), response);
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/PetStoreClient.xml" path="doc/members/member[@name='CreateAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PetStoreClient.Create");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/PetStoreClient.xml" path="doc/members/member[@name='Create(RequestContent,RequestContext)']/*" />
        public virtual Response Create(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PetStoreClient.Create");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="petId"> The String to use. </param>
        /// <param name="nameFilter"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="petId"/> or <paramref name="nameFilter"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="petId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<ToyListResults>> GetListPetToysResponseValuesAsync(string petId, string nameFilter, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(petId, nameof(petId));
            Argument.AssertNotNull(nameFilter, nameof(nameFilter));

            using var scope = ClientDiagnostics.CreateScope("PetStoreClient.GetListPetToysResponseValues");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await GetListPetToysResponsesAsync(petId, nameFilter, context).ConfigureAwait(false);
                return Response.FromValue(ToyListResults.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="petId"> The String to use. </param>
        /// <param name="nameFilter"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="petId"/> or <paramref name="nameFilter"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="petId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<ToyListResults> GetListPetToysResponseValues(string petId, string nameFilter, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(petId, nameof(petId));
            Argument.AssertNotNull(nameFilter, nameof(nameFilter));

            using var scope = ClientDiagnostics.CreateScope("PetStoreClient.GetListPetToysResponseValues");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = GetListPetToysResponses(petId, nameFilter, context);
                return Response.FromValue(ToyListResults.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="petId"> The String to use. </param>
        /// <param name="nameFilter"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="petId"/> or <paramref name="nameFilter"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="petId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/PetStoreClient.xml" path="doc/members/member[@name='GetListPetToysResponsesAsync(String,String,RequestContext)']/*" />
        public virtual async Task<Response> GetListPetToysResponsesAsync(string petId, string nameFilter, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(petId, nameof(petId));
            Argument.AssertNotNull(nameFilter, nameof(nameFilter));

            using var scope = ClientDiagnostics.CreateScope("PetStoreClient.GetListPetToysResponses");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetListPetToysResponsesRequest(petId, nameFilter, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="petId"> The String to use. </param>
        /// <param name="nameFilter"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="petId"/> or <paramref name="nameFilter"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="petId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/PetStoreClient.xml" path="doc/members/member[@name='GetListPetToysResponses(String,String,RequestContext)']/*" />
        public virtual Response GetListPetToysResponses(string petId, string nameFilter, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(petId, nameof(petId));
            Argument.AssertNotNull(nameFilter, nameof(nameFilter));

            using var scope = ClientDiagnostics.CreateScope("PetStoreClient.GetListPetToysResponses");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetListPetToysResponsesRequest(petId, nameFilter, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateDeleteRequest(int petId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pets/", false);
            uri.AppendPath(petId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateReadRequest(int petId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200304);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pets/", false);
            uri.AppendPath(petId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pets", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetListPetToysResponsesRequest(string petId, string nameFilter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pets/", false);
            uri.AppendPath(petId, true);
            uri.AppendPath("/toys", false);
            uri.AppendQuery("nameFilter", nameFilter, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200304;
        private static ResponseClassifier ResponseClassifier200304 => _responseClassifier200304 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 304 });
    }
}
