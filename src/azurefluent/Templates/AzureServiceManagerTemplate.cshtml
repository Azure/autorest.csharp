@using System
@using System.Linq
@using AutoRest.Core.Utilities
@using AutoRest.CSharp.Azure.Model
@using AutoRest.CSharp.Model
@inherits AutoRest.Core.Template<AutoRest.CSharp.Azure.Model.CodeModelCsa>

@{
    var serviceName = Model.ServiceName;
    var className = serviceName + "Manager";
}

@Header("// ")

using Microsoft.Azure.Management.ResourceManager.Fluent.Core;
using System;
using System.Linq;
using Microsoft.Azure.Management.ResourceManager.Fluent.Authentication;

namespace Microsoft.Azure.Management.@(serviceName).Fluent
{
    public class @className : Manager<I@(Model.Name)>, I@(className)
    {
        #region ctrs

        private @(className)(RestClient restClient, string subscriptionId) :
            base(restClient, subscriptionId, new @(Model.Name)(new Uri(restClient.BaseUri),
                restClient.Credentials,
                restClient.RootHttpHandler,
                restClient.Handlers.ToArray())
            {
                SubscriptionId = subscriptionId
            })
        {
        }

        #endregion

        #region @className builder

        /// <summary>
        /// Creates an instance of @(className) that exposes storage resource management API entry points.
        /// </summary>
        /// <param name="credentials">the credentials to use</param>
        /// <param name="subscriptionId">the subscription UUID</param>
        /// <returns>the @(className)</returns>
        public static I@(className) Authenticate(AzureCredentials credentials, string subscriptionId)
        {
        return Authenticate(RestClient.Configure()
                .WithEnvironment(credentials.Environment)
                .WithCredentials(credentials)
                .WithDelegatingHandler(new ProviderRegistrationDelegatingHandler(credentials))
                .Build(), subscriptionId);
        }

        /// <summary>
        /// Creates an instance of @(className) that exposes storage resource management API entry points.
        /// </summary>
        /// <param name="restClient">the RestClient to be used for API calls.</param>
        /// <param name="subscriptionId">the subscription UUID</param>
        /// <returns>the @(className)</returns>
        public static I@(className) Authenticate(RestClient restClient, string subscriptionId)
        {
            return new @(className)(restClient, subscriptionId);
        }

        /// <summary>
        /// Get a Configurable instance that can be used to create StorageManager with optional configuration.
        /// </summary>
        /// <returns>the instance allowing configurations</returns>
        public static IConfigurable Configure()
        {
            return new Configurable();
        }

        #endregion


        #region IConfigurable and it's implementation

        /// <summary>
        /// The inteface allowing configurations to be set.
        /// </summary>
        public interface IConfigurable : IAzureConfigurable<IConfigurable>
        {
            I@(className) Authenticate(AzureCredentials credentials, string subscriptionId);
        }

        protected class Configurable :
            AzureConfigurable<IConfigurable>,
            IConfigurable
        {
            /// <summary>
            /// Creates an instance of @(className) that exposes @(serviceName) management API entry points.
            /// </summary>
            /// <param name="credentials">credentials the credentials to use</param>
            /// <param name="subscriptionId">The subscription UUID</param>
            /// <returns>the interface exposing @(serviceName) management API entry points that work in a subscription</returns>
            public I@(className) Authenticate(AzureCredentials credentials, string subscriptionId)
            {
                return new @(className)(BuildRestClient(credentials), subscriptionId);
            }
        }

        #endregion
    }
    

    /// <summary>
    /// Entry point to Azure @(serviceName) resource management.
    /// </summary>
    public interface I@(className) : IManager<I@(Model.Name)>
    {
    }
}
