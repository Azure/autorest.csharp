trigger:
  branches:
    include:
    - feature/*

pr:
  branches:
    include:
    - feature/*

jobs:
  - job: Build
    variables:
      DotNetCoreSDKVersion: 3.0.100
    pool:
      vmImage: windows-2019
    steps:
      - task: DotNetCoreInstaller@2
        displayName: "Use .NET Core sdk $(DotNetCoreSDKVersion)"
        inputs:
          version: "$(DotNetCoreSDKVersion)"
      - task: NodeTool@0
        displayName: "Install Node 13.x"
        inputs:
          versionSpec: '13.x'
      - script: |
          npm ci
        displayName: "Install packages"
      - script: |
          dotnet build AutoRest.CSharp.V3.sln
        displayName: "Build"
        env:
          DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
          DOTNET_CLI_TELEMETRY_OPTOUT: 1
          DOTNET_MULTILEVEL_LOOKUP: 0
      - pwsh: ./eng/CodeChecks.ps1
        displayName: "Check if code is up-to-date"
      - script: |
          dotnet test AutoRest.CSharp.V3.sln
        displayName: "Test"
        env:
          DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
          DOTNET_CLI_TELEMETRY_OPTOUT: 1
          DOTNET_MULTILEVEL_LOOKUP: 0
      - ${{if and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal'))}}:
        - pwsh: ./eng/PublishRelease.ps1 -WorkingDirectory ./artifacts/bin/AutoRest.CSharp.V3/Debug/netcoreapp3.0/ -PackageJson ./src/AutoRest.CSharp.V3/package.json -Token $(azuresdk-github-pat) -Artifacts $(Build.ArtifactStagingDirectory) -BuildNumber $(Build.BuildNumber) -Sha $(Build.SourceVersion) -CoverageUser $(storage-coverage-user) -CoveragePass $(storage-coverage-pass)
          condition: succeeded()
          failOnStderr: false
          displayName: 'Publish to GitHub and coverage report'
