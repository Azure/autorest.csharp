trigger:
  branches:
    include:
    - feature/*

pr:
  branches:
    include:
    - feature/*

extends:
  template: /eng/pipelines/1es-redirect.yml
  parameters:
    variables:
      BlobFeedUrl: https://azuresdkartifacts.blob.core.windows.net/azure-sdk-tools/index.json
      OfficialBuildId: $(Build.BuildNumber)
      nugetMultiFeedWarnLevel: 'none'

    BinSkimSettings:
      enabled: false
      justificationForDisabling: 'Binskim is consistently crashing with "Fatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt." blocking a production pipeline'

    stages:
      - stage: 'Build_and_Test'
        pool:
          name: $(WINDOWSPOOL)
          image: $(WINDOWSVMIMAGE)
          os: windows
        jobs:
          - job: Build
            timeoutInMinutes: 120
            steps:
              - checkout: self
                fetchDepth: 1
              - checkout: azure-sdk-tools
                fetchDepth: 1
              - task: UseDotNet@2
                displayName: 'Use .NET Core SDK'
                retryCountOnTaskFailure: 3
                inputs:
                  useGlobalJson: true
                  performMultiLevelLookup: true
              - task: NodeTool@0
                displayName: "Install Node 18.x"
                inputs:
                  versionSpec: '18.x'
              - script: |
                  npm ci
                displayName: "Install packages"
                workingDirectory: $(Build.SourcesDirectory)/autorest.csharp
              - script: |
                  npm ls -a
                displayName: "List packages"
                workingDirectory: $(Build.SourcesDirectory)/autorest.csharp
              - script: |
                  npm run prettier
                displayName: "Emitter format check"
                workingDirectory: $(Build.SourcesDirectory)/autorest.csharp/src/TypeSpec.Extension/Emitter.Csharp
              - script: |
                  npm run lint
                displayName: "Emitter linter check"
                workingDirectory: $(Build.SourcesDirectory)/autorest.csharp/src/TypeSpec.Extension/Emitter.Csharp
              - script: 'dotnet pack src/AutoRest.CSharp/AutoRest.CSharp.csproj -o $(Build.ArtifactStagingDirectory)/packages -warnaserror -c Release'
                name: Package
                displayName: 'Package'
                workingDirectory: $(Build.SourcesDirectory)/autorest.csharp
                env:
                  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
                  DOTNET_CLI_TELEMETRY_OPTOUT: 1
                  DOTNET_MULTILEVEL_LOOKUP: 0
              - pwsh: ./eng/SharedCodeCheck.ps1
                displayName: "Check if shared source code is up-to-date"
                workingDirectory: $(Build.SourcesDirectory)/autorest.csharp
              - task: Npm@1
                displayName: 'Build CADL Ranch Mock Api project'
                inputs:
                  command: custom
                  customCommand: run build
                  workingDir: $(Build.SourcesDirectory)/autorest.csharp/test/CadlRanchMockApis
              - script: |
                  dotnet test AutoRest.CSharp.sln --filter Name!~Example_
                displayName: "Test"
                env:
                  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
                  DOTNET_CLI_TELEMETRY_OPTOUT: 1
                  DOTNET_MULTILEVEL_LOOKUP: 0
                workingDirectory: $(Build.SourcesDirectory)/autorest.csharp
              - script: |
                  dotnet test AutoRest.CSharp.sln -c Release --filter Name!~Example_
                displayName: "Test Release Configuration"
                env:
                  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
                  DOTNET_CLI_TELEMETRY_OPTOUT: 1
                  DOTNET_MULTILEVEL_LOOKUP: 0
                workingDirectory: $(Build.SourcesDirectory)/autorest.csharp
              - task: Npm@1
                displayName: 'Build TypeSpec csharp emitter'
                inputs:
                  command: custom
                  customCommand: run build
                  workingDir: $(Build.SourcesDirectory)/autorest.csharp/src/TypeSpec.Extension/Emitter.Csharp
              - script: |
                  npm run test --prefix src/TypeSpec.Extension/Emitter.Csharp
                displayName: 'Unit Test'
                workingDirectory: $(Build.SourcesDirectory)/autorest.csharp
              - ${{if and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal'))}}:
                - pwsh: >
                    ./eng/PublishRelease.ps1
                    -AutorestArtifactDirectory ./artifacts/bin/AutoRest.CSharp/Release/net7.0/
                    -CoverageDirectory ./artifacts/coverage
                    -TypeSpecEmitterDirectory ./src/TypeSpec.Extension/Emitter.Csharp
                    -GitHubToken $(azuresdk-github-pat)
                    -NpmToken $(azure-sdk-npm-token)
                    -BuildNumber $(Build.BuildNumber)
                    -Sha $(Build.SourceVersion)
                    -CoverageUser $(storage-coverage-user)
                    -CoveragePass $(storage-coverage-pass)
                  name: Publish
                  failOnStderr: false
                  displayName: 'Publish to GitHub, npm and coverage report'
                  workingDirectory: $(Build.SourcesDirectory)/autorest.csharp
              - ${{if eq(variables['System.TeamProject'], 'internal')}}:
                - task: AzureCLI@2
                  displayName: 'Upload Cadl Ranch Azure Coverage Report'
                  condition: and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal'))
                  inputs:
                    azureSubscription: "Cadl Ranch Storage"
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: npx cadl-ranch upload-coverage --coverageFile ./artifacts/coverage/cadl-ranch-coverage-csharp-azure.json --generatorName csharp --storageAccountName azuresdkcadlranch --generatorVersion $(node -p -e "require('./src/TypeSpec.Extension/Emitter.Csharp/package.json').version") --generatorMode azure
                    workingDirectory: $(Build.SourcesDirectory)/autorest.csharp
                - task: AzureCLI@2
                  displayName: 'Upload Cadl Ranch Standard Coverage Report'
                  condition: and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal'))
                  inputs:
                    azureSubscription: "Cadl Ranch Storage"
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: npx cadl-ranch upload-coverage --coverageFile ./artifacts/coverage/cadl-ranch-coverage-csharp-standard.json --generatorName csharp --storageAccountName azuresdkcadlranch --generatorVersion $(node -p -e "require('./src/TypeSpec.Extension/Emitter.Csharp/package.json').version") --generatorMode standard
                    workingDirectory: $(Build.SourcesDirectory)/autorest.csharp
              - ${{if and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal'))}}:
                - template: new-emitter-package-files.yml
                  parameters:
                    EmitterPackageJsonPath: '$(Build.SourcesDirectory)/autorest.csharp/src/TypeSpec.Extension/Emitter.Csharp/package.json'
                    AutorestCSharpVersion: $(Package.AutorestCSharpVersion)
                    TypeSpecEmitterVersion: $(Publish.TypeSpecEmitterVersion)
                    OutputDirectory: $(Build.ArtifactStagingDirectory)
                    ToolsRepositoryPath: $(Build.SourcesDirectory)/azure-sdk-tools
                    UseInternalFeed: false
            templateContext: 
              outputs:
                - output: pipelineArtifact
                  path: $(Build.SourcesDirectory)/autorest.csharp/artifacts/coverage
                  artifact: CoverageReport
                - output: pipelineArtifact
                  path: $(Build.ArtifactStagingDirectory)
                  artifact: build_artifacts
                  condition: succeededOrFailed()
                  displayName: "Publish build artifacts"
                - output: pipelineArtifact
                  path: $(Build.ArtifactStagingDirectory)/packages
                  artifact: packages
                  condition: succeededOrFailed()
                  displayName: "Publish packages artifact"
          
          - template: check-code-generation.yml
            parameters:
              name: Check_Code_Generation_A_B
              filter: "^[a-b]"
          
          - template: check-code-generation.yml
            parameters:
              name: Check_Code_Generation_C_L
              filter: "^[c-l]"
          
          - template: check-code-generation.yml
            parameters:
              name: Check_Code_Generation_M
              filter: "^m"
          
          - template: check-code-generation.yml
            parameters:
              name: Check_Code_Generation_N_Z
              filter: "^[n-z]"
          
      - ${{if and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal'))}}:
        - stage: Release
          pool:
            name: azsdk-pool-mms-ubuntu-2004-general
            image: azsdk-pool-mms-ubuntu-2004-1espt
            os: linux
          jobs:
          - deployment: Publish
            environment: net-release
            variables:
              Artifacts: $(System.DefaultWorkingDirectory)/_artifacts/packages
            
            strategy:
              runOnce:
                deploy:
                  steps:
                    - task: DownloadPipelineArtifact@2
                      displayName: Download Packages
                      inputs:
                        artifact: packages
                        path: $(Artifacts)
                    - task: 1ES.PublishNuget@1
                      displayName: 'Publish to DevOps Feed'
                      inputs:
                        useDotNetTask: false
                        publishPackageMetadata: true
                        packageParentPath: '$(Artifacts)'
                        packagesToPush: '$(Artifacts)/*.nupkg;!$(Artifacts)/*.symbols.nupkg'
                        nuGetFeedType: 'internal'
                        publishVstsFeed: '29ec6040-b234-4e31-b139-33dc4287b756/fa8c16a3-dbe0-4de2-a297-03065ec1ba3f'

        - stage: 'Update_azure_sdk_for_net'
          pool:
            name: $(LINUXPOOL)
            image: $(LINUXVMIMAGE)
            os: linux
          dependsOn:
            - Build_and_Test
            - Release
          variables:
            AutorestCSharpVersion: $[stageDependencies.Build_and_Test.Build.outputs['Package.AutorestCSharpVersion']]
            TypeSpecEmitterVersion: $[stageDependencies.Build_and_Test.Build.outputs['Publish.TypeSpecEmitterVersion']]
            BranchName: "auto-update-autorest-$(AutorestCSharpVersion)"
          jobs:
            - template: update-generator-versions.yml
              parameters:
                Name: Update_Generator_Version
                AutorestCSharpVersion: $(AutorestCSharpVersion)
                BranchName: $(BranchName)

            - template: generate-sdk-job-matrix-files.yml
              parameters:
                Name: Generate_Job_Matrix
                DependsOn: Update_Generator_Version
                JobCount: 7
                BranchName: $(BranchName)

            - template: update-azure-sdk-for-net-codes.yml
              parameters:
                Name: Update_Code
                DependsOn: Generate_Job_Matrix
                Matrix: $[dependencies.Generate_Job_Matrix.outputs['generate_job_matrix.matrix']]
                AutorestCSharpVersion: $(AutorestCSharpVersion)
                BranchName: $(BranchName)
                ContinueOnError: true

            - job: Create_PR
              dependsOn: Update_Code
              variables:
                UpdateCodeResult: $[dependencies.Update_Code.result]
              steps:
                - checkout: self
                - checkout: azure-sdk-tools
                - pwsh: |
                    if ('$(UpdateCodeResult)' -eq 'Succeeded') {
                      $prTitle = 'Update AutoRest C# version to $(AutorestCSharpVersion)'
                    } else {
                      $prTitle = 'Failed Update AutoRest C# version to $(AutorestCSharpVersion)'
                    }

                    Write-Host "Setting variable PrTitle to '$prTitle'"
                    Write-Host "##vso[task.setvariable variable=PrTitle]$prTitle"
                  displayName: 'Build PR Title'
                - task: PowerShell@2
                  displayName: Create pull request
                  inputs:
                    pwsh: true
                    filePath: $(Build.SourcesDirectory)/azure-sdk-tools/eng/common/scripts/Submit-PullRequest.ps1
                    arguments: >
                      -RepoOwner "Azure"
                      -RepoName "azure-sdk-for-net"
                      -BaseBranch "main"
                      -PROwner "azure-sdk"
                      -PRBranch $(BranchName)
                      -AuthToken "$(azuresdk-github-pat)"
                      -PRTitle "$(PrTitle)"
                      -PRBody "Update AutoRest C# version to $(AutorestCSharpVersion)"
