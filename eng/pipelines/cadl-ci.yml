trigger:
  branches:
    include:
    - feature/*
  paths:
    include:
    - src/CADL.Extension/

pr:
  branches:
    include:
    - feature/*
  paths:
    include:
    - src/CADL.Extension/

pool:
  name: "azsdk-pool-mms-ubuntu-2004-general"
  vmImage: "MMSUbuntu20.04"

variables:
  - name: skipComponentGovernanceDetection
    value: true
  - name: NodeVersion
    value: '16.x'
  - name: VAR_ARTIFACT_NAME
    value: 'CadlCsharpEmitter'
  - name: VAR_BUILD_ARTIFACT_STAGING_DIRECTORY
    value: $(Build.ArtifactStagingDirectory)
  - name: BlobFeedUrl
    value: https://azuresdkartifacts.blob.core.windows.net/azure-sdk-tools/index.json
  - name: OfficialBuildId
    value: $(Build.BuildNumber)
  - name: NugetSecurityAnalysisWarningLevel
    value: 'none'

resources:
  repositories:
    - repository: azure-sdk-tools
      type: github
      name: Azure/azure-sdk-tools
      endpoint: azure
      ref: refs/tags/azure-sdk-tools_20220404.3
    - repository: azure-sdk-for-net
      type: github
      name: Azure/azure-sdk-for-net
      endpoint: azure
    - repository: azure-sdk-build-tools
      type: git
      name: internal/azure-sdk-build-tools
      ref: refs/tags/azure-sdk-build-tools_20221212.1
stages:
  - stage: 'Build_and_Test'
    jobs:
      - job: 'Build'
        timeoutInMinutes: 120
        steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '$(NodeVersion)'
          displayName: Install Node.js
        - task: Npm@1
          displayName: 'Install Dependencies for CADL csharp'
          inputs:
            command: install
            workingDir: $(Build.SourcesDirectory)
        - task: Npm@1
          displayName: 'Build CADL csharp emitter'
          inputs:
            command: custom
            customCommand: run build
            workingDir: $(Build.SourcesDirectory)/src/CADL.Extension/Emitter.Csharp
        - task: Npm@1
          displayName: 'Pack CADL Csharp emitter'
          inputs:
            command: custom
            customCommand: pack
            workingDir: $(Build.SourcesDirectory)/src/CADL.Extension/Emitter.Csharp
        - pwsh: ./eng/ExecuteCadlEmitterUnitTests.ps1
          displayName: 'Unit_Test for CADL emitter'
          workingDirectory: $(Build.SourcesDirectory)
        - script: |
            mkdir -p $(VAR_BUILD_ARTIFACT_STAGING_DIRECTORY)/packages
            cp azure-tools-cadl-csharp-*.tgz $(VAR_BUILD_ARTIFACT_STAGING_DIRECTORY)/packages/
          displayName: 'Copy CADL Csharp emitter library to staging dir'
          workingDirectory: $(Build.SourcesDirectory)/src/CADL.Extension/Emitter.Csharp
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(VAR_BUILD_ARTIFACT_STAGING_DIRECTORY)/packages'
            ArtifactName: '$(VAR_ARTIFACT_NAME)'
  - ${{if and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['System.TeamProject'], 'internal'))}}:
    - stage: 'Release'
      dependsOn: Build_and_Test
      condition: succeeded()
      jobs:
      - job: 'approve'
        pool: server
        steps:
        - task: ManualValidation@0
          inputs:
            notifyUsers: 'Click to approve if it''s an expected public release.'
      - job: 'release'
        dependsOn: approve
        condition: and(succeeded(), ne(variables['USER_SKIP_PUBLIC_RELEASE'], 'true'))
        steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '$(NodeVersion)'
          displayName: 'Install Node.js'

        - task: DownloadBuildArtifacts@0
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: '$(VAR_ARTIFACT_NAME)'
            downloadPath: '$(VAR_BUILD_ARTIFACT_STAGING_DIRECTORY)'

        - script: |
            echo -e "\e[32m[$(date -u)] LOG: Ensure npm is installed"
            sudo npm install -g npm@6.14.16 || { echo 'npm install failed' ; exit 1; }
            sudo npm install -g pnpm || { echo 'pnpm install failed' ; exit 1; }

            echo -e "\e[32m[$(date -u)] LOG: publish the package"
            echo "//registry.npmjs.org/:_authToken=$(azure-sdk-npm-token)" >> ~/.npmrc
            for file in $(VAR_BUILD_ARTIFACT_STAGING_DIRECTORY)/$(VAR_ARTIFACT_NAME)/*.tgz
            do
              echo -e "\e[32m[$(date -u)] LOG: File: $file"
              npm publish $file --access public || { echo "publish $file failed" ; exit 1; }
            done
            rm ~/.npmrc || { echo 'rm ~/.npmrc failed' ; exit 1; }
          displayName: Publish
          workingDirectory: $(Build.SourcesDirectory)