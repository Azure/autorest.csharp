trigger: none
pr: none
schedules:
- cron: "0 20 * * *"
  displayName: "4AM (UTC +8) daily mock test"
  branches:
    include:
    - feature/v3

variables:
  OfficialBuildId: $(Build.BuildNumber)
  nugetMultiFeedWarnLevel: 'none'

resources:
  repositories:
    - repository: azure-sdk-tools
      type: github
      name: Azure/azure-sdk-tools
      endpoint: azure
    - repository: azure-sdk-for-net
      type: github
      name: Azure/azure-sdk-for-net
      endpoint: azure
    - repository: azure-sdk-build-tools
      type: git
      name: internal/azure-sdk-build-tools
      ref: refs/tags/azure-sdk-build-tools_20230829.1

stages:
  - stage: 'Build_and_Test'
    jobs:
      - job: MockTest
        timeoutInMinutes: 240
        pool:
          name: azsdk-pool-mms-win-2022-general
          vmImage: windows-2022
        steps:
          - checkout: self
          - checkout: azure-sdk-tools
          - task: UseDotNet@2
            displayName: 'Use .NET Core SDK'
            retryCountOnTaskFailure: 3
            inputs:
              useGlobalJson: true
              performMultiLevelLookup: true
          - task: NodeTool@0
            displayName: "Install Node 18.x"
            inputs:
              versionSpec: '18.x'
          - script: |
              npm ci
            displayName: "Install packages"
            workingDirectory: $(Build.SourcesDirectory)/autorest.csharp
          - script: |
              npm ls -a
            displayName: "List packages"
            workingDirectory: $(Build.SourcesDirectory)/autorest.csharp
          - script: 'dotnet pack src/AutoRest.CSharp/AutoRest.CSharp.csproj -o $(Build.ArtifactStagingDirectory) -warnaserror -c Release'
            name: Package
            displayName: 'Package'
            workingDirectory: $(Build.SourcesDirectory)/autorest.csharp
            env:
              DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
              DOTNET_CLI_TELEMETRY_OPTOUT: 1
              DOTNET_MULTILEVEL_LOOKUP: 0
          - script: |
              pwsh ./eng/GenerateAndExecuteMockTest.ps1
            displayName: "GenerateAndExecuteMockTest"
            workingDirectory: $(Build.SourcesDirectory)/autorest.csharp
          - task: PublishTestResults@2
            condition: always()
            displayName: "Publish Results"
            inputs:
              testResultsFiles: "**/*.trx"
              testRunTitle: "Publish Results for build $(OfficialBuildId)"
              testResultsFormat: "VSTest"
              mergeTestResults: false
          - task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
            condition: succeededOrFailed()
            displayName: Generate Code Coverage Reports
            inputs:
              reports: $(Build.SourcesDirectory)\**\coverage.cobertura.xml
              targetdir: $(Build.ArtifactStagingDirectory)\coverage
              reporttypes: Cobertura
              filefilters: +$(Build.SourcesDirectory)\**
              assemblyfilters: '+Azure.ResourceManager.*;-Azure.ResourceManager.*.Tests'
              verbosity: Verbose
              classfilters: '-Azure.Core.*'
          - task: PublishCodeCoverageResults@1
            condition: succeededOrFailed()
            displayName: Publish Code Coverage Reports
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(Build.ArtifactStagingDirectory)\coverage\Cobertura.xml
